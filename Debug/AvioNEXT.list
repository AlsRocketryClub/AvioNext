
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186f0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  080189c0  080189c0  000289c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018dd0  08018dd0  00028dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018dd8  08018dd8  00028dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018ddc  08018ddc  00028ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018de0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003310  24000154  08018f34  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003464  08018f34  00033464  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003706e  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006bca  00000000  00000000  00067233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c18  00000000  00000000  0006de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000221e  00000000  00000000  00070a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f72a  00000000  00000000  00072c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ec37  00000000  00000000  000b2360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e5b9  00000000  00000000  000f0f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c680  00000000  00000000  0026f550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080189a8 	.word	0x080189a8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	080189a8 	.word	0x080189a8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fdd2 	bl	800829c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fd16 	bl	800f130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fd10 	bl	800f130 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fdc0 	bl	800829c <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	240010c8 	.word	0x240010c8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fda8 	bl	800829c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fcec 	bl	800f130 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fee1 	bl	800f528 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fd95 	bl	800829c <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	240010c8 	.word	0x240010c8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fd7e 	bl	800829c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fcc2 	bl	800f130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e fcbc 	bl	800f130 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fd6c 	bl	800829c <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	240010c8 	.word	0x240010c8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoRA_Read_Register+0x48>)
 800091a:	f007 fcbf 	bl	800829c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800091e:	1df9      	adds	r1, r7, #7
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000926:	f00e fc03 	bl	800f130 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 800092a:	f107 010f 	add.w	r1, r7, #15
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000934:	f00e fdf8 	bl	800f528 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <LoRA_Read_Register+0x48>)
 8000940:	f007 fcac 	bl	800829c <HAL_GPIO_WritePin>

	return reg_value;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58020000 	.word	0x58020000
 8000954:	24001150 	.word	0x24001150

08000958 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoRA_Write_Register+0x54>)
 800097a:	f007 fc8f 	bl	800829c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800097e:	1df9      	adds	r1, r7, #7
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	2201      	movs	r2, #1
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000986:	f00e fbd3 	bl	800f130 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800098a:	1db9      	adds	r1, r7, #6
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000992:	f00e fbcd 	bl	800f130 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <LoRA_Write_Register+0x54>)
 800099e:	f007 fc7d 	bl	800829c <HAL_GPIO_WritePin>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58020000 	.word	0x58020000
 80009b0:	24001150 	.word	0x24001150

080009b4 <LoRA_sleep>:


void LoRA_sleep(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffcc 	bl	8000958 <LoRA_Write_Register>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	17c8      	asrs	r0, r1, #31
 80009d0:	460a      	mov	r2, r1
 80009d2:	4603      	mov	r3, r0
 80009d4:	1355      	asrs	r5, r2, #13
 80009d6:	04d4      	lsls	r4, r2, #19
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <LoRA_set_frequency+0x78>)
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	4620      	mov	r0, r4
 80009e0:	4629      	mov	r1, r5
 80009e2:	f7ff fcfd 	bl	80003e0 <__aeabi_uldivmod>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80009ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	0c02      	lsrs	r2, r0, #16
 80009fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	b2d3      	uxtb	r3, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff ffa6 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	0a02      	lsrs	r2, r0, #8
 8000a1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a1e:	0a0b      	lsrs	r3, r1, #8
 8000a20:	b2d3      	uxtb	r3, r2
 8000a22:	4619      	mov	r1, r3
 8000a24:	2007      	movs	r0, #7
 8000a26:	f7ff ff97 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f7ff ff92 	bl	8000958 <LoRA_Write_Register>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	01e84800 	.word	0x01e84800

08000a40 <LoRA_idle>:

void LoRA_idle(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000a44:	2181      	movs	r1, #129	; 0x81
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ff86 	bl	8000958 <LoRA_Write_Register>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000a5a:	231b      	movs	r3, #27
 8000a5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b78      	cmp	r3, #120	; 0x78
 8000a62:	d809      	bhi.n	8000a78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3b2d      	subs	r3, #45	; 0x2d
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6e:	1052      	asrs	r2, r2, #1
 8000a70:	17db      	asrs	r3, r3, #31
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e00b      	b.n	8000a90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000a7c:	d808      	bhi.n	8000a90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	331e      	adds	r3, #30
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f7ff ff59 	bl	8000958 <LoRA_Write_Register>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	66666667 	.word	0x66666667

08000ab4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b11      	cmp	r3, #17
 8000ac0:	dd0f      	ble.n	8000ae2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b14      	cmp	r3, #20
 8000ac6:	dd01      	ble.n	8000acc <LoRA_setTxPower+0x18>
        level = 20;
 8000ac8:	2314      	movs	r3, #20
 8000aca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b03      	subs	r3, #3
 8000ad0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ad2:	2187      	movs	r1, #135	; 0x87
 8000ad4:	204d      	movs	r0, #77	; 0x4d
 8000ad6:	f7ff ff3f 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ada:	208c      	movs	r0, #140	; 0x8c
 8000adc:	f7ff ffb8 	bl	8000a50 <LoRA_setOCP>
 8000ae0:	e00b      	b.n	8000afa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	dc01      	bgt.n	8000aec <LoRA_setTxPower+0x38>
        level = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000aec:	2184      	movs	r1, #132	; 0x84
 8000aee:	204d      	movs	r0, #77	; 0x4d
 8000af0:	f7ff ff32 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f7ff ffab 	bl	8000a50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3b02      	subs	r3, #2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f7ff ff22 	bl	8000958 <LoRA_Write_Register>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000b20:	201d      	movs	r0, #29
 8000b22:	f7ff fef1 	bl	8000908 <LoRA_Read_Register>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	201d      	movs	r0, #29
 8000b32:	f7ff ff11 	bl	8000958 <LoRA_Write_Register>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <LoRA_begin+0x98>)
 8000b4a:	f007 fba7 	bl	800829c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <LoRA_begin+0x9c>)
 8000b56:	f007 fba1 	bl	800829c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000b5a:	2042      	movs	r0, #66	; 0x42
 8000b5c:	f7ff fed4 	bl	8000908 <LoRA_Read_Register>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000b66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	491b      	ldr	r1, [pc, #108]	; (8000bdc <LoRA_begin+0xa0>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f016 fdb3 	bl	80176dc <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fbd2 	bl	8000324 <strlen>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f016 f953 	bl	8016e34 <CDC_Transmit_HS>

	LoRA_sleep();
 8000b8e:	f7ff ff11 	bl	80009b4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <LoRA_begin+0xa4>)
 8000b94:	f7ff ff16 	bl	80009c4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff fedc 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f7ff fed8 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f7ff fead 	bl	8000908 <LoRA_Read_Register>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f043 0303 	orr.w	r3, r3, #3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	200c      	movs	r0, #12
 8000bba:	f7ff fecd 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	2026      	movs	r0, #38	; 0x26
 8000bc2:	f7ff fec9 	bl	8000958 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000bc6:	2011      	movs	r0, #17
 8000bc8:	f7ff ff74 	bl	8000ab4 <LoRA_setTxPower>

}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	; 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58020c00 	.word	0x58020c00
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	080189c0 	.word	0x080189c0
 8000be0:	33bca100 	.word	0x33bca100

08000be4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000be8:	f7ff ff98 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	200d      	movs	r0, #13
 8000bf0:	f7ff feb2 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2022      	movs	r0, #34	; 0x22
 8000bf8:	f7ff feae 	bl	8000958 <LoRA_Write_Register>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000c04:	2183      	movs	r1, #131	; 0x83
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fea6 	bl	8000958 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000c0c:	bf00      	nop
 8000c0e:	2012      	movs	r0, #18
 8000c10:	f7ff fe7a 	bl	8000908 <LoRA_Read_Register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f7      	beq.n	8000c0e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c1e:	2185      	movs	r1, #133	; 0x85
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fe99 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000c26:	2108      	movs	r1, #8
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f7ff fe95 	bl	8000958 <LoRA_Write_Register>

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f7ff fe63 	bl	8000908 <LoRA_Read_Register>
 8000c42:	4603      	mov	r3, r0
 8000c44:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000c46:	f7ff ff69 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2012      	movs	r0, #18
 8000c52:	f7ff fe81 	bl	8000958 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d016      	beq.n	8000c8e <LoRA_parsePacket+0x5c>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000c6a:	2013      	movs	r0, #19
 8000c6c:	f7ff fe4c 	bl	8000908 <LoRA_Read_Register>
 8000c70:	4603      	mov	r3, r0
 8000c72:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff fe47 	bl	8000908 <LoRA_Read_Register>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f7ff fe6a 	bl	8000958 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c84:	2185      	movs	r1, #133	; 0x85
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fe66 	bl	8000958 <LoRA_Write_Register>
 8000c8c:	e00d      	b.n	8000caa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fe3a 	bl	8000908 <LoRA_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b85      	cmp	r3, #133	; 0x85
 8000c98:	d007      	beq.n	8000caa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	200d      	movs	r0, #13
 8000c9e:	f7ff fe5b 	bl	8000958 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000ca2:	2185      	movs	r1, #133	; 0x85
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fe57 	bl	8000958 <LoRA_Write_Register>
	}
	return packetLenght;
 8000caa:	687b      	ldr	r3, [r7, #4]

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b0c4      	sub	sp, #272	; 0x110
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000cc4:	f7ff febc 	bl	8000a40 <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	21ff      	movs	r1, #255	; 0xff
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f878 	bl	8000dc4 <recv_packet>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d022      	beq.n	8000d20 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f003 f82c 	bl	8003d38 <HAL_Delay>
		strcat(debug, " was thrown away");
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb1d 	bl	8000324 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <LoRA_sendPacket+0x10c>)
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfc:	6028      	str	r0, [r5, #0]
 8000cfe:	6069      	str	r1, [r5, #4]
 8000d00:	60aa      	str	r2, [r5, #8]
 8000d02:	60eb      	str	r3, [r5, #12]
 8000d04:	7823      	ldrb	r3, [r4, #0]
 8000d06:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb09 	bl	8000324 <strlen>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f016 f88a 	bl	8016e34 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000d20:	2012      	movs	r0, #18
 8000d22:	f7ff fdf1 	bl	8000908 <LoRA_Read_Register>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <LoRA_sendPacket+0x90>
 8000d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d033      	beq.n	8000dac <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000d44:	f7ff ff4e 	bl	8000be4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d4e:	e011      	b.n	8000d74 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fdf7 	bl	8000958 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	f7ff fad1 	bl	8000324 <strlen>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8e1      	bhi.n	8000d50 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f7ff fac5 	bl	8000324 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2022      	movs	r0, #34	; 0x22
 8000da2:	f7ff fdd9 	bl	8000958 <LoRA_Write_Register>
    	LoRA_endPacket();
 8000da6:	f7ff ff2b 	bl	8000c00 <LoRA_endPacket>
 8000daa:	e004      	b.n	8000db6 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000dac:	2185      	movs	r1, #133	; 0x85
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fdd2 	bl	8000958 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	080189c4 	.word	0x080189c4

08000dc4 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000dce:	f7ff ff30 	bl	8000c32 <LoRA_parsePacket>
 8000dd2:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dc01      	bgt.n	8000de0 <recv_packet+0x1c>
  {
    return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e01c      	b.n	8000e1a <recv_packet+0x56>
  }
  if(packet_length){
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d018      	beq.n	8000e18 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e00a      	b.n	8000e02 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	18d4      	adds	r4, r2, r3
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fd88 	bl	8000908 <LoRA_Read_Register>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf0      	blt.n	8000dec <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	e000      	b.n	8000e1a <recv_packet+0x56>
  }
  else{
    return 0;
 8000e18:	2300      	movs	r3, #0
  }
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}

08000e22 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fa77 	bl	8000324 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000e3e:	8af9      	ldrh	r1, [r7, #22]
 8000e40:	460b      	mov	r3, r1
 8000e42:	3b01      	subs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	b28b      	uxth	r3, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	4691      	mov	r9, r2
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e62:	b28b      	uxth	r3, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	461c      	mov	r4, r3
 8000e68:	4615      	mov	r5, r2
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	00eb      	lsls	r3, r5, #3
 8000e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e78:	00e2      	lsls	r2, r4, #3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8000e8c:	f002 ff48 	bl	8003d20 <HAL_GetTick>
 8000e90:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 8000e92:	210d      	movs	r1, #13
 8000e94:	2003      	movs	r0, #3
 8000e96:	f001 fe37 	bl	8002b08 <rand_range>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2264      	movs	r2, #100	; 0x64
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff05 	bl	8000cb4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	4619      	mov	r1, r3
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff ff88 	bl	8000dc4 <recv_packet>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fa27 	bl	8000310 <strcmp>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01a      	beq.n	8000efe <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fef3 	bl	8000cb4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8000ece:	f002 ff27 	bl	8003d20 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d2e5      	bcs.n	8000eaa <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 8000ede:	210d      	movs	r1, #13
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 fe11 	bl	8002b08 <rand_range>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fedf 	bl	8000cb4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8000ef6:	f002 ff13 	bl	8003d20 <HAL_GetTick>
 8000efa:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 8000efc:	e7d5      	b.n	8000eaa <reliable_send_packet+0x88>
				break;
 8000efe:	bf00      	nop
 8000f00:	46b5      	mov	sp, r6
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f0c <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"
#include "usb_device.h"

void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	f507 744e 	add.w	r4, r7, #824	; 0x338
 8000f18:	f5a4 744b 	sub.w	r4, r4, #812	; 0x32c
 8000f1c:	6020      	str	r0, [r4, #0]
 8000f1e:	f507 704e 	add.w	r0, r7, #824	; 0x338
 8000f22:	f5a0 704c 	sub.w	r0, r0, #816	; 0x330
 8000f26:	6001      	str	r1, [r0, #0]
 8000f28:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8000f2c:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 8000f30:	600a      	str	r2, [r1, #0]
 8000f32:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8000f36:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8000f3a:	6013      	str	r3, [r2, #0]
  //from here it's okay
  int communication_state = initial_communication_state;
 8000f3c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000f40:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
  int max_packet_count = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  char previous_packet[MAX_PKT_LENGTH] = "";
 8000f4a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	3304      	adds	r3, #4
 8000f58:	22fb      	movs	r2, #251	; 0xfb
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f016 fc0b 	bl	8017778 <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 8000f62:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f66:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	22fb      	movs	r2, #251	; 0xfb
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f016 fbff 	bl	8017778 <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8000f7a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f7e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	3304      	adds	r3, #4
 8000f88:	22fb      	movs	r2, #251	; 0xfb
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f016 fbf3 	bl	8017778 <memset>
  uint32_t previousTime = HAL_GetTick();
 8000f92:	f002 fec5 	bl	8003d20 <HAL_GetTick>
 8000f96:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
  uint32_t wait_time = rand_range(3, 13)*100;
 8000f9a:	210d      	movs	r1, #13
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 fdb3 	bl	8002b08 <rand_range>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2264      	movs	r2, #100	; 0x64
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8000fae:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d150      	bne.n	8001058 <communicationHandler+0x14c>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8000fb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff01 	bl	8000dc4 <recv_packet>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f2      	beq.n	8000fae <communicationHandler+0xa2>
        {
          previousTime = HAL_GetTick();
 8000fc8:	f002 feaa 	bl	8003d20 <HAL_GetTick>
 8000fcc:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330

          if(strcmp(received_packet, "$") == 0)
 8000fd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fd4:	49ca      	ldr	r1, [pc, #808]	; (8001300 <communicationHandler+0x3f4>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f99a 	bl	8000310 <strcmp>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <communicationHandler+0xde>
          {
            communication_state = SENDING_RELIABLE;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000fe8:	e7e1      	b.n	8000fae <communicationHandler+0xa2>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 8000fea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8000fee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ff2:	49c4      	ldr	r1, [pc, #784]	; (8001304 <communicationHandler+0x3f8>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f016 fb91 	bl	801771c <siscanf>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d103      	bne.n	8001008 <communicationHandler+0xfc>
          {
            communication_state = SENDING_STREAM;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001006:	e7d2      	b.n	8000fae <communicationHandler+0xa2>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 8001008:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800100c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f97c 	bl	8000310 <strcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <communicationHandler+0x11e>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 800101e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe46 	bl	8000cb4 <LoRA_sendPacket>
 8001028:	e7c1      	b.n	8000fae <communicationHandler+0xa2>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 800102a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800102e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f016 fbd3 	bl	80177e0 <strcpy>
            LoRA_sendPacket(received_packet);
 800103a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe38 	bl	8000cb4 <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 8001044:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001048:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800104c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4610      	mov	r0, r2
 8001054:	4798      	blx	r3
 8001056:	e7aa      	b.n	8000fae <communicationHandler+0xa2>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8001058:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800105c:	2b01      	cmp	r3, #1
 800105e:	d14a      	bne.n	80010f6 <communicationHandler+0x1ea>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001060:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001064:	21ff      	movs	r1, #255	; 0xff
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff feac 	bl	8000dc4 <recv_packet>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01a      	beq.n	80010a8 <communicationHandler+0x19c>
        {
          previousTime = HAL_GetTick();
 8001072:	f002 fe55 	bl	8003d20 <HAL_GetTick>
 8001076:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
          if(strcmp(received_packet, "$") == 0)
 800107a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800107e:	49a0      	ldr	r1, [pc, #640]	; (8001300 <communicationHandler+0x3f4>)
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f945 	bl	8000310 <strcmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <communicationHandler+0x188>
          {
            communication_state = SENDING_RELIABLE;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001092:	e78c      	b.n	8000fae <communicationHandler+0xa2>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8001094:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001098:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800109c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4610      	mov	r0, r2
 80010a4:	4798      	blx	r3
 80010a6:	e782      	b.n	8000fae <communicationHandler+0xa2>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 80010a8:	f002 fe3a 	bl	8003d20 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f4bf af78 	bcs.w	8000fae <communicationHandler+0xa2>
        {
          wait_time = rand_range(3, 13)*100;
 80010be:	210d      	movs	r1, #13
 80010c0:	2003      	movs	r0, #3
 80010c2:	f001 fd21 	bl	8002b08 <rand_range>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2264      	movs	r2, #100	; 0x64
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
          previousTime = HAL_GetTick();
 80010d2:	f002 fe25 	bl	8003d20 <HAL_GetTick>
 80010d6:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 80010da:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4988      	ldr	r1, [pc, #544]	; (8001304 <communicationHandler+0x3f8>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f016 faf9 	bl	80176dc <siprintf>
          LoRA_sendPacket(general_buffer);
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fde0 	bl	8000cb4 <LoRA_sendPacket>
 80010f4:	e75b      	b.n	8000fae <communicationHandler+0xa2>
        }
      }
      else if(communication_state == SENDING_STREAM)
 80010f6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d11f      	bne.n	800113e <communicationHandler+0x232>
      {
        if(max_packet_count == 0)
 80010fe:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <communicationHandler+0x208>
        {
          communication_state = TRANSITIONING;
 8001106:	2304      	movs	r3, #4
 8001108:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 800110c:	487c      	ldr	r0, [pc, #496]	; (8001300 <communicationHandler+0x3f4>)
 800110e:	f7ff fdd1 	bl	8000cb4 <LoRA_sendPacket>
 8001112:	e74c      	b.n	8000fae <communicationHandler+0xa2>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 8001114:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8001118:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800111c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4610      	mov	r0, r2
 8001124:	4798      	blx	r3
 8001126:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
          LoRA_sendPacket(msg);
 800112a:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 800112e:	f7ff fdc1 	bl	8000cb4 <LoRA_sendPacket>
          max_packet_count--;
 8001132:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001136:	3b01      	subs	r3, #1
 8001138:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800113c:	e737      	b.n	8000fae <communicationHandler+0xa2>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 800113e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001142:	2b02      	cmp	r3, #2
 8001144:	f040 8091 	bne.w	800126a <communicationHandler+0x35e>
      {
        reliable_send_packet("*");
 8001148:	486f      	ldr	r0, [pc, #444]	; (8001308 <communicationHandler+0x3fc>)
 800114a:	f7ff fe6a 	bl	8000e22 <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 800114e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001152:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8001156:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800115a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800116a:	e040      	b.n	80011ee <communicationHandler+0x2e2>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 800116c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001170:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b24      	cmp	r3, #36	; 0x24
 8001184:	d019      	beq.n	80011ba <communicationHandler+0x2ae>
 8001186:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800118a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b2a      	cmp	r3, #42	; 0x2a
 800119e:	d00c      	beq.n	80011ba <communicationHandler+0x2ae>
 80011a0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011a4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b21      	cmp	r3, #33	; 0x21
 80011b8:	d107      	bne.n	80011ca <communicationHandler+0x2be>
        	{
        		HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f002 fdbc 	bl	8003d38 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 80011c0:	212d      	movs	r1, #45	; 0x2d
 80011c2:	4852      	ldr	r0, [pc, #328]	; (800130c <communicationHandler+0x400>)
 80011c4:	f015 fe36 	bl	8016e34 <CDC_Transmit_HS>
        	{
 80011c8:	e00c      	b.n	80011e4 <communicationHandler+0x2d8>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 80011ca:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011ce:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe1f 	bl	8000e22 <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 80011e4:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80011ee:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011f2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbb5      	blt.n	800116c <communicationHandler+0x260>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 8001200:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001204:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d117      	bne.n	800123e <communicationHandler+0x332>
        {
          communication_state = RECEIVING_STREAM;
 800120e:	2301      	movs	r3, #1
 8001210:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          max_packet_count = config.streamable_packets;
 8001214:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001218:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
          sprintf(general_buffer, "! %d", max_packet_count);
 8001222:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4936      	ldr	r1, [pc, #216]	; (8001304 <communicationHandler+0x3f8>)
 800122c:	4618      	mov	r0, r3
 800122e:	f016 fa55 	bl	80176dc <siprintf>
          LoRA_sendPacket(general_buffer);
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd3c 	bl	8000cb4 <LoRA_sendPacket>
 800123c:	e6b7      	b.n	8000fae <communicationHandler+0xa2>
        }
        else if(config.mode==TRANSITIONING)
 800123e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001242:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b04      	cmp	r3, #4
 800124a:	d106      	bne.n	800125a <communicationHandler+0x34e>
        {
          communication_state = TRANSITIONING;
 800124c:	2304      	movs	r3, #4
 800124e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 8001252:	482b      	ldr	r0, [pc, #172]	; (8001300 <communicationHandler+0x3f4>)
 8001254:	f7ff fd2e 	bl	8000cb4 <LoRA_sendPacket>
 8001258:	e6a9      	b.n	8000fae <communicationHandler+0xa2>
        }
        else
        {
            HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f002 fd6c 	bl	8003d38 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 8001260:	212a      	movs	r1, #42	; 0x2a
 8001262:	482b      	ldr	r0, [pc, #172]	; (8001310 <communicationHandler+0x404>)
 8001264:	f015 fde6 	bl	8016e34 <CDC_Transmit_HS>
 8001268:	e6a1      	b.n	8000fae <communicationHandler+0xa2>
        }
      }
      else if(communication_state == TRANSITIONING)
 800126a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800126e:	2b04      	cmp	r3, #4
 8001270:	f47f ae9d 	bne.w	8000fae <communicationHandler+0xa2>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001274:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001278:	21ff      	movs	r1, #255	; 0xff
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fda2 	bl	8000dc4 <recv_packet>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01e      	beq.n	80012c4 <communicationHandler+0x3b8>
          {
            previousTime = HAL_GetTick();
 8001286:	f002 fd4b 	bl	8003d20 <HAL_GetTick>
 800128a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
            if(strcmp(received_packet, "*")==0)
 800128e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001292:	491d      	ldr	r1, [pc, #116]	; (8001308 <communicationHandler+0x3fc>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f83b 	bl	8000310 <strcmp>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f ae86 	bne.w	8000fae <communicationHandler+0xa2>
            {
              strcpy(previous_packet, received_packet);
 80012a2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80012a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f016 fa97 	bl	80177e0 <strcpy>
              communication_state = RECEIVING_RELIABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
              LoRA_sendPacket(received_packet);
 80012b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fcf9 	bl	8000cb4 <LoRA_sendPacket>
 80012c2:	e674      	b.n	8000fae <communicationHandler+0xa2>
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 80012c4:	f002 fd2c 	bl	8003d20 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f4bf ae6a 	bcs.w	8000fae <communicationHandler+0xa2>
          {
            wait_time = rand_range(3, 13)*100;
 80012da:	210d      	movs	r1, #13
 80012dc:	2003      	movs	r0, #3
 80012de:	f001 fc13 	bl	8002b08 <rand_range>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
            previousTime = HAL_GetTick();
 80012ee:	f002 fd17 	bl	8003d20 <HAL_GetTick>
 80012f2:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
            LoRA_sendPacket("$");
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <communicationHandler+0x3f4>)
 80012f8:	f7ff fcdc 	bl	8000cb4 <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 80012fc:	e657      	b.n	8000fae <communicationHandler+0xa2>
 80012fe:	bf00      	nop
 8001300:	080189d8 	.word	0x080189d8
 8001304:	080189dc 	.word	0x080189dc
 8001308:	080189e4 	.word	0x080189e4
 800130c:	080189e8 	.word	0x080189e8
 8001310:	08018a18 	.word	0x08018a18

08001314 <usbReceiveHandle>:

//to do: move usb
#define usbBufferLen 256
uint8_t usbDataBuffer[usbBufferLen];
uint32_t usbBytesReady = 0;
int usbReceiveHandle(char* output){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <usbReceiveHandle+0x38>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4909      	ldr	r1, [pc, #36]	; (8001350 <usbReceiveHandle+0x3c>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f016 fa5f 	bl	80177f0 <memcpy>
		output[temp] = '\0';
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <usbReceiveHandle+0x38>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	24000270 	.word	0x24000270
 8001350:	24000170 	.word	0x24000170

08001354 <groundstationReliableReceiveHandle>:


void groundstationReliableReceiveHandle(char* received_packet) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7fe ffe1 	bl	8000324 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f015 fd64 	bl	8016e34 <CDC_Transmit_HS>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <groundstationStreamReceiveHandle>:

void groundstationStreamReceiveHandle(char* received_packet) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7fe ffd1 	bl	8000324 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f015 fd54 	bl	8016e34 <CDC_Transmit_HS>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <groundstationStreamSendHandle>:

char* groundstationStreamSendHandle(int remainingPacketCount) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	return "Ground station shouldn't be streaming!\n";
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <groundstationStreamSendHandle+0x18>)
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	08018a44 	.word	0x08018a44

080013b0 <groundstationReliableSendHandle>:

char input[usbBufferLen];
char* groundstation_messages[1];

struct ReliableSendConfig groundstationReliableSendHandle() {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b0cb      	sub	sp, #300	; 0x12c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80013ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013be:	6018      	str	r0, [r3, #0]
	struct ReliableSendConfig config;
    CDC_Transmit_HS("\nState of other board: \n> ", strlen("\nState of other board: \n> "));
 80013c0:	211a      	movs	r1, #26
 80013c2:	4827      	ldr	r0, [pc, #156]	; (8001460 <groundstationReliableSendHandle+0xb0>)
 80013c4:	f015 fd36 	bl	8016e34 <CDC_Transmit_HS>
    //get input

    while(!usbReceiveHandle(input))
 80013c8:	bf00      	nop
 80013ca:	4826      	ldr	r0, [pc, #152]	; (8001464 <groundstationReliableSendHandle+0xb4>)
 80013cc:	f7ff ffa2 	bl	8001314 <usbReceiveHandle>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <groundstationReliableSendHandle+0x1a>
    {}

    groundstation_messages[0]=input;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <groundstationReliableSendHandle+0xb8>)
 80013d8:	4a22      	ldr	r2, [pc, #136]	; (8001464 <groundstationReliableSendHandle+0xb4>)
 80013da:	601a      	str	r2, [r3, #0]
    config.messages = groundstation_messages;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <groundstationReliableSendHandle+0xb8>)
 80013de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    config.messages_count = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    config.streamable_packets = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    //reliable_send_packet(input);

    char debug[usbBufferLen+10];
    sprintf(debug, "%s\n", input);
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <groundstationReliableSendHandle+0xb4>)
 80013f4:	491d      	ldr	r1, [pc, #116]	; (800146c <groundstationReliableSendHandle+0xbc>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f016 f970 	bl	80176dc <siprintf>
    CDC_Transmit_HS(debug, strlen(debug));
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4618      	mov	r0, r3
 8001402:	f7fe ff8f 	bl	8000324 <strlen>
 8001406:	4602      	mov	r2, r0
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f015 fd10 	bl	8016e34 <CDC_Transmit_HS>

    if(strcmp(input,"FIRE")==0)
 8001414:	4916      	ldr	r1, [pc, #88]	; (8001470 <groundstationReliableSendHandle+0xc0>)
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <groundstationReliableSendHandle+0xb4>)
 8001418:	f7fe ff7a 	bl	8000310 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <groundstationReliableSendHandle+0x80>
    {
      config.mode = RECEIVING_STREAM;
 8001422:	2301      	movs	r3, #1
 8001424:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      config.streamable_packets = 50;
 8001428:	2332      	movs	r3, #50	; 0x32
 800142a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800142e:	e002      	b.n	8001436 <groundstationReliableSendHandle+0x86>
      sprintf(sendMessage, "! %d", 50);
      LoRA_sendPacket(sendMessage);*/
    }
    else
    {
      config.mode = TRANSITIONING;
 8001430:	2304      	movs	r3, #4
 8001432:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      /*communication_state = TRANSITIONING;
      HAL_Delay(100);
      LoRA_sendPacket("$");*/
    }
    return config;
 8001436:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800143a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	461c      	mov	r4, r3
 8001442:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001446:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800144c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001450:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	08018a6c 	.word	0x08018a6c
 8001464:	24000274 	.word	0x24000274
 8001468:	24000374 	.word	0x24000374
 800146c:	08018a88 	.word	0x08018a88
 8001470:	08018a8c 	.word	0x08018a8c

08001474 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8001480:	ed97 7a00 	vldr	s14, [r7]
 8001484:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80014f4 <setServo+0x80>
 8001488:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800148c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014f8 <setServo+0x84>
 8001490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001494:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80014fc <setServo+0x88>
 8001498:	ee77 7a87 	vadd.f32	s15, s15, s14
 800149c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a0:	ee17 3a90 	vmov	r3, s15
 80014a4:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	2b03      	cmp	r3, #3
 80014ac:	d81a      	bhi.n	80014e4 <setServo+0x70>
 80014ae:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <setServo+0x40>)
 80014b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b4:	080014c5 	.word	0x080014c5
 80014b8:	080014cd 	.word	0x080014cd
 80014bc:	080014d5 	.word	0x080014d5
 80014c0:	080014dd 	.word	0x080014dd
		case 1:
			TIM4->CCR4 = timerVal;
 80014c4:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <setServo+0x8c>)
 80014c6:	89fb      	ldrh	r3, [r7, #14]
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 80014ca:	e00c      	b.n	80014e6 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <setServo+0x8c>)
 80014ce:	89fb      	ldrh	r3, [r7, #14]
 80014d0:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 80014d2:	e008      	b.n	80014e6 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 80014d4:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <setServo+0x8c>)
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 80014da:	e004      	b.n	80014e6 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 80014dc:	4a08      	ldr	r2, [pc, #32]	; (8001500 <setServo+0x8c>)
 80014de:	89fb      	ldrh	r3, [r7, #14]
 80014e0:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80014e2:	e000      	b.n	80014e6 <setServo+0x72>

		default:
			break;
 80014e4:	bf00      	nop
	}
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	43340000 	.word	0x43340000
 80014f8:	457a0000 	.word	0x457a0000
 80014fc:	453b8000 	.word	0x453b8000
 8001500:	40000800 	.word	0x40000800

08001504 <setLEDs>:

void setLEDs(void) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800150a:	2300      	movs	r3, #0
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
 800150e:	e181      	b.n	8001814 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8001510:	4aa1      	ldr	r2, [pc, #644]	; (8001798 <setLEDs+0x294>)
 8001512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001518:	2b03      	cmp	r3, #3
 800151a:	f200 8177 	bhi.w	800180c <setLEDs+0x308>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <setLEDs+0x20>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001535 	.word	0x08001535
 8001528:	080015e5 	.word	0x080015e5
 800152c:	08001695 	.word	0x08001695
 8001530:	08001745 	.word	0x08001745
		case 0:
			for (int j = 0; j < 3; j++) {
 8001534:	2300      	movs	r3, #0
 8001536:	633b      	str	r3, [r7, #48]	; 0x30
 8001538:	e042      	b.n	80015c0 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800153e:	e039      	b.n	80015b4 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001540:	4996      	ldr	r1, [pc, #600]	; (800179c <setLEDs+0x298>)
 8001542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001544:	4613      	mov	r3, r2
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	4413      	add	r3, r2
 800154a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800154c:	4413      	add	r3, r2
 800154e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001556:	fa41 f202 	asr.w	r2, r1, r2
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d013      	beq.n	8001588 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001562:	00da      	lsls	r2, r3, #3
 8001564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001566:	18d1      	adds	r1, r2, r3
 8001568:	4a8b      	ldr	r2, [pc, #556]	; (8001798 <setLEDs+0x294>)
 800156a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	4413      	add	r3, r2
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	4413      	add	r3, r2
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	440b      	add	r3, r1
 800157c:	3308      	adds	r3, #8
 800157e:	4a88      	ldr	r2, [pc, #544]	; (80017a0 <setLEDs+0x29c>)
 8001580:	213c      	movs	r1, #60	; 0x3c
 8001582:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001586:	e012      	b.n	80015ae <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158e:	18d1      	adds	r1, r2, r3
 8001590:	4a81      	ldr	r2, [pc, #516]	; (8001798 <setLEDs+0x294>)
 8001592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	440b      	add	r3, r1
 80015a4:	3308      	adds	r3, #8
 80015a6:	4a7e      	ldr	r2, [pc, #504]	; (80017a0 <setLEDs+0x29c>)
 80015a8:	211e      	movs	r1, #30
 80015aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	3301      	adds	r3, #1
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	ddc2      	ble.n	8001540 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	3301      	adds	r3, #1
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
 80015c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	ddb9      	ble.n	800153a <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ca:	e007      	b.n	80015dc <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 80015cc:	4a74      	ldr	r2, [pc, #464]	; (80017a0 <setLEDs+0x29c>)
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	2100      	movs	r1, #0
 80015d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	3301      	adds	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	2bb1      	cmp	r3, #177	; 0xb1
 80015e0:	ddf4      	ble.n	80015cc <setLEDs+0xc8>
			}
			break;
 80015e2:	e114      	b.n	800180e <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
 80015e8:	e042      	b.n	8001670 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80015ea:	2300      	movs	r3, #0
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	e039      	b.n	8001664 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80015f0:	496a      	ldr	r1, [pc, #424]	; (800179c <setLEDs+0x298>)
 80015f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015f4:	4613      	mov	r3, r2
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4413      	add	r3, r2
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	4413      	add	r3, r2
 80015fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	6a3a      	ldr	r2, [r7, #32]
 8001606:	fa41 f202 	asr.w	r2, r1, r2
 800160a:	4013      	ands	r3, r2
 800160c:	2b00      	cmp	r3, #0
 800160e:	d013      	beq.n	8001638 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001612:	00da      	lsls	r2, r3, #3
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	18d1      	adds	r1, r2, r3
 8001618:	4a5f      	ldr	r2, [pc, #380]	; (8001798 <setLEDs+0x294>)
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	4413      	add	r3, r2
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	3308      	adds	r3, #8
 800162e:	4a5d      	ldr	r2, [pc, #372]	; (80017a4 <setLEDs+0x2a0>)
 8001630:	213c      	movs	r1, #60	; 0x3c
 8001632:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001636:	e012      	b.n	800165e <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	00da      	lsls	r2, r3, #3
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	18d1      	adds	r1, r2, r3
 8001640:	4a55      	ldr	r2, [pc, #340]	; (8001798 <setLEDs+0x294>)
 8001642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4413      	add	r3, r2
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	3308      	adds	r3, #8
 8001656:	4a53      	ldr	r2, [pc, #332]	; (80017a4 <setLEDs+0x2a0>)
 8001658:	211e      	movs	r1, #30
 800165a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800165e:	6a3b      	ldr	r3, [r7, #32]
 8001660:	3301      	adds	r3, #1
 8001662:	623b      	str	r3, [r7, #32]
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	2b07      	cmp	r3, #7
 8001668:	ddc2      	ble.n	80015f0 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	2b02      	cmp	r3, #2
 8001674:	ddb9      	ble.n	80015ea <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	61fb      	str	r3, [r7, #28]
 800167a:	e007      	b.n	800168c <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 800167c:	4a49      	ldr	r2, [pc, #292]	; (80017a4 <setLEDs+0x2a0>)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2100      	movs	r1, #0
 8001682:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2bb1      	cmp	r3, #177	; 0xb1
 8001690:	ddf4      	ble.n	800167c <setLEDs+0x178>
			}
			break;
 8001692:	e0bc      	b.n	800180e <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	e042      	b.n	8001720 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e039      	b.n	8001714 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80016a0:	493e      	ldr	r1, [pc, #248]	; (800179c <setLEDs+0x298>)
 80016a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4413      	add	r3, r2
 80016ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	fa41 f202 	asr.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d013      	beq.n	80016e8 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	00da      	lsls	r2, r3, #3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	18d1      	adds	r1, r2, r3
 80016c8:	4a33      	ldr	r2, [pc, #204]	; (8001798 <setLEDs+0x294>)
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4413      	add	r3, r2
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	3308      	adds	r3, #8
 80016de:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <setLEDs+0x2a4>)
 80016e0:	213c      	movs	r1, #60	; 0x3c
 80016e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016e6:	e012      	b.n	800170e <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	18d1      	adds	r1, r2, r3
 80016f0:	4a29      	ldr	r2, [pc, #164]	; (8001798 <setLEDs+0x294>)
 80016f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	4413      	add	r3, r2
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3308      	adds	r3, #8
 8001706:	4a28      	ldr	r2, [pc, #160]	; (80017a8 <setLEDs+0x2a4>)
 8001708:	211e      	movs	r1, #30
 800170a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2b07      	cmp	r3, #7
 8001718:	ddc2      	ble.n	80016a0 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	3301      	adds	r3, #1
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	2b02      	cmp	r3, #2
 8001724:	ddb9      	ble.n	800169a <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8001726:	2338      	movs	r3, #56	; 0x38
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	e007      	b.n	800173c <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 800172c:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <setLEDs+0x2a4>)
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	2100      	movs	r1, #0
 8001732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	3301      	adds	r3, #1
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	2b69      	cmp	r3, #105	; 0x69
 8001740:	ddf4      	ble.n	800172c <setLEDs+0x228>
			}
			break;
 8001742:	e064      	b.n	800180e <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e04e      	b.n	80017e8 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	e045      	b.n	80017dc <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001750:	4912      	ldr	r1, [pc, #72]	; (800179c <setLEDs+0x298>)
 8001752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	fa41 f202 	asr.w	r2, r1, r2
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01f      	beq.n	80017b0 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	00da      	lsls	r2, r3, #3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	18d1      	adds	r1, r2, r3
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <setLEDs+0x294>)
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4413      	add	r3, r2
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	440b      	add	r3, r1
 800178c:	3308      	adds	r3, #8
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <setLEDs+0x2a8>)
 8001790:	213c      	movs	r1, #60	; 0x3c
 8001792:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001796:	e01e      	b.n	80017d6 <setLEDs+0x2d2>
 8001798:	08018bbc 	.word	0x08018bbc
 800179c:	24000c58 	.word	0x24000c58
 80017a0:	24000378 	.word	0x24000378
 80017a4:	24000640 	.word	0x24000640
 80017a8:	24000908 	.word	0x24000908
 80017ac:	24000ab0 	.word	0x24000ab0
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	18d1      	adds	r1, r2, r3
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <setLEDs+0x350>)
 80017ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	440b      	add	r3, r1
 80017cc:	3308      	adds	r3, #8
 80017ce:	4a22      	ldr	r2, [pc, #136]	; (8001858 <setLEDs+0x354>)
 80017d0:	211e      	movs	r1, #30
 80017d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3301      	adds	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b07      	cmp	r3, #7
 80017e0:	ddb6      	ble.n	8001750 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	3301      	adds	r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	ddad      	ble.n	800174a <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80017ee:	2338      	movs	r3, #56	; 0x38
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	e007      	b.n	8001804 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 80017f4:	4a18      	ldr	r2, [pc, #96]	; (8001858 <setLEDs+0x354>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2100      	movs	r1, #0
 80017fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3301      	adds	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b69      	cmp	r3, #105	; 0x69
 8001808:	ddf4      	ble.n	80017f4 <setLEDs+0x2f0>
			}
			break;
 800180a:	e000      	b.n	800180e <setLEDs+0x30a>
		default:
			break;
 800180c:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	3301      	adds	r3, #1
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
 8001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001816:	2b0d      	cmp	r3, #13
 8001818:	f77f ae7a 	ble.w	8001510 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 800181c:	23b2      	movs	r3, #178	; 0xb2
 800181e:	4a0f      	ldr	r2, [pc, #60]	; (800185c <setLEDs+0x358>)
 8001820:	210c      	movs	r1, #12
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <setLEDs+0x35c>)
 8001824:	f00e fac4 	bl	800fdb0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8001828:	23b2      	movs	r3, #178	; 0xb2
 800182a:	4a0e      	ldr	r2, [pc, #56]	; (8001864 <setLEDs+0x360>)
 800182c:	2108      	movs	r1, #8
 800182e:	480e      	ldr	r0, [pc, #56]	; (8001868 <setLEDs+0x364>)
 8001830:	f00e fabe 	bl	800fdb0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8001834:	236a      	movs	r3, #106	; 0x6a
 8001836:	4a0d      	ldr	r2, [pc, #52]	; (800186c <setLEDs+0x368>)
 8001838:	2104      	movs	r1, #4
 800183a:	480d      	ldr	r0, [pc, #52]	; (8001870 <setLEDs+0x36c>)
 800183c:	f00e fab8 	bl	800fdb0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8001840:	236a      	movs	r3, #106	; 0x6a
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <setLEDs+0x354>)
 8001844:	2100      	movs	r1, #0
 8001846:	480a      	ldr	r0, [pc, #40]	; (8001870 <setLEDs+0x36c>)
 8001848:	f00e fab2 	bl	800fdb0 <HAL_TIM_PWM_Start_DMA>

}
 800184c:	bf00      	nop
 800184e:	3738      	adds	r7, #56	; 0x38
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	08018bbc 	.word	0x08018bbc
 8001858:	24000ab0 	.word	0x24000ab0
 800185c:	24000378 	.word	0x24000378
 8001860:	240012bc 	.word	0x240012bc
 8001864:	24000640 	.word	0x24000640
 8001868:	240011d8 	.word	0x240011d8
 800186c:	24000908 	.word	0x24000908
 8001870:	24001224 	.word	0x24001224

08001874 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2102      	movs	r1, #2
 8001880:	4827      	ldr	r0, [pc, #156]	; (8001920 <disarm+0xac>)
 8001882:	f006 fd0b 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2104      	movs	r1, #4
 800188a:	4825      	ldr	r0, [pc, #148]	; (8001920 <disarm+0xac>)
 800188c:	f006 fd06 	bl	800829c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001890:	2200      	movs	r2, #0
 8001892:	2102      	movs	r1, #2
 8001894:	4823      	ldr	r0, [pc, #140]	; (8001924 <disarm+0xb0>)
 8001896:	f006 fd01 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a0:	4821      	ldr	r0, [pc, #132]	; (8001928 <disarm+0xb4>)
 80018a2:	f006 fcfb 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <disarm+0xb4>)
 80018ae:	f006 fcf5 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018b8:	481b      	ldr	r0, [pc, #108]	; (8001928 <disarm+0xb4>)
 80018ba:	f006 fcef 	bl	800829c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	2102      	movs	r1, #2
 80018c2:	481a      	ldr	r0, [pc, #104]	; (800192c <disarm+0xb8>)
 80018c4:	f006 fcea 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ce:	4818      	ldr	r0, [pc, #96]	; (8001930 <disarm+0xbc>)
 80018d0:	f006 fce4 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018da:	4815      	ldr	r0, [pc, #84]	; (8001930 <disarm+0xbc>)
 80018dc:	f006 fcde 	bl	800829c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e6:	4812      	ldr	r0, [pc, #72]	; (8001930 <disarm+0xbc>)
 80018e8:	f006 fcd8 	bl	800829c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <disarm+0xc0>)
 80018ee:	22ff      	movs	r2, #255	; 0xff
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <disarm+0xc0>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80018f8:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <disarm+0xc0>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80018fe:	f7ff fe01 	bl	8001504 <setLEDs>

  strcpy(state,"DISARMED");
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	490c      	ldr	r1, [pc, #48]	; (8001938 <disarm+0xc4>)
 8001906:	461a      	mov	r2, r3
 8001908:	460b      	mov	r3, r1
 800190a:	cb03      	ldmia	r3!, {r0, r1}
 800190c:	6010      	str	r0, [r2, #0]
 800190e:	6051      	str	r1, [r2, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	7213      	strb	r3, [r2, #8]
  return 0;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	58020000 	.word	0x58020000
 8001924:	58020400 	.word	0x58020400
 8001928:	58021400 	.word	0x58021400
 800192c:	58021800 	.word	0x58021800
 8001930:	58021000 	.word	0x58021000
 8001934:	24000c58 	.word	0x24000c58
 8001938:	08018a94 	.word	0x08018a94
 800193c:	00000000 	.word	0x00000000

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001946:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001948:	4b99      	ldr	r3, [pc, #612]	; (8001bb0 <main+0x270>)
 800194a:	f507 7459 	add.w	r4, r7, #868	; 0x364
 800194e:	461d      	mov	r5, r3
 8001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001954:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001958:	c403      	stmia	r4!, {r0, r1}
 800195a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195c:	f002 f95a 	bl	8003c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001960:	f000 f944 	bl	8001bec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001964:	f000 f9ba 	bl	8001cdc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001968:	f000 ff42 	bl	80027f0 <MX_GPIO_Init>
  MX_DMA_Init();
 800196c:	f000 fee0 	bl	8002730 <MX_DMA_Init>
  MX_SPI3_Init();
 8001970:	f000 fc3a 	bl	80021e8 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001974:	f000 faca 	bl	8001f0c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001978:	f000 fe8e 	bl	8002698 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800197c:	f000 f9e0 	bl	8001d40 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001980:	f000 fd44 	bl	800240c <MX_TIM4_Init>
  MX_ADC3_Init();
 8001984:	f000 fa54 	bl	8001e30 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001988:	f000 fbd8 	bl	800213c <MX_SPI2_Init>
  MX_I2C2_Init();
 800198c:	f000 fb22 	bl	8001fd4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001990:	f000 fc80 	bl	8002294 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001994:	f000 fdb6 	bl	8002504 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001998:	f000 fcd4 	bl	8002344 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800199c:	f015 f974 	bl	8016c88 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80019a0:	f000 fb76 	bl	8002090 <MX_SPI1_Init>
  MX_UART4_Init();
 80019a4:	f000 fe2c 	bl	8002600 <MX_UART4_Init>
  MX_FATFS_Init();
 80019a8:	f012 fed8 	bl	801475c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80019ac:	f000 fb52 	bl	8002054 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80019b0:	f000 fe02 	bl	80025b8 <MX_TIM13_Init>
  MX_RNG_Init();
 80019b4:	f001 f88c 	bl	8002ad0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80019b8:	2332      	movs	r3, #50	; 0x32
 80019ba:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	const double SPEED = 2.0/2000;
 80019be:	a37a      	add	r3, pc, #488	; (adr r3, 8001ba8 <main+0x268>)
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
	const double r_offset = 0;
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
	const double g_offset = 1;
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	4b76      	ldr	r3, [pc, #472]	; (8001bb4 <main+0x274>)
 80019da:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
	const double b_offset = 2;
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019e6:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80019ea:	213c      	movs	r1, #60	; 0x3c
 80019ec:	2010      	movs	r0, #16
 80019ee:	f7fe fec9 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80019f2:	2130      	movs	r1, #48	; 0x30
 80019f4:	2011      	movs	r0, #17
 80019f6:	f7fe fec5 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80019fa:	2104      	movs	r1, #4
 80019fc:	2013      	movs	r0, #19
 80019fe:	f7fe fec1 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001a02:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a06:	f002 f997 	bl	8003d38 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8001a0a:	21bf      	movs	r1, #191	; 0xbf
 8001a0c:	201c      	movs	r0, #28
 8001a0e:	f7fe fe65 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001a12:	2002      	movs	r0, #2
 8001a14:	f002 f990 	bl	8003d38 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001a18:	2158      	movs	r1, #88	; 0x58
 8001a1a:	201b      	movs	r0, #27
 8001a1c:	f7fe fe5e 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001a20:	21d8      	movs	r1, #216	; 0xd8
 8001a22:	201b      	movs	r0, #27
 8001a24:	f7fe fe5a 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	uint32_t lastTime = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

	float calOmegaX = 0;
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
	float calOmegaY = 0;
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
	float calOmegaZ = 0;
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001a54:	e022      	b.n	8001a9c <main+0x15c>
		calOmegaX += LG2_Get_Gyro_X();
 8001a56:	f7fe febd 	bl	80007d4 <LG2_Get_Gyro_X>
 8001a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a5e:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 8001a62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a66:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
		calOmegaY += LG2_Get_Gyro_Y();
 8001a6a:	f7fe fee3 	bl	8000834 <LG2_Get_Gyro_Y>
 8001a6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a72:	edd7 7aee 	vldr	s15, [r7, #952]	; 0x3b8
 8001a76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a7a:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
		calOmegaZ += LG2_Get_Gyro_Z();
 8001a7e:	f7fe ff0b 	bl	8000898 <LG2_Get_Gyro_Z>
 8001a82:	eeb0 7a40 	vmov.f32	s14, s0
 8001a86:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a8e:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
	for(int i = 0; i < 500; i++){
 8001a92:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001a96:	3301      	adds	r3, #1
 8001a98:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001a9c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001aa0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aa4:	dbd7      	blt.n	8001a56 <main+0x116>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001aa6:	ed97 7aef 	vldr	s14, [r7, #956]	; 0x3bc
 8001aaa:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001bb8 <main+0x278>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
	calOmegaY /= 500;
 8001ab6:	ed97 7aee 	vldr	s14, [r7, #952]	; 0x3b8
 8001aba:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001bb8 <main+0x278>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
	calOmegaZ /= 500;
 8001ac6:	ed97 7aed 	vldr	s14, [r7, #948]	; 0x3b4
 8001aca:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001bb8 <main+0x278>
 8001ace:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ad2:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4838      	ldr	r0, [pc, #224]	; (8001bbc <main+0x27c>)
 8001adc:	f006 fbde 	bl	800829c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001ae0:	20c8      	movs	r0, #200	; 0xc8
 8001ae2:	f002 f929 	bl	8003d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4834      	ldr	r0, [pc, #208]	; (8001bbc <main+0x27c>)
 8001aec:	f006 fbd6 	bl	800829c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001af0:	20c8      	movs	r0, #200	; 0xc8
 8001af2:	f002 f921 	bl	8003d38 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2101      	movs	r1, #1
 8001afa:	4830      	ldr	r0, [pc, #192]	; (8001bbc <main+0x27c>)
 8001afc:	f006 fbce 	bl	800829c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001b00:	20c8      	movs	r0, #200	; 0xc8
 8001b02:	f002 f919 	bl	8003d38 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2104      	movs	r1, #4
 8001b0a:	482d      	ldr	r0, [pc, #180]	; (8001bc0 <main+0x280>)
 8001b0c:	f006 fbc6 	bl	800829c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2108      	movs	r1, #8
 8001b14:	482a      	ldr	r0, [pc, #168]	; (8001bc0 <main+0x280>)
 8001b16:	f006 fbc1 	bl	800829c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4829      	ldr	r0, [pc, #164]	; (8001bc4 <main+0x284>)
 8001b1e:	f00e f82b 	bl	800fb78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b22:	2104      	movs	r1, #4
 8001b24:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <main+0x284>)
 8001b26:	f00e f827 	bl	800fb78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b2a:	2108      	movs	r1, #8
 8001b2c:	4825      	ldr	r0, [pc, #148]	; (8001bc4 <main+0x284>)
 8001b2e:	f00e f823 	bl	800fb78 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001b32:	210c      	movs	r1, #12
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <main+0x284>)
 8001b36:	f00e f81f 	bl	800fb78 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001b3a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001bc8 <main+0x288>
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fc98 	bl	8001474 <setServo>
    setServo(2, 180);
 8001b44:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001bcc <main+0x28c>
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f7ff fc93 	bl	8001474 <setServo>
    setServo(3, 0);
 8001b4e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001bd0 <main+0x290>
 8001b52:	2003      	movs	r0, #3
 8001b54:	f7ff fc8e 	bl	8001474 <setServo>
    setServo(4, 45);
 8001b58:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001bd4 <main+0x294>
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f7ff fc89 	bl	8001474 <setServo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[256] = "";
 8001b62:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001b66:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	22fc      	movs	r2, #252	; 0xfc
 8001b72:	2100      	movs	r1, #0
 8001b74:	4618      	mov	r0, r3
 8001b76:	f015 fdff 	bl	8017778 <memset>
  disarm(state);
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fe79 	bl	8001874 <disarm>
  LoRA_begin(868000000);
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <main+0x298>)
 8001b84:	f7fe ffda 	bl	8000b3c <LoRA_begin>
  communicationHandler(
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <main+0x29c>)
 8001b8e:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <main+0x2a0>)
 8001b90:	4914      	ldr	r1, [pc, #80]	; (8001be4 <main+0x2a4>)
 8001b92:	4815      	ldr	r0, [pc, #84]	; (8001be8 <main+0x2a8>)
 8001b94:	f7ff f9ba 	bl	8000f0c <communicationHandler>
 8001b98:	2300      	movs	r3, #0
  );
  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	08018ae0 	.word	0x08018ae0
 8001bb4:	3ff00000 	.word	0x3ff00000
 8001bb8:	43fa0000 	.word	0x43fa0000
 8001bbc:	58020c00 	.word	0x58020c00
 8001bc0:	58021800 	.word	0x58021800
 8001bc4:	24001270 	.word	0x24001270
 8001bc8:	42b40000 	.word	0x42b40000
 8001bcc:	43340000 	.word	0x43340000
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	42340000 	.word	0x42340000
 8001bd8:	33bca100 	.word	0x33bca100
 8001bdc:	080013b1 	.word	0x080013b1
 8001be0:	08001395 	.word	0x08001395
 8001be4:	08001375 	.word	0x08001375
 8001be8:	08001355 	.word	0x08001355

08001bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09c      	sub	sp, #112	; 0x70
 8001bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	224c      	movs	r2, #76	; 0x4c
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f015 fdbc 	bl	8017778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2220      	movs	r2, #32
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f015 fdb6 	bl	8017778 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f007 ff59 	bl	8009ac4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c12:	2300      	movs	r3, #0
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <SystemClock_Config+0xec>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c1e:	4a2e      	ldr	r2, [pc, #184]	; (8001cd8 <SystemClock_Config+0xec>)
 8001c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c24:	6193      	str	r3, [r2, #24]
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <SystemClock_Config+0xec>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c32:	bf00      	nop
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <SystemClock_Config+0xec>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c40:	d1f8      	bne.n	8001c34 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c42:	2322      	movs	r3, #34	; 0x22
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c4a:	2340      	movs	r3, #64	; 0x40
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c52:	2302      	movs	r3, #2
 8001c54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c56:	2300      	movs	r3, #0
 8001c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c62:	2301      	movs	r3, #1
 8001c64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001c66:	230c      	movs	r3, #12
 8001c68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c6e:	230c      	movs	r3, #12
 8001c70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f007 ff6a 	bl	8009b58 <HAL_RCC_OscConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c8a:	f000 ff1b 	bl	8002ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c8e:	233f      	movs	r3, #63	; 0x3f
 8001c90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c92:	2303      	movs	r3, #3
 8001c94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c9e:	2340      	movs	r3, #64	; 0x40
 8001ca0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ca2:	2340      	movs	r3, #64	; 0x40
 8001ca4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001caa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001cac:	2340      	movs	r3, #64	; 0x40
 8001cae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f008 fb29 	bl	800a30c <HAL_RCC_ClockConfig>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001cc0:	f000 ff00 	bl	8002ac4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001cc4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cc8:	2100      	movs	r1, #0
 8001cca:	2000      	movs	r0, #0
 8001ccc:	f008 fcd4 	bl	800a678 <HAL_RCC_MCOConfig>
}
 8001cd0:	bf00      	nop
 8001cd2:	3770      	adds	r7, #112	; 0x70
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58024800 	.word	0x58024800

08001cdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b0ae      	sub	sp, #184	; 0xb8
 8001ce0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	22b8      	movs	r2, #184	; 0xb8
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f015 fd45 	bl	8017778 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001cee:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cfe:	230c      	movs	r3, #12
 8001d00:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d06:	2302      	movs	r3, #2
 8001d08:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d0e:	23c0      	movs	r3, #192	; 0xc0
 8001d10:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	463b      	mov	r3, r7
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f008 fee5 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d34:	f000 fec6 	bl	8002ac4 <Error_Handler>
  }
}
 8001d38:	bf00      	nop
 8001d3a:	37b8      	adds	r7, #184	; 0xb8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b08c      	sub	sp, #48	; 0x30
 8001d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	2224      	movs	r2, #36	; 0x24
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f015 fd0d 	bl	8017778 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d5e:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d60:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <MX_ADC1_Init+0xe8>)
 8001d62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d64:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d66:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d98:	4b22      	ldr	r3, [pc, #136]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d9e:	4b21      	ldr	r3, [pc, #132]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001daa:	4b1e      	ldr	r3, [pc, #120]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dbe:	4819      	ldr	r0, [pc, #100]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001dc0:	f002 fa3a 	bl	8004238 <HAL_ADC_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dca:	f000 fe7b 	bl	8002ac4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4812      	ldr	r0, [pc, #72]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001dda:	f003 fa75 	bl	80052c8 <HAL_ADCEx_MultiModeConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001de4:	f000 fe6e 	bl	8002ac4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001de8:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <MX_ADC1_Init+0xec>)
 8001dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dec:	2306      	movs	r3, #6
 8001dee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001df0:	2303      	movs	r3, #3
 8001df2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001df4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001df8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	; (8001e24 <MX_ADC1_Init+0xe4>)
 8001e0e:	f002 fc1b 	bl	8004648 <HAL_ADC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001e18:	f000 fe54 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	3730      	adds	r7, #48	; 0x30
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	24000d00 	.word	0x24000d00
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	2a000400 	.word	0x2a000400

08001e30 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2224      	movs	r2, #36	; 0x24
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f015 fc9b 	bl	8017778 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e42:	4b2f      	ldr	r3, [pc, #188]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e44:	4a2f      	ldr	r2, [pc, #188]	; (8001f04 <MX_ADC3_Init+0xd4>)
 8001e46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e4a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001e4e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e52:	2208      	movs	r2, #8
 8001e54:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001e56:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e62:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e64:	2204      	movs	r2, #4
 8001e66:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e7a:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001e96:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ea8:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001eae:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001eb6:	4812      	ldr	r0, [pc, #72]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001eb8:	f002 f9be 	bl	8004238 <HAL_ADC_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001ec2:	f000 fdff 	bl	8002ac4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec6:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <MX_ADC3_Init+0xd8>)
 8001ec8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eca:	2306      	movs	r3, #6
 8001ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ed2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ed6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ed8:	2304      	movs	r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_ADC3_Init+0xd0>)
 8001eea:	f002 fbad 	bl	8004648 <HAL_ADC_ConfigChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ef4:	f000 fde6 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	24000d70 	.word	0x24000d70
 8001f04:	58026000 	.word	0x58026000
 8001f08:	04300002 	.word	0x04300002

08001f0c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f12:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <MX_FDCAN3_Init+0xc4>)
 8001f14:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001f2e:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001f34:	4b25      	ldr	r3, [pc, #148]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f36:	2210      	movs	r2, #16
 8001f38:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001f40:	4b22      	ldr	r3, [pc, #136]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001f46:	4b21      	ldr	r3, [pc, #132]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f48:	2202      	movs	r2, #2
 8001f4a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001f6a:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f8a:	2204      	movs	r2, #4
 8001f8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f94:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f96:	2204      	movs	r2, #4
 8001f98:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001fa0:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001fac:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001fb8:	4804      	ldr	r0, [pc, #16]	; (8001fcc <MX_FDCAN3_Init+0xc0>)
 8001fba:	f005 fc4b 	bl	8007854 <HAL_FDCAN_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001fc4:	f000 fd7e 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24000ed0 	.word	0x24000ed0
 8001fd0:	4000d400 	.word	0x4000d400

08001fd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_I2C2_Init+0x74>)
 8001fda:	4a1c      	ldr	r2, [pc, #112]	; (800204c <MX_I2C2_Init+0x78>)
 8001fdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_I2C2_Init+0x74>)
 8001fe0:	4a1b      	ldr	r2, [pc, #108]	; (8002050 <MX_I2C2_Init+0x7c>)
 8001fe2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_I2C2_Init+0x74>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_I2C2_Init+0x74>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_I2C2_Init+0x74>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_I2C2_Init+0x74>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_I2C2_Init+0x74>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <MX_I2C2_Init+0x74>)
 8002004:	2200      	movs	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002008:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_I2C2_Init+0x74>)
 800200a:	2200      	movs	r2, #0
 800200c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800200e:	480e      	ldr	r0, [pc, #56]	; (8002048 <MX_I2C2_Init+0x74>)
 8002010:	f006 f95e 	bl	80082d0 <HAL_I2C_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800201a:	f000 fd53 	bl	8002ac4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <MX_I2C2_Init+0x74>)
 8002022:	f006 f9ff 	bl	8008424 <HAL_I2CEx_ConfigAnalogFilter>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800202c:	f000 fd4a 	bl	8002ac4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <MX_I2C2_Init+0x74>)
 8002034:	f006 fa41 	bl	80084ba <HAL_I2CEx_ConfigDigitalFilter>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800203e:	f000 fd41 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	24000f70 	.word	0x24000f70
 800204c:	40005800 	.word	0x40005800
 8002050:	20303e5d 	.word	0x20303e5d

08002054 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 800205a:	4a0c      	ldr	r2, [pc, #48]	; (800208c <MX_SDMMC2_SD_Init+0x38>)
 800205c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002064:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800206a:	4b07      	ldr	r3, [pc, #28]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 800206c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002070:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <MX_SDMMC2_SD_Init+0x34>)
 800207a:	2200      	movs	r2, #0
 800207c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	24000fc4 	.word	0x24000fc4
 800208c:	48022400 	.word	0x48022400

08002090 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <MX_SPI1_Init+0xa8>)
 8002098:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_SPI1_Init+0xa4>)
 800209c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020a2:	4b24      	ldr	r3, [pc, #144]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020a8:	4b22      	ldr	r3, [pc, #136]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020aa:	2207      	movs	r2, #7
 80020ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020c4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020d0:	4b18      	ldr	r3, [pc, #96]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d6:	4b17      	ldr	r3, [pc, #92]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020f0:	4b10      	ldr	r3, [pc, #64]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020fc:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <MX_SPI1_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002108:	4b0a      	ldr	r3, [pc, #40]	; (8002134 <MX_SPI1_Init+0xa4>)
 800210a:	2200      	movs	r2, #0
 800210c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002110:	2200      	movs	r2, #0
 8002112:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002116:	2200      	movs	r2, #0
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800211a:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_SPI1_Init+0xa4>)
 800211c:	2200      	movs	r2, #0
 800211e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002120:	4804      	ldr	r0, [pc, #16]	; (8002134 <MX_SPI1_Init+0xa4>)
 8002122:	f00c fee1 	bl	800eee8 <HAL_SPI_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800212c:	f000 fcca 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	24001040 	.word	0x24001040
 8002138:	40013000 	.word	0x40013000

0800213c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002142:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <MX_SPI2_Init+0xa8>)
 8002144:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002148:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800214c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002156:	2207      	movs	r2, #7
 8002158:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <MX_SPI2_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002160:	4b1f      	ldr	r3, [pc, #124]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002166:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002168:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800216c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800216e:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002170:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002174:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002178:	2200      	movs	r2, #0
 800217a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <MX_SPI2_Init+0xa4>)
 800217e:	2200      	movs	r2, #0
 8002180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002184:	2200      	movs	r2, #0
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <MX_SPI2_Init+0xa4>)
 800218a:	2200      	movs	r2, #0
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800218e:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002190:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002196:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <MX_SPI2_Init+0xa4>)
 8002198:	2200      	movs	r2, #0
 800219a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <MX_SPI2_Init+0xa4>)
 800219e:	2200      	movs	r2, #0
 80021a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021a8:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021ae:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021b4:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021cc:	4804      	ldr	r0, [pc, #16]	; (80021e0 <MX_SPI2_Init+0xa4>)
 80021ce:	f00c fe8b 	bl	800eee8 <HAL_SPI_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80021d8:	f000 fc74 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	240010c8 	.word	0x240010c8
 80021e4:	40003800 	.word	0x40003800

080021e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021ec:	4b27      	ldr	r3, [pc, #156]	; (800228c <MX_SPI3_Init+0xa4>)
 80021ee:	4a28      	ldr	r2, [pc, #160]	; (8002290 <MX_SPI3_Init+0xa8>)
 80021f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021f2:	4b26      	ldr	r3, [pc, #152]	; (800228c <MX_SPI3_Init+0xa4>)
 80021f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021fa:	4b24      	ldr	r3, [pc, #144]	; (800228c <MX_SPI3_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <MX_SPI3_Init+0xa4>)
 8002202:	2207      	movs	r2, #7
 8002204:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002206:	4b21      	ldr	r3, [pc, #132]	; (800228c <MX_SPI3_Init+0xa4>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800220c:	4b1f      	ldr	r3, [pc, #124]	; (800228c <MX_SPI3_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <MX_SPI3_Init+0xa4>)
 8002214:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002218:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800221a:	4b1c      	ldr	r3, [pc, #112]	; (800228c <MX_SPI3_Init+0xa4>)
 800221c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002220:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002222:	4b1a      	ldr	r3, [pc, #104]	; (800228c <MX_SPI3_Init+0xa4>)
 8002224:	2200      	movs	r2, #0
 8002226:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002228:	4b18      	ldr	r3, [pc, #96]	; (800228c <MX_SPI3_Init+0xa4>)
 800222a:	2200      	movs	r2, #0
 800222c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <MX_SPI3_Init+0xa4>)
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002234:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_SPI3_Init+0xa4>)
 8002236:	2200      	movs	r2, #0
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <MX_SPI3_Init+0xa4>)
 800223c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_SPI3_Init+0xa4>)
 8002244:	2200      	movs	r2, #0
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <MX_SPI3_Init+0xa4>)
 800224a:	2200      	movs	r2, #0
 800224c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_SPI3_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <MX_SPI3_Init+0xa4>)
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_SPI3_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_SPI3_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_SPI3_Init+0xa4>)
 8002268:	2200      	movs	r2, #0
 800226a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <MX_SPI3_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_SPI3_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_SPI3_Init+0xa4>)
 800227a:	f00c fe35 	bl	800eee8 <HAL_SPI_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002284:	f000 fc1e 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	24001150 	.word	0x24001150
 8002290:	40003c00 	.word	0x40003c00

08002294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800229a:	f107 031c 	add.w	r3, r7, #28
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a6:	463b      	mov	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
 80022b4:	615a      	str	r2, [r3, #20]
 80022b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <MX_TIM2_Init+0xac>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022c0:	4b1f      	ldr	r3, [pc, #124]	; (8002340 <MX_TIM2_Init+0xac>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1e      	ldr	r3, [pc, #120]	; (8002340 <MX_TIM2_Init+0xac>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <MX_TIM2_Init+0xac>)
 80022ce:	225a      	movs	r2, #90	; 0x5a
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <MX_TIM2_Init+0xac>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d8:	4b19      	ldr	r3, [pc, #100]	; (8002340 <MX_TIM2_Init+0xac>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022de:	4818      	ldr	r0, [pc, #96]	; (8002340 <MX_TIM2_Init+0xac>)
 80022e0:	f00d fbf2 	bl	800fac8 <HAL_TIM_PWM_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80022ea:	f000 fbeb 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022f6:	f107 031c 	add.w	r3, r7, #28
 80022fa:	4619      	mov	r1, r3
 80022fc:	4810      	ldr	r0, [pc, #64]	; (8002340 <MX_TIM2_Init+0xac>)
 80022fe:	f00e fe79 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002308:	f000 fbdc 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230c:	2360      	movs	r3, #96	; 0x60
 800230e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800231c:	463b      	mov	r3, r7
 800231e:	2208      	movs	r2, #8
 8002320:	4619      	mov	r1, r3
 8002322:	4807      	ldr	r0, [pc, #28]	; (8002340 <MX_TIM2_Init+0xac>)
 8002324:	f00e f898 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800232e:	f000 fbc9 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002332:	4803      	ldr	r0, [pc, #12]	; (8002340 <MX_TIM2_Init+0xac>)
 8002334:	f001 f980 	bl	8003638 <HAL_TIM_MspPostInit>

}
 8002338:	bf00      	nop
 800233a:	3728      	adds	r7, #40	; 0x28
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	240011d8 	.word	0x240011d8

08002344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	; 0x28
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234a:	f107 031c 	add.w	r3, r7, #28
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
 8002364:	615a      	str	r2, [r3, #20]
 8002366:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <MX_TIM3_Init+0xc0>)
 800236a:	4a27      	ldr	r2, [pc, #156]	; (8002408 <MX_TIM3_Init+0xc4>)
 800236c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <MX_TIM3_Init+0xc0>)
 8002370:	2200      	movs	r2, #0
 8002372:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002374:	4b23      	ldr	r3, [pc, #140]	; (8002404 <MX_TIM3_Init+0xc0>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_TIM3_Init+0xc0>)
 800237c:	225a      	movs	r2, #90	; 0x5a
 800237e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002380:	4b20      	ldr	r3, [pc, #128]	; (8002404 <MX_TIM3_Init+0xc0>)
 8002382:	2200      	movs	r2, #0
 8002384:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_TIM3_Init+0xc0>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800238c:	481d      	ldr	r0, [pc, #116]	; (8002404 <MX_TIM3_Init+0xc0>)
 800238e:	f00d fb9b 	bl	800fac8 <HAL_TIM_PWM_Init>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002398:	f000 fb94 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4816      	ldr	r0, [pc, #88]	; (8002404 <MX_TIM3_Init+0xc0>)
 80023ac:	f00e fe22 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023b6:	f000 fb85 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ba:	2360      	movs	r3, #96	; 0x60
 80023bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	2200      	movs	r2, #0
 80023ce:	4619      	mov	r1, r3
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <MX_TIM3_Init+0xc0>)
 80023d2:	f00e f841 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023dc:	f000 fb72 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e0:	463b      	mov	r3, r7
 80023e2:	2204      	movs	r2, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	4807      	ldr	r0, [pc, #28]	; (8002404 <MX_TIM3_Init+0xc0>)
 80023e8:	f00e f836 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023f2:	f000 fb67 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023f6:	4803      	ldr	r0, [pc, #12]	; (8002404 <MX_TIM3_Init+0xc0>)
 80023f8:	f001 f91e 	bl	8003638 <HAL_TIM_MspPostInit>

}
 80023fc:	bf00      	nop
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	24001224 	.word	0x24001224
 8002408:	40000400 	.word	0x40000400

0800240c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	; 0x28
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800241e:	463b      	mov	r3, r7
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	615a      	str	r2, [r3, #20]
 800242e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002430:	4b32      	ldr	r3, [pc, #200]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <MX_TIM4_Init+0xf4>)
 8002434:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002436:	4b31      	ldr	r3, [pc, #196]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002438:	221c      	movs	r2, #28
 800243a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <MX_TIM4_Init+0xf0>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002444:	f242 720f 	movw	r2, #9999	; 0x270f
 8002448:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <MX_TIM4_Init+0xf0>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002456:	4829      	ldr	r0, [pc, #164]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002458:	f00d fb36 	bl	800fac8 <HAL_TIM_PWM_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002462:	f000 fb2f 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800246e:	f107 031c 	add.w	r3, r7, #28
 8002472:	4619      	mov	r1, r3
 8002474:	4821      	ldr	r0, [pc, #132]	; (80024fc <MX_TIM4_Init+0xf0>)
 8002476:	f00e fdbd 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002480:	f000 fb20 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002484:	2360      	movs	r3, #96	; 0x60
 8002486:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248c:	2300      	movs	r3, #0
 800248e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002494:	463b      	mov	r3, r7
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	4818      	ldr	r0, [pc, #96]	; (80024fc <MX_TIM4_Init+0xf0>)
 800249c:	f00d ffdc 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80024a6:	f000 fb0d 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024aa:	463b      	mov	r3, r7
 80024ac:	2204      	movs	r2, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4812      	ldr	r0, [pc, #72]	; (80024fc <MX_TIM4_Init+0xf0>)
 80024b2:	f00d ffd1 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024bc:	f000 fb02 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c0:	463b      	mov	r3, r7
 80024c2:	2208      	movs	r2, #8
 80024c4:	4619      	mov	r1, r3
 80024c6:	480d      	ldr	r0, [pc, #52]	; (80024fc <MX_TIM4_Init+0xf0>)
 80024c8:	f00d ffc6 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80024d2:	f000 faf7 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024d6:	463b      	mov	r3, r7
 80024d8:	220c      	movs	r2, #12
 80024da:	4619      	mov	r1, r3
 80024dc:	4807      	ldr	r0, [pc, #28]	; (80024fc <MX_TIM4_Init+0xf0>)
 80024de:	f00d ffbb 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80024e8:	f000 faec 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <MX_TIM4_Init+0xf0>)
 80024ee:	f001 f8a3 	bl	8003638 <HAL_TIM_MspPostInit>

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	; 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	24001270 	.word	0x24001270
 8002500:	40000800 	.word	0x40000800

08002504 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002516:	463b      	mov	r3, r7
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
 8002524:	615a      	str	r2, [r3, #20]
 8002526:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002528:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <MX_TIM5_Init+0xac>)
 800252a:	4a22      	ldr	r2, [pc, #136]	; (80025b4 <MX_TIM5_Init+0xb0>)
 800252c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <MX_TIM5_Init+0xac>)
 8002530:	2200      	movs	r2, #0
 8002532:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <MX_TIM5_Init+0xac>)
 8002536:	2200      	movs	r2, #0
 8002538:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_TIM5_Init+0xac>)
 800253c:	225a      	movs	r2, #90	; 0x5a
 800253e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <MX_TIM5_Init+0xac>)
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM5_Init+0xac>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800254c:	4818      	ldr	r0, [pc, #96]	; (80025b0 <MX_TIM5_Init+0xac>)
 800254e:	f00d fabb 	bl	800fac8 <HAL_TIM_PWM_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002558:	f000 fab4 	bl	8002ac4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	4619      	mov	r1, r3
 800256a:	4811      	ldr	r0, [pc, #68]	; (80025b0 <MX_TIM5_Init+0xac>)
 800256c:	f00e fd42 	bl	8010ff4 <HAL_TIMEx_MasterConfigSynchronization>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002576:	f000 faa5 	bl	8002ac4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800257a:	2360      	movs	r3, #96	; 0x60
 800257c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800258a:	463b      	mov	r3, r7
 800258c:	220c      	movs	r2, #12
 800258e:	4619      	mov	r1, r3
 8002590:	4807      	ldr	r0, [pc, #28]	; (80025b0 <MX_TIM5_Init+0xac>)
 8002592:	f00d ff61 	bl	8010458 <HAL_TIM_PWM_ConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800259c:	f000 fa92 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80025a0:	4803      	ldr	r0, [pc, #12]	; (80025b0 <MX_TIM5_Init+0xac>)
 80025a2:	f001 f849 	bl	8003638 <HAL_TIM_MspPostInit>

}
 80025a6:	bf00      	nop
 80025a8:	3728      	adds	r7, #40	; 0x28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	240012bc 	.word	0x240012bc
 80025b4:	40000c00 	.word	0x40000c00

080025b8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025be:	4a0f      	ldr	r2, [pc, #60]	; (80025fc <MX_TIM13_Init+0x44>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025c4:	225f      	movs	r2, #95	; 0x5f
 80025c6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_TIM13_Init+0x40>)
 80025e4:	f00d fa19 	bl	800fa1a <HAL_TIM_Base_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80025ee:	f000 fa69 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	24001308 	.word	0x24001308
 80025fc:	40001c00 	.word	0x40001c00

08002600 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <MX_UART4_Init+0x90>)
 8002606:	4a23      	ldr	r2, [pc, #140]	; (8002694 <MX_UART4_Init+0x94>)
 8002608:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800260a:	4b21      	ldr	r3, [pc, #132]	; (8002690 <MX_UART4_Init+0x90>)
 800260c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002610:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <MX_UART4_Init+0x90>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_UART4_Init+0x90>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <MX_UART4_Init+0x90>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_UART4_Init+0x90>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b19      	ldr	r3, [pc, #100]	; (8002690 <MX_UART4_Init+0x90>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_UART4_Init+0x90>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002636:	4b16      	ldr	r3, [pc, #88]	; (8002690 <MX_UART4_Init+0x90>)
 8002638:	2200      	movs	r2, #0
 800263a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_UART4_Init+0x90>)
 800263e:	2200      	movs	r2, #0
 8002640:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002642:	4b13      	ldr	r3, [pc, #76]	; (8002690 <MX_UART4_Init+0x90>)
 8002644:	2200      	movs	r2, #0
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002648:	4811      	ldr	r0, [pc, #68]	; (8002690 <MX_UART4_Init+0x90>)
 800264a:	f00e fd8d 	bl	8011168 <HAL_UART_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002654:	f000 fa36 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002658:	2100      	movs	r1, #0
 800265a:	480d      	ldr	r0, [pc, #52]	; (8002690 <MX_UART4_Init+0x90>)
 800265c:	f00f fe93 	bl	8012386 <HAL_UARTEx_SetTxFifoThreshold>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002666:	f000 fa2d 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800266a:	2100      	movs	r1, #0
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <MX_UART4_Init+0x90>)
 800266e:	f00f fec8 	bl	8012402 <HAL_UARTEx_SetRxFifoThreshold>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002678:	f000 fa24 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800267c:	4804      	ldr	r0, [pc, #16]	; (8002690 <MX_UART4_Init+0x90>)
 800267e:	f00f fe49 	bl	8012314 <HAL_UARTEx_DisableFifoMode>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002688:	f000 fa1c 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}
 8002690:	240015ac 	.word	0x240015ac
 8002694:	40004c00 	.word	0x40004c00

08002698 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800269c:	4b22      	ldr	r3, [pc, #136]	; (8002728 <MX_USART6_UART_Init+0x90>)
 800269e:	4a23      	ldr	r2, [pc, #140]	; (800272c <MX_USART6_UART_Init+0x94>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026a2:	4b21      	ldr	r3, [pc, #132]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026a8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b19      	ldr	r3, [pc, #100]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026e0:	4811      	ldr	r0, [pc, #68]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026e2:	f00e fd41 	bl	8011168 <HAL_UART_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80026ec:	f000 f9ea 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f0:	2100      	movs	r1, #0
 80026f2:	480d      	ldr	r0, [pc, #52]	; (8002728 <MX_USART6_UART_Init+0x90>)
 80026f4:	f00f fe47 	bl	8012386 <HAL_UARTEx_SetTxFifoThreshold>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80026fe:	f000 f9e1 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002702:	2100      	movs	r1, #0
 8002704:	4808      	ldr	r0, [pc, #32]	; (8002728 <MX_USART6_UART_Init+0x90>)
 8002706:	f00f fe7c 	bl	8012402 <HAL_UARTEx_SetRxFifoThreshold>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002710:	f000 f9d8 	bl	8002ac4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <MX_USART6_UART_Init+0x90>)
 8002716:	f00f fdfd 	bl	8012314 <HAL_UARTEx_DisableFifoMode>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002720:	f000 f9d0 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	24001640 	.word	0x24001640
 800272c:	40011400 	.word	0x40011400

08002730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <MX_DMA_Init+0xbc>)
 8002738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800273c:	4a2b      	ldr	r2, [pc, #172]	; (80027ec <MX_DMA_Init+0xbc>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002746:	4b29      	ldr	r3, [pc, #164]	; (80027ec <MX_DMA_Init+0xbc>)
 8002748:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <MX_DMA_Init+0xbc>)
 8002756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800275a:	4a24      	ldr	r2, [pc, #144]	; (80027ec <MX_DMA_Init+0xbc>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002764:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MX_DMA_Init+0xbc>)
 8002766:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	200b      	movs	r0, #11
 8002778:	f002 ff63 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800277c:	200b      	movs	r0, #11
 800277e:	f002 ff7a 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	200c      	movs	r0, #12
 8002788:	f002 ff5b 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800278c:	200c      	movs	r0, #12
 800278e:	f002 ff72 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	200d      	movs	r0, #13
 8002798:	f002 ff53 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800279c:	200d      	movs	r0, #13
 800279e:	f002 ff6a 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	200e      	movs	r0, #14
 80027a8:	f002 ff4b 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80027ac:	200e      	movs	r0, #14
 80027ae:	f002 ff62 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	200f      	movs	r0, #15
 80027b8:	f002 ff43 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027bc:	200f      	movs	r0, #15
 80027be:	f002 ff5a 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2010      	movs	r0, #16
 80027c8:	f002 ff3b 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027cc:	2010      	movs	r0, #16
 80027ce:	f002 ff52 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027d2:	2200      	movs	r2, #0
 80027d4:	2100      	movs	r1, #0
 80027d6:	2046      	movs	r0, #70	; 0x46
 80027d8:	f002 ff33 	bl	8005642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80027dc:	2046      	movs	r0, #70	; 0x46
 80027de:	f002 ff4a 	bl	8005676 <HAL_NVIC_EnableIRQ>

}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	58024400 	.word	0x58024400

080027f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08c      	sub	sp, #48	; 0x30
 80027f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002806:	4ba7      	ldr	r3, [pc, #668]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	4aa5      	ldr	r2, [pc, #660]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002816:	4ba3      	ldr	r3, [pc, #652]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002824:	4b9f      	ldr	r3, [pc, #636]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	4a9e      	ldr	r2, [pc, #632]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 800282c:	f043 0320 	orr.w	r3, r3, #32
 8002830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002834:	4b9b      	ldr	r3, [pc, #620]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800283a:	f003 0320 	and.w	r3, r3, #32
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002842:	4b98      	ldr	r3, [pc, #608]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	4a96      	ldr	r2, [pc, #600]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002852:	4b94      	ldr	r3, [pc, #592]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	4b90      	ldr	r3, [pc, #576]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002866:	4a8f      	ldr	r2, [pc, #572]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	4b89      	ldr	r3, [pc, #548]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	4a87      	ldr	r2, [pc, #540]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002886:	f043 0302 	orr.w	r3, r3, #2
 800288a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 8002890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	4a80      	ldr	r2, [pc, #512]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 80028a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ac:	4b7d      	ldr	r3, [pc, #500]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 80028ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ca:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <MX_GPIO_Init+0x2b4>)
 80028cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80028d8:	2200      	movs	r2, #0
 80028da:	f241 5104 	movw	r1, #5380	; 0x1504
 80028de:	4872      	ldr	r0, [pc, #456]	; (8002aa8 <MX_GPIO_Init+0x2b8>)
 80028e0:	f005 fcdc 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80028e4:	2200      	movs	r2, #0
 80028e6:	f248 0106 	movw	r1, #32774	; 0x8006
 80028ea:	4870      	ldr	r0, [pc, #448]	; (8002aac <MX_GPIO_Init+0x2bc>)
 80028ec:	f005 fcd6 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2130      	movs	r1, #48	; 0x30
 80028f4:	486e      	ldr	r0, [pc, #440]	; (8002ab0 <MX_GPIO_Init+0x2c0>)
 80028f6:	f005 fcd1 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2103      	movs	r1, #3
 80028fe:	486d      	ldr	r0, [pc, #436]	; (8002ab4 <MX_GPIO_Init+0x2c4>)
 8002900:	f005 fccc 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002904:	2200      	movs	r2, #0
 8002906:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800290a:	486b      	ldr	r0, [pc, #428]	; (8002ab8 <MX_GPIO_Init+0x2c8>)
 800290c:	f005 fcc6 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002910:	2200      	movs	r2, #0
 8002912:	210e      	movs	r1, #14
 8002914:	4869      	ldr	r0, [pc, #420]	; (8002abc <MX_GPIO_Init+0x2cc>)
 8002916:	f005 fcc1 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 800291a:	2201      	movs	r2, #1
 800291c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002920:	4867      	ldr	r0, [pc, #412]	; (8002ac0 <MX_GPIO_Init+0x2d0>)
 8002922:	f005 fcbb 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002926:	2200      	movs	r2, #0
 8002928:	2101      	movs	r1, #1
 800292a:	4865      	ldr	r0, [pc, #404]	; (8002ac0 <MX_GPIO_Init+0x2d0>)
 800292c:	f005 fcb6 	bl	800829c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002930:	f241 5304 	movw	r3, #5380	; 0x1504
 8002934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002936:	2301      	movs	r3, #1
 8002938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002942:	f107 031c 	add.w	r3, r7, #28
 8002946:	4619      	mov	r1, r3
 8002948:	4857      	ldr	r0, [pc, #348]	; (8002aa8 <MX_GPIO_Init+0x2b8>)
 800294a:	f005 fae7 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800294e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002954:	2301      	movs	r3, #1
 8002956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2300      	movs	r3, #0
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295c:	2300      	movs	r3, #0
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4619      	mov	r1, r3
 8002966:	4851      	ldr	r0, [pc, #324]	; (8002aac <MX_GPIO_Init+0x2bc>)
 8002968:	f005 fad8 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800296c:	2330      	movs	r3, #48	; 0x30
 800296e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002970:	2301      	movs	r3, #1
 8002972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4619      	mov	r1, r3
 8002982:	484b      	ldr	r0, [pc, #300]	; (8002ab0 <MX_GPIO_Init+0x2c0>)
 8002984:	f005 faca 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002988:	2303      	movs	r3, #3
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800298c:	2301      	movs	r3, #1
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002994:	2300      	movs	r3, #0
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	4619      	mov	r1, r3
 800299e:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <MX_GPIO_Init+0x2c4>)
 80029a0:	f005 fabc 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80029a4:	2304      	movs	r3, #4
 80029a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029a8:	2300      	movs	r3, #0
 80029aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	4619      	mov	r1, r3
 80029b6:	483f      	ldr	r0, [pc, #252]	; (8002ab4 <MX_GPIO_Init+0x2c4>)
 80029b8:	f005 fab0 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80029bc:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80029c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029c2:	2301      	movs	r3, #1
 80029c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ca:	2300      	movs	r3, #0
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029ce:	f107 031c 	add.w	r3, r7, #28
 80029d2:	4619      	mov	r1, r3
 80029d4:	4838      	ldr	r0, [pc, #224]	; (8002ab8 <MX_GPIO_Init+0x2c8>)
 80029d6:	f005 faa1 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80029da:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80029de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	4832      	ldr	r0, [pc, #200]	; (8002ab8 <MX_GPIO_Init+0x2c8>)
 80029f0:	f005 fa94 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80029f4:	2301      	movs	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f8:	2300      	movs	r3, #0
 80029fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 031c 	add.w	r3, r7, #28
 8002a04:	4619      	mov	r1, r3
 8002a06:	482d      	ldr	r0, [pc, #180]	; (8002abc <MX_GPIO_Init+0x2cc>)
 8002a08:	f005 fa88 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002a0c:	230e      	movs	r3, #14
 8002a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4826      	ldr	r0, [pc, #152]	; (8002abc <MX_GPIO_Init+0x2cc>)
 8002a24:	f005 fa7a 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002a28:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	481a      	ldr	r0, [pc, #104]	; (8002aa8 <MX_GPIO_Init+0x2b8>)
 8002a3e:	f005 fa6d 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002a42:	f240 7301 	movw	r3, #1793	; 0x701
 8002a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a50:	2300      	movs	r3, #0
 8002a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a54:	f107 031c 	add.w	r3, r7, #28
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4819      	ldr	r0, [pc, #100]	; (8002ac0 <MX_GPIO_Init+0x2d0>)
 8002a5c:	f005 fa5e 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002a60:	2310      	movs	r3, #16
 8002a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	4812      	ldr	r0, [pc, #72]	; (8002abc <MX_GPIO_Init+0x2cc>)
 8002a74:	f005 fa52 	bl	8007f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8e:	f107 031c 	add.w	r3, r7, #28
 8002a92:	4619      	mov	r1, r3
 8002a94:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_GPIO_Init+0x2bc>)
 8002a96:	f005 fa41 	bl	8007f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a9a:	bf00      	nop
 8002a9c:	3730      	adds	r7, #48	; 0x30
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
 8002aa8:	58021000 	.word	0x58021000
 8002aac:	58020000 	.word	0x58020000
 8002ab0:	58020800 	.word	0x58020800
 8002ab4:	58020400 	.word	0x58020400
 8002ab8:	58021400 	.word	0x58021400
 8002abc:	58021800 	.word	0x58021800
 8002ac0:	58020c00 	.word	0x58020c00

08002ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac8:	b672      	cpsid	i
}
 8002aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002acc:	e7fe      	b.n	8002acc <Error_Handler+0x8>
	...

08002ad0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <MX_RNG_Init+0x2c>)
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <MX_RNG_Init+0x30>)
 8002ad8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <MX_RNG_Init+0x2c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002ae0:	4806      	ldr	r0, [pc, #24]	; (8002afc <MX_RNG_Init+0x2c>)
 8002ae2:	f00a fbef 	bl	800d2c4 <HAL_RNG_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002aec:	f7ff ffea 	bl	8002ac4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <MX_RNG_Init+0x34>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	240016d8 	.word	0x240016d8
 8002b00:	48021800 	.word	0x48021800
 8002b04:	240016d4 	.word	0x240016d4

08002b08 <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
	if(!initialized)
 8002b12:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <rand_range+0x7c>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <rand_range+0x26>
	{
		HAL_Delay(100);
 8002b1a:	2064      	movs	r0, #100	; 0x64
 8002b1c:	f001 f90c 	bl	8003d38 <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 8002b20:	2118      	movs	r1, #24
 8002b22:	4819      	ldr	r0, [pc, #100]	; (8002b88 <rand_range+0x80>)
 8002b24:	f014 f986 	bl	8016e34 <CDC_Transmit_HS>
		return -1;
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2c:	e026      	b.n	8002b7c <rand_range+0x74>
	}

	uint32_t rand = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8002b32:	f04f 33ff 	mov.w	r3, #4294967295
 8002b36:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d914      	bls.n	8002b6a <rand_range+0x62>
 8002b40:	f107 0308 	add.w	r3, r7, #8
 8002b44:	4619      	mov	r1, r3
 8002b46:	4811      	ldr	r0, [pc, #68]	; (8002b8c <rand_range+0x84>)
 8002b48:	f00a fc60 	bl	800d40c <HAL_RNG_GenerateRandomNumber>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	1acb      	subs	r3, r1, r3
 8002b5a:	68f9      	ldr	r1, [r7, #12]
 8002b5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	e008      	b.n	8002b7c <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 8002b6a:	2064      	movs	r0, #100	; 0x64
 8002b6c:	f001 f8e4 	bl	8003d38 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8002b70:	210a      	movs	r1, #10
 8002b72:	4807      	ldr	r0, [pc, #28]	; (8002b90 <rand_range+0x88>)
 8002b74:	f014 f95e 	bl	8016e34 <CDC_Transmit_HS>
	}
	return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	240016d4 	.word	0x240016d4
 8002b88:	08018b00 	.word	0x08018b00
 8002b8c:	240016d8 	.word	0x240016d8
 8002b90:	08018b1c 	.word	0x08018b1c

08002b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_MspInit+0x30>)
 8002b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba0:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_MspInit+0x30>)
 8002ba2:	f043 0302 	orr.w	r3, r3, #2
 8002ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_MspInit+0x30>)
 8002bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	58024400 	.word	0x58024400

08002bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08c      	sub	sp, #48	; 0x30
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5d      	ldr	r2, [pc, #372]	; (8002d5c <HAL_ADC_MspInit+0x194>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d159      	bne.n	8002c9e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bea:	4b5d      	ldr	r3, [pc, #372]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bf0:	4a5b      	ldr	r2, [pc, #364]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002bf2:	f043 0320 	orr.w	r3, r3, #32
 8002bf6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bfa:	4b59      	ldr	r3, [pc, #356]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c08:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0e:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c18:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	f003 0304 	and.w	r3, r3, #4
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002c26:	2301      	movs	r3, #1
 8002c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c32:	f107 031c 	add.w	r3, r7, #28
 8002c36:	4619      	mov	r1, r3
 8002c38:	484a      	ldr	r0, [pc, #296]	; (8002d64 <HAL_ADC_MspInit+0x19c>)
 8002c3a:	f005 f96f 	bl	8007f1c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002c3e:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c40:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_ADC_MspInit+0x1a4>)
 8002c42:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c44:	4b48      	ldr	r3, [pc, #288]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c46:	2209      	movs	r2, #9
 8002c48:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c4a:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c50:	4b45      	ldr	r3, [pc, #276]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c5c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c5e:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c64:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c68:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c6e:	4b3e      	ldr	r3, [pc, #248]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c7a:	4b3b      	ldr	r3, [pc, #236]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c80:	4839      	ldr	r0, [pc, #228]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c82:	f002 fd13 	bl	80056ac <HAL_DMA_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002c8c:	f7ff ff1a 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a35      	ldr	r2, [pc, #212]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c94:	659a      	str	r2, [r3, #88]	; 0x58
 8002c96:	4a34      	ldr	r2, [pc, #208]	; (8002d68 <HAL_ADC_MspInit+0x1a0>)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c9c:	e059      	b.n	8002d52 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a33      	ldr	r2, [pc, #204]	; (8002d70 <HAL_ADC_MspInit+0x1a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d154      	bne.n	8002d52 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002cb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cc6:	4b26      	ldr	r3, [pc, #152]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002cce:	f043 0304 	orr.w	r3, r3, #4
 8002cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_ADC_MspInit+0x198>)
 8002cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ce4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ce8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002cec:	f001 f848 	bl	8003d80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002cf0:	4b20      	ldr	r3, [pc, #128]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_ADC_MspInit+0x1b0>)
 8002cf4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002cf6:	4b1f      	ldr	r3, [pc, #124]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002cf8:	2273      	movs	r2, #115	; 0x73
 8002cfa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d08:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d18:	4b16      	ldr	r3, [pc, #88]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d28:	4b12      	ldr	r3, [pc, #72]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d2e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d30:	4b10      	ldr	r3, [pc, #64]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d36:	480f      	ldr	r0, [pc, #60]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d38:	f002 fcb8 	bl	80056ac <HAL_DMA_Init>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002d42:	f7ff febf 	bl	8002ac4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d4c:	4a09      	ldr	r2, [pc, #36]	; (8002d74 <HAL_ADC_MspInit+0x1ac>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d52:	bf00      	nop
 8002d54:	3730      	adds	r7, #48	; 0x30
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	58024400 	.word	0x58024400
 8002d64:	58020800 	.word	0x58020800
 8002d68:	24000de0 	.word	0x24000de0
 8002d6c:	40020088 	.word	0x40020088
 8002d70:	58026000 	.word	0x58026000
 8002d74:	24000e58 	.word	0x24000e58
 8002d78:	400204b8 	.word	0x400204b8

08002d7c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b0b8      	sub	sp, #224	; 0xe0
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	22b8      	movs	r2, #184	; 0xb8
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f014 fceb 	bl	8017778 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a26      	ldr	r2, [pc, #152]	; (8002e40 <HAL_FDCAN_MspInit+0xc4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d145      	bne.n	8002e38 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002dac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002db8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dbe:	f107 0310 	add.w	r3, r7, #16
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f007 fe98 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002dce:	f7ff fe79 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002dd4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dd8:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dde:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002de2:	4b18      	ldr	r3, [pc, #96]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002de4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002df0:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002df8:	f043 0320 	orr.w	r3, r3, #32
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_FDCAN_MspInit+0xc8>)
 8002e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e0e:	23c0      	movs	r3, #192	; 0xc0
 8002e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e14:	2302      	movs	r3, #2
 8002e16:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002e26:	2302      	movs	r3, #2
 8002e28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e30:	4619      	mov	r1, r3
 8002e32:	4805      	ldr	r0, [pc, #20]	; (8002e48 <HAL_FDCAN_MspInit+0xcc>)
 8002e34:	f005 f872 	bl	8007f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002e38:	bf00      	nop
 8002e3a:	37e0      	adds	r7, #224	; 0xe0
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	4000d400 	.word	0x4000d400
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58021400 	.word	0x58021400

08002e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b0b8      	sub	sp, #224	; 0xe0
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	22b8      	movs	r2, #184	; 0xb8
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f014 fc83 	bl	8017778 <memset>
  if(hi2c->Instance==I2C2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2a      	ldr	r2, [pc, #168]	; (8002f20 <HAL_I2C_MspInit+0xd4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d14d      	bne.n	8002f18 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e7c:	f04f 0208 	mov.w	r2, #8
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e8e:	f107 0310 	add.w	r3, r7, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f007 fe30 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002e9e:	f7ff fe11 	bl	8002ac4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002eaa:	f043 0320 	orr.w	r3, r3, #32
 8002eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb2:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	60fb      	str	r3, [r7, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ec6:	2312      	movs	r3, #18
 8002ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ed8:	2304      	movs	r3, #4
 8002eda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ede:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4810      	ldr	r0, [pc, #64]	; (8002f28 <HAL_I2C_MspInit+0xdc>)
 8002ee6:	f005 f819 	bl	8007f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef0:	4a0c      	ldr	r2, [pc, #48]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002ef2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ef6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_I2C_MspInit+0xd8>)
 8002efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2021      	movs	r0, #33	; 0x21
 8002f0e:	f002 fb98 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002f12:	2021      	movs	r0, #33	; 0x21
 8002f14:	f002 fbaf 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f18:	bf00      	nop
 8002f1a:	37e0      	adds	r7, #224	; 0xe0
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40005800 	.word	0x40005800
 8002f24:	58024400 	.word	0x58024400
 8002f28:	58021400 	.word	0x58021400

08002f2c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0b2      	sub	sp, #200	; 0xc8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	22b8      	movs	r2, #184	; 0xb8
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f014 fc1b 	bl	8017778 <memset>
  if(hrng->Instance==RNG)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <HAL_RNG_MspInit+0x6c>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d121      	bne.n	8002f90 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002f4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f5e:	f107 0310 	add.w	r3, r7, #16
 8002f62:	4618      	mov	r0, r3
 8002f64:	f007 fdc8 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002f6e:	f7ff fda9 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <HAL_RNG_MspInit+0x70>)
 8002f74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f78:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_RNG_MspInit+0x70>)
 8002f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f7e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f82:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RNG_MspInit+0x70>)
 8002f84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f90:	bf00      	nop
 8002f92:	37c8      	adds	r7, #200	; 0xc8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	48021800 	.word	0x48021800
 8002f9c:	58024400 	.word	0x58024400

08002fa0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0ba      	sub	sp, #232	; 0xe8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fb8:	f107 0318 	add.w	r3, r7, #24
 8002fbc:	22b8      	movs	r2, #184	; 0xb8
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f014 fbd9 	bl	8017778 <memset>
  if(hsd->Instance==SDMMC2)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a5d      	ldr	r2, [pc, #372]	; (8003140 <HAL_SD_MspInit+0x1a0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	f040 80b3 	bne.w	8003138 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fe2:	f107 0318 	add.w	r3, r7, #24
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f007 fd86 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002ff2:	f7ff fd67 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002ff6:	4b53      	ldr	r3, [pc, #332]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8002ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ffc:	4a51      	ldr	r2, [pc, #324]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8002ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003002:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8003006:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8003008:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800300c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301a:	4a4a      	ldr	r2, [pc, #296]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 800301c:	f043 0308 	orr.w	r3, r3, #8
 8003020:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003024:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8003026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003032:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003038:	4a42      	ldr	r2, [pc, #264]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 800303a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800303e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003042:	4b40      	ldr	r3, [pc, #256]	; (8003144 <HAL_SD_MspInit+0x1a4>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003050:	2340      	movs	r3, #64	; 0x40
 8003052:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305c:	2300      	movs	r3, #0
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003068:	230b      	movs	r3, #11
 800306a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003072:	4619      	mov	r1, r3
 8003074:	4834      	ldr	r0, [pc, #208]	; (8003148 <HAL_SD_MspInit+0x1a8>)
 8003076:	f004 ff51 	bl	8007f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003080:	2302      	movs	r3, #2
 8003082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003086:	2301      	movs	r3, #1
 8003088:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003092:	230b      	movs	r3, #11
 8003094:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003098:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800309c:	4619      	mov	r1, r3
 800309e:	482a      	ldr	r0, [pc, #168]	; (8003148 <HAL_SD_MspInit+0x1a8>)
 80030a0:	f004 ff3c 	bl	8007f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b8:	2303      	movs	r3, #3
 80030ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030be:	230b      	movs	r3, #11
 80030c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030c8:	4619      	mov	r1, r3
 80030ca:	4820      	ldr	r0, [pc, #128]	; (800314c <HAL_SD_MspInit+0x1ac>)
 80030cc:	f004 ff26 	bl	8007f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d8:	2302      	movs	r3, #2
 80030da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030ea:	230b      	movs	r3, #11
 80030ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030f4:	4619      	mov	r1, r3
 80030f6:	4815      	ldr	r0, [pc, #84]	; (800314c <HAL_SD_MspInit+0x1ac>)
 80030f8:	f004 ff10 	bl	8007f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003116:	230a      	movs	r3, #10
 8003118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800311c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003120:	4619      	mov	r1, r3
 8003122:	480a      	ldr	r0, [pc, #40]	; (800314c <HAL_SD_MspInit+0x1ac>)
 8003124:	f004 fefa 	bl	8007f1c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003128:	2200      	movs	r2, #0
 800312a:	2100      	movs	r1, #0
 800312c:	207c      	movs	r0, #124	; 0x7c
 800312e:	f002 fa88 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003132:	207c      	movs	r0, #124	; 0x7c
 8003134:	f002 fa9f 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003138:	bf00      	nop
 800313a:	37e8      	adds	r7, #232	; 0xe8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	48022400 	.word	0x48022400
 8003144:	58024400 	.word	0x58024400
 8003148:	58020c00 	.word	0x58020c00
 800314c:	58021800 	.word	0x58021800

08003150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b08e      	sub	sp, #56	; 0x38
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a4f      	ldr	r2, [pc, #316]	; (80032ac <HAL_SPI_MspInit+0x15c>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d12e      	bne.n	80031d0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003172:	4b4f      	ldr	r3, [pc, #316]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003178:	4a4d      	ldr	r2, [pc, #308]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 800317a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003182:	4b4b      	ldr	r3, [pc, #300]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003184:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	623b      	str	r3, [r7, #32]
 800318e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003190:	4b47      	ldr	r3, [pc, #284]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	4a46      	ldr	r2, [pc, #280]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a0:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 80031a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80031ae:	23e0      	movs	r3, #224	; 0xe0
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031be:	2305      	movs	r3, #5
 80031c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c6:	4619      	mov	r1, r3
 80031c8:	483a      	ldr	r0, [pc, #232]	; (80032b4 <HAL_SPI_MspInit+0x164>)
 80031ca:	f004 fea7 	bl	8007f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031ce:	e068      	b.n	80032a2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a38      	ldr	r2, [pc, #224]	; (80032b8 <HAL_SPI_MspInit+0x168>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d12f      	bne.n	800323a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031da:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e0:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 80031e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031ea:	4b31      	ldr	r3, [pc, #196]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 80031ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	61bb      	str	r3, [r7, #24]
 80031f6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	4a2c      	ldr	r2, [pc, #176]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003208:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 800320a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	617b      	str	r3, [r7, #20]
 8003214:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003216:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003228:	2305      	movs	r3, #5
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003230:	4619      	mov	r1, r3
 8003232:	4822      	ldr	r0, [pc, #136]	; (80032bc <HAL_SPI_MspInit+0x16c>)
 8003234:	f004 fe72 	bl	8007f1c <HAL_GPIO_Init>
}
 8003238:	e033      	b.n	80032a2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <HAL_SPI_MspInit+0x170>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d12e      	bne.n	80032a2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003244:	4b1a      	ldr	r3, [pc, #104]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 800324c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003250:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003254:	4b16      	ldr	r3, [pc, #88]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003256:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800325a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 800326a:	f043 0304 	orr.w	r3, r3, #4
 800326e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_SPI_MspInit+0x160>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003280:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003292:	2306      	movs	r3, #6
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	4809      	ldr	r0, [pc, #36]	; (80032c4 <HAL_SPI_MspInit+0x174>)
 800329e:	f004 fe3d 	bl	8007f1c <HAL_GPIO_Init>
}
 80032a2:	bf00      	nop
 80032a4:	3738      	adds	r7, #56	; 0x38
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40013000 	.word	0x40013000
 80032b0:	58024400 	.word	0x58024400
 80032b4:	58020000 	.word	0x58020000
 80032b8:	40003800 	.word	0x40003800
 80032bc:	58020400 	.word	0x58020400
 80032c0:	40003c00 	.word	0x40003c00
 80032c4:	58020800 	.word	0x58020800

080032c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08c      	sub	sp, #48	; 0x30
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d0:	f107 031c 	add.w	r3, r7, #28
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	605a      	str	r2, [r3, #4]
 80032da:	609a      	str	r2, [r3, #8]
 80032dc:	60da      	str	r2, [r3, #12]
 80032de:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d15d      	bne.n	80033a6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032ea:	4b8e      	ldr	r3, [pc, #568]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80032ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032f0:	4a8c      	ldr	r2, [pc, #560]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032fa:	4b8a      	ldr	r3, [pc, #552]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80032fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003308:	4b86      	ldr	r3, [pc, #536]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330e:	4a85      	ldr	r2, [pc, #532]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003318:	4b82      	ldr	r3, [pc, #520]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 800331a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003326:	2301      	movs	r3, #1
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003336:	2301      	movs	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333a:	f107 031c 	add.w	r3, r7, #28
 800333e:	4619      	mov	r1, r3
 8003340:	4879      	ldr	r0, [pc, #484]	; (8003528 <HAL_TIM_PWM_MspInit+0x260>)
 8003342:	f004 fdeb 	bl	8007f1c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003346:	4b79      	ldr	r3, [pc, #484]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003348:	4a79      	ldr	r2, [pc, #484]	; (8003530 <HAL_TIM_PWM_MspInit+0x268>)
 800334a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800334c:	4b77      	ldr	r3, [pc, #476]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 800334e:	2214      	movs	r2, #20
 8003350:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003352:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003354:	2240      	movs	r2, #64	; 0x40
 8003356:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003358:	4b74      	ldr	r3, [pc, #464]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800335e:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003360:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003364:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003366:	4b71      	ldr	r3, [pc, #452]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003368:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800336c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800336e:	4b6f      	ldr	r3, [pc, #444]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003370:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003374:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003376:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003378:	2200      	movs	r2, #0
 800337a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800337c:	4b6b      	ldr	r3, [pc, #428]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 800337e:	2200      	movs	r2, #0
 8003380:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003382:	4b6a      	ldr	r3, [pc, #424]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 8003384:	2200      	movs	r2, #0
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003388:	4868      	ldr	r0, [pc, #416]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 800338a:	f002 f98f 	bl	80056ac <HAL_DMA_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003394:	f7ff fb96 	bl	8002ac4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a64      	ldr	r2, [pc, #400]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
 800339e:	4a63      	ldr	r2, [pc, #396]	; (800352c <HAL_TIM_PWM_MspInit+0x264>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80033a4:	e119      	b.n	80035da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a62      	ldr	r2, [pc, #392]	; (8003534 <HAL_TIM_PWM_MspInit+0x26c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d16d      	bne.n	800348c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033b0:	4b5c      	ldr	r3, [pc, #368]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b6:	4a5b      	ldr	r2, [pc, #364]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c0:	4b58      	ldr	r3, [pc, #352]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80033c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80033ce:	4b5a      	ldr	r3, [pc, #360]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033d0:	4a5a      	ldr	r2, [pc, #360]	; (800353c <HAL_TIM_PWM_MspInit+0x274>)
 80033d2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80033d4:	4b58      	ldr	r3, [pc, #352]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033d6:	2218      	movs	r2, #24
 80033d8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033da:	4b57      	ldr	r3, [pc, #348]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033dc:	2240      	movs	r2, #64	; 0x40
 80033de:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033e0:	4b55      	ldr	r3, [pc, #340]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033e6:	4b54      	ldr	r3, [pc, #336]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033ec:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033ee:	4b52      	ldr	r3, [pc, #328]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033f4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033f6:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 80033f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033fc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80033fe:	4b4e      	ldr	r3, [pc, #312]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 8003400:	2200      	movs	r2, #0
 8003402:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003404:	4b4c      	ldr	r3, [pc, #304]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800340a:	4b4b      	ldr	r3, [pc, #300]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 800340c:	2200      	movs	r2, #0
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003410:	4849      	ldr	r0, [pc, #292]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 8003412:	f002 f94b 	bl	80056ac <HAL_DMA_Init>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800341c:	f7ff fb52 	bl	8002ac4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a45      	ldr	r2, [pc, #276]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
 8003426:	4a44      	ldr	r2, [pc, #272]	; (8003538 <HAL_TIM_PWM_MspInit+0x270>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800342c:	4b44      	ldr	r3, [pc, #272]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 800342e:	4a45      	ldr	r2, [pc, #276]	; (8003544 <HAL_TIM_PWM_MspInit+0x27c>)
 8003430:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003432:	4b43      	ldr	r3, [pc, #268]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003434:	2217      	movs	r2, #23
 8003436:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003438:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800343e:	4b40      	ldr	r3, [pc, #256]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003444:	4b3e      	ldr	r3, [pc, #248]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003446:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800344a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800344c:	4b3c      	ldr	r3, [pc, #240]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 800344e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003452:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003454:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800345a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800345c:	4b38      	ldr	r3, [pc, #224]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 800345e:	2200      	movs	r2, #0
 8003460:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003464:	2200      	movs	r2, #0
 8003466:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 800346a:	2200      	movs	r2, #0
 800346c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800346e:	4834      	ldr	r0, [pc, #208]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003470:	f002 f91c 	bl	80056ac <HAL_DMA_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800347a:	f7ff fb23 	bl	8002ac4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <HAL_TIM_PWM_MspInit+0x278>)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6393      	str	r3, [r2, #56]	; 0x38
}
 800348a:	e0a6      	b.n	80035da <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a2d      	ldr	r2, [pc, #180]	; (8003548 <HAL_TIM_PWM_MspInit+0x280>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d15e      	bne.n	8003554 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003496:	4b23      	ldr	r3, [pc, #140]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 8003498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349c:	4a21      	ldr	r2, [pc, #132]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 800349e:	f043 0304 	orr.w	r3, r3, #4
 80034a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034a6:	4b1f      	ldr	r3, [pc, #124]	; (8003524 <HAL_TIM_PWM_MspInit+0x25c>)
 80034a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80034b4:	4b25      	ldr	r3, [pc, #148]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <HAL_TIM_PWM_MspInit+0x288>)
 80034b8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034bc:	221f      	movs	r2, #31
 80034be:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034c2:	2240      	movs	r2, #64	; 0x40
 80034c4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034d2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034da:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034e2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80034e4:	4b19      	ldr	r3, [pc, #100]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80034ea:	4b18      	ldr	r3, [pc, #96]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80034f6:	4815      	ldr	r0, [pc, #84]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 80034f8:	f002 f8d8 	bl	80056ac <HAL_DMA_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003502:	f7ff fadf 	bl	8002ac4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a10      	ldr	r2, [pc, #64]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 800350a:	62da      	str	r2, [r3, #44]	; 0x2c
 800350c:	4a0f      	ldr	r2, [pc, #60]	; (800354c <HAL_TIM_PWM_MspInit+0x284>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003512:	2200      	movs	r2, #0
 8003514:	2100      	movs	r1, #0
 8003516:	201e      	movs	r0, #30
 8003518:	f002 f893 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800351c:	201e      	movs	r0, #30
 800351e:	f002 f8aa 	bl	8005676 <HAL_NVIC_EnableIRQ>
}
 8003522:	e05a      	b.n	80035da <HAL_TIM_PWM_MspInit+0x312>
 8003524:	58024400 	.word	0x58024400
 8003528:	58020000 	.word	0x58020000
 800352c:	24001354 	.word	0x24001354
 8003530:	40020028 	.word	0x40020028
 8003534:	40000400 	.word	0x40000400
 8003538:	240013cc 	.word	0x240013cc
 800353c:	40020058 	.word	0x40020058
 8003540:	24001444 	.word	0x24001444
 8003544:	40020070 	.word	0x40020070
 8003548:	40000800 	.word	0x40000800
 800354c:	240014bc 	.word	0x240014bc
 8003550:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a22      	ldr	r2, [pc, #136]	; (80035e4 <HAL_TIM_PWM_MspInit+0x31c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d13d      	bne.n	80035da <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003564:	4a20      	ldr	r2, [pc, #128]	; (80035e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800356e:	4b1e      	ldr	r3, [pc, #120]	; (80035e8 <HAL_TIM_PWM_MspInit+0x320>)
 8003570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	60bb      	str	r3, [r7, #8]
 800357a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 800357e:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_TIM_PWM_MspInit+0x328>)
 8003580:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003582:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 8003584:	223a      	movs	r2, #58	; 0x3a
 8003586:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800358e:	4b17      	ldr	r3, [pc, #92]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 8003590:	2200      	movs	r2, #0
 8003592:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003594:	4b15      	ldr	r3, [pc, #84]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 8003596:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800359a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800359c:	4b13      	ldr	r3, [pc, #76]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 800359e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035a2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035aa:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80035be:	480b      	ldr	r0, [pc, #44]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035c0:	f002 f874 	bl	80056ac <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80035ca:	f7ff fa7b 	bl	8002ac4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a06      	ldr	r2, [pc, #24]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
 80035d4:	4a05      	ldr	r2, [pc, #20]	; (80035ec <HAL_TIM_PWM_MspInit+0x324>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035da:	bf00      	nop
 80035dc:	3730      	adds	r7, #48	; 0x30
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40000c00 	.word	0x40000c00
 80035e8:	58024400 	.word	0x58024400
 80035ec:	24001534 	.word	0x24001534
 80035f0:	40020040 	.word	0x40020040

080035f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <HAL_TIM_Base_MspInit+0x3c>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d10e      	bne.n	8003624 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_TIM_Base_MspInit+0x40>)
 8003608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360c:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_TIM_Base_MspInit+0x40>)
 800360e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <HAL_TIM_Base_MspInit+0x40>)
 8003618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003624:	bf00      	nop
 8003626:	3714      	adds	r7, #20
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr
 8003630:	40001c00 	.word	0x40001c00
 8003634:	58024400 	.word	0x58024400

08003638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08c      	sub	sp, #48	; 0x30
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003640:	f107 031c 	add.w	r3, r7, #28
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	605a      	str	r2, [r3, #4]
 800364a:	609a      	str	r2, [r3, #8]
 800364c:	60da      	str	r2, [r3, #12]
 800364e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d120      	bne.n	800369c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	4b52      	ldr	r3, [pc, #328]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 800365c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003660:	4a50      	ldr	r2, [pc, #320]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 8003662:	f043 0302 	orr.w	r3, r3, #2
 8003666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366a:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 800366c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367e:	2302      	movs	r3, #2
 8003680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003682:	2302      	movs	r3, #2
 8003684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003686:	2300      	movs	r3, #0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800368a:	2301      	movs	r3, #1
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800368e:	f107 031c 	add.w	r3, r7, #28
 8003692:	4619      	mov	r1, r3
 8003694:	4844      	ldr	r0, [pc, #272]	; (80037a8 <HAL_TIM_MspPostInit+0x170>)
 8003696:	f004 fc41 	bl	8007f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800369a:	e07f      	b.n	800379c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <HAL_TIM_MspPostInit+0x174>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d11f      	bne.n	80036e6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 80036a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ac:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 80036ae:	f043 0302 	orr.w	r3, r3, #2
 80036b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 80036b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036c4:	2330      	movs	r3, #48	; 0x30
 80036c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036cc:	2302      	movs	r3, #2
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036d4:	2302      	movs	r3, #2
 80036d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	4832      	ldr	r0, [pc, #200]	; (80037a8 <HAL_TIM_MspPostInit+0x170>)
 80036e0:	f004 fc1c 	bl	8007f1c <HAL_GPIO_Init>
}
 80036e4:	e05a      	b.n	800379c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <HAL_TIM_MspPostInit+0x178>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d131      	bne.n	8003754 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 80036f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f6:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 80036f8:	f043 0308 	orr.w	r3, r3, #8
 80036fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003700:	4b28      	ldr	r3, [pc, #160]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 8003702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800370e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003714:	2302      	movs	r3, #2
 8003716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003718:	2300      	movs	r3, #0
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371c:	2300      	movs	r3, #0
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003720:	2302      	movs	r3, #2
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	4619      	mov	r1, r3
 800372a:	4822      	ldr	r0, [pc, #136]	; (80037b4 <HAL_TIM_MspPostInit+0x17c>)
 800372c:	f004 fbf6 	bl	8007f1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800373a:	2302      	movs	r3, #2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003742:	2302      	movs	r3, #2
 8003744:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	4619      	mov	r1, r3
 800374c:	4819      	ldr	r0, [pc, #100]	; (80037b4 <HAL_TIM_MspPostInit+0x17c>)
 800374e:	f004 fbe5 	bl	8007f1c <HAL_GPIO_Init>
}
 8003752:	e023      	b.n	800379c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a17      	ldr	r2, [pc, #92]	; (80037b8 <HAL_TIM_MspPostInit+0x180>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d11e      	bne.n	800379c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 8003760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003764:	4a0f      	ldr	r2, [pc, #60]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800376e:	4b0d      	ldr	r3, [pc, #52]	; (80037a4 <HAL_TIM_MspPostInit+0x16c>)
 8003770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800377c:	2308      	movs	r3, #8
 800377e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003784:	2302      	movs	r3, #2
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800378c:	2302      	movs	r3, #2
 800378e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	f107 031c 	add.w	r3, r7, #28
 8003794:	4619      	mov	r1, r3
 8003796:	4809      	ldr	r0, [pc, #36]	; (80037bc <HAL_TIM_MspPostInit+0x184>)
 8003798:	f004 fbc0 	bl	8007f1c <HAL_GPIO_Init>
}
 800379c:	bf00      	nop
 800379e:	3730      	adds	r7, #48	; 0x30
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	58024400 	.word	0x58024400
 80037a8:	58020400 	.word	0x58020400
 80037ac:	40000400 	.word	0x40000400
 80037b0:	40000800 	.word	0x40000800
 80037b4:	58020c00 	.word	0x58020c00
 80037b8:	40000c00 	.word	0x40000c00
 80037bc:	58020000 	.word	0x58020000

080037c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b0ba      	sub	sp, #232	; 0xe8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037d8:	f107 0318 	add.w	r3, r7, #24
 80037dc:	22b8      	movs	r2, #184	; 0xb8
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f013 ffc9 	bl	8017778 <memset>
  if(huart->Instance==UART4)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a4d      	ldr	r2, [pc, #308]	; (8003920 <HAL_UART_MspInit+0x160>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d147      	bne.n	8003880 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037f0:	f04f 0202 	mov.w	r2, #2
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003802:	f107 0318 	add.w	r3, r7, #24
 8003806:	4618      	mov	r0, r3
 8003808:	f007 f976 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003812:	f7ff f957 	bl	8002ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003816:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_UART_MspInit+0x164>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	4a41      	ldr	r2, [pc, #260]	; (8003924 <HAL_UART_MspInit+0x164>)
 800381e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003822:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003826:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_UART_MspInit+0x164>)
 8003828:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <HAL_UART_MspInit+0x164>)
 8003836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383a:	4a3a      	ldr	r2, [pc, #232]	; (8003924 <HAL_UART_MspInit+0x164>)
 800383c:	f043 0302 	orr.w	r3, r3, #2
 8003840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003844:	4b37      	ldr	r3, [pc, #220]	; (8003924 <HAL_UART_MspInit+0x164>)
 8003846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003852:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800386c:	2308      	movs	r3, #8
 800386e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003876:	4619      	mov	r1, r3
 8003878:	482b      	ldr	r0, [pc, #172]	; (8003928 <HAL_UART_MspInit+0x168>)
 800387a:	f004 fb4f 	bl	8007f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800387e:	e04a      	b.n	8003916 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a29      	ldr	r2, [pc, #164]	; (800392c <HAL_UART_MspInit+0x16c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d145      	bne.n	8003916 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800388a:	f04f 0201 	mov.w	r2, #1
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389c:	f107 0318 	add.w	r3, r7, #24
 80038a0:	4618      	mov	r0, r3
 80038a2:	f007 f929 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80038ac:	f7ff f90a 	bl	8002ac4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038b0:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b6:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038b8:	f043 0320 	orr.w	r3, r3, #32
 80038bc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038c0:	4b18      	ldr	r3, [pc, #96]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d4:	4a13      	ldr	r2, [pc, #76]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_UART_MspInit+0x164>)
 80038e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038ec:	23c0      	movs	r3, #192	; 0xc0
 80038ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003904:	2307      	movs	r3, #7
 8003906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800390a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800390e:	4619      	mov	r1, r3
 8003910:	4807      	ldr	r0, [pc, #28]	; (8003930 <HAL_UART_MspInit+0x170>)
 8003912:	f004 fb03 	bl	8007f1c <HAL_GPIO_Init>
}
 8003916:	bf00      	nop
 8003918:	37e8      	adds	r7, #232	; 0xe8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40004c00 	.word	0x40004c00
 8003924:	58024400 	.word	0x58024400
 8003928:	58020400 	.word	0x58020400
 800392c:	40011400 	.word	0x40011400
 8003930:	58020800 	.word	0x58020800

08003934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003938:	e7fe      	b.n	8003938 <NMI_Handler+0x4>

0800393a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800393e:	e7fe      	b.n	800393e <HardFault_Handler+0x4>

08003940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <MemManage_Handler+0x4>

08003946 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800394a:	e7fe      	b.n	800394a <BusFault_Handler+0x4>

0800394c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <UsageFault_Handler+0x4>

08003952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800396e:	b480      	push	{r7}
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003980:	f000 f9ba 	bl	8003cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003984:	bf00      	nop
 8003986:	bd80      	pop	{r7, pc}

08003988 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <DMA1_Stream0_IRQHandler+0x10>)
 800398e:	f002 fc4f 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	240014bc 	.word	0x240014bc

0800399c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80039a0:	4802      	ldr	r0, [pc, #8]	; (80039ac <DMA1_Stream1_IRQHandler+0x10>)
 80039a2:	f002 fc45 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	24001354 	.word	0x24001354

080039b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <DMA1_Stream2_IRQHandler+0x10>)
 80039b6:	f002 fc3b 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	24001534 	.word	0x24001534

080039c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80039c8:	4802      	ldr	r0, [pc, #8]	; (80039d4 <DMA1_Stream3_IRQHandler+0x10>)
 80039ca:	f002 fc31 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039ce:	bf00      	nop
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	240013cc 	.word	0x240013cc

080039d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80039dc:	4802      	ldr	r0, [pc, #8]	; (80039e8 <DMA1_Stream4_IRQHandler+0x10>)
 80039de:	f002 fc27 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	24001444 	.word	0x24001444

080039ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039f0:	4802      	ldr	r0, [pc, #8]	; (80039fc <DMA1_Stream5_IRQHandler+0x10>)
 80039f2:	f002 fc1d 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	24000de0 	.word	0x24000de0

08003a00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a04:	4802      	ldr	r0, [pc, #8]	; (8003a10 <TIM4_IRQHandler+0x10>)
 8003a06:	f00c fc07 	bl	8010218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	24001270 	.word	0x24001270

08003a14 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <I2C2_EV_IRQHandler+0x10>)
 8003a1a:	f004 fce9 	bl	80083f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	24000f70 	.word	0x24000f70

08003a28 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a2c:	4802      	ldr	r0, [pc, #8]	; (8003a38 <DMA2_Stream7_IRQHandler+0x10>)
 8003a2e:	f002 fbff 	bl	8006230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	24000e58 	.word	0x24000e58

08003a3c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003a40:	4802      	ldr	r0, [pc, #8]	; (8003a4c <OTG_HS_IRQHandler+0x10>)
 8003a42:	f004 fedf 	bl	8008804 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	24002bf0 	.word	0x24002bf0

08003a50 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <SDMMC2_IRQHandler+0x10>)
 8003a56:	f00a f853 	bl	800db00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	24000fc4 	.word	0x24000fc4

08003a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a6c:	4a14      	ldr	r2, [pc, #80]	; (8003ac0 <_sbrk+0x5c>)
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <_sbrk+0x60>)
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a78:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <_sbrk+0x64>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d102      	bne.n	8003a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a80:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <_sbrk+0x64>)
 8003a82:	4a12      	ldr	r2, [pc, #72]	; (8003acc <_sbrk+0x68>)
 8003a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a86:	4b10      	ldr	r3, [pc, #64]	; (8003ac8 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d207      	bcs.n	8003aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a94:	f013 fe78 	bl	8017788 <__errno>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa2:	e009      	b.n	8003ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <_sbrk+0x64>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <_sbrk+0x64>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <_sbrk+0x64>)
 8003ab4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	24050000 	.word	0x24050000
 8003ac4:	00000800 	.word	0x00000800
 8003ac8:	240016ec 	.word	0x240016ec
 8003acc:	24003468 	.word	0x24003468

08003ad0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ad4:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <SystemInit+0xd0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ada:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <SystemInit+0xd0>)
 8003adc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ae0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ae4:	4b2f      	ldr	r3, [pc, #188]	; (8003ba4 <SystemInit+0xd4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 030f 	and.w	r3, r3, #15
 8003aec:	2b06      	cmp	r3, #6
 8003aee:	d807      	bhi.n	8003b00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003af0:	4b2c      	ldr	r3, [pc, #176]	; (8003ba4 <SystemInit+0xd4>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 030f 	bic.w	r3, r3, #15
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <SystemInit+0xd4>)
 8003afa:	f043 0307 	orr.w	r3, r3, #7
 8003afe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b00:	4b29      	ldr	r3, [pc, #164]	; (8003ba8 <SystemInit+0xd8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <SystemInit+0xd8>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b0c:	4b26      	ldr	r3, [pc, #152]	; (8003ba8 <SystemInit+0xd8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <SystemInit+0xd8>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4924      	ldr	r1, [pc, #144]	; (8003ba8 <SystemInit+0xd8>)
 8003b18:	4b24      	ldr	r3, [pc, #144]	; (8003bac <SystemInit+0xdc>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <SystemInit+0xd4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <SystemInit+0xd4>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 030f 	bic.w	r3, r3, #15
 8003b32:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <SystemInit+0xd4>)
 8003b34:	f043 0307 	orr.w	r3, r3, #7
 8003b38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <SystemInit+0xd8>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b40:	4b19      	ldr	r3, [pc, #100]	; (8003ba8 <SystemInit+0xd8>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b46:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <SystemInit+0xd8>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <SystemInit+0xd8>)
 8003b4e:	4a18      	ldr	r2, [pc, #96]	; (8003bb0 <SystemInit+0xe0>)
 8003b50:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <SystemInit+0xd8>)
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <SystemInit+0xe4>)
 8003b56:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <SystemInit+0xd8>)
 8003b5a:	4a17      	ldr	r2, [pc, #92]	; (8003bb8 <SystemInit+0xe8>)
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b5e:	4b12      	ldr	r3, [pc, #72]	; (8003ba8 <SystemInit+0xd8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <SystemInit+0xd8>)
 8003b66:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <SystemInit+0xe8>)
 8003b68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <SystemInit+0xd8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <SystemInit+0xd8>)
 8003b72:	4a11      	ldr	r2, [pc, #68]	; (8003bb8 <SystemInit+0xe8>)
 8003b74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b76:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <SystemInit+0xd8>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ba8 <SystemInit+0xd8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <SystemInit+0xd8>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b88:	4b07      	ldr	r3, [pc, #28]	; (8003ba8 <SystemInit+0xd8>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <SystemInit+0xec>)
 8003b90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b96:	bf00      	nop
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr
 8003ba0:	e000ed00 	.word	0xe000ed00
 8003ba4:	52002000 	.word	0x52002000
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	eaf6ed7f 	.word	0xeaf6ed7f
 8003bb0:	02020200 	.word	0x02020200
 8003bb4:	01ff0000 	.word	0x01ff0000
 8003bb8:	01010280 	.word	0x01010280
 8003bbc:	52004000 	.word	0x52004000

08003bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003bf8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bc4:	f7ff ff84 	bl	8003ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bc8:	480c      	ldr	r0, [pc, #48]	; (8003bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bca:	490d      	ldr	r1, [pc, #52]	; (8003c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bd0:	e002      	b.n	8003bd8 <LoopCopyDataInit>

08003bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bd6:	3304      	adds	r3, #4

08003bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bdc:	d3f9      	bcc.n	8003bd2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bde:	4a0a      	ldr	r2, [pc, #40]	; (8003c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003be0:	4c0a      	ldr	r4, [pc, #40]	; (8003c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003be4:	e001      	b.n	8003bea <LoopFillZerobss>

08003be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003be8:	3204      	adds	r2, #4

08003bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bec:	d3fb      	bcc.n	8003be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bee:	f013 fdd1 	bl	8017794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bf2:	f7fd fea5 	bl	8001940 <main>
  bx  lr
 8003bf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003bf8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003bfc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003c00:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003c04:	08018de0 	.word	0x08018de0
  ldr r2, =_sbss
 8003c08:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003c0c:	24003464 	.word	0x24003464

08003c10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC3_IRQHandler>
	...

08003c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f001 fd06 	bl	800562c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c20:	f006 fd94 	bl	800a74c <HAL_RCC_GetSysClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_Init+0x68>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4913      	ldr	r1, [pc, #76]	; (8003c80 <HAL_Init+0x6c>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <HAL_Init+0x68>)
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_Init+0x6c>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <HAL_Init+0x70>)
 8003c56:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c58:	4a0b      	ldr	r2, [pc, #44]	; (8003c88 <HAL_Init+0x74>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c5e:	200f      	movs	r0, #15
 8003c60:	f000 f814 	bl	8003c8c <HAL_InitTick>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e002      	b.n	8003c74 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c6e:	f7fe ff91 	bl	8002b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	08018c2c 	.word	0x08018c2c
 8003c84:	24000004 	.word	0x24000004
 8003c88:	24000000 	.word	0x24000000

08003c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c94:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_InitTick+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e021      	b.n	8003ce4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ca0:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <HAL_InitTick+0x64>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <HAL_InitTick+0x60>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4619      	mov	r1, r3
 8003caa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f001 fceb 	bl	8005692 <HAL_SYSTICK_Config>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00e      	b.n	8003ce4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b0f      	cmp	r3, #15
 8003cca:	d80a      	bhi.n	8003ce2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd4:	f001 fcb5 	bl	8005642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cd8:	4a06      	ldr	r2, [pc, #24]	; (8003cf4 <HAL_InitTick+0x68>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2400000c 	.word	0x2400000c
 8003cf0:	24000000 	.word	0x24000000
 8003cf4:	24000008 	.word	0x24000008

08003cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <HAL_IncTick+0x20>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_IncTick+0x24>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4413      	add	r3, r2
 8003d08:	4a04      	ldr	r2, [pc, #16]	; (8003d1c <HAL_IncTick+0x24>)
 8003d0a:	6013      	str	r3, [r2, #0]
}
 8003d0c:	bf00      	nop
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	2400000c 	.word	0x2400000c
 8003d1c:	240016f0 	.word	0x240016f0

08003d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  return uwTick;
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <HAL_GetTick+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	240016f0 	.word	0x240016f0

08003d38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d40:	f7ff ffee 	bl	8003d20 <HAL_GetTick>
 8003d44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d005      	beq.n	8003d5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_Delay+0x44>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d5e:	bf00      	nop
 8003d60:	f7ff ffde 	bl	8003d20 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d8f7      	bhi.n	8003d60 <HAL_Delay+0x28>
  {
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	2400000c 	.word	0x2400000c

08003d80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d8a:	4b07      	ldr	r3, [pc, #28]	; (8003da8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	401a      	ands	r2, r3
 8003d94:	4904      	ldr	r1, [pc, #16]	; (8003da8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	58000400 	.word	0x58000400

08003dac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	609a      	str	r2, [r3, #8]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3360      	adds	r3, #96	; 0x60
 8003e26:	461a      	mov	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a10      	ldr	r2, [pc, #64]	; (8003e74 <LL_ADC_SetOffset+0x60>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d10b      	bne.n	8003e50 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003e4e:	e00b      	b.n	8003e68 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	430b      	orrs	r3, r1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	58026000 	.word	0x58026000

08003e78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3360      	adds	r3, #96	; 0x60
 8003e86:	461a      	mov	r2, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	611a      	str	r2, [r3, #16]
}
 8003eca:	bf00      	nop
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4a0c      	ldr	r2, [pc, #48]	; (8003f18 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3360      	adds	r3, #96	; 0x60
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	431a      	orrs	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	601a      	str	r2, [r3, #0]
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	58026000 	.word	0x58026000

08003f1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a0c      	ldr	r2, [pc, #48]	; (8003f5c <LL_ADC_SetOffsetSaturation+0x40>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10e      	bne.n	8003f4e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3360      	adds	r3, #96	; 0x60
 8003f34:	461a      	mov	r2, r3
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	58026000 	.word	0x58026000

08003f60 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	; (8003fa0 <LL_ADC_SetOffsetSign+0x40>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10e      	bne.n	8003f92 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3360      	adds	r3, #96	; 0x60
 8003f78:	461a      	mov	r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	58026000 	.word	0x58026000

08003fa4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	3360      	adds	r3, #96	; 0x60
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a0c      	ldr	r2, [pc, #48]	; (8003ff4 <LL_ADC_SetOffsetState+0x50>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d108      	bne.n	8003fd8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	431a      	orrs	r2, r3
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003fd6:	e007      	b.n	8003fe8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr
 8003ff4:	58026000 	.word	0x58026000

08003ff8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3330      	adds	r3, #48	; 0x30
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	0a1b      	lsrs	r3, r3, #8
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	4413      	add	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	211f      	movs	r1, #31
 8004024:	fa01 f303 	lsl.w	r3, r1, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	401a      	ands	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	0e9b      	lsrs	r3, r3, #26
 8004030:	f003 011f 	and.w	r1, r3, #31
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 031f 	and.w	r3, r3, #31
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	431a      	orrs	r2, r3
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004044:	bf00      	nop
 8004046:	371c      	adds	r7, #28
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3314      	adds	r3, #20
 8004060:	461a      	mov	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	0e5b      	lsrs	r3, r3, #25
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	4413      	add	r3, r2
 800406e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	0d1b      	lsrs	r3, r3, #20
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2107      	movs	r1, #7
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	0d1b      	lsrs	r3, r3, #20
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	fa01 f303 	lsl.w	r3, r1, r3
 8004094:	431a      	orrs	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a1a      	ldr	r2, [pc, #104]	; (8004120 <LL_ADC_SetChannelSingleDiff+0x78>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d115      	bne.n	80040e8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040c8:	43db      	mvns	r3, r3
 80040ca:	401a      	ands	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0318 	and.w	r3, r3, #24
 80040d2:	4914      	ldr	r1, [pc, #80]	; (8004124 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80040d4:	40d9      	lsrs	r1, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	400b      	ands	r3, r1
 80040da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040de:	431a      	orrs	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040e6:	e014      	b.n	8004112 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f4:	43db      	mvns	r3, r3
 80040f6:	401a      	ands	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f003 0318 	and.w	r3, r3, #24
 80040fe:	4909      	ldr	r1, [pc, #36]	; (8004124 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004100:	40d9      	lsrs	r1, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	400b      	ands	r3, r1
 8004106:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800410a:	431a      	orrs	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	58026000 	.word	0x58026000
 8004124:	000fffff 	.word	0x000fffff

08004128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b04      	ldr	r3, [pc, #16]	; (8004148 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004136:	4013      	ands	r3, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6093      	str	r3, [r2, #8]
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	5fffffc0 	.word	0x5fffffc0

0800414c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800415c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004160:	d101      	bne.n	8004166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	4b05      	ldr	r3, [pc, #20]	; (8004198 <LL_ADC_EnableInternalRegulator+0x24>)
 8004182:	4013      	ands	r3, r2
 8004184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	6fffffc0 	.word	0x6fffffc0

0800419c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b0:	d101      	bne.n	80041b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <LL_ADC_IsEnabled+0x18>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <LL_ADC_IsEnabled+0x1a>
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d101      	bne.n	8004202 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041fe:	2301      	movs	r3, #1
 8004200:	e000      	b.n	8004204 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b08      	cmp	r3, #8
 8004222:	d101      	bne.n	8004228 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1ee      	b.n	8004630 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fe fcb1 	bl	8002bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff67 	bl	800414c <LL_ADC_IsDeepPowerDownEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff ff4d 	bl	8004128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff82 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d114      	bne.n	80042c8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff66 	bl	8004174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042a8:	4b8e      	ldr	r3, [pc, #568]	; (80044e4 <HAL_ADC_Init+0x2ac>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	099b      	lsrs	r3, r3, #6
 80042ae:	4a8e      	ldr	r2, [pc, #568]	; (80044e8 <HAL_ADC_Init+0x2b0>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	099b      	lsrs	r3, r3, #6
 80042b6:	3301      	adds	r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042ba:	e002      	b.n	80042c2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3b01      	subs	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f9      	bne.n	80042bc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff ff65 	bl	800419c <LL_ADC_IsInternalRegulatorEnabled>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	f043 0210 	orr.w	r2, r3, #16
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e8:	f043 0201 	orr.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff ff76 	bl	80041ea <LL_ADC_REG_IsConversionOngoing>
 80042fe:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	f040 8188 	bne.w	800461e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 8184 	bne.w	800461e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff4a 	bl	80041c4 <LL_ADC_IsEnabled>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d136      	bne.n	80043a4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a6c      	ldr	r2, [pc, #432]	; (80044ec <HAL_ADC_Init+0x2b4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d004      	beq.n	800434a <HAL_ADC_Init+0x112>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6a      	ldr	r2, [pc, #424]	; (80044f0 <HAL_ADC_Init+0x2b8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d10e      	bne.n	8004368 <HAL_ADC_Init+0x130>
 800434a:	4868      	ldr	r0, [pc, #416]	; (80044ec <HAL_ADC_Init+0x2b4>)
 800434c:	f7ff ff3a 	bl	80041c4 <LL_ADC_IsEnabled>
 8004350:	4604      	mov	r4, r0
 8004352:	4867      	ldr	r0, [pc, #412]	; (80044f0 <HAL_ADC_Init+0x2b8>)
 8004354:	f7ff ff36 	bl	80041c4 <LL_ADC_IsEnabled>
 8004358:	4603      	mov	r3, r0
 800435a:	4323      	orrs	r3, r4
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	e008      	b.n	800437a <HAL_ADC_Init+0x142>
 8004368:	4862      	ldr	r0, [pc, #392]	; (80044f4 <HAL_ADC_Init+0x2bc>)
 800436a:	f7ff ff2b 	bl	80041c4 <LL_ADC_IsEnabled>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf0c      	ite	eq
 8004374:	2301      	moveq	r3, #1
 8004376:	2300      	movne	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a5a      	ldr	r2, [pc, #360]	; (80044ec <HAL_ADC_Init+0x2b4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_ADC_Init+0x15a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a58      	ldr	r2, [pc, #352]	; (80044f0 <HAL_ADC_Init+0x2b8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x15e>
 8004392:	4a59      	ldr	r2, [pc, #356]	; (80044f8 <HAL_ADC_Init+0x2c0>)
 8004394:	e000      	b.n	8004398 <HAL_ADC_Init+0x160>
 8004396:	4a59      	ldr	r2, [pc, #356]	; (80044fc <HAL_ADC_Init+0x2c4>)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f7ff fd04 	bl	8003dac <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a52      	ldr	r2, [pc, #328]	; (80044f4 <HAL_ADC_Init+0x2bc>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d129      	bne.n	8004402 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	7e5b      	ldrb	r3, [r3, #25]
 80043b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043b8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80043be:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b08      	cmp	r3, #8
 80043c6:	d013      	beq.n	80043f0 <HAL_ADC_Init+0x1b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b0c      	cmp	r3, #12
 80043ce:	d00d      	beq.n	80043ec <HAL_ADC_Init+0x1b4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2b1c      	cmp	r3, #28
 80043d6:	d007      	beq.n	80043e8 <HAL_ADC_Init+0x1b0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2b18      	cmp	r3, #24
 80043de:	d101      	bne.n	80043e4 <HAL_ADC_Init+0x1ac>
 80043e0:	2318      	movs	r3, #24
 80043e2:	e006      	b.n	80043f2 <HAL_ADC_Init+0x1ba>
 80043e4:	2300      	movs	r3, #0
 80043e6:	e004      	b.n	80043f2 <HAL_ADC_Init+0x1ba>
 80043e8:	2310      	movs	r3, #16
 80043ea:	e002      	b.n	80043f2 <HAL_ADC_Init+0x1ba>
 80043ec:	2308      	movs	r3, #8
 80043ee:	e000      	b.n	80043f2 <HAL_ADC_Init+0x1ba>
 80043f0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80043f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	e00e      	b.n	8004420 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7e5b      	ldrb	r3, [r3, #25]
 8004406:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800440c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004412:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d106      	bne.n	8004438 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	3b01      	subs	r3, #1
 8004430:	045b      	lsls	r3, r3, #17
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	4313      	orrs	r3, r2
 8004452:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <HAL_ADC_Init+0x2bc>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d115      	bne.n	800448a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	4b26      	ldr	r3, [pc, #152]	; (8004500 <HAL_ADC_Init+0x2c8>)
 8004466:	4013      	ands	r3, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	69b9      	ldr	r1, [r7, #24]
 800446e:	430b      	orrs	r3, r1
 8004470:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	611a      	str	r2, [r3, #16]
 8004488:	e009      	b.n	800449e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <HAL_ADC_Init+0x2cc>)
 8004492:	4013      	ands	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6812      	ldr	r2, [r2, #0]
 8004498:	69b9      	ldr	r1, [r7, #24]
 800449a:	430b      	orrs	r3, r1
 800449c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7ff fea1 	bl	80041ea <LL_ADC_REG_IsConversionOngoing>
 80044a8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff feae 	bl	8004210 <LL_ADC_INJ_IsConversionOngoing>
 80044b4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 808e 	bne.w	80045da <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f040 808a 	bne.w	80045da <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <HAL_ADC_Init+0x2bc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d11b      	bne.n	8004508 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e1b      	ldrb	r3, [r3, #24]
 80044d4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044dc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
 80044e2:	e018      	b.n	8004516 <HAL_ADC_Init+0x2de>
 80044e4:	24000000 	.word	0x24000000
 80044e8:	053e2d63 	.word	0x053e2d63
 80044ec:	40022000 	.word	0x40022000
 80044f0:	40022100 	.word	0x40022100
 80044f4:	58026000 	.word	0x58026000
 80044f8:	40022300 	.word	0x40022300
 80044fc:	58026300 	.word	0x58026300
 8004500:	fff04007 	.word	0xfff04007
 8004504:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	7e1b      	ldrb	r3, [r3, #24]
 800450c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004512:	4313      	orrs	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68da      	ldr	r2, [r3, #12]
 800451c:	4b46      	ldr	r3, [pc, #280]	; (8004638 <HAL_ADC_Init+0x400>)
 800451e:	4013      	ands	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	69b9      	ldr	r1, [r7, #24]
 8004526:	430b      	orrs	r3, r1
 8004528:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004530:	2b01      	cmp	r3, #1
 8004532:	d137      	bne.n	80045a4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004538:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a3f      	ldr	r2, [pc, #252]	; (800463c <HAL_ADC_Init+0x404>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d116      	bne.n	8004572 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	4b3d      	ldr	r3, [pc, #244]	; (8004640 <HAL_ADC_Init+0x408>)
 800454c:	4013      	ands	r3, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004556:	4311      	orrs	r1, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800455c:	4311      	orrs	r1, r2
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004562:	430a      	orrs	r2, r1
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	611a      	str	r2, [r3, #16]
 8004570:	e020      	b.n	80045b4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	4b32      	ldr	r3, [pc, #200]	; (8004644 <HAL_ADC_Init+0x40c>)
 800457a:	4013      	ands	r3, r2
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004580:	3a01      	subs	r2, #1
 8004582:	0411      	lsls	r1, r2, #16
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004594:	430a      	orrs	r2, r1
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
 80045a2:	e007      	b.n	80045b4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0201 	bic.w	r2, r2, #1
 80045b2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a1b      	ldr	r2, [pc, #108]	; (800463c <HAL_ADC_Init+0x404>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d002      	beq.n	80045da <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fd63 	bl	80050a0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d10c      	bne.n	80045fc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f023 010f 	bic.w	r1, r3, #15
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	1e5a      	subs	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	631a      	str	r2, [r3, #48]	; 0x30
 80045fa:	e007      	b.n	800460c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 020f 	bic.w	r2, r2, #15
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	661a      	str	r2, [r3, #96]	; 0x60
 800461c:	e007      	b.n	800462e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004622:	f043 0210 	orr.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800462e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3724      	adds	r7, #36	; 0x24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd90      	pop	{r4, r7, pc}
 8004638:	ffffbffc 	.word	0xffffbffc
 800463c:	58026000 	.word	0x58026000
 8004640:	fc00f81f 	.word	0xfc00f81f
 8004644:	fc00f81e 	.word	0xfc00f81e

08004648 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b0b9      	sub	sp, #228	; 0xe4
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004652:	2300      	movs	r3, #0
 8004654:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004662:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4aa9      	ldr	r2, [pc, #676]	; (8004910 <HAL_ADC_ConfigChannel+0x2c8>)
 800466a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d102      	bne.n	800467c <HAL_ADC_ConfigChannel+0x34>
 8004676:	2302      	movs	r3, #2
 8004678:	f000 bcfa 	b.w	8005070 <HAL_ADC_ConfigChannel+0xa28>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff fdae 	bl	80041ea <LL_ADC_REG_IsConversionOngoing>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	f040 84de 	bne.w	8005052 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a9e      	ldr	r2, [pc, #632]	; (8004914 <HAL_ADC_ConfigChannel+0x2cc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d033      	beq.n	8004708 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <HAL_ADC_ConfigChannel+0x76>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	f003 031f 	and.w	r3, r3, #31
 80046b6:	2201      	movs	r2, #1
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	e01d      	b.n	80046fa <HAL_ADC_ConfigChannel+0xb2>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80046e2:	2320      	movs	r3, #32
 80046e4:	e004      	b.n	80046f0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80046e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ea:	fab3 f383 	clz	r3, r3
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 031f 	and.w	r3, r3, #31
 80046f4:	2201      	movs	r2, #1
 80046f6:	fa02 f303 	lsl.w	r3, r2, r3
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	69d1      	ldr	r1, [r2, #28]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	f7ff fc6f 	bl	8003ff8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fd63 	bl	80041ea <LL_ADC_REG_IsConversionOngoing>
 8004724:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff fd6f 	bl	8004210 <LL_ADC_INJ_IsConversionOngoing>
 8004732:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004736:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 8270 	bne.w	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004740:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004744:	2b00      	cmp	r3, #0
 8004746:	f040 826b 	bne.w	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6819      	ldr	r1, [r3, #0]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	461a      	mov	r2, r3
 8004758:	f7ff fc7a 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6c      	ldr	r2, [pc, #432]	; (8004914 <HAL_ADC_ConfigChannel+0x2cc>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d10d      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004780:	e032      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004782:	4b65      	ldr	r3, [pc, #404]	; (8004918 <HAL_ADC_ConfigChannel+0x2d0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478e:	d10b      	bne.n	80047a8 <HAL_ADC_ConfigChannel+0x160>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	089b      	lsrs	r3, r3, #2
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	e01d      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x19c>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x186>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	089b      	lsrs	r3, r3, #2
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	fa02 f303 	lsl.w	r3, r2, r3
 80047cc:	e00a      	b.n	80047e4 <HAL_ADC_ConfigChannel+0x19c>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	089b      	lsrs	r3, r3, #2
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d048      	beq.n	8004882 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6919      	ldr	r1, [r3, #16]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004800:	f7ff fb08 	bl	8003e14 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a42      	ldr	r2, [pc, #264]	; (8004914 <HAL_ADC_ConfigChannel+0x2cc>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d119      	bne.n	8004842 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	6919      	ldr	r1, [r3, #16]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	461a      	mov	r2, r3
 800481c:	f7ff fba0 	bl	8003f60 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	6919      	ldr	r1, [r3, #16]
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d102      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x1f0>
 8004832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004836:	e000      	b.n	800483a <HAL_ADC_ConfigChannel+0x1f2>
 8004838:	2300      	movs	r3, #0
 800483a:	461a      	mov	r2, r3
 800483c:	f7ff fb6e 	bl	8003f1c <LL_ADC_SetOffsetSaturation>
 8004840:	e1ee      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	6919      	ldr	r1, [r3, #16]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <HAL_ADC_ConfigChannel+0x212>
 8004854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004858:	e000      	b.n	800485c <HAL_ADC_ConfigChannel+0x214>
 800485a:	2300      	movs	r3, #0
 800485c:	461a      	mov	r2, r3
 800485e:	f7ff fb3b 	bl	8003ed8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	6919      	ldr	r1, [r3, #16]
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	7e1b      	ldrb	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d102      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x230>
 8004872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004876:	e000      	b.n	800487a <HAL_ADC_ConfigChannel+0x232>
 8004878:	2300      	movs	r3, #0
 800487a:	461a      	mov	r2, r3
 800487c:	f7ff fb12 	bl	8003ea4 <LL_ADC_SetDataRightShift>
 8004880:	e1ce      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_ADC_ConfigChannel+0x2cc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	f040 8181 	bne.w	8004b90 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff faef 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 800489a:	4603      	mov	r3, r0
 800489c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x272>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2100      	movs	r1, #0
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fae4 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 80048b0:	4603      	mov	r3, r0
 80048b2:	0e9b      	lsrs	r3, r3, #26
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	e01e      	b.n	80048f8 <HAL_ADC_ConfigChannel+0x2b0>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2100      	movs	r1, #0
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fad9 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80048d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80048e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80048e8:	2320      	movs	r3, #32
 80048ea:	e004      	b.n	80048f6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80048ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048f0:	fab3 f383 	clz	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <HAL_ADC_ConfigChannel+0x2d4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	0e9b      	lsrs	r3, r3, #26
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	e01e      	b.n	800494e <HAL_ADC_ConfigChannel+0x306>
 8004910:	47ff0000 	.word	0x47ff0000
 8004914:	58026000 	.word	0x58026000
 8004918:	5c001000 	.word	0x5c001000
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004928:	fa93 f3a3 	rbit	r3, r3
 800492c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004940:	2320      	movs	r3, #32
 8004942:	e004      	b.n	800494e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004948:	fab3 f383 	clz	r3, r3
 800494c:	b2db      	uxtb	r3, r3
 800494e:	429a      	cmp	r2, r3
 8004950:	d106      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff fb22 	bl	8003fa4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f7ff fa86 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 800496c:	4603      	mov	r3, r0
 800496e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <HAL_ADC_ConfigChannel+0x344>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fa7b 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	0e9b      	lsrs	r3, r3, #26
 8004986:	f003 021f 	and.w	r2, r3, #31
 800498a:	e01e      	b.n	80049ca <HAL_ADC_ConfigChannel+0x382>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fa70 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004998:	4603      	mov	r3, r0
 800499a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049a2:	fa93 f3a3 	rbit	r3, r3
 80049a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80049aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80049b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80049ba:	2320      	movs	r3, #32
 80049bc:	e004      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80049be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049c2:	fab3 f383 	clz	r3, r3
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x39a>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	0e9b      	lsrs	r3, r3, #26
 80049dc:	f003 031f 	and.w	r3, r3, #31
 80049e0:	e018      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x3cc>
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049ee:	fa93 f3a3 	rbit	r3, r3
 80049f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80049f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80049fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004a06:	2320      	movs	r3, #32
 8004a08:	e004      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a0e:	fab3 f383 	clz	r3, r3
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d106      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2101      	movs	r1, #1
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fabf 	bl	8003fa4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7ff fa23 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004a32:	4603      	mov	r3, r0
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10a      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x40a>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2102      	movs	r1, #2
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fa18 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	0e9b      	lsrs	r3, r3, #26
 8004a4c:	f003 021f 	and.w	r2, r3, #31
 8004a50:	e01e      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x448>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2102      	movs	r1, #2
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fa0d 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004a80:	2320      	movs	r3, #32
 8004a82:	e004      	b.n	8004a8e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d105      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x460>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	0e9b      	lsrs	r3, r3, #26
 8004aa2:	f003 031f 	and.w	r3, r3, #31
 8004aa6:	e014      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x48a>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ab0:	fa93 f3a3 	rbit	r3, r3
 8004ab4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e004      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004acc:	fab3 f383 	clz	r3, r3
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d106      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2200      	movs	r2, #0
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7ff fa60 	bl	8003fa4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2103      	movs	r1, #3
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff f9c4 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <HAL_ADC_ConfigChannel+0x4c8>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2103      	movs	r1, #3
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f9b9 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004b06:	4603      	mov	r3, r0
 8004b08:	0e9b      	lsrs	r3, r3, #26
 8004b0a:	f003 021f 	and.w	r2, r3, #31
 8004b0e:	e017      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x4f8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2103      	movs	r1, #3
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff f9ae 	bl	8003e78 <LL_ADC_GetOffsetChannel>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b22:	fa93 f3a3 	rbit	r3, r3
 8004b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b2a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004b32:	2320      	movs	r3, #32
 8004b34:	e003      	b.n	8004b3e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d105      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x510>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	0e9b      	lsrs	r3, r3, #26
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	e011      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x534>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b68:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d14f      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2103      	movs	r1, #3
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f7ff fa0b 	bl	8003fa4 <LL_ADC_SetOffsetState>
 8004b8e:	e047      	b.n	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	069b      	lsls	r3, r3, #26
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bb2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d107      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bd6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d107      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bfa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	069b      	lsls	r3, r3, #26
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d107      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c1e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff facd 	bl	80041c4 <LL_ADC_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f040 8219 	bne.w	8005064 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	6819      	ldr	r1, [r3, #0]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f7ff fa32 	bl	80040a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4aa1      	ldr	r2, [pc, #644]	; (8004ed0 <HAL_ADC_ConfigChannel+0x888>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	f040 812e 	bne.w	8004eac <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x630>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	0e9b      	lsrs	r3, r3, #26
 8004c66:	3301      	adds	r3, #1
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	bf94      	ite	ls
 8004c70:	2301      	movls	r3, #1
 8004c72:	2300      	movhi	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	e019      	b.n	8004cac <HAL_ADC_ConfigChannel+0x664>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c80:	fa93 f3a3 	rbit	r3, r3
 8004c84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004c90:	2320      	movs	r3, #32
 8004c92:	e003      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004c94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f003 031f 	and.w	r3, r3, #31
 8004ca2:	2b09      	cmp	r3, #9
 8004ca4:	bf94      	ite	ls
 8004ca6:	2301      	movls	r3, #1
 8004ca8:	2300      	movhi	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d079      	beq.n	8004da4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d107      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x684>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	0e9b      	lsrs	r3, r3, #26
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	069b      	lsls	r3, r3, #26
 8004cc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cca:	e015      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x6b0>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	e003      	b.n	8004cf0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cea:	fab3 f383 	clz	r3, r3
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	069b      	lsls	r3, r3, #26
 8004cf4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d109      	bne.n	8004d18 <HAL_ADC_ConfigChannel+0x6d0>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	0e9b      	lsrs	r3, r3, #26
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	e017      	b.n	8004d48 <HAL_ADC_ConfigChannel+0x700>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d20:	fa93 f3a3 	rbit	r3, r3
 8004d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004d30:	2320      	movs	r3, #32
 8004d32:	e003      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2101      	movs	r1, #1
 8004d44:	fa01 f303 	lsl.w	r3, r1, r3
 8004d48:	ea42 0103 	orr.w	r1, r2, r3
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <HAL_ADC_ConfigChannel+0x726>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	0e9b      	lsrs	r3, r3, #26
 8004d5e:	3301      	adds	r3, #1
 8004d60:	f003 021f 	and.w	r2, r3, #31
 8004d64:	4613      	mov	r3, r2
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	4413      	add	r3, r2
 8004d6a:	051b      	lsls	r3, r3, #20
 8004d6c:	e018      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x758>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d76:	fa93 f3a3 	rbit	r3, r3
 8004d7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004d86:	2320      	movs	r3, #32
 8004d88:	e003      	b.n	8004d92 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d8c:	fab3 f383 	clz	r3, r3
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	3301      	adds	r3, #1
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da0:	430b      	orrs	r3, r1
 8004da2:	e07e      	b.n	8004ea2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x778>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	0e9b      	lsrs	r3, r3, #26
 8004db6:	3301      	adds	r3, #1
 8004db8:	069b      	lsls	r3, r3, #26
 8004dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dbe:	e015      	b.n	8004dec <HAL_ADC_ConfigChannel+0x7a4>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	fa93 f3a3 	rbit	r3, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004dd8:	2320      	movs	r3, #32
 8004dda:	e003      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	fab3 f383 	clz	r3, r3
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	3301      	adds	r3, #1
 8004de6:	069b      	lsls	r3, r3, #26
 8004de8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x7c4>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	0e9b      	lsrs	r3, r3, #26
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2101      	movs	r1, #1
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	e017      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x7f4>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	61bb      	str	r3, [r7, #24]
  return result;
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e003      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2101      	movs	r1, #1
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	ea42 0103 	orr.w	r1, r2, r3
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10d      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x820>
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	0e9b      	lsrs	r3, r3, #26
 8004e52:	3301      	adds	r3, #1
 8004e54:	f003 021f 	and.w	r2, r3, #31
 8004e58:	4613      	mov	r3, r2
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3b1e      	subs	r3, #30
 8004e60:	051b      	lsls	r3, r3, #20
 8004e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e66:	e01b      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x858>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	fa93 f3a3 	rbit	r3, r3
 8004e74:	60fb      	str	r3, [r7, #12]
  return result;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004e80:	2320      	movs	r3, #32
 8004e82:	e003      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	fab3 f383 	clz	r3, r3
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	f003 021f 	and.w	r2, r3, #31
 8004e92:	4613      	mov	r3, r2
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	3b1e      	subs	r3, #30
 8004e9a:	051b      	lsls	r3, r3, #20
 8004e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ea0:	430b      	orrs	r3, r1
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	6892      	ldr	r2, [r2, #8]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	f7ff f8d2 	bl	8004050 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f280 80d7 	bge.w	8005064 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a06      	ldr	r2, [pc, #24]	; (8004ed4 <HAL_ADC_ConfigChannel+0x88c>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d004      	beq.n	8004eca <HAL_ADC_ConfigChannel+0x882>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <HAL_ADC_ConfigChannel+0x890>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d10a      	bne.n	8004ee0 <HAL_ADC_ConfigChannel+0x898>
 8004eca:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_ADC_ConfigChannel+0x894>)
 8004ecc:	e009      	b.n	8004ee2 <HAL_ADC_ConfigChannel+0x89a>
 8004ece:	bf00      	nop
 8004ed0:	47ff0000 	.word	0x47ff0000
 8004ed4:	40022000 	.word	0x40022000
 8004ed8:	40022100 	.word	0x40022100
 8004edc:	40022300 	.word	0x40022300
 8004ee0:	4b65      	ldr	r3, [pc, #404]	; (8005078 <HAL_ADC_ConfigChannel+0xa30>)
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe ff88 	bl	8003df8 <LL_ADC_GetCommonPathInternalCh>
 8004ee8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a62      	ldr	r2, [pc, #392]	; (800507c <HAL_ADC_ConfigChannel+0xa34>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_ADC_ConfigChannel+0x8b8>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a61      	ldr	r2, [pc, #388]	; (8005080 <HAL_ADC_ConfigChannel+0xa38>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10e      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x8d6>
 8004f00:	485e      	ldr	r0, [pc, #376]	; (800507c <HAL_ADC_ConfigChannel+0xa34>)
 8004f02:	f7ff f95f 	bl	80041c4 <LL_ADC_IsEnabled>
 8004f06:	4604      	mov	r4, r0
 8004f08:	485d      	ldr	r0, [pc, #372]	; (8005080 <HAL_ADC_ConfigChannel+0xa38>)
 8004f0a:	f7ff f95b 	bl	80041c4 <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4323      	orrs	r3, r4
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	bf0c      	ite	eq
 8004f16:	2301      	moveq	r3, #1
 8004f18:	2300      	movne	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	e008      	b.n	8004f30 <HAL_ADC_ConfigChannel+0x8e8>
 8004f1e:	4859      	ldr	r0, [pc, #356]	; (8005084 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f20:	f7ff f950 	bl	80041c4 <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bf0c      	ite	eq
 8004f2a:	2301      	moveq	r3, #1
 8004f2c:	2300      	movne	r3, #0
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 8084 	beq.w	800503e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a53      	ldr	r2, [pc, #332]	; (8005088 <HAL_ADC_ConfigChannel+0xa40>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d132      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x95e>
 8004f40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d12c      	bne.n	8004fa6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a4c      	ldr	r2, [pc, #304]	; (8005084 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f040 8086 	bne.w	8005064 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a47      	ldr	r2, [pc, #284]	; (800507c <HAL_ADC_ConfigChannel+0xa34>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_ADC_ConfigChannel+0x924>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a46      	ldr	r2, [pc, #280]	; (8005080 <HAL_ADC_ConfigChannel+0xa38>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x928>
 8004f6c:	4a47      	ldr	r2, [pc, #284]	; (800508c <HAL_ADC_ConfigChannel+0xa44>)
 8004f6e:	e000      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x92a>
 8004f70:	4a41      	ldr	r2, [pc, #260]	; (8005078 <HAL_ADC_ConfigChannel+0xa30>)
 8004f72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe ff28 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f82:	4b43      	ldr	r3, [pc, #268]	; (8005090 <HAL_ADC_ConfigChannel+0xa48>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	4a42      	ldr	r2, [pc, #264]	; (8005094 <HAL_ADC_ConfigChannel+0xa4c>)
 8004f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8e:	099b      	lsrs	r3, r3, #6
 8004f90:	3301      	adds	r3, #1
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f96:	e002      	b.n	8004f9e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f9      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fa4:	e05e      	b.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a3b      	ldr	r2, [pc, #236]	; (8005098 <HAL_ADC_ConfigChannel+0xa50>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d120      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x9aa>
 8004fb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11a      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <HAL_ADC_ConfigChannel+0xa3c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d14e      	bne.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	; (800507c <HAL_ADC_ConfigChannel+0xa34>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_ADC_ConfigChannel+0x992>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_ADC_ConfigChannel+0xa38>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d101      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x996>
 8004fda:	4a2c      	ldr	r2, [pc, #176]	; (800508c <HAL_ADC_ConfigChannel+0xa44>)
 8004fdc:	e000      	b.n	8004fe0 <HAL_ADC_ConfigChannel+0x998>
 8004fde:	4a26      	ldr	r2, [pc, #152]	; (8005078 <HAL_ADC_ConfigChannel+0xa30>)
 8004fe0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fe4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fe fef1 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ff0:	e038      	b.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a29      	ldr	r2, [pc, #164]	; (800509c <HAL_ADC_ConfigChannel+0xa54>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d133      	bne.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
 8004ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005000:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d12d      	bne.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <HAL_ADC_ConfigChannel+0xa3c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d128      	bne.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_ADC_ConfigChannel+0xa34>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_ADC_ConfigChannel+0x9de>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <HAL_ADC_ConfigChannel+0xa38>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d101      	bne.n	800502a <HAL_ADC_ConfigChannel+0x9e2>
 8005026:	4a19      	ldr	r2, [pc, #100]	; (800508c <HAL_ADC_ConfigChannel+0xa44>)
 8005028:	e000      	b.n	800502c <HAL_ADC_ConfigChannel+0x9e4>
 800502a:	4a13      	ldr	r2, [pc, #76]	; (8005078 <HAL_ADC_ConfigChannel+0xa30>)
 800502c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005030:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7fe fecb 	bl	8003dd2 <LL_ADC_SetCommonPathInternalCh>
 800503c:	e012      	b.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005050:	e008      	b.n	8005064 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005056:	f043 0220 	orr.w	r2, r3, #32
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800506c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005070:	4618      	mov	r0, r3
 8005072:	37e4      	adds	r7, #228	; 0xe4
 8005074:	46bd      	mov	sp, r7
 8005076:	bd90      	pop	{r4, r7, pc}
 8005078:	58026300 	.word	0x58026300
 800507c:	40022000 	.word	0x40022000
 8005080:	40022100 	.word	0x40022100
 8005084:	58026000 	.word	0x58026000
 8005088:	c7520000 	.word	0xc7520000
 800508c:	40022300 	.word	0x40022300
 8005090:	24000000 	.word	0x24000000
 8005094:	053e2d63 	.word	0x053e2d63
 8005098:	c3210000 	.word	0xc3210000
 800509c:	cb840000 	.word	0xcb840000

080050a0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6c      	ldr	r2, [pc, #432]	; (8005260 <ADC_ConfigureBoostMode+0x1c0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <ADC_ConfigureBoostMode+0x1c>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a6b      	ldr	r2, [pc, #428]	; (8005264 <ADC_ConfigureBoostMode+0x1c4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d109      	bne.n	80050d0 <ADC_ConfigureBoostMode+0x30>
 80050bc:	4b6a      	ldr	r3, [pc, #424]	; (8005268 <ADC_ConfigureBoostMode+0x1c8>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	bf14      	ite	ne
 80050c8:	2301      	movne	r3, #1
 80050ca:	2300      	moveq	r3, #0
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	e008      	b.n	80050e2 <ADC_ConfigureBoostMode+0x42>
 80050d0:	4b66      	ldr	r3, [pc, #408]	; (800526c <ADC_ConfigureBoostMode+0x1cc>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d01c      	beq.n	8005120 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80050e6:	f005 fcab 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 80050ea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050f4:	d010      	beq.n	8005118 <ADC_ConfigureBoostMode+0x78>
 80050f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050fa:	d873      	bhi.n	80051e4 <ADC_ConfigureBoostMode+0x144>
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d002      	beq.n	8005108 <ADC_ConfigureBoostMode+0x68>
 8005102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005106:	d16d      	bne.n	80051e4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	60fb      	str	r3, [r7, #12]
        break;
 8005116:	e068      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	089b      	lsrs	r3, r3, #2
 800511c:	60fb      	str	r3, [r7, #12]
        break;
 800511e:	e064      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005120:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	f006 fe86 	bl	800be38 <HAL_RCCEx_GetPeriphCLKFreq>
 800512c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005136:	d051      	beq.n	80051dc <ADC_ConfigureBoostMode+0x13c>
 8005138:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800513c:	d854      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 800513e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005142:	d047      	beq.n	80051d4 <ADC_ConfigureBoostMode+0x134>
 8005144:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005148:	d84e      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 800514a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800514e:	d03d      	beq.n	80051cc <ADC_ConfigureBoostMode+0x12c>
 8005150:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005154:	d848      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 8005156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800515a:	d033      	beq.n	80051c4 <ADC_ConfigureBoostMode+0x124>
 800515c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005160:	d842      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 8005162:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005166:	d029      	beq.n	80051bc <ADC_ConfigureBoostMode+0x11c>
 8005168:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800516c:	d83c      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 800516e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005172:	d01a      	beq.n	80051aa <ADC_ConfigureBoostMode+0x10a>
 8005174:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005178:	d836      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 800517a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800517e:	d014      	beq.n	80051aa <ADC_ConfigureBoostMode+0x10a>
 8005180:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005184:	d830      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 8005186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800518a:	d00e      	beq.n	80051aa <ADC_ConfigureBoostMode+0x10a>
 800518c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005190:	d82a      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 8005192:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005196:	d008      	beq.n	80051aa <ADC_ConfigureBoostMode+0x10a>
 8005198:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800519c:	d824      	bhi.n	80051e8 <ADC_ConfigureBoostMode+0x148>
 800519e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051a2:	d002      	beq.n	80051aa <ADC_ConfigureBoostMode+0x10a>
 80051a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051a8:	d11e      	bne.n	80051e8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	0c9b      	lsrs	r3, r3, #18
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	60fb      	str	r3, [r7, #12]
        break;
 80051ba:	e016      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
        break;
 80051c2:	e012      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	60fb      	str	r3, [r7, #12]
        break;
 80051ca:	e00e      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	099b      	lsrs	r3, r3, #6
 80051d0:	60fb      	str	r3, [r7, #12]
        break;
 80051d2:	e00a      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	09db      	lsrs	r3, r3, #7
 80051d8:	60fb      	str	r3, [r7, #12]
        break;
 80051da:	e006      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	0a1b      	lsrs	r3, r3, #8
 80051e0:	60fb      	str	r3, [r7, #12]
        break;
 80051e2:	e002      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
        break;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80051e8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <ADC_ConfigureBoostMode+0x1d0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d808      	bhi.n	800520a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005206:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005208:	e025      	b.n	8005256 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a19      	ldr	r2, [pc, #100]	; (8005274 <ADC_ConfigureBoostMode+0x1d4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d80a      	bhi.n	8005228 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005224:	609a      	str	r2, [r3, #8]
}
 8005226:	e016      	b.n	8005256 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a13      	ldr	r2, [pc, #76]	; (8005278 <ADC_ConfigureBoostMode+0x1d8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d80a      	bhi.n	8005246 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005242:	609a      	str	r2, [r3, #8]
}
 8005244:	e007      	b.n	8005256 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005254:	609a      	str	r2, [r3, #8]
}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	40022000 	.word	0x40022000
 8005264:	40022100 	.word	0x40022100
 8005268:	40022300 	.word	0x40022300
 800526c:	58026300 	.word	0x58026300
 8005270:	005f5e10 	.word	0x005f5e10
 8005274:	00bebc20 	.word	0x00bebc20
 8005278:	017d7840 	.word	0x017d7840

0800527c <LL_ADC_IsEnabled>:
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <LL_ADC_IsEnabled+0x18>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <LL_ADC_IsEnabled+0x1a>
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d101      	bne.n	80052ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b0a3      	sub	sp, #140	; 0x8c
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d101      	bne.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052e2:	2302      	movs	r3, #2
 80052e4:	e0c1      	b.n	800546a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80052ee:	2300      	movs	r3, #0
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a5e      	ldr	r2, [pc, #376]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d102      	bne.n	8005306 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005300:	4b5d      	ldr	r3, [pc, #372]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e001      	b.n	800530a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e0a0      	b.n	800546a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff ffb9 	bl	80052a2 <LL_ADC_REG_IsConversionOngoing>
 8005330:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4618      	mov	r0, r3
 800533a:	f7ff ffb2 	bl	80052a2 <LL_ADC_REG_IsConversionOngoing>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 8081 	bne.w	8005448 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005346:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d17c      	bne.n	8005448 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a48      	ldr	r2, [pc, #288]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a46      	ldr	r2, [pc, #280]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005362:	4b46      	ldr	r3, [pc, #280]	; (800547c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005364:	e000      	b.n	8005368 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005366:	4b46      	ldr	r3, [pc, #280]	; (8005480 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005368:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d039      	beq.n	80053e6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005372:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	431a      	orrs	r2, r3
 8005380:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005382:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d004      	beq.n	8005398 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a39      	ldr	r2, [pc, #228]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10e      	bne.n	80053b6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005398:	4836      	ldr	r0, [pc, #216]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800539a:	f7ff ff6f 	bl	800527c <LL_ADC_IsEnabled>
 800539e:	4604      	mov	r4, r0
 80053a0:	4835      	ldr	r0, [pc, #212]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053a2:	f7ff ff6b 	bl	800527c <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4323      	orrs	r3, r4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e008      	b.n	80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80053b6:	4833      	ldr	r0, [pc, #204]	; (8005484 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80053b8:	f7ff ff60 	bl	800527c <LL_ADC_IsEnabled>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf0c      	ite	eq
 80053c2:	2301      	moveq	r3, #1
 80053c4:	2300      	movne	r3, #0
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d047      	beq.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	6811      	ldr	r1, [r2, #0]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	6892      	ldr	r2, [r2, #8]
 80053dc:	430a      	orrs	r2, r1
 80053de:	431a      	orrs	r2, r3
 80053e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053e2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053e4:	e03a      	b.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80053e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053f0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d004      	beq.n	8005406 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1d      	ldr	r2, [pc, #116]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10e      	bne.n	8005424 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005406:	481b      	ldr	r0, [pc, #108]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005408:	f7ff ff38 	bl	800527c <LL_ADC_IsEnabled>
 800540c:	4604      	mov	r4, r0
 800540e:	481a      	ldr	r0, [pc, #104]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005410:	f7ff ff34 	bl	800527c <LL_ADC_IsEnabled>
 8005414:	4603      	mov	r3, r0
 8005416:	4323      	orrs	r3, r4
 8005418:	2b00      	cmp	r3, #0
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	e008      	b.n	8005436 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005424:	4817      	ldr	r0, [pc, #92]	; (8005484 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005426:	f7ff ff29 	bl	800527c <LL_ADC_IsEnabled>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf0c      	ite	eq
 8005430:	2301      	moveq	r3, #1
 8005432:	2300      	movne	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800543a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800543c:	689a      	ldr	r2, [r3, #8]
 800543e:	4b12      	ldr	r3, [pc, #72]	; (8005488 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005440:	4013      	ands	r3, r2
 8005442:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005444:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005446:	e009      	b.n	800545c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800545a:	e000      	b.n	800545e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800545c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005466:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800546a:	4618      	mov	r0, r3
 800546c:	378c      	adds	r7, #140	; 0x8c
 800546e:	46bd      	mov	sp, r7
 8005470:	bd90      	pop	{r4, r7, pc}
 8005472:	bf00      	nop
 8005474:	40022000 	.word	0x40022000
 8005478:	40022100 	.word	0x40022100
 800547c:	40022300 	.word	0x40022300
 8005480:	58026300 	.word	0x58026300
 8005484:	58026000 	.word	0x58026000
 8005488:	fffff0e0 	.word	0xfffff0e0

0800548c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f003 0307 	and.w	r3, r3, #7
 800549a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <__NVIC_SetPriorityGrouping+0x40>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <__NVIC_SetPriorityGrouping+0x44>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <__NVIC_SetPriorityGrouping+0x40>)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	60d3      	str	r3, [r2, #12]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000ed00 	.word	0xe000ed00
 80054d0:	05fa0000 	.word	0x05fa0000

080054d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054d8:	4b04      	ldr	r3, [pc, #16]	; (80054ec <__NVIC_GetPriorityGrouping+0x18>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	0a1b      	lsrs	r3, r3, #8
 80054de:	f003 0307 	and.w	r3, r3, #7
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr
 80054ec:	e000ed00 	.word	0xe000ed00

080054f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	db0b      	blt.n	800551a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	f003 021f 	and.w	r2, r3, #31
 8005508:	4907      	ldr	r1, [pc, #28]	; (8005528 <__NVIC_EnableIRQ+0x38>)
 800550a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800550e:	095b      	lsrs	r3, r3, #5
 8005510:	2001      	movs	r0, #1
 8005512:	fa00 f202 	lsl.w	r2, r0, r2
 8005516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	e000e100 	.word	0xe000e100

0800552c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	6039      	str	r1, [r7, #0]
 8005536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800553c:	2b00      	cmp	r3, #0
 800553e:	db0a      	blt.n	8005556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	b2da      	uxtb	r2, r3
 8005544:	490c      	ldr	r1, [pc, #48]	; (8005578 <__NVIC_SetPriority+0x4c>)
 8005546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800554a:	0112      	lsls	r2, r2, #4
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	440b      	add	r3, r1
 8005550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005554:	e00a      	b.n	800556c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4908      	ldr	r1, [pc, #32]	; (800557c <__NVIC_SetPriority+0x50>)
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	3b04      	subs	r3, #4
 8005564:	0112      	lsls	r2, r2, #4
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	440b      	add	r3, r1
 800556a:	761a      	strb	r2, [r3, #24]
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	e000e100 	.word	0xe000e100
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005580:	b480      	push	{r7}
 8005582:	b089      	sub	sp, #36	; 0x24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f1c3 0307 	rsb	r3, r3, #7
 800559a:	2b04      	cmp	r3, #4
 800559c:	bf28      	it	cs
 800559e:	2304      	movcs	r3, #4
 80055a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3304      	adds	r3, #4
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d902      	bls.n	80055b0 <NVIC_EncodePriority+0x30>
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3b03      	subs	r3, #3
 80055ae:	e000      	b.n	80055b2 <NVIC_EncodePriority+0x32>
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	43da      	mvns	r2, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	401a      	ands	r2, r3
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055c8:	f04f 31ff 	mov.w	r1, #4294967295
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa01 f303 	lsl.w	r3, r1, r3
 80055d2:	43d9      	mvns	r1, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d8:	4313      	orrs	r3, r2
         );
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3724      	adds	r7, #36	; 0x24
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055f8:	d301      	bcc.n	80055fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055fa:	2301      	movs	r3, #1
 80055fc:	e00f      	b.n	800561e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055fe:	4a0a      	ldr	r2, [pc, #40]	; (8005628 <SysTick_Config+0x40>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3b01      	subs	r3, #1
 8005604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005606:	210f      	movs	r1, #15
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	f7ff ff8e 	bl	800552c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <SysTick_Config+0x40>)
 8005612:	2200      	movs	r2, #0
 8005614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <SysTick_Config+0x40>)
 8005618:	2207      	movs	r2, #7
 800561a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	e000e010 	.word	0xe000e010

0800562c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff ff29 	bl	800548c <__NVIC_SetPriorityGrouping>
}
 800563a:	bf00      	nop
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	4603      	mov	r3, r0
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
 800564e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005650:	f7ff ff40 	bl	80054d4 <__NVIC_GetPriorityGrouping>
 8005654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	6978      	ldr	r0, [r7, #20]
 800565c:	f7ff ff90 	bl	8005580 <NVIC_EncodePriority>
 8005660:	4602      	mov	r2, r0
 8005662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ff5f 	bl	800552c <__NVIC_SetPriority>
}
 800566e:	bf00      	nop
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b082      	sub	sp, #8
 800567a:	af00      	add	r7, sp, #0
 800567c:	4603      	mov	r3, r0
 800567e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff33 	bl	80054f0 <__NVIC_EnableIRQ>
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b082      	sub	sp, #8
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff ffa4 	bl	80055e8 <SysTick_Config>
 80056a0:	4603      	mov	r3, r0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80056b4:	f7fe fb34 	bl	8003d20 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e312      	b.n	8005cea <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a66      	ldr	r2, [pc, #408]	; (8005864 <HAL_DMA_Init+0x1b8>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d04a      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a65      	ldr	r2, [pc, #404]	; (8005868 <HAL_DMA_Init+0x1bc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d045      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a63      	ldr	r2, [pc, #396]	; (800586c <HAL_DMA_Init+0x1c0>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d040      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a62      	ldr	r2, [pc, #392]	; (8005870 <HAL_DMA_Init+0x1c4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d03b      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a60      	ldr	r2, [pc, #384]	; (8005874 <HAL_DMA_Init+0x1c8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d036      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a5f      	ldr	r2, [pc, #380]	; (8005878 <HAL_DMA_Init+0x1cc>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d031      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a5d      	ldr	r2, [pc, #372]	; (800587c <HAL_DMA_Init+0x1d0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02c      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a5c      	ldr	r2, [pc, #368]	; (8005880 <HAL_DMA_Init+0x1d4>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d027      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a5a      	ldr	r2, [pc, #360]	; (8005884 <HAL_DMA_Init+0x1d8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d022      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a59      	ldr	r2, [pc, #356]	; (8005888 <HAL_DMA_Init+0x1dc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d01d      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a57      	ldr	r2, [pc, #348]	; (800588c <HAL_DMA_Init+0x1e0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d018      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a56      	ldr	r2, [pc, #344]	; (8005890 <HAL_DMA_Init+0x1e4>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d013      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a54      	ldr	r2, [pc, #336]	; (8005894 <HAL_DMA_Init+0x1e8>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00e      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a53      	ldr	r2, [pc, #332]	; (8005898 <HAL_DMA_Init+0x1ec>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d009      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a51      	ldr	r2, [pc, #324]	; (800589c <HAL_DMA_Init+0x1f0>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_DMA_Init+0xb8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a50      	ldr	r2, [pc, #320]	; (80058a0 <HAL_DMA_Init+0x1f4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d101      	bne.n	8005768 <HAL_DMA_Init+0xbc>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_DMA_Init+0xbe>
 8005768:	2300      	movs	r3, #0
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 813c 	beq.w	80059e8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a37      	ldr	r2, [pc, #220]	; (8005864 <HAL_DMA_Init+0x1b8>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d04a      	beq.n	8005820 <HAL_DMA_Init+0x174>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a36      	ldr	r2, [pc, #216]	; (8005868 <HAL_DMA_Init+0x1bc>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d045      	beq.n	8005820 <HAL_DMA_Init+0x174>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a34      	ldr	r2, [pc, #208]	; (800586c <HAL_DMA_Init+0x1c0>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d040      	beq.n	8005820 <HAL_DMA_Init+0x174>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a33      	ldr	r2, [pc, #204]	; (8005870 <HAL_DMA_Init+0x1c4>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d03b      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a31      	ldr	r2, [pc, #196]	; (8005874 <HAL_DMA_Init+0x1c8>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d036      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a30      	ldr	r2, [pc, #192]	; (8005878 <HAL_DMA_Init+0x1cc>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d031      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a2e      	ldr	r2, [pc, #184]	; (800587c <HAL_DMA_Init+0x1d0>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d02c      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2d      	ldr	r2, [pc, #180]	; (8005880 <HAL_DMA_Init+0x1d4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d027      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2b      	ldr	r2, [pc, #172]	; (8005884 <HAL_DMA_Init+0x1d8>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d022      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2a      	ldr	r2, [pc, #168]	; (8005888 <HAL_DMA_Init+0x1dc>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d01d      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <HAL_DMA_Init+0x1e0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d018      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a27      	ldr	r2, [pc, #156]	; (8005890 <HAL_DMA_Init+0x1e4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d013      	beq.n	8005820 <HAL_DMA_Init+0x174>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a25      	ldr	r2, [pc, #148]	; (8005894 <HAL_DMA_Init+0x1e8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00e      	beq.n	8005820 <HAL_DMA_Init+0x174>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a24      	ldr	r2, [pc, #144]	; (8005898 <HAL_DMA_Init+0x1ec>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d009      	beq.n	8005820 <HAL_DMA_Init+0x174>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <HAL_DMA_Init+0x1f0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <HAL_DMA_Init+0x174>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <HAL_DMA_Init+0x1f4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d108      	bne.n	8005832 <HAL_DMA_Init+0x186>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	e007      	b.n	8005842 <HAL_DMA_Init+0x196>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005842:	e02f      	b.n	80058a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005844:	f7fe fa6c 	bl	8003d20 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b05      	cmp	r3, #5
 8005850:	d928      	bls.n	80058a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2203      	movs	r2, #3
 800585c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e242      	b.n	8005cea <HAL_DMA_Init+0x63e>
 8005864:	40020010 	.word	0x40020010
 8005868:	40020028 	.word	0x40020028
 800586c:	40020040 	.word	0x40020040
 8005870:	40020058 	.word	0x40020058
 8005874:	40020070 	.word	0x40020070
 8005878:	40020088 	.word	0x40020088
 800587c:	400200a0 	.word	0x400200a0
 8005880:	400200b8 	.word	0x400200b8
 8005884:	40020410 	.word	0x40020410
 8005888:	40020428 	.word	0x40020428
 800588c:	40020440 	.word	0x40020440
 8005890:	40020458 	.word	0x40020458
 8005894:	40020470 	.word	0x40020470
 8005898:	40020488 	.word	0x40020488
 800589c:	400204a0 	.word	0x400204a0
 80058a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1c8      	bne.n	8005844 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4b83      	ldr	r3, [pc, #524]	; (8005acc <HAL_DMA_Init+0x420>)
 80058be:	4013      	ands	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80058ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d107      	bne.n	8005908 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005900:	4313      	orrs	r3, r2
 8005902:	697a      	ldr	r2, [r7, #20]
 8005904:	4313      	orrs	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b28      	cmp	r3, #40	; 0x28
 800590e:	d903      	bls.n	8005918 <HAL_DMA_Init+0x26c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b2e      	cmp	r3, #46	; 0x2e
 8005916:	d91f      	bls.n	8005958 <HAL_DMA_Init+0x2ac>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b3e      	cmp	r3, #62	; 0x3e
 800591e:	d903      	bls.n	8005928 <HAL_DMA_Init+0x27c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b42      	cmp	r3, #66	; 0x42
 8005926:	d917      	bls.n	8005958 <HAL_DMA_Init+0x2ac>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b46      	cmp	r3, #70	; 0x46
 800592e:	d903      	bls.n	8005938 <HAL_DMA_Init+0x28c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b48      	cmp	r3, #72	; 0x48
 8005936:	d90f      	bls.n	8005958 <HAL_DMA_Init+0x2ac>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b4e      	cmp	r3, #78	; 0x4e
 800593e:	d903      	bls.n	8005948 <HAL_DMA_Init+0x29c>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b52      	cmp	r3, #82	; 0x52
 8005946:	d907      	bls.n	8005958 <HAL_DMA_Init+0x2ac>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	2b73      	cmp	r3, #115	; 0x73
 800594e:	d905      	bls.n	800595c <HAL_DMA_Init+0x2b0>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b77      	cmp	r3, #119	; 0x77
 8005956:	d801      	bhi.n	800595c <HAL_DMA_Init+0x2b0>
 8005958:	2301      	movs	r3, #1
 800595a:	e000      	b.n	800595e <HAL_DMA_Init+0x2b2>
 800595c:	2300      	movs	r3, #0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005968:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	697a      	ldr	r2, [r7, #20]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	2b04      	cmp	r3, #4
 8005992:	d117      	bne.n	80059c4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fdca 	bl	8007540 <DMA_CheckFifoParam>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d008      	beq.n	80059c4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2240      	movs	r2, #64	; 0x40
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e192      	b.n	8005cea <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fd05 	bl	80073dc <DMA_CalcBaseAndBitshift>
 80059d2:	4603      	mov	r3, r0
 80059d4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	223f      	movs	r2, #63	; 0x3f
 80059e0:	409a      	lsls	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	e0c8      	b.n	8005b7a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a38      	ldr	r2, [pc, #224]	; (8005ad0 <HAL_DMA_Init+0x424>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d022      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a37      	ldr	r2, [pc, #220]	; (8005ad4 <HAL_DMA_Init+0x428>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d01d      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a35      	ldr	r2, [pc, #212]	; (8005ad8 <HAL_DMA_Init+0x42c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d018      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a34      	ldr	r2, [pc, #208]	; (8005adc <HAL_DMA_Init+0x430>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a32      	ldr	r2, [pc, #200]	; (8005ae0 <HAL_DMA_Init+0x434>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a31      	ldr	r2, [pc, #196]	; (8005ae4 <HAL_DMA_Init+0x438>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <HAL_DMA_Init+0x43c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <HAL_DMA_Init+0x38c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a2e      	ldr	r2, [pc, #184]	; (8005aec <HAL_DMA_Init+0x440>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_DMA_Init+0x390>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <HAL_DMA_Init+0x392>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 8092 	beq.w	8005b68 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a21      	ldr	r2, [pc, #132]	; (8005ad0 <HAL_DMA_Init+0x424>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d021      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <HAL_DMA_Init+0x428>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d01c      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <HAL_DMA_Init+0x42c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d017      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a1d      	ldr	r2, [pc, #116]	; (8005adc <HAL_DMA_Init+0x430>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d012      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <HAL_DMA_Init+0x434>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00d      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a1a      	ldr	r2, [pc, #104]	; (8005ae4 <HAL_DMA_Init+0x438>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d008      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_DMA_Init+0x43c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d003      	beq.n	8005a92 <HAL_DMA_Init+0x3e6>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a17      	ldr	r2, [pc, #92]	; (8005aec <HAL_DMA_Init+0x440>)
 8005a90:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_DMA_Init+0x444>)
 8005aae:	4013      	ands	r3, r2
 8005ab0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b40      	cmp	r3, #64	; 0x40
 8005ab8:	d01c      	beq.n	8005af4 <HAL_DMA_Init+0x448>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d102      	bne.n	8005ac8 <HAL_DMA_Init+0x41c>
 8005ac2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ac6:	e016      	b.n	8005af6 <HAL_DMA_Init+0x44a>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	e014      	b.n	8005af6 <HAL_DMA_Init+0x44a>
 8005acc:	fe10803f 	.word	0xfe10803f
 8005ad0:	58025408 	.word	0x58025408
 8005ad4:	5802541c 	.word	0x5802541c
 8005ad8:	58025430 	.word	0x58025430
 8005adc:	58025444 	.word	0x58025444
 8005ae0:	58025458 	.word	0x58025458
 8005ae4:	5802546c 	.word	0x5802546c
 8005ae8:	58025480 	.word	0x58025480
 8005aec:	58025494 	.word	0x58025494
 8005af0:	fffe000f 	.word	0xfffe000f
 8005af4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	68d2      	ldr	r2, [r2, #12]
 8005afa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	69db      	ldr	r3, [r3, #28]
 8005b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b6e      	ldr	r3, [pc, #440]	; (8005cf4 <HAL_DMA_Init+0x648>)
 8005b3c:	4413      	add	r3, r2
 8005b3e:	4a6e      	ldr	r2, [pc, #440]	; (8005cf8 <HAL_DMA_Init+0x64c>)
 8005b40:	fba2 2303 	umull	r2, r3, r2, r3
 8005b44:	091b      	lsrs	r3, r3, #4
 8005b46:	009a      	lsls	r2, r3, #2
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f001 fc45 	bl	80073dc <DMA_CalcBaseAndBitshift>
 8005b52:	4603      	mov	r3, r0
 8005b54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	f003 031f 	and.w	r3, r3, #31
 8005b5e:	2201      	movs	r2, #1
 8005b60:	409a      	lsls	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	605a      	str	r2, [r3, #4]
 8005b66:	e008      	b.n	8005b7a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2240      	movs	r2, #64	; 0x40
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2203      	movs	r2, #3
 8005b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e0b7      	b.n	8005cea <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a5f      	ldr	r2, [pc, #380]	; (8005cfc <HAL_DMA_Init+0x650>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d072      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a5d      	ldr	r2, [pc, #372]	; (8005d00 <HAL_DMA_Init+0x654>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d06d      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5c      	ldr	r2, [pc, #368]	; (8005d04 <HAL_DMA_Init+0x658>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d068      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5a      	ldr	r2, [pc, #360]	; (8005d08 <HAL_DMA_Init+0x65c>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d063      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a59      	ldr	r2, [pc, #356]	; (8005d0c <HAL_DMA_Init+0x660>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d05e      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a57      	ldr	r2, [pc, #348]	; (8005d10 <HAL_DMA_Init+0x664>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d059      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a56      	ldr	r2, [pc, #344]	; (8005d14 <HAL_DMA_Init+0x668>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d054      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a54      	ldr	r2, [pc, #336]	; (8005d18 <HAL_DMA_Init+0x66c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d04f      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a53      	ldr	r2, [pc, #332]	; (8005d1c <HAL_DMA_Init+0x670>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d04a      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a51      	ldr	r2, [pc, #324]	; (8005d20 <HAL_DMA_Init+0x674>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d045      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a50      	ldr	r2, [pc, #320]	; (8005d24 <HAL_DMA_Init+0x678>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d040      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a4e      	ldr	r2, [pc, #312]	; (8005d28 <HAL_DMA_Init+0x67c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d03b      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a4d      	ldr	r2, [pc, #308]	; (8005d2c <HAL_DMA_Init+0x680>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d036      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a4b      	ldr	r2, [pc, #300]	; (8005d30 <HAL_DMA_Init+0x684>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d031      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a4a      	ldr	r2, [pc, #296]	; (8005d34 <HAL_DMA_Init+0x688>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d02c      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a48      	ldr	r2, [pc, #288]	; (8005d38 <HAL_DMA_Init+0x68c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d027      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a47      	ldr	r2, [pc, #284]	; (8005d3c <HAL_DMA_Init+0x690>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d022      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a45      	ldr	r2, [pc, #276]	; (8005d40 <HAL_DMA_Init+0x694>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d01d      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a44      	ldr	r2, [pc, #272]	; (8005d44 <HAL_DMA_Init+0x698>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d018      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a42      	ldr	r2, [pc, #264]	; (8005d48 <HAL_DMA_Init+0x69c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a41      	ldr	r2, [pc, #260]	; (8005d4c <HAL_DMA_Init+0x6a0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d00e      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3f      	ldr	r2, [pc, #252]	; (8005d50 <HAL_DMA_Init+0x6a4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d009      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3e      	ldr	r2, [pc, #248]	; (8005d54 <HAL_DMA_Init+0x6a8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d004      	beq.n	8005c6a <HAL_DMA_Init+0x5be>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3c      	ldr	r2, [pc, #240]	; (8005d58 <HAL_DMA_Init+0x6ac>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d101      	bne.n	8005c6e <HAL_DMA_Init+0x5c2>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_DMA_Init+0x5c4>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d032      	beq.n	8005cda <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f001 fcdf 	bl	8007638 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	2b80      	cmp	r3, #128	; 0x80
 8005c80:	d102      	bne.n	8005c88 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d010      	beq.n	8005cc8 <HAL_DMA_Init+0x61c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b08      	cmp	r3, #8
 8005cac:	d80c      	bhi.n	8005cc8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f001 fd5c 	bl	800776c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb8:	2200      	movs	r2, #0
 8005cba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cc4:	605a      	str	r2, [r3, #4]
 8005cc6:	e008      	b.n	8005cda <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	a7fdabf8 	.word	0xa7fdabf8
 8005cf8:	cccccccd 	.word	0xcccccccd
 8005cfc:	40020010 	.word	0x40020010
 8005d00:	40020028 	.word	0x40020028
 8005d04:	40020040 	.word	0x40020040
 8005d08:	40020058 	.word	0x40020058
 8005d0c:	40020070 	.word	0x40020070
 8005d10:	40020088 	.word	0x40020088
 8005d14:	400200a0 	.word	0x400200a0
 8005d18:	400200b8 	.word	0x400200b8
 8005d1c:	40020410 	.word	0x40020410
 8005d20:	40020428 	.word	0x40020428
 8005d24:	40020440 	.word	0x40020440
 8005d28:	40020458 	.word	0x40020458
 8005d2c:	40020470 	.word	0x40020470
 8005d30:	40020488 	.word	0x40020488
 8005d34:	400204a0 	.word	0x400204a0
 8005d38:	400204b8 	.word	0x400204b8
 8005d3c:	58025408 	.word	0x58025408
 8005d40:	5802541c 	.word	0x5802541c
 8005d44:	58025430 	.word	0x58025430
 8005d48:	58025444 	.word	0x58025444
 8005d4c:	58025458 	.word	0x58025458
 8005d50:	5802546c 	.word	0x5802546c
 8005d54:	58025480 	.word	0x58025480
 8005d58:	58025494 	.word	0x58025494

08005d5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e226      	b.n	80061c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_DMA_Start_IT+0x2a>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e21f      	b.n	80061c6 <HAL_DMA_Start_IT+0x46a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	f040 820a 	bne.w	80061b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a68      	ldr	r2, [pc, #416]	; (8005f50 <HAL_DMA_Start_IT+0x1f4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d04a      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a66      	ldr	r2, [pc, #408]	; (8005f54 <HAL_DMA_Start_IT+0x1f8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d045      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a65      	ldr	r2, [pc, #404]	; (8005f58 <HAL_DMA_Start_IT+0x1fc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d040      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a63      	ldr	r2, [pc, #396]	; (8005f5c <HAL_DMA_Start_IT+0x200>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d03b      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a62      	ldr	r2, [pc, #392]	; (8005f60 <HAL_DMA_Start_IT+0x204>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d036      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a60      	ldr	r2, [pc, #384]	; (8005f64 <HAL_DMA_Start_IT+0x208>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d031      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a5f      	ldr	r2, [pc, #380]	; (8005f68 <HAL_DMA_Start_IT+0x20c>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d02c      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a5d      	ldr	r2, [pc, #372]	; (8005f6c <HAL_DMA_Start_IT+0x210>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d027      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a5c      	ldr	r2, [pc, #368]	; (8005f70 <HAL_DMA_Start_IT+0x214>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d022      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a5a      	ldr	r2, [pc, #360]	; (8005f74 <HAL_DMA_Start_IT+0x218>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d01d      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a59      	ldr	r2, [pc, #356]	; (8005f78 <HAL_DMA_Start_IT+0x21c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d018      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a57      	ldr	r2, [pc, #348]	; (8005f7c <HAL_DMA_Start_IT+0x220>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a56      	ldr	r2, [pc, #344]	; (8005f80 <HAL_DMA_Start_IT+0x224>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00e      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a54      	ldr	r2, [pc, #336]	; (8005f84 <HAL_DMA_Start_IT+0x228>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d009      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a53      	ldr	r2, [pc, #332]	; (8005f88 <HAL_DMA_Start_IT+0x22c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d004      	beq.n	8005e4a <HAL_DMA_Start_IT+0xee>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a51      	ldr	r2, [pc, #324]	; (8005f8c <HAL_DMA_Start_IT+0x230>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d108      	bne.n	8005e5c <HAL_DMA_Start_IT+0x100>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0201 	bic.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e007      	b.n	8005e6c <HAL_DMA_Start_IT+0x110>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	68b9      	ldr	r1, [r7, #8]
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f001 f906 	bl	8007084 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a34      	ldr	r2, [pc, #208]	; (8005f50 <HAL_DMA_Start_IT+0x1f4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a33      	ldr	r2, [pc, #204]	; (8005f54 <HAL_DMA_Start_IT+0x1f8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a31      	ldr	r2, [pc, #196]	; (8005f58 <HAL_DMA_Start_IT+0x1fc>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <HAL_DMA_Start_IT+0x200>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <HAL_DMA_Start_IT+0x204>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2d      	ldr	r2, [pc, #180]	; (8005f64 <HAL_DMA_Start_IT+0x208>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a2b      	ldr	r2, [pc, #172]	; (8005f68 <HAL_DMA_Start_IT+0x20c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2a      	ldr	r2, [pc, #168]	; (8005f6c <HAL_DMA_Start_IT+0x210>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a28      	ldr	r2, [pc, #160]	; (8005f70 <HAL_DMA_Start_IT+0x214>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a27      	ldr	r2, [pc, #156]	; (8005f74 <HAL_DMA_Start_IT+0x218>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a25      	ldr	r2, [pc, #148]	; (8005f78 <HAL_DMA_Start_IT+0x21c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a24      	ldr	r2, [pc, #144]	; (8005f7c <HAL_DMA_Start_IT+0x220>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <HAL_DMA_Start_IT+0x224>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_DMA_Start_IT+0x228>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_DMA_Start_IT+0x22c>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_DMA_Start_IT+0x1bc>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <HAL_DMA_Start_IT+0x230>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <HAL_DMA_Start_IT+0x1c0>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <HAL_DMA_Start_IT+0x1c2>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d036      	beq.n	8005f90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f023 021e 	bic.w	r2, r3, #30
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f042 0216 	orr.w	r2, r2, #22
 8005f34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d03e      	beq.n	8005fbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0208 	orr.w	r2, r2, #8
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e035      	b.n	8005fbc <HAL_DMA_Start_IT+0x260>
 8005f50:	40020010 	.word	0x40020010
 8005f54:	40020028 	.word	0x40020028
 8005f58:	40020040 	.word	0x40020040
 8005f5c:	40020058 	.word	0x40020058
 8005f60:	40020070 	.word	0x40020070
 8005f64:	40020088 	.word	0x40020088
 8005f68:	400200a0 	.word	0x400200a0
 8005f6c:	400200b8 	.word	0x400200b8
 8005f70:	40020410 	.word	0x40020410
 8005f74:	40020428 	.word	0x40020428
 8005f78:	40020440 	.word	0x40020440
 8005f7c:	40020458 	.word	0x40020458
 8005f80:	40020470 	.word	0x40020470
 8005f84:	40020488 	.word	0x40020488
 8005f88:	400204a0 	.word	0x400204a0
 8005f8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f023 020e 	bic.w	r2, r3, #14
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 020a 	orr.w	r2, r2, #10
 8005fa2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0204 	orr.w	r2, r2, #4
 8005fba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a83      	ldr	r2, [pc, #524]	; (80061d0 <HAL_DMA_Start_IT+0x474>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d072      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a82      	ldr	r2, [pc, #520]	; (80061d4 <HAL_DMA_Start_IT+0x478>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d06d      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a80      	ldr	r2, [pc, #512]	; (80061d8 <HAL_DMA_Start_IT+0x47c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d068      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a7f      	ldr	r2, [pc, #508]	; (80061dc <HAL_DMA_Start_IT+0x480>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d063      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a7d      	ldr	r2, [pc, #500]	; (80061e0 <HAL_DMA_Start_IT+0x484>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d05e      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a7c      	ldr	r2, [pc, #496]	; (80061e4 <HAL_DMA_Start_IT+0x488>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d059      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a7a      	ldr	r2, [pc, #488]	; (80061e8 <HAL_DMA_Start_IT+0x48c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d054      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a79      	ldr	r2, [pc, #484]	; (80061ec <HAL_DMA_Start_IT+0x490>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d04f      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a77      	ldr	r2, [pc, #476]	; (80061f0 <HAL_DMA_Start_IT+0x494>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a76      	ldr	r2, [pc, #472]	; (80061f4 <HAL_DMA_Start_IT+0x498>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a74      	ldr	r2, [pc, #464]	; (80061f8 <HAL_DMA_Start_IT+0x49c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a73      	ldr	r2, [pc, #460]	; (80061fc <HAL_DMA_Start_IT+0x4a0>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a71      	ldr	r2, [pc, #452]	; (8006200 <HAL_DMA_Start_IT+0x4a4>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a70      	ldr	r2, [pc, #448]	; (8006204 <HAL_DMA_Start_IT+0x4a8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a6e      	ldr	r2, [pc, #440]	; (8006208 <HAL_DMA_Start_IT+0x4ac>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a6d      	ldr	r2, [pc, #436]	; (800620c <HAL_DMA_Start_IT+0x4b0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a6b      	ldr	r2, [pc, #428]	; (8006210 <HAL_DMA_Start_IT+0x4b4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a6a      	ldr	r2, [pc, #424]	; (8006214 <HAL_DMA_Start_IT+0x4b8>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a68      	ldr	r2, [pc, #416]	; (8006218 <HAL_DMA_Start_IT+0x4bc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a67      	ldr	r2, [pc, #412]	; (800621c <HAL_DMA_Start_IT+0x4c0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a65      	ldr	r2, [pc, #404]	; (8006220 <HAL_DMA_Start_IT+0x4c4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a64      	ldr	r2, [pc, #400]	; (8006224 <HAL_DMA_Start_IT+0x4c8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a62      	ldr	r2, [pc, #392]	; (8006228 <HAL_DMA_Start_IT+0x4cc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Start_IT+0x350>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a61      	ldr	r2, [pc, #388]	; (800622c <HAL_DMA_Start_IT+0x4d0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Start_IT+0x354>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Start_IT+0x356>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01a      	beq.n	80060ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a37      	ldr	r2, [pc, #220]	; (80061d0 <HAL_DMA_Start_IT+0x474>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04a      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a36      	ldr	r2, [pc, #216]	; (80061d4 <HAL_DMA_Start_IT+0x478>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d045      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a34      	ldr	r2, [pc, #208]	; (80061d8 <HAL_DMA_Start_IT+0x47c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d040      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a33      	ldr	r2, [pc, #204]	; (80061dc <HAL_DMA_Start_IT+0x480>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d03b      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a31      	ldr	r2, [pc, #196]	; (80061e0 <HAL_DMA_Start_IT+0x484>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d036      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <HAL_DMA_Start_IT+0x488>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d031      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2e      	ldr	r2, [pc, #184]	; (80061e8 <HAL_DMA_Start_IT+0x48c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d02c      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2d      	ldr	r2, [pc, #180]	; (80061ec <HAL_DMA_Start_IT+0x490>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d027      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2b      	ldr	r2, [pc, #172]	; (80061f0 <HAL_DMA_Start_IT+0x494>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d022      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2a      	ldr	r2, [pc, #168]	; (80061f4 <HAL_DMA_Start_IT+0x498>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01d      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <HAL_DMA_Start_IT+0x49c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d018      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <HAL_DMA_Start_IT+0x4a0>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d013      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a25      	ldr	r2, [pc, #148]	; (8006200 <HAL_DMA_Start_IT+0x4a4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00e      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a24      	ldr	r2, [pc, #144]	; (8006204 <HAL_DMA_Start_IT+0x4a8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a22      	ldr	r2, [pc, #136]	; (8006208 <HAL_DMA_Start_IT+0x4ac>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_DMA_Start_IT+0x430>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a21      	ldr	r2, [pc, #132]	; (800620c <HAL_DMA_Start_IT+0x4b0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d108      	bne.n	800619e <HAL_DMA_Start_IT+0x442>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0201 	orr.w	r2, r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e012      	b.n	80061c4 <HAL_DMA_Start_IT+0x468>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
 80061ae:	e009      	b.n	80061c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	40020010 	.word	0x40020010
 80061d4:	40020028 	.word	0x40020028
 80061d8:	40020040 	.word	0x40020040
 80061dc:	40020058 	.word	0x40020058
 80061e0:	40020070 	.word	0x40020070
 80061e4:	40020088 	.word	0x40020088
 80061e8:	400200a0 	.word	0x400200a0
 80061ec:	400200b8 	.word	0x400200b8
 80061f0:	40020410 	.word	0x40020410
 80061f4:	40020428 	.word	0x40020428
 80061f8:	40020440 	.word	0x40020440
 80061fc:	40020458 	.word	0x40020458
 8006200:	40020470 	.word	0x40020470
 8006204:	40020488 	.word	0x40020488
 8006208:	400204a0 	.word	0x400204a0
 800620c:	400204b8 	.word	0x400204b8
 8006210:	58025408 	.word	0x58025408
 8006214:	5802541c 	.word	0x5802541c
 8006218:	58025430 	.word	0x58025430
 800621c:	58025444 	.word	0x58025444
 8006220:	58025458 	.word	0x58025458
 8006224:	5802546c 	.word	0x5802546c
 8006228:	58025480 	.word	0x58025480
 800622c:	58025494 	.word	0x58025494

08006230 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800623c:	4b67      	ldr	r3, [pc, #412]	; (80063dc <HAL_DMA_IRQHandler+0x1ac>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a67      	ldr	r2, [pc, #412]	; (80063e0 <HAL_DMA_IRQHandler+0x1b0>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	0a9b      	lsrs	r3, r3, #10
 8006248:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800624e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a5f      	ldr	r2, [pc, #380]	; (80063e4 <HAL_DMA_IRQHandler+0x1b4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d04a      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a5d      	ldr	r2, [pc, #372]	; (80063e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d045      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a5c      	ldr	r2, [pc, #368]	; (80063ec <HAL_DMA_IRQHandler+0x1bc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d040      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5a      	ldr	r2, [pc, #360]	; (80063f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d03b      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a59      	ldr	r2, [pc, #356]	; (80063f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d036      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a57      	ldr	r2, [pc, #348]	; (80063f8 <HAL_DMA_IRQHandler+0x1c8>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d031      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a56      	ldr	r2, [pc, #344]	; (80063fc <HAL_DMA_IRQHandler+0x1cc>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d02c      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a54      	ldr	r2, [pc, #336]	; (8006400 <HAL_DMA_IRQHandler+0x1d0>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d027      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a53      	ldr	r2, [pc, #332]	; (8006404 <HAL_DMA_IRQHandler+0x1d4>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d022      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a51      	ldr	r2, [pc, #324]	; (8006408 <HAL_DMA_IRQHandler+0x1d8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01d      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a50      	ldr	r2, [pc, #320]	; (800640c <HAL_DMA_IRQHandler+0x1dc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d018      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a4e      	ldr	r2, [pc, #312]	; (8006410 <HAL_DMA_IRQHandler+0x1e0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a4d      	ldr	r2, [pc, #308]	; (8006414 <HAL_DMA_IRQHandler+0x1e4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00e      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4b      	ldr	r2, [pc, #300]	; (8006418 <HAL_DMA_IRQHandler+0x1e8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d009      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4a      	ldr	r2, [pc, #296]	; (800641c <HAL_DMA_IRQHandler+0x1ec>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_DMA_IRQHandler+0xd2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a48      	ldr	r2, [pc, #288]	; (8006420 <HAL_DMA_IRQHandler+0x1f0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d101      	bne.n	8006306 <HAL_DMA_IRQHandler+0xd6>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <HAL_DMA_IRQHandler+0xd8>
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 842b 	beq.w	8006b64 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2208      	movs	r2, #8
 8006318:	409a      	lsls	r2, r3
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	4013      	ands	r3, r2
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 80a2 	beq.w	8006468 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a2e      	ldr	r2, [pc, #184]	; (80063e4 <HAL_DMA_IRQHandler+0x1b4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d04a      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2d      	ldr	r2, [pc, #180]	; (80063e8 <HAL_DMA_IRQHandler+0x1b8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d045      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2b      	ldr	r2, [pc, #172]	; (80063ec <HAL_DMA_IRQHandler+0x1bc>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d040      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a2a      	ldr	r2, [pc, #168]	; (80063f0 <HAL_DMA_IRQHandler+0x1c0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d03b      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a28      	ldr	r2, [pc, #160]	; (80063f4 <HAL_DMA_IRQHandler+0x1c4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d036      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a27      	ldr	r2, [pc, #156]	; (80063f8 <HAL_DMA_IRQHandler+0x1c8>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d031      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a25      	ldr	r2, [pc, #148]	; (80063fc <HAL_DMA_IRQHandler+0x1cc>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d02c      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a24      	ldr	r2, [pc, #144]	; (8006400 <HAL_DMA_IRQHandler+0x1d0>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d027      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a22      	ldr	r2, [pc, #136]	; (8006404 <HAL_DMA_IRQHandler+0x1d4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d022      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a21      	ldr	r2, [pc, #132]	; (8006408 <HAL_DMA_IRQHandler+0x1d8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d01d      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <HAL_DMA_IRQHandler+0x1dc>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d018      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <HAL_DMA_IRQHandler+0x1e0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a1c      	ldr	r2, [pc, #112]	; (8006414 <HAL_DMA_IRQHandler+0x1e4>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00e      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1b      	ldr	r2, [pc, #108]	; (8006418 <HAL_DMA_IRQHandler+0x1e8>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d009      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_DMA_IRQHandler+0x1ec>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d004      	beq.n	80063c4 <HAL_DMA_IRQHandler+0x194>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a18      	ldr	r2, [pc, #96]	; (8006420 <HAL_DMA_IRQHandler+0x1f0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d12f      	bne.n	8006424 <HAL_DMA_IRQHandler+0x1f4>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf14      	ite	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	2300      	moveq	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	e02e      	b.n	8006438 <HAL_DMA_IRQHandler+0x208>
 80063da:	bf00      	nop
 80063dc:	24000000 	.word	0x24000000
 80063e0:	1b4e81b5 	.word	0x1b4e81b5
 80063e4:	40020010 	.word	0x40020010
 80063e8:	40020028 	.word	0x40020028
 80063ec:	40020040 	.word	0x40020040
 80063f0:	40020058 	.word	0x40020058
 80063f4:	40020070 	.word	0x40020070
 80063f8:	40020088 	.word	0x40020088
 80063fc:	400200a0 	.word	0x400200a0
 8006400:	400200b8 	.word	0x400200b8
 8006404:	40020410 	.word	0x40020410
 8006408:	40020428 	.word	0x40020428
 800640c:	40020440 	.word	0x40020440
 8006410:	40020458 	.word	0x40020458
 8006414:	40020470 	.word	0x40020470
 8006418:	40020488 	.word	0x40020488
 800641c:	400204a0 	.word	0x400204a0
 8006420:	400204b8 	.word	0x400204b8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0308 	and.w	r3, r3, #8
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf14      	ite	ne
 8006432:	2301      	movne	r3, #1
 8006434:	2300      	moveq	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d015      	beq.n	8006468 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0204 	bic.w	r2, r2, #4
 800644a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	2208      	movs	r2, #8
 8006456:	409a      	lsls	r2, r3
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	f043 0201 	orr.w	r2, r3, #1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d06e      	beq.n	800655c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a69      	ldr	r2, [pc, #420]	; (8006628 <HAL_DMA_IRQHandler+0x3f8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d04a      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a67      	ldr	r2, [pc, #412]	; (800662c <HAL_DMA_IRQHandler+0x3fc>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d045      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a66      	ldr	r2, [pc, #408]	; (8006630 <HAL_DMA_IRQHandler+0x400>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d040      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a64      	ldr	r2, [pc, #400]	; (8006634 <HAL_DMA_IRQHandler+0x404>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d03b      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a63      	ldr	r2, [pc, #396]	; (8006638 <HAL_DMA_IRQHandler+0x408>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d036      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a61      	ldr	r2, [pc, #388]	; (800663c <HAL_DMA_IRQHandler+0x40c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d031      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a60      	ldr	r2, [pc, #384]	; (8006640 <HAL_DMA_IRQHandler+0x410>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d02c      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_DMA_IRQHandler+0x414>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d027      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a5d      	ldr	r2, [pc, #372]	; (8006648 <HAL_DMA_IRQHandler+0x418>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d022      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a5b      	ldr	r2, [pc, #364]	; (800664c <HAL_DMA_IRQHandler+0x41c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01d      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a5a      	ldr	r2, [pc, #360]	; (8006650 <HAL_DMA_IRQHandler+0x420>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d018      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a58      	ldr	r2, [pc, #352]	; (8006654 <HAL_DMA_IRQHandler+0x424>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a57      	ldr	r2, [pc, #348]	; (8006658 <HAL_DMA_IRQHandler+0x428>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00e      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a55      	ldr	r2, [pc, #340]	; (800665c <HAL_DMA_IRQHandler+0x42c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d009      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a54      	ldr	r2, [pc, #336]	; (8006660 <HAL_DMA_IRQHandler+0x430>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d004      	beq.n	800651e <HAL_DMA_IRQHandler+0x2ee>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a52      	ldr	r2, [pc, #328]	; (8006664 <HAL_DMA_IRQHandler+0x434>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d10a      	bne.n	8006534 <HAL_DMA_IRQHandler+0x304>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b00      	cmp	r3, #0
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e003      	b.n	800653c <HAL_DMA_IRQHandler+0x30c>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2300      	movs	r3, #0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00d      	beq.n	800655c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2201      	movs	r2, #1
 800654a:	409a      	lsls	r2, r3
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006554:	f043 0202 	orr.w	r2, r3, #2
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	f003 031f 	and.w	r3, r3, #31
 8006564:	2204      	movs	r2, #4
 8006566:	409a      	lsls	r2, r3
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	4013      	ands	r3, r2
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 808f 	beq.w	8006690 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a2c      	ldr	r2, [pc, #176]	; (8006628 <HAL_DMA_IRQHandler+0x3f8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d04a      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2a      	ldr	r2, [pc, #168]	; (800662c <HAL_DMA_IRQHandler+0x3fc>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d045      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a29      	ldr	r2, [pc, #164]	; (8006630 <HAL_DMA_IRQHandler+0x400>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d040      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a27      	ldr	r2, [pc, #156]	; (8006634 <HAL_DMA_IRQHandler+0x404>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d03b      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a26      	ldr	r2, [pc, #152]	; (8006638 <HAL_DMA_IRQHandler+0x408>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d036      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a24      	ldr	r2, [pc, #144]	; (800663c <HAL_DMA_IRQHandler+0x40c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d031      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a23      	ldr	r2, [pc, #140]	; (8006640 <HAL_DMA_IRQHandler+0x410>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d02c      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a21      	ldr	r2, [pc, #132]	; (8006644 <HAL_DMA_IRQHandler+0x414>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d027      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a20      	ldr	r2, [pc, #128]	; (8006648 <HAL_DMA_IRQHandler+0x418>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d022      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a1e      	ldr	r2, [pc, #120]	; (800664c <HAL_DMA_IRQHandler+0x41c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d01d      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a1d      	ldr	r2, [pc, #116]	; (8006650 <HAL_DMA_IRQHandler+0x420>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d018      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1b      	ldr	r2, [pc, #108]	; (8006654 <HAL_DMA_IRQHandler+0x424>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d013      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1a      	ldr	r2, [pc, #104]	; (8006658 <HAL_DMA_IRQHandler+0x428>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a18      	ldr	r2, [pc, #96]	; (800665c <HAL_DMA_IRQHandler+0x42c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a17      	ldr	r2, [pc, #92]	; (8006660 <HAL_DMA_IRQHandler+0x430>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_DMA_IRQHandler+0x3e2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a15      	ldr	r2, [pc, #84]	; (8006664 <HAL_DMA_IRQHandler+0x434>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d12a      	bne.n	8006668 <HAL_DMA_IRQHandler+0x438>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	bf14      	ite	ne
 8006620:	2301      	movne	r3, #1
 8006622:	2300      	moveq	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	e023      	b.n	8006670 <HAL_DMA_IRQHandler+0x440>
 8006628:	40020010 	.word	0x40020010
 800662c:	40020028 	.word	0x40020028
 8006630:	40020040 	.word	0x40020040
 8006634:	40020058 	.word	0x40020058
 8006638:	40020070 	.word	0x40020070
 800663c:	40020088 	.word	0x40020088
 8006640:	400200a0 	.word	0x400200a0
 8006644:	400200b8 	.word	0x400200b8
 8006648:	40020410 	.word	0x40020410
 800664c:	40020428 	.word	0x40020428
 8006650:	40020440 	.word	0x40020440
 8006654:	40020458 	.word	0x40020458
 8006658:	40020470 	.word	0x40020470
 800665c:	40020488 	.word	0x40020488
 8006660:	400204a0 	.word	0x400204a0
 8006664:	400204b8 	.word	0x400204b8
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2204      	movs	r2, #4
 800667e:	409a      	lsls	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f043 0204 	orr.w	r2, r3, #4
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2210      	movs	r2, #16
 800669a:	409a      	lsls	r2, r3
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80a6 	beq.w	80067f2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a85      	ldr	r2, [pc, #532]	; (80068c0 <HAL_DMA_IRQHandler+0x690>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04a      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a83      	ldr	r2, [pc, #524]	; (80068c4 <HAL_DMA_IRQHandler+0x694>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d045      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a82      	ldr	r2, [pc, #520]	; (80068c8 <HAL_DMA_IRQHandler+0x698>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d040      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a80      	ldr	r2, [pc, #512]	; (80068cc <HAL_DMA_IRQHandler+0x69c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d03b      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7f      	ldr	r2, [pc, #508]	; (80068d0 <HAL_DMA_IRQHandler+0x6a0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d036      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7d      	ldr	r2, [pc, #500]	; (80068d4 <HAL_DMA_IRQHandler+0x6a4>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d031      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7c      	ldr	r2, [pc, #496]	; (80068d8 <HAL_DMA_IRQHandler+0x6a8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d02c      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a7a      	ldr	r2, [pc, #488]	; (80068dc <HAL_DMA_IRQHandler+0x6ac>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d027      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a79      	ldr	r2, [pc, #484]	; (80068e0 <HAL_DMA_IRQHandler+0x6b0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a77      	ldr	r2, [pc, #476]	; (80068e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a76      	ldr	r2, [pc, #472]	; (80068e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a74      	ldr	r2, [pc, #464]	; (80068ec <HAL_DMA_IRQHandler+0x6bc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a73      	ldr	r2, [pc, #460]	; (80068f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a71      	ldr	r2, [pc, #452]	; (80068f4 <HAL_DMA_IRQHandler+0x6c4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a70      	ldr	r2, [pc, #448]	; (80068f8 <HAL_DMA_IRQHandler+0x6c8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_DMA_IRQHandler+0x516>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a6e      	ldr	r2, [pc, #440]	; (80068fc <HAL_DMA_IRQHandler+0x6cc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d10a      	bne.n	800675c <HAL_DMA_IRQHandler+0x52c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e009      	b.n	8006770 <HAL_DMA_IRQHandler+0x540>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d03e      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	2210      	movs	r2, #16
 800677e:	409a      	lsls	r2, r3
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d018      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800679c:	2b00      	cmp	r3, #0
 800679e:	d108      	bne.n	80067b2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d024      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	4798      	blx	r3
 80067b0:	e01f      	b.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d01b      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
 80067c2:	e016      	b.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 0208 	bic.w	r2, r2, #8
 80067e0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d003      	beq.n	80067f2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2220      	movs	r2, #32
 80067fc:	409a      	lsls	r2, r3
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	4013      	ands	r3, r2
 8006802:	2b00      	cmp	r3, #0
 8006804:	f000 8110 	beq.w	8006a28 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2c      	ldr	r2, [pc, #176]	; (80068c0 <HAL_DMA_IRQHandler+0x690>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d04a      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2b      	ldr	r2, [pc, #172]	; (80068c4 <HAL_DMA_IRQHandler+0x694>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d045      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <HAL_DMA_IRQHandler+0x698>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d040      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a28      	ldr	r2, [pc, #160]	; (80068cc <HAL_DMA_IRQHandler+0x69c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d03b      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a26      	ldr	r2, [pc, #152]	; (80068d0 <HAL_DMA_IRQHandler+0x6a0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d036      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a25      	ldr	r2, [pc, #148]	; (80068d4 <HAL_DMA_IRQHandler+0x6a4>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d031      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <HAL_DMA_IRQHandler+0x6a8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d02c      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a22      	ldr	r2, [pc, #136]	; (80068dc <HAL_DMA_IRQHandler+0x6ac>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d027      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a20      	ldr	r2, [pc, #128]	; (80068e0 <HAL_DMA_IRQHandler+0x6b0>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d022      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1f      	ldr	r2, [pc, #124]	; (80068e4 <HAL_DMA_IRQHandler+0x6b4>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d01d      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <HAL_DMA_IRQHandler+0x6b8>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d018      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1c      	ldr	r2, [pc, #112]	; (80068ec <HAL_DMA_IRQHandler+0x6bc>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <HAL_DMA_IRQHandler+0x6c0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <HAL_DMA_IRQHandler+0x6c4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <HAL_DMA_IRQHandler+0x6c8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_DMA_IRQHandler+0x678>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <HAL_DMA_IRQHandler+0x6cc>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d12b      	bne.n	8006900 <HAL_DMA_IRQHandler+0x6d0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	bf14      	ite	ne
 80068b6:	2301      	movne	r3, #1
 80068b8:	2300      	moveq	r3, #0
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	e02a      	b.n	8006914 <HAL_DMA_IRQHandler+0x6e4>
 80068be:	bf00      	nop
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0302 	and.w	r3, r3, #2
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8087 	beq.w	8006a28 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2220      	movs	r2, #32
 8006924:	409a      	lsls	r2, r3
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b04      	cmp	r3, #4
 8006934:	d139      	bne.n	80069aa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0216 	bic.w	r2, r2, #22
 8006944:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006954:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695a:	2b00      	cmp	r3, #0
 800695c:	d103      	bne.n	8006966 <HAL_DMA_IRQHandler+0x736>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006962:	2b00      	cmp	r3, #0
 8006964:	d007      	beq.n	8006976 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0208 	bic.w	r2, r2, #8
 8006974:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	223f      	movs	r2, #63	; 0x3f
 8006980:	409a      	lsls	r2, r3
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 834a 	beq.w	8007034 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
          }
          return;
 80069a8:	e344      	b.n	8007034 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d018      	beq.n	80069ea <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d108      	bne.n	80069d8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d02c      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
 80069d6:	e027      	b.n	8006a28 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d023      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	e01e      	b.n	8006a28 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d10f      	bne.n	8006a18 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0210 	bic.w	r2, r2, #16
 8006a06:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f000 8306 	beq.w	800703e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 8088 	beq.w	8006b50 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2204      	movs	r2, #4
 8006a44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a7a      	ldr	r2, [pc, #488]	; (8006c38 <HAL_DMA_IRQHandler+0xa08>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04a      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a79      	ldr	r2, [pc, #484]	; (8006c3c <HAL_DMA_IRQHandler+0xa0c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d045      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a77      	ldr	r2, [pc, #476]	; (8006c40 <HAL_DMA_IRQHandler+0xa10>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d040      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a76      	ldr	r2, [pc, #472]	; (8006c44 <HAL_DMA_IRQHandler+0xa14>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d03b      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a74      	ldr	r2, [pc, #464]	; (8006c48 <HAL_DMA_IRQHandler+0xa18>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d036      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a73      	ldr	r2, [pc, #460]	; (8006c4c <HAL_DMA_IRQHandler+0xa1c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d031      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a71      	ldr	r2, [pc, #452]	; (8006c50 <HAL_DMA_IRQHandler+0xa20>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d02c      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a70      	ldr	r2, [pc, #448]	; (8006c54 <HAL_DMA_IRQHandler+0xa24>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d027      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a6e      	ldr	r2, [pc, #440]	; (8006c58 <HAL_DMA_IRQHandler+0xa28>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d022      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6d      	ldr	r2, [pc, #436]	; (8006c5c <HAL_DMA_IRQHandler+0xa2c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d01d      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a6b      	ldr	r2, [pc, #428]	; (8006c60 <HAL_DMA_IRQHandler+0xa30>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d018      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a6a      	ldr	r2, [pc, #424]	; (8006c64 <HAL_DMA_IRQHandler+0xa34>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a68      	ldr	r2, [pc, #416]	; (8006c68 <HAL_DMA_IRQHandler+0xa38>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d00e      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a67      	ldr	r2, [pc, #412]	; (8006c6c <HAL_DMA_IRQHandler+0xa3c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d009      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a65      	ldr	r2, [pc, #404]	; (8006c70 <HAL_DMA_IRQHandler+0xa40>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d004      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x8b8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a64      	ldr	r2, [pc, #400]	; (8006c74 <HAL_DMA_IRQHandler+0xa44>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d108      	bne.n	8006afa <HAL_DMA_IRQHandler+0x8ca>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0201 	bic.w	r2, r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
 8006af8:	e007      	b.n	8006b0a <HAL_DMA_IRQHandler+0x8da>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d307      	bcc.n	8006b26 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f2      	bne.n	8006b0a <HAL_DMA_IRQHandler+0x8da>
 8006b24:	e000      	b.n	8006b28 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b26:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b3e:	e003      	b.n	8006b48 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 8272 	beq.w	800703e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	4798      	blx	r3
 8006b62:	e26c      	b.n	800703e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a43      	ldr	r2, [pc, #268]	; (8006c78 <HAL_DMA_IRQHandler+0xa48>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d022      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a42      	ldr	r2, [pc, #264]	; (8006c7c <HAL_DMA_IRQHandler+0xa4c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d01d      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a40      	ldr	r2, [pc, #256]	; (8006c80 <HAL_DMA_IRQHandler+0xa50>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d018      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a3f      	ldr	r2, [pc, #252]	; (8006c84 <HAL_DMA_IRQHandler+0xa54>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d013      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a3d      	ldr	r2, [pc, #244]	; (8006c88 <HAL_DMA_IRQHandler+0xa58>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d00e      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a3c      	ldr	r2, [pc, #240]	; (8006c8c <HAL_DMA_IRQHandler+0xa5c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d009      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a3a      	ldr	r2, [pc, #232]	; (8006c90 <HAL_DMA_IRQHandler+0xa60>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d004      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x984>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a39      	ldr	r2, [pc, #228]	; (8006c94 <HAL_DMA_IRQHandler+0xa64>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d101      	bne.n	8006bb8 <HAL_DMA_IRQHandler+0x988>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <HAL_DMA_IRQHandler+0x98a>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 823f 	beq.w	800703e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bcc:	f003 031f 	and.w	r3, r3, #31
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	409a      	lsls	r2, r3
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 80cd 	beq.w	8006d78 <HAL_DMA_IRQHandler+0xb48>
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80c7 	beq.w	8006d78 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bee:	f003 031f 	and.w	r3, r3, #31
 8006bf2:	2204      	movs	r2, #4
 8006bf4:	409a      	lsls	r2, r3
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d049      	beq.n	8006c98 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8210 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c20:	e20a      	b.n	8007038 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 8206 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c34:	e200      	b.n	8007038 <HAL_DMA_IRQHandler+0xe08>
 8006c36:	bf00      	nop
 8006c38:	40020010 	.word	0x40020010
 8006c3c:	40020028 	.word	0x40020028
 8006c40:	40020040 	.word	0x40020040
 8006c44:	40020058 	.word	0x40020058
 8006c48:	40020070 	.word	0x40020070
 8006c4c:	40020088 	.word	0x40020088
 8006c50:	400200a0 	.word	0x400200a0
 8006c54:	400200b8 	.word	0x400200b8
 8006c58:	40020410 	.word	0x40020410
 8006c5c:	40020428 	.word	0x40020428
 8006c60:	40020440 	.word	0x40020440
 8006c64:	40020458 	.word	0x40020458
 8006c68:	40020470 	.word	0x40020470
 8006c6c:	40020488 	.word	0x40020488
 8006c70:	400204a0 	.word	0x400204a0
 8006c74:	400204b8 	.word	0x400204b8
 8006c78:	58025408 	.word	0x58025408
 8006c7c:	5802541c 	.word	0x5802541c
 8006c80:	58025430 	.word	0x58025430
 8006c84:	58025444 	.word	0x58025444
 8006c88:	58025458 	.word	0x58025458
 8006c8c:	5802546c 	.word	0x5802546c
 8006c90:	58025480 	.word	0x58025480
 8006c94:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d160      	bne.n	8006d64 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a7f      	ldr	r2, [pc, #508]	; (8006ea4 <HAL_DMA_IRQHandler+0xc74>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d04a      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a7d      	ldr	r2, [pc, #500]	; (8006ea8 <HAL_DMA_IRQHandler+0xc78>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d045      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a7c      	ldr	r2, [pc, #496]	; (8006eac <HAL_DMA_IRQHandler+0xc7c>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d040      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a7a      	ldr	r2, [pc, #488]	; (8006eb0 <HAL_DMA_IRQHandler+0xc80>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d03b      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a79      	ldr	r2, [pc, #484]	; (8006eb4 <HAL_DMA_IRQHandler+0xc84>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d036      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a77      	ldr	r2, [pc, #476]	; (8006eb8 <HAL_DMA_IRQHandler+0xc88>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d031      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a76      	ldr	r2, [pc, #472]	; (8006ebc <HAL_DMA_IRQHandler+0xc8c>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d02c      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a74      	ldr	r2, [pc, #464]	; (8006ec0 <HAL_DMA_IRQHandler+0xc90>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d027      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a73      	ldr	r2, [pc, #460]	; (8006ec4 <HAL_DMA_IRQHandler+0xc94>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d022      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a71      	ldr	r2, [pc, #452]	; (8006ec8 <HAL_DMA_IRQHandler+0xc98>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d01d      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a70      	ldr	r2, [pc, #448]	; (8006ecc <HAL_DMA_IRQHandler+0xc9c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d018      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6e      	ldr	r2, [pc, #440]	; (8006ed0 <HAL_DMA_IRQHandler+0xca0>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d013      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6d      	ldr	r2, [pc, #436]	; (8006ed4 <HAL_DMA_IRQHandler+0xca4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00e      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a6b      	ldr	r2, [pc, #428]	; (8006ed8 <HAL_DMA_IRQHandler+0xca8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d009      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6a      	ldr	r2, [pc, #424]	; (8006edc <HAL_DMA_IRQHandler+0xcac>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d004      	beq.n	8006d42 <HAL_DMA_IRQHandler+0xb12>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a68      	ldr	r2, [pc, #416]	; (8006ee0 <HAL_DMA_IRQHandler+0xcb0>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d108      	bne.n	8006d54 <HAL_DMA_IRQHandler+0xb24>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0208 	bic.w	r2, r2, #8
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e007      	b.n	8006d64 <HAL_DMA_IRQHandler+0xb34>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0204 	bic.w	r2, r2, #4
 8006d62:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 8165 	beq.w	8007038 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d76:	e15f      	b.n	8007038 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7c:	f003 031f 	and.w	r3, r3, #31
 8006d80:	2202      	movs	r2, #2
 8006d82:	409a      	lsls	r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80c5 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xce8>
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 80bf 	beq.w	8006f18 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2202      	movs	r2, #2
 8006da4:	409a      	lsls	r2, r3
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d018      	beq.n	8006de6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d109      	bne.n	8006dd2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 813a 	beq.w	800703c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd0:	e134      	b.n	800703c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8130 	beq.w	800703c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006de4:	e12a      	b.n	800703c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 8089 	bne.w	8006f04 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <HAL_DMA_IRQHandler+0xc74>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d04a      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <HAL_DMA_IRQHandler+0xc78>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d045      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a28      	ldr	r2, [pc, #160]	; (8006eac <HAL_DMA_IRQHandler+0xc7c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d040      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a26      	ldr	r2, [pc, #152]	; (8006eb0 <HAL_DMA_IRQHandler+0xc80>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a25      	ldr	r2, [pc, #148]	; (8006eb4 <HAL_DMA_IRQHandler+0xc84>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d036      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a23      	ldr	r2, [pc, #140]	; (8006eb8 <HAL_DMA_IRQHandler+0xc88>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a22      	ldr	r2, [pc, #136]	; (8006ebc <HAL_DMA_IRQHandler+0xc8c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d02c      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a20      	ldr	r2, [pc, #128]	; (8006ec0 <HAL_DMA_IRQHandler+0xc90>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1f      	ldr	r2, [pc, #124]	; (8006ec4 <HAL_DMA_IRQHandler+0xc94>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <HAL_DMA_IRQHandler+0xc98>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1c      	ldr	r2, [pc, #112]	; (8006ecc <HAL_DMA_IRQHandler+0xc9c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a1a      	ldr	r2, [pc, #104]	; (8006ed0 <HAL_DMA_IRQHandler+0xca0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a19      	ldr	r2, [pc, #100]	; (8006ed4 <HAL_DMA_IRQHandler+0xca4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a17      	ldr	r2, [pc, #92]	; (8006ed8 <HAL_DMA_IRQHandler+0xca8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a16      	ldr	r2, [pc, #88]	; (8006edc <HAL_DMA_IRQHandler+0xcac>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xc62>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a14      	ldr	r2, [pc, #80]	; (8006ee0 <HAL_DMA_IRQHandler+0xcb0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d128      	bne.n	8006ee4 <HAL_DMA_IRQHandler+0xcb4>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0214 	bic.w	r2, r2, #20
 8006ea0:	601a      	str	r2, [r3, #0]
 8006ea2:	e027      	b.n	8006ef4 <HAL_DMA_IRQHandler+0xcc4>
 8006ea4:	40020010 	.word	0x40020010
 8006ea8:	40020028 	.word	0x40020028
 8006eac:	40020040 	.word	0x40020040
 8006eb0:	40020058 	.word	0x40020058
 8006eb4:	40020070 	.word	0x40020070
 8006eb8:	40020088 	.word	0x40020088
 8006ebc:	400200a0 	.word	0x400200a0
 8006ec0:	400200b8 	.word	0x400200b8
 8006ec4:	40020410 	.word	0x40020410
 8006ec8:	40020428 	.word	0x40020428
 8006ecc:	40020440 	.word	0x40020440
 8006ed0:	40020458 	.word	0x40020458
 8006ed4:	40020470 	.word	0x40020470
 8006ed8:	40020488 	.word	0x40020488
 8006edc:	400204a0 	.word	0x400204a0
 8006ee0:	400204b8 	.word	0x400204b8
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f022 020a 	bic.w	r2, r2, #10
 8006ef2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8097 	beq.w	800703c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f16:	e091      	b.n	800703c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	2208      	movs	r2, #8
 8006f22:	409a      	lsls	r2, r3
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 8088 	beq.w	800703e <HAL_DMA_IRQHandler+0xe0e>
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 8082 	beq.w	800703e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a41      	ldr	r2, [pc, #260]	; (8007044 <HAL_DMA_IRQHandler+0xe14>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d04a      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3f      	ldr	r2, [pc, #252]	; (8007048 <HAL_DMA_IRQHandler+0xe18>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d045      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3e      	ldr	r2, [pc, #248]	; (800704c <HAL_DMA_IRQHandler+0xe1c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d040      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a3c      	ldr	r2, [pc, #240]	; (8007050 <HAL_DMA_IRQHandler+0xe20>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d03b      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3b      	ldr	r2, [pc, #236]	; (8007054 <HAL_DMA_IRQHandler+0xe24>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d036      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a39      	ldr	r2, [pc, #228]	; (8007058 <HAL_DMA_IRQHandler+0xe28>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d031      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a38      	ldr	r2, [pc, #224]	; (800705c <HAL_DMA_IRQHandler+0xe2c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d02c      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a36      	ldr	r2, [pc, #216]	; (8007060 <HAL_DMA_IRQHandler+0xe30>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d027      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a35      	ldr	r2, [pc, #212]	; (8007064 <HAL_DMA_IRQHandler+0xe34>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d022      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a33      	ldr	r2, [pc, #204]	; (8007068 <HAL_DMA_IRQHandler+0xe38>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01d      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a32      	ldr	r2, [pc, #200]	; (800706c <HAL_DMA_IRQHandler+0xe3c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d018      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a30      	ldr	r2, [pc, #192]	; (8007070 <HAL_DMA_IRQHandler+0xe40>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2f      	ldr	r2, [pc, #188]	; (8007074 <HAL_DMA_IRQHandler+0xe44>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00e      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a2d      	ldr	r2, [pc, #180]	; (8007078 <HAL_DMA_IRQHandler+0xe48>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a2c      	ldr	r2, [pc, #176]	; (800707c <HAL_DMA_IRQHandler+0xe4c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_DMA_IRQHandler+0xdaa>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a2a      	ldr	r2, [pc, #168]	; (8007080 <HAL_DMA_IRQHandler+0xe50>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d108      	bne.n	8006fec <HAL_DMA_IRQHandler+0xdbc>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 021c 	bic.w	r2, r2, #28
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	e007      	b.n	8006ffc <HAL_DMA_IRQHandler+0xdcc>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 020e 	bic.w	r2, r2, #14
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007000:	f003 031f 	and.w	r3, r3, #31
 8007004:	2201      	movs	r2, #1
 8007006:	409a      	lsls	r2, r3
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	2b00      	cmp	r3, #0
 8007028:	d009      	beq.n	800703e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	4798      	blx	r3
 8007032:	e004      	b.n	800703e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007034:	bf00      	nop
 8007036:	e002      	b.n	800703e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007038:	bf00      	nop
 800703a:	e000      	b.n	800703e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800703c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800703e:	3728      	adds	r7, #40	; 0x28
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40020010 	.word	0x40020010
 8007048:	40020028 	.word	0x40020028
 800704c:	40020040 	.word	0x40020040
 8007050:	40020058 	.word	0x40020058
 8007054:	40020070 	.word	0x40020070
 8007058:	40020088 	.word	0x40020088
 800705c:	400200a0 	.word	0x400200a0
 8007060:	400200b8 	.word	0x400200b8
 8007064:	40020410 	.word	0x40020410
 8007068:	40020428 	.word	0x40020428
 800706c:	40020440 	.word	0x40020440
 8007070:	40020458 	.word	0x40020458
 8007074:	40020470 	.word	0x40020470
 8007078:	40020488 	.word	0x40020488
 800707c:	400204a0 	.word	0x400204a0
 8007080:	400204b8 	.word	0x400204b8

08007084 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7f      	ldr	r2, [pc, #508]	; (80072a0 <DMA_SetConfig+0x21c>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d072      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a7d      	ldr	r2, [pc, #500]	; (80072a4 <DMA_SetConfig+0x220>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d06d      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a7c      	ldr	r2, [pc, #496]	; (80072a8 <DMA_SetConfig+0x224>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d068      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a7a      	ldr	r2, [pc, #488]	; (80072ac <DMA_SetConfig+0x228>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d063      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a79      	ldr	r2, [pc, #484]	; (80072b0 <DMA_SetConfig+0x22c>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d05e      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a77      	ldr	r2, [pc, #476]	; (80072b4 <DMA_SetConfig+0x230>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d059      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a76      	ldr	r2, [pc, #472]	; (80072b8 <DMA_SetConfig+0x234>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d054      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a74      	ldr	r2, [pc, #464]	; (80072bc <DMA_SetConfig+0x238>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d04f      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a73      	ldr	r2, [pc, #460]	; (80072c0 <DMA_SetConfig+0x23c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d04a      	beq.n	800718e <DMA_SetConfig+0x10a>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a71      	ldr	r2, [pc, #452]	; (80072c4 <DMA_SetConfig+0x240>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d045      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a70      	ldr	r2, [pc, #448]	; (80072c8 <DMA_SetConfig+0x244>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d040      	beq.n	800718e <DMA_SetConfig+0x10a>
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a6e      	ldr	r2, [pc, #440]	; (80072cc <DMA_SetConfig+0x248>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d03b      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a6d      	ldr	r2, [pc, #436]	; (80072d0 <DMA_SetConfig+0x24c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d036      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a6b      	ldr	r2, [pc, #428]	; (80072d4 <DMA_SetConfig+0x250>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d031      	beq.n	800718e <DMA_SetConfig+0x10a>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a6a      	ldr	r2, [pc, #424]	; (80072d8 <DMA_SetConfig+0x254>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d02c      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a68      	ldr	r2, [pc, #416]	; (80072dc <DMA_SetConfig+0x258>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <DMA_SetConfig+0x10a>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a67      	ldr	r2, [pc, #412]	; (80072e0 <DMA_SetConfig+0x25c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d022      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a65      	ldr	r2, [pc, #404]	; (80072e4 <DMA_SetConfig+0x260>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a64      	ldr	r2, [pc, #400]	; (80072e8 <DMA_SetConfig+0x264>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d018      	beq.n	800718e <DMA_SetConfig+0x10a>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a62      	ldr	r2, [pc, #392]	; (80072ec <DMA_SetConfig+0x268>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a61      	ldr	r2, [pc, #388]	; (80072f0 <DMA_SetConfig+0x26c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a5f      	ldr	r2, [pc, #380]	; (80072f4 <DMA_SetConfig+0x270>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <DMA_SetConfig+0x10a>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a5e      	ldr	r2, [pc, #376]	; (80072f8 <DMA_SetConfig+0x274>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <DMA_SetConfig+0x10a>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a5c      	ldr	r2, [pc, #368]	; (80072fc <DMA_SetConfig+0x278>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d101      	bne.n	8007192 <DMA_SetConfig+0x10e>
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <DMA_SetConfig+0x110>
 8007192:	2300      	movs	r3, #0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80071a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071b2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a39      	ldr	r2, [pc, #228]	; (80072a0 <DMA_SetConfig+0x21c>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d04a      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a38      	ldr	r2, [pc, #224]	; (80072a4 <DMA_SetConfig+0x220>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d045      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a36      	ldr	r2, [pc, #216]	; (80072a8 <DMA_SetConfig+0x224>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d040      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a35      	ldr	r2, [pc, #212]	; (80072ac <DMA_SetConfig+0x228>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d03b      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a33      	ldr	r2, [pc, #204]	; (80072b0 <DMA_SetConfig+0x22c>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d036      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a32      	ldr	r2, [pc, #200]	; (80072b4 <DMA_SetConfig+0x230>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d031      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a30      	ldr	r2, [pc, #192]	; (80072b8 <DMA_SetConfig+0x234>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d02c      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a2f      	ldr	r2, [pc, #188]	; (80072bc <DMA_SetConfig+0x238>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d027      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <DMA_SetConfig+0x23c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d022      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <DMA_SetConfig+0x240>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d01d      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2a      	ldr	r2, [pc, #168]	; (80072c8 <DMA_SetConfig+0x244>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d018      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a29      	ldr	r2, [pc, #164]	; (80072cc <DMA_SetConfig+0x248>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d013      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a27      	ldr	r2, [pc, #156]	; (80072d0 <DMA_SetConfig+0x24c>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d00e      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a26      	ldr	r2, [pc, #152]	; (80072d4 <DMA_SetConfig+0x250>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a24      	ldr	r2, [pc, #144]	; (80072d8 <DMA_SetConfig+0x254>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <DMA_SetConfig+0x1d0>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a23      	ldr	r2, [pc, #140]	; (80072dc <DMA_SetConfig+0x258>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d101      	bne.n	8007258 <DMA_SetConfig+0x1d4>
 8007254:	2301      	movs	r3, #1
 8007256:	e000      	b.n	800725a <DMA_SetConfig+0x1d6>
 8007258:	2300      	movs	r3, #0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d059      	beq.n	8007312 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007262:	f003 031f 	and.w	r3, r3, #31
 8007266:	223f      	movs	r2, #63	; 0x3f
 8007268:	409a      	lsls	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800727c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b40      	cmp	r3, #64	; 0x40
 800728c:	d138      	bne.n	8007300 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800729e:	e086      	b.n	80073ae <DMA_SetConfig+0x32a>
 80072a0:	40020010 	.word	0x40020010
 80072a4:	40020028 	.word	0x40020028
 80072a8:	40020040 	.word	0x40020040
 80072ac:	40020058 	.word	0x40020058
 80072b0:	40020070 	.word	0x40020070
 80072b4:	40020088 	.word	0x40020088
 80072b8:	400200a0 	.word	0x400200a0
 80072bc:	400200b8 	.word	0x400200b8
 80072c0:	40020410 	.word	0x40020410
 80072c4:	40020428 	.word	0x40020428
 80072c8:	40020440 	.word	0x40020440
 80072cc:	40020458 	.word	0x40020458
 80072d0:	40020470 	.word	0x40020470
 80072d4:	40020488 	.word	0x40020488
 80072d8:	400204a0 	.word	0x400204a0
 80072dc:	400204b8 	.word	0x400204b8
 80072e0:	58025408 	.word	0x58025408
 80072e4:	5802541c 	.word	0x5802541c
 80072e8:	58025430 	.word	0x58025430
 80072ec:	58025444 	.word	0x58025444
 80072f0:	58025458 	.word	0x58025458
 80072f4:	5802546c 	.word	0x5802546c
 80072f8:	58025480 	.word	0x58025480
 80072fc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	60da      	str	r2, [r3, #12]
}
 8007310:	e04d      	b.n	80073ae <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a29      	ldr	r2, [pc, #164]	; (80073bc <DMA_SetConfig+0x338>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d022      	beq.n	8007362 <DMA_SetConfig+0x2de>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a27      	ldr	r2, [pc, #156]	; (80073c0 <DMA_SetConfig+0x33c>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01d      	beq.n	8007362 <DMA_SetConfig+0x2de>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a26      	ldr	r2, [pc, #152]	; (80073c4 <DMA_SetConfig+0x340>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d018      	beq.n	8007362 <DMA_SetConfig+0x2de>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <DMA_SetConfig+0x344>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d013      	beq.n	8007362 <DMA_SetConfig+0x2de>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a23      	ldr	r2, [pc, #140]	; (80073cc <DMA_SetConfig+0x348>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d00e      	beq.n	8007362 <DMA_SetConfig+0x2de>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a21      	ldr	r2, [pc, #132]	; (80073d0 <DMA_SetConfig+0x34c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d009      	beq.n	8007362 <DMA_SetConfig+0x2de>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <DMA_SetConfig+0x350>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d004      	beq.n	8007362 <DMA_SetConfig+0x2de>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a1e      	ldr	r2, [pc, #120]	; (80073d8 <DMA_SetConfig+0x354>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d101      	bne.n	8007366 <DMA_SetConfig+0x2e2>
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <DMA_SetConfig+0x2e4>
 8007366:	2300      	movs	r3, #0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d020      	beq.n	80073ae <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	2201      	movs	r2, #1
 8007376:	409a      	lsls	r2, r3
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b40      	cmp	r3, #64	; 0x40
 800738a:	d108      	bne.n	800739e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	60da      	str	r2, [r3, #12]
}
 800739c:	e007      	b.n	80073ae <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	60da      	str	r2, [r3, #12]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	58025408 	.word	0x58025408
 80073c0:	5802541c 	.word	0x5802541c
 80073c4:	58025430 	.word	0x58025430
 80073c8:	58025444 	.word	0x58025444
 80073cc:	58025458 	.word	0x58025458
 80073d0:	5802546c 	.word	0x5802546c
 80073d4:	58025480 	.word	0x58025480
 80073d8:	58025494 	.word	0x58025494

080073dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a42      	ldr	r2, [pc, #264]	; (80074f4 <DMA_CalcBaseAndBitshift+0x118>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d04a      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a41      	ldr	r2, [pc, #260]	; (80074f8 <DMA_CalcBaseAndBitshift+0x11c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d045      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a3f      	ldr	r2, [pc, #252]	; (80074fc <DMA_CalcBaseAndBitshift+0x120>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d040      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a3e      	ldr	r2, [pc, #248]	; (8007500 <DMA_CalcBaseAndBitshift+0x124>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d03b      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a3c      	ldr	r2, [pc, #240]	; (8007504 <DMA_CalcBaseAndBitshift+0x128>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d036      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a3b      	ldr	r2, [pc, #236]	; (8007508 <DMA_CalcBaseAndBitshift+0x12c>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d031      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a39      	ldr	r2, [pc, #228]	; (800750c <DMA_CalcBaseAndBitshift+0x130>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d02c      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a38      	ldr	r2, [pc, #224]	; (8007510 <DMA_CalcBaseAndBitshift+0x134>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d027      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a36      	ldr	r2, [pc, #216]	; (8007514 <DMA_CalcBaseAndBitshift+0x138>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d022      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a35      	ldr	r2, [pc, #212]	; (8007518 <DMA_CalcBaseAndBitshift+0x13c>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d01d      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a33      	ldr	r2, [pc, #204]	; (800751c <DMA_CalcBaseAndBitshift+0x140>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d018      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a32      	ldr	r2, [pc, #200]	; (8007520 <DMA_CalcBaseAndBitshift+0x144>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d013      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a30      	ldr	r2, [pc, #192]	; (8007524 <DMA_CalcBaseAndBitshift+0x148>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d00e      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2f      	ldr	r2, [pc, #188]	; (8007528 <DMA_CalcBaseAndBitshift+0x14c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d009      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2d      	ldr	r2, [pc, #180]	; (800752c <DMA_CalcBaseAndBitshift+0x150>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d004      	beq.n	8007484 <DMA_CalcBaseAndBitshift+0xa8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a2c      	ldr	r2, [pc, #176]	; (8007530 <DMA_CalcBaseAndBitshift+0x154>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d101      	bne.n	8007488 <DMA_CalcBaseAndBitshift+0xac>
 8007484:	2301      	movs	r3, #1
 8007486:	e000      	b.n	800748a <DMA_CalcBaseAndBitshift+0xae>
 8007488:	2300      	movs	r3, #0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d024      	beq.n	80074d8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	b2db      	uxtb	r3, r3
 8007494:	3b10      	subs	r3, #16
 8007496:	4a27      	ldr	r2, [pc, #156]	; (8007534 <DMA_CalcBaseAndBitshift+0x158>)
 8007498:	fba2 2303 	umull	r2, r3, r2, r3
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	4a24      	ldr	r2, [pc, #144]	; (8007538 <DMA_CalcBaseAndBitshift+0x15c>)
 80074a8:	5cd3      	ldrb	r3, [r2, r3]
 80074aa:	461a      	mov	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d908      	bls.n	80074c8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b1f      	ldr	r3, [pc, #124]	; (800753c <DMA_CalcBaseAndBitshift+0x160>)
 80074be:	4013      	ands	r3, r2
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	659a      	str	r2, [r3, #88]	; 0x58
 80074c6:	e00d      	b.n	80074e4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b1b      	ldr	r3, [pc, #108]	; (800753c <DMA_CalcBaseAndBitshift+0x160>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6593      	str	r3, [r2, #88]	; 0x58
 80074d6:	e005      	b.n	80074e4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3714      	adds	r7, #20
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr
 80074f4:	40020010 	.word	0x40020010
 80074f8:	40020028 	.word	0x40020028
 80074fc:	40020040 	.word	0x40020040
 8007500:	40020058 	.word	0x40020058
 8007504:	40020070 	.word	0x40020070
 8007508:	40020088 	.word	0x40020088
 800750c:	400200a0 	.word	0x400200a0
 8007510:	400200b8 	.word	0x400200b8
 8007514:	40020410 	.word	0x40020410
 8007518:	40020428 	.word	0x40020428
 800751c:	40020440 	.word	0x40020440
 8007520:	40020458 	.word	0x40020458
 8007524:	40020470 	.word	0x40020470
 8007528:	40020488 	.word	0x40020488
 800752c:	400204a0 	.word	0x400204a0
 8007530:	400204b8 	.word	0x400204b8
 8007534:	aaaaaaab 	.word	0xaaaaaaab
 8007538:	08018c3c 	.word	0x08018c3c
 800753c:	fffffc00 	.word	0xfffffc00

08007540 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007540:	b480      	push	{r7}
 8007542:	b085      	sub	sp, #20
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007548:	2300      	movs	r3, #0
 800754a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d120      	bne.n	8007596 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007558:	2b03      	cmp	r3, #3
 800755a:	d858      	bhi.n	800760e <DMA_CheckFifoParam+0xce>
 800755c:	a201      	add	r2, pc, #4	; (adr r2, 8007564 <DMA_CheckFifoParam+0x24>)
 800755e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007562:	bf00      	nop
 8007564:	08007575 	.word	0x08007575
 8007568:	08007587 	.word	0x08007587
 800756c:	08007575 	.word	0x08007575
 8007570:	0800760f 	.word	0x0800760f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d048      	beq.n	8007612 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007584:	e045      	b.n	8007612 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800758e:	d142      	bne.n	8007616 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007594:	e03f      	b.n	8007616 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800759e:	d123      	bne.n	80075e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d838      	bhi.n	800761a <DMA_CheckFifoParam+0xda>
 80075a8:	a201      	add	r2, pc, #4	; (adr r2, 80075b0 <DMA_CheckFifoParam+0x70>)
 80075aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ae:	bf00      	nop
 80075b0:	080075c1 	.word	0x080075c1
 80075b4:	080075c7 	.word	0x080075c7
 80075b8:	080075c1 	.word	0x080075c1
 80075bc:	080075d9 	.word	0x080075d9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	73fb      	strb	r3, [r7, #15]
        break;
 80075c4:	e030      	b.n	8007628 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d025      	beq.n	800761e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075d6:	e022      	b.n	800761e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075e0:	d11f      	bne.n	8007622 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075e6:	e01c      	b.n	8007622 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d902      	bls.n	80075f6 <DMA_CheckFifoParam+0xb6>
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d003      	beq.n	80075fc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075f4:	e018      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	73fb      	strb	r3, [r7, #15]
        break;
 80075fa:	e015      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00e      	beq.n	8007626 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
    break;
 800760c:	e00b      	b.n	8007626 <DMA_CheckFifoParam+0xe6>
        break;
 800760e:	bf00      	nop
 8007610:	e00a      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        break;
 8007612:	bf00      	nop
 8007614:	e008      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        break;
 8007616:	bf00      	nop
 8007618:	e006      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        break;
 800761a:	bf00      	nop
 800761c:	e004      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        break;
 800761e:	bf00      	nop
 8007620:	e002      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
        break;
 8007622:	bf00      	nop
 8007624:	e000      	b.n	8007628 <DMA_CheckFifoParam+0xe8>
    break;
 8007626:	bf00      	nop
    }
  }

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a38      	ldr	r2, [pc, #224]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d022      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a36      	ldr	r2, [pc, #216]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01d      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a35      	ldr	r2, [pc, #212]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d018      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a33      	ldr	r2, [pc, #204]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d013      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a32      	ldr	r2, [pc, #200]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00e      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a30      	ldr	r2, [pc, #192]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d009      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a2f      	ldr	r2, [pc, #188]	; (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a2d      	ldr	r2, [pc, #180]	; (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d101      	bne.n	800769a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007696:	2301      	movs	r3, #1
 8007698:	e000      	b.n	800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800769a:	2300      	movs	r3, #0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01a      	beq.n	80076d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	3b08      	subs	r3, #8
 80076a8:	4a28      	ldr	r2, [pc, #160]	; (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80076aa:	fba2 2303 	umull	r2, r3, r2, r3
 80076ae:	091b      	lsrs	r3, r3, #4
 80076b0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	4b26      	ldr	r3, [pc, #152]	; (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a24      	ldr	r2, [pc, #144]	; (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076c4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f003 031f 	and.w	r3, r3, #31
 80076cc:	2201      	movs	r2, #1
 80076ce:	409a      	lsls	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076d4:	e024      	b.n	8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	3b10      	subs	r3, #16
 80076de:	4a1e      	ldr	r2, [pc, #120]	; (8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076e0:	fba2 2303 	umull	r2, r3, r2, r3
 80076e4:	091b      	lsrs	r3, r3, #4
 80076e6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4a1c      	ldr	r2, [pc, #112]	; (800775c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d806      	bhi.n	80076fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d902      	bls.n	80076fe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3308      	adds	r3, #8
 80076fc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4b18      	ldr	r3, [pc, #96]	; (8007764 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007702:	4413      	add	r3, r2
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a16      	ldr	r2, [pc, #88]	; (8007768 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007710:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	2201      	movs	r2, #1
 800771a:	409a      	lsls	r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007720:	bf00      	nop
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr
 800772c:	58025408 	.word	0x58025408
 8007730:	5802541c 	.word	0x5802541c
 8007734:	58025430 	.word	0x58025430
 8007738:	58025444 	.word	0x58025444
 800773c:	58025458 	.word	0x58025458
 8007740:	5802546c 	.word	0x5802546c
 8007744:	58025480 	.word	0x58025480
 8007748:	58025494 	.word	0x58025494
 800774c:	cccccccd 	.word	0xcccccccd
 8007750:	16009600 	.word	0x16009600
 8007754:	58025880 	.word	0x58025880
 8007758:	aaaaaaab 	.word	0xaaaaaaab
 800775c:	400204b8 	.word	0x400204b8
 8007760:	4002040f 	.word	0x4002040f
 8007764:	10008200 	.word	0x10008200
 8007768:	40020880 	.word	0x40020880

0800776c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d04a      	beq.n	8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d847      	bhi.n	8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a25      	ldr	r2, [pc, #148]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d022      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a24      	ldr	r2, [pc, #144]	; (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d01d      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a22      	ldr	r2, [pc, #136]	; (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d018      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a21      	ldr	r2, [pc, #132]	; (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d013      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1f      	ldr	r2, [pc, #124]	; (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00e      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d009      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1c      	ldr	r2, [pc, #112]	; (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d004      	beq.n	80077d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1b      	ldr	r2, [pc, #108]	; (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d101      	bne.n	80077dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077d8:	2301      	movs	r3, #1
 80077da:	e000      	b.n	80077de <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077dc:	2300      	movs	r3, #0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00a      	beq.n	80077f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4b17      	ldr	r3, [pc, #92]	; (8007844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a15      	ldr	r2, [pc, #84]	; (8007848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077f4:	671a      	str	r2, [r3, #112]	; 0x70
 80077f6:	e009      	b.n	800780c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4b14      	ldr	r3, [pc, #80]	; (800784c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a11      	ldr	r2, [pc, #68]	; (8007850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800780a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3b01      	subs	r3, #1
 8007810:	2201      	movs	r2, #1
 8007812:	409a      	lsls	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007818:	bf00      	nop
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	58025408 	.word	0x58025408
 8007828:	5802541c 	.word	0x5802541c
 800782c:	58025430 	.word	0x58025430
 8007830:	58025444 	.word	0x58025444
 8007834:	58025458 	.word	0x58025458
 8007838:	5802546c 	.word	0x5802546c
 800783c:	58025480 	.word	0x58025480
 8007840:	58025494 	.word	0x58025494
 8007844:	1600963f 	.word	0x1600963f
 8007848:	58025940 	.word	0x58025940
 800784c:	1000823f 	.word	0x1000823f
 8007850:	40020940 	.word	0x40020940

08007854 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b098      	sub	sp, #96	; 0x60
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800785c:	4a84      	ldr	r2, [pc, #528]	; (8007a70 <HAL_FDCAN_Init+0x21c>)
 800785e:	f107 030c 	add.w	r3, r7, #12
 8007862:	4611      	mov	r1, r2
 8007864:	224c      	movs	r2, #76	; 0x4c
 8007866:	4618      	mov	r0, r3
 8007868:	f00f ffc2 	bl	80177f0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d101      	bne.n	8007876 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007872:	2301      	movs	r3, #1
 8007874:	e1c6      	b.n	8007c04 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a7e      	ldr	r2, [pc, #504]	; (8007a74 <HAL_FDCAN_Init+0x220>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d106      	bne.n	800788e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007888:	461a      	mov	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d106      	bne.n	80078a8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f7fb fa6a 	bl	8002d7c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 0210 	bic.w	r2, r2, #16
 80078b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078b8:	f7fc fa32 	bl	8003d20 <HAL_GetTick>
 80078bc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078be:	e014      	b.n	80078ea <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078c0:	f7fc fa2e 	bl	8003d20 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b0a      	cmp	r3, #10
 80078cc:	d90d      	bls.n	80078ea <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078d4:	f043 0201 	orr.w	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2203      	movs	r2, #3
 80078e2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e18c      	b.n	8007c04 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	f003 0308 	and.w	r3, r3, #8
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d0e3      	beq.n	80078c0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0201 	orr.w	r2, r2, #1
 8007906:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007908:	f7fc fa0a 	bl	8003d20 <HAL_GetTick>
 800790c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800790e:	e014      	b.n	800793a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007910:	f7fc fa06 	bl	8003d20 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b0a      	cmp	r3, #10
 800791c:	d90d      	bls.n	800793a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2203      	movs	r2, #3
 8007932:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e164      	b.n	8007c04 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0e3      	beq.n	8007910 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	699a      	ldr	r2, [r3, #24]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f042 0202 	orr.w	r2, r2, #2
 8007956:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7c1b      	ldrb	r3, [r3, #16]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d108      	bne.n	8007972 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800796e:	619a      	str	r2, [r3, #24]
 8007970:	e007      	b.n	8007982 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699a      	ldr	r2, [r3, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007980:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	7c5b      	ldrb	r3, [r3, #17]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d108      	bne.n	800799c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	699a      	ldr	r2, [r3, #24]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007998:	619a      	str	r2, [r3, #24]
 800799a:	e007      	b.n	80079ac <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	7c9b      	ldrb	r3, [r3, #18]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d108      	bne.n	80079c6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	699a      	ldr	r2, [r3, #24]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079c2:	619a      	str	r2, [r3, #24]
 80079c4:	e007      	b.n	80079d6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699a      	ldr	r2, [r3, #24]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079d4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	430a      	orrs	r2, r1
 80079ea:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80079fa:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691a      	ldr	r2, [r3, #16]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f022 0210 	bic.w	r2, r2, #16
 8007a0a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d108      	bne.n	8007a26 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f042 0204 	orr.w	r2, r2, #4
 8007a22:	619a      	str	r2, [r3, #24]
 8007a24:	e030      	b.n	8007a88 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d02c      	beq.n	8007a88 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d020      	beq.n	8007a78 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a44:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	691a      	ldr	r2, [r3, #16]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f042 0210 	orr.w	r2, r2, #16
 8007a54:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d114      	bne.n	8007a88 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	699a      	ldr	r2, [r3, #24]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f042 0220 	orr.w	r2, r2, #32
 8007a6c:	619a      	str	r2, [r3, #24]
 8007a6e:	e00b      	b.n	8007a88 <HAL_FDCAN_Init+0x234>
 8007a70:	08018b28 	.word	0x08018b28
 8007a74:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699a      	ldr	r2, [r3, #24]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0220 	orr.w	r2, r2, #32
 8007a86:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	3b01      	subs	r3, #1
 8007a96:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a98:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a1b      	ldr	r3, [r3, #32]
 8007a9e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007aa0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	695b      	ldr	r3, [r3, #20]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ab0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ab2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007abc:	d115      	bne.n	8007aea <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ac2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	3b01      	subs	r3, #1
 8007aca:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007acc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007ad6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007ae6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ae8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00a      	beq.n	8007b08 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b10:	4413      	add	r3, r2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d011      	beq.n	8007b3a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007b1e:	f023 0107 	bic.w	r1, r3, #7
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	3360      	adds	r3, #96	; 0x60
 8007b2a:	443b      	add	r3, r7
 8007b2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	430a      	orrs	r2, r1
 8007b36:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d011      	beq.n	8007b66 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b4a:	f023 0107 	bic.w	r1, r3, #7
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	3360      	adds	r3, #96	; 0x60
 8007b56:	443b      	add	r3, r7
 8007b58:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d012      	beq.n	8007b94 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b76:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	3360      	adds	r3, #96	; 0x60
 8007b82:	443b      	add	r3, r7
 8007b84:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b88:	011a      	lsls	r2, r3, #4
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d012      	beq.n	8007bc2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007ba4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	3360      	adds	r3, #96	; 0x60
 8007bb0:	443b      	add	r3, r7
 8007bb2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007bb6:	021a      	lsls	r2, r3, #8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a11      	ldr	r2, [pc, #68]	; (8007c0c <HAL_FDCAN_Init+0x3b8>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d107      	bne.n	8007bdc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f022 0203 	bic.w	r2, r2, #3
 8007bda:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f80b 	bl	8007c10 <FDCAN_CalcultateRamBlockAddresses>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007c00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3760      	adds	r7, #96	; 0x60
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	4000a000 	.word	0x4000a000

08007c10 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c26:	4ba7      	ldr	r3, [pc, #668]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	68ba      	ldr	r2, [r7, #8]
 8007c2c:	0091      	lsls	r1, r2, #2
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	6812      	ldr	r2, [r2, #0]
 8007c32:	430b      	orrs	r3, r1
 8007c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c40:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	041a      	lsls	r2, r3, #16
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c66:	4b97      	ldr	r3, [pc, #604]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c68:	4013      	ands	r3, r2
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	0091      	lsls	r1, r2, #2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6812      	ldr	r2, [r2, #0]
 8007c72:	430b      	orrs	r3, r1
 8007c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c80:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	041a      	lsls	r2, r3, #16
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007ca8:	4b86      	ldr	r3, [pc, #536]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007caa:	4013      	ands	r3, r2
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	0091      	lsls	r1, r2, #2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6812      	ldr	r2, [r2, #0]
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cc2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	041a      	lsls	r2, r3, #16
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cde:	fb02 f303 	mul.w	r3, r2, r3
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007cf0:	4b74      	ldr	r3, [pc, #464]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	0091      	lsls	r1, r2, #2
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	6812      	ldr	r2, [r2, #0]
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	041a      	lsls	r2, r3, #16
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d26:	fb02 f303 	mul.w	r3, r2, r3
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007d38:	4b62      	ldr	r3, [pc, #392]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	0091      	lsls	r1, r2, #2
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	6812      	ldr	r2, [r2, #0]
 8007d44:	430b      	orrs	r3, r1
 8007d46:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d52:	fb02 f303 	mul.w	r3, r2, r3
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	4413      	add	r3, r2
 8007d5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007d64:	4b57      	ldr	r3, [pc, #348]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	0091      	lsls	r1, r2, #2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	430b      	orrs	r3, r1
 8007d72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d7e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d86:	041a      	lsls	r2, r3, #16
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d96:	005b      	lsls	r3, r3, #1
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	4413      	add	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0091      	lsls	r1, r2, #2
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	430b      	orrs	r3, r1
 8007db4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007dc0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc8:	041a      	lsls	r2, r3, #16
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ddc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de4:	061a      	lsls	r2, r3, #24
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	430a      	orrs	r2, r1
 8007dec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007df4:	4b34      	ldr	r3, [pc, #208]	; (8007ec8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007df6:	4413      	add	r3, r2
 8007df8:	009a      	lsls	r2, r3, #2
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e16:	00db      	lsls	r3, r3, #3
 8007e18:	441a      	add	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	441a      	add	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	441a      	add	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007e5a:	fb01 f303 	mul.w	r3, r1, r3
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	441a      	add	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	441a      	add	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007e8a:	fb01 f303 	mul.w	r3, r1, r3
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007ea6:	fb01 f303 	mul.w	r3, r1, r3
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	441a      	add	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eba:	4a04      	ldr	r2, [pc, #16]	; (8007ecc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d915      	bls.n	8007eec <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007ec0:	e006      	b.n	8007ed0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007ec2:	bf00      	nop
 8007ec4:	ffff0003 	.word	0xffff0003
 8007ec8:	10002b00 	.word	0x10002b00
 8007ecc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ed6:	f043 0220 	orr.w	r2, r3, #32
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e010      	b.n	8007f0e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e005      	b.n	8007f00 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	3304      	adds	r3, #4
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d3f3      	bcc.n	8007ef4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b089      	sub	sp, #36	; 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007f2a:	4b86      	ldr	r3, [pc, #536]	; (8008144 <HAL_GPIO_Init+0x228>)
 8007f2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f2e:	e18c      	b.n	800824a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	2101      	movs	r1, #1
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f000 817e 	beq.w	8008244 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d005      	beq.n	8007f60 <HAL_GPIO_Init+0x44>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f003 0303 	and.w	r3, r3, #3
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d130      	bne.n	8007fc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f70:	43db      	mvns	r3, r3
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	4013      	ands	r3, r2
 8007f76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f96:	2201      	movs	r2, #1
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	43db      	mvns	r3, r3
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	091b      	lsrs	r3, r3, #4
 8007fac:	f003 0201 	and.w	r2, r3, #1
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 0303 	and.w	r3, r3, #3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d017      	beq.n	8007ffe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	2203      	movs	r2, #3
 8007fda:	fa02 f303 	lsl.w	r3, r2, r3
 8007fde:	43db      	mvns	r3, r3
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	69ba      	ldr	r2, [r7, #24]
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b02      	cmp	r3, #2
 8008008:	d123      	bne.n	8008052 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	08da      	lsrs	r2, r3, #3
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3208      	adds	r2, #8
 8008012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	220f      	movs	r2, #15
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	691a      	ldr	r2, [r3, #16]
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	f003 0307 	and.w	r3, r3, #7
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	fa02 f303 	lsl.w	r3, r2, r3
 800803e:	69ba      	ldr	r2, [r7, #24]
 8008040:	4313      	orrs	r3, r2
 8008042:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	08da      	lsrs	r2, r3, #3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3208      	adds	r2, #8
 800804c:	69b9      	ldr	r1, [r7, #24]
 800804e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	005b      	lsls	r3, r3, #1
 800805c:	2203      	movs	r2, #3
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43db      	mvns	r3, r3
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	4013      	ands	r3, r2
 8008068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f003 0203 	and.w	r2, r3, #3
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	fa02 f303 	lsl.w	r3, r2, r3
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	4313      	orrs	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80d8 	beq.w	8008244 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008094:	4b2c      	ldr	r3, [pc, #176]	; (8008148 <HAL_GPIO_Init+0x22c>)
 8008096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800809a:	4a2b      	ldr	r2, [pc, #172]	; (8008148 <HAL_GPIO_Init+0x22c>)
 800809c:	f043 0302 	orr.w	r3, r3, #2
 80080a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80080a4:	4b28      	ldr	r3, [pc, #160]	; (8008148 <HAL_GPIO_Init+0x22c>)
 80080a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080b2:	4a26      	ldr	r2, [pc, #152]	; (800814c <HAL_GPIO_Init+0x230>)
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	089b      	lsrs	r3, r3, #2
 80080b8:	3302      	adds	r3, #2
 80080ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	220f      	movs	r2, #15
 80080ca:	fa02 f303 	lsl.w	r3, r2, r3
 80080ce:	43db      	mvns	r3, r3
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	4013      	ands	r3, r2
 80080d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1d      	ldr	r2, [pc, #116]	; (8008150 <HAL_GPIO_Init+0x234>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d04a      	beq.n	8008174 <HAL_GPIO_Init+0x258>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a1c      	ldr	r2, [pc, #112]	; (8008154 <HAL_GPIO_Init+0x238>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d02b      	beq.n	800813e <HAL_GPIO_Init+0x222>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a1b      	ldr	r2, [pc, #108]	; (8008158 <HAL_GPIO_Init+0x23c>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d025      	beq.n	800813a <HAL_GPIO_Init+0x21e>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a1a      	ldr	r2, [pc, #104]	; (800815c <HAL_GPIO_Init+0x240>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d01f      	beq.n	8008136 <HAL_GPIO_Init+0x21a>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a19      	ldr	r2, [pc, #100]	; (8008160 <HAL_GPIO_Init+0x244>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d019      	beq.n	8008132 <HAL_GPIO_Init+0x216>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a18      	ldr	r2, [pc, #96]	; (8008164 <HAL_GPIO_Init+0x248>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_GPIO_Init+0x212>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a17      	ldr	r2, [pc, #92]	; (8008168 <HAL_GPIO_Init+0x24c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00d      	beq.n	800812a <HAL_GPIO_Init+0x20e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <HAL_GPIO_Init+0x250>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <HAL_GPIO_Init+0x20a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <HAL_GPIO_Init+0x254>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d101      	bne.n	8008122 <HAL_GPIO_Init+0x206>
 800811e:	2309      	movs	r3, #9
 8008120:	e029      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 8008122:	230a      	movs	r3, #10
 8008124:	e027      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 8008126:	2307      	movs	r3, #7
 8008128:	e025      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 800812a:	2306      	movs	r3, #6
 800812c:	e023      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 800812e:	2305      	movs	r3, #5
 8008130:	e021      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 8008132:	2304      	movs	r3, #4
 8008134:	e01f      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 8008136:	2303      	movs	r3, #3
 8008138:	e01d      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 800813a:	2302      	movs	r3, #2
 800813c:	e01b      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 800813e:	2301      	movs	r3, #1
 8008140:	e019      	b.n	8008176 <HAL_GPIO_Init+0x25a>
 8008142:	bf00      	nop
 8008144:	58000080 	.word	0x58000080
 8008148:	58024400 	.word	0x58024400
 800814c:	58000400 	.word	0x58000400
 8008150:	58020000 	.word	0x58020000
 8008154:	58020400 	.word	0x58020400
 8008158:	58020800 	.word	0x58020800
 800815c:	58020c00 	.word	0x58020c00
 8008160:	58021000 	.word	0x58021000
 8008164:	58021400 	.word	0x58021400
 8008168:	58021800 	.word	0x58021800
 800816c:	58021c00 	.word	0x58021c00
 8008170:	58022400 	.word	0x58022400
 8008174:	2300      	movs	r3, #0
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	f002 0203 	and.w	r2, r2, #3
 800817c:	0092      	lsls	r2, r2, #2
 800817e:	4093      	lsls	r3, r2
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4313      	orrs	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008186:	4938      	ldr	r1, [pc, #224]	; (8008268 <HAL_GPIO_Init+0x34c>)
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	089b      	lsrs	r3, r3, #2
 800818c:	3302      	adds	r3, #2
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	43db      	mvns	r3, r3
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	4013      	ands	r3, r2
 80081a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80081b2:	69ba      	ldr	r2, [r7, #24]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80081ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80081c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	43db      	mvns	r3, r3
 80081ce:	69ba      	ldr	r2, [r7, #24]
 80081d0:	4013      	ands	r3, r2
 80081d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80081e0:	69ba      	ldr	r2, [r7, #24]
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80081e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	43db      	mvns	r3, r3
 80081fa:	69ba      	ldr	r2, [r7, #24]
 80081fc:	4013      	ands	r3, r2
 80081fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d003      	beq.n	8008214 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	43db      	mvns	r3, r3
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	4013      	ands	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008236:	69ba      	ldr	r2, [r7, #24]
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	3301      	adds	r3, #1
 8008248:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	fa22 f303 	lsr.w	r3, r2, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	f47f ae6b 	bne.w	8007f30 <HAL_GPIO_Init+0x14>
  }
}
 800825a:	bf00      	nop
 800825c:	bf00      	nop
 800825e:	3724      	adds	r7, #36	; 0x24
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	58000400 	.word	0x58000400

0800826c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691a      	ldr	r2, [r3, #16]
 800827c:	887b      	ldrh	r3, [r7, #2]
 800827e:	4013      	ands	r3, r2
 8008280:	2b00      	cmp	r3, #0
 8008282:	d002      	beq.n	800828a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008284:	2301      	movs	r3, #1
 8008286:	73fb      	strb	r3, [r7, #15]
 8008288:	e001      	b.n	800828e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800828e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008290:	4618      	mov	r0, r3
 8008292:	3714      	adds	r7, #20
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	807b      	strh	r3, [r7, #2]
 80082a8:	4613      	mov	r3, r2
 80082aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082ac:	787b      	ldrb	r3, [r7, #1]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d003      	beq.n	80082ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082b2:	887a      	ldrh	r2, [r7, #2]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80082b8:	e003      	b.n	80082c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	041a      	lsls	r2, r3, #16
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	619a      	str	r2, [r3, #24]
}
 80082c2:	bf00      	nop
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e07f      	b.n	80083e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d106      	bne.n	80082fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7fa fda8 	bl	8002e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2224      	movs	r2, #36	; 0x24
 8008300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0201 	bic.w	r2, r2, #1
 8008312:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008320:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008330:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	2b01      	cmp	r3, #1
 8008338:	d107      	bne.n	800834a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	e006      	b.n	8008358 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689a      	ldr	r2, [r3, #8]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008356:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d104      	bne.n	800836a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008368:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6859      	ldr	r1, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <HAL_I2C_Init+0x11c>)
 8008376:	430b      	orrs	r3, r1
 8008378:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008388:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	695b      	ldr	r3, [r3, #20]
 8008392:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	699b      	ldr	r3, [r3, #24]
 800839a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	69d9      	ldr	r1, [r3, #28]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a1a      	ldr	r2, [r3, #32]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	02008000 	.word	0x02008000

080083f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	68f9      	ldr	r1, [r7, #12]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	4798      	blx	r3
  }
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b20      	cmp	r3, #32
 8008438:	d138      	bne.n	80084ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008444:	2302      	movs	r3, #2
 8008446:	e032      	b.n	80084ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2224      	movs	r2, #36	; 0x24
 8008454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f022 0201 	bic.w	r2, r2, #1
 8008466:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008476:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6819      	ldr	r1, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084ac:	2302      	movs	r3, #2
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b085      	sub	sp, #20
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b20      	cmp	r3, #32
 80084ce:	d139      	bne.n	8008544 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084da:	2302      	movs	r3, #2
 80084dc:	e033      	b.n	8008546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2224      	movs	r2, #36	; 0x24
 80084ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0201 	bic.w	r2, r2, #1
 80084fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800850c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2220      	movs	r2, #32
 8008534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	e000      	b.n	8008546 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008544:	2302      	movs	r3, #2
  }
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008554:	b08f      	sub	sp, #60	; 0x3c
 8008556:	af0a      	add	r7, sp, #40	; 0x28
 8008558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e116      	b.n	8008792 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f00e fda0 	bl	80170c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2203      	movs	r2, #3
 8008588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f00a fea5 	bl	80132f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	603b      	str	r3, [r7, #0]
 80085ae:	687e      	ldr	r6, [r7, #4]
 80085b0:	466d      	mov	r5, sp
 80085b2:	f106 0410 	add.w	r4, r6, #16
 80085b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80085c6:	1d33      	adds	r3, r6, #4
 80085c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085ca:	6838      	ldr	r0, [r7, #0]
 80085cc:	f00a fd70 	bl	80130b0 <USB_CoreInit>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d005      	beq.n	80085e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e0d7      	b.n	8008792 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f00a fe93 	bl	8013314 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	73fb      	strb	r3, [r7, #15]
 80085f2:	e04a      	b.n	800868a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085f4:	7bfa      	ldrb	r2, [r7, #15]
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	4613      	mov	r3, r2
 80085fa:	00db      	lsls	r3, r3, #3
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	440b      	add	r3, r1
 8008602:	333d      	adds	r3, #61	; 0x3d
 8008604:	2201      	movs	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008608:	7bfa      	ldrb	r2, [r7, #15]
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	333c      	adds	r3, #60	; 0x3c
 8008618:	7bfa      	ldrb	r2, [r7, #15]
 800861a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800861c:	7bfa      	ldrb	r2, [r7, #15]
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	b298      	uxth	r0, r3
 8008622:	6879      	ldr	r1, [r7, #4]
 8008624:	4613      	mov	r3, r2
 8008626:	00db      	lsls	r3, r3, #3
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	440b      	add	r3, r1
 800862e:	3356      	adds	r3, #86	; 0x56
 8008630:	4602      	mov	r2, r0
 8008632:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	00db      	lsls	r3, r3, #3
 800863c:	4413      	add	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	3340      	adds	r3, #64	; 0x40
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008648:	7bfa      	ldrb	r2, [r7, #15]
 800864a:	6879      	ldr	r1, [r7, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	4413      	add	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	3344      	adds	r3, #68	; 0x44
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800865c:	7bfa      	ldrb	r2, [r7, #15]
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	00db      	lsls	r3, r3, #3
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	440b      	add	r3, r1
 800866a:	3348      	adds	r3, #72	; 0x48
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008670:	7bfa      	ldrb	r2, [r7, #15]
 8008672:	6879      	ldr	r1, [r7, #4]
 8008674:	4613      	mov	r3, r2
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	4413      	add	r3, r2
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	334c      	adds	r3, #76	; 0x4c
 8008680:	2200      	movs	r2, #0
 8008682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008684:	7bfb      	ldrb	r3, [r7, #15]
 8008686:	3301      	adds	r3, #1
 8008688:	73fb      	strb	r3, [r7, #15]
 800868a:	7bfa      	ldrb	r2, [r7, #15]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	429a      	cmp	r2, r3
 8008692:	d3af      	bcc.n	80085f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
 8008698:	e044      	b.n	8008724 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800869a:	7bfa      	ldrb	r2, [r7, #15]
 800869c:	6879      	ldr	r1, [r7, #4]
 800869e:	4613      	mov	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4413      	add	r3, r2
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	440b      	add	r3, r1
 80086a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80086b0:	7bfa      	ldrb	r2, [r7, #15]
 80086b2:	6879      	ldr	r1, [r7, #4]
 80086b4:	4613      	mov	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	4413      	add	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	440b      	add	r3, r1
 80086be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086c6:	7bfa      	ldrb	r2, [r7, #15]
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086dc:	7bfa      	ldrb	r2, [r7, #15]
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086f2:	7bfa      	ldrb	r2, [r7, #15]
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008704:	2200      	movs	r2, #0
 8008706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008708:	7bfa      	ldrb	r2, [r7, #15]
 800870a:	6879      	ldr	r1, [r7, #4]
 800870c:	4613      	mov	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	4413      	add	r3, r2
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	440b      	add	r3, r1
 8008716:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	3301      	adds	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]
 8008724:	7bfa      	ldrb	r2, [r7, #15]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d3b5      	bcc.n	800869a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	603b      	str	r3, [r7, #0]
 8008734:	687e      	ldr	r6, [r7, #4]
 8008736:	466d      	mov	r5, sp
 8008738:	f106 0410 	add.w	r4, r6, #16
 800873c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800873e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008748:	e885 0003 	stmia.w	r5, {r0, r1}
 800874c:	1d33      	adds	r3, r6, #4
 800874e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008750:	6838      	ldr	r0, [r7, #0]
 8008752:	f00a fe2b 	bl	80133ac <USB_DevInit>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d005      	beq.n	8008768 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e014      	b.n	8008792 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800877c:	2b01      	cmp	r3, #1
 800877e:	d102      	bne.n	8008786 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f001 f96f 	bl	8009a64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4618      	mov	r0, r3
 800878c:	f00b fe6d 	bl	801446a <USB_DevDisconnect>

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800879a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800879a:	b580      	push	{r7, lr}
 800879c:	b084      	sub	sp, #16
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d101      	bne.n	80087b6 <HAL_PCD_Start+0x1c>
 80087b2:	2302      	movs	r3, #2
 80087b4:	e022      	b.n	80087fc <HAL_PCD_Start+0x62>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d105      	bne.n	80087de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f00a fd74 	bl	80132d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f00b fe1b 	bl	8014428 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008804:	b590      	push	{r4, r7, lr}
 8008806:	b08d      	sub	sp, #52	; 0x34
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f00b fed9 	bl	80145d2 <USB_GetMode>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	f040 84b7 	bne.w	8009196 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4618      	mov	r0, r3
 800882e:	f00b fe3d 	bl	80144ac <USB_ReadInterrupts>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	f000 84ad 	beq.w	8009194 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	0a1b      	lsrs	r3, r3, #8
 8008844:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f00b fe2a 	bl	80144ac <USB_ReadInterrupts>
 8008858:	4603      	mov	r3, r0
 800885a:	f003 0302 	and.w	r3, r3, #2
 800885e:	2b02      	cmp	r3, #2
 8008860:	d107      	bne.n	8008872 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	695a      	ldr	r2, [r3, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f002 0202 	and.w	r2, r2, #2
 8008870:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f00b fe18 	bl	80144ac <USB_ReadInterrupts>
 800887c:	4603      	mov	r3, r0
 800887e:	f003 0310 	and.w	r3, r3, #16
 8008882:	2b10      	cmp	r3, #16
 8008884:	d161      	bne.n	800894a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0210 	bic.w	r2, r2, #16
 8008894:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008896:	6a3b      	ldr	r3, [r7, #32]
 8008898:	6a1b      	ldr	r3, [r3, #32]
 800889a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	f003 020f 	and.w	r2, r3, #15
 80088a2:	4613      	mov	r3, r2
 80088a4:	00db      	lsls	r3, r3, #3
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	4413      	add	r3, r2
 80088b2:	3304      	adds	r3, #4
 80088b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	0c5b      	lsrs	r3, r3, #17
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d124      	bne.n	800890c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d035      	beq.n	800893a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	091b      	lsrs	r3, r3, #4
 80088d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088dc:	b29b      	uxth	r3, r3
 80088de:	461a      	mov	r2, r3
 80088e0:	6a38      	ldr	r0, [r7, #32]
 80088e2:	f00b fc4f 	bl	8014184 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088f2:	441a      	add	r2, r3
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	695a      	ldr	r2, [r3, #20]
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	091b      	lsrs	r3, r3, #4
 8008900:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008904:	441a      	add	r2, r3
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	615a      	str	r2, [r3, #20]
 800890a:	e016      	b.n	800893a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	0c5b      	lsrs	r3, r3, #17
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	2b06      	cmp	r3, #6
 8008916:	d110      	bne.n	800893a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800891e:	2208      	movs	r2, #8
 8008920:	4619      	mov	r1, r3
 8008922:	6a38      	ldr	r0, [r7, #32]
 8008924:	f00b fc2e 	bl	8014184 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	695a      	ldr	r2, [r3, #20]
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008934:	441a      	add	r2, r3
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	699a      	ldr	r2, [r3, #24]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f042 0210 	orr.w	r2, r2, #16
 8008948:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f00b fdac 	bl	80144ac <USB_ReadInterrupts>
 8008954:	4603      	mov	r3, r0
 8008956:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800895a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800895e:	f040 80a7 	bne.w	8008ab0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008962:	2300      	movs	r3, #0
 8008964:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4618      	mov	r0, r3
 800896c:	f00b fdb1 	bl	80144d2 <USB_ReadDevAllOutEpInterrupt>
 8008970:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008972:	e099      	b.n	8008aa8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 808e 	beq.w	8008a9c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	4611      	mov	r1, r2
 800898a:	4618      	mov	r0, r3
 800898c:	f00b fdd5 	bl	801453a <USB_ReadDevOutEPInterrupt>
 8008990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00c      	beq.n	80089b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2301      	movs	r3, #1
 80089ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80089ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fed1 	bl	8009758 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f003 0308 	and.w	r3, r3, #8
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00c      	beq.n	80089da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	015a      	lsls	r2, r3, #5
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	4413      	add	r3, r2
 80089c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089cc:	461a      	mov	r2, r3
 80089ce:	2308      	movs	r3, #8
 80089d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80089d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 ffa7 	bl	8009928 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f0:	461a      	mov	r2, r3
 80089f2:	2310      	movs	r3, #16
 80089f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f003 0302 	and.w	r3, r3, #2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d030      	beq.n	8008a62 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008a00:	6a3b      	ldr	r3, [r7, #32]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a08:	2b80      	cmp	r3, #128	; 0x80
 8008a0a:	d109      	bne.n	8008a20 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a1e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a22:	4613      	mov	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	4413      	add	r3, r2
 8008a32:	3304      	adds	r3, #4
 8008a34:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	78db      	ldrb	r3, [r3, #3]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d108      	bne.n	8008a50 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	2200      	movs	r2, #0
 8008a42:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f00e fc32 	bl	80172b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	2302      	movs	r3, #2
 8008a60:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	f003 0320 	and.w	r3, r3, #32
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a6e:	015a      	lsls	r2, r3, #5
 8008a70:	69fb      	ldr	r3, [r7, #28]
 8008a72:	4413      	add	r3, r2
 8008a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a78:	461a      	mov	r2, r3
 8008a7a:	2320      	movs	r3, #32
 8008a7c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d009      	beq.n	8008a9c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8a:	015a      	lsls	r2, r3, #5
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	4413      	add	r3, r2
 8008a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a94:	461a      	mov	r2, r3
 8008a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a9a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f47f af62 	bne.w	8008974 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f00b fcf9 	bl	80144ac <USB_ReadInterrupts>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ac4:	f040 80db 	bne.w	8008c7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f00b fd1a 	bl	8014506 <USB_ReadDevAllInEpInterrupt>
 8008ad2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008ad8:	e0cd      	b.n	8008c76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 80c2 	beq.w	8008c6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f00b fd40 	bl	8014576 <USB_ReadDevInEPInterrupt>
 8008af6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d057      	beq.n	8008bb2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	f003 030f 	and.w	r3, r3, #15
 8008b08:	2201      	movs	r2, #1
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	69f9      	ldr	r1, [r7, #28]
 8008b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b22:	4013      	ands	r3, r2
 8008b24:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b32:	461a      	mov	r2, r3
 8008b34:	2301      	movs	r3, #1
 8008b36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d132      	bne.n	8008ba6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b44:	4613      	mov	r3, r2
 8008b46:	00db      	lsls	r3, r3, #3
 8008b48:	4413      	add	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	440b      	add	r3, r1
 8008b4e:	3348      	adds	r3, #72	; 0x48
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b56:	4613      	mov	r3, r2
 8008b58:	00db      	lsls	r3, r3, #3
 8008b5a:	4413      	add	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4403      	add	r3, r0
 8008b60:	3344      	adds	r3, #68	; 0x44
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4419      	add	r1, r3
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4403      	add	r3, r0
 8008b74:	3348      	adds	r3, #72	; 0x48
 8008b76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d113      	bne.n	8008ba6 <HAL_PCD_IRQHandler+0x3a2>
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	4613      	mov	r3, r2
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	440b      	add	r3, r1
 8008b8c:	334c      	adds	r3, #76	; 0x4c
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d108      	bne.n	8008ba6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	f00b fd49 	bl	8014638 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f00e fafc 	bl	80171aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f003 0308 	and.w	r3, r3, #8
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d008      	beq.n	8008bce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc8:	461a      	mov	r2, r3
 8008bca:	2308      	movs	r3, #8
 8008bcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	f003 0310 	and.w	r3, r3, #16
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d008      	beq.n	8008bea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be4:	461a      	mov	r2, r3
 8008be6:	2310      	movs	r3, #16
 8008be8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c00:	461a      	mov	r2, r3
 8008c02:	2340      	movs	r3, #64	; 0x40
 8008c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d023      	beq.n	8008c58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c12:	6a38      	ldr	r0, [r7, #32]
 8008c14:	f00a fd28 	bl	8013668 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	00db      	lsls	r3, r3, #3
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	3338      	adds	r3, #56	; 0x38
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	4413      	add	r3, r2
 8008c28:	3304      	adds	r3, #4
 8008c2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	78db      	ldrb	r3, [r3, #3]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d108      	bne.n	8008c46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2200      	movs	r2, #0
 8008c38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f00e fb49 	bl	80172d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c48:	015a      	lsls	r2, r3, #5
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c52:	461a      	mov	r2, r3
 8008c54:	2302      	movs	r3, #2
 8008c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008c62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fcea 	bl	800963e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	085b      	lsrs	r3, r3, #1
 8008c74:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f47f af2e 	bne.w	8008ada <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4618      	mov	r0, r3
 8008c84:	f00b fc12 	bl	80144ac <USB_ReadInterrupts>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c92:	d122      	bne.n	8008cda <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	69fa      	ldr	r2, [r7, #28]
 8008c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ca2:	f023 0301 	bic.w	r3, r3, #1
 8008ca6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d108      	bne.n	8008cc4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008cba:	2100      	movs	r1, #0
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fef5 	bl	8009aac <HAL_PCDEx_LPM_Callback>
 8008cc2:	e002      	b.n	8008cca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f00e fae7 	bl	8017298 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695a      	ldr	r2, [r3, #20]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f00b fbe4 	bl	80144ac <USB_ReadInterrupts>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cee:	d112      	bne.n	8008d16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d102      	bne.n	8008d06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f00e faa3 	bl	801724c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695a      	ldr	r2, [r3, #20]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f00b fbc6 	bl	80144ac <USB_ReadInterrupts>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d2a:	d121      	bne.n	8008d70 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	695a      	ldr	r2, [r3, #20]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008d3a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d111      	bne.n	8008d6a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d54:	089b      	lsrs	r3, r3, #2
 8008d56:	f003 020f 	and.w	r2, r3, #15
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008d60:	2101      	movs	r1, #1
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fea2 	bl	8009aac <HAL_PCDEx_LPM_Callback>
 8008d68:	e002      	b.n	8008d70 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f00e fa6e 	bl	801724c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f00b fb99 	bl	80144ac <USB_ReadInterrupts>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d84:	f040 80b7 	bne.w	8008ef6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	69fa      	ldr	r2, [r7, #28]
 8008d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2110      	movs	r1, #16
 8008da2:	4618      	mov	r0, r3
 8008da4:	f00a fc60 	bl	8013668 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008da8:	2300      	movs	r3, #0
 8008daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dac:	e046      	b.n	8008e3c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	015a      	lsls	r2, r3, #5
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dba:	461a      	mov	r2, r3
 8008dbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008dc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ddc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008de0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dee:	461a      	mov	r2, r3
 8008df0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008df4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df8:	015a      	lsls	r2, r3, #5
 8008dfa:	69fb      	ldr	r3, [r7, #28]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e06:	0151      	lsls	r1, r2, #5
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	440a      	add	r2, r1
 8008e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e14:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	015a      	lsls	r2, r3, #5
 8008e1a:	69fb      	ldr	r3, [r7, #28]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e26:	0151      	lsls	r1, r2, #5
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	440a      	add	r2, r1
 8008e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e34:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e38:	3301      	adds	r3, #1
 8008e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d3b3      	bcc.n	8008dae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e46:	69fb      	ldr	r3, [r7, #28]
 8008e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e54:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008e58:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d016      	beq.n	8008e90 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e72:	f043 030b 	orr.w	r3, r3, #11
 8008e76:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e82:	69fa      	ldr	r2, [r7, #28]
 8008e84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e88:	f043 030b 	orr.w	r3, r3, #11
 8008e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e8e:	e015      	b.n	8008ebc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e96:	695a      	ldr	r2, [r3, #20]
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f242 032b 	movw	r3, #8235	; 0x202b
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eb6:	f043 030b 	orr.w	r3, r3, #11
 8008eba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ece:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f00b fba9 	bl	8014638 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	695a      	ldr	r2, [r3, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4618      	mov	r0, r3
 8008efc:	f00b fad6 	bl	80144ac <USB_ReadInterrupts>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0a:	d124      	bne.n	8008f56 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f00b fb6d 	bl	80145f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f00a fc21 	bl	8013762 <USB_GetDevSpeed>
 8008f20:	4603      	mov	r3, r0
 8008f22:	461a      	mov	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681c      	ldr	r4, [r3, #0]
 8008f2c:	f001 fd88 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 8008f30:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4620      	mov	r0, r4
 8008f3c:	f00a f926 	bl	801318c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f00e f95a 	bl	80171fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	695a      	ldr	r2, [r3, #20]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f00b faa6 	bl	80144ac <USB_ReadInterrupts>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d10a      	bne.n	8008f80 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f00e f937 	bl	80171de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	695a      	ldr	r2, [r3, #20]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f002 0208 	and.w	r2, r2, #8
 8008f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f00b fa91 	bl	80144ac <USB_ReadInterrupts>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f90:	2b80      	cmp	r3, #128	; 0x80
 8008f92:	d122      	bne.n	8008fda <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fa4:	e014      	b.n	8008fd0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008fa6:	6879      	ldr	r1, [r7, #4]
 8008fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008faa:	4613      	mov	r3, r2
 8008fac:	00db      	lsls	r3, r3, #3
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d105      	bne.n	8008fca <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fb09 	bl	80095dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	3301      	adds	r3, #1
 8008fce:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d3e5      	bcc.n	8008fa6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f00b fa64 	bl	80144ac <USB_ReadInterrupts>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fee:	d13b      	bne.n	8009068 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ff4:	e02b      	b.n	800904e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009006:	6879      	ldr	r1, [r7, #4]
 8009008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800900a:	4613      	mov	r3, r2
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	3340      	adds	r3, #64	; 0x40
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d115      	bne.n	8009048 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800901c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800901e:	2b00      	cmp	r3, #0
 8009020:	da12      	bge.n	8009048 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009022:	6879      	ldr	r1, [r7, #4]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	4613      	mov	r3, r2
 8009028:	00db      	lsls	r3, r3, #3
 800902a:	4413      	add	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	440b      	add	r3, r1
 8009030:	333f      	adds	r3, #63	; 0x3f
 8009032:	2201      	movs	r2, #1
 8009034:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800903e:	b2db      	uxtb	r3, r3
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 faca 	bl	80095dc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	3301      	adds	r3, #1
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009054:	429a      	cmp	r2, r3
 8009056:	d3ce      	bcc.n	8008ff6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	695a      	ldr	r2, [r3, #20]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009066:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4618      	mov	r0, r3
 800906e:	f00b fa1d 	bl	80144ac <USB_ReadInterrupts>
 8009072:	4603      	mov	r3, r0
 8009074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800907c:	d155      	bne.n	800912a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800907e:	2301      	movs	r3, #1
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
 8009082:	e045      	b.n	8009110 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009094:	6879      	ldr	r1, [r7, #4]
 8009096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009098:	4613      	mov	r3, r2
 800909a:	00db      	lsls	r3, r3, #3
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d12e      	bne.n	800910a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80090ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	da2b      	bge.n	800910a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80090be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d121      	bne.n	800910a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80090c6:	6879      	ldr	r1, [r7, #4]
 80090c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ca:	4613      	mov	r3, r2
 80090cc:	00db      	lsls	r3, r3, #3
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	440b      	add	r3, r1
 80090d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80090d8:	2201      	movs	r2, #1
 80090da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	695b      	ldr	r3, [r3, #20]
 80090ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d10a      	bne.n	800910a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009106:	6053      	str	r3, [r2, #4]
            break;
 8009108:	e007      	b.n	800911a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	3301      	adds	r3, #1
 800910e:	627b      	str	r3, [r7, #36]	; 0x24
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009116:	429a      	cmp	r2, r3
 8009118:	d3b4      	bcc.n	8009084 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	695a      	ldr	r2, [r3, #20]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4618      	mov	r0, r3
 8009130:	f00b f9bc 	bl	80144ac <USB_ReadInterrupts>
 8009134:	4603      	mov	r3, r0
 8009136:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800913a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913e:	d10a      	bne.n	8009156 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f00e f8db 	bl	80172fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695a      	ldr	r2, [r3, #20]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009154:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4618      	mov	r0, r3
 800915c:	f00b f9a6 	bl	80144ac <USB_ReadInterrupts>
 8009160:	4603      	mov	r3, r0
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d115      	bne.n	8009196 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	f003 0304 	and.w	r3, r3, #4
 8009178:	2b00      	cmp	r3, #0
 800917a:	d002      	beq.n	8009182 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f00e f8cb 	bl	8017318 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	6859      	ldr	r1, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	430a      	orrs	r2, r1
 8009190:	605a      	str	r2, [r3, #4]
 8009192:	e000      	b.n	8009196 <HAL_PCD_IRQHandler+0x992>
      return;
 8009194:	bf00      	nop
    }
  }
}
 8009196:	3734      	adds	r7, #52	; 0x34
 8009198:	46bd      	mov	sp, r7
 800919a:	bd90      	pop	{r4, r7, pc}

0800919c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d101      	bne.n	80091b6 <HAL_PCD_SetAddress+0x1a>
 80091b2:	2302      	movs	r3, #2
 80091b4:	e013      	b.n	80091de <HAL_PCD_SetAddress+0x42>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	78fa      	ldrb	r2, [r7, #3]
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f00b f904 	bl	80143dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	4608      	mov	r0, r1
 80091f0:	4611      	mov	r1, r2
 80091f2:	461a      	mov	r2, r3
 80091f4:	4603      	mov	r3, r0
 80091f6:	70fb      	strb	r3, [r7, #3]
 80091f8:	460b      	mov	r3, r1
 80091fa:	803b      	strh	r3, [r7, #0]
 80091fc:	4613      	mov	r3, r2
 80091fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009204:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009208:	2b00      	cmp	r3, #0
 800920a:	da0f      	bge.n	800922c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800920c:	78fb      	ldrb	r3, [r7, #3]
 800920e:	f003 020f 	and.w	r2, r3, #15
 8009212:	4613      	mov	r3, r2
 8009214:	00db      	lsls	r3, r3, #3
 8009216:	4413      	add	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	3338      	adds	r3, #56	; 0x38
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4413      	add	r3, r2
 8009220:	3304      	adds	r3, #4
 8009222:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2201      	movs	r2, #1
 8009228:	705a      	strb	r2, [r3, #1]
 800922a:	e00f      	b.n	800924c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800922c:	78fb      	ldrb	r3, [r7, #3]
 800922e:	f003 020f 	and.w	r2, r3, #15
 8009232:	4613      	mov	r3, r2
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4413      	add	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4413      	add	r3, r2
 8009242:	3304      	adds	r3, #4
 8009244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2200      	movs	r2, #0
 800924a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	b2da      	uxtb	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009258:	883a      	ldrh	r2, [r7, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	78ba      	ldrb	r2, [r7, #2]
 8009262:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	785b      	ldrb	r3, [r3, #1]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	b29a      	uxth	r2, r3
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009276:	78bb      	ldrb	r3, [r7, #2]
 8009278:	2b02      	cmp	r3, #2
 800927a:	d102      	bne.n	8009282 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	2200      	movs	r2, #0
 8009280:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_PCD_EP_Open+0xaa>
 800928c:	2302      	movs	r3, #2
 800928e:	e00e      	b.n	80092ae <HAL_PCD_EP_Open+0xc8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68f9      	ldr	r1, [r7, #12]
 800929e:	4618      	mov	r0, r3
 80092a0:	f00a fa84 	bl	80137ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80092ac:	7afb      	ldrb	r3, [r7, #11]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	460b      	mov	r3, r1
 80092c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	da0f      	bge.n	80092ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	f003 020f 	and.w	r2, r3, #15
 80092d0:	4613      	mov	r3, r2
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	3338      	adds	r3, #56	; 0x38
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	4413      	add	r3, r2
 80092de:	3304      	adds	r3, #4
 80092e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2201      	movs	r2, #1
 80092e6:	705a      	strb	r2, [r3, #1]
 80092e8:	e00f      	b.n	800930a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	f003 020f 	and.w	r2, r3, #15
 80092f0:	4613      	mov	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	4413      	add	r3, r2
 8009300:	3304      	adds	r3, #4
 8009302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	f003 030f 	and.w	r3, r3, #15
 8009310:	b2da      	uxtb	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800931c:	2b01      	cmp	r3, #1
 800931e:	d101      	bne.n	8009324 <HAL_PCD_EP_Close+0x6e>
 8009320:	2302      	movs	r3, #2
 8009322:	e00e      	b.n	8009342 <HAL_PCD_EP_Close+0x8c>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2201      	movs	r2, #1
 8009328:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	68f9      	ldr	r1, [r7, #12]
 8009332:	4618      	mov	r0, r3
 8009334:	f00a fac2 	bl	80138bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
 8009356:	460b      	mov	r3, r1
 8009358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800935a:	7afb      	ldrb	r3, [r7, #11]
 800935c:	f003 020f 	and.w	r2, r3, #15
 8009360:	4613      	mov	r3, r2
 8009362:	00db      	lsls	r3, r3, #3
 8009364:	4413      	add	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	3304      	adds	r3, #4
 8009372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	683a      	ldr	r2, [r7, #0]
 800937e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2200      	movs	r2, #0
 8009384:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	2200      	movs	r2, #0
 800938a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800938c:	7afb      	ldrb	r3, [r7, #11]
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	b2da      	uxtb	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d102      	bne.n	80093a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6979      	ldr	r1, [r7, #20]
 80093b4:	f00a fb5e 	bl	8013a74 <USB_EPStartXfer>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3718      	adds	r7, #24
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	460b      	mov	r3, r1
 80093cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f003 020f 	and.w	r2, r3, #15
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80093e4:	681b      	ldr	r3, [r3, #0]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	370c      	adds	r7, #12
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b086      	sub	sp, #24
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	607a      	str	r2, [r7, #4]
 80093fc:	603b      	str	r3, [r7, #0]
 80093fe:	460b      	mov	r3, r1
 8009400:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009402:	7afb      	ldrb	r3, [r7, #11]
 8009404:	f003 020f 	and.w	r2, r3, #15
 8009408:	4613      	mov	r3, r2
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	3338      	adds	r3, #56	; 0x38
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	3304      	adds	r3, #4
 8009418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	683a      	ldr	r2, [r7, #0]
 8009424:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	2200      	movs	r2, #0
 800942a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	2201      	movs	r2, #1
 8009430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009432:	7afb      	ldrb	r3, [r7, #11]
 8009434:	f003 030f 	and.w	r3, r3, #15
 8009438:	b2da      	uxtb	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b01      	cmp	r3, #1
 8009444:	d102      	bne.n	800944c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	b2db      	uxtb	r3, r3
 8009456:	461a      	mov	r2, r3
 8009458:	6979      	ldr	r1, [r7, #20]
 800945a:	f00a fb0b 	bl	8013a74 <USB_EPStartXfer>

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	f003 020f 	and.w	r2, r3, #15
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	429a      	cmp	r2, r3
 8009480:	d901      	bls.n	8009486 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e050      	b.n	8009528 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009486:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da0f      	bge.n	80094ae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800948e:	78fb      	ldrb	r3, [r7, #3]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	4613      	mov	r3, r2
 8009496:	00db      	lsls	r3, r3, #3
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	3338      	adds	r3, #56	; 0x38
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	4413      	add	r3, r2
 80094a2:	3304      	adds	r3, #4
 80094a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	705a      	strb	r2, [r3, #1]
 80094ac:	e00d      	b.n	80094ca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	4613      	mov	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	4413      	add	r3, r2
 80094c0:	3304      	adds	r3, #4
 80094c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2201      	movs	r2, #1
 80094ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	f003 030f 	and.w	r3, r3, #15
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_PCD_EP_SetStall+0x82>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e01e      	b.n	8009528 <HAL_PCD_EP_SetStall+0xc0>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	4618      	mov	r0, r3
 80094fa:	f00a fe9b 	bl	8014234 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094fe:	78fb      	ldrb	r3, [r7, #3]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10a      	bne.n	800951e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	b2d9      	uxtb	r1, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009518:	461a      	mov	r2, r3
 800951a:	f00b f88d 	bl	8014638 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	f003 020f 	and.w	r2, r3, #15
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	429a      	cmp	r2, r3
 8009548:	d901      	bls.n	800954e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e042      	b.n	80095d4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800954e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009552:	2b00      	cmp	r3, #0
 8009554:	da0f      	bge.n	8009576 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	4613      	mov	r3, r2
 800955e:	00db      	lsls	r3, r3, #3
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	3338      	adds	r3, #56	; 0x38
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	4413      	add	r3, r2
 800956a:	3304      	adds	r3, #4
 800956c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	705a      	strb	r2, [r3, #1]
 8009574:	e00f      	b.n	8009596 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	f003 020f 	and.w	r2, r3, #15
 800957c:	4613      	mov	r3, r2
 800957e:	00db      	lsls	r3, r3, #3
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	4413      	add	r3, r2
 800958c:	3304      	adds	r3, #4
 800958e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800959c:	78fb      	ldrb	r3, [r7, #3]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_PCD_EP_ClrStall+0x86>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e00e      	b.n	80095d4 <HAL_PCD_EP_ClrStall+0xa4>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68f9      	ldr	r1, [r7, #12]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f00a fea3 	bl	8014310 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80095e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	da0c      	bge.n	800960a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095f0:	78fb      	ldrb	r3, [r7, #3]
 80095f2:	f003 020f 	and.w	r2, r3, #15
 80095f6:	4613      	mov	r3, r2
 80095f8:	00db      	lsls	r3, r3, #3
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	3338      	adds	r3, #56	; 0x38
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	4413      	add	r3, r2
 8009604:	3304      	adds	r3, #4
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	e00c      	b.n	8009624 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	f003 020f 	and.w	r2, r3, #15
 8009610:	4613      	mov	r3, r2
 8009612:	00db      	lsls	r3, r3, #3
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	4413      	add	r3, r2
 8009620:	3304      	adds	r3, #4
 8009622:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68f9      	ldr	r1, [r7, #12]
 800962a:	4618      	mov	r0, r3
 800962c:	f00a fcc2 	bl	8013fb4 <USB_EPStopXfer>
 8009630:	4603      	mov	r3, r0
 8009632:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009634:	7afb      	ldrb	r3, [r7, #11]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b08a      	sub	sp, #40	; 0x28
 8009642:	af02      	add	r7, sp, #8
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	4613      	mov	r3, r2
 8009656:	00db      	lsls	r3, r3, #3
 8009658:	4413      	add	r3, r2
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	3338      	adds	r3, #56	; 0x38
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	4413      	add	r3, r2
 8009662:	3304      	adds	r3, #4
 8009664:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	695a      	ldr	r2, [r3, #20]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	429a      	cmp	r2, r3
 8009670:	d901      	bls.n	8009676 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e06c      	b.n	8009750 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	691a      	ldr	r2, [r3, #16]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	695b      	ldr	r3, [r3, #20]
 800967e:	1ad3      	subs	r3, r2, r3
 8009680:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	429a      	cmp	r2, r3
 800968a:	d902      	bls.n	8009692 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	3303      	adds	r3, #3
 8009696:	089b      	lsrs	r3, r3, #2
 8009698:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800969a:	e02b      	b.n	80096f4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	691a      	ldr	r2, [r3, #16]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	69fa      	ldr	r2, [r7, #28]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d902      	bls.n	80096b8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	3303      	adds	r3, #3
 80096bc:	089b      	lsrs	r3, r3, #2
 80096be:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	68d9      	ldr	r1, [r3, #12]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	9300      	str	r3, [sp, #0]
 80096d4:	4603      	mov	r3, r0
 80096d6:	6978      	ldr	r0, [r7, #20]
 80096d8:	f00a fd16 	bl	8014108 <USB_WritePacket>

    ep->xfer_buff  += len;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	68da      	ldr	r2, [r3, #12]
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	441a      	add	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	695a      	ldr	r2, [r3, #20]
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	441a      	add	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009704:	69ba      	ldr	r2, [r7, #24]
 8009706:	429a      	cmp	r2, r3
 8009708:	d809      	bhi.n	800971e <PCD_WriteEmptyTxFifo+0xe0>
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	695a      	ldr	r2, [r3, #20]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009712:	429a      	cmp	r2, r3
 8009714:	d203      	bcs.n	800971e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1be      	bne.n	800969c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	691a      	ldr	r2, [r3, #16]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	695b      	ldr	r3, [r3, #20]
 8009726:	429a      	cmp	r2, r3
 8009728:	d811      	bhi.n	800974e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f003 030f 	and.w	r3, r3, #15
 8009730:	2201      	movs	r2, #1
 8009732:	fa02 f303 	lsl.w	r3, r2, r3
 8009736:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800973e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	43db      	mvns	r3, r3
 8009744:	6939      	ldr	r1, [r7, #16]
 8009746:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800974a:	4013      	ands	r3, r2
 800974c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3720      	adds	r7, #32
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b088      	sub	sp, #32
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	333c      	adds	r3, #60	; 0x3c
 8009770:	3304      	adds	r3, #4
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69bb      	ldr	r3, [r7, #24]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	2b01      	cmp	r3, #1
 800978c:	d17b      	bne.n	8009886 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d015      	beq.n	80097c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	4a61      	ldr	r2, [pc, #388]	; (8009920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800979c:	4293      	cmp	r3, r2
 800979e:	f240 80b9 	bls.w	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f000 80b3 	beq.w	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ba:	461a      	mov	r2, r3
 80097bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097c0:	6093      	str	r3, [r2, #8]
 80097c2:	e0a7      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d009      	beq.n	80097e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	015a      	lsls	r2, r3, #5
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	4413      	add	r3, r2
 80097d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097da:	461a      	mov	r2, r3
 80097dc:	2320      	movs	r3, #32
 80097de:	6093      	str	r3, [r2, #8]
 80097e0:	e098      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f040 8093 	bne.w	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	4a4b      	ldr	r2, [pc, #300]	; (8009920 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d90f      	bls.n	8009816 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	015a      	lsls	r2, r3, #5
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	4413      	add	r3, r2
 8009808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980c:	461a      	mov	r2, r3
 800980e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009812:	6093      	str	r3, [r2, #8]
 8009814:	e07e      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	4413      	add	r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	4413      	add	r3, r2
 8009828:	3304      	adds	r3, #4
 800982a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a1a      	ldr	r2, [r3, #32]
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	0159      	lsls	r1, r3, #5
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	440b      	add	r3, r1
 8009838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009842:	1ad2      	subs	r2, r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d114      	bne.n	8009878 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6818      	ldr	r0, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009860:	461a      	mov	r2, r3
 8009862:	2101      	movs	r1, #1
 8009864:	f00a fee8 	bl	8014638 <USB_EP0_OutStart>
 8009868:	e006      	b.n	8009878 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	441a      	add	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f00d fc78 	bl	8017174 <HAL_PCD_DataOutStageCallback>
 8009884:	e046      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	4a26      	ldr	r2, [pc, #152]	; (8009924 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d124      	bne.n	80098d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d00a      	beq.n	80098ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	015a      	lsls	r2, r3, #5
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	4413      	add	r3, r2
 80098a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a4:	461a      	mov	r2, r3
 80098a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098aa:	6093      	str	r3, [r2, #8]
 80098ac:	e032      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	f003 0320 	and.w	r3, r3, #32
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	015a      	lsls	r2, r3, #5
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	4413      	add	r3, r2
 80098c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c4:	461a      	mov	r2, r3
 80098c6:	2320      	movs	r3, #32
 80098c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f00d fc4f 	bl	8017174 <HAL_PCD_DataOutStageCallback>
 80098d6:	e01d      	b.n	8009914 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d114      	bne.n	8009908 <PCD_EP_OutXfrComplete_int+0x1b0>
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	683a      	ldr	r2, [r7, #0]
 80098e2:	4613      	mov	r3, r2
 80098e4:	00db      	lsls	r3, r3, #3
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	440b      	add	r3, r1
 80098ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d108      	bne.n	8009908 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009900:	461a      	mov	r2, r3
 8009902:	2100      	movs	r1, #0
 8009904:	f00a fe98 	bl	8014638 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f00d fc30 	bl	8017174 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3720      	adds	r7, #32
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	4f54300a 	.word	0x4f54300a
 8009924:	4f54310a 	.word	0x4f54310a

08009928 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	333c      	adds	r3, #60	; 0x3c
 8009940:	3304      	adds	r3, #4
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	4a15      	ldr	r2, [pc, #84]	; (80099b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d90e      	bls.n	800997c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009964:	2b00      	cmp	r3, #0
 8009966:	d009      	beq.n	800997c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009974:	461a      	mov	r2, r3
 8009976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f00d fbe7 	bl	8017150 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	4a0a      	ldr	r2, [pc, #40]	; (80099b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d90c      	bls.n	80099a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	2b01      	cmp	r3, #1
 8009990:	d108      	bne.n	80099a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800999c:	461a      	mov	r2, r3
 800999e:	2101      	movs	r1, #1
 80099a0:	f00a fe4a 	bl	8014638 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	4f54300a 	.word	0x4f54300a

080099b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b085      	sub	sp, #20
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
 80099c0:	4613      	mov	r3, r2
 80099c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099cc:	78fb      	ldrb	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d107      	bne.n	80099e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099d2:	883b      	ldrh	r3, [r7, #0]
 80099d4:	0419      	lsls	r1, r3, #16
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	430a      	orrs	r2, r1
 80099de:	629a      	str	r2, [r3, #40]	; 0x28
 80099e0:	e028      	b.n	8009a34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	0c1b      	lsrs	r3, r3, #16
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	4413      	add	r3, r2
 80099ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80099f0:	2300      	movs	r3, #0
 80099f2:	73fb      	strb	r3, [r7, #15]
 80099f4:	e00d      	b.n	8009a12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
 80099fc:	3340      	adds	r3, #64	; 0x40
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	0c1b      	lsrs	r3, r3, #16
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4413      	add	r3, r2
 8009a0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	73fb      	strb	r3, [r7, #15]
 8009a12:	7bfa      	ldrb	r2, [r7, #15]
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	d3ec      	bcc.n	80099f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a1c:	883b      	ldrh	r3, [r7, #0]
 8009a1e:	0418      	lsls	r0, r3, #16
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6819      	ldr	r1, [r3, #0]
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	3b01      	subs	r3, #1
 8009a28:	68ba      	ldr	r2, [r7, #8]
 8009a2a:	4302      	orrs	r2, r0
 8009a2c:	3340      	adds	r3, #64	; 0x40
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a34:	2300      	movs	r3, #0
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3714      	adds	r7, #20
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	887a      	ldrh	r2, [r7, #2]
 8009a54:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a56:	2300      	movs	r3, #0
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2201      	movs	r2, #1
 8009a76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a92:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <HAL_PCDEx_ActivateLPM+0x44>)
 8009a94:	4313      	orrs	r3, r2
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	10000003 	.word	0x10000003

08009aac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009ab8:	bf00      	nop
 8009aba:	370c      	adds	r7, #12
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009acc:	4b19      	ldr	r3, [pc, #100]	; (8009b34 <HAL_PWREx_ConfigSupply+0x70>)
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b04      	cmp	r3, #4
 8009ad6:	d00a      	beq.n	8009aee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ad8:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <HAL_PWREx_ConfigSupply+0x70>)
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d001      	beq.n	8009aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e01f      	b.n	8009b2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e01d      	b.n	8009b2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009aee:	4b11      	ldr	r3, [pc, #68]	; (8009b34 <HAL_PWREx_ConfigSupply+0x70>)
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f023 0207 	bic.w	r2, r3, #7
 8009af6:	490f      	ldr	r1, [pc, #60]	; (8009b34 <HAL_PWREx_ConfigSupply+0x70>)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009afe:	f7fa f90f 	bl	8003d20 <HAL_GetTick>
 8009b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b04:	e009      	b.n	8009b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009b06:	f7fa f90b 	bl	8003d20 <HAL_GetTick>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b14:	d901      	bls.n	8009b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e007      	b.n	8009b2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b1a:	4b06      	ldr	r3, [pc, #24]	; (8009b34 <HAL_PWREx_ConfigSupply+0x70>)
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b26:	d1ee      	bne.n	8009b06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009b28:	2300      	movs	r3, #0
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	58024800 	.word	0x58024800

08009b38 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009b3c:	4b05      	ldr	r3, [pc, #20]	; (8009b54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b3e:	68db      	ldr	r3, [r3, #12]
 8009b40:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b46:	60d3      	str	r3, [r2, #12]
}
 8009b48:	bf00      	nop
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	58024800 	.word	0x58024800

08009b58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b08c      	sub	sp, #48	; 0x30
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e3c8      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f000 8087 	beq.w	8009c86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b78:	4b88      	ldr	r3, [pc, #544]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009b7a:	691b      	ldr	r3, [r3, #16]
 8009b7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b82:	4b86      	ldr	r3, [pc, #536]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d007      	beq.n	8009b9e <HAL_RCC_OscConfig+0x46>
 8009b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b90:	2b18      	cmp	r3, #24
 8009b92:	d110      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x5e>
 8009b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d10b      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b9e:	4b7f      	ldr	r3, [pc, #508]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d06c      	beq.n	8009c84 <HAL_RCC_OscConfig+0x12c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d168      	bne.n	8009c84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e3a2      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bbe:	d106      	bne.n	8009bce <HAL_RCC_OscConfig+0x76>
 8009bc0:	4b76      	ldr	r3, [pc, #472]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a75      	ldr	r2, [pc, #468]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	e02e      	b.n	8009c2c <HAL_RCC_OscConfig+0xd4>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10c      	bne.n	8009bf0 <HAL_RCC_OscConfig+0x98>
 8009bd6:	4b71      	ldr	r3, [pc, #452]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a70      	ldr	r2, [pc, #448]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	4b6e      	ldr	r3, [pc, #440]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a6d      	ldr	r2, [pc, #436]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bec:	6013      	str	r3, [r2, #0]
 8009bee:	e01d      	b.n	8009c2c <HAL_RCC_OscConfig+0xd4>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009bf8:	d10c      	bne.n	8009c14 <HAL_RCC_OscConfig+0xbc>
 8009bfa:	4b68      	ldr	r3, [pc, #416]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a67      	ldr	r2, [pc, #412]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	4b65      	ldr	r3, [pc, #404]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a64      	ldr	r2, [pc, #400]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c10:	6013      	str	r3, [r2, #0]
 8009c12:	e00b      	b.n	8009c2c <HAL_RCC_OscConfig+0xd4>
 8009c14:	4b61      	ldr	r3, [pc, #388]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a60      	ldr	r2, [pc, #384]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	4b5e      	ldr	r3, [pc, #376]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a5d      	ldr	r2, [pc, #372]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d013      	beq.n	8009c5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c34:	f7fa f874 	bl	8003d20 <HAL_GetTick>
 8009c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c3a:	e008      	b.n	8009c4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c3c:	f7fa f870 	bl	8003d20 <HAL_GetTick>
 8009c40:	4602      	mov	r2, r0
 8009c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	2b64      	cmp	r3, #100	; 0x64
 8009c48:	d901      	bls.n	8009c4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e356      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c4e:	4b53      	ldr	r3, [pc, #332]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0f0      	beq.n	8009c3c <HAL_RCC_OscConfig+0xe4>
 8009c5a:	e014      	b.n	8009c86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c5c:	f7fa f860 	bl	8003d20 <HAL_GetTick>
 8009c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c62:	e008      	b.n	8009c76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c64:	f7fa f85c 	bl	8003d20 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	2b64      	cmp	r3, #100	; 0x64
 8009c70:	d901      	bls.n	8009c76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009c72:	2303      	movs	r3, #3
 8009c74:	e342      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c76:	4b49      	ldr	r3, [pc, #292]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1f0      	bne.n	8009c64 <HAL_RCC_OscConfig+0x10c>
 8009c82:	e000      	b.n	8009c86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 0302 	and.w	r3, r3, #2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 808c 	beq.w	8009dac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c94:	4b41      	ldr	r3, [pc, #260]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009c96:	691b      	ldr	r3, [r3, #16]
 8009c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c9e:	4b3f      	ldr	r3, [pc, #252]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d007      	beq.n	8009cba <HAL_RCC_OscConfig+0x162>
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	2b18      	cmp	r3, #24
 8009cae:	d137      	bne.n	8009d20 <HAL_RCC_OscConfig+0x1c8>
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	f003 0303 	and.w	r3, r3, #3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d132      	bne.n	8009d20 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cba:	4b38      	ldr	r3, [pc, #224]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0304 	and.w	r3, r3, #4
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d005      	beq.n	8009cd2 <HAL_RCC_OscConfig+0x17a>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e314      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009cd2:	4b32      	ldr	r3, [pc, #200]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f023 0219 	bic.w	r2, r3, #25
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	492f      	ldr	r1, [pc, #188]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ce4:	f7fa f81c 	bl	8003d20 <HAL_GetTick>
 8009ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cea:	e008      	b.n	8009cfe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cec:	f7fa f818 	bl	8003d20 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d901      	bls.n	8009cfe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009cfa:	2303      	movs	r3, #3
 8009cfc:	e2fe      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cfe:	4b27      	ldr	r3, [pc, #156]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0f0      	beq.n	8009cec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d0a:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	061b      	lsls	r3, r3, #24
 8009d18:	4920      	ldr	r1, [pc, #128]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d1e:	e045      	b.n	8009dac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d026      	beq.n	8009d76 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d28:	4b1c      	ldr	r3, [pc, #112]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f023 0219 	bic.w	r2, r3, #25
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	4919      	ldr	r1, [pc, #100]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d3a:	f7f9 fff1 	bl	8003d20 <HAL_GetTick>
 8009d3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d40:	e008      	b.n	8009d54 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d42:	f7f9 ffed 	bl	8003d20 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e2d3      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d54:	4b11      	ldr	r3, [pc, #68]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d0f0      	beq.n	8009d42 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d60:	4b0e      	ldr	r3, [pc, #56]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	691b      	ldr	r3, [r3, #16]
 8009d6c:	061b      	lsls	r3, r3, #24
 8009d6e:	490b      	ldr	r1, [pc, #44]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d70:	4313      	orrs	r3, r2
 8009d72:	604b      	str	r3, [r1, #4]
 8009d74:	e01a      	b.n	8009dac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d76:	4b09      	ldr	r3, [pc, #36]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a08      	ldr	r2, [pc, #32]	; (8009d9c <HAL_RCC_OscConfig+0x244>)
 8009d7c:	f023 0301 	bic.w	r3, r3, #1
 8009d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d82:	f7f9 ffcd 	bl	8003d20 <HAL_GetTick>
 8009d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d88:	e00a      	b.n	8009da0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d8a:	f7f9 ffc9 	bl	8003d20 <HAL_GetTick>
 8009d8e:	4602      	mov	r2, r0
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	1ad3      	subs	r3, r2, r3
 8009d94:	2b02      	cmp	r3, #2
 8009d96:	d903      	bls.n	8009da0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	e2af      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
 8009d9c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009da0:	4b96      	ldr	r3, [pc, #600]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f003 0304 	and.w	r3, r3, #4
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d1ee      	bne.n	8009d8a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0310 	and.w	r3, r3, #16
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d06a      	beq.n	8009e8e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009db8:	4b90      	ldr	r3, [pc, #576]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dc0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dc2:	4b8e      	ldr	r3, [pc, #568]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dc6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2b08      	cmp	r3, #8
 8009dcc:	d007      	beq.n	8009dde <HAL_RCC_OscConfig+0x286>
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	2b18      	cmp	r3, #24
 8009dd2:	d11b      	bne.n	8009e0c <HAL_RCC_OscConfig+0x2b4>
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f003 0303 	and.w	r3, r3, #3
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d116      	bne.n	8009e0c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dde:	4b87      	ldr	r3, [pc, #540]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d005      	beq.n	8009df6 <HAL_RCC_OscConfig+0x29e>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d001      	beq.n	8009df6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e282      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009df6:	4b81      	ldr	r3, [pc, #516]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	061b      	lsls	r3, r3, #24
 8009e04:	497d      	ldr	r1, [pc, #500]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e0a:	e040      	b.n	8009e8e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	69db      	ldr	r3, [r3, #28]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d023      	beq.n	8009e5c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e14:	4b79      	ldr	r3, [pc, #484]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a78      	ldr	r2, [pc, #480]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e20:	f7f9 ff7e 	bl	8003d20 <HAL_GetTick>
 8009e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e28:	f7f9 ff7a 	bl	8003d20 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e260      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e3a:	4b70      	ldr	r3, [pc, #448]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d0f0      	beq.n	8009e28 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e46:	4b6d      	ldr	r3, [pc, #436]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6a1b      	ldr	r3, [r3, #32]
 8009e52:	061b      	lsls	r3, r3, #24
 8009e54:	4969      	ldr	r1, [pc, #420]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60cb      	str	r3, [r1, #12]
 8009e5a:	e018      	b.n	8009e8e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e5c:	4b67      	ldr	r3, [pc, #412]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a66      	ldr	r2, [pc, #408]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e68:	f7f9 ff5a 	bl	8003d20 <HAL_GetTick>
 8009e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e6e:	e008      	b.n	8009e82 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e70:	f7f9 ff56 	bl	8003d20 <HAL_GetTick>
 8009e74:	4602      	mov	r2, r0
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	2b02      	cmp	r3, #2
 8009e7c:	d901      	bls.n	8009e82 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e23c      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e82:	4b5e      	ldr	r3, [pc, #376]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f0      	bne.n	8009e70 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0308 	and.w	r3, r3, #8
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d036      	beq.n	8009f08 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d019      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ea2:	4b56      	ldr	r3, [pc, #344]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ea6:	4a55      	ldr	r2, [pc, #340]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009eae:	f7f9 ff37 	bl	8003d20 <HAL_GetTick>
 8009eb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eb4:	e008      	b.n	8009ec8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eb6:	f7f9 ff33 	bl	8003d20 <HAL_GetTick>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebe:	1ad3      	subs	r3, r2, r3
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d901      	bls.n	8009ec8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e219      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ec8:	4b4c      	ldr	r3, [pc, #304]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d0f0      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x35e>
 8009ed4:	e018      	b.n	8009f08 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ed6:	4b49      	ldr	r3, [pc, #292]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eda:	4a48      	ldr	r2, [pc, #288]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009edc:	f023 0301 	bic.w	r3, r3, #1
 8009ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ee2:	f7f9 ff1d 	bl	8003d20 <HAL_GetTick>
 8009ee6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ee8:	e008      	b.n	8009efc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eea:	f7f9 ff19 	bl	8003d20 <HAL_GetTick>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	1ad3      	subs	r3, r2, r3
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d901      	bls.n	8009efc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	e1ff      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009efc:	4b3f      	ldr	r3, [pc, #252]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f00:	f003 0302 	and.w	r3, r3, #2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d1f0      	bne.n	8009eea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 0320 	and.w	r3, r3, #32
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d036      	beq.n	8009f82 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d019      	beq.n	8009f50 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f1c:	4b37      	ldr	r3, [pc, #220]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a36      	ldr	r2, [pc, #216]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f26:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f28:	f7f9 fefa 	bl	8003d20 <HAL_GetTick>
 8009f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f2e:	e008      	b.n	8009f42 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f30:	f7f9 fef6 	bl	8003d20 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e1dc      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f42:	4b2e      	ldr	r3, [pc, #184]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x3d8>
 8009f4e:	e018      	b.n	8009f82 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f50:	4b2a      	ldr	r3, [pc, #168]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a29      	ldr	r2, [pc, #164]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f5c:	f7f9 fee0 	bl	8003d20 <HAL_GetTick>
 8009f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f64:	f7f9 fedc 	bl	8003d20 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e1c2      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f76:	4b21      	ldr	r3, [pc, #132]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f0      	bne.n	8009f64 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0304 	and.w	r3, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8086 	beq.w	800a09c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f90:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <HAL_RCC_OscConfig+0x4a8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a1a      	ldr	r2, [pc, #104]	; (800a000 <HAL_RCC_OscConfig+0x4a8>)
 8009f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f9c:	f7f9 fec0 	bl	8003d20 <HAL_GetTick>
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fa4:	f7f9 febc 	bl	8003d20 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b64      	cmp	r3, #100	; 0x64
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e1a2      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb6:	4b12      	ldr	r3, [pc, #72]	; (800a000 <HAL_RCC_OscConfig+0x4a8>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d0f0      	beq.n	8009fa4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d106      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x480>
 8009fca:	4b0c      	ldr	r3, [pc, #48]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fce:	4a0b      	ldr	r2, [pc, #44]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009fd0:	f043 0301 	orr.w	r3, r3, #1
 8009fd4:	6713      	str	r3, [r2, #112]	; 0x70
 8009fd6:	e032      	b.n	800a03e <HAL_RCC_OscConfig+0x4e6>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d111      	bne.n	800a004 <HAL_RCC_OscConfig+0x4ac>
 8009fe0:	4b06      	ldr	r3, [pc, #24]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe4:	4a05      	ldr	r2, [pc, #20]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009fe6:	f023 0301 	bic.w	r3, r3, #1
 8009fea:	6713      	str	r3, [r2, #112]	; 0x70
 8009fec:	4b03      	ldr	r3, [pc, #12]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff0:	4a02      	ldr	r2, [pc, #8]	; (8009ffc <HAL_RCC_OscConfig+0x4a4>)
 8009ff2:	f023 0304 	bic.w	r3, r3, #4
 8009ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ff8:	e021      	b.n	800a03e <HAL_RCC_OscConfig+0x4e6>
 8009ffa:	bf00      	nop
 8009ffc:	58024400 	.word	0x58024400
 800a000:	58024800 	.word	0x58024800
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	2b05      	cmp	r3, #5
 800a00a:	d10c      	bne.n	800a026 <HAL_RCC_OscConfig+0x4ce>
 800a00c:	4b83      	ldr	r3, [pc, #524]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a010:	4a82      	ldr	r2, [pc, #520]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a012:	f043 0304 	orr.w	r3, r3, #4
 800a016:	6713      	str	r3, [r2, #112]	; 0x70
 800a018:	4b80      	ldr	r3, [pc, #512]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a01a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01c:	4a7f      	ldr	r2, [pc, #508]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	6713      	str	r3, [r2, #112]	; 0x70
 800a024:	e00b      	b.n	800a03e <HAL_RCC_OscConfig+0x4e6>
 800a026:	4b7d      	ldr	r3, [pc, #500]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02a:	4a7c      	ldr	r2, [pc, #496]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	6713      	str	r3, [r2, #112]	; 0x70
 800a032:	4b7a      	ldr	r3, [pc, #488]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	4a79      	ldr	r2, [pc, #484]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a038:	f023 0304 	bic.w	r3, r3, #4
 800a03c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d015      	beq.n	800a072 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a046:	f7f9 fe6b 	bl	8003d20 <HAL_GetTick>
 800a04a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a04c:	e00a      	b.n	800a064 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a04e:	f7f9 fe67 	bl	8003d20 <HAL_GetTick>
 800a052:	4602      	mov	r2, r0
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	1ad3      	subs	r3, r2, r3
 800a058:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d901      	bls.n	800a064 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a060:	2303      	movs	r3, #3
 800a062:	e14b      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a064:	4b6d      	ldr	r3, [pc, #436]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d0ee      	beq.n	800a04e <HAL_RCC_OscConfig+0x4f6>
 800a070:	e014      	b.n	800a09c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a072:	f7f9 fe55 	bl	8003d20 <HAL_GetTick>
 800a076:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a078:	e00a      	b.n	800a090 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a07a:	f7f9 fe51 	bl	8003d20 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	f241 3288 	movw	r2, #5000	; 0x1388
 800a088:	4293      	cmp	r3, r2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e135      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a090:	4b62      	ldr	r3, [pc, #392]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1ee      	bne.n	800a07a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 812a 	beq.w	800a2fa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0a6:	4b5d      	ldr	r3, [pc, #372]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0ae:	2b18      	cmp	r3, #24
 800a0b0:	f000 80ba 	beq.w	800a228 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	f040 8095 	bne.w	800a1e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0be:	4b57      	ldr	r3, [pc, #348]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a56      	ldr	r2, [pc, #344]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a0c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ca:	f7f9 fe29 	bl	8003d20 <HAL_GetTick>
 800a0ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0d0:	e008      	b.n	800a0e4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0d2:	f7f9 fe25 	bl	8003d20 <HAL_GetTick>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d901      	bls.n	800a0e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e10b      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0e4:	4b4d      	ldr	r3, [pc, #308]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1f0      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0f0:	4b4a      	ldr	r3, [pc, #296]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a0f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0f4:	4b4a      	ldr	r3, [pc, #296]	; (800a220 <HAL_RCC_OscConfig+0x6c8>)
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	687a      	ldr	r2, [r7, #4]
 800a0fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a100:	0112      	lsls	r2, r2, #4
 800a102:	430a      	orrs	r2, r1
 800a104:	4945      	ldr	r1, [pc, #276]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a106:	4313      	orrs	r3, r2
 800a108:	628b      	str	r3, [r1, #40]	; 0x28
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10e:	3b01      	subs	r3, #1
 800a110:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a118:	3b01      	subs	r3, #1
 800a11a:	025b      	lsls	r3, r3, #9
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	431a      	orrs	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a124:	3b01      	subs	r3, #1
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a12c:	431a      	orrs	r2, r3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a132:	3b01      	subs	r3, #1
 800a134:	061b      	lsls	r3, r3, #24
 800a136:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a13a:	4938      	ldr	r1, [pc, #224]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a140:	4b36      	ldr	r3, [pc, #216]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	4a35      	ldr	r2, [pc, #212]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a146:	f023 0301 	bic.w	r3, r3, #1
 800a14a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a14c:	4b33      	ldr	r3, [pc, #204]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a150:	4b34      	ldr	r3, [pc, #208]	; (800a224 <HAL_RCC_OscConfig+0x6cc>)
 800a152:	4013      	ands	r3, r2
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a158:	00d2      	lsls	r2, r2, #3
 800a15a:	4930      	ldr	r1, [pc, #192]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a160:	4b2e      	ldr	r3, [pc, #184]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	f023 020c 	bic.w	r2, r3, #12
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16c:	492b      	ldr	r1, [pc, #172]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a172:	4b2a      	ldr	r3, [pc, #168]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a176:	f023 0202 	bic.w	r2, r3, #2
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	4927      	ldr	r1, [pc, #156]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a180:	4313      	orrs	r3, r2
 800a182:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a184:	4b25      	ldr	r3, [pc, #148]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	4a24      	ldr	r2, [pc, #144]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a18a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a18e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a190:	4b22      	ldr	r3, [pc, #136]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a194:	4a21      	ldr	r2, [pc, #132]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a19a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a19c:	4b1f      	ldr	r3, [pc, #124]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	4a1e      	ldr	r2, [pc, #120]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a1a8:	4b1c      	ldr	r3, [pc, #112]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	4a1b      	ldr	r2, [pc, #108]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1b4:	4b19      	ldr	r3, [pc, #100]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a18      	ldr	r2, [pc, #96]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c0:	f7f9 fdae 	bl	8003d20 <HAL_GetTick>
 800a1c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1c6:	e008      	b.n	800a1da <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1c8:	f7f9 fdaa 	bl	8003d20 <HAL_GetTick>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d901      	bls.n	800a1da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e090      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1da:	4b10      	ldr	r3, [pc, #64]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d0f0      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x670>
 800a1e6:	e088      	b.n	800a2fa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1e8:	4b0c      	ldr	r3, [pc, #48]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a0b      	ldr	r2, [pc, #44]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a1ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f4:	f7f9 fd94 	bl	8003d20 <HAL_GetTick>
 800a1f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1fa:	e008      	b.n	800a20e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1fc:	f7f9 fd90 	bl	8003d20 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e076      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a20e:	4b03      	ldr	r3, [pc, #12]	; (800a21c <HAL_RCC_OscConfig+0x6c4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d1f0      	bne.n	800a1fc <HAL_RCC_OscConfig+0x6a4>
 800a21a:	e06e      	b.n	800a2fa <HAL_RCC_OscConfig+0x7a2>
 800a21c:	58024400 	.word	0x58024400
 800a220:	fffffc0c 	.word	0xfffffc0c
 800a224:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a228:	4b36      	ldr	r3, [pc, #216]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a22c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a22e:	4b35      	ldr	r3, [pc, #212]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a232:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d031      	beq.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f003 0203 	and.w	r2, r3, #3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a246:	429a      	cmp	r2, r3
 800a248:	d12a      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	091b      	lsrs	r3, r3, #4
 800a24e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a256:	429a      	cmp	r2, r3
 800a258:	d122      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a264:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a266:	429a      	cmp	r2, r3
 800a268:	d11a      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	0a5b      	lsrs	r3, r3, #9
 800a26e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a276:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a278:	429a      	cmp	r2, r3
 800a27a:	d111      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	0c1b      	lsrs	r3, r3, #16
 800a280:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d108      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	0e1b      	lsrs	r3, r3, #24
 800a292:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d001      	beq.n	800a2a4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e02b      	b.n	800a2fc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a2a4:	4b17      	ldr	r3, [pc, #92]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a8:	08db      	lsrs	r3, r3, #3
 800a2aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d01f      	beq.n	800a2fa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2ba:	4b12      	ldr	r3, [pc, #72]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2be:	4a11      	ldr	r2, [pc, #68]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2c6:	f7f9 fd2b 	bl	8003d20 <HAL_GetTick>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2cc:	bf00      	nop
 800a2ce:	f7f9 fd27 	bl	8003d20 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d0f9      	beq.n	800a2ce <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2da:	4b0a      	ldr	r3, [pc, #40]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2de:	4b0a      	ldr	r3, [pc, #40]	; (800a308 <HAL_RCC_OscConfig+0x7b0>)
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	687a      	ldr	r2, [r7, #4]
 800a2e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2e6:	00d2      	lsls	r2, r2, #3
 800a2e8:	4906      	ldr	r1, [pc, #24]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a2ee:	4b05      	ldr	r3, [pc, #20]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f2:	4a04      	ldr	r2, [pc, #16]	; (800a304 <HAL_RCC_OscConfig+0x7ac>)
 800a2f4:	f043 0301 	orr.w	r3, r3, #1
 800a2f8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3730      	adds	r7, #48	; 0x30
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	58024400 	.word	0x58024400
 800a308:	ffff0007 	.word	0xffff0007

0800a30c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d101      	bne.n	800a320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e19c      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a320:	4b8a      	ldr	r3, [pc, #552]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d910      	bls.n	800a350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a32e:	4b87      	ldr	r3, [pc, #540]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f023 020f 	bic.w	r2, r3, #15
 800a336:	4985      	ldr	r1, [pc, #532]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a33e:	4b83      	ldr	r3, [pc, #524]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 030f 	and.w	r3, r3, #15
 800a346:	683a      	ldr	r2, [r7, #0]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d001      	beq.n	800a350 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e184      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0304 	and.w	r3, r3, #4
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d010      	beq.n	800a37e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691a      	ldr	r2, [r3, #16]
 800a360:	4b7b      	ldr	r3, [pc, #492]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a362:	699b      	ldr	r3, [r3, #24]
 800a364:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a368:	429a      	cmp	r2, r3
 800a36a:	d908      	bls.n	800a37e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a36c:	4b78      	ldr	r3, [pc, #480]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	691b      	ldr	r3, [r3, #16]
 800a378:	4975      	ldr	r1, [pc, #468]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a37a:	4313      	orrs	r3, r2
 800a37c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f003 0308 	and.w	r3, r3, #8
 800a386:	2b00      	cmp	r3, #0
 800a388:	d010      	beq.n	800a3ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	695a      	ldr	r2, [r3, #20]
 800a38e:	4b70      	ldr	r3, [pc, #448]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a390:	69db      	ldr	r3, [r3, #28]
 800a392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a396:	429a      	cmp	r2, r3
 800a398:	d908      	bls.n	800a3ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a39a:	4b6d      	ldr	r3, [pc, #436]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	496a      	ldr	r1, [pc, #424]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 0310 	and.w	r3, r3, #16
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d010      	beq.n	800a3da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	699a      	ldr	r2, [r3, #24]
 800a3bc:	4b64      	ldr	r3, [pc, #400]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d908      	bls.n	800a3da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3c8:	4b61      	ldr	r3, [pc, #388]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3ca:	69db      	ldr	r3, [r3, #28]
 800a3cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	495e      	ldr	r1, [pc, #376]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0320 	and.w	r3, r3, #32
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d010      	beq.n	800a408 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69da      	ldr	r2, [r3, #28]
 800a3ea:	4b59      	ldr	r3, [pc, #356]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3ec:	6a1b      	ldr	r3, [r3, #32]
 800a3ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d908      	bls.n	800a408 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3f6:	4b56      	ldr	r3, [pc, #344]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a3f8:	6a1b      	ldr	r3, [r3, #32]
 800a3fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	69db      	ldr	r3, [r3, #28]
 800a402:	4953      	ldr	r1, [pc, #332]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a404:	4313      	orrs	r3, r2
 800a406:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0302 	and.w	r3, r3, #2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d010      	beq.n	800a436 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68da      	ldr	r2, [r3, #12]
 800a418:	4b4d      	ldr	r3, [pc, #308]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	429a      	cmp	r2, r3
 800a422:	d908      	bls.n	800a436 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a424:	4b4a      	ldr	r3, [pc, #296]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a426:	699b      	ldr	r3, [r3, #24]
 800a428:	f023 020f 	bic.w	r2, r3, #15
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	4947      	ldr	r1, [pc, #284]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a432:	4313      	orrs	r3, r2
 800a434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d055      	beq.n	800a4ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a442:	4b43      	ldr	r3, [pc, #268]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	4940      	ldr	r1, [pc, #256]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a450:	4313      	orrs	r3, r2
 800a452:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d107      	bne.n	800a46c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a45c:	4b3c      	ldr	r3, [pc, #240]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a464:	2b00      	cmp	r3, #0
 800a466:	d121      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a468:	2301      	movs	r3, #1
 800a46a:	e0f6      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	2b03      	cmp	r3, #3
 800a472:	d107      	bne.n	800a484 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a474:	4b36      	ldr	r3, [pc, #216]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d115      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e0ea      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d107      	bne.n	800a49c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a48c:	4b30      	ldr	r3, [pc, #192]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a494:	2b00      	cmp	r3, #0
 800a496:	d109      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e0de      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a49c:	4b2c      	ldr	r3, [pc, #176]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e0d6      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4ac:	4b28      	ldr	r3, [pc, #160]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a4ae:	691b      	ldr	r3, [r3, #16]
 800a4b0:	f023 0207 	bic.w	r2, r3, #7
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4925      	ldr	r1, [pc, #148]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4be:	f7f9 fc2f 	bl	8003d20 <HAL_GetTick>
 800a4c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4c4:	e00a      	b.n	800a4dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4c6:	f7f9 fc2b 	bl	8003d20 <HAL_GetTick>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	1ad3      	subs	r3, r2, r3
 800a4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d901      	bls.n	800a4dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a4d8:	2303      	movs	r3, #3
 800a4da:	e0be      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4dc:	4b1c      	ldr	r3, [pc, #112]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d1eb      	bne.n	800a4c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f003 0302 	and.w	r3, r3, #2
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d010      	beq.n	800a51c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	4b14      	ldr	r3, [pc, #80]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	f003 030f 	and.w	r3, r3, #15
 800a506:	429a      	cmp	r2, r3
 800a508:	d208      	bcs.n	800a51c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	f023 020f 	bic.w	r2, r3, #15
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	490e      	ldr	r1, [pc, #56]	; (800a550 <HAL_RCC_ClockConfig+0x244>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a51c:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 030f 	and.w	r3, r3, #15
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d214      	bcs.n	800a554 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a52a:	4b08      	ldr	r3, [pc, #32]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f023 020f 	bic.w	r2, r3, #15
 800a532:	4906      	ldr	r1, [pc, #24]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	4313      	orrs	r3, r2
 800a538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a53a:	4b04      	ldr	r3, [pc, #16]	; (800a54c <HAL_RCC_ClockConfig+0x240>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d005      	beq.n	800a554 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e086      	b.n	800a65a <HAL_RCC_ClockConfig+0x34e>
 800a54c:	52002000 	.word	0x52002000
 800a550:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f003 0304 	and.w	r3, r3, #4
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d010      	beq.n	800a582 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	4b3f      	ldr	r3, [pc, #252]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d208      	bcs.n	800a582 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a570:	4b3c      	ldr	r3, [pc, #240]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	691b      	ldr	r3, [r3, #16]
 800a57c:	4939      	ldr	r1, [pc, #228]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	f003 0308 	and.w	r3, r3, #8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d010      	beq.n	800a5b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	695a      	ldr	r2, [r3, #20]
 800a592:	4b34      	ldr	r3, [pc, #208]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d208      	bcs.n	800a5b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a59e:	4b31      	ldr	r3, [pc, #196]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5a0:	69db      	ldr	r3, [r3, #28]
 800a5a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	492e      	ldr	r1, [pc, #184]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0310 	and.w	r3, r3, #16
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d010      	beq.n	800a5de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	699a      	ldr	r2, [r3, #24]
 800a5c0:	4b28      	ldr	r3, [pc, #160]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5c2:	69db      	ldr	r3, [r3, #28]
 800a5c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d208      	bcs.n	800a5de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5cc:	4b25      	ldr	r3, [pc, #148]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5ce:	69db      	ldr	r3, [r3, #28]
 800a5d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	699b      	ldr	r3, [r3, #24]
 800a5d8:	4922      	ldr	r1, [pc, #136]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f003 0320 	and.w	r3, r3, #32
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d010      	beq.n	800a60c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	69da      	ldr	r2, [r3, #28]
 800a5ee:	4b1d      	ldr	r3, [pc, #116]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5f0:	6a1b      	ldr	r3, [r3, #32]
 800a5f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d208      	bcs.n	800a60c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5fa:	4b1a      	ldr	r3, [pc, #104]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	4917      	ldr	r1, [pc, #92]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a60c:	f000 f89e 	bl	800a74c <HAL_RCC_GetSysClockFreq>
 800a610:	4602      	mov	r2, r0
 800a612:	4b14      	ldr	r3, [pc, #80]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	0a1b      	lsrs	r3, r3, #8
 800a618:	f003 030f 	and.w	r3, r3, #15
 800a61c:	4912      	ldr	r1, [pc, #72]	; (800a668 <HAL_RCC_ClockConfig+0x35c>)
 800a61e:	5ccb      	ldrb	r3, [r1, r3]
 800a620:	f003 031f 	and.w	r3, r3, #31
 800a624:	fa22 f303 	lsr.w	r3, r2, r3
 800a628:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a62a:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <HAL_RCC_ClockConfig+0x358>)
 800a62c:	699b      	ldr	r3, [r3, #24]
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	4a0d      	ldr	r2, [pc, #52]	; (800a668 <HAL_RCC_ClockConfig+0x35c>)
 800a634:	5cd3      	ldrb	r3, [r2, r3]
 800a636:	f003 031f 	and.w	r3, r3, #31
 800a63a:	693a      	ldr	r2, [r7, #16]
 800a63c:	fa22 f303 	lsr.w	r3, r2, r3
 800a640:	4a0a      	ldr	r2, [pc, #40]	; (800a66c <HAL_RCC_ClockConfig+0x360>)
 800a642:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a644:	4a0a      	ldr	r2, [pc, #40]	; (800a670 <HAL_RCC_ClockConfig+0x364>)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a64a:	4b0a      	ldr	r3, [pc, #40]	; (800a674 <HAL_RCC_ClockConfig+0x368>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4618      	mov	r0, r3
 800a650:	f7f9 fb1c 	bl	8003c8c <HAL_InitTick>
 800a654:	4603      	mov	r3, r0
 800a656:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	58024400 	.word	0x58024400
 800a668:	08018c2c 	.word	0x08018c2c
 800a66c:	24000004 	.word	0x24000004
 800a670:	24000000 	.word	0x24000000
 800a674:	24000008 	.word	0x24000008

0800a678 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b08c      	sub	sp, #48	; 0x30
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d12a      	bne.n	800a6e0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a68a:	4b2d      	ldr	r3, [pc, #180]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a68c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a690:	4a2b      	ldr	r2, [pc, #172]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a692:	f043 0301 	orr.w	r3, r3, #1
 800a696:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a69a:	4b29      	ldr	r3, [pc, #164]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a69c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a6ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a6be:	f107 031c 	add.w	r3, r7, #28
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	481f      	ldr	r0, [pc, #124]	; (800a744 <HAL_RCC_MCOConfig+0xcc>)
 800a6c6:	f7fd fc29 	bl	8007f1c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a6ca:	4b1d      	ldr	r3, [pc, #116]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a6d2:	68b9      	ldr	r1, [r7, #8]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	430b      	orrs	r3, r1
 800a6d8:	4919      	ldr	r1, [pc, #100]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a6de:	e02a      	b.n	800a736 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a6e0:	4b17      	ldr	r3, [pc, #92]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6e6:	4a16      	ldr	r2, [pc, #88]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a6e8:	f043 0304 	orr.w	r3, r3, #4
 800a6ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6f0:	4b13      	ldr	r3, [pc, #76]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a6f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	617b      	str	r3, [r7, #20]
 800a6fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a6fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a704:	2302      	movs	r3, #2
 800a706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a708:	2303      	movs	r3, #3
 800a70a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	2300      	movs	r3, #0
 800a70e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a710:	2300      	movs	r3, #0
 800a712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a714:	f107 031c 	add.w	r3, r7, #28
 800a718:	4619      	mov	r1, r3
 800a71a:	480b      	ldr	r0, [pc, #44]	; (800a748 <HAL_RCC_MCOConfig+0xd0>)
 800a71c:	f7fd fbfe 	bl	8007f1c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a720:	4b07      	ldr	r3, [pc, #28]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a722:	691b      	ldr	r3, [r3, #16]
 800a724:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	01d9      	lsls	r1, r3, #7
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	430b      	orrs	r3, r1
 800a730:	4903      	ldr	r1, [pc, #12]	; (800a740 <HAL_RCC_MCOConfig+0xc8>)
 800a732:	4313      	orrs	r3, r2
 800a734:	610b      	str	r3, [r1, #16]
}
 800a736:	bf00      	nop
 800a738:	3730      	adds	r7, #48	; 0x30
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	58024400 	.word	0x58024400
 800a744:	58020000 	.word	0x58020000
 800a748:	58020800 	.word	0x58020800

0800a74c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b089      	sub	sp, #36	; 0x24
 800a750:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a752:	4bb3      	ldr	r3, [pc, #716]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a754:	691b      	ldr	r3, [r3, #16]
 800a756:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a75a:	2b18      	cmp	r3, #24
 800a75c:	f200 8155 	bhi.w	800aa0a <HAL_RCC_GetSysClockFreq+0x2be>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a7cd 	.word	0x0800a7cd
 800a76c:	0800aa0b 	.word	0x0800aa0b
 800a770:	0800aa0b 	.word	0x0800aa0b
 800a774:	0800aa0b 	.word	0x0800aa0b
 800a778:	0800aa0b 	.word	0x0800aa0b
 800a77c:	0800aa0b 	.word	0x0800aa0b
 800a780:	0800aa0b 	.word	0x0800aa0b
 800a784:	0800aa0b 	.word	0x0800aa0b
 800a788:	0800a7f3 	.word	0x0800a7f3
 800a78c:	0800aa0b 	.word	0x0800aa0b
 800a790:	0800aa0b 	.word	0x0800aa0b
 800a794:	0800aa0b 	.word	0x0800aa0b
 800a798:	0800aa0b 	.word	0x0800aa0b
 800a79c:	0800aa0b 	.word	0x0800aa0b
 800a7a0:	0800aa0b 	.word	0x0800aa0b
 800a7a4:	0800aa0b 	.word	0x0800aa0b
 800a7a8:	0800a7f9 	.word	0x0800a7f9
 800a7ac:	0800aa0b 	.word	0x0800aa0b
 800a7b0:	0800aa0b 	.word	0x0800aa0b
 800a7b4:	0800aa0b 	.word	0x0800aa0b
 800a7b8:	0800aa0b 	.word	0x0800aa0b
 800a7bc:	0800aa0b 	.word	0x0800aa0b
 800a7c0:	0800aa0b 	.word	0x0800aa0b
 800a7c4:	0800aa0b 	.word	0x0800aa0b
 800a7c8:	0800a7ff 	.word	0x0800a7ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7cc:	4b94      	ldr	r3, [pc, #592]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0320 	and.w	r3, r3, #32
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d009      	beq.n	800a7ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7d8:	4b91      	ldr	r3, [pc, #580]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	08db      	lsrs	r3, r3, #3
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	4a90      	ldr	r2, [pc, #576]	; (800aa24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a7ea:	e111      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a7ec:	4b8d      	ldr	r3, [pc, #564]	; (800aa24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7ee:	61bb      	str	r3, [r7, #24]
      break;
 800a7f0:	e10e      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a7f2:	4b8d      	ldr	r3, [pc, #564]	; (800aa28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7f4:	61bb      	str	r3, [r7, #24]
      break;
 800a7f6:	e10b      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a7f8:	4b8c      	ldr	r3, [pc, #560]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a7fa:	61bb      	str	r3, [r7, #24]
      break;
 800a7fc:	e108      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7fe:	4b88      	ldr	r3, [pc, #544]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	f003 0303 	and.w	r3, r3, #3
 800a806:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a808:	4b85      	ldr	r3, [pc, #532]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80c:	091b      	lsrs	r3, r3, #4
 800a80e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a812:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a814:	4b82      	ldr	r3, [pc, #520]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a81e:	4b80      	ldr	r3, [pc, #512]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a822:	08db      	lsrs	r3, r3, #3
 800a824:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	fb02 f303 	mul.w	r3, r2, r3
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	f000 80e1 	beq.w	800aa04 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b02      	cmp	r3, #2
 800a846:	f000 8083 	beq.w	800a950 <HAL_RCC_GetSysClockFreq+0x204>
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	f200 80a1 	bhi.w	800a994 <HAL_RCC_GetSysClockFreq+0x248>
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d003      	beq.n	800a860 <HAL_RCC_GetSysClockFreq+0x114>
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d056      	beq.n	800a90c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a85e:	e099      	b.n	800a994 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a860:	4b6f      	ldr	r3, [pc, #444]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0320 	and.w	r3, r3, #32
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d02d      	beq.n	800a8c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a86c:	4b6c      	ldr	r3, [pc, #432]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	08db      	lsrs	r3, r3, #3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	4a6b      	ldr	r2, [pc, #428]	; (800aa24 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a878:	fa22 f303 	lsr.w	r3, r2, r3
 800a87c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	ee07 3a90 	vmov	s15, r3
 800a884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a896:	4b62      	ldr	r3, [pc, #392]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a89e:	ee07 3a90 	vmov	s15, r3
 800a8a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aa30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a8c6:	e087      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	ee07 3a90 	vmov	s15, r3
 800a8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aa34 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a8d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8da:	4b51      	ldr	r3, [pc, #324]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8e2:	ee07 3a90 	vmov	s15, r3
 800a8e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aa30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a902:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a906:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a90a:	e065      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	ee07 3a90 	vmov	s15, r3
 800a912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a916:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aa38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a91a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a91e:	4b40      	ldr	r3, [pc, #256]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a926:	ee07 3a90 	vmov	s15, r3
 800a92a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a92e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a932:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aa30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a93a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a93e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a94a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a94e:	e043      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	ee07 3a90 	vmov	s15, r3
 800a956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a95a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aa3c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a95e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a962:	4b2f      	ldr	r3, [pc, #188]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	ee07 3a90 	vmov	s15, r3
 800a96e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a972:	ed97 6a02 	vldr	s12, [r7, #8]
 800a976:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aa30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a97a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a97e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a98a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a98e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a992:	e021      	b.n	800a9d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	ee07 3a90 	vmov	s15, r3
 800a99a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aa38 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a9a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9a6:	4b1e      	ldr	r3, [pc, #120]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ae:	ee07 3a90 	vmov	s15, r3
 800a9b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa30 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a9d8:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9dc:	0a5b      	lsrs	r3, r3, #9
 800a9de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	ee07 3a90 	vmov	s15, r3
 800a9ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9fc:	ee17 3a90 	vmov	r3, s15
 800aa00:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aa02:	e005      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aa04:	2300      	movs	r3, #0
 800aa06:	61bb      	str	r3, [r7, #24]
      break;
 800aa08:	e002      	b.n	800aa10 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aa0a:	4b07      	ldr	r3, [pc, #28]	; (800aa28 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aa0c:	61bb      	str	r3, [r7, #24]
      break;
 800aa0e:	bf00      	nop
  }

  return sysclockfreq;
 800aa10:	69bb      	ldr	r3, [r7, #24]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3724      	adds	r7, #36	; 0x24
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	58024400 	.word	0x58024400
 800aa24:	03d09000 	.word	0x03d09000
 800aa28:	003d0900 	.word	0x003d0900
 800aa2c:	02faf080 	.word	0x02faf080
 800aa30:	46000000 	.word	0x46000000
 800aa34:	4c742400 	.word	0x4c742400
 800aa38:	4a742400 	.word	0x4a742400
 800aa3c:	4c3ebc20 	.word	0x4c3ebc20

0800aa40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b082      	sub	sp, #8
 800aa44:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa46:	f7ff fe81 	bl	800a74c <HAL_RCC_GetSysClockFreq>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	4b10      	ldr	r3, [pc, #64]	; (800aa90 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	0a1b      	lsrs	r3, r3, #8
 800aa52:	f003 030f 	and.w	r3, r3, #15
 800aa56:	490f      	ldr	r1, [pc, #60]	; (800aa94 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa58:	5ccb      	ldrb	r3, [r1, r3]
 800aa5a:	f003 031f 	and.w	r3, r3, #31
 800aa5e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa62:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa64:	4b0a      	ldr	r3, [pc, #40]	; (800aa90 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa66:	699b      	ldr	r3, [r3, #24]
 800aa68:	f003 030f 	and.w	r3, r3, #15
 800aa6c:	4a09      	ldr	r2, [pc, #36]	; (800aa94 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa6e:	5cd3      	ldrb	r3, [r2, r3]
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7a:	4a07      	ldr	r2, [pc, #28]	; (800aa98 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa7c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa7e:	4a07      	ldr	r2, [pc, #28]	; (800aa9c <HAL_RCC_GetHCLKFreq+0x5c>)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aa84:	4b04      	ldr	r3, [pc, #16]	; (800aa98 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa86:	681b      	ldr	r3, [r3, #0]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	58024400 	.word	0x58024400
 800aa94:	08018c2c 	.word	0x08018c2c
 800aa98:	24000004 	.word	0x24000004
 800aa9c:	24000000 	.word	0x24000000

0800aaa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aaa4:	f7ff ffcc 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	4b06      	ldr	r3, [pc, #24]	; (800aac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	091b      	lsrs	r3, r3, #4
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	4904      	ldr	r1, [pc, #16]	; (800aac8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aab6:	5ccb      	ldrb	r3, [r1, r3]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	58024400 	.word	0x58024400
 800aac8:	08018c2c 	.word	0x08018c2c

0800aacc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aad0:	f7ff ffb6 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 800aad4:	4602      	mov	r2, r0
 800aad6:	4b06      	ldr	r3, [pc, #24]	; (800aaf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aad8:	69db      	ldr	r3, [r3, #28]
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	f003 0307 	and.w	r3, r3, #7
 800aae0:	4904      	ldr	r1, [pc, #16]	; (800aaf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aae2:	5ccb      	ldrb	r3, [r1, r3]
 800aae4:	f003 031f 	and.w	r3, r3, #31
 800aae8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	bd80      	pop	{r7, pc}
 800aaf0:	58024400 	.word	0x58024400
 800aaf4:	08018c2c 	.word	0x08018c2c

0800aaf8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aaf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aafc:	b0c6      	sub	sp, #280	; 0x118
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ab04:	2300      	movs	r3, #0
 800ab06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	ea54 0305 	orrs.w	r3, r4, r5
 800ab22:	d049      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ab24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab2e:	d02f      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ab30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab34:	d828      	bhi.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab3a:	d01a      	beq.n	800ab72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ab3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab40:	d822      	bhi.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ab46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab4a:	d007      	beq.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ab4c:	e01c      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab4e:	4bab      	ldr	r3, [pc, #684]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab52:	4aaa      	ldr	r2, [pc, #680]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab5a:	e01a      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab60:	3308      	adds	r3, #8
 800ab62:	2102      	movs	r1, #2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f002 fa49 	bl	800cffc <RCCEx_PLL2_Config>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab70:	e00f      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab76:	3328      	adds	r3, #40	; 0x28
 800ab78:	2102      	movs	r1, #2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f002 faf0 	bl	800d160 <RCCEx_PLL3_Config>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab86:	e004      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab8e:	e000      	b.n	800ab92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ab90:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab9a:	4b98      	ldr	r3, [pc, #608]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aba8:	4a94      	ldr	r2, [pc, #592]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abaa:	430b      	orrs	r3, r1
 800abac:	6513      	str	r3, [r2, #80]	; 0x50
 800abae:	e003      	b.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800abc4:	f04f 0900 	mov.w	r9, #0
 800abc8:	ea58 0309 	orrs.w	r3, r8, r9
 800abcc:	d047      	beq.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	d82a      	bhi.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800abd8:	a201      	add	r2, pc, #4	; (adr r2, 800abe0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800abda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abde:	bf00      	nop
 800abe0:	0800abf5 	.word	0x0800abf5
 800abe4:	0800ac03 	.word	0x0800ac03
 800abe8:	0800ac19 	.word	0x0800ac19
 800abec:	0800ac37 	.word	0x0800ac37
 800abf0:	0800ac37 	.word	0x0800ac37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abf4:	4b81      	ldr	r3, [pc, #516]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf8:	4a80      	ldr	r2, [pc, #512]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac00:	e01a      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac06:	3308      	adds	r3, #8
 800ac08:	2100      	movs	r1, #0
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f002 f9f6 	bl	800cffc <RCCEx_PLL2_Config>
 800ac10:	4603      	mov	r3, r0
 800ac12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac16:	e00f      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1c:	3328      	adds	r3, #40	; 0x28
 800ac1e:	2100      	movs	r1, #0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f002 fa9d 	bl	800d160 <RCCEx_PLL3_Config>
 800ac26:	4603      	mov	r3, r0
 800ac28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac2c:	e004      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac34:	e000      	b.n	800ac38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ac36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d10a      	bne.n	800ac56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac40:	4b6e      	ldr	r3, [pc, #440]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac44:	f023 0107 	bic.w	r1, r3, #7
 800ac48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4e:	4a6b      	ldr	r2, [pc, #428]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6513      	str	r3, [r2, #80]	; 0x50
 800ac54:	e003      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac66:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ac6a:	f04f 0b00 	mov.w	fp, #0
 800ac6e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ac72:	d05b      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac7c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ac80:	d03b      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ac82:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ac86:	d834      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac8c:	d037      	beq.n	800acfe <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ac8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac92:	d82e      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac98:	d033      	beq.n	800ad02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ac9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac9e:	d828      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aca4:	d01a      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800acaa:	d822      	bhi.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800acb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acb4:	d007      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800acb6:	e01c      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acb8:	4b50      	ldr	r3, [pc, #320]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	4a4f      	ldr	r2, [pc, #316]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acc4:	e01e      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	3308      	adds	r3, #8
 800accc:	2100      	movs	r1, #0
 800acce:	4618      	mov	r0, r3
 800acd0:	f002 f994 	bl	800cffc <RCCEx_PLL2_Config>
 800acd4:	4603      	mov	r3, r0
 800acd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acda:	e013      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace0:	3328      	adds	r3, #40	; 0x28
 800ace2:	2100      	movs	r1, #0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f002 fa3b 	bl	800d160 <RCCEx_PLL3_Config>
 800acea:	4603      	mov	r3, r0
 800acec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acf0:	e008      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800acf2:	2301      	movs	r3, #1
 800acf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800acf8:	e004      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800acfa:	bf00      	nop
 800acfc:	e002      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800acfe:	bf00      	nop
 800ad00:	e000      	b.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ad02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d10b      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ad0c:	4b3b      	ldr	r3, [pc, #236]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad10:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad1c:	4a37      	ldr	r2, [pc, #220]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	6593      	str	r3, [r2, #88]	; 0x58
 800ad22:	e003      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad46:	460b      	mov	r3, r1
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	d05d      	beq.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad54:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ad58:	d03b      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ad5a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ad5e:	d834      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad64:	d037      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ad66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad6a:	d82e      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad70:	d033      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ad72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad76:	d828      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad7c:	d01a      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ad7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad82:	d822      	bhi.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ad88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad8c:	d007      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ad8e:	e01c      	b.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad90:	4b1a      	ldr	r3, [pc, #104]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad94:	4a19      	ldr	r2, [pc, #100]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad9c:	e01e      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada2:	3308      	adds	r3, #8
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f002 f928 	bl	800cffc <RCCEx_PLL2_Config>
 800adac:	4603      	mov	r3, r0
 800adae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800adb2:	e013      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb8:	3328      	adds	r3, #40	; 0x28
 800adba:	2100      	movs	r1, #0
 800adbc:	4618      	mov	r0, r3
 800adbe:	f002 f9cf 	bl	800d160 <RCCEx_PLL3_Config>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adc8:	e008      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800add0:	e004      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800add2:	bf00      	nop
 800add4:	e002      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800add6:	bf00      	nop
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ade4:	4b05      	ldr	r3, [pc, #20]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ade6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adf4:	4a01      	ldr	r2, [pc, #4]	; (800adfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adf6:	430b      	orrs	r3, r1
 800adf8:	6593      	str	r3, [r2, #88]	; 0x58
 800adfa:	e005      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800adfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae14:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae1e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4313      	orrs	r3, r2
 800ae26:	d03a      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae2e:	2b30      	cmp	r3, #48	; 0x30
 800ae30:	d01f      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ae32:	2b30      	cmp	r3, #48	; 0x30
 800ae34:	d819      	bhi.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d00c      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d815      	bhi.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d019      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ae42:	2b10      	cmp	r3, #16
 800ae44:	d111      	bne.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae46:	4baa      	ldr	r3, [pc, #680]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	4aa9      	ldr	r2, [pc, #676]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ae52:	e011      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae58:	3308      	adds	r3, #8
 800ae5a:	2102      	movs	r1, #2
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f002 f8cd 	bl	800cffc <RCCEx_PLL2_Config>
 800ae62:	4603      	mov	r3, r0
 800ae64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ae68:	e006      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae70:	e002      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ae72:	bf00      	nop
 800ae74:	e000      	b.n	800ae78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ae76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae80:	4b9b      	ldr	r3, [pc, #620]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae84:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8e:	4a98      	ldr	r2, [pc, #608]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae90:	430b      	orrs	r3, r1
 800ae92:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae94:	e003      	b.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800aeaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aeb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aeb8:	460b      	mov	r3, r1
 800aeba:	4313      	orrs	r3, r2
 800aebc:	d051      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aec8:	d035      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800aeca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aece:	d82e      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aed0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aed4:	d031      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800aed6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeda:	d828      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aedc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee0:	d01a      	beq.n	800af18 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800aee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aee6:	d822      	bhi.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800aeec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aef0:	d007      	beq.n	800af02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800aef2:	e01c      	b.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aef4:	4b7e      	ldr	r3, [pc, #504]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef8:	4a7d      	ldr	r2, [pc, #500]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aefa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aefe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af00:	e01c      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af06:	3308      	adds	r3, #8
 800af08:	2100      	movs	r1, #0
 800af0a:	4618      	mov	r0, r3
 800af0c:	f002 f876 	bl	800cffc <RCCEx_PLL2_Config>
 800af10:	4603      	mov	r3, r0
 800af12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af16:	e011      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1c:	3328      	adds	r3, #40	; 0x28
 800af1e:	2100      	movs	r1, #0
 800af20:	4618      	mov	r0, r3
 800af22:	f002 f91d 	bl	800d160 <RCCEx_PLL3_Config>
 800af26:	4603      	mov	r3, r0
 800af28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af2c:	e006      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af2e:	2301      	movs	r3, #1
 800af30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af34:	e002      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af36:	bf00      	nop
 800af38:	e000      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10a      	bne.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af44:	4b6a      	ldr	r3, [pc, #424]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af52:	4a67      	ldr	r2, [pc, #412]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af54:	430b      	orrs	r3, r1
 800af56:	6513      	str	r3, [r2, #80]	; 0x50
 800af58:	e003      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800af6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af72:	2300      	movs	r3, #0
 800af74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4313      	orrs	r3, r2
 800af80:	d053      	beq.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af8c:	d033      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800af8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af92:	d82c      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af98:	d02f      	beq.n	800affa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800af9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af9e:	d826      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800afa0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afa4:	d02b      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800afa6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800afaa:	d820      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800afac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb0:	d012      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800afb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afb6:	d81a      	bhi.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d022      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800afbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc0:	d115      	bne.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc6:	3308      	adds	r3, #8
 800afc8:	2101      	movs	r1, #1
 800afca:	4618      	mov	r0, r3
 800afcc:	f002 f816 	bl	800cffc <RCCEx_PLL2_Config>
 800afd0:	4603      	mov	r3, r0
 800afd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afd6:	e015      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	3328      	adds	r3, #40	; 0x28
 800afde:	2101      	movs	r1, #1
 800afe0:	4618      	mov	r0, r3
 800afe2:	f002 f8bd 	bl	800d160 <RCCEx_PLL3_Config>
 800afe6:	4603      	mov	r3, r0
 800afe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afec:	e00a      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aff4:	e006      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aff6:	bf00      	nop
 800aff8:	e004      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800affa:	bf00      	nop
 800affc:	e002      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800affe:	bf00      	nop
 800b000:	e000      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b002:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b00c:	4b38      	ldr	r3, [pc, #224]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b010:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b01a:	4a35      	ldr	r2, [pc, #212]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b01c:	430b      	orrs	r3, r1
 800b01e:	6513      	str	r3, [r2, #80]	; 0x50
 800b020:	e003      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b026:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b03a:	2300      	movs	r3, #0
 800b03c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b040:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b044:	460b      	mov	r3, r1
 800b046:	4313      	orrs	r3, r2
 800b048:	d058      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b056:	d033      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b05c:	d82c      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b05e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b062:	d02f      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b068:	d826      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b06a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b06e:	d02b      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b074:	d820      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07a:	d012      	beq.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b080:	d81a      	bhi.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b082:	2b00      	cmp	r3, #0
 800b084:	d022      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b08a:	d115      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b090:	3308      	adds	r3, #8
 800b092:	2101      	movs	r1, #1
 800b094:	4618      	mov	r0, r3
 800b096:	f001 ffb1 	bl	800cffc <RCCEx_PLL2_Config>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0a0:	e015      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a6:	3328      	adds	r3, #40	; 0x28
 800b0a8:	2101      	movs	r1, #1
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f002 f858 	bl	800d160 <RCCEx_PLL3_Config>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0b6:	e00a      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0be:	e006      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0c0:	bf00      	nop
 800b0c2:	e004      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0c4:	bf00      	nop
 800b0c6:	e002      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0c8:	bf00      	nop
 800b0ca:	e000      	b.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10e      	bne.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0d6:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0e6:	4a02      	ldr	r2, [pc, #8]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6593      	str	r3, [r2, #88]	; 0x58
 800b0ec:	e006      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b0ee:	bf00      	nop
 800b0f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b104:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b10c:	2300      	movs	r3, #0
 800b10e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b112:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b116:	460b      	mov	r3, r1
 800b118:	4313      	orrs	r3, r2
 800b11a:	d037      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b122:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b126:	d00e      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b12c:	d816      	bhi.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d018      	beq.n	800b164 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b136:	d111      	bne.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b138:	4bc4      	ldr	r3, [pc, #784]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b13c:	4ac3      	ldr	r2, [pc, #780]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b13e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b144:	e00f      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b14a:	3308      	adds	r3, #8
 800b14c:	2101      	movs	r1, #1
 800b14e:	4618      	mov	r0, r3
 800b150:	f001 ff54 	bl	800cffc <RCCEx_PLL2_Config>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b15a:	e004      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b162:	e000      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b166:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10a      	bne.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b16e:	4bb7      	ldr	r3, [pc, #732]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b172:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b17c:	4ab3      	ldr	r2, [pc, #716]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b17e:	430b      	orrs	r3, r1
 800b180:	6513      	str	r3, [r2, #80]	; 0x50
 800b182:	e003      	b.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b184:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b188:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b19c:	2300      	movs	r3, #0
 800b19e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	d039      	beq.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d81c      	bhi.n	800b1f0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1f9 	.word	0x0800b1f9
 800b1c0:	0800b1cd 	.word	0x0800b1cd
 800b1c4:	0800b1db 	.word	0x0800b1db
 800b1c8:	0800b1f9 	.word	0x0800b1f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1cc:	4b9f      	ldr	r3, [pc, #636]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d0:	4a9e      	ldr	r2, [pc, #632]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1d8:	e00f      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1de:	3308      	adds	r3, #8
 800b1e0:	2102      	movs	r1, #2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f001 ff0a 	bl	800cffc <RCCEx_PLL2_Config>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1ee:	e004      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1f6:	e000      	b.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b1f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10a      	bne.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b202:	4b92      	ldr	r3, [pc, #584]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b206:	f023 0103 	bic.w	r1, r3, #3
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b210:	4a8e      	ldr	r2, [pc, #568]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b212:	430b      	orrs	r3, r1
 800b214:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b216:	e003      	b.n	800b220 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b21c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b228:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b22c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b230:	2300      	movs	r3, #0
 800b232:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b236:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4313      	orrs	r3, r2
 800b23e:	f000 8099 	beq.w	800b374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b242:	4b83      	ldr	r3, [pc, #524]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a82      	ldr	r2, [pc, #520]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b24c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b24e:	f7f8 fd67 	bl	8003d20 <HAL_GetTick>
 800b252:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b256:	e00b      	b.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b258:	f7f8 fd62 	bl	8003d20 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b64      	cmp	r3, #100	; 0x64
 800b266:	d903      	bls.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b26e:	e005      	b.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b270:	4b77      	ldr	r3, [pc, #476]	; (800b450 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d0ed      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b27c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b280:	2b00      	cmp	r3, #0
 800b282:	d173      	bne.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b284:	4b71      	ldr	r3, [pc, #452]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b286:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b290:	4053      	eors	r3, r2
 800b292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b296:	2b00      	cmp	r3, #0
 800b298:	d015      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b29a:	4b6c      	ldr	r3, [pc, #432]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b2a6:	4b69      	ldr	r3, [pc, #420]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2aa:	4a68      	ldr	r2, [pc, #416]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2b0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2b2:	4b66      	ldr	r3, [pc, #408]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b6:	4a65      	ldr	r2, [pc, #404]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2bc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b2be:	4a63      	ldr	r2, [pc, #396]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d2:	d118      	bne.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2d4:	f7f8 fd24 	bl	8003d20 <HAL_GetTick>
 800b2d8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2dc:	e00d      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2de:	f7f8 fd1f 	bl	8003d20 <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b2e8:	1ad2      	subs	r2, r2, r3
 800b2ea:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d903      	bls.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b2f8:	e005      	b.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2fa:	4b54      	ldr	r3, [pc, #336]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0eb      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b306:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d129      	bne.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b312:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b31e:	d10e      	bne.n	800b33e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b320:	4b4a      	ldr	r3, [pc, #296]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b32c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b330:	091a      	lsrs	r2, r3, #4
 800b332:	4b48      	ldr	r3, [pc, #288]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b334:	4013      	ands	r3, r2
 800b336:	4a45      	ldr	r2, [pc, #276]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b338:	430b      	orrs	r3, r1
 800b33a:	6113      	str	r3, [r2, #16]
 800b33c:	e005      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b33e:	4b43      	ldr	r3, [pc, #268]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b340:	691b      	ldr	r3, [r3, #16]
 800b342:	4a42      	ldr	r2, [pc, #264]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b344:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b348:	6113      	str	r3, [r2, #16]
 800b34a:	4b40      	ldr	r3, [pc, #256]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b34c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b35a:	4a3c      	ldr	r2, [pc, #240]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b35c:	430b      	orrs	r3, r1
 800b35e:	6713      	str	r3, [r2, #112]	; 0x70
 800b360:	e008      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b362:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b366:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b36a:	e003      	b.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b370:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b37c:	f002 0301 	and.w	r3, r2, #1
 800b380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b384:	2300      	movs	r3, #0
 800b386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b38a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b38e:	460b      	mov	r3, r1
 800b390:	4313      	orrs	r3, r2
 800b392:	f000 808f 	beq.w	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b39c:	2b28      	cmp	r3, #40	; 0x28
 800b39e:	d871      	bhi.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b3a0:	a201      	add	r2, pc, #4	; (adr r2, 800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b3a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a6:	bf00      	nop
 800b3a8:	0800b48d 	.word	0x0800b48d
 800b3ac:	0800b485 	.word	0x0800b485
 800b3b0:	0800b485 	.word	0x0800b485
 800b3b4:	0800b485 	.word	0x0800b485
 800b3b8:	0800b485 	.word	0x0800b485
 800b3bc:	0800b485 	.word	0x0800b485
 800b3c0:	0800b485 	.word	0x0800b485
 800b3c4:	0800b485 	.word	0x0800b485
 800b3c8:	0800b459 	.word	0x0800b459
 800b3cc:	0800b485 	.word	0x0800b485
 800b3d0:	0800b485 	.word	0x0800b485
 800b3d4:	0800b485 	.word	0x0800b485
 800b3d8:	0800b485 	.word	0x0800b485
 800b3dc:	0800b485 	.word	0x0800b485
 800b3e0:	0800b485 	.word	0x0800b485
 800b3e4:	0800b485 	.word	0x0800b485
 800b3e8:	0800b46f 	.word	0x0800b46f
 800b3ec:	0800b485 	.word	0x0800b485
 800b3f0:	0800b485 	.word	0x0800b485
 800b3f4:	0800b485 	.word	0x0800b485
 800b3f8:	0800b485 	.word	0x0800b485
 800b3fc:	0800b485 	.word	0x0800b485
 800b400:	0800b485 	.word	0x0800b485
 800b404:	0800b485 	.word	0x0800b485
 800b408:	0800b48d 	.word	0x0800b48d
 800b40c:	0800b485 	.word	0x0800b485
 800b410:	0800b485 	.word	0x0800b485
 800b414:	0800b485 	.word	0x0800b485
 800b418:	0800b485 	.word	0x0800b485
 800b41c:	0800b485 	.word	0x0800b485
 800b420:	0800b485 	.word	0x0800b485
 800b424:	0800b485 	.word	0x0800b485
 800b428:	0800b48d 	.word	0x0800b48d
 800b42c:	0800b485 	.word	0x0800b485
 800b430:	0800b485 	.word	0x0800b485
 800b434:	0800b485 	.word	0x0800b485
 800b438:	0800b485 	.word	0x0800b485
 800b43c:	0800b485 	.word	0x0800b485
 800b440:	0800b485 	.word	0x0800b485
 800b444:	0800b485 	.word	0x0800b485
 800b448:	0800b48d 	.word	0x0800b48d
 800b44c:	58024400 	.word	0x58024400
 800b450:	58024800 	.word	0x58024800
 800b454:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45c:	3308      	adds	r3, #8
 800b45e:	2101      	movs	r1, #1
 800b460:	4618      	mov	r0, r3
 800b462:	f001 fdcb 	bl	800cffc <RCCEx_PLL2_Config>
 800b466:	4603      	mov	r3, r0
 800b468:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b46c:	e00f      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b472:	3328      	adds	r3, #40	; 0x28
 800b474:	2101      	movs	r1, #1
 800b476:	4618      	mov	r0, r3
 800b478:	f001 fe72 	bl	800d160 <RCCEx_PLL3_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b482:	e004      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b48a:	e000      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b48c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b48e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b492:	2b00      	cmp	r3, #0
 800b494:	d10a      	bne.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b496:	4bbf      	ldr	r3, [pc, #764]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b49a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4a4:	4abb      	ldr	r2, [pc, #748]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4a6:	430b      	orrs	r3, r1
 800b4a8:	6553      	str	r3, [r2, #84]	; 0x54
 800b4aa:	e003      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4bc:	f002 0302 	and.w	r3, r2, #2
 800b4c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	d041      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	d824      	bhi.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b4de:	a201      	add	r2, pc, #4	; (adr r2, 800b4e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b4e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e4:	0800b531 	.word	0x0800b531
 800b4e8:	0800b4fd 	.word	0x0800b4fd
 800b4ec:	0800b513 	.word	0x0800b513
 800b4f0:	0800b531 	.word	0x0800b531
 800b4f4:	0800b531 	.word	0x0800b531
 800b4f8:	0800b531 	.word	0x0800b531
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b500:	3308      	adds	r3, #8
 800b502:	2101      	movs	r1, #1
 800b504:	4618      	mov	r0, r3
 800b506:	f001 fd79 	bl	800cffc <RCCEx_PLL2_Config>
 800b50a:	4603      	mov	r3, r0
 800b50c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b510:	e00f      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b516:	3328      	adds	r3, #40	; 0x28
 800b518:	2101      	movs	r1, #1
 800b51a:	4618      	mov	r0, r3
 800b51c:	f001 fe20 	bl	800d160 <RCCEx_PLL3_Config>
 800b520:	4603      	mov	r3, r0
 800b522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b526:	e004      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b52e:	e000      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b530:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b532:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b536:	2b00      	cmp	r3, #0
 800b538:	d10a      	bne.n	800b550 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b53a:	4b96      	ldr	r3, [pc, #600]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53e:	f023 0107 	bic.w	r1, r3, #7
 800b542:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b548:	4a92      	ldr	r2, [pc, #584]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b54a:	430b      	orrs	r3, r1
 800b54c:	6553      	str	r3, [r2, #84]	; 0x54
 800b54e:	e003      	b.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b550:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b554:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f002 0304 	and.w	r3, r2, #4
 800b564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b56e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b572:	460b      	mov	r3, r1
 800b574:	4313      	orrs	r3, r2
 800b576:	d044      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b580:	2b05      	cmp	r3, #5
 800b582:	d825      	bhi.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b584:	a201      	add	r2, pc, #4	; (adr r2, 800b58c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b5d9 	.word	0x0800b5d9
 800b590:	0800b5a5 	.word	0x0800b5a5
 800b594:	0800b5bb 	.word	0x0800b5bb
 800b598:	0800b5d9 	.word	0x0800b5d9
 800b59c:	0800b5d9 	.word	0x0800b5d9
 800b5a0:	0800b5d9 	.word	0x0800b5d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a8:	3308      	adds	r3, #8
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f001 fd25 	bl	800cffc <RCCEx_PLL2_Config>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5b8:	e00f      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5be:	3328      	adds	r3, #40	; 0x28
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 fdcc 	bl	800d160 <RCCEx_PLL3_Config>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5ce:	e004      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5d6:	e000      	b.n	800b5da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b5d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d10b      	bne.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5e2:	4b6c      	ldr	r3, [pc, #432]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e6:	f023 0107 	bic.w	r1, r3, #7
 800b5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f2:	4a68      	ldr	r2, [pc, #416]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5f4:	430b      	orrs	r3, r1
 800b5f6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5f8:	e003      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f002 0320 	and.w	r3, r2, #32
 800b60e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b612:	2300      	movs	r3, #0
 800b614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b618:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b61c:	460b      	mov	r3, r1
 800b61e:	4313      	orrs	r3, r2
 800b620:	d055      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b62a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b62e:	d033      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b634:	d82c      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b63a:	d02f      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b63c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b640:	d826      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b646:	d02b      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b64c:	d820      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b64e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b652:	d012      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b658:	d81a      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d022      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b65e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b662:	d115      	bne.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b668:	3308      	adds	r3, #8
 800b66a:	2100      	movs	r1, #0
 800b66c:	4618      	mov	r0, r3
 800b66e:	f001 fcc5 	bl	800cffc <RCCEx_PLL2_Config>
 800b672:	4603      	mov	r3, r0
 800b674:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b678:	e015      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	3328      	adds	r3, #40	; 0x28
 800b680:	2102      	movs	r1, #2
 800b682:	4618      	mov	r0, r3
 800b684:	f001 fd6c 	bl	800d160 <RCCEx_PLL3_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b68e:	e00a      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b696:	e006      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b698:	bf00      	nop
 800b69a:	e004      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b69c:	bf00      	nop
 800b69e:	e002      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6a0:	bf00      	nop
 800b6a2:	e000      	b.n	800b6a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b6a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d10b      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b6ae:	4b39      	ldr	r3, [pc, #228]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6b2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6be:	4a35      	ldr	r2, [pc, #212]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	6553      	str	r3, [r2, #84]	; 0x54
 800b6c4:	e003      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b6da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	d058      	beq.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6fa:	d033      	beq.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b6fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b700:	d82c      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b706:	d02f      	beq.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70c:	d826      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b70e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b712:	d02b      	beq.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b714:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b718:	d820      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b71a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b71e:	d012      	beq.n	800b746 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b720:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b724:	d81a      	bhi.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d022      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b72a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b72e:	d115      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b734:	3308      	adds	r3, #8
 800b736:	2100      	movs	r1, #0
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 fc5f 	bl	800cffc <RCCEx_PLL2_Config>
 800b73e:	4603      	mov	r3, r0
 800b740:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b744:	e015      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74a:	3328      	adds	r3, #40	; 0x28
 800b74c:	2102      	movs	r1, #2
 800b74e:	4618      	mov	r0, r3
 800b750:	f001 fd06 	bl	800d160 <RCCEx_PLL3_Config>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b75a:	e00a      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b762:	e006      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b764:	bf00      	nop
 800b766:	e004      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b768:	bf00      	nop
 800b76a:	e002      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b76c:	bf00      	nop
 800b76e:	e000      	b.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b770:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b772:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b776:	2b00      	cmp	r3, #0
 800b778:	d10e      	bne.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b77a:	4b06      	ldr	r3, [pc, #24]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b78a:	4a02      	ldr	r2, [pc, #8]	; (800b794 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b78c:	430b      	orrs	r3, r1
 800b78e:	6593      	str	r3, [r2, #88]	; 0x58
 800b790:	e006      	b.n	800b7a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b792:	bf00      	nop
 800b794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b798:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b79c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b7ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	d055      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7cc:	d033      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b7ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7d2:	d82c      	bhi.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7d8:	d02f      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b7da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7de:	d826      	bhi.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7e4:	d02b      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b7e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7ea:	d820      	bhi.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f0:	d012      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b7f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f6:	d81a      	bhi.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d022      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b7fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b800:	d115      	bne.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b806:	3308      	adds	r3, #8
 800b808:	2100      	movs	r1, #0
 800b80a:	4618      	mov	r0, r3
 800b80c:	f001 fbf6 	bl	800cffc <RCCEx_PLL2_Config>
 800b810:	4603      	mov	r3, r0
 800b812:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b816:	e015      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81c:	3328      	adds	r3, #40	; 0x28
 800b81e:	2102      	movs	r1, #2
 800b820:	4618      	mov	r0, r3
 800b822:	f001 fc9d 	bl	800d160 <RCCEx_PLL3_Config>
 800b826:	4603      	mov	r3, r0
 800b828:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b82c:	e00a      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b82e:	2301      	movs	r3, #1
 800b830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b834:	e006      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b836:	bf00      	nop
 800b838:	e004      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b83a:	bf00      	nop
 800b83c:	e002      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b83e:	bf00      	nop
 800b840:	e000      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b842:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b844:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10b      	bne.n	800b864 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b84c:	4ba0      	ldr	r3, [pc, #640]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b84e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b850:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b85c:	4a9c      	ldr	r2, [pc, #624]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b85e:	430b      	orrs	r3, r1
 800b860:	6593      	str	r3, [r2, #88]	; 0x58
 800b862:	e003      	b.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b864:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b868:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f002 0308 	and.w	r3, r2, #8
 800b878:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b87c:	2300      	movs	r3, #0
 800b87e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b882:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b886:	460b      	mov	r3, r1
 800b888:	4313      	orrs	r3, r2
 800b88a:	d01e      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b898:	d10c      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	3328      	adds	r3, #40	; 0x28
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f001 fc5c 	bl	800d160 <RCCEx_PLL3_Config>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b8b4:	4b86      	ldr	r3, [pc, #536]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8c4:	4a82      	ldr	r2, [pc, #520]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d2:	f002 0310 	and.w	r3, r2, #16
 800b8d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	d01e      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8f6:	d10c      	bne.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fc:	3328      	adds	r3, #40	; 0x28
 800b8fe:	2102      	movs	r1, #2
 800b900:	4618      	mov	r0, r3
 800b902:	f001 fc2d 	bl	800d160 <RCCEx_PLL3_Config>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d002      	beq.n	800b912 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b912:	4b6f      	ldr	r3, [pc, #444]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b916:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b922:	4a6b      	ldr	r2, [pc, #428]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b924:	430b      	orrs	r3, r1
 800b926:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b934:	67bb      	str	r3, [r7, #120]	; 0x78
 800b936:	2300      	movs	r3, #0
 800b938:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b93a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b93e:	460b      	mov	r3, r1
 800b940:	4313      	orrs	r3, r2
 800b942:	d03e      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b94c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b950:	d022      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b952:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b956:	d81b      	bhi.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b95c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b960:	d00b      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b962:	e015      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	3308      	adds	r3, #8
 800b96a:	2100      	movs	r1, #0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f001 fb45 	bl	800cffc <RCCEx_PLL2_Config>
 800b972:	4603      	mov	r3, r0
 800b974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b978:	e00f      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b97e:	3328      	adds	r3, #40	; 0x28
 800b980:	2102      	movs	r1, #2
 800b982:	4618      	mov	r0, r3
 800b984:	f001 fbec 	bl	800d160 <RCCEx_PLL3_Config>
 800b988:	4603      	mov	r3, r0
 800b98a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b98e:	e004      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b996:	e000      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d10b      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b9a2:	4b4b      	ldr	r3, [pc, #300]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9a6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9b2:	4a47      	ldr	r2, [pc, #284]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9b8:	e003      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b9ce:	673b      	str	r3, [r7, #112]	; 0x70
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9d8:	460b      	mov	r3, r1
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	d03b      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9ea:	d01f      	beq.n	800ba2c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b9ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9f0:	d818      	bhi.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b9f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9f6:	d003      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b9f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9fc:	d007      	beq.n	800ba0e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b9fe:	e011      	b.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba00:	4b33      	ldr	r3, [pc, #204]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba04:	4a32      	ldr	r2, [pc, #200]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba0c:	e00f      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba12:	3328      	adds	r3, #40	; 0x28
 800ba14:	2101      	movs	r1, #1
 800ba16:	4618      	mov	r0, r3
 800ba18:	f001 fba2 	bl	800d160 <RCCEx_PLL3_Config>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba22:	e004      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba2a:	e000      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ba2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba36:	4b26      	ldr	r3, [pc, #152]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba46:	4a22      	ldr	r2, [pc, #136]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6553      	str	r3, [r2, #84]	; 0x54
 800ba4c:	e003      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ba62:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba64:	2300      	movs	r3, #0
 800ba66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba68:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	d034      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ba7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba80:	d007      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ba82:	e011      	b.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba84:	4b12      	ldr	r3, [pc, #72]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a11      	ldr	r2, [pc, #68]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba90:	e00e      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba96:	3308      	adds	r3, #8
 800ba98:	2102      	movs	r1, #2
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f001 faae 	bl	800cffc <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800baa6:	e003      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800baae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10d      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bab8:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac6:	4a02      	ldr	r2, [pc, #8]	; (800bad0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bacc:	e006      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bace:	bf00      	nop
 800bad0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bad8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bae8:	663b      	str	r3, [r7, #96]	; 0x60
 800baea:	2300      	movs	r3, #0
 800baec:	667b      	str	r3, [r7, #100]	; 0x64
 800baee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d00c      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafc:	3328      	adds	r3, #40	; 0x28
 800bafe:	2102      	movs	r1, #2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fb2d 	bl	800d160 <RCCEx_PLL3_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb20:	2300      	movs	r3, #0
 800bb22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb24:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bb28:	460b      	mov	r3, r1
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	d036      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb38:	d018      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bb3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb3e:	d811      	bhi.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bb40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb44:	d014      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bb46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb4a:	d80b      	bhi.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d011      	beq.n	800bb74 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bb50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb54:	d106      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb56:	4bb7      	ldr	r3, [pc, #732]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb5a:	4ab6      	ldr	r2, [pc, #728]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb62:	e008      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb64:	2301      	movs	r3, #1
 800bb66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb6a:	e004      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb6c:	bf00      	nop
 800bb6e:	e002      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb70:	bf00      	nop
 800bb72:	e000      	b.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb74:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10a      	bne.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb7e:	4bad      	ldr	r3, [pc, #692]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8c:	4aa9      	ldr	r2, [pc, #676]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb8e:	430b      	orrs	r3, r1
 800bb90:	6553      	str	r3, [r2, #84]	; 0x54
 800bb92:	e003      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bba8:	653b      	str	r3, [r7, #80]	; 0x50
 800bbaa:	2300      	movs	r3, #0
 800bbac:	657b      	str	r3, [r7, #84]	; 0x54
 800bbae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	d009      	beq.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bbb8:	4b9e      	ldr	r3, [pc, #632]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbc6:	4a9b      	ldr	r2, [pc, #620]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bbd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbda:	2300      	movs	r3, #0
 800bbdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbde:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	d009      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bbe8:	4b92      	ldr	r3, [pc, #584]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbec:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf6:	4a8f      	ldr	r2, [pc, #572]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bc08:	643b      	str	r3, [r7, #64]	; 0x40
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	647b      	str	r3, [r7, #68]	; 0x44
 800bc0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc12:	460b      	mov	r3, r1
 800bc14:	4313      	orrs	r3, r2
 800bc16:	d00e      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc18:	4b86      	ldr	r3, [pc, #536]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	4a85      	ldr	r2, [pc, #532]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc22:	6113      	str	r3, [r2, #16]
 800bc24:	4b83      	ldr	r3, [pc, #524]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc26:	6919      	ldr	r1, [r3, #16]
 800bc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc30:	4a80      	ldr	r2, [pc, #512]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc32:	430b      	orrs	r3, r1
 800bc34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc42:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	d009      	beq.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc52:	4b78      	ldr	r3, [pc, #480]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc56:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc60:	4a74      	ldr	r2, [pc, #464]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc62:	430b      	orrs	r3, r1
 800bc64:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bc72:	633b      	str	r3, [r7, #48]	; 0x30
 800bc74:	2300      	movs	r3, #0
 800bc76:	637b      	str	r3, [r7, #52]	; 0x34
 800bc78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	d00a      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc82:	4b6c      	ldr	r3, [pc, #432]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc86:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bc8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc92:	4a68      	ldr	r2, [pc, #416]	; (800be34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc94:	430b      	orrs	r3, r1
 800bc96:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	2100      	movs	r1, #0
 800bca2:	62b9      	str	r1, [r7, #40]	; 0x28
 800bca4:	f003 0301 	and.w	r3, r3, #1
 800bca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bcaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	d011      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2100      	movs	r1, #0
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f001 f99d 	bl	800cffc <RCCEx_PLL2_Config>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bcc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	2100      	movs	r1, #0
 800bce2:	6239      	str	r1, [r7, #32]
 800bce4:	f003 0302 	and.w	r3, r3, #2
 800bce8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	d011      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f001 f97d 	bl	800cffc <RCCEx_PLL2_Config>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd20:	2100      	movs	r1, #0
 800bd22:	61b9      	str	r1, [r7, #24]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	61fb      	str	r3, [r7, #28]
 800bd2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd2e:	460b      	mov	r3, r1
 800bd30:	4313      	orrs	r3, r2
 800bd32:	d011      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd38:	3308      	adds	r3, #8
 800bd3a:	2102      	movs	r1, #2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f001 f95d 	bl	800cffc <RCCEx_PLL2_Config>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	2100      	movs	r1, #0
 800bd62:	6139      	str	r1, [r7, #16]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4313      	orrs	r3, r2
 800bd72:	d011      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd78:	3328      	adds	r3, #40	; 0x28
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 f9ef 	bl	800d160 <RCCEx_PLL3_Config>
 800bd82:	4603      	mov	r3, r0
 800bd84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bd88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	2100      	movs	r1, #0
 800bda2:	60b9      	str	r1, [r7, #8]
 800bda4:	f003 0310 	and.w	r3, r3, #16
 800bda8:	60fb      	str	r3, [r7, #12]
 800bdaa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	d011      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb8:	3328      	adds	r3, #40	; 0x28
 800bdba:	2101      	movs	r1, #1
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f001 f9cf 	bl	800d160 <RCCEx_PLL3_Config>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bdc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d003      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	2100      	movs	r1, #0
 800bde2:	6039      	str	r1, [r7, #0]
 800bde4:	f003 0320 	and.w	r3, r3, #32
 800bde8:	607b      	str	r3, [r7, #4]
 800bdea:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	d011      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf8:	3328      	adds	r3, #40	; 0x28
 800bdfa:	2102      	movs	r1, #2
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f001 f9af 	bl	800d160 <RCCEx_PLL3_Config>
 800be02:	4603      	mov	r3, r0
 800be04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d003      	beq.n	800be18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800be18:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	e000      	b.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800be24:	2301      	movs	r3, #1
}
 800be26:	4618      	mov	r0, r3
 800be28:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800be2c:	46bd      	mov	sp, r7
 800be2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be32:	bf00      	nop
 800be34:	58024400 	.word	0x58024400

0800be38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b090      	sub	sp, #64	; 0x40
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be46:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800be4a:	430b      	orrs	r3, r1
 800be4c:	f040 8094 	bne.w	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be50:	4b9b      	ldr	r3, [pc, #620]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be54:	f003 0307 	and.w	r3, r3, #7
 800be58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	f200 8087 	bhi.w	800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be62:	a201      	add	r2, pc, #4	; (adr r2, 800be68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be68:	0800be7d 	.word	0x0800be7d
 800be6c:	0800bea5 	.word	0x0800bea5
 800be70:	0800becd 	.word	0x0800becd
 800be74:	0800bf69 	.word	0x0800bf69
 800be78:	0800bef5 	.word	0x0800bef5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be7c:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be88:	d108      	bne.n	800be9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 ff62 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be98:	f000 bc93 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea0:	f000 bc8f 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bea4:	4b86      	ldr	r3, [pc, #536]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beb0:	d108      	bne.n	800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beb2:	f107 0318 	add.w	r3, r7, #24
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 fca6 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec0:	f000 bc7f 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bec8:	f000 bc7b 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800becc:	4b7c      	ldr	r3, [pc, #496]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bed4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed8:	d108      	bne.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beda:	f107 030c 	add.w	r3, r7, #12
 800bede:	4618      	mov	r0, r3
 800bee0:	f000 fde6 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bee8:	f000 bc6b 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beec:	2300      	movs	r3, #0
 800beee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef0:	f000 bc67 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bef4:	4b72      	ldr	r3, [pc, #456]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800befc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800befe:	4b70      	ldr	r3, [pc, #448]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0304 	and.w	r3, r3, #4
 800bf06:	2b04      	cmp	r3, #4
 800bf08:	d10c      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bf0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d109      	bne.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf10:	4b6b      	ldr	r3, [pc, #428]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	08db      	lsrs	r3, r3, #3
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	4a6a      	ldr	r2, [pc, #424]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bf1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf22:	e01f      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf24:	4b66      	ldr	r3, [pc, #408]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf30:	d106      	bne.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf38:	d102      	bne.n	800bf40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf3a:	4b63      	ldr	r3, [pc, #396]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf3e:	e011      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf40:	4b5f      	ldr	r3, [pc, #380]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf4c:	d106      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf54:	d102      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf56:	4b5d      	ldr	r3, [pc, #372]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf5a:	e003      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf60:	f000 bc2f 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf64:	f000 bc2d 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf68:	4b59      	ldr	r3, [pc, #356]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf6c:	f000 bc29 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bf70:	2300      	movs	r3, #0
 800bf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf74:	f000 bc25 	b.w	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bf78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf7c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf80:	430b      	orrs	r3, r1
 800bf82:	f040 80a7 	bne.w	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bf86:	4b4e      	ldr	r3, [pc, #312]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf8a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bf8e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf96:	d054      	beq.n	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf9e:	f200 808b 	bhi.w	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfa8:	f000 8083 	beq.w	800c0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfae:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfb2:	f200 8081 	bhi.w	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfbc:	d02f      	beq.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfc4:	d878      	bhi.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d004      	beq.n	800bfd6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfd2:	d012      	beq.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bfd4:	e070      	b.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfd6:	4b3a      	ldr	r3, [pc, #232]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfe2:	d107      	bne.n	800bff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 feb5 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bff2:	e3e6      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff4:	2300      	movs	r3, #0
 800bff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff8:	e3e3      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c006:	d107      	bne.n	800c018 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c008:	f107 0318 	add.w	r3, r7, #24
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 fbfb 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c016:	e3d4      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c018:	2300      	movs	r3, #0
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c01c:	e3d1      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c01e:	4b28      	ldr	r3, [pc, #160]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c02a:	d107      	bne.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c02c:	f107 030c 	add.w	r3, r7, #12
 800c030:	4618      	mov	r0, r3
 800c032:	f000 fd3d 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03a:	e3c2      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c040:	e3bf      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c042:	4b1f      	ldr	r3, [pc, #124]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c04a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c04c:	4b1c      	ldr	r3, [pc, #112]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0304 	and.w	r3, r3, #4
 800c054:	2b04      	cmp	r3, #4
 800c056:	d10c      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c05e:	4b18      	ldr	r3, [pc, #96]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	08db      	lsrs	r3, r3, #3
 800c064:	f003 0303 	and.w	r3, r3, #3
 800c068:	4a16      	ldr	r2, [pc, #88]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c06a:	fa22 f303 	lsr.w	r3, r2, r3
 800c06e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c070:	e01e      	b.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c072:	4b13      	ldr	r3, [pc, #76]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c07a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07e:	d106      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c082:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c086:	d102      	bne.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c088:	4b0f      	ldr	r3, [pc, #60]	; (800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c08c:	e010      	b.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c08e:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c096:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c09a:	d106      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0a2:	d102      	bne.n	800c0aa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0a4:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a8:	e002      	b.n	800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0ae:	e388      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0b0:	e387      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0b2:	4b07      	ldr	r3, [pc, #28]	; (800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b6:	e384      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0bc:	e381      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0be:	bf00      	nop
 800c0c0:	58024400 	.word	0x58024400
 800c0c4:	03d09000 	.word	0x03d09000
 800c0c8:	003d0900 	.word	0x003d0900
 800c0cc:	02faf080 	.word	0x02faf080
 800c0d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c0d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	f040 809c 	bne.w	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c0e2:	4b9e      	ldr	r3, [pc, #632]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c0ea:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0f2:	d054      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0fa:	f200 808b 	bhi.w	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c104:	f000 8083 	beq.w	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c10e:	f200 8081 	bhi.w	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c118:	d02f      	beq.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c120:	d878      	bhi.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c124:	2b00      	cmp	r3, #0
 800c126:	d004      	beq.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c12e:	d012      	beq.n	800c156 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c130:	e070      	b.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c132:	4b8a      	ldr	r3, [pc, #552]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c13a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c13e:	d107      	bne.n	800c150 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c144:	4618      	mov	r0, r3
 800c146:	f000 fe07 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c14e:	e338      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c150:	2300      	movs	r3, #0
 800c152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c154:	e335      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c156:	4b81      	ldr	r3, [pc, #516]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c15e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c162:	d107      	bne.n	800c174 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c164:	f107 0318 	add.w	r3, r7, #24
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fb4d 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c16e:	69bb      	ldr	r3, [r7, #24]
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c172:	e326      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c178:	e323      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c17a:	4b78      	ldr	r3, [pc, #480]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c186:	d107      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c188:	f107 030c 	add.w	r3, r7, #12
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fc8f 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c196:	e314      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e311      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c19e:	4b6f      	ldr	r3, [pc, #444]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1a6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1a8:	4b6c      	ldr	r3, [pc, #432]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 0304 	and.w	r3, r3, #4
 800c1b0:	2b04      	cmp	r3, #4
 800c1b2:	d10c      	bne.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d109      	bne.n	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1ba:	4b68      	ldr	r3, [pc, #416]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	08db      	lsrs	r3, r3, #3
 800c1c0:	f003 0303 	and.w	r3, r3, #3
 800c1c4:	4a66      	ldr	r2, [pc, #408]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1cc:	e01e      	b.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1ce:	4b63      	ldr	r3, [pc, #396]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1da:	d106      	bne.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1e2:	d102      	bne.n	800c1ea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1e4:	4b5f      	ldr	r3, [pc, #380]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1e8:	e010      	b.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1ea:	4b5c      	ldr	r3, [pc, #368]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1f6:	d106      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c1f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1fe:	d102      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c200:	4b59      	ldr	r3, [pc, #356]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c204:	e002      	b.n	800c20c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c20a:	e2da      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c20c:	e2d9      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c20e:	4b57      	ldr	r3, [pc, #348]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c212:	e2d6      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	e2d3      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c21a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c21e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c222:	430b      	orrs	r3, r1
 800c224:	f040 80a7 	bne.w	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c228:	4b4c      	ldr	r3, [pc, #304]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c22a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c22c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c230:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c238:	d055      	beq.n	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c23c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c240:	f200 8096 	bhi.w	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c24a:	f000 8084 	beq.w	800c356 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c24e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c254:	f200 808c 	bhi.w	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c25e:	d030      	beq.n	800c2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c266:	f200 8083 	bhi.w	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d004      	beq.n	800c27a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c276:	d012      	beq.n	800c29e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c278:	e07a      	b.n	800c370 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c27a:	4b38      	ldr	r3, [pc, #224]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c286:	d107      	bne.n	800c298 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 fd63 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c296:	e294      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29c:	e291      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c29e:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2aa:	d107      	bne.n	800c2bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2ac:	f107 0318 	add.w	r3, r7, #24
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 faa9 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ba:	e282      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2c0:	e27f      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2c2:	4b26      	ldr	r3, [pc, #152]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ce:	d107      	bne.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2d0:	f107 030c 	add.w	r3, r7, #12
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f000 fbeb 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2de:	e270      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	e26d      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2e6:	4b1d      	ldr	r3, [pc, #116]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2f0:	4b1a      	ldr	r3, [pc, #104]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0304 	and.w	r3, r3, #4
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d10c      	bne.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c2fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d109      	bne.n	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c302:	4b16      	ldr	r3, [pc, #88]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	08db      	lsrs	r3, r3, #3
 800c308:	f003 0303 	and.w	r3, r3, #3
 800c30c:	4a14      	ldr	r2, [pc, #80]	; (800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c30e:	fa22 f303 	lsr.w	r3, r2, r3
 800c312:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c314:	e01e      	b.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c316:	4b11      	ldr	r3, [pc, #68]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c31e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c322:	d106      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c32a:	d102      	bne.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c32c:	4b0d      	ldr	r3, [pc, #52]	; (800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c330:	e010      	b.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c332:	4b0a      	ldr	r3, [pc, #40]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c33e:	d106      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c346:	d102      	bne.n	800c34e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c348:	4b07      	ldr	r3, [pc, #28]	; (800c368 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c34c:	e002      	b.n	800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c34e:	2300      	movs	r3, #0
 800c350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c352:	e236      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c354:	e235      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c356:	4b05      	ldr	r3, [pc, #20]	; (800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c35a:	e232      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c35c:	58024400 	.word	0x58024400
 800c360:	03d09000 	.word	0x03d09000
 800c364:	003d0900 	.word	0x003d0900
 800c368:	02faf080 	.word	0x02faf080
 800c36c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c370:	2300      	movs	r3, #0
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c374:	e225      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c376:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c37a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c37e:	430b      	orrs	r3, r1
 800c380:	f040 8085 	bne.w	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c384:	4b9c      	ldr	r3, [pc, #624]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c388:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c38c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c394:	d06b      	beq.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c39c:	d874      	bhi.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3a4:	d056      	beq.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c3ac:	d86c      	bhi.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3b4:	d03b      	beq.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3bc:	d864      	bhi.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c4:	d021      	beq.n	800c40a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3cc:	d85c      	bhi.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d004      	beq.n	800c3de <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3da:	d004      	beq.n	800c3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c3dc:	e054      	b.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c3de:	f7fe fb5f 	bl	800aaa0 <HAL_RCC_GetPCLK1Freq>
 800c3e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3e4:	e1ed      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3e6:	4b84      	ldr	r3, [pc, #528]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3f2:	d107      	bne.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3f4:	f107 0318 	add.w	r3, r7, #24
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f000 fa05 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3fe:	69fb      	ldr	r3, [r7, #28]
 800c400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c402:	e1de      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c408:	e1db      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c40a:	4b7b      	ldr	r3, [pc, #492]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c416:	d107      	bne.n	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c418:	f107 030c 	add.w	r3, r7, #12
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 fb47 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c426:	e1cc      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42c:	e1c9      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c42e:	4b72      	ldr	r3, [pc, #456]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f003 0304 	and.w	r3, r3, #4
 800c436:	2b04      	cmp	r3, #4
 800c438:	d109      	bne.n	800c44e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c43a:	4b6f      	ldr	r3, [pc, #444]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	08db      	lsrs	r3, r3, #3
 800c440:	f003 0303 	and.w	r3, r3, #3
 800c444:	4a6d      	ldr	r2, [pc, #436]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c446:	fa22 f303 	lsr.w	r3, r2, r3
 800c44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44c:	e1b9      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c452:	e1b6      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c454:	4b68      	ldr	r3, [pc, #416]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c45c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c460:	d102      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c462:	4b67      	ldr	r3, [pc, #412]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c466:	e1ac      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e1a9      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c46e:	4b62      	ldr	r3, [pc, #392]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c47a:	d102      	bne.n	800c482 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c47c:	4b61      	ldr	r3, [pc, #388]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c47e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c480:	e19f      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c482:	2300      	movs	r3, #0
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c486:	e19c      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e199      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c48e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c492:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c496:	430b      	orrs	r3, r1
 800c498:	d173      	bne.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c49a:	4b57      	ldr	r3, [pc, #348]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4aa:	d02f      	beq.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4b2:	d863      	bhi.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d004      	beq.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c0:	d012      	beq.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c4c2:	e05b      	b.n	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4c4:	4b4c      	ldr	r3, [pc, #304]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d2:	f107 0318 	add.w	r3, r7, #24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f996 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e0:	e16f      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e6:	e16c      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4e8:	4b43      	ldr	r3, [pc, #268]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4f4:	d107      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4f6:	f107 030c 	add.w	r3, r7, #12
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fad8 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c504:	e15d      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50a:	e15a      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c50c:	4b3a      	ldr	r3, [pc, #232]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c50e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c514:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c516:	4b38      	ldr	r3, [pc, #224]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d10c      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c528:	4b33      	ldr	r3, [pc, #204]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	08db      	lsrs	r3, r3, #3
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	4a32      	ldr	r2, [pc, #200]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c534:	fa22 f303 	lsr.w	r3, r2, r3
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53a:	e01e      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c53c:	4b2e      	ldr	r3, [pc, #184]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c548:	d106      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c550:	d102      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c552:	4b2b      	ldr	r3, [pc, #172]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c554:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c556:	e010      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c558:	4b27      	ldr	r3, [pc, #156]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c564:	d106      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d102      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c56e:	4b25      	ldr	r3, [pc, #148]	; (800c604 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c572:	e002      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c578:	e123      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c57a:	e122      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c57c:	2300      	movs	r3, #0
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c580:	e11f      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c586:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c58a:	430b      	orrs	r3, r1
 800c58c:	d13c      	bne.n	800c608 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c58e:	4b1a      	ldr	r3, [pc, #104]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c596:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d004      	beq.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a4:	d012      	beq.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c5a6:	e023      	b.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5a8:	4b13      	ldr	r3, [pc, #76]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5b4:	d107      	bne.n	800c5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 fbcc 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5c4:	e0fd      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ca:	e0fa      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5d8:	d107      	bne.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5da:	f107 0318 	add.w	r3, r7, #24
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f000 f912 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e8:	e0eb      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ee:	e0e8      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f4:	e0e5      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5f6:	bf00      	nop
 800c5f8:	58024400 	.word	0x58024400
 800c5fc:	03d09000 	.word	0x03d09000
 800c600:	003d0900 	.word	0x003d0900
 800c604:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c608:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c60c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c610:	430b      	orrs	r3, r1
 800c612:	f040 8085 	bne.w	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c616:	4b6d      	ldr	r3, [pc, #436]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c61a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c61e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c626:	d06b      	beq.n	800c700 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c62e:	d874      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c636:	d056      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c63e:	d86c      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c646:	d03b      	beq.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c64e:	d864      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c656:	d021      	beq.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c65e:	d85c      	bhi.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c662:	2b00      	cmp	r3, #0
 800c664:	d004      	beq.n	800c670 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c668:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c66c:	d004      	beq.n	800c678 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c66e:	e054      	b.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c670:	f000 f8b4 	bl	800c7dc <HAL_RCCEx_GetD3PCLK1Freq>
 800c674:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c676:	e0a4      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c678:	4b54      	ldr	r3, [pc, #336]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c680:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c684:	d107      	bne.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c686:	f107 0318 	add.w	r3, r7, #24
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 f8bc 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c694:	e095      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69a:	e092      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c69c:	4b4b      	ldr	r3, [pc, #300]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a8:	d107      	bne.n	800c6ba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6aa:	f107 030c 	add.w	r3, r7, #12
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 f9fe 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6b8:	e083      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6be:	e080      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6c0:	4b42      	ldr	r3, [pc, #264]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b04      	cmp	r3, #4
 800c6ca:	d109      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6cc:	4b3f      	ldr	r3, [pc, #252]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	f003 0303 	and.w	r3, r3, #3
 800c6d6:	4a3e      	ldr	r2, [pc, #248]	; (800c7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6de:	e070      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e06d      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6e6:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6f2:	d102      	bne.n	800c6fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c6f4:	4b37      	ldr	r3, [pc, #220]	; (800c7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6f8:	e063      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fe:	e060      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c700:	4b32      	ldr	r3, [pc, #200]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c70c:	d102      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c70e:	4b32      	ldr	r3, [pc, #200]	; (800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c712:	e056      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e053      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c71e:	e050      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c720:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c724:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c728:	430b      	orrs	r3, r1
 800c72a:	d148      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c72c:	4b27      	ldr	r3, [pc, #156]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c734:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c73c:	d02a      	beq.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c744:	d838      	bhi.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d004      	beq.n	800c756 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c752:	d00d      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c754:	e030      	b.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c756:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c762:	d102      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c764:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c768:	e02b      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76e:	e028      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c770:	4b16      	ldr	r3, [pc, #88]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c778:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c77e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c782:	4618      	mov	r0, r3
 800c784:	f000 fae8 	bl	800cd58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78c:	e019      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c792:	e016      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c794:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c79c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7a2:	f107 0318 	add.w	r3, r7, #24
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f000 f82e 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b0:	e007      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7b6:	e004      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7bc:	e001      	b.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3740      	adds	r7, #64	; 0x40
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	58024400 	.word	0x58024400
 800c7d0:	03d09000 	.word	0x03d09000
 800c7d4:	003d0900 	.word	0x003d0900
 800c7d8:	02faf080 	.word	0x02faf080

0800c7dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7e0:	f7fe f92e 	bl	800aa40 <HAL_RCC_GetHCLKFreq>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	4b06      	ldr	r3, [pc, #24]	; (800c800 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	091b      	lsrs	r3, r3, #4
 800c7ec:	f003 0307 	and.w	r3, r3, #7
 800c7f0:	4904      	ldr	r1, [pc, #16]	; (800c804 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7f2:	5ccb      	ldrb	r3, [r1, r3]
 800c7f4:	f003 031f 	and.w	r3, r3, #31
 800c7f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	58024400 	.word	0x58024400
 800c804:	08018c2c 	.word	0x08018c2c

0800c808 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c808:	b480      	push	{r7}
 800c80a:	b089      	sub	sp, #36	; 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c810:	4ba1      	ldr	r3, [pc, #644]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c814:	f003 0303 	and.w	r3, r3, #3
 800c818:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c81a:	4b9f      	ldr	r3, [pc, #636]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81e:	0b1b      	lsrs	r3, r3, #12
 800c820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c824:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c826:	4b9c      	ldr	r3, [pc, #624]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	091b      	lsrs	r3, r3, #4
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c832:	4b99      	ldr	r3, [pc, #612]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c836:	08db      	lsrs	r3, r3, #3
 800c838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	fb02 f303 	mul.w	r3, r2, r3
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 8111 	beq.w	800ca78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	f000 8083 	beq.w	800c964 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	2b02      	cmp	r3, #2
 800c862:	f200 80a1 	bhi.w	800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d056      	beq.n	800c920 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c872:	e099      	b.n	800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c874:	4b88      	ldr	r3, [pc, #544]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0320 	and.w	r3, r3, #32
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d02d      	beq.n	800c8dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c880:	4b85      	ldr	r3, [pc, #532]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	08db      	lsrs	r3, r3, #3
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	4a84      	ldr	r2, [pc, #528]	; (800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
 800c890:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	ee07 3a90 	vmov	s15, r3
 800c898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b7b      	ldr	r3, [pc, #492]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8da:	e087      	b.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800caa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b6a      	ldr	r3, [pc, #424]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a67 	vldr	s11, [pc, #412]	; 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91e:	e065      	b.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800caa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b59      	ldr	r3, [pc, #356]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a56 	vldr	s11, [pc, #344]	; 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c962:	e043      	b.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800caac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b48      	ldr	r3, [pc, #288]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a6:	e021      	b.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800caa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b37      	ldr	r3, [pc, #220]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800caa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9f0:	0a5b      	lsrs	r3, r3, #9
 800c9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca12:	ee17 2a90 	vmov	r2, s15
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca1e:	0c1b      	lsrs	r3, r3, #16
 800ca20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca24:	ee07 3a90 	vmov	s15, r3
 800ca28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca40:	ee17 2a90 	vmov	r2, s15
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca48:	4b13      	ldr	r3, [pc, #76]	; (800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca4c:	0e1b      	lsrs	r3, r3, #24
 800ca4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca6e:	ee17 2a90 	vmov	r2, s15
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca76:	e008      	b.n	800ca8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	609a      	str	r2, [r3, #8]
}
 800ca8a:	bf00      	nop
 800ca8c:	3724      	adds	r7, #36	; 0x24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	58024400 	.word	0x58024400
 800ca9c:	03d09000 	.word	0x03d09000
 800caa0:	46000000 	.word	0x46000000
 800caa4:	4c742400 	.word	0x4c742400
 800caa8:	4a742400 	.word	0x4a742400
 800caac:	4c3ebc20 	.word	0x4c3ebc20

0800cab0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b089      	sub	sp, #36	; 0x24
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cab8:	4ba1      	ldr	r3, [pc, #644]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f003 0303 	and.w	r3, r3, #3
 800cac0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cac2:	4b9f      	ldr	r3, [pc, #636]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac6:	0d1b      	lsrs	r3, r3, #20
 800cac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cacc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cace:	4b9c      	ldr	r3, [pc, #624]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	0a1b      	lsrs	r3, r3, #8
 800cad4:	f003 0301 	and.w	r3, r3, #1
 800cad8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cada:	4b99      	ldr	r3, [pc, #612]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cade:	08db      	lsrs	r3, r3, #3
 800cae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	fb02 f303 	mul.w	r3, r2, r3
 800caea:	ee07 3a90 	vmov	s15, r3
 800caee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800caf6:	697b      	ldr	r3, [r7, #20]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	f000 8111 	beq.w	800cd20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	2b02      	cmp	r3, #2
 800cb02:	f000 8083 	beq.w	800cc0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	f200 80a1 	bhi.w	800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d003      	beq.n	800cb1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d056      	beq.n	800cbc8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb1a:	e099      	b.n	800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb1c:	4b88      	ldr	r3, [pc, #544]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f003 0320 	and.w	r3, r3, #32
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d02d      	beq.n	800cb84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb28:	4b85      	ldr	r3, [pc, #532]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	08db      	lsrs	r3, r3, #3
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	4a84      	ldr	r2, [pc, #528]	; (800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb34:	fa22 f303 	lsr.w	r3, r2, r3
 800cb38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb3a:	68bb      	ldr	r3, [r7, #8]
 800cb3c:	ee07 3a90 	vmov	s15, r3
 800cb40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	ee07 3a90 	vmov	s15, r3
 800cb4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb52:	4b7b      	ldr	r3, [pc, #492]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb62:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb66:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb82:	e087      	b.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb96:	4b6a      	ldr	r3, [pc, #424]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9e:	ee07 3a90 	vmov	s15, r3
 800cba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc6:	e065      	b.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	ee07 3a90 	vmov	s15, r3
 800cbce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbda:	4b59      	ldr	r3, [pc, #356]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe2:	ee07 3a90 	vmov	s15, r3
 800cbe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbea:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc0a:	e043      	b.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	ee07 3a90 	vmov	s15, r3
 800cc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1e:	4b48      	ldr	r3, [pc, #288]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc26:	ee07 3a90 	vmov	s15, r3
 800cc2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc32:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4e:	e021      	b.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc62:	4b37      	ldr	r3, [pc, #220]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc76:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cc94:	4b2a      	ldr	r3, [pc, #168]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc98:	0a5b      	lsrs	r3, r3, #9
 800cc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9e:	ee07 3a90 	vmov	s15, r3
 800cca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccae:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccba:	ee17 2a90 	vmov	r2, s15
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccc2:	4b1f      	ldr	r3, [pc, #124]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc6:	0c1b      	lsrs	r3, r3, #16
 800ccc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cccc:	ee07 3a90 	vmov	s15, r3
 800ccd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cce8:	ee17 2a90 	vmov	r2, s15
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ccf0:	4b13      	ldr	r3, [pc, #76]	; (800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf4:	0e1b      	lsrs	r3, r3, #24
 800ccf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccfa:	ee07 3a90 	vmov	s15, r3
 800ccfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd16:	ee17 2a90 	vmov	r2, s15
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd1e:	e008      	b.n	800cd32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	609a      	str	r2, [r3, #8]
}
 800cd32:	bf00      	nop
 800cd34:	3724      	adds	r7, #36	; 0x24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	58024400 	.word	0x58024400
 800cd44:	03d09000 	.word	0x03d09000
 800cd48:	46000000 	.word	0x46000000
 800cd4c:	4c742400 	.word	0x4c742400
 800cd50:	4a742400 	.word	0x4a742400
 800cd54:	4c3ebc20 	.word	0x4c3ebc20

0800cd58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b089      	sub	sp, #36	; 0x24
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd60:	4ba0      	ldr	r3, [pc, #640]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd64:	f003 0303 	and.w	r3, r3, #3
 800cd68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cd6a:	4b9e      	ldr	r3, [pc, #632]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6e:	091b      	lsrs	r3, r3, #4
 800cd70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cd76:	4b9b      	ldr	r3, [pc, #620]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cd80:	4b98      	ldr	r3, [pc, #608]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd84:	08db      	lsrs	r3, r3, #3
 800cd86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd8a:	693a      	ldr	r2, [r7, #16]
 800cd8c:	fb02 f303 	mul.w	r3, r2, r3
 800cd90:	ee07 3a90 	vmov	s15, r3
 800cd94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8111 	beq.w	800cfc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	2b02      	cmp	r3, #2
 800cda8:	f000 8083 	beq.w	800ceb2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cdac:	69bb      	ldr	r3, [r7, #24]
 800cdae:	2b02      	cmp	r3, #2
 800cdb0:	f200 80a1 	bhi.w	800cef6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d003      	beq.n	800cdc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cdba:	69bb      	ldr	r3, [r7, #24]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d056      	beq.n	800ce6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cdc0:	e099      	b.n	800cef6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdc2:	4b88      	ldr	r3, [pc, #544]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f003 0320 	and.w	r3, r3, #32
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d02d      	beq.n	800ce2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdce:	4b85      	ldr	r3, [pc, #532]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	08db      	lsrs	r3, r3, #3
 800cdd4:	f003 0303 	and.w	r3, r3, #3
 800cdd8:	4a83      	ldr	r2, [pc, #524]	; (800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cdda:	fa22 f303 	lsr.w	r3, r2, r3
 800cdde:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	ee07 3a90 	vmov	s15, r3
 800cde6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	ee07 3a90 	vmov	s15, r3
 800cdf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf8:	4b7a      	ldr	r3, [pc, #488]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce00:	ee07 3a90 	vmov	s15, r3
 800ce04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce28:	e087      	b.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	ee07 3a90 	vmov	s15, r3
 800ce30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce34:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cff0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce3c:	4b69      	ldr	r3, [pc, #420]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce44:	ee07 3a90 	vmov	s15, r3
 800ce48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce50:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce6c:	e065      	b.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	ee07 3a90 	vmov	s15, r3
 800ce74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce78:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cff4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ce7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce80:	4b58      	ldr	r3, [pc, #352]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce88:	ee07 3a90 	vmov	s15, r3
 800ce8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce94:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceb0:	e043      	b.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	ee07 3a90 	vmov	s15, r3
 800ceb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cff8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec4:	4b47      	ldr	r3, [pc, #284]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cecc:	ee07 3a90 	vmov	s15, r3
 800ced0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ced8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cedc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cef4:	e021      	b.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf00:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cff0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf08:	4b36      	ldr	r3, [pc, #216]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cfec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf3a:	4b2a      	ldr	r3, [pc, #168]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3e:	0a5b      	lsrs	r3, r3, #9
 800cf40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf44:	ee07 3a90 	vmov	s15, r3
 800cf48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf54:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf60:	ee17 2a90 	vmov	r2, s15
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cf68:	4b1e      	ldr	r3, [pc, #120]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf6c:	0c1b      	lsrs	r3, r3, #16
 800cf6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf72:	ee07 3a90 	vmov	s15, r3
 800cf76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf82:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf8e:	ee17 2a90 	vmov	r2, s15
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cf96:	4b13      	ldr	r3, [pc, #76]	; (800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf9a:	0e1b      	lsrs	r3, r3, #24
 800cf9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfa0:	ee07 3a90 	vmov	s15, r3
 800cfa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfbc:	ee17 2a90 	vmov	r2, s15
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cfc4:	e008      	b.n	800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	609a      	str	r2, [r3, #8]
}
 800cfd8:	bf00      	nop
 800cfda:	3724      	adds	r7, #36	; 0x24
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	58024400 	.word	0x58024400
 800cfe8:	03d09000 	.word	0x03d09000
 800cfec:	46000000 	.word	0x46000000
 800cff0:	4c742400 	.word	0x4c742400
 800cff4:	4a742400 	.word	0x4a742400
 800cff8:	4c3ebc20 	.word	0x4c3ebc20

0800cffc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
 800d004:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d006:	2300      	movs	r3, #0
 800d008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d00a:	4b53      	ldr	r3, [pc, #332]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d00e:	f003 0303 	and.w	r3, r3, #3
 800d012:	2b03      	cmp	r3, #3
 800d014:	d101      	bne.n	800d01a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e099      	b.n	800d14e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d01a:	4b4f      	ldr	r3, [pc, #316]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a4e      	ldr	r2, [pc, #312]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d020:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d026:	f7f6 fe7b 	bl	8003d20 <HAL_GetTick>
 800d02a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d02c:	e008      	b.n	800d040 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d02e:	f7f6 fe77 	bl	8003d20 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d901      	bls.n	800d040 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	e086      	b.n	800d14e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d040:	4b45      	ldr	r3, [pc, #276]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d1f0      	bne.n	800d02e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d04c:	4b42      	ldr	r3, [pc, #264]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d050:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	031b      	lsls	r3, r3, #12
 800d05a:	493f      	ldr	r1, [pc, #252]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d05c:	4313      	orrs	r3, r2
 800d05e:	628b      	str	r3, [r1, #40]	; 0x28
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	3b01      	subs	r3, #1
 800d066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	3b01      	subs	r3, #1
 800d070:	025b      	lsls	r3, r3, #9
 800d072:	b29b      	uxth	r3, r3
 800d074:	431a      	orrs	r2, r3
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	041b      	lsls	r3, r3, #16
 800d07e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	3b01      	subs	r3, #1
 800d08a:	061b      	lsls	r3, r3, #24
 800d08c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d090:	4931      	ldr	r1, [pc, #196]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d092:	4313      	orrs	r3, r2
 800d094:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d096:	4b30      	ldr	r3, [pc, #192]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	695b      	ldr	r3, [r3, #20]
 800d0a2:	492d      	ldr	r1, [pc, #180]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d0a8:	4b2b      	ldr	r3, [pc, #172]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ac:	f023 0220 	bic.w	r2, r3, #32
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	4928      	ldr	r1, [pc, #160]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d0ba:	4b27      	ldr	r3, [pc, #156]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0be:	4a26      	ldr	r2, [pc, #152]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0c0:	f023 0310 	bic.w	r3, r3, #16
 800d0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d0c6:	4b24      	ldr	r3, [pc, #144]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0ca:	4b24      	ldr	r3, [pc, #144]	; (800d15c <RCCEx_PLL2_Config+0x160>)
 800d0cc:	4013      	ands	r3, r2
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	69d2      	ldr	r2, [r2, #28]
 800d0d2:	00d2      	lsls	r2, r2, #3
 800d0d4:	4920      	ldr	r1, [pc, #128]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0d6:	4313      	orrs	r3, r2
 800d0d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d0da:	4b1f      	ldr	r3, [pc, #124]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0de:	4a1e      	ldr	r2, [pc, #120]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0e0:	f043 0310 	orr.w	r3, r3, #16
 800d0e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d106      	bne.n	800d0fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0ec:	4b1a      	ldr	r3, [pc, #104]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f0:	4a19      	ldr	r2, [pc, #100]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d0f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0f8:	e00f      	b.n	800d11a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b01      	cmp	r3, #1
 800d0fe:	d106      	bne.n	800d10e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d100:	4b15      	ldr	r3, [pc, #84]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d104:	4a14      	ldr	r2, [pc, #80]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d106:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d10a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d10c:	e005      	b.n	800d11a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d10e:	4b12      	ldr	r3, [pc, #72]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d112:	4a11      	ldr	r2, [pc, #68]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d114:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d11a:	4b0f      	ldr	r3, [pc, #60]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a0e      	ldr	r2, [pc, #56]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d120:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d126:	f7f6 fdfb 	bl	8003d20 <HAL_GetTick>
 800d12a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d12c:	e008      	b.n	800d140 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d12e:	f7f6 fdf7 	bl	8003d20 <HAL_GetTick>
 800d132:	4602      	mov	r2, r0
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	1ad3      	subs	r3, r2, r3
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d901      	bls.n	800d140 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d13c:	2303      	movs	r3, #3
 800d13e:	e006      	b.n	800d14e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d140:	4b05      	ldr	r3, [pc, #20]	; (800d158 <RCCEx_PLL2_Config+0x15c>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d0f0      	beq.n	800d12e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	58024400 	.word	0x58024400
 800d15c:	ffff0007 	.word	0xffff0007

0800d160 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d16a:	2300      	movs	r3, #0
 800d16c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d16e:	4b53      	ldr	r3, [pc, #332]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d172:	f003 0303 	and.w	r3, r3, #3
 800d176:	2b03      	cmp	r3, #3
 800d178:	d101      	bne.n	800d17e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e099      	b.n	800d2b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d17e:	4b4f      	ldr	r3, [pc, #316]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a4e      	ldr	r2, [pc, #312]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d18a:	f7f6 fdc9 	bl	8003d20 <HAL_GetTick>
 800d18e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d190:	e008      	b.n	800d1a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d192:	f7f6 fdc5 	bl	8003d20 <HAL_GetTick>
 800d196:	4602      	mov	r2, r0
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d901      	bls.n	800d1a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e086      	b.n	800d2b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d1a4:	4b45      	ldr	r3, [pc, #276]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1f0      	bne.n	800d192 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d1b0:	4b42      	ldr	r3, [pc, #264]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	051b      	lsls	r3, r3, #20
 800d1be:	493f      	ldr	r1, [pc, #252]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	628b      	str	r3, [r1, #40]	; 0x28
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	689b      	ldr	r3, [r3, #8]
 800d1d2:	3b01      	subs	r3, #1
 800d1d4:	025b      	lsls	r3, r3, #9
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	431a      	orrs	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	3b01      	subs	r3, #1
 800d1e0:	041b      	lsls	r3, r3, #16
 800d1e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	691b      	ldr	r3, [r3, #16]
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	061b      	lsls	r3, r3, #24
 800d1f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1f4:	4931      	ldr	r1, [pc, #196]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d1f6:	4313      	orrs	r3, r2
 800d1f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1fa:	4b30      	ldr	r3, [pc, #192]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	695b      	ldr	r3, [r3, #20]
 800d206:	492d      	ldr	r1, [pc, #180]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d208:	4313      	orrs	r3, r2
 800d20a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d20c:	4b2b      	ldr	r3, [pc, #172]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d210:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	699b      	ldr	r3, [r3, #24]
 800d218:	4928      	ldr	r1, [pc, #160]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d21a:	4313      	orrs	r3, r2
 800d21c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d21e:	4b27      	ldr	r3, [pc, #156]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	4a26      	ldr	r2, [pc, #152]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d228:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d22a:	4b24      	ldr	r3, [pc, #144]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d22e:	4b24      	ldr	r3, [pc, #144]	; (800d2c0 <RCCEx_PLL3_Config+0x160>)
 800d230:	4013      	ands	r3, r2
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	69d2      	ldr	r2, [r2, #28]
 800d236:	00d2      	lsls	r2, r2, #3
 800d238:	4920      	ldr	r1, [pc, #128]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d23a:	4313      	orrs	r3, r2
 800d23c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d23e:	4b1f      	ldr	r3, [pc, #124]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d242:	4a1e      	ldr	r2, [pc, #120]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d248:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d106      	bne.n	800d25e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d250:	4b1a      	ldr	r3, [pc, #104]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d254:	4a19      	ldr	r2, [pc, #100]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d25a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d25c:	e00f      	b.n	800d27e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	2b01      	cmp	r3, #1
 800d262:	d106      	bne.n	800d272 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d264:	4b15      	ldr	r3, [pc, #84]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	4a14      	ldr	r2, [pc, #80]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d26a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d26e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d270:	e005      	b.n	800d27e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d272:	4b12      	ldr	r3, [pc, #72]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d276:	4a11      	ldr	r2, [pc, #68]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d278:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d27c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d27e:	4b0f      	ldr	r3, [pc, #60]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a0e      	ldr	r2, [pc, #56]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d28a:	f7f6 fd49 	bl	8003d20 <HAL_GetTick>
 800d28e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d290:	e008      	b.n	800d2a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d292:	f7f6 fd45 	bl	8003d20 <HAL_GetTick>
 800d296:	4602      	mov	r2, r0
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d901      	bls.n	800d2a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e006      	b.n	800d2b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d2a4:	4b05      	ldr	r3, [pc, #20]	; (800d2bc <RCCEx_PLL3_Config+0x15c>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d0f0      	beq.n	800d292 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3710      	adds	r7, #16
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}
 800d2ba:	bf00      	nop
 800d2bc:	58024400 	.word	0x58024400
 800d2c0:	ffff0007 	.word	0xffff0007

0800d2c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d101      	bne.n	800d2d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e092      	b.n	800d3fc <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	7a5b      	ldrb	r3, [r3, #9]
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d105      	bne.n	800d2ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7f5 fe20 	bl	8002f2c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f022 0204 	bic.w	r2, r2, #4
 800d300:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681a      	ldr	r2, [r3, #0]
 800d308:	4b3e      	ldr	r3, [pc, #248]	; (800d404 <HAL_RNG_Init+0x140>)
 800d30a:	4013      	ands	r3, r2
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	6852      	ldr	r2, [r2, #4]
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d31a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a39      	ldr	r2, [pc, #228]	; (800d408 <HAL_RNG_Init+0x144>)
 800d322:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f247 2274 	movw	r2, #29300	; 0x7274
 800d32c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d33c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d33e:	f7f6 fcef 	bl	8003d20 <HAL_GetTick>
 800d342:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d344:	e016      	b.n	800d374 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d346:	f7f6 fceb 	bl	8003d20 <HAL_GetTick>
 800d34a:	4602      	mov	r2, r0
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	1ad3      	subs	r3, r2, r3
 800d350:	2b02      	cmp	r3, #2
 800d352:	d90f      	bls.n	800d374 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d362:	d107      	bne.n	800d374 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2201      	movs	r2, #1
 800d368:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2202      	movs	r2, #2
 800d36e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	e043      	b.n	800d3fc <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d37e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d382:	d0e0      	beq.n	800d346 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f042 0204 	orr.w	r2, r2, #4
 800d392:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d39e:	2b40      	cmp	r3, #64	; 0x40
 800d3a0:	d104      	bne.n	800d3ac <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2204      	movs	r2, #4
 800d3a6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e027      	b.n	800d3fc <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d3ac:	f7f6 fcb8 	bl	8003d20 <HAL_GetTick>
 800d3b0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3b2:	e015      	b.n	800d3e0 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d3b4:	f7f6 fcb4 	bl	8003d20 <HAL_GetTick>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d90e      	bls.n	800d3e0 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	685b      	ldr	r3, [r3, #4]
 800d3c8:	f003 0304 	and.w	r3, r3, #4
 800d3cc:	2b04      	cmp	r3, #4
 800d3ce:	d107      	bne.n	800d3e0 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2204      	movs	r2, #4
 800d3d4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2202      	movs	r2, #2
 800d3da:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	e00d      	b.n	800d3fc <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f003 0304 	and.w	r3, r3, #4
 800d3ea:	2b04      	cmp	r3, #4
 800d3ec:	d0e2      	beq.n	800d3b4 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2201      	movs	r2, #1
 800d3f2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d3fa:	2300      	movs	r3, #0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}
 800d404:	bfffffdf 	.word	0xbfffffdf
 800d408:	17590abc 	.word	0x17590abc

0800d40c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	7a1b      	ldrb	r3, [r3, #8]
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d101      	bne.n	800d426 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d422:	2302      	movs	r3, #2
 800d424:	e06d      	b.n	800d502 <HAL_RNG_GenerateRandomNumber+0xf6>
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2201      	movs	r2, #1
 800d42a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	7a5b      	ldrb	r3, [r3, #9]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b01      	cmp	r3, #1
 800d434:	d15c      	bne.n	800d4f0 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2202      	movs	r2, #2
 800d43a:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	685b      	ldr	r3, [r3, #4]
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b40      	cmp	r3, #64	; 0x40
 800d448:	d10c      	bne.n	800d464 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2208      	movs	r2, #8
 800d44e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f864 	bl	800d51e <RNG_RecoverSeedError>
 800d456:	4603      	mov	r3, r0
 800d458:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	2b01      	cmp	r3, #1
 800d45e:	d101      	bne.n	800d464 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800d460:	7bfb      	ldrb	r3, [r7, #15]
 800d462:	e04e      	b.n	800d502 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d464:	f7f6 fc5c 	bl	8003d20 <HAL_GetTick>
 800d468:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d46a:	e018      	b.n	800d49e <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d46c:	f7f6 fc58 	bl	8003d20 <HAL_GetTick>
 800d470:	4602      	mov	r2, r0
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	2b02      	cmp	r3, #2
 800d478:	d911      	bls.n	800d49e <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	2b01      	cmp	r3, #1
 800d486:	d00a      	beq.n	800d49e <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2202      	movs	r2, #2
 800d492:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800d49a:	2301      	movs	r3, #1
 800d49c:	e031      	b.n	800d502 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f003 0301 	and.w	r3, r3, #1
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d1df      	bne.n	800d46c <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689a      	ldr	r2, [r3, #8]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4c0:	2b40      	cmp	r3, #64	; 0x40
 800d4c2:	d10d      	bne.n	800d4e0 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2208      	movs	r2, #8
 800d4c8:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	685a      	ldr	r2, [r3, #4]
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	f022 0201 	bic.w	r2, r2, #1
 800d4dc:	605a      	str	r2, [r3, #4]
 800d4de:	e003      	b.n	800d4e8 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	691a      	ldr	r2, [r3, #16]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	725a      	strb	r2, [r3, #9]
 800d4ee:	e004      	b.n	800d4fa <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2204      	movs	r2, #4
 800d4f4:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	721a      	strb	r2, [r3, #8]

  return status;
 800d500:	7bfb      	ldrb	r3, [r7, #15]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800d50a:	b480      	push	{r7}
 800d50c:	b083      	sub	sp, #12
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800d51e:	b580      	push	{r7, lr}
 800d520:	b084      	sub	sp, #16
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d526:	2300      	movs	r3, #0
 800d528:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	f003 0304 	and.w	r3, r3, #4
 800d534:	2b04      	cmp	r3, #4
 800d536:	d008      	beq.n	800d54a <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	685a      	ldr	r2, [r3, #4]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d546:	605a      	str	r2, [r3, #4]
 800d548:	e05f      	b.n	800d60a <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d558:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d568:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800d56a:	2302      	movs	r3, #2
 800d56c:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	3b01      	subs	r3, #1
 800d572:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d110      	bne.n	800d59c <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	f043 0202 	orr.w	r2, r3, #2
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f7ff ffb9 	bl	800d50a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e03d      	b.n	800d618 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5aa:	d0e0      	beq.n	800d56e <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b6:	2b40      	cmp	r3, #64	; 0x40
 800d5b8:	d107      	bne.n	800d5ca <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	685a      	ldr	r2, [r3, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5c8:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800d5ca:	2302      	movs	r3, #2
 800d5cc:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d110      	bne.n	800d5fc <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2201      	movs	r2, #1
 800d5de:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	f043 0202 	orr.w	r2, r3, #2
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ff89 	bl	800d50a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e00d      	b.n	800d618 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	f003 0304 	and.w	r3, r3, #4
 800d606:	2b04      	cmp	r3, #4
 800d608:	d0e1      	beq.n	800d5ce <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	68db      	ldr	r3, [r3, #12]
 800d60e:	f023 0208 	bic.w	r2, r3, #8
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08a      	sub	sp, #40	; 0x28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d101      	bne.n	800d632 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d62e:	2301      	movs	r3, #1
 800d630:	e075      	b.n	800d71e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d105      	bne.n	800d64a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f7f5 fcab 	bl	8002fa0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2204      	movs	r2, #4
 800d64e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 f868 	bl	800d728 <HAL_SD_InitCard>
 800d658:	4603      	mov	r3, r0
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d001      	beq.n	800d662 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	e05d      	b.n	800d71e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d662:	f107 0308 	add.w	r3, r7, #8
 800d666:	4619      	mov	r1, r3
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fdaf 	bl	800e1cc <HAL_SD_GetCardStatus>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d001      	beq.n	800d678 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d674:	2301      	movs	r3, #1
 800d676:	e052      	b.n	800d71e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d678:	7e3b      	ldrb	r3, [r7, #24]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d67e:	7e7b      	ldrb	r3, [r7, #25]
 800d680:	b2db      	uxtb	r3, r3
 800d682:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d10a      	bne.n	800d6a2 <HAL_SD_Init+0x82>
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d102      	bne.n	800d698 <HAL_SD_Init+0x78>
 800d692:	6a3b      	ldr	r3, [r7, #32]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d004      	beq.n	800d6a2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d69e:	659a      	str	r2, [r3, #88]	; 0x58
 800d6a0:	e00b      	b.n	800d6ba <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d104      	bne.n	800d6b4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6b0:	659a      	str	r2, [r3, #88]	; 0x58
 800d6b2:	e002      	b.n	800d6ba <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	68db      	ldr	r3, [r3, #12]
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 fe6d 	bl	800e3a0 <HAL_SD_ConfigWideBusOperation>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e026      	b.n	800d71e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d6d0:	f7f6 fb26 	bl	8003d20 <HAL_GetTick>
 800d6d4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6d6:	e011      	b.n	800d6fc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d6d8:	f7f6 fb22 	bl	8003d20 <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	69fb      	ldr	r3, [r7, #28]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6e6:	d109      	bne.n	800d6fc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6ee:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d6f8:	2303      	movs	r3, #3
 800d6fa:	e010      	b.n	800d71e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 ff61 	bl	800e5c4 <HAL_SD_GetCardState>
 800d702:	4603      	mov	r3, r0
 800d704:	2b04      	cmp	r3, #4
 800d706:	d1e7      	bne.n	800d6d8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3728      	adds	r7, #40	; 0x28
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}
	...

0800d728 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d728:	b590      	push	{r4, r7, lr}
 800d72a:	b08d      	sub	sp, #52	; 0x34
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d730:	2300      	movs	r3, #0
 800d732:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d734:	2300      	movs	r3, #0
 800d736:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d738:	2300      	movs	r3, #0
 800d73a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d73c:	2300      	movs	r3, #0
 800d73e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d740:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d744:	f04f 0100 	mov.w	r1, #0
 800d748:	f7fe fb76 	bl	800be38 <HAL_RCCEx_GetPeriphCLKFreq>
 800d74c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d750:	2b00      	cmp	r3, #0
 800d752:	d109      	bne.n	800d768 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d762:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	e070      	b.n	800d84a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76a:	0a1b      	lsrs	r3, r3, #8
 800d76c:	4a39      	ldr	r2, [pc, #228]	; (800d854 <HAL_SD_InitCard+0x12c>)
 800d76e:	fba2 2303 	umull	r2, r3, r2, r3
 800d772:	091b      	lsrs	r3, r3, #4
 800d774:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681c      	ldr	r4, [r3, #0]
 800d77a:	466a      	mov	r2, sp
 800d77c:	f107 0318 	add.w	r3, r7, #24
 800d780:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d784:	e882 0003 	stmia.w	r2, {r0, r1}
 800d788:	f107 030c 	add.w	r3, r7, #12
 800d78c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d78e:	4620      	mov	r0, r4
 800d790:	f004 fec4 	bl	801251c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f004 ff07 	bl	80125ac <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d79e:	69fb      	ldr	r3, [r7, #28]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d005      	beq.n	800d7b0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	005b      	lsls	r3, r3, #1
 800d7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ae:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d007      	beq.n	800d7c6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d7b6:	4a28      	ldr	r2, [pc, #160]	; (800d858 <HAL_SD_InitCard+0x130>)
 800d7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7be:	3301      	adds	r3, #1
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7f6 fab9 	bl	8003d38 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 ffea 	bl	800e7a0 <SD_PowerON>
 800d7cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d00b      	beq.n	800d7ec <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	431a      	orrs	r2, r3
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e02e      	b.n	800d84a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 ff09 	bl	800e604 <SD_InitCard>
 800d7f2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7f4:	6a3b      	ldr	r3, [r7, #32]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d00b      	beq.n	800d812 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d806:	6a3b      	ldr	r3, [r7, #32]
 800d808:	431a      	orrs	r2, r3
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d80e:	2301      	movs	r3, #1
 800d810:	e01b      	b.n	800d84a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d81a:	4618      	mov	r0, r3
 800d81c:	f004 ff5c 	bl	80126d8 <SDMMC_CmdBlockLength>
 800d820:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d822:	6a3b      	ldr	r3, [r7, #32]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d00f      	beq.n	800d848 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a0b      	ldr	r2, [pc, #44]	; (800d85c <HAL_SD_InitCard+0x134>)
 800d82e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	431a      	orrs	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d844:	2301      	movs	r3, #1
 800d846:	e000      	b.n	800d84a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d848:	2300      	movs	r3, #0
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	372c      	adds	r7, #44	; 0x2c
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd90      	pop	{r4, r7, pc}
 800d852:	bf00      	nop
 800d854:	014f8b59 	.word	0x014f8b59
 800d858:	00012110 	.word	0x00012110
 800d85c:	1fe00fff 	.word	0x1fe00fff

0800d860 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08c      	sub	sp, #48	; 0x30
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d107      	bne.n	800d888 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d87c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d884:	2301      	movs	r3, #1
 800d886:	e08d      	b.n	800d9a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	2b01      	cmp	r3, #1
 800d892:	f040 8086 	bne.w	800d9a2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	2200      	movs	r2, #0
 800d89a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d89c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	441a      	add	r2, r3
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d907      	bls.n	800d8ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e074      	b.n	800d9a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	025a      	lsls	r2, r3, #9
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d002      	beq.n	800d8e6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	025b      	lsls	r3, r3, #9
 800d8e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ea:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	025b      	lsls	r3, r3, #9
 800d8f0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d8f2:	2390      	movs	r3, #144	; 0x90
 800d8f4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d8f6:	2302      	movs	r3, #2
 800d8f8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d8fe:	2300      	movs	r3, #0
 800d900:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f107 0210 	add.w	r2, r7, #16
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f004 feb7 	bl	8012680 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d920:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68ba      	ldr	r2, [r7, #8]
 800d928:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2201      	movs	r2, #1
 800d930:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d90a      	bls.n	800d94e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2282      	movs	r2, #130	; 0x82
 800d93c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d944:	4618      	mov	r0, r3
 800d946:	f004 ff0d 	bl	8012764 <SDMMC_CmdReadMultiBlock>
 800d94a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d94c:	e009      	b.n	800d962 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2281      	movs	r2, #129	; 0x81
 800d952:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d95a:	4618      	mov	r0, r3
 800d95c:	f004 fedf 	bl	801271e <SDMMC_CmdReadSingleBlock>
 800d960:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d012      	beq.n	800d98e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a0f      	ldr	r2, [pc, #60]	; (800d9ac <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d96e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d976:	431a      	orrs	r2, r3
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	2201      	movs	r2, #1
 800d980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d98a:	2301      	movs	r3, #1
 800d98c:	e00a      	b.n	800d9a4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d99c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d99e:	2300      	movs	r3, #0
 800d9a0:	e000      	b.n	800d9a4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d9a2:	2302      	movs	r3, #2
  }
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3730      	adds	r7, #48	; 0x30
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	1fe00fff 	.word	0x1fe00fff

0800d9b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b08c      	sub	sp, #48	; 0x30
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
 800d9bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d107      	bne.n	800d9d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	e08d      	b.n	800daf4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	f040 8086 	bne.w	800daf2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d9ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	441a      	add	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d907      	bls.n	800da0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800da06:	2301      	movs	r3, #1
 800da08:	e074      	b.n	800daf4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2203      	movs	r2, #3
 800da0e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2200      	movs	r2, #0
 800da18:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	68ba      	ldr	r2, [r7, #8]
 800da1e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	025a      	lsls	r2, r3, #9
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2c:	2b01      	cmp	r3, #1
 800da2e:	d002      	beq.n	800da36 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800da30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da32:	025b      	lsls	r3, r3, #9
 800da34:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da36:	f04f 33ff 	mov.w	r3, #4294967295
 800da3a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da3c:	683b      	ldr	r3, [r7, #0]
 800da3e:	025b      	lsls	r3, r3, #9
 800da40:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800da42:	2390      	movs	r3, #144	; 0x90
 800da44:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800da46:	2300      	movs	r3, #0
 800da48:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800da4e:	2300      	movs	r3, #0
 800da50:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f107 0210 	add.w	r2, r7, #16
 800da5a:	4611      	mov	r1, r2
 800da5c:	4618      	mov	r0, r3
 800da5e:	f004 fe0f 	bl	8012680 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68da      	ldr	r2, [r3, #12]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da70:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	68ba      	ldr	r2, [r7, #8]
 800da78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2201      	movs	r2, #1
 800da80:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d90a      	bls.n	800da9e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	22a0      	movs	r2, #160	; 0xa0
 800da8c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da94:	4618      	mov	r0, r3
 800da96:	f004 feab 	bl	80127f0 <SDMMC_CmdWriteMultiBlock>
 800da9a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da9c:	e009      	b.n	800dab2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2290      	movs	r2, #144	; 0x90
 800daa2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800daaa:	4618      	mov	r0, r3
 800daac:	f004 fe7d 	bl	80127aa <SDMMC_CmdWriteSingleBlock>
 800dab0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800dab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d012      	beq.n	800dade <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	4a0f      	ldr	r2, [pc, #60]	; (800dafc <HAL_SD_WriteBlocks_DMA+0x14c>)
 800dabe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac6:	431a      	orrs	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2201      	movs	r2, #1
 800dad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e00a      	b.n	800daf4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800daec:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	e000      	b.n	800daf4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800daf2:	2302      	movs	r3, #2
  }
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3730      	adds	r7, #48	; 0x30
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	1fe00fff 	.word	0x1fe00fff

0800db00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d008      	beq.n	800db2e <HAL_SD_IRQHandler+0x2e>
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f003 0308 	and.w	r3, r3, #8
 800db22:	2b00      	cmp	r3, #0
 800db24:	d003      	beq.n	800db2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f001 f926 	bl	800ed78 <SD_Read_IT>
 800db2c:	e19a      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 80ac 	beq.w	800dc96 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db46:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681a      	ldr	r2, [r3, #0]
 800db52:	4b59      	ldr	r3, [pc, #356]	; (800dcb8 <HAL_SD_IRQHandler+0x1b8>)
 800db54:	400b      	ands	r3, r1
 800db56:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800db66:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db76:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f003 0308 	and.w	r3, r3, #8
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d038      	beq.n	800dbf4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d104      	bne.n	800db96 <HAL_SD_IRQHandler+0x96>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 0320 	and.w	r3, r3, #32
 800db92:	2b00      	cmp	r3, #0
 800db94:	d011      	beq.n	800dbba <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f004 fe4c 	bl	8012838 <SDMMC_CmdStopTransfer>
 800dba0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d008      	beq.n	800dbba <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 f95b 	bl	800de70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4a3f      	ldr	r2, [pc, #252]	; (800dcbc <HAL_SD_IRQHandler+0x1bc>)
 800dbc0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	f003 0301 	and.w	r3, r3, #1
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d104      	bne.n	800dbe4 <HAL_SD_IRQHandler+0xe4>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f003 0302 	and.w	r3, r3, #2
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d003      	beq.n	800dbec <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f006 fe4d 	bl	8014884 <HAL_SD_RxCpltCallback>
 800dbea:	e13b      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f006 fe3f 	bl	8014870 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dbf2:	e137      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	f000 8132 	beq.w	800de64 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2200      	movs	r2, #0
 800dc06:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2200      	movs	r2, #0
 800dc16:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f003 0302 	and.w	r3, r3, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d104      	bne.n	800dc2c <HAL_SD_IRQHandler+0x12c>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f003 0320 	and.w	r3, r3, #32
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d011      	beq.n	800dc50 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4618      	mov	r0, r3
 800dc32:	f004 fe01 	bl	8012838 <SDMMC_CmdStopTransfer>
 800dc36:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d008      	beq.n	800dc50 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	431a      	orrs	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 f910 	bl	800de70 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	f003 0310 	and.w	r3, r3, #16
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d104      	bne.n	800dc72 <HAL_SD_IRQHandler+0x172>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f003 0320 	and.w	r3, r3, #32
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d002      	beq.n	800dc78 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f006 fdfc 	bl	8014870 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f003 0301 	and.w	r3, r3, #1
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d105      	bne.n	800dc8e <HAL_SD_IRQHandler+0x18e>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f003 0302 	and.w	r3, r3, #2
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	f000 80eb 	beq.w	800de64 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f006 fdf8 	bl	8014884 <HAL_SD_RxCpltCallback>
}
 800dc94:	e0e6      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00d      	beq.n	800dcc0 <HAL_SD_IRQHandler+0x1c0>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0308 	and.w	r3, r3, #8
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d008      	beq.n	800dcc0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f001 f8a8 	bl	800ee04 <SD_Write_IT>
 800dcb4:	e0d6      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
 800dcb6:	bf00      	nop
 800dcb8:	ffff3ec5 	.word	0xffff3ec5
 800dcbc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f000 809d 	beq.w	800de0a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd6:	f003 0302 	and.w	r3, r3, #2
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce2:	f043 0202 	orr.w	r2, r3, #2
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf0:	f003 0308 	and.w	r3, r3, #8
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfc:	f043 0208 	orr.w	r2, r3, #8
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0a:	f003 0320 	and.w	r3, r3, #32
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd16:	f043 0220 	orr.w	r2, r3, #32
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd24:	f003 0310 	and.w	r3, r3, #16
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d005      	beq.n	800dd38 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd30:	f043 0210 	orr.w	r2, r3, #16
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a4b      	ldr	r2, [pc, #300]	; (800de6c <HAL_SD_IRQHandler+0x36c>)
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dd4e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	68da      	ldr	r2, [r3, #12]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd5e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd6e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	68da      	ldr	r2, [r3, #12]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd7e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4618      	mov	r0, r3
 800dd86:	f004 fd57 	bl	8012838 <SDMMC_CmdStopTransfer>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	431a      	orrs	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	68da      	ldr	r2, [r3, #12]
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dda4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ddae:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	f003 0308 	and.w	r3, r3, #8
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00a      	beq.n	800ddd0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f000 f851 	bl	800de70 <HAL_SD_ErrorCallback>
}
 800ddce:	e049      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d044      	beq.n	800de64 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d040      	beq.n	800de64 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ddf0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f834 	bl	800de70 <HAL_SD_ErrorCallback>
}
 800de08:	e02c      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d025      	beq.n	800de64 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de20:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de28:	f003 0304 	and.w	r3, r3, #4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10c      	bne.n	800de4a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f003 0320 	and.w	r3, r3, #32
 800de36:	2b00      	cmp	r3, #0
 800de38:	d003      	beq.n	800de42 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f001 f84a 	bl	800eed4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800de40:	e010      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800de42:	6878      	ldr	r0, [r7, #4]
 800de44:	f001 f832 	bl	800eeac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800de48:	e00c      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f003 0320 	and.w	r3, r3, #32
 800de50:	2b00      	cmp	r3, #0
 800de52:	d003      	beq.n	800de5c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f001 f833 	bl	800eec0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800de5a:	e003      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f001 f81b 	bl	800ee98 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800de62:	e7ff      	b.n	800de64 <HAL_SD_IRQHandler+0x364>
 800de64:	bf00      	nop
 800de66:	3710      	adds	r7, #16
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	18000f3a 	.word	0x18000f3a

0800de70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de92:	0f9b      	lsrs	r3, r3, #30
 800de94:	b2da      	uxtb	r2, r3
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de9e:	0e9b      	lsrs	r3, r3, #26
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	f003 030f 	and.w	r3, r3, #15
 800dea6:	b2da      	uxtb	r2, r3
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deb0:	0e1b      	lsrs	r3, r3, #24
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0303 	and.w	r3, r3, #3
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec2:	0c1b      	lsrs	r3, r3, #16
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dece:	0a1b      	lsrs	r3, r3, #8
 800ded0:	b2da      	uxtb	r2, r3
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deda:	b2da      	uxtb	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee4:	0d1b      	lsrs	r3, r3, #20
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def0:	0c1b      	lsrs	r3, r3, #16
 800def2:	b2db      	uxtb	r3, r3
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	b2da      	uxtb	r2, r3
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df02:	0bdb      	lsrs	r3, r3, #15
 800df04:	b2db      	uxtb	r3, r3
 800df06:	f003 0301 	and.w	r3, r3, #1
 800df0a:	b2da      	uxtb	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df14:	0b9b      	lsrs	r3, r3, #14
 800df16:	b2db      	uxtb	r3, r3
 800df18:	f003 0301 	and.w	r3, r3, #1
 800df1c:	b2da      	uxtb	r2, r3
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df26:	0b5b      	lsrs	r3, r3, #13
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	f003 0301 	and.w	r3, r3, #1
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df38:	0b1b      	lsrs	r3, r3, #12
 800df3a:	b2db      	uxtb	r3, r3
 800df3c:	f003 0301 	and.w	r3, r3, #1
 800df40:	b2da      	uxtb	r2, r3
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2200      	movs	r2, #0
 800df4a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d163      	bne.n	800e01c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df58:	009a      	lsls	r2, r3, #2
 800df5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df5e:	4013      	ands	r3, r2
 800df60:	687a      	ldr	r2, [r7, #4]
 800df62:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800df64:	0f92      	lsrs	r2, r2, #30
 800df66:	431a      	orrs	r2, r3
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df70:	0edb      	lsrs	r3, r3, #27
 800df72:	b2db      	uxtb	r3, r3
 800df74:	f003 0307 	and.w	r3, r3, #7
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df82:	0e1b      	lsrs	r3, r3, #24
 800df84:	b2db      	uxtb	r3, r3
 800df86:	f003 0307 	and.w	r3, r3, #7
 800df8a:	b2da      	uxtb	r2, r3
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df94:	0d5b      	lsrs	r3, r3, #21
 800df96:	b2db      	uxtb	r3, r3
 800df98:	f003 0307 	and.w	r3, r3, #7
 800df9c:	b2da      	uxtb	r2, r3
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa6:	0c9b      	lsrs	r3, r3, #18
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	f003 0307 	and.w	r3, r3, #7
 800dfae:	b2da      	uxtb	r2, r3
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb8:	0bdb      	lsrs	r3, r3, #15
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	f003 0307 	and.w	r3, r3, #7
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	1c5a      	adds	r2, r3, #1
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	7e1b      	ldrb	r3, [r3, #24]
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	f003 0307 	and.w	r3, r3, #7
 800dfda:	3302      	adds	r3, #2
 800dfdc:	2201      	movs	r2, #1
 800dfde:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe2:	687a      	ldr	r2, [r7, #4]
 800dfe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfe6:	fb03 f202 	mul.w	r2, r3, r2
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	7a1b      	ldrb	r3, [r3, #8]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	f003 030f 	and.w	r3, r3, #15
 800dff8:	2201      	movs	r2, #1
 800dffa:	409a      	lsls	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e004:	687a      	ldr	r2, [r7, #4]
 800e006:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e008:	0a52      	lsrs	r2, r2, #9
 800e00a:	fb03 f202 	mul.w	r2, r3, r2
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e018:	655a      	str	r2, [r3, #84]	; 0x54
 800e01a:	e031      	b.n	800e080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e020:	2b01      	cmp	r3, #1
 800e022:	d11d      	bne.n	800e060 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e028:	041b      	lsls	r3, r3, #16
 800e02a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e032:	0c1b      	lsrs	r3, r3, #16
 800e034:	431a      	orrs	r2, r3
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	3301      	adds	r3, #1
 800e040:	029a      	lsls	r2, r3, #10
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e054:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	655a      	str	r2, [r3, #84]	; 0x54
 800e05e:	e00f      	b.n	800e080 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a58      	ldr	r2, [pc, #352]	; (800e1c8 <HAL_SD_GetCardCSD+0x344>)
 800e066:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e06c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e09d      	b.n	800e1bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e084:	0b9b      	lsrs	r3, r3, #14
 800e086:	b2db      	uxtb	r3, r3
 800e088:	f003 0301 	and.w	r3, r3, #1
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e096:	09db      	lsrs	r3, r3, #7
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a8:	b2db      	uxtb	r3, r3
 800e0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0b8:	0fdb      	lsrs	r3, r3, #31
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0c4:	0f5b      	lsrs	r3, r3, #29
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	f003 0303 	and.w	r3, r3, #3
 800e0cc:	b2da      	uxtb	r2, r3
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0d6:	0e9b      	lsrs	r3, r3, #26
 800e0d8:	b2db      	uxtb	r3, r3
 800e0da:	f003 0307 	and.w	r3, r3, #7
 800e0de:	b2da      	uxtb	r2, r3
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0e8:	0d9b      	lsrs	r3, r3, #22
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0fa:	0d5b      	lsrs	r3, r3, #21
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	b2da      	uxtb	r2, r3
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e116:	0c1b      	lsrs	r3, r3, #16
 800e118:	b2db      	uxtb	r3, r3
 800e11a:	f003 0301 	and.w	r3, r3, #1
 800e11e:	b2da      	uxtb	r2, r3
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12a:	0bdb      	lsrs	r3, r3, #15
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f003 0301 	and.w	r3, r3, #1
 800e132:	b2da      	uxtb	r2, r3
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e13e:	0b9b      	lsrs	r3, r3, #14
 800e140:	b2db      	uxtb	r3, r3
 800e142:	f003 0301 	and.w	r3, r3, #1
 800e146:	b2da      	uxtb	r2, r3
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e152:	0b5b      	lsrs	r3, r3, #13
 800e154:	b2db      	uxtb	r3, r3
 800e156:	f003 0301 	and.w	r3, r3, #1
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e166:	0b1b      	lsrs	r3, r3, #12
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	f003 0301 	and.w	r3, r3, #1
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e17a:	0a9b      	lsrs	r3, r3, #10
 800e17c:	b2db      	uxtb	r3, r3
 800e17e:	f003 0303 	and.w	r3, r3, #3
 800e182:	b2da      	uxtb	r2, r3
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e18e:	0a1b      	lsrs	r3, r3, #8
 800e190:	b2db      	uxtb	r3, r3
 800e192:	f003 0303 	and.w	r3, r3, #3
 800e196:	b2da      	uxtb	r2, r3
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1a2:	085b      	lsrs	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr
 800e1c8:	1fe00fff 	.word	0x1fe00fff

0800e1cc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b094      	sub	sp, #80	; 0x50
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	2b03      	cmp	r3, #3
 800e1e6:	d101      	bne.n	800e1ec <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e0a7      	b.n	800e33c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e1ec:	f107 0308 	add.w	r3, r7, #8
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fb62 	bl	800e8bc <SD_SendSDStatus>
 800e1f8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d011      	beq.n	800e224 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a4f      	ldr	r2, [pc, #316]	; (800e344 <HAL_SD_GetCardStatus+0x178>)
 800e206:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e20c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e20e:	431a      	orrs	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2201      	movs	r2, #1
 800e218:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e222:	e070      	b.n	800e306 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	099b      	lsrs	r3, r3, #6
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	f003 0303 	and.w	r3, r3, #3
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	095b      	lsrs	r3, r3, #5
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	b2da      	uxtb	r2, r3
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	0a1b      	lsrs	r3, r3, #8
 800e248:	b29b      	uxth	r3, r3
 800e24a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e24e:	b29a      	uxth	r2, r3
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	0e1b      	lsrs	r3, r3, #24
 800e254:	b29b      	uxth	r3, r3
 800e256:	4313      	orrs	r3, r2
 800e258:	b29a      	uxth	r2, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	061a      	lsls	r2, r3, #24
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e26a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	0a1b      	lsrs	r3, r3, #8
 800e270:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e274:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	0e1b      	lsrs	r3, r3, #24
 800e27a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e280:	693b      	ldr	r3, [r7, #16]
 800e282:	b2da      	uxtb	r2, r3
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	0a1b      	lsrs	r3, r3, #8
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	0d1b      	lsrs	r3, r3, #20
 800e296:	b2db      	uxtb	r3, r3
 800e298:	f003 030f 	and.w	r3, r3, #15
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	0c1b      	lsrs	r3, r3, #16
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	b29b      	uxth	r3, r3
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	0a9b      	lsrs	r3, r3, #10
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	0a1b      	lsrs	r3, r3, #8
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f003 0303 	and.w	r3, r3, #3
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	091b      	lsrs	r3, r3, #4
 800e2e2:	b2db      	uxtb	r3, r3
 800e2e4:	f003 030f 	and.w	r3, r3, #15
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	b2db      	uxtb	r3, r3
 800e2f2:	f003 030f 	and.w	r3, r3, #15
 800e2f6:	b2da      	uxtb	r2, r3
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	0e1b      	lsrs	r3, r3, #24
 800e300:	b2da      	uxtb	r2, r3
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e30e:	4618      	mov	r0, r3
 800e310:	f004 f9e2 	bl	80126d8 <SDMMC_CmdBlockLength>
 800e314:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00d      	beq.n	800e338 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a08      	ldr	r2, [pc, #32]	; (800e344 <HAL_SD_GetCardStatus+0x178>)
 800e322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e328:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e332:	2301      	movs	r3, #1
 800e334:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e338:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3750      	adds	r7, #80	; 0x50
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	1fe00fff 	.word	0x1fe00fff

0800e348 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr

0800e3a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e3a0:	b590      	push	{r4, r7, lr}
 800e3a2:	b08d      	sub	sp, #52	; 0x34
 800e3a4:	af02      	add	r7, sp, #8
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2203      	movs	r2, #3
 800e3b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3bc:	2b03      	cmp	r3, #3
 800e3be:	d02e      	beq.n	800e41e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3c6:	d106      	bne.n	800e3d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	635a      	str	r2, [r3, #52]	; 0x34
 800e3d4:	e029      	b.n	800e42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3dc:	d10a      	bne.n	800e3f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fb64 	bl	800eaac <SD_WideBus_Enable>
 800e3e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3ea:	6a3b      	ldr	r3, [r7, #32]
 800e3ec:	431a      	orrs	r2, r3
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	635a      	str	r2, [r3, #52]	; 0x34
 800e3f2:	e01a      	b.n	800e42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10a      	bne.n	800e410 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 fba1 	bl	800eb42 <SD_WideBus_Disable>
 800e400:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	431a      	orrs	r2, r3
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	635a      	str	r2, [r3, #52]	; 0x34
 800e40e:	e00c      	b.n	800e42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e414:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	635a      	str	r2, [r3, #52]	; 0x34
 800e41c:	e005      	b.n	800e42a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e422:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d007      	beq.n	800e442 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	4a5f      	ldr	r2, [pc, #380]	; (800e5b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e438:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e440:	e096      	b.n	800e570 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e442:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e446:	f04f 0100 	mov.w	r1, #0
 800e44a:	f7fd fcf5 	bl	800be38 <HAL_RCCEx_GetPeriphCLKFreq>
 800e44e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e450:	69fb      	ldr	r3, [r7, #28]
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 8083 	beq.w	800e55e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	691b      	ldr	r3, [r3, #16]
 800e46c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	695a      	ldr	r2, [r3, #20]
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	4950      	ldr	r1, [pc, #320]	; (800e5b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e476:	fba1 1303 	umull	r1, r3, r1, r3
 800e47a:	0e1b      	lsrs	r3, r3, #24
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d303      	bcc.n	800e488 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	695b      	ldr	r3, [r3, #20]
 800e484:	61bb      	str	r3, [r7, #24]
 800e486:	e05a      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e490:	d103      	bne.n	800e49a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	61bb      	str	r3, [r7, #24]
 800e498:	e051      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e49e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4a2:	d126      	bne.n	800e4f2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d10e      	bne.n	800e4ca <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e4ac:	69fb      	ldr	r3, [r7, #28]
 800e4ae:	4a43      	ldr	r2, [pc, #268]	; (800e5bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d906      	bls.n	800e4c2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	4a40      	ldr	r2, [pc, #256]	; (800e5b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4bc:	0e5b      	lsrs	r3, r3, #25
 800e4be:	61bb      	str	r3, [r7, #24]
 800e4c0:	e03d      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	695b      	ldr	r3, [r3, #20]
 800e4c6:	61bb      	str	r3, [r7, #24]
 800e4c8:	e039      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	695b      	ldr	r3, [r3, #20]
 800e4ce:	005b      	lsls	r3, r3, #1
 800e4d0:	69fa      	ldr	r2, [r7, #28]
 800e4d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4d6:	4a39      	ldr	r2, [pc, #228]	; (800e5bc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d906      	bls.n	800e4ea <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4dc:	69fb      	ldr	r3, [r7, #28]
 800e4de:	4a36      	ldr	r2, [pc, #216]	; (800e5b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4e4:	0e5b      	lsrs	r3, r3, #25
 800e4e6:	61bb      	str	r3, [r7, #24]
 800e4e8:	e029      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	695b      	ldr	r3, [r3, #20]
 800e4ee:	61bb      	str	r3, [r7, #24]
 800e4f0:	e025      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10e      	bne.n	800e518 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e4fa:	69fb      	ldr	r3, [r7, #28]
 800e4fc:	4a30      	ldr	r2, [pc, #192]	; (800e5c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d906      	bls.n	800e510 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e502:	69fb      	ldr	r3, [r7, #28]
 800e504:	4a2c      	ldr	r2, [pc, #176]	; (800e5b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e506:	fba2 2303 	umull	r2, r3, r2, r3
 800e50a:	0e1b      	lsrs	r3, r3, #24
 800e50c:	61bb      	str	r3, [r7, #24]
 800e50e:	e016      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	695b      	ldr	r3, [r3, #20]
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	e012      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	695b      	ldr	r3, [r3, #20]
 800e51c:	005b      	lsls	r3, r3, #1
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	fbb2 f3f3 	udiv	r3, r2, r3
 800e524:	4a26      	ldr	r2, [pc, #152]	; (800e5c0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d906      	bls.n	800e538 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	4a22      	ldr	r2, [pc, #136]	; (800e5b8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e52e:	fba2 2303 	umull	r2, r3, r2, r3
 800e532:	0e1b      	lsrs	r3, r3, #24
 800e534:	61bb      	str	r3, [r7, #24]
 800e536:	e002      	b.n	800e53e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	695b      	ldr	r3, [r3, #20]
 800e53c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681c      	ldr	r4, [r3, #0]
 800e542:	466a      	mov	r2, sp
 800e544:	f107 0314 	add.w	r3, r7, #20
 800e548:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e54c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e556:	4620      	mov	r0, r4
 800e558:	f003 ffe0 	bl	801251c <SDMMC_Init>
 800e55c:	e008      	b.n	800e570 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e562:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e578:	4618      	mov	r0, r3
 800e57a:	f004 f8ad 	bl	80126d8 <SDMMC_CmdBlockLength>
 800e57e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e580:	6a3b      	ldr	r3, [r7, #32]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d00c      	beq.n	800e5a0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a0a      	ldr	r2, [pc, #40]	; (800e5b4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e58c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e592:	6a3b      	ldr	r3, [r7, #32]
 800e594:	431a      	orrs	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e59a:	2301      	movs	r3, #1
 800e59c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e5a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	372c      	adds	r7, #44	; 0x2c
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd90      	pop	{r4, r7, pc}
 800e5b4:	1fe00fff 	.word	0x1fe00fff
 800e5b8:	55e63b89 	.word	0x55e63b89
 800e5bc:	02faf080 	.word	0x02faf080
 800e5c0:	017d7840 	.word	0x017d7840

0800e5c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b086      	sub	sp, #24
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e5d0:	f107 030c 	add.w	r3, r7, #12
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f000 fa40 	bl	800ea5c <SD_SendStatus>
 800e5dc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d005      	beq.n	800e5f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	431a      	orrs	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	0a5b      	lsrs	r3, r3, #9
 800e5f4:	f003 030f 	and.w	r3, r3, #15
 800e5f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e5fa:	693b      	ldr	r3, [r7, #16]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b090      	sub	sp, #64	; 0x40
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e60c:	2300      	movs	r3, #0
 800e60e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e610:	f7f5 fb86 	bl	8003d20 <HAL_GetTick>
 800e614:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f003 ffd7 	bl	80125ce <SDMMC_GetPowerState>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e626:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e62a:	e0b5      	b.n	800e798 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e630:	2b03      	cmp	r3, #3
 800e632:	d02e      	beq.n	800e692 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	4618      	mov	r0, r3
 800e63a:	f004 fa22 	bl	8012a82 <SDMMC_CmdSendCID>
 800e63e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <SD_InitCard+0x46>
    {
      return errorstate;
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	e0a6      	b.n	800e798 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2100      	movs	r1, #0
 800e650:	4618      	mov	r0, r3
 800e652:	f004 f802 	bl	801265a <SDMMC_GetResponse>
 800e656:	4602      	mov	r2, r0
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	2104      	movs	r1, #4
 800e662:	4618      	mov	r0, r3
 800e664:	f003 fff9 	bl	801265a <SDMMC_GetResponse>
 800e668:	4602      	mov	r2, r0
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2108      	movs	r1, #8
 800e674:	4618      	mov	r0, r3
 800e676:	f003 fff0 	bl	801265a <SDMMC_GetResponse>
 800e67a:	4602      	mov	r2, r0
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	210c      	movs	r1, #12
 800e686:	4618      	mov	r0, r3
 800e688:	f003 ffe7 	bl	801265a <SDMMC_GetResponse>
 800e68c:	4602      	mov	r2, r0
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e696:	2b03      	cmp	r3, #3
 800e698:	d01d      	beq.n	800e6d6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e69a:	e019      	b.n	800e6d0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	f107 020a 	add.w	r2, r7, #10
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f004 fa2a 	bl	8012b00 <SDMMC_CmdSetRelAdd>
 800e6ac:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d001      	beq.n	800e6b8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6b6:	e06f      	b.n	800e798 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e6b8:	f7f5 fb32 	bl	8003d20 <HAL_GetTick>
 800e6bc:	4602      	mov	r2, r0
 800e6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6c0:	1ad3      	subs	r3, r2, r3
 800e6c2:	f241 3287 	movw	r2, #4999	; 0x1387
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d902      	bls.n	800e6d0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e6ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6ce:	e063      	b.n	800e798 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e6d0:	897b      	ldrh	r3, [r7, #10]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d0e2      	beq.n	800e69c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6da:	2b03      	cmp	r3, #3
 800e6dc:	d036      	beq.n	800e74c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e6de:	897b      	ldrh	r3, [r7, #10]
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ee:	041b      	lsls	r3, r3, #16
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f004 f9e4 	bl	8012ac0 <SDMMC_CmdSendCSD>
 800e6f8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <SD_InitCard+0x100>
    {
      return errorstate;
 800e700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e702:	e049      	b.n	800e798 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f003 ffa5 	bl	801265a <SDMMC_GetResponse>
 800e710:	4602      	mov	r2, r0
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2104      	movs	r1, #4
 800e71c:	4618      	mov	r0, r3
 800e71e:	f003 ff9c 	bl	801265a <SDMMC_GetResponse>
 800e722:	4602      	mov	r2, r0
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2108      	movs	r1, #8
 800e72e:	4618      	mov	r0, r3
 800e730:	f003 ff93 	bl	801265a <SDMMC_GetResponse>
 800e734:	4602      	mov	r2, r0
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	210c      	movs	r1, #12
 800e740:	4618      	mov	r0, r3
 800e742:	f003 ff8a 	bl	801265a <SDMMC_GetResponse>
 800e746:	4602      	mov	r2, r0
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	2104      	movs	r1, #4
 800e752:	4618      	mov	r0, r3
 800e754:	f003 ff81 	bl	801265a <SDMMC_GetResponse>
 800e758:	4603      	mov	r3, r0
 800e75a:	0d1a      	lsrs	r2, r3, #20
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e760:	f107 030c 	add.w	r3, r7, #12
 800e764:	4619      	mov	r1, r3
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f7ff fb8c 	bl	800de84 <HAL_SD_GetCardCSD>
 800e76c:	4603      	mov	r3, r0
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e772:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e776:	e00f      	b.n	800e798 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e780:	041b      	lsls	r3, r3, #16
 800e782:	4619      	mov	r1, r3
 800e784:	4610      	mov	r0, r2
 800e786:	f004 f893 	bl	80128b0 <SDMMC_CmdSelDesel>
 800e78a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d001      	beq.n	800e796 <SD_InitCard+0x192>
  {
    return errorstate;
 800e792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e794:	e000      	b.n	800e798 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3740      	adds	r7, #64	; 0x40
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b086      	sub	sp, #24
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f004 f89c 	bl	80128f6 <SDMMC_CmdGoIdleState>
 800e7be:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <SD_PowerON+0x2a>
  {
    return errorstate;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	e072      	b.n	800e8b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f004 f8af 	bl	8012932 <SDMMC_CmdOperCond>
 800e7d4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7dc:	d10d      	bne.n	800e7fa <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f004 f884 	bl	80128f6 <SDMMC_CmdGoIdleState>
 800e7ee:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d004      	beq.n	800e800 <SD_PowerON+0x60>
    {
      return errorstate;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	e05a      	b.n	800e8b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e804:	2b01      	cmp	r3, #1
 800e806:	d137      	bne.n	800e878 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	2100      	movs	r1, #0
 800e80e:	4618      	mov	r0, r3
 800e810:	f004 f8af 	bl	8012972 <SDMMC_CmdAppCommand>
 800e814:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d02d      	beq.n	800e878 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e81c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e820:	e046      	b.n	800e8b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	2100      	movs	r1, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f004 f8a2 	bl	8012972 <SDMMC_CmdAppCommand>
 800e82e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	e03a      	b.n	800e8b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	491e      	ldr	r1, [pc, #120]	; (800e8b8 <SD_PowerON+0x118>)
 800e840:	4618      	mov	r0, r3
 800e842:	f004 f8b9 	bl	80129b8 <SDMMC_CmdAppOperCommand>
 800e846:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d002      	beq.n	800e854 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e84e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e852:	e02d      	b.n	800e8b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	2100      	movs	r1, #0
 800e85a:	4618      	mov	r0, r3
 800e85c:	f003 fefd 	bl	801265a <SDMMC_GetResponse>
 800e860:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	0fdb      	lsrs	r3, r3, #31
 800e866:	2b01      	cmp	r3, #1
 800e868:	d101      	bne.n	800e86e <SD_PowerON+0xce>
 800e86a:	2301      	movs	r3, #1
 800e86c:	e000      	b.n	800e870 <SD_PowerON+0xd0>
 800e86e:	2300      	movs	r3, #0
 800e870:	613b      	str	r3, [r7, #16]

    count++;
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	3301      	adds	r3, #1
 800e876:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e87e:	4293      	cmp	r3, r2
 800e880:	d802      	bhi.n	800e888 <SD_PowerON+0xe8>
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d0cc      	beq.n	800e822 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e88e:	4293      	cmp	r3, r2
 800e890:	d902      	bls.n	800e898 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e892:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e896:	e00b      	b.n	800e8b0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d002      	beq.n	800e8ae <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3718      	adds	r7, #24
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	c1100000 	.word	0xc1100000

0800e8bc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b08c      	sub	sp, #48	; 0x30
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e8c6:	f7f5 fa2b 	bl	8003d20 <HAL_GetTick>
 800e8ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f003 febf 	bl	801265a <SDMMC_GetResponse>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8e6:	d102      	bne.n	800e8ee <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8ec:	e0b0      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2140      	movs	r1, #64	; 0x40
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f003 feef 	bl	80126d8 <SDMMC_CmdBlockLength>
 800e8fa:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d005      	beq.n	800e90e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e90a:	6a3b      	ldr	r3, [r7, #32]
 800e90c:	e0a0      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681a      	ldr	r2, [r3, #0]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e916:	041b      	lsls	r3, r3, #16
 800e918:	4619      	mov	r1, r3
 800e91a:	4610      	mov	r0, r2
 800e91c:	f004 f829 	bl	8012972 <SDMMC_CmdAppCommand>
 800e920:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e922:	6a3b      	ldr	r3, [r7, #32]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d005      	beq.n	800e934 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	e08d      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e934:	f04f 33ff 	mov.w	r3, #4294967295
 800e938:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e93a:	2340      	movs	r3, #64	; 0x40
 800e93c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e93e:	2360      	movs	r3, #96	; 0x60
 800e940:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e942:	2302      	movs	r3, #2
 800e944:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e946:	2300      	movs	r3, #0
 800e948:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e94a:	2301      	movs	r3, #1
 800e94c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f107 0208 	add.w	r2, r7, #8
 800e956:	4611      	mov	r1, r2
 800e958:	4618      	mov	r0, r3
 800e95a:	f003 fe91 	bl	8012680 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f004 f911 	bl	8012b8a <SDMMC_CmdStatusRegister>
 800e968:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e96a:	6a3b      	ldr	r3, [r7, #32]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d02b      	beq.n	800e9c8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e978:	6a3b      	ldr	r3, [r7, #32]
 800e97a:	e069      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e986:	2b00      	cmp	r3, #0
 800e988:	d013      	beq.n	800e9b2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e98a:	2300      	movs	r3, #0
 800e98c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e98e:	e00d      	b.n	800e9ac <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4618      	mov	r0, r3
 800e996:	f003 fdeb 	bl	8012570 <SDMMC_ReadFIFO>
 800e99a:	4602      	mov	r2, r0
 800e99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99e:	601a      	str	r2, [r3, #0]
        pData++;
 800e9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a2:	3304      	adds	r3, #4
 800e9a4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ae:	2b07      	cmp	r3, #7
 800e9b0:	d9ee      	bls.n	800e990 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9b2:	f7f5 f9b5 	bl	8003d20 <HAL_GetTick>
 800e9b6:	4602      	mov	r2, r0
 800e9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ba:	1ad3      	subs	r3, r2, r3
 800e9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9c0:	d102      	bne.n	800e9c8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9c6:	e043      	b.n	800ea50 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ce:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d0d2      	beq.n	800e97c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9dc:	f003 0308 	and.w	r3, r3, #8
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e9e4:	2308      	movs	r3, #8
 800e9e6:	e033      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9ee:	f003 0302 	and.w	r3, r3, #2
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d001      	beq.n	800e9fa <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e9f6:	2302      	movs	r3, #2
 800e9f8:	e02a      	b.n	800ea50 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea00:	f003 0320 	and.w	r3, r3, #32
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d017      	beq.n	800ea38 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ea08:	2320      	movs	r3, #32
 800ea0a:	e021      	b.n	800ea50 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	4618      	mov	r0, r3
 800ea12:	f003 fdad 	bl	8012570 <SDMMC_ReadFIFO>
 800ea16:	4602      	mov	r2, r0
 800ea18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1a:	601a      	str	r2, [r3, #0]
    pData++;
 800ea1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1e:	3304      	adds	r3, #4
 800ea20:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea22:	f7f5 f97d 	bl	8003d20 <HAL_GetTick>
 800ea26:	4602      	mov	r2, r0
 800ea28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2a:	1ad3      	subs	r3, r2, r3
 800ea2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea30:	d102      	bne.n	800ea38 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea36:	e00b      	b.n	800ea50 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d1e2      	bne.n	800ea0c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	4a03      	ldr	r2, [pc, #12]	; (800ea58 <SD_SendSDStatus+0x19c>)
 800ea4c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3730      	adds	r7, #48	; 0x30
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	18000f3a 	.word	0x18000f3a

0800ea5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b084      	sub	sp, #16
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d102      	bne.n	800ea72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea70:	e018      	b.n	800eaa4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681a      	ldr	r2, [r3, #0]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea7a:	041b      	lsls	r3, r3, #16
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4610      	mov	r0, r2
 800ea80:	f004 f860 	bl	8012b44 <SDMMC_CmdSendStatus>
 800ea84:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d001      	beq.n	800ea90 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	e009      	b.n	800eaa4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	2100      	movs	r1, #0
 800ea96:	4618      	mov	r0, r3
 800ea98:	f003 fddf 	bl	801265a <SDMMC_GetResponse>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b086      	sub	sp, #24
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eab4:	2300      	movs	r3, #0
 800eab6:	60fb      	str	r3, [r7, #12]
 800eab8:	2300      	movs	r3, #0
 800eaba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2100      	movs	r1, #0
 800eac2:	4618      	mov	r0, r3
 800eac4:	f003 fdc9 	bl	801265a <SDMMC_GetResponse>
 800eac8:	4603      	mov	r3, r0
 800eaca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ead2:	d102      	bne.n	800eada <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ead4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ead8:	e02f      	b.n	800eb3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eada:	f107 030c 	add.w	r3, r7, #12
 800eade:	4619      	mov	r1, r3
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 f879 	bl	800ebd8 <SD_FindSCR>
 800eae6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d001      	beq.n	800eaf2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	e023      	b.n	800eb3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d01c      	beq.n	800eb36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb04:	041b      	lsls	r3, r3, #16
 800eb06:	4619      	mov	r1, r3
 800eb08:	4610      	mov	r0, r2
 800eb0a:	f003 ff32 	bl	8012972 <SDMMC_CmdAppCommand>
 800eb0e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb10:	697b      	ldr	r3, [r7, #20]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	e00f      	b.n	800eb3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2102      	movs	r1, #2
 800eb20:	4618      	mov	r0, r3
 800eb22:	f003 ff69 	bl	80129f8 <SDMMC_CmdBusWidth>
 800eb26:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d001      	beq.n	800eb32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	e003      	b.n	800eb3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb32:	2300      	movs	r3, #0
 800eb34:	e001      	b.n	800eb3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3718      	adds	r7, #24
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}

0800eb42 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb42:	b580      	push	{r7, lr}
 800eb44:	b086      	sub	sp, #24
 800eb46:	af00      	add	r7, sp, #0
 800eb48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	60fb      	str	r3, [r7, #12]
 800eb4e:	2300      	movs	r3, #0
 800eb50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	2100      	movs	r1, #0
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f003 fd7e 	bl	801265a <SDMMC_GetResponse>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb68:	d102      	bne.n	800eb70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb6e:	e02f      	b.n	800ebd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb70:	f107 030c 	add.w	r3, r7, #12
 800eb74:	4619      	mov	r1, r3
 800eb76:	6878      	ldr	r0, [r7, #4]
 800eb78:	f000 f82e 	bl	800ebd8 <SD_FindSCR>
 800eb7c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d001      	beq.n	800eb88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	e023      	b.n	800ebd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01c      	beq.n	800ebcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb9a:	041b      	lsls	r3, r3, #16
 800eb9c:	4619      	mov	r1, r3
 800eb9e:	4610      	mov	r0, r2
 800eba0:	f003 fee7 	bl	8012972 <SDMMC_CmdAppCommand>
 800eba4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d001      	beq.n	800ebb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	e00f      	b.n	800ebd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f003 ff1e 	bl	80129f8 <SDMMC_CmdBusWidth>
 800ebbc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	e003      	b.n	800ebd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	e001      	b.n	800ebd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3718      	adds	r7, #24
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b08e      	sub	sp, #56	; 0x38
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ebe2:	f7f5 f89d 	bl	8003d20 <HAL_GetTick>
 800ebe6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ebec:	2300      	movs	r3, #0
 800ebee:	60bb      	str	r3, [r7, #8]
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2108      	movs	r1, #8
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f003 fd6a 	bl	80126d8 <SDMMC_CmdBlockLength>
 800ec04:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d001      	beq.n	800ec10 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ec0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0e:	e0ad      	b.n	800ed6c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec18:	041b      	lsls	r3, r3, #16
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4610      	mov	r0, r2
 800ec1e:	f003 fea8 	bl	8012972 <SDMMC_CmdAppCommand>
 800ec22:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d001      	beq.n	800ec2e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	e09e      	b.n	800ed6c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec32:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec34:	2308      	movs	r3, #8
 800ec36:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ec38:	2330      	movs	r3, #48	; 0x30
 800ec3a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec3c:	2302      	movs	r3, #2
 800ec3e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec44:	2301      	movs	r3, #1
 800ec46:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f107 0210 	add.w	r2, r7, #16
 800ec50:	4611      	mov	r1, r2
 800ec52:	4618      	mov	r0, r3
 800ec54:	f003 fd14 	bl	8012680 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f003 feee 	bl	8012a3e <SDMMC_CmdSendSCR>
 800ec62:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d027      	beq.n	800ecba <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ec6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec6c:	e07e      	b.n	800ed6c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d113      	bne.n	800eca4 <SD_FindSCR+0xcc>
 800ec7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d110      	bne.n	800eca4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	4618      	mov	r0, r3
 800ec88:	f003 fc72 	bl	8012570 <SDMMC_ReadFIFO>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4618      	mov	r0, r3
 800ec96:	f003 fc6b 	bl	8012570 <SDMMC_ReadFIFO>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	60fb      	str	r3, [r7, #12]
      index++;
 800ec9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca0:	3301      	adds	r3, #1
 800eca2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eca4:	f7f5 f83c 	bl	8003d20 <HAL_GetTick>
 800eca8:	4602      	mov	r2, r0
 800ecaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecac:	1ad3      	subs	r3, r2, r3
 800ecae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb2:	d102      	bne.n	800ecba <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ecb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ecb8:	e058      	b.n	800ed6c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecc0:	f240 532a 	movw	r3, #1322	; 0x52a
 800ecc4:	4013      	ands	r3, r2
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d0d1      	beq.n	800ec6e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecd0:	f003 0308 	and.w	r3, r3, #8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d005      	beq.n	800ece4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2208      	movs	r2, #8
 800ecde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ece0:	2308      	movs	r3, #8
 800ece2:	e043      	b.n	800ed6c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecea:	f003 0302 	and.w	r3, r3, #2
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d005      	beq.n	800ecfe <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ecfa:	2302      	movs	r3, #2
 800ecfc:	e036      	b.n	800ed6c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed04:	f003 0320 	and.w	r3, r3, #32
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d005      	beq.n	800ed18 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	2220      	movs	r2, #32
 800ed12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed14:	2320      	movs	r3, #32
 800ed16:	e029      	b.n	800ed6c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	4a15      	ldr	r2, [pc, #84]	; (800ed74 <SD_FindSCR+0x19c>)
 800ed1e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	061a      	lsls	r2, r3, #24
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	021b      	lsls	r3, r3, #8
 800ed28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed2c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	0a1b      	lsrs	r3, r3, #8
 800ed32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed36:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	0e1b      	lsrs	r3, r3, #24
 800ed3c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	601a      	str	r2, [r3, #0]
    scr++;
 800ed42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed44:	3304      	adds	r3, #4
 800ed46:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	061a      	lsls	r2, r3, #24
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	021b      	lsls	r3, r3, #8
 800ed50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed54:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	0a1b      	lsrs	r3, r3, #8
 800ed5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed5e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	0e1b      	lsrs	r3, r3, #24
 800ed64:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed68:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3738      	adds	r7, #56	; 0x38
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	18000f3a 	.word	0x18000f3a

0800ed78 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed84:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8a:	2b1f      	cmp	r3, #31
 800ed8c:	d936      	bls.n	800edfc <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed8e:	2300      	movs	r3, #0
 800ed90:	617b      	str	r3, [r7, #20]
 800ed92:	e027      	b.n	800ede4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f003 fbe9 	bl	8012570 <SDMMC_ReadFIFO>
 800ed9e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	3301      	adds	r3, #1
 800edac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	0a1b      	lsrs	r3, r3, #8
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	3301      	adds	r3, #1
 800edbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	0c1b      	lsrs	r3, r3, #16
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	3301      	adds	r3, #1
 800edcc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	0e1b      	lsrs	r3, r3, #24
 800edd2:	b2da      	uxtb	r2, r3
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	3301      	adds	r3, #1
 800eddc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	3301      	adds	r3, #1
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	697b      	ldr	r3, [r7, #20]
 800ede6:	2b07      	cmp	r3, #7
 800ede8:	d9d4      	bls.n	800ed94 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	693a      	ldr	r2, [r7, #16]
 800edee:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf4:	f1a3 0220 	sub.w	r2, r3, #32
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800edfc:	bf00      	nop
 800edfe:	3718      	adds	r7, #24
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	69db      	ldr	r3, [r3, #28]
 800ee10:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a1b      	ldr	r3, [r3, #32]
 800ee16:	2b1f      	cmp	r3, #31
 800ee18:	d93a      	bls.n	800ee90 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	617b      	str	r3, [r7, #20]
 800ee1e:	e02b      	b.n	800ee78 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee26:	693b      	ldr	r3, [r7, #16]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	021a      	lsls	r2, r3, #8
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee3e:	693b      	ldr	r3, [r7, #16]
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	041a      	lsls	r2, r3, #16
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	4313      	orrs	r3, r2
 800ee48:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee50:	693b      	ldr	r3, [r7, #16]
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	061a      	lsls	r2, r3, #24
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f107 020c 	add.w	r2, r7, #12
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f003 fb8c 	bl	801258a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	3301      	adds	r3, #1
 800ee76:	617b      	str	r3, [r7, #20]
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	2b07      	cmp	r3, #7
 800ee7c:	d9d0      	bls.n	800ee20 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	f1a3 0220 	sub.w	r2, r3, #32
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	621a      	str	r2, [r3, #32]
  }
}
 800ee90:	bf00      	nop
 800ee92:	3718      	adds	r7, #24
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eeb4:	bf00      	nop
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b083      	sub	sp, #12
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eec8:	bf00      	nop
 800eeca:	370c      	adds	r7, #12
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eedc:	bf00      	nop
 800eede:	370c      	adds	r7, #12
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr

0800eee8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d101      	bne.n	800eefa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e10f      	b.n	800f11a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2200      	movs	r2, #0
 800eefe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a87      	ldr	r2, [pc, #540]	; (800f124 <HAL_SPI_Init+0x23c>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d00f      	beq.n	800ef2a <HAL_SPI_Init+0x42>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a86      	ldr	r2, [pc, #536]	; (800f128 <HAL_SPI_Init+0x240>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d00a      	beq.n	800ef2a <HAL_SPI_Init+0x42>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a84      	ldr	r2, [pc, #528]	; (800f12c <HAL_SPI_Init+0x244>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d005      	beq.n	800ef2a <HAL_SPI_Init+0x42>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	2b0f      	cmp	r3, #15
 800ef24:	d901      	bls.n	800ef2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	e0f7      	b.n	800f11a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fd5a 	bl	800f9e4 <SPI_GetPacketSize>
 800ef30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a7b      	ldr	r2, [pc, #492]	; (800f124 <HAL_SPI_Init+0x23c>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d00c      	beq.n	800ef56 <HAL_SPI_Init+0x6e>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a79      	ldr	r2, [pc, #484]	; (800f128 <HAL_SPI_Init+0x240>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d007      	beq.n	800ef56 <HAL_SPI_Init+0x6e>
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4a78      	ldr	r2, [pc, #480]	; (800f12c <HAL_SPI_Init+0x244>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d002      	beq.n	800ef56 <HAL_SPI_Init+0x6e>
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2b08      	cmp	r3, #8
 800ef54:	d811      	bhi.n	800ef7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef5a:	4a72      	ldr	r2, [pc, #456]	; (800f124 <HAL_SPI_Init+0x23c>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d009      	beq.n	800ef74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a70      	ldr	r2, [pc, #448]	; (800f128 <HAL_SPI_Init+0x240>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d004      	beq.n	800ef74 <HAL_SPI_Init+0x8c>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a6f      	ldr	r2, [pc, #444]	; (800f12c <HAL_SPI_Init+0x244>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d104      	bne.n	800ef7e <HAL_SPI_Init+0x96>
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b10      	cmp	r3, #16
 800ef78:	d901      	bls.n	800ef7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e0cd      	b.n	800f11a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d106      	bne.n	800ef98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7f4 f8dc 	bl	8003150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2202      	movs	r2, #2
 800ef9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f022 0201 	bic.w	r2, r2, #1
 800efae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800efba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800efc4:	d119      	bne.n	800effa <HAL_SPI_Init+0x112>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	685b      	ldr	r3, [r3, #4]
 800efca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efce:	d103      	bne.n	800efd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d008      	beq.n	800efea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10c      	bne.n	800effa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efe8:	d107      	bne.n	800effa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eff8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00f      	beq.n	800f026 <HAL_SPI_Init+0x13e>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	2b06      	cmp	r3, #6
 800f00c:	d90b      	bls.n	800f026 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	430a      	orrs	r2, r1
 800f022:	601a      	str	r2, [r3, #0]
 800f024:	e007      	b.n	800f036 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f034:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	69da      	ldr	r2, [r3, #28]
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03e:	431a      	orrs	r2, r3
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	431a      	orrs	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f048:	ea42 0103 	orr.w	r1, r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	68da      	ldr	r2, [r3, #12]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	430a      	orrs	r2, r1
 800f056:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f060:	431a      	orrs	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f066:	431a      	orrs	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	431a      	orrs	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	691b      	ldr	r3, [r3, #16]
 800f072:	431a      	orrs	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	431a      	orrs	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	431a      	orrs	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	431a      	orrs	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f08a:	431a      	orrs	r2, r3
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	689b      	ldr	r3, [r3, #8]
 800f090:	431a      	orrs	r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f096:	ea42 0103 	orr.w	r1, r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	430a      	orrs	r2, r1
 800f0a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d113      	bne.n	800f0d6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f0d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f022 0201 	bic.w	r2, r2, #1
 800f0e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d00a      	beq.n	800f108 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	430a      	orrs	r2, r1
 800f106:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	2200      	movs	r2, #0
 800f10c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f118:	2300      	movs	r3, #0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}
 800f122:	bf00      	nop
 800f124:	40013000 	.word	0x40013000
 800f128:	40003800 	.word	0x40003800
 800f12c:	40003c00 	.word	0x40003c00

0800f130 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b08a      	sub	sp, #40	; 0x28
 800f134:	af02      	add	r7, sp, #8
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	603b      	str	r3, [r7, #0]
 800f13c:	4613      	mov	r3, r2
 800f13e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	3320      	adds	r3, #32
 800f146:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f152:	2b01      	cmp	r3, #1
 800f154:	d101      	bne.n	800f15a <HAL_SPI_Transmit+0x2a>
 800f156:	2302      	movs	r3, #2
 800f158:	e1e1      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2201      	movs	r2, #1
 800f15e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f162:	f7f4 fddd 	bl	8003d20 <HAL_GetTick>
 800f166:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	2b01      	cmp	r3, #1
 800f172:	d007      	beq.n	800f184 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f174:	2302      	movs	r3, #2
 800f176:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f180:	7efb      	ldrb	r3, [r7, #27]
 800f182:	e1cc      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d002      	beq.n	800f190 <HAL_SPI_Transmit+0x60>
 800f18a:	88fb      	ldrh	r3, [r7, #6]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d107      	bne.n	800f1a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f190:	2301      	movs	r3, #1
 800f192:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2200      	movs	r2, #0
 800f198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f19c:	7efb      	ldrb	r3, [r7, #27]
 800f19e:	e1be      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2203      	movs	r2, #3
 800f1a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	88fa      	ldrh	r2, [r7, #6]
 800f1ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	88fa      	ldrh	r2, [r7, #6]
 800f1c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f1f0:	d108      	bne.n	800f204 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	681a      	ldr	r2, [r3, #0]
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	e009      	b.n	800f218 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f216:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	685a      	ldr	r2, [r3, #4]
 800f21e:	4b96      	ldr	r3, [pc, #600]	; (800f478 <HAL_SPI_Transmit+0x348>)
 800f220:	4013      	ands	r3, r2
 800f222:	88f9      	ldrh	r1, [r7, #6]
 800f224:	68fa      	ldr	r2, [r7, #12]
 800f226:	6812      	ldr	r2, [r2, #0]
 800f228:	430b      	orrs	r3, r1
 800f22a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f042 0201 	orr.w	r2, r2, #1
 800f23a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f244:	d107      	bne.n	800f256 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f254:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	2b0f      	cmp	r3, #15
 800f25c:	d947      	bls.n	800f2ee <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f25e:	e03f      	b.n	800f2e0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	f003 0302 	and.w	r3, r3, #2
 800f26a:	2b02      	cmp	r3, #2
 800f26c:	d114      	bne.n	800f298 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	6812      	ldr	r2, [r2, #0]
 800f278:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f27e:	1d1a      	adds	r2, r3, #4
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	3b01      	subs	r3, #1
 800f28e:	b29a      	uxth	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f296:	e023      	b.n	800f2e0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f298:	f7f4 fd42 	bl	8003d20 <HAL_GetTick>
 800f29c:	4602      	mov	r2, r0
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	683a      	ldr	r2, [r7, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d803      	bhi.n	800f2b0 <HAL_SPI_Transmit+0x180>
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ae:	d102      	bne.n	800f2b6 <HAL_SPI_Transmit+0x186>
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d114      	bne.n	800f2e0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2b6:	68f8      	ldr	r0, [r7, #12]
 800f2b8:	f000 fac6 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2dc:	2303      	movs	r3, #3
 800f2de:	e11e      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1b9      	bne.n	800f260 <HAL_SPI_Transmit+0x130>
 800f2ec:	e0f1      	b.n	800f4d2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	2b07      	cmp	r3, #7
 800f2f4:	f240 80e6 	bls.w	800f4c4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2f8:	e05d      	b.n	800f3b6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	695b      	ldr	r3, [r3, #20]
 800f300:	f003 0302 	and.w	r3, r3, #2
 800f304:	2b02      	cmp	r3, #2
 800f306:	d132      	bne.n	800f36e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f30e:	b29b      	uxth	r3, r3
 800f310:	2b01      	cmp	r3, #1
 800f312:	d918      	bls.n	800f346 <HAL_SPI_Transmit+0x216>
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d014      	beq.n	800f346 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6812      	ldr	r2, [r2, #0]
 800f326:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f32c:	1d1a      	adds	r2, r3, #4
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f338:	b29b      	uxth	r3, r3
 800f33a:	3b02      	subs	r3, #2
 800f33c:	b29a      	uxth	r2, r3
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f344:	e037      	b.n	800f3b6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f34a:	881a      	ldrh	r2, [r3, #0]
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f354:	1c9a      	adds	r2, r3, #2
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f360:	b29b      	uxth	r3, r3
 800f362:	3b01      	subs	r3, #1
 800f364:	b29a      	uxth	r2, r3
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f36c:	e023      	b.n	800f3b6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f36e:	f7f4 fcd7 	bl	8003d20 <HAL_GetTick>
 800f372:	4602      	mov	r2, r0
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d803      	bhi.n	800f386 <HAL_SPI_Transmit+0x256>
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f384:	d102      	bne.n	800f38c <HAL_SPI_Transmit+0x25c>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d114      	bne.n	800f3b6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	f000 fa5b 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2200      	movs	r2, #0
 800f396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f3b2:	2303      	movs	r3, #3
 800f3b4:	e0b3      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d19b      	bne.n	800f2fa <HAL_SPI_Transmit+0x1ca>
 800f3c2:	e086      	b.n	800f4d2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	695b      	ldr	r3, [r3, #20]
 800f3ca:	f003 0302 	and.w	r3, r3, #2
 800f3ce:	2b02      	cmp	r3, #2
 800f3d0:	d154      	bne.n	800f47c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	2b03      	cmp	r3, #3
 800f3dc:	d918      	bls.n	800f410 <HAL_SPI_Transmit+0x2e0>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e2:	2b40      	cmp	r3, #64	; 0x40
 800f3e4:	d914      	bls.n	800f410 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3f6:	1d1a      	adds	r2, r3, #4
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f402:	b29b      	uxth	r3, r3
 800f404:	3b04      	subs	r3, #4
 800f406:	b29a      	uxth	r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f40e:	e059      	b.n	800f4c4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f416:	b29b      	uxth	r3, r3
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d917      	bls.n	800f44c <HAL_SPI_Transmit+0x31c>
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f420:	2b00      	cmp	r3, #0
 800f422:	d013      	beq.n	800f44c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f428:	881a      	ldrh	r2, [r3, #0]
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f432:	1c9a      	adds	r2, r3, #2
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f43e:	b29b      	uxth	r3, r3
 800f440:	3b02      	subs	r3, #2
 800f442:	b29a      	uxth	r2, r3
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f44a:	e03b      	b.n	800f4c4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3320      	adds	r3, #32
 800f456:	7812      	ldrb	r2, [r2, #0]
 800f458:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f45e:	1c5a      	adds	r2, r3, #1
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	3b01      	subs	r3, #1
 800f46e:	b29a      	uxth	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f476:	e025      	b.n	800f4c4 <HAL_SPI_Transmit+0x394>
 800f478:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f47c:	f7f4 fc50 	bl	8003d20 <HAL_GetTick>
 800f480:	4602      	mov	r2, r0
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	1ad3      	subs	r3, r2, r3
 800f486:	683a      	ldr	r2, [r7, #0]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d803      	bhi.n	800f494 <HAL_SPI_Transmit+0x364>
 800f48c:	683b      	ldr	r3, [r7, #0]
 800f48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f492:	d102      	bne.n	800f49a <HAL_SPI_Transmit+0x36a>
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d114      	bne.n	800f4c4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 f9d4 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2201      	movs	r2, #1
 800f4bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f4c0:	2303      	movs	r3, #3
 800f4c2:	e02c      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f47f af79 	bne.w	800f3c4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	2108      	movs	r1, #8
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	f000 fa53 	bl	800f988 <SPI_WaitOnFlagUntilTimeout>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d007      	beq.n	800f4f8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4ee:	f043 0220 	orr.w	r2, r3, #32
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f000 f9a5 	bl	800f848 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f518:	2301      	movs	r3, #1
 800f51a:	e000      	b.n	800f51e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f51c:	7efb      	ldrb	r3, [r7, #27]
}
 800f51e:	4618      	mov	r0, r3
 800f520:	3720      	adds	r7, #32
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop

0800f528 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	60f8      	str	r0, [r7, #12]
 800f530:	60b9      	str	r1, [r7, #8]
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	4613      	mov	r3, r2
 800f536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f538:	2300      	movs	r3, #0
 800f53a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	3330      	adds	r3, #48	; 0x30
 800f542:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f54a:	2b01      	cmp	r3, #1
 800f54c:	d101      	bne.n	800f552 <HAL_SPI_Receive+0x2a>
 800f54e:	2302      	movs	r3, #2
 800f550:	e173      	b.n	800f83a <HAL_SPI_Receive+0x312>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2201      	movs	r2, #1
 800f556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f55a:	f7f4 fbe1 	bl	8003d20 <HAL_GetTick>
 800f55e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f566:	b2db      	uxtb	r3, r3
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d007      	beq.n	800f57c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f56c:	2302      	movs	r3, #2
 800f56e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2200      	movs	r2, #0
 800f574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f578:	7ffb      	ldrb	r3, [r7, #31]
 800f57a:	e15e      	b.n	800f83a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d002      	beq.n	800f588 <HAL_SPI_Receive+0x60>
 800f582:	88fb      	ldrh	r3, [r7, #6]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d107      	bne.n	800f598 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f588:	2301      	movs	r3, #1
 800f58a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f594:	7ffb      	ldrb	r3, [r7, #31]
 800f596:	e150      	b.n	800f83a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2204      	movs	r2, #4
 800f59c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	88fa      	ldrh	r2, [r7, #6]
 800f5b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	88fa      	ldrh	r2, [r7, #6]
 800f5ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2200      	movs	r2, #0
 800f5de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f5e8:	d108      	bne.n	800f5fc <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	681a      	ldr	r2, [r3, #0]
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f5f8:	601a      	str	r2, [r3, #0]
 800f5fa:	e009      	b.n	800f610 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f60e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	4b8b      	ldr	r3, [pc, #556]	; (800f844 <HAL_SPI_Receive+0x31c>)
 800f618:	4013      	ands	r3, r2
 800f61a:	88f9      	ldrh	r1, [r7, #6]
 800f61c:	68fa      	ldr	r2, [r7, #12]
 800f61e:	6812      	ldr	r2, [r2, #0]
 800f620:	430b      	orrs	r3, r1
 800f622:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	681a      	ldr	r2, [r3, #0]
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f042 0201 	orr.w	r2, r2, #1
 800f632:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f63c:	d107      	bne.n	800f64e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f64c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	2b0f      	cmp	r3, #15
 800f654:	d948      	bls.n	800f6e8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f656:	e040      	b.n	800f6da <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	695a      	ldr	r2, [r3, #20]
 800f65e:	f248 0308 	movw	r3, #32776	; 0x8008
 800f662:	4013      	ands	r3, r2
 800f664:	2b00      	cmp	r3, #0
 800f666:	d014      	beq.n	800f692 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681a      	ldr	r2, [r3, #0]
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f670:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f672:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f678:	1d1a      	adds	r2, r3, #4
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f684:	b29b      	uxth	r3, r3
 800f686:	3b01      	subs	r3, #1
 800f688:	b29a      	uxth	r2, r3
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f690:	e023      	b.n	800f6da <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f692:	f7f4 fb45 	bl	8003d20 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	d803      	bhi.n	800f6aa <HAL_SPI_Receive+0x182>
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6a8:	d102      	bne.n	800f6b0 <HAL_SPI_Receive+0x188>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d114      	bne.n	800f6da <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6b0:	68f8      	ldr	r0, [r7, #12]
 800f6b2:	f000 f8c9 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	e0af      	b.n	800f83a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1b8      	bne.n	800f658 <HAL_SPI_Receive+0x130>
 800f6e6:	e095      	b.n	800f814 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	2b07      	cmp	r3, #7
 800f6ee:	f240 808b 	bls.w	800f808 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f6f2:	e03f      	b.n	800f774 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d114      	bne.n	800f72c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f706:	69ba      	ldr	r2, [r7, #24]
 800f708:	8812      	ldrh	r2, [r2, #0]
 800f70a:	b292      	uxth	r2, r2
 800f70c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f712:	1c9a      	adds	r2, r3, #2
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f71e:	b29b      	uxth	r3, r3
 800f720:	3b01      	subs	r3, #1
 800f722:	b29a      	uxth	r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f72a:	e023      	b.n	800f774 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f72c:	f7f4 faf8 	bl	8003d20 <HAL_GetTick>
 800f730:	4602      	mov	r2, r0
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	1ad3      	subs	r3, r2, r3
 800f736:	683a      	ldr	r2, [r7, #0]
 800f738:	429a      	cmp	r2, r3
 800f73a:	d803      	bhi.n	800f744 <HAL_SPI_Receive+0x21c>
 800f73c:	683b      	ldr	r3, [r7, #0]
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f742:	d102      	bne.n	800f74a <HAL_SPI_Receive+0x222>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d114      	bne.n	800f774 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f74a:	68f8      	ldr	r0, [r7, #12]
 800f74c:	f000 f87c 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2200      	movs	r2, #0
 800f754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f75e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f770:	2303      	movs	r3, #3
 800f772:	e062      	b.n	800f83a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f77a:	b29b      	uxth	r3, r3
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1b9      	bne.n	800f6f4 <HAL_SPI_Receive+0x1cc>
 800f780:	e048      	b.n	800f814 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	695b      	ldr	r3, [r3, #20]
 800f788:	f003 0301 	and.w	r3, r3, #1
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d117      	bne.n	800f7c0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	b2d2      	uxtb	r2, r2
 800f7a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	3b01      	subs	r3, #1
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f7be:	e023      	b.n	800f808 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7c0:	f7f4 faae 	bl	8003d20 <HAL_GetTick>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d803      	bhi.n	800f7d8 <HAL_SPI_Receive+0x2b0>
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d6:	d102      	bne.n	800f7de <HAL_SPI_Receive+0x2b6>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d114      	bne.n	800f808 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7de:	68f8      	ldr	r0, [r7, #12]
 800f7e0:	f000 f832 	bl	800f848 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	2201      	movs	r2, #1
 800f800:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f804:	2303      	movs	r3, #3
 800f806:	e018      	b.n	800f83a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f80e:	b29b      	uxth	r3, r3
 800f810:	2b00      	cmp	r3, #0
 800f812:	d1b6      	bne.n	800f782 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f814:	68f8      	ldr	r0, [r7, #12]
 800f816:	f000 f817 	bl	800f848 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2201      	movs	r2, #1
 800f826:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	e000      	b.n	800f83a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f838:	7ffb      	ldrb	r3, [r7, #31]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3720      	adds	r7, #32
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	ffff0000 	.word	0xffff0000

0800f848 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f848:	b480      	push	{r7}
 800f84a:	b085      	sub	sp, #20
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	695b      	ldr	r3, [r3, #20]
 800f856:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	699a      	ldr	r2, [r3, #24]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f042 0208 	orr.w	r2, r2, #8
 800f866:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	699a      	ldr	r2, [r3, #24]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f042 0210 	orr.w	r2, r2, #16
 800f876:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f022 0201 	bic.w	r2, r2, #1
 800f886:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	6919      	ldr	r1, [r3, #16]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	4b3c      	ldr	r3, [pc, #240]	; (800f984 <SPI_CloseTransfer+0x13c>)
 800f894:	400b      	ands	r3, r1
 800f896:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	689a      	ldr	r2, [r3, #8]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f8a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	2b04      	cmp	r3, #4
 800f8b2:	d014      	beq.n	800f8de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f003 0320 	and.w	r3, r3, #32
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d00f      	beq.n	800f8de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	699a      	ldr	r2, [r3, #24]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f042 0220 	orr.w	r2, r2, #32
 800f8dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	2b03      	cmp	r3, #3
 800f8e8:	d014      	beq.n	800f914 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00f      	beq.n	800f914 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8fa:	f043 0204 	orr.w	r2, r3, #4
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	699a      	ldr	r2, [r3, #24]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f912:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d00f      	beq.n	800f93e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f924:	f043 0201 	orr.w	r2, r3, #1
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	699a      	ldr	r2, [r3, #24]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f93c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f944:	2b00      	cmp	r3, #0
 800f946:	d00f      	beq.n	800f968 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f94e:	f043 0208 	orr.w	r2, r3, #8
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	699a      	ldr	r2, [r3, #24]
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f966:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2200      	movs	r2, #0
 800f974:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f978:	bf00      	nop
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr
 800f984:	fffffc90 	.word	0xfffffc90

0800f988 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	60f8      	str	r0, [r7, #12]
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	603b      	str	r3, [r7, #0]
 800f994:	4613      	mov	r3, r2
 800f996:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f998:	e010      	b.n	800f9bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f99a:	f7f4 f9c1 	bl	8003d20 <HAL_GetTick>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	1ad3      	subs	r3, r2, r3
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d803      	bhi.n	800f9b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9b0:	d102      	bne.n	800f9b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f9b8:	2303      	movs	r3, #3
 800f9ba:	e00f      	b.n	800f9dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	695a      	ldr	r2, [r3, #20]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	4013      	ands	r3, r2
 800f9c6:	68ba      	ldr	r2, [r7, #8]
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	bf0c      	ite	eq
 800f9cc:	2301      	moveq	r3, #1
 800f9ce:	2300      	movne	r3, #0
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	79fb      	ldrb	r3, [r7, #7]
 800f9d6:	429a      	cmp	r2, r3
 800f9d8:	d0df      	beq.n	800f99a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f9da:	2300      	movs	r3, #0
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f9e4:	b480      	push	{r7}
 800f9e6:	b085      	sub	sp, #20
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9f0:	095b      	lsrs	r3, r3, #5
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	68db      	ldr	r3, [r3, #12]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	3307      	adds	r3, #7
 800fa02:	08db      	lsrs	r3, r3, #3
 800fa04:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	fb02 f303 	mul.w	r3, r2, r3
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3714      	adds	r7, #20
 800fa12:	46bd      	mov	sp, r7
 800fa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa18:	4770      	bx	lr

0800fa1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b082      	sub	sp, #8
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d101      	bne.n	800fa2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	e049      	b.n	800fac0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d106      	bne.n	800fa46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7f3 fdd7 	bl	80035f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2202      	movs	r2, #2
 800fa4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681a      	ldr	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3304      	adds	r3, #4
 800fa56:	4619      	mov	r1, r3
 800fa58:	4610      	mov	r0, r2
 800fa5a:	f000 ff29 	bl	80108b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2201      	movs	r2, #1
 800fa82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2201      	movs	r2, #1
 800fa92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2201      	movs	r2, #1
 800fab2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2201      	movs	r2, #1
 800faba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b082      	sub	sp, #8
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d101      	bne.n	800fada <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fad6:	2301      	movs	r3, #1
 800fad8:	e049      	b.n	800fb6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d106      	bne.n	800faf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800faee:	6878      	ldr	r0, [r7, #4]
 800faf0:	f7f3 fbea 	bl	80032c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2202      	movs	r2, #2
 800faf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3304      	adds	r3, #4
 800fb04:	4619      	mov	r1, r3
 800fb06:	4610      	mov	r0, r2
 800fb08:	f000 fed2 	bl	80108b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2201      	movs	r2, #1
 800fb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3708      	adds	r7, #8
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
	...

0800fb78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d109      	bne.n	800fb9c <HAL_TIM_PWM_Start+0x24>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb8e:	b2db      	uxtb	r3, r3
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	bf14      	ite	ne
 800fb94:	2301      	movne	r3, #1
 800fb96:	2300      	moveq	r3, #0
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	e03c      	b.n	800fc16 <HAL_TIM_PWM_Start+0x9e>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2b04      	cmp	r3, #4
 800fba0:	d109      	bne.n	800fbb6 <HAL_TIM_PWM_Start+0x3e>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	bf14      	ite	ne
 800fbae:	2301      	movne	r3, #1
 800fbb0:	2300      	moveq	r3, #0
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	e02f      	b.n	800fc16 <HAL_TIM_PWM_Start+0x9e>
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	2b08      	cmp	r3, #8
 800fbba:	d109      	bne.n	800fbd0 <HAL_TIM_PWM_Start+0x58>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbc2:	b2db      	uxtb	r3, r3
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	bf14      	ite	ne
 800fbc8:	2301      	movne	r3, #1
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	e022      	b.n	800fc16 <HAL_TIM_PWM_Start+0x9e>
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	2b0c      	cmp	r3, #12
 800fbd4:	d109      	bne.n	800fbea <HAL_TIM_PWM_Start+0x72>
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	bf14      	ite	ne
 800fbe2:	2301      	movne	r3, #1
 800fbe4:	2300      	moveq	r3, #0
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	e015      	b.n	800fc16 <HAL_TIM_PWM_Start+0x9e>
 800fbea:	683b      	ldr	r3, [r7, #0]
 800fbec:	2b10      	cmp	r3, #16
 800fbee:	d109      	bne.n	800fc04 <HAL_TIM_PWM_Start+0x8c>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	bf14      	ite	ne
 800fbfc:	2301      	movne	r3, #1
 800fbfe:	2300      	moveq	r3, #0
 800fc00:	b2db      	uxtb	r3, r3
 800fc02:	e008      	b.n	800fc16 <HAL_TIM_PWM_Start+0x9e>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc0a:	b2db      	uxtb	r3, r3
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	bf14      	ite	ne
 800fc10:	2301      	movne	r3, #1
 800fc12:	2300      	moveq	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d001      	beq.n	800fc1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e0ab      	b.n	800fd76 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d104      	bne.n	800fc2e <HAL_TIM_PWM_Start+0xb6>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2202      	movs	r2, #2
 800fc28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc2c:	e023      	b.n	800fc76 <HAL_TIM_PWM_Start+0xfe>
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b04      	cmp	r3, #4
 800fc32:	d104      	bne.n	800fc3e <HAL_TIM_PWM_Start+0xc6>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc3c:	e01b      	b.n	800fc76 <HAL_TIM_PWM_Start+0xfe>
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2b08      	cmp	r3, #8
 800fc42:	d104      	bne.n	800fc4e <HAL_TIM_PWM_Start+0xd6>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2202      	movs	r2, #2
 800fc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc4c:	e013      	b.n	800fc76 <HAL_TIM_PWM_Start+0xfe>
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b0c      	cmp	r3, #12
 800fc52:	d104      	bne.n	800fc5e <HAL_TIM_PWM_Start+0xe6>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2202      	movs	r2, #2
 800fc58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc5c:	e00b      	b.n	800fc76 <HAL_TIM_PWM_Start+0xfe>
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	2b10      	cmp	r3, #16
 800fc62:	d104      	bne.n	800fc6e <HAL_TIM_PWM_Start+0xf6>
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2202      	movs	r2, #2
 800fc68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc6c:	e003      	b.n	800fc76 <HAL_TIM_PWM_Start+0xfe>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2202      	movs	r2, #2
 800fc72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	6839      	ldr	r1, [r7, #0]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f001 f992 	bl	8010fa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a3d      	ldr	r2, [pc, #244]	; (800fd80 <HAL_TIM_PWM_Start+0x208>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d013      	beq.n	800fcb6 <HAL_TIM_PWM_Start+0x13e>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4a3c      	ldr	r2, [pc, #240]	; (800fd84 <HAL_TIM_PWM_Start+0x20c>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d00e      	beq.n	800fcb6 <HAL_TIM_PWM_Start+0x13e>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a3a      	ldr	r2, [pc, #232]	; (800fd88 <HAL_TIM_PWM_Start+0x210>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d009      	beq.n	800fcb6 <HAL_TIM_PWM_Start+0x13e>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4a39      	ldr	r2, [pc, #228]	; (800fd8c <HAL_TIM_PWM_Start+0x214>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d004      	beq.n	800fcb6 <HAL_TIM_PWM_Start+0x13e>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4a37      	ldr	r2, [pc, #220]	; (800fd90 <HAL_TIM_PWM_Start+0x218>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d101      	bne.n	800fcba <HAL_TIM_PWM_Start+0x142>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e000      	b.n	800fcbc <HAL_TIM_PWM_Start+0x144>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d007      	beq.n	800fcd0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4a2a      	ldr	r2, [pc, #168]	; (800fd80 <HAL_TIM_PWM_Start+0x208>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d02c      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fce2:	d027      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a2a      	ldr	r2, [pc, #168]	; (800fd94 <HAL_TIM_PWM_Start+0x21c>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d022      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	4a29      	ldr	r2, [pc, #164]	; (800fd98 <HAL_TIM_PWM_Start+0x220>)
 800fcf4:	4293      	cmp	r3, r2
 800fcf6:	d01d      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4a27      	ldr	r2, [pc, #156]	; (800fd9c <HAL_TIM_PWM_Start+0x224>)
 800fcfe:	4293      	cmp	r3, r2
 800fd00:	d018      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	4a1f      	ldr	r2, [pc, #124]	; (800fd84 <HAL_TIM_PWM_Start+0x20c>)
 800fd08:	4293      	cmp	r3, r2
 800fd0a:	d013      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a23      	ldr	r2, [pc, #140]	; (800fda0 <HAL_TIM_PWM_Start+0x228>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d00e      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a1b      	ldr	r2, [pc, #108]	; (800fd88 <HAL_TIM_PWM_Start+0x210>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d009      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	4a1f      	ldr	r2, [pc, #124]	; (800fda4 <HAL_TIM_PWM_Start+0x22c>)
 800fd26:	4293      	cmp	r3, r2
 800fd28:	d004      	beq.n	800fd34 <HAL_TIM_PWM_Start+0x1bc>
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	4a1e      	ldr	r2, [pc, #120]	; (800fda8 <HAL_TIM_PWM_Start+0x230>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d115      	bne.n	800fd60 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	689a      	ldr	r2, [r3, #8]
 800fd3a:	4b1c      	ldr	r3, [pc, #112]	; (800fdac <HAL_TIM_PWM_Start+0x234>)
 800fd3c:	4013      	ands	r3, r2
 800fd3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	2b06      	cmp	r3, #6
 800fd44:	d015      	beq.n	800fd72 <HAL_TIM_PWM_Start+0x1fa>
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd4c:	d011      	beq.n	800fd72 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	f042 0201 	orr.w	r2, r2, #1
 800fd5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd5e:	e008      	b.n	800fd72 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f042 0201 	orr.w	r2, r2, #1
 800fd6e:	601a      	str	r2, [r3, #0]
 800fd70:	e000      	b.n	800fd74 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd72:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd74:	2300      	movs	r3, #0
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	40010000 	.word	0x40010000
 800fd84:	40010400 	.word	0x40010400
 800fd88:	40014000 	.word	0x40014000
 800fd8c:	40014400 	.word	0x40014400
 800fd90:	40014800 	.word	0x40014800
 800fd94:	40000400 	.word	0x40000400
 800fd98:	40000800 	.word	0x40000800
 800fd9c:	40000c00 	.word	0x40000c00
 800fda0:	40001800 	.word	0x40001800
 800fda4:	4000e000 	.word	0x4000e000
 800fda8:	4000e400 	.word	0x4000e400
 800fdac:	00010007 	.word	0x00010007

0800fdb0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b086      	sub	sp, #24
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	607a      	str	r2, [r7, #4]
 800fdbc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d109      	bne.n	800fddc <HAL_TIM_PWM_Start_DMA+0x2c>
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b02      	cmp	r3, #2
 800fdd2:	bf0c      	ite	eq
 800fdd4:	2301      	moveq	r3, #1
 800fdd6:	2300      	movne	r3, #0
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	e03c      	b.n	800fe56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	2b04      	cmp	r3, #4
 800fde0:	d109      	bne.n	800fdf6 <HAL_TIM_PWM_Start_DMA+0x46>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	2b02      	cmp	r3, #2
 800fdec:	bf0c      	ite	eq
 800fdee:	2301      	moveq	r3, #1
 800fdf0:	2300      	movne	r3, #0
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	e02f      	b.n	800fe56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	2b08      	cmp	r3, #8
 800fdfa:	d109      	bne.n	800fe10 <HAL_TIM_PWM_Start_DMA+0x60>
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	2b02      	cmp	r3, #2
 800fe06:	bf0c      	ite	eq
 800fe08:	2301      	moveq	r3, #1
 800fe0a:	2300      	movne	r3, #0
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	e022      	b.n	800fe56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	2b0c      	cmp	r3, #12
 800fe14:	d109      	bne.n	800fe2a <HAL_TIM_PWM_Start_DMA+0x7a>
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe1c:	b2db      	uxtb	r3, r3
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	bf0c      	ite	eq
 800fe22:	2301      	moveq	r3, #1
 800fe24:	2300      	movne	r3, #0
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	e015      	b.n	800fe56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	2b10      	cmp	r3, #16
 800fe2e:	d109      	bne.n	800fe44 <HAL_TIM_PWM_Start_DMA+0x94>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	2b02      	cmp	r3, #2
 800fe3a:	bf0c      	ite	eq
 800fe3c:	2301      	moveq	r3, #1
 800fe3e:	2300      	movne	r3, #0
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	e008      	b.n	800fe56 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe4a:	b2db      	uxtb	r3, r3
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	bf0c      	ite	eq
 800fe50:	2301      	moveq	r3, #1
 800fe52:	2300      	movne	r3, #0
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d001      	beq.n	800fe5e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	e1ba      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fe5e:	68bb      	ldr	r3, [r7, #8]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d109      	bne.n	800fe78 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe6a:	b2db      	uxtb	r3, r3
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	bf0c      	ite	eq
 800fe70:	2301      	moveq	r3, #1
 800fe72:	2300      	movne	r3, #0
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	e03c      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	2b04      	cmp	r3, #4
 800fe7c:	d109      	bne.n	800fe92 <HAL_TIM_PWM_Start_DMA+0xe2>
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	bf0c      	ite	eq
 800fe8a:	2301      	moveq	r3, #1
 800fe8c:	2300      	movne	r3, #0
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	e02f      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	2b08      	cmp	r3, #8
 800fe96:	d109      	bne.n	800feac <HAL_TIM_PWM_Start_DMA+0xfc>
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	2b01      	cmp	r3, #1
 800fea2:	bf0c      	ite	eq
 800fea4:	2301      	moveq	r3, #1
 800fea6:	2300      	movne	r3, #0
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	e022      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x142>
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b0c      	cmp	r3, #12
 800feb0:	d109      	bne.n	800fec6 <HAL_TIM_PWM_Start_DMA+0x116>
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	2b01      	cmp	r3, #1
 800febc:	bf0c      	ite	eq
 800febe:	2301      	moveq	r3, #1
 800fec0:	2300      	movne	r3, #0
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	e015      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b10      	cmp	r3, #16
 800feca:	d109      	bne.n	800fee0 <HAL_TIM_PWM_Start_DMA+0x130>
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	bf0c      	ite	eq
 800fed8:	2301      	moveq	r3, #1
 800feda:	2300      	movne	r3, #0
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	e008      	b.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	2b01      	cmp	r3, #1
 800feea:	bf0c      	ite	eq
 800feec:	2301      	moveq	r3, #1
 800feee:	2300      	movne	r3, #0
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d034      	beq.n	800ff60 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <HAL_TIM_PWM_Start_DMA+0x152>
 800fefc:	887b      	ldrh	r3, [r7, #2]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ff02:	2301      	movs	r3, #1
 800ff04:	e166      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d104      	bne.n	800ff16 <HAL_TIM_PWM_Start_DMA+0x166>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2202      	movs	r2, #2
 800ff10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff14:	e026      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b04      	cmp	r3, #4
 800ff1a:	d104      	bne.n	800ff26 <HAL_TIM_PWM_Start_DMA+0x176>
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2202      	movs	r2, #2
 800ff20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff24:	e01e      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2b08      	cmp	r3, #8
 800ff2a:	d104      	bne.n	800ff36 <HAL_TIM_PWM_Start_DMA+0x186>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2202      	movs	r2, #2
 800ff30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff34:	e016      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b0c      	cmp	r3, #12
 800ff3a:	d104      	bne.n	800ff46 <HAL_TIM_PWM_Start_DMA+0x196>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2202      	movs	r2, #2
 800ff40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff44:	e00e      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	2b10      	cmp	r3, #16
 800ff4a:	d104      	bne.n	800ff56 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2202      	movs	r2, #2
 800ff50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff54:	e006      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	2202      	movs	r2, #2
 800ff5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff5e:	e001      	b.n	800ff64 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ff60:	2301      	movs	r3, #1
 800ff62:	e137      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	2b0c      	cmp	r3, #12
 800ff68:	f200 80ae 	bhi.w	80100c8 <HAL_TIM_PWM_Start_DMA+0x318>
 800ff6c:	a201      	add	r2, pc, #4	; (adr r2, 800ff74 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ff6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff72:	bf00      	nop
 800ff74:	0800ffa9 	.word	0x0800ffa9
 800ff78:	080100c9 	.word	0x080100c9
 800ff7c:	080100c9 	.word	0x080100c9
 800ff80:	080100c9 	.word	0x080100c9
 800ff84:	0800fff1 	.word	0x0800fff1
 800ff88:	080100c9 	.word	0x080100c9
 800ff8c:	080100c9 	.word	0x080100c9
 800ff90:	080100c9 	.word	0x080100c9
 800ff94:	08010039 	.word	0x08010039
 800ff98:	080100c9 	.word	0x080100c9
 800ff9c:	080100c9 	.word	0x080100c9
 800ffa0:	080100c9 	.word	0x080100c9
 800ffa4:	08010081 	.word	0x08010081
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	4a8b      	ldr	r2, [pc, #556]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ffae:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb4:	4a8a      	ldr	r2, [pc, #552]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ffb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	4a89      	ldr	r2, [pc, #548]	; (80101e4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ffbe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ffc4:	6879      	ldr	r1, [r7, #4]
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3334      	adds	r3, #52	; 0x34
 800ffcc:	461a      	mov	r2, r3
 800ffce:	887b      	ldrh	r3, [r7, #2]
 800ffd0:	f7f5 fec4 	bl	8005d5c <HAL_DMA_Start_IT>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d001      	beq.n	800ffde <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e0fa      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68da      	ldr	r2, [r3, #12]
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ffec:	60da      	str	r2, [r3, #12]
      break;
 800ffee:	e06e      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff4:	4a79      	ldr	r2, [pc, #484]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fff6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fffc:	4a78      	ldr	r2, [pc, #480]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010004:	4a77      	ldr	r2, [pc, #476]	; (80101e4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010006:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801000c:	6879      	ldr	r1, [r7, #4]
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	3338      	adds	r3, #56	; 0x38
 8010014:	461a      	mov	r2, r3
 8010016:	887b      	ldrh	r3, [r7, #2]
 8010018:	f7f5 fea0 	bl	8005d5c <HAL_DMA_Start_IT>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d001      	beq.n	8010026 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010022:	2301      	movs	r3, #1
 8010024:	e0d6      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	68da      	ldr	r2, [r3, #12]
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010034:	60da      	str	r2, [r3, #12]
      break;
 8010036:	e04a      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	4a67      	ldr	r2, [pc, #412]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 801003e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010044:	4a66      	ldr	r2, [pc, #408]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010046:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004c:	4a65      	ldr	r2, [pc, #404]	; (80101e4 <HAL_TIM_PWM_Start_DMA+0x434>)
 801004e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010054:	6879      	ldr	r1, [r7, #4]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	333c      	adds	r3, #60	; 0x3c
 801005c:	461a      	mov	r2, r3
 801005e:	887b      	ldrh	r3, [r7, #2]
 8010060:	f7f5 fe7c 	bl	8005d5c <HAL_DMA_Start_IT>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	e0b2      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	68da      	ldr	r2, [r3, #12]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801007c:	60da      	str	r2, [r3, #12]
      break;
 801007e:	e026      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	4a55      	ldr	r2, [pc, #340]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010086:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801008c:	4a54      	ldr	r2, [pc, #336]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x430>)
 801008e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010094:	4a53      	ldr	r2, [pc, #332]	; (80101e4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010096:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801009c:	6879      	ldr	r1, [r7, #4]
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	3340      	adds	r3, #64	; 0x40
 80100a4:	461a      	mov	r2, r3
 80100a6:	887b      	ldrh	r3, [r7, #2]
 80100a8:	f7f5 fe58 	bl	8005d5c <HAL_DMA_Start_IT>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80100b2:	2301      	movs	r3, #1
 80100b4:	e08e      	b.n	80101d4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68da      	ldr	r2, [r3, #12]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80100c4:	60da      	str	r2, [r3, #12]
      break;
 80100c6:	e002      	b.n	80100ce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80100c8:	2301      	movs	r3, #1
 80100ca:	75fb      	strb	r3, [r7, #23]
      break;
 80100cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80100ce:	7dfb      	ldrb	r3, [r7, #23]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d17e      	bne.n	80101d2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	2201      	movs	r2, #1
 80100da:	68b9      	ldr	r1, [r7, #8]
 80100dc:	4618      	mov	r0, r3
 80100de:	f000 ff63 	bl	8010fa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a40      	ldr	r2, [pc, #256]	; (80101e8 <HAL_TIM_PWM_Start_DMA+0x438>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d013      	beq.n	8010114 <HAL_TIM_PWM_Start_DMA+0x364>
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a3e      	ldr	r2, [pc, #248]	; (80101ec <HAL_TIM_PWM_Start_DMA+0x43c>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d00e      	beq.n	8010114 <HAL_TIM_PWM_Start_DMA+0x364>
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a3d      	ldr	r2, [pc, #244]	; (80101f0 <HAL_TIM_PWM_Start_DMA+0x440>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d009      	beq.n	8010114 <HAL_TIM_PWM_Start_DMA+0x364>
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a3b      	ldr	r2, [pc, #236]	; (80101f4 <HAL_TIM_PWM_Start_DMA+0x444>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d004      	beq.n	8010114 <HAL_TIM_PWM_Start_DMA+0x364>
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4a3a      	ldr	r2, [pc, #232]	; (80101f8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d101      	bne.n	8010118 <HAL_TIM_PWM_Start_DMA+0x368>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <HAL_TIM_PWM_Start_DMA+0x36a>
 8010118:	2300      	movs	r3, #0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d007      	beq.n	801012e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801012c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	4a2d      	ldr	r2, [pc, #180]	; (80101e8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d02c      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010140:	d027      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a2d      	ldr	r2, [pc, #180]	; (80101fc <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d022      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4a2b      	ldr	r2, [pc, #172]	; (8010200 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d01d      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	4a2a      	ldr	r2, [pc, #168]	; (8010204 <HAL_TIM_PWM_Start_DMA+0x454>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d018      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a21      	ldr	r2, [pc, #132]	; (80101ec <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d013      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	4a26      	ldr	r2, [pc, #152]	; (8010208 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010170:	4293      	cmp	r3, r2
 8010172:	d00e      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	4a1d      	ldr	r2, [pc, #116]	; (80101f0 <HAL_TIM_PWM_Start_DMA+0x440>)
 801017a:	4293      	cmp	r3, r2
 801017c:	d009      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4a22      	ldr	r2, [pc, #136]	; (801020c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010184:	4293      	cmp	r3, r2
 8010186:	d004      	beq.n	8010192 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a20      	ldr	r2, [pc, #128]	; (8010210 <HAL_TIM_PWM_Start_DMA+0x460>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d115      	bne.n	80101be <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	689a      	ldr	r2, [r3, #8]
 8010198:	4b1e      	ldr	r3, [pc, #120]	; (8010214 <HAL_TIM_PWM_Start_DMA+0x464>)
 801019a:	4013      	ands	r3, r2
 801019c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	2b06      	cmp	r3, #6
 80101a2:	d015      	beq.n	80101d0 <HAL_TIM_PWM_Start_DMA+0x420>
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101aa:	d011      	beq.n	80101d0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	681a      	ldr	r2, [r3, #0]
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f042 0201 	orr.w	r2, r2, #1
 80101ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101bc:	e008      	b.n	80101d0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f042 0201 	orr.w	r2, r2, #1
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	e000      	b.n	80101d2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80101d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101d4:	4618      	mov	r0, r3
 80101d6:	3718      	adds	r7, #24
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	0801079f 	.word	0x0801079f
 80101e0:	08010847 	.word	0x08010847
 80101e4:	0801070d 	.word	0x0801070d
 80101e8:	40010000 	.word	0x40010000
 80101ec:	40010400 	.word	0x40010400
 80101f0:	40014000 	.word	0x40014000
 80101f4:	40014400 	.word	0x40014400
 80101f8:	40014800 	.word	0x40014800
 80101fc:	40000400 	.word	0x40000400
 8010200:	40000800 	.word	0x40000800
 8010204:	40000c00 	.word	0x40000c00
 8010208:	40001800 	.word	0x40001800
 801020c:	4000e000 	.word	0x4000e000
 8010210:	4000e400 	.word	0x4000e400
 8010214:	00010007 	.word	0x00010007

08010218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	691b      	ldr	r3, [r3, #16]
 8010226:	f003 0302 	and.w	r3, r3, #2
 801022a:	2b02      	cmp	r3, #2
 801022c:	d122      	bne.n	8010274 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	68db      	ldr	r3, [r3, #12]
 8010234:	f003 0302 	and.w	r3, r3, #2
 8010238:	2b02      	cmp	r3, #2
 801023a:	d11b      	bne.n	8010274 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f06f 0202 	mvn.w	r2, #2
 8010244:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2201      	movs	r2, #1
 801024a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	699b      	ldr	r3, [r3, #24]
 8010252:	f003 0303 	and.w	r3, r3, #3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d003      	beq.n	8010262 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f000 fa24 	bl	80106a8 <HAL_TIM_IC_CaptureCallback>
 8010260:	e005      	b.n	801026e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f000 fa16 	bl	8010694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fa27 	bl	80106bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2200      	movs	r2, #0
 8010272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	691b      	ldr	r3, [r3, #16]
 801027a:	f003 0304 	and.w	r3, r3, #4
 801027e:	2b04      	cmp	r3, #4
 8010280:	d122      	bne.n	80102c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	f003 0304 	and.w	r3, r3, #4
 801028c:	2b04      	cmp	r3, #4
 801028e:	d11b      	bne.n	80102c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f06f 0204 	mvn.w	r2, #4
 8010298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2202      	movs	r2, #2
 801029e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	699b      	ldr	r3, [r3, #24]
 80102a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d003      	beq.n	80102b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f9fa 	bl	80106a8 <HAL_TIM_IC_CaptureCallback>
 80102b4:	e005      	b.n	80102c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f000 f9ec 	bl	8010694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 f9fd 	bl	80106bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2200      	movs	r2, #0
 80102c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	f003 0308 	and.w	r3, r3, #8
 80102d2:	2b08      	cmp	r3, #8
 80102d4:	d122      	bne.n	801031c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	f003 0308 	and.w	r3, r3, #8
 80102e0:	2b08      	cmp	r3, #8
 80102e2:	d11b      	bne.n	801031c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f06f 0208 	mvn.w	r2, #8
 80102ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2204      	movs	r2, #4
 80102f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	69db      	ldr	r3, [r3, #28]
 80102fa:	f003 0303 	and.w	r3, r3, #3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d003      	beq.n	801030a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f9d0 	bl	80106a8 <HAL_TIM_IC_CaptureCallback>
 8010308:	e005      	b.n	8010316 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f9c2 	bl	8010694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f000 f9d3 	bl	80106bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	691b      	ldr	r3, [r3, #16]
 8010322:	f003 0310 	and.w	r3, r3, #16
 8010326:	2b10      	cmp	r3, #16
 8010328:	d122      	bne.n	8010370 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	f003 0310 	and.w	r3, r3, #16
 8010334:	2b10      	cmp	r3, #16
 8010336:	d11b      	bne.n	8010370 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f06f 0210 	mvn.w	r2, #16
 8010340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2208      	movs	r2, #8
 8010346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	69db      	ldr	r3, [r3, #28]
 801034e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010352:	2b00      	cmp	r3, #0
 8010354:	d003      	beq.n	801035e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010356:	6878      	ldr	r0, [r7, #4]
 8010358:	f000 f9a6 	bl	80106a8 <HAL_TIM_IC_CaptureCallback>
 801035c:	e005      	b.n	801036a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f000 f998 	bl	8010694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f9a9 	bl	80106bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	f003 0301 	and.w	r3, r3, #1
 801037a:	2b01      	cmp	r3, #1
 801037c:	d10e      	bne.n	801039c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	68db      	ldr	r3, [r3, #12]
 8010384:	f003 0301 	and.w	r3, r3, #1
 8010388:	2b01      	cmp	r3, #1
 801038a:	d107      	bne.n	801039c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f06f 0201 	mvn.w	r2, #1
 8010394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f000 f972 	bl	8010680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103a6:	2b80      	cmp	r3, #128	; 0x80
 80103a8:	d10e      	bne.n	80103c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	68db      	ldr	r3, [r3, #12]
 80103b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103b4:	2b80      	cmp	r3, #128	; 0x80
 80103b6:	d107      	bne.n	80103c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80103c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 febc 	bl	8011140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	691b      	ldr	r3, [r3, #16]
 80103ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103d6:	d10e      	bne.n	80103f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103e2:	2b80      	cmp	r3, #128	; 0x80
 80103e4:	d107      	bne.n	80103f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80103ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80103f0:	6878      	ldr	r0, [r7, #4]
 80103f2:	f000 feaf 	bl	8011154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010400:	2b40      	cmp	r3, #64	; 0x40
 8010402:	d10e      	bne.n	8010422 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801040e:	2b40      	cmp	r3, #64	; 0x40
 8010410:	d107      	bne.n	8010422 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801041a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 f961 	bl	80106e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	691b      	ldr	r3, [r3, #16]
 8010428:	f003 0320 	and.w	r3, r3, #32
 801042c:	2b20      	cmp	r3, #32
 801042e:	d10e      	bne.n	801044e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68db      	ldr	r3, [r3, #12]
 8010436:	f003 0320 	and.w	r3, r3, #32
 801043a:	2b20      	cmp	r3, #32
 801043c:	d107      	bne.n	801044e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f06f 0220 	mvn.w	r2, #32
 8010446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 fe6f 	bl	801112c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801044e:	bf00      	nop
 8010450:	3708      	adds	r7, #8
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
	...

08010458 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b086      	sub	sp, #24
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010464:	2300      	movs	r3, #0
 8010466:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801046e:	2b01      	cmp	r3, #1
 8010470:	d101      	bne.n	8010476 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010472:	2302      	movs	r3, #2
 8010474:	e0ff      	b.n	8010676 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	2201      	movs	r2, #1
 801047a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	2b14      	cmp	r3, #20
 8010482:	f200 80f0 	bhi.w	8010666 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010486:	a201      	add	r2, pc, #4	; (adr r2, 801048c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048c:	080104e1 	.word	0x080104e1
 8010490:	08010667 	.word	0x08010667
 8010494:	08010667 	.word	0x08010667
 8010498:	08010667 	.word	0x08010667
 801049c:	08010521 	.word	0x08010521
 80104a0:	08010667 	.word	0x08010667
 80104a4:	08010667 	.word	0x08010667
 80104a8:	08010667 	.word	0x08010667
 80104ac:	08010563 	.word	0x08010563
 80104b0:	08010667 	.word	0x08010667
 80104b4:	08010667 	.word	0x08010667
 80104b8:	08010667 	.word	0x08010667
 80104bc:	080105a3 	.word	0x080105a3
 80104c0:	08010667 	.word	0x08010667
 80104c4:	08010667 	.word	0x08010667
 80104c8:	08010667 	.word	0x08010667
 80104cc:	080105e5 	.word	0x080105e5
 80104d0:	08010667 	.word	0x08010667
 80104d4:	08010667 	.word	0x08010667
 80104d8:	08010667 	.word	0x08010667
 80104dc:	08010625 	.word	0x08010625
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	68b9      	ldr	r1, [r7, #8]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f000 fa88 	bl	80109fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	699a      	ldr	r2, [r3, #24]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f042 0208 	orr.w	r2, r2, #8
 80104fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	699a      	ldr	r2, [r3, #24]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f022 0204 	bic.w	r2, r2, #4
 801050a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6999      	ldr	r1, [r3, #24]
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	691a      	ldr	r2, [r3, #16]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	430a      	orrs	r2, r1
 801051c:	619a      	str	r2, [r3, #24]
      break;
 801051e:	e0a5      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	68b9      	ldr	r1, [r7, #8]
 8010526:	4618      	mov	r0, r3
 8010528:	f000 faf8 	bl	8010b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	699a      	ldr	r2, [r3, #24]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801053a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	699a      	ldr	r2, [r3, #24]
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801054a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	6999      	ldr	r1, [r3, #24]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	691b      	ldr	r3, [r3, #16]
 8010556:	021a      	lsls	r2, r3, #8
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	430a      	orrs	r2, r1
 801055e:	619a      	str	r2, [r3, #24]
      break;
 8010560:	e084      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	68b9      	ldr	r1, [r7, #8]
 8010568:	4618      	mov	r0, r3
 801056a:	f000 fb61 	bl	8010c30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	69da      	ldr	r2, [r3, #28]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f042 0208 	orr.w	r2, r2, #8
 801057c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	69da      	ldr	r2, [r3, #28]
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f022 0204 	bic.w	r2, r2, #4
 801058c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	69d9      	ldr	r1, [r3, #28]
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	691a      	ldr	r2, [r3, #16]
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	430a      	orrs	r2, r1
 801059e:	61da      	str	r2, [r3, #28]
      break;
 80105a0:	e064      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 fbc9 	bl	8010d40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	69da      	ldr	r2, [r3, #28]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80105bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	69da      	ldr	r2, [r3, #28]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	69d9      	ldr	r1, [r3, #28]
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	021a      	lsls	r2, r3, #8
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	430a      	orrs	r2, r1
 80105e0:	61da      	str	r2, [r3, #28]
      break;
 80105e2:	e043      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	68b9      	ldr	r1, [r7, #8]
 80105ea:	4618      	mov	r0, r3
 80105ec:	f000 fc12 	bl	8010e14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f042 0208 	orr.w	r2, r2, #8
 80105fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	f022 0204 	bic.w	r2, r2, #4
 801060e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	691a      	ldr	r2, [r3, #16]
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	430a      	orrs	r2, r1
 8010620:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010622:	e023      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	68b9      	ldr	r1, [r7, #8]
 801062a:	4618      	mov	r0, r3
 801062c:	f000 fc56 	bl	8010edc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801063e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801064e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	691b      	ldr	r3, [r3, #16]
 801065a:	021a      	lsls	r2, r3, #8
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	430a      	orrs	r2, r1
 8010662:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010664:	e002      	b.n	801066c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010666:	2301      	movs	r3, #1
 8010668:	75fb      	strb	r3, [r7, #23]
      break;
 801066a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010674:	7dfb      	ldrb	r3, [r7, #23]
}
 8010676:	4618      	mov	r0, r3
 8010678:	3718      	adds	r7, #24
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}
 801067e:	bf00      	nop

08010680 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010688:	bf00      	nop
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801069c:	bf00      	nop
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80106b0:	bf00      	nop
 80106b2:	370c      	adds	r7, #12
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr

080106bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80106bc:	b480      	push	{r7}
 80106be:	b083      	sub	sp, #12
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80106c4:	bf00      	nop
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80106d8:	bf00      	nop
 80106da:	370c      	adds	r7, #12
 80106dc:	46bd      	mov	sp, r7
 80106de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e2:	4770      	bx	lr

080106e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80106ec:	bf00      	nop
 80106ee:	370c      	adds	r7, #12
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010718:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	429a      	cmp	r2, r3
 8010722:	d107      	bne.n	8010734 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2201      	movs	r2, #1
 8010728:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2201      	movs	r2, #1
 801072e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010732:	e02a      	b.n	801078a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	429a      	cmp	r2, r3
 801073c:	d107      	bne.n	801074e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2202      	movs	r2, #2
 8010742:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801074c:	e01d      	b.n	801078a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	429a      	cmp	r2, r3
 8010756:	d107      	bne.n	8010768 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2204      	movs	r2, #4
 801075c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2201      	movs	r2, #1
 8010762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010766:	e010      	b.n	801078a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	429a      	cmp	r2, r3
 8010770:	d107      	bne.n	8010782 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2208      	movs	r2, #8
 8010776:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	2201      	movs	r2, #1
 801077c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010780:	e003      	b.n	801078a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	2201      	movs	r2, #1
 8010786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801078a:	68f8      	ldr	r0, [r7, #12]
 801078c:	f7ff ffb4 	bl	80106f8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2200      	movs	r2, #0
 8010794:	771a      	strb	r2, [r3, #28]
}
 8010796:	bf00      	nop
 8010798:	3710      	adds	r7, #16
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}

0801079e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801079e:	b580      	push	{r7, lr}
 80107a0:	b084      	sub	sp, #16
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107aa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	429a      	cmp	r2, r3
 80107b4:	d10b      	bne.n	80107ce <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2201      	movs	r2, #1
 80107ba:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	69db      	ldr	r3, [r3, #28]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d136      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107cc:	e031      	b.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107d2:	687a      	ldr	r2, [r7, #4]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d10b      	bne.n	80107f0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2202      	movs	r2, #2
 80107dc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	69db      	ldr	r3, [r3, #28]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d125      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	2201      	movs	r2, #1
 80107ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107ee:	e020      	b.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d10b      	bne.n	8010812 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2204      	movs	r2, #4
 80107fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	69db      	ldr	r3, [r3, #28]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d114      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	2201      	movs	r2, #1
 801080c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010810:	e00f      	b.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010816:	687a      	ldr	r2, [r7, #4]
 8010818:	429a      	cmp	r2, r3
 801081a:	d10a      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	2208      	movs	r2, #8
 8010820:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010832:	68f8      	ldr	r0, [r7, #12]
 8010834:	f7ff ff42 	bl	80106bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2200      	movs	r2, #0
 801083c:	771a      	strb	r2, [r3, #28]
}
 801083e:	bf00      	nop
 8010840:	3710      	adds	r7, #16
 8010842:	46bd      	mov	sp, r7
 8010844:	bd80      	pop	{r7, pc}

08010846 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010846:	b580      	push	{r7, lr}
 8010848:	b084      	sub	sp, #16
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010852:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010858:	687a      	ldr	r2, [r7, #4]
 801085a:	429a      	cmp	r2, r3
 801085c:	d103      	bne.n	8010866 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2201      	movs	r2, #1
 8010862:	771a      	strb	r2, [r3, #28]
 8010864:	e019      	b.n	801089a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801086a:	687a      	ldr	r2, [r7, #4]
 801086c:	429a      	cmp	r2, r3
 801086e:	d103      	bne.n	8010878 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2202      	movs	r2, #2
 8010874:	771a      	strb	r2, [r3, #28]
 8010876:	e010      	b.n	801089a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	429a      	cmp	r2, r3
 8010880:	d103      	bne.n	801088a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	2204      	movs	r2, #4
 8010886:	771a      	strb	r2, [r3, #28]
 8010888:	e007      	b.n	801089a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d102      	bne.n	801089a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2208      	movs	r2, #8
 8010898:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f7ff ff18 	bl	80106d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2200      	movs	r2, #0
 80108a4:	771a      	strb	r2, [r3, #28]
}
 80108a6:	bf00      	nop
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4a44      	ldr	r2, [pc, #272]	; (80109d4 <TIM_Base_SetConfig+0x124>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d013      	beq.n	80108f0 <TIM_Base_SetConfig+0x40>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108ce:	d00f      	beq.n	80108f0 <TIM_Base_SetConfig+0x40>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4a41      	ldr	r2, [pc, #260]	; (80109d8 <TIM_Base_SetConfig+0x128>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d00b      	beq.n	80108f0 <TIM_Base_SetConfig+0x40>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	4a40      	ldr	r2, [pc, #256]	; (80109dc <TIM_Base_SetConfig+0x12c>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d007      	beq.n	80108f0 <TIM_Base_SetConfig+0x40>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	4a3f      	ldr	r2, [pc, #252]	; (80109e0 <TIM_Base_SetConfig+0x130>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d003      	beq.n	80108f0 <TIM_Base_SetConfig+0x40>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a3e      	ldr	r2, [pc, #248]	; (80109e4 <TIM_Base_SetConfig+0x134>)
 80108ec:	4293      	cmp	r3, r2
 80108ee:	d108      	bne.n	8010902 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80108f8:	683b      	ldr	r3, [r7, #0]
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4313      	orrs	r3, r2
 8010900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a33      	ldr	r2, [pc, #204]	; (80109d4 <TIM_Base_SetConfig+0x124>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d027      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010910:	d023      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a30      	ldr	r2, [pc, #192]	; (80109d8 <TIM_Base_SetConfig+0x128>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d01f      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a2f      	ldr	r2, [pc, #188]	; (80109dc <TIM_Base_SetConfig+0x12c>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d01b      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a2e      	ldr	r2, [pc, #184]	; (80109e0 <TIM_Base_SetConfig+0x130>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d017      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a2d      	ldr	r2, [pc, #180]	; (80109e4 <TIM_Base_SetConfig+0x134>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d013      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a2c      	ldr	r2, [pc, #176]	; (80109e8 <TIM_Base_SetConfig+0x138>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d00f      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a2b      	ldr	r2, [pc, #172]	; (80109ec <TIM_Base_SetConfig+0x13c>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d00b      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a2a      	ldr	r2, [pc, #168]	; (80109f0 <TIM_Base_SetConfig+0x140>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d007      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a29      	ldr	r2, [pc, #164]	; (80109f4 <TIM_Base_SetConfig+0x144>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d003      	beq.n	801095a <TIM_Base_SetConfig+0xaa>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4a28      	ldr	r2, [pc, #160]	; (80109f8 <TIM_Base_SetConfig+0x148>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d108      	bne.n	801096c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	68db      	ldr	r3, [r3, #12]
 8010966:	68fa      	ldr	r2, [r7, #12]
 8010968:	4313      	orrs	r3, r2
 801096a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010972:	683b      	ldr	r3, [r7, #0]
 8010974:	695b      	ldr	r3, [r3, #20]
 8010976:	4313      	orrs	r3, r2
 8010978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010980:	683b      	ldr	r3, [r7, #0]
 8010982:	689a      	ldr	r2, [r3, #8]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a10      	ldr	r2, [pc, #64]	; (80109d4 <TIM_Base_SetConfig+0x124>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d00f      	beq.n	80109b8 <TIM_Base_SetConfig+0x108>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a12      	ldr	r2, [pc, #72]	; (80109e4 <TIM_Base_SetConfig+0x134>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d00b      	beq.n	80109b8 <TIM_Base_SetConfig+0x108>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a11      	ldr	r2, [pc, #68]	; (80109e8 <TIM_Base_SetConfig+0x138>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d007      	beq.n	80109b8 <TIM_Base_SetConfig+0x108>
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	4a10      	ldr	r2, [pc, #64]	; (80109ec <TIM_Base_SetConfig+0x13c>)
 80109ac:	4293      	cmp	r3, r2
 80109ae:	d003      	beq.n	80109b8 <TIM_Base_SetConfig+0x108>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	4a0f      	ldr	r2, [pc, #60]	; (80109f0 <TIM_Base_SetConfig+0x140>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d103      	bne.n	80109c0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	691a      	ldr	r2, [r3, #16]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2201      	movs	r2, #1
 80109c4:	615a      	str	r2, [r3, #20]
}
 80109c6:	bf00      	nop
 80109c8:	3714      	adds	r7, #20
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	40010000 	.word	0x40010000
 80109d8:	40000400 	.word	0x40000400
 80109dc:	40000800 	.word	0x40000800
 80109e0:	40000c00 	.word	0x40000c00
 80109e4:	40010400 	.word	0x40010400
 80109e8:	40014000 	.word	0x40014000
 80109ec:	40014400 	.word	0x40014400
 80109f0:	40014800 	.word	0x40014800
 80109f4:	4000e000 	.word	0x4000e000
 80109f8:	4000e400 	.word	0x4000e400

080109fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b087      	sub	sp, #28
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6a1b      	ldr	r3, [r3, #32]
 8010a0a:	f023 0201 	bic.w	r2, r3, #1
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6a1b      	ldr	r3, [r3, #32]
 8010a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	685b      	ldr	r3, [r3, #4]
 8010a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	699b      	ldr	r3, [r3, #24]
 8010a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010a24:	68fa      	ldr	r2, [r7, #12]
 8010a26:	4b37      	ldr	r3, [pc, #220]	; (8010b04 <TIM_OC1_SetConfig+0x108>)
 8010a28:	4013      	ands	r3, r2
 8010a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f023 0303 	bic.w	r3, r3, #3
 8010a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	68fa      	ldr	r2, [r7, #12]
 8010a3a:	4313      	orrs	r3, r2
 8010a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f023 0302 	bic.w	r3, r3, #2
 8010a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	689b      	ldr	r3, [r3, #8]
 8010a4a:	697a      	ldr	r2, [r7, #20]
 8010a4c:	4313      	orrs	r3, r2
 8010a4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a2d      	ldr	r2, [pc, #180]	; (8010b08 <TIM_OC1_SetConfig+0x10c>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d00f      	beq.n	8010a78 <TIM_OC1_SetConfig+0x7c>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a2c      	ldr	r2, [pc, #176]	; (8010b0c <TIM_OC1_SetConfig+0x110>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d00b      	beq.n	8010a78 <TIM_OC1_SetConfig+0x7c>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a2b      	ldr	r2, [pc, #172]	; (8010b10 <TIM_OC1_SetConfig+0x114>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d007      	beq.n	8010a78 <TIM_OC1_SetConfig+0x7c>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a2a      	ldr	r2, [pc, #168]	; (8010b14 <TIM_OC1_SetConfig+0x118>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d003      	beq.n	8010a78 <TIM_OC1_SetConfig+0x7c>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a29      	ldr	r2, [pc, #164]	; (8010b18 <TIM_OC1_SetConfig+0x11c>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d10c      	bne.n	8010a92 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	f023 0308 	bic.w	r3, r3, #8
 8010a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	68db      	ldr	r3, [r3, #12]
 8010a84:	697a      	ldr	r2, [r7, #20]
 8010a86:	4313      	orrs	r3, r2
 8010a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f023 0304 	bic.w	r3, r3, #4
 8010a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a1c      	ldr	r2, [pc, #112]	; (8010b08 <TIM_OC1_SetConfig+0x10c>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d00f      	beq.n	8010aba <TIM_OC1_SetConfig+0xbe>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a1b      	ldr	r2, [pc, #108]	; (8010b0c <TIM_OC1_SetConfig+0x110>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d00b      	beq.n	8010aba <TIM_OC1_SetConfig+0xbe>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a1a      	ldr	r2, [pc, #104]	; (8010b10 <TIM_OC1_SetConfig+0x114>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d007      	beq.n	8010aba <TIM_OC1_SetConfig+0xbe>
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	4a19      	ldr	r2, [pc, #100]	; (8010b14 <TIM_OC1_SetConfig+0x118>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d003      	beq.n	8010aba <TIM_OC1_SetConfig+0xbe>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	4a18      	ldr	r2, [pc, #96]	; (8010b18 <TIM_OC1_SetConfig+0x11c>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d111      	bne.n	8010ade <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	695b      	ldr	r3, [r3, #20]
 8010ace:	693a      	ldr	r2, [r7, #16]
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	693a      	ldr	r2, [r7, #16]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	68fa      	ldr	r2, [r7, #12]
 8010ae8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	685a      	ldr	r2, [r3, #4]
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	697a      	ldr	r2, [r7, #20]
 8010af6:	621a      	str	r2, [r3, #32]
}
 8010af8:	bf00      	nop
 8010afa:	371c      	adds	r7, #28
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr
 8010b04:	fffeff8f 	.word	0xfffeff8f
 8010b08:	40010000 	.word	0x40010000
 8010b0c:	40010400 	.word	0x40010400
 8010b10:	40014000 	.word	0x40014000
 8010b14:	40014400 	.word	0x40014400
 8010b18:	40014800 	.word	0x40014800

08010b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b1c:	b480      	push	{r7}
 8010b1e:	b087      	sub	sp, #28
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6a1b      	ldr	r3, [r3, #32]
 8010b2a:	f023 0210 	bic.w	r2, r3, #16
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6a1b      	ldr	r3, [r3, #32]
 8010b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	4b34      	ldr	r3, [pc, #208]	; (8010c18 <TIM_OC2_SetConfig+0xfc>)
 8010b48:	4013      	ands	r3, r2
 8010b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	021b      	lsls	r3, r3, #8
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	4313      	orrs	r3, r2
 8010b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	f023 0320 	bic.w	r3, r3, #32
 8010b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	011b      	lsls	r3, r3, #4
 8010b6e:	697a      	ldr	r2, [r7, #20]
 8010b70:	4313      	orrs	r3, r2
 8010b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	4a29      	ldr	r2, [pc, #164]	; (8010c1c <TIM_OC2_SetConfig+0x100>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d003      	beq.n	8010b84 <TIM_OC2_SetConfig+0x68>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	4a28      	ldr	r2, [pc, #160]	; (8010c20 <TIM_OC2_SetConfig+0x104>)
 8010b80:	4293      	cmp	r3, r2
 8010b82:	d10d      	bne.n	8010ba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	68db      	ldr	r3, [r3, #12]
 8010b90:	011b      	lsls	r3, r3, #4
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	4313      	orrs	r3, r2
 8010b96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4a1e      	ldr	r2, [pc, #120]	; (8010c1c <TIM_OC2_SetConfig+0x100>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d00f      	beq.n	8010bc8 <TIM_OC2_SetConfig+0xac>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a1d      	ldr	r2, [pc, #116]	; (8010c20 <TIM_OC2_SetConfig+0x104>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d00b      	beq.n	8010bc8 <TIM_OC2_SetConfig+0xac>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a1c      	ldr	r2, [pc, #112]	; (8010c24 <TIM_OC2_SetConfig+0x108>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d007      	beq.n	8010bc8 <TIM_OC2_SetConfig+0xac>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a1b      	ldr	r2, [pc, #108]	; (8010c28 <TIM_OC2_SetConfig+0x10c>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d003      	beq.n	8010bc8 <TIM_OC2_SetConfig+0xac>
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	4a1a      	ldr	r2, [pc, #104]	; (8010c2c <TIM_OC2_SetConfig+0x110>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d113      	bne.n	8010bf0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010bce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	695b      	ldr	r3, [r3, #20]
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	693a      	ldr	r2, [r7, #16]
 8010be0:	4313      	orrs	r3, r2
 8010be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	699b      	ldr	r3, [r3, #24]
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	693a      	ldr	r2, [r7, #16]
 8010bec:	4313      	orrs	r3, r2
 8010bee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	693a      	ldr	r2, [r7, #16]
 8010bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	68fa      	ldr	r2, [r7, #12]
 8010bfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010bfc:	683b      	ldr	r3, [r7, #0]
 8010bfe:	685a      	ldr	r2, [r3, #4]
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	697a      	ldr	r2, [r7, #20]
 8010c08:	621a      	str	r2, [r3, #32]
}
 8010c0a:	bf00      	nop
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
 8010c16:	bf00      	nop
 8010c18:	feff8fff 	.word	0xfeff8fff
 8010c1c:	40010000 	.word	0x40010000
 8010c20:	40010400 	.word	0x40010400
 8010c24:	40014000 	.word	0x40014000
 8010c28:	40014400 	.word	0x40014400
 8010c2c:	40014800 	.word	0x40014800

08010c30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c30:	b480      	push	{r7}
 8010c32:	b087      	sub	sp, #28
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6a1b      	ldr	r3, [r3, #32]
 8010c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6a1b      	ldr	r3, [r3, #32]
 8010c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	69db      	ldr	r3, [r3, #28]
 8010c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	4b33      	ldr	r3, [pc, #204]	; (8010d28 <TIM_OC3_SetConfig+0xf8>)
 8010c5c:	4013      	ands	r3, r2
 8010c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f023 0303 	bic.w	r3, r3, #3
 8010c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	689b      	ldr	r3, [r3, #8]
 8010c7e:	021b      	lsls	r3, r3, #8
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	4a28      	ldr	r2, [pc, #160]	; (8010d2c <TIM_OC3_SetConfig+0xfc>)
 8010c8a:	4293      	cmp	r3, r2
 8010c8c:	d003      	beq.n	8010c96 <TIM_OC3_SetConfig+0x66>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4a27      	ldr	r2, [pc, #156]	; (8010d30 <TIM_OC3_SetConfig+0x100>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d10d      	bne.n	8010cb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	021b      	lsls	r3, r3, #8
 8010ca4:	697a      	ldr	r2, [r7, #20]
 8010ca6:	4313      	orrs	r3, r2
 8010ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010caa:	697b      	ldr	r3, [r7, #20]
 8010cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a1d      	ldr	r2, [pc, #116]	; (8010d2c <TIM_OC3_SetConfig+0xfc>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d00f      	beq.n	8010cda <TIM_OC3_SetConfig+0xaa>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a1c      	ldr	r2, [pc, #112]	; (8010d30 <TIM_OC3_SetConfig+0x100>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d00b      	beq.n	8010cda <TIM_OC3_SetConfig+0xaa>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	4a1b      	ldr	r2, [pc, #108]	; (8010d34 <TIM_OC3_SetConfig+0x104>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d007      	beq.n	8010cda <TIM_OC3_SetConfig+0xaa>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4a1a      	ldr	r2, [pc, #104]	; (8010d38 <TIM_OC3_SetConfig+0x108>)
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d003      	beq.n	8010cda <TIM_OC3_SetConfig+0xaa>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	4a19      	ldr	r2, [pc, #100]	; (8010d3c <TIM_OC3_SetConfig+0x10c>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d113      	bne.n	8010d02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010cda:	693b      	ldr	r3, [r7, #16]
 8010cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	695b      	ldr	r3, [r3, #20]
 8010cee:	011b      	lsls	r3, r3, #4
 8010cf0:	693a      	ldr	r2, [r7, #16]
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010cf6:	683b      	ldr	r3, [r7, #0]
 8010cf8:	699b      	ldr	r3, [r3, #24]
 8010cfa:	011b      	lsls	r3, r3, #4
 8010cfc:	693a      	ldr	r2, [r7, #16]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	693a      	ldr	r2, [r7, #16]
 8010d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	68fa      	ldr	r2, [r7, #12]
 8010d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	685a      	ldr	r2, [r3, #4]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	621a      	str	r2, [r3, #32]
}
 8010d1c:	bf00      	nop
 8010d1e:	371c      	adds	r7, #28
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	fffeff8f 	.word	0xfffeff8f
 8010d2c:	40010000 	.word	0x40010000
 8010d30:	40010400 	.word	0x40010400
 8010d34:	40014000 	.word	0x40014000
 8010d38:	40014400 	.word	0x40014400
 8010d3c:	40014800 	.word	0x40014800

08010d40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b087      	sub	sp, #28
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6a1b      	ldr	r3, [r3, #32]
 8010d4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a1b      	ldr	r3, [r3, #32]
 8010d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	685b      	ldr	r3, [r3, #4]
 8010d60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	69db      	ldr	r3, [r3, #28]
 8010d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	4b24      	ldr	r3, [pc, #144]	; (8010dfc <TIM_OC4_SetConfig+0xbc>)
 8010d6c:	4013      	ands	r3, r2
 8010d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	021b      	lsls	r3, r3, #8
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	4313      	orrs	r3, r2
 8010d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	689b      	ldr	r3, [r3, #8]
 8010d90:	031b      	lsls	r3, r3, #12
 8010d92:	693a      	ldr	r2, [r7, #16]
 8010d94:	4313      	orrs	r3, r2
 8010d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a19      	ldr	r2, [pc, #100]	; (8010e00 <TIM_OC4_SetConfig+0xc0>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d00f      	beq.n	8010dc0 <TIM_OC4_SetConfig+0x80>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a18      	ldr	r2, [pc, #96]	; (8010e04 <TIM_OC4_SetConfig+0xc4>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d00b      	beq.n	8010dc0 <TIM_OC4_SetConfig+0x80>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a17      	ldr	r2, [pc, #92]	; (8010e08 <TIM_OC4_SetConfig+0xc8>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d007      	beq.n	8010dc0 <TIM_OC4_SetConfig+0x80>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	4a16      	ldr	r2, [pc, #88]	; (8010e0c <TIM_OC4_SetConfig+0xcc>)
 8010db4:	4293      	cmp	r3, r2
 8010db6:	d003      	beq.n	8010dc0 <TIM_OC4_SetConfig+0x80>
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4a15      	ldr	r2, [pc, #84]	; (8010e10 <TIM_OC4_SetConfig+0xd0>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d109      	bne.n	8010dd4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	695b      	ldr	r3, [r3, #20]
 8010dcc:	019b      	lsls	r3, r3, #6
 8010dce:	697a      	ldr	r2, [r7, #20]
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	697a      	ldr	r2, [r7, #20]
 8010dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	685a      	ldr	r2, [r3, #4]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	693a      	ldr	r2, [r7, #16]
 8010dec:	621a      	str	r2, [r3, #32]
}
 8010dee:	bf00      	nop
 8010df0:	371c      	adds	r7, #28
 8010df2:	46bd      	mov	sp, r7
 8010df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df8:	4770      	bx	lr
 8010dfa:	bf00      	nop
 8010dfc:	feff8fff 	.word	0xfeff8fff
 8010e00:	40010000 	.word	0x40010000
 8010e04:	40010400 	.word	0x40010400
 8010e08:	40014000 	.word	0x40014000
 8010e0c:	40014400 	.word	0x40014400
 8010e10:	40014800 	.word	0x40014800

08010e14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b087      	sub	sp, #28
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
 8010e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6a1b      	ldr	r3, [r3, #32]
 8010e22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a1b      	ldr	r3, [r3, #32]
 8010e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	4b21      	ldr	r3, [pc, #132]	; (8010ec4 <TIM_OC5_SetConfig+0xb0>)
 8010e40:	4013      	ands	r3, r2
 8010e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	68fa      	ldr	r2, [r7, #12]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010e54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	041b      	lsls	r3, r3, #16
 8010e5c:	693a      	ldr	r2, [r7, #16]
 8010e5e:	4313      	orrs	r3, r2
 8010e60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4a18      	ldr	r2, [pc, #96]	; (8010ec8 <TIM_OC5_SetConfig+0xb4>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d00f      	beq.n	8010e8a <TIM_OC5_SetConfig+0x76>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4a17      	ldr	r2, [pc, #92]	; (8010ecc <TIM_OC5_SetConfig+0xb8>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d00b      	beq.n	8010e8a <TIM_OC5_SetConfig+0x76>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4a16      	ldr	r2, [pc, #88]	; (8010ed0 <TIM_OC5_SetConfig+0xbc>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d007      	beq.n	8010e8a <TIM_OC5_SetConfig+0x76>
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	4a15      	ldr	r2, [pc, #84]	; (8010ed4 <TIM_OC5_SetConfig+0xc0>)
 8010e7e:	4293      	cmp	r3, r2
 8010e80:	d003      	beq.n	8010e8a <TIM_OC5_SetConfig+0x76>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4a14      	ldr	r2, [pc, #80]	; (8010ed8 <TIM_OC5_SetConfig+0xc4>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d109      	bne.n	8010e9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	695b      	ldr	r3, [r3, #20]
 8010e96:	021b      	lsls	r3, r3, #8
 8010e98:	697a      	ldr	r2, [r7, #20]
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	697a      	ldr	r2, [r7, #20]
 8010ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	68fa      	ldr	r2, [r7, #12]
 8010ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	685a      	ldr	r2, [r3, #4]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	693a      	ldr	r2, [r7, #16]
 8010eb6:	621a      	str	r2, [r3, #32]
}
 8010eb8:	bf00      	nop
 8010eba:	371c      	adds	r7, #28
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr
 8010ec4:	fffeff8f 	.word	0xfffeff8f
 8010ec8:	40010000 	.word	0x40010000
 8010ecc:	40010400 	.word	0x40010400
 8010ed0:	40014000 	.word	0x40014000
 8010ed4:	40014400 	.word	0x40014400
 8010ed8:	40014800 	.word	0x40014800

08010edc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b087      	sub	sp, #28
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6a1b      	ldr	r3, [r3, #32]
 8010eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6a1b      	ldr	r3, [r3, #32]
 8010ef6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010f04:	68fa      	ldr	r2, [r7, #12]
 8010f06:	4b22      	ldr	r3, [pc, #136]	; (8010f90 <TIM_OC6_SetConfig+0xb4>)
 8010f08:	4013      	ands	r3, r2
 8010f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	021b      	lsls	r3, r3, #8
 8010f12:	68fa      	ldr	r2, [r7, #12]
 8010f14:	4313      	orrs	r3, r2
 8010f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	689b      	ldr	r3, [r3, #8]
 8010f24:	051b      	lsls	r3, r3, #20
 8010f26:	693a      	ldr	r2, [r7, #16]
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4a19      	ldr	r2, [pc, #100]	; (8010f94 <TIM_OC6_SetConfig+0xb8>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d00f      	beq.n	8010f54 <TIM_OC6_SetConfig+0x78>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4a18      	ldr	r2, [pc, #96]	; (8010f98 <TIM_OC6_SetConfig+0xbc>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d00b      	beq.n	8010f54 <TIM_OC6_SetConfig+0x78>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a17      	ldr	r2, [pc, #92]	; (8010f9c <TIM_OC6_SetConfig+0xc0>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d007      	beq.n	8010f54 <TIM_OC6_SetConfig+0x78>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4a16      	ldr	r2, [pc, #88]	; (8010fa0 <TIM_OC6_SetConfig+0xc4>)
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d003      	beq.n	8010f54 <TIM_OC6_SetConfig+0x78>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4a15      	ldr	r2, [pc, #84]	; (8010fa4 <TIM_OC6_SetConfig+0xc8>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d109      	bne.n	8010f68 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	695b      	ldr	r3, [r3, #20]
 8010f60:	029b      	lsls	r3, r3, #10
 8010f62:	697a      	ldr	r2, [r7, #20]
 8010f64:	4313      	orrs	r3, r2
 8010f66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	68fa      	ldr	r2, [r7, #12]
 8010f72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	685a      	ldr	r2, [r3, #4]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	621a      	str	r2, [r3, #32]
}
 8010f82:	bf00      	nop
 8010f84:	371c      	adds	r7, #28
 8010f86:	46bd      	mov	sp, r7
 8010f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop
 8010f90:	feff8fff 	.word	0xfeff8fff
 8010f94:	40010000 	.word	0x40010000
 8010f98:	40010400 	.word	0x40010400
 8010f9c:	40014000 	.word	0x40014000
 8010fa0:	40014400 	.word	0x40014400
 8010fa4:	40014800 	.word	0x40014800

08010fa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010fa8:	b480      	push	{r7}
 8010faa:	b087      	sub	sp, #28
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	60f8      	str	r0, [r7, #12]
 8010fb0:	60b9      	str	r1, [r7, #8]
 8010fb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	f003 031f 	and.w	r3, r3, #31
 8010fba:	2201      	movs	r2, #1
 8010fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8010fc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	6a1a      	ldr	r2, [r3, #32]
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	43db      	mvns	r3, r3
 8010fca:	401a      	ands	r2, r3
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	6a1a      	ldr	r2, [r3, #32]
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	f003 031f 	and.w	r3, r3, #31
 8010fda:	6879      	ldr	r1, [r7, #4]
 8010fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8010fe0:	431a      	orrs	r2, r3
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	621a      	str	r2, [r3, #32]
}
 8010fe6:	bf00      	nop
 8010fe8:	371c      	adds	r7, #28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
	...

08010ff4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011004:	2b01      	cmp	r3, #1
 8011006:	d101      	bne.n	801100c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011008:	2302      	movs	r3, #2
 801100a:	e077      	b.n	80110fc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2202      	movs	r2, #2
 8011018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	685b      	ldr	r3, [r3, #4]
 8011022:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	689b      	ldr	r3, [r3, #8]
 801102a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4a35      	ldr	r2, [pc, #212]	; (8011108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011032:	4293      	cmp	r3, r2
 8011034:	d004      	beq.n	8011040 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a34      	ldr	r2, [pc, #208]	; (801110c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d108      	bne.n	8011052 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011046:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	4313      	orrs	r3, r2
 8011050:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011058:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	68fa      	ldr	r2, [r7, #12]
 8011060:	4313      	orrs	r3, r2
 8011062:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	68fa      	ldr	r2, [r7, #12]
 801106a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	4a25      	ldr	r2, [pc, #148]	; (8011108 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d02c      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801107e:	d027      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a22      	ldr	r2, [pc, #136]	; (8011110 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d022      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	4a21      	ldr	r2, [pc, #132]	; (8011114 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d01d      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	4a1f      	ldr	r2, [pc, #124]	; (8011118 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801109a:	4293      	cmp	r3, r2
 801109c:	d018      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	4a1a      	ldr	r2, [pc, #104]	; (801110c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d013      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	4a1b      	ldr	r2, [pc, #108]	; (801111c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d00e      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	4a1a      	ldr	r2, [pc, #104]	; (8011120 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d009      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a18      	ldr	r2, [pc, #96]	; (8011124 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d004      	beq.n	80110d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a17      	ldr	r2, [pc, #92]	; (8011128 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d10c      	bne.n	80110ea <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	689b      	ldr	r3, [r3, #8]
 80110dc:	68ba      	ldr	r2, [r7, #8]
 80110de:	4313      	orrs	r3, r2
 80110e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68ba      	ldr	r2, [r7, #8]
 80110e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2201      	movs	r2, #1
 80110ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80110fa:	2300      	movs	r3, #0
}
 80110fc:	4618      	mov	r0, r3
 80110fe:	3714      	adds	r7, #20
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	40010000 	.word	0x40010000
 801110c:	40010400 	.word	0x40010400
 8011110:	40000400 	.word	0x40000400
 8011114:	40000800 	.word	0x40000800
 8011118:	40000c00 	.word	0x40000c00
 801111c:	40001800 	.word	0x40001800
 8011120:	40014000 	.word	0x40014000
 8011124:	4000e000 	.word	0x4000e000
 8011128:	4000e400 	.word	0x4000e400

0801112c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011134:	bf00      	nop
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011148:	bf00      	nop
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d101      	bne.n	801117a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011176:	2301      	movs	r3, #1
 8011178:	e042      	b.n	8011200 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011180:	2b00      	cmp	r3, #0
 8011182:	d106      	bne.n	8011192 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	2200      	movs	r2, #0
 8011188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7f2 fb17 	bl	80037c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2224      	movs	r2, #36	; 0x24
 8011196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	681a      	ldr	r2, [r3, #0]
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	f022 0201 	bic.w	r2, r2, #1
 80111a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 f82c 	bl	8011208 <UART_SetConfig>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b01      	cmp	r3, #1
 80111b4:	d101      	bne.n	80111ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e022      	b.n	8011200 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fe8c 	bl	8011ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	685a      	ldr	r2, [r3, #4]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80111d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	689a      	ldr	r2, [r3, #8]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80111e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	f042 0201 	orr.w	r2, r2, #1
 80111f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80111f8:	6878      	ldr	r0, [r7, #4]
 80111fa:	f000 ff13 	bl	8012024 <UART_CheckIdleState>
 80111fe:	4603      	mov	r3, r0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801120c:	b092      	sub	sp, #72	; 0x48
 801120e:	af00      	add	r7, sp, #0
 8011210:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011212:	2300      	movs	r3, #0
 8011214:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	689a      	ldr	r2, [r3, #8]
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	431a      	orrs	r2, r3
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	695b      	ldr	r3, [r3, #20]
 8011226:	431a      	orrs	r2, r3
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	69db      	ldr	r3, [r3, #28]
 801122c:	4313      	orrs	r3, r2
 801122e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011230:	697b      	ldr	r3, [r7, #20]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	681a      	ldr	r2, [r3, #0]
 8011236:	4bbe      	ldr	r3, [pc, #760]	; (8011530 <UART_SetConfig+0x328>)
 8011238:	4013      	ands	r3, r2
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	6812      	ldr	r2, [r2, #0]
 801123e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011240:	430b      	orrs	r3, r1
 8011242:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	685b      	ldr	r3, [r3, #4]
 801124a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	68da      	ldr	r2, [r3, #12]
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	430a      	orrs	r2, r1
 8011258:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4ab3      	ldr	r2, [pc, #716]	; (8011534 <UART_SetConfig+0x32c>)
 8011266:	4293      	cmp	r3, r2
 8011268:	d004      	beq.n	8011274 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801126a:	697b      	ldr	r3, [r7, #20]
 801126c:	6a1b      	ldr	r3, [r3, #32]
 801126e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011270:	4313      	orrs	r3, r2
 8011272:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	689a      	ldr	r2, [r3, #8]
 801127a:	4baf      	ldr	r3, [pc, #700]	; (8011538 <UART_SetConfig+0x330>)
 801127c:	4013      	ands	r3, r2
 801127e:	697a      	ldr	r2, [r7, #20]
 8011280:	6812      	ldr	r2, [r2, #0]
 8011282:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011284:	430b      	orrs	r3, r1
 8011286:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011288:	697b      	ldr	r3, [r7, #20]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801128e:	f023 010f 	bic.w	r1, r3, #15
 8011292:	697b      	ldr	r3, [r7, #20]
 8011294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	430a      	orrs	r2, r1
 801129c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	4aa6      	ldr	r2, [pc, #664]	; (801153c <UART_SetConfig+0x334>)
 80112a4:	4293      	cmp	r3, r2
 80112a6:	d177      	bne.n	8011398 <UART_SetConfig+0x190>
 80112a8:	4ba5      	ldr	r3, [pc, #660]	; (8011540 <UART_SetConfig+0x338>)
 80112aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112b0:	2b28      	cmp	r3, #40	; 0x28
 80112b2:	d86d      	bhi.n	8011390 <UART_SetConfig+0x188>
 80112b4:	a201      	add	r2, pc, #4	; (adr r2, 80112bc <UART_SetConfig+0xb4>)
 80112b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112ba:	bf00      	nop
 80112bc:	08011361 	.word	0x08011361
 80112c0:	08011391 	.word	0x08011391
 80112c4:	08011391 	.word	0x08011391
 80112c8:	08011391 	.word	0x08011391
 80112cc:	08011391 	.word	0x08011391
 80112d0:	08011391 	.word	0x08011391
 80112d4:	08011391 	.word	0x08011391
 80112d8:	08011391 	.word	0x08011391
 80112dc:	08011369 	.word	0x08011369
 80112e0:	08011391 	.word	0x08011391
 80112e4:	08011391 	.word	0x08011391
 80112e8:	08011391 	.word	0x08011391
 80112ec:	08011391 	.word	0x08011391
 80112f0:	08011391 	.word	0x08011391
 80112f4:	08011391 	.word	0x08011391
 80112f8:	08011391 	.word	0x08011391
 80112fc:	08011371 	.word	0x08011371
 8011300:	08011391 	.word	0x08011391
 8011304:	08011391 	.word	0x08011391
 8011308:	08011391 	.word	0x08011391
 801130c:	08011391 	.word	0x08011391
 8011310:	08011391 	.word	0x08011391
 8011314:	08011391 	.word	0x08011391
 8011318:	08011391 	.word	0x08011391
 801131c:	08011379 	.word	0x08011379
 8011320:	08011391 	.word	0x08011391
 8011324:	08011391 	.word	0x08011391
 8011328:	08011391 	.word	0x08011391
 801132c:	08011391 	.word	0x08011391
 8011330:	08011391 	.word	0x08011391
 8011334:	08011391 	.word	0x08011391
 8011338:	08011391 	.word	0x08011391
 801133c:	08011381 	.word	0x08011381
 8011340:	08011391 	.word	0x08011391
 8011344:	08011391 	.word	0x08011391
 8011348:	08011391 	.word	0x08011391
 801134c:	08011391 	.word	0x08011391
 8011350:	08011391 	.word	0x08011391
 8011354:	08011391 	.word	0x08011391
 8011358:	08011391 	.word	0x08011391
 801135c:	08011389 	.word	0x08011389
 8011360:	2301      	movs	r3, #1
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e326      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011368:	2304      	movs	r3, #4
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136e:	e322      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011370:	2308      	movs	r3, #8
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011376:	e31e      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011378:	2310      	movs	r3, #16
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e31a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011380:	2320      	movs	r3, #32
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e316      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011388:	2340      	movs	r3, #64	; 0x40
 801138a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138e:	e312      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011390:	2380      	movs	r3, #128	; 0x80
 8011392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011396:	e30e      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4a69      	ldr	r2, [pc, #420]	; (8011544 <UART_SetConfig+0x33c>)
 801139e:	4293      	cmp	r3, r2
 80113a0:	d130      	bne.n	8011404 <UART_SetConfig+0x1fc>
 80113a2:	4b67      	ldr	r3, [pc, #412]	; (8011540 <UART_SetConfig+0x338>)
 80113a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113a6:	f003 0307 	and.w	r3, r3, #7
 80113aa:	2b05      	cmp	r3, #5
 80113ac:	d826      	bhi.n	80113fc <UART_SetConfig+0x1f4>
 80113ae:	a201      	add	r2, pc, #4	; (adr r2, 80113b4 <UART_SetConfig+0x1ac>)
 80113b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113b4:	080113cd 	.word	0x080113cd
 80113b8:	080113d5 	.word	0x080113d5
 80113bc:	080113dd 	.word	0x080113dd
 80113c0:	080113e5 	.word	0x080113e5
 80113c4:	080113ed 	.word	0x080113ed
 80113c8:	080113f5 	.word	0x080113f5
 80113cc:	2300      	movs	r3, #0
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e2f0      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113d4:	2304      	movs	r3, #4
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e2ec      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113dc:	2308      	movs	r3, #8
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e2e8      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113e4:	2310      	movs	r3, #16
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e2e4      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113ec:	2320      	movs	r3, #32
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e2e0      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113f4:	2340      	movs	r3, #64	; 0x40
 80113f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113fa:	e2dc      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80113fc:	2380      	movs	r3, #128	; 0x80
 80113fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011402:	e2d8      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4a4f      	ldr	r2, [pc, #316]	; (8011548 <UART_SetConfig+0x340>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d130      	bne.n	8011470 <UART_SetConfig+0x268>
 801140e:	4b4c      	ldr	r3, [pc, #304]	; (8011540 <UART_SetConfig+0x338>)
 8011410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011412:	f003 0307 	and.w	r3, r3, #7
 8011416:	2b05      	cmp	r3, #5
 8011418:	d826      	bhi.n	8011468 <UART_SetConfig+0x260>
 801141a:	a201      	add	r2, pc, #4	; (adr r2, 8011420 <UART_SetConfig+0x218>)
 801141c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011420:	08011439 	.word	0x08011439
 8011424:	08011441 	.word	0x08011441
 8011428:	08011449 	.word	0x08011449
 801142c:	08011451 	.word	0x08011451
 8011430:	08011459 	.word	0x08011459
 8011434:	08011461 	.word	0x08011461
 8011438:	2300      	movs	r3, #0
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143e:	e2ba      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011440:	2304      	movs	r3, #4
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011446:	e2b6      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011448:	2308      	movs	r3, #8
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144e:	e2b2      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011450:	2310      	movs	r3, #16
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e2ae      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011458:	2320      	movs	r3, #32
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e2aa      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011460:	2340      	movs	r3, #64	; 0x40
 8011462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011466:	e2a6      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011468:	2380      	movs	r3, #128	; 0x80
 801146a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146e:	e2a2      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	4a35      	ldr	r2, [pc, #212]	; (801154c <UART_SetConfig+0x344>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d130      	bne.n	80114dc <UART_SetConfig+0x2d4>
 801147a:	4b31      	ldr	r3, [pc, #196]	; (8011540 <UART_SetConfig+0x338>)
 801147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801147e:	f003 0307 	and.w	r3, r3, #7
 8011482:	2b05      	cmp	r3, #5
 8011484:	d826      	bhi.n	80114d4 <UART_SetConfig+0x2cc>
 8011486:	a201      	add	r2, pc, #4	; (adr r2, 801148c <UART_SetConfig+0x284>)
 8011488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148c:	080114a5 	.word	0x080114a5
 8011490:	080114ad 	.word	0x080114ad
 8011494:	080114b5 	.word	0x080114b5
 8011498:	080114bd 	.word	0x080114bd
 801149c:	080114c5 	.word	0x080114c5
 80114a0:	080114cd 	.word	0x080114cd
 80114a4:	2300      	movs	r3, #0
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e284      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114ac:	2304      	movs	r3, #4
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e280      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114b4:	2308      	movs	r3, #8
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e27c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114bc:	2310      	movs	r3, #16
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e278      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114c4:	2320      	movs	r3, #32
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ca:	e274      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114cc:	2340      	movs	r3, #64	; 0x40
 80114ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d2:	e270      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114d4:	2380      	movs	r3, #128	; 0x80
 80114d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114da:	e26c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a1b      	ldr	r2, [pc, #108]	; (8011550 <UART_SetConfig+0x348>)
 80114e2:	4293      	cmp	r3, r2
 80114e4:	d142      	bne.n	801156c <UART_SetConfig+0x364>
 80114e6:	4b16      	ldr	r3, [pc, #88]	; (8011540 <UART_SetConfig+0x338>)
 80114e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ea:	f003 0307 	and.w	r3, r3, #7
 80114ee:	2b05      	cmp	r3, #5
 80114f0:	d838      	bhi.n	8011564 <UART_SetConfig+0x35c>
 80114f2:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <UART_SetConfig+0x2f0>)
 80114f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f8:	08011511 	.word	0x08011511
 80114fc:	08011519 	.word	0x08011519
 8011500:	08011521 	.word	0x08011521
 8011504:	08011529 	.word	0x08011529
 8011508:	08011555 	.word	0x08011555
 801150c:	0801155d 	.word	0x0801155d
 8011510:	2300      	movs	r3, #0
 8011512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011516:	e24e      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011518:	2304      	movs	r3, #4
 801151a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151e:	e24a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011520:	2308      	movs	r3, #8
 8011522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011526:	e246      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011528:	2310      	movs	r3, #16
 801152a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801152e:	e242      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011530:	cfff69f3 	.word	0xcfff69f3
 8011534:	58000c00 	.word	0x58000c00
 8011538:	11fff4ff 	.word	0x11fff4ff
 801153c:	40011000 	.word	0x40011000
 8011540:	58024400 	.word	0x58024400
 8011544:	40004400 	.word	0x40004400
 8011548:	40004800 	.word	0x40004800
 801154c:	40004c00 	.word	0x40004c00
 8011550:	40005000 	.word	0x40005000
 8011554:	2320      	movs	r3, #32
 8011556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155a:	e22c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801155c:	2340      	movs	r3, #64	; 0x40
 801155e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011562:	e228      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011564:	2380      	movs	r3, #128	; 0x80
 8011566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156a:	e224      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	4ab1      	ldr	r2, [pc, #708]	; (8011838 <UART_SetConfig+0x630>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d176      	bne.n	8011664 <UART_SetConfig+0x45c>
 8011576:	4bb1      	ldr	r3, [pc, #708]	; (801183c <UART_SetConfig+0x634>)
 8011578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801157a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801157e:	2b28      	cmp	r3, #40	; 0x28
 8011580:	d86c      	bhi.n	801165c <UART_SetConfig+0x454>
 8011582:	a201      	add	r2, pc, #4	; (adr r2, 8011588 <UART_SetConfig+0x380>)
 8011584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011588:	0801162d 	.word	0x0801162d
 801158c:	0801165d 	.word	0x0801165d
 8011590:	0801165d 	.word	0x0801165d
 8011594:	0801165d 	.word	0x0801165d
 8011598:	0801165d 	.word	0x0801165d
 801159c:	0801165d 	.word	0x0801165d
 80115a0:	0801165d 	.word	0x0801165d
 80115a4:	0801165d 	.word	0x0801165d
 80115a8:	08011635 	.word	0x08011635
 80115ac:	0801165d 	.word	0x0801165d
 80115b0:	0801165d 	.word	0x0801165d
 80115b4:	0801165d 	.word	0x0801165d
 80115b8:	0801165d 	.word	0x0801165d
 80115bc:	0801165d 	.word	0x0801165d
 80115c0:	0801165d 	.word	0x0801165d
 80115c4:	0801165d 	.word	0x0801165d
 80115c8:	0801163d 	.word	0x0801163d
 80115cc:	0801165d 	.word	0x0801165d
 80115d0:	0801165d 	.word	0x0801165d
 80115d4:	0801165d 	.word	0x0801165d
 80115d8:	0801165d 	.word	0x0801165d
 80115dc:	0801165d 	.word	0x0801165d
 80115e0:	0801165d 	.word	0x0801165d
 80115e4:	0801165d 	.word	0x0801165d
 80115e8:	08011645 	.word	0x08011645
 80115ec:	0801165d 	.word	0x0801165d
 80115f0:	0801165d 	.word	0x0801165d
 80115f4:	0801165d 	.word	0x0801165d
 80115f8:	0801165d 	.word	0x0801165d
 80115fc:	0801165d 	.word	0x0801165d
 8011600:	0801165d 	.word	0x0801165d
 8011604:	0801165d 	.word	0x0801165d
 8011608:	0801164d 	.word	0x0801164d
 801160c:	0801165d 	.word	0x0801165d
 8011610:	0801165d 	.word	0x0801165d
 8011614:	0801165d 	.word	0x0801165d
 8011618:	0801165d 	.word	0x0801165d
 801161c:	0801165d 	.word	0x0801165d
 8011620:	0801165d 	.word	0x0801165d
 8011624:	0801165d 	.word	0x0801165d
 8011628:	08011655 	.word	0x08011655
 801162c:	2301      	movs	r3, #1
 801162e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011632:	e1c0      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011634:	2304      	movs	r3, #4
 8011636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163a:	e1bc      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801163c:	2308      	movs	r3, #8
 801163e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011642:	e1b8      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011644:	2310      	movs	r3, #16
 8011646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164a:	e1b4      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801164c:	2320      	movs	r3, #32
 801164e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011652:	e1b0      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011654:	2340      	movs	r3, #64	; 0x40
 8011656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165a:	e1ac      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801165c:	2380      	movs	r3, #128	; 0x80
 801165e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011662:	e1a8      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4a75      	ldr	r2, [pc, #468]	; (8011840 <UART_SetConfig+0x638>)
 801166a:	4293      	cmp	r3, r2
 801166c:	d130      	bne.n	80116d0 <UART_SetConfig+0x4c8>
 801166e:	4b73      	ldr	r3, [pc, #460]	; (801183c <UART_SetConfig+0x634>)
 8011670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011672:	f003 0307 	and.w	r3, r3, #7
 8011676:	2b05      	cmp	r3, #5
 8011678:	d826      	bhi.n	80116c8 <UART_SetConfig+0x4c0>
 801167a:	a201      	add	r2, pc, #4	; (adr r2, 8011680 <UART_SetConfig+0x478>)
 801167c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011680:	08011699 	.word	0x08011699
 8011684:	080116a1 	.word	0x080116a1
 8011688:	080116a9 	.word	0x080116a9
 801168c:	080116b1 	.word	0x080116b1
 8011690:	080116b9 	.word	0x080116b9
 8011694:	080116c1 	.word	0x080116c1
 8011698:	2300      	movs	r3, #0
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169e:	e18a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116a0:	2304      	movs	r3, #4
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a6:	e186      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116a8:	2308      	movs	r3, #8
 80116aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ae:	e182      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116b0:	2310      	movs	r3, #16
 80116b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116b6:	e17e      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116b8:	2320      	movs	r3, #32
 80116ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116be:	e17a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116c0:	2340      	movs	r3, #64	; 0x40
 80116c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116c6:	e176      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116c8:	2380      	movs	r3, #128	; 0x80
 80116ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ce:	e172      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80116d0:	697b      	ldr	r3, [r7, #20]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	4a5b      	ldr	r2, [pc, #364]	; (8011844 <UART_SetConfig+0x63c>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d130      	bne.n	801173c <UART_SetConfig+0x534>
 80116da:	4b58      	ldr	r3, [pc, #352]	; (801183c <UART_SetConfig+0x634>)
 80116dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116de:	f003 0307 	and.w	r3, r3, #7
 80116e2:	2b05      	cmp	r3, #5
 80116e4:	d826      	bhi.n	8011734 <UART_SetConfig+0x52c>
 80116e6:	a201      	add	r2, pc, #4	; (adr r2, 80116ec <UART_SetConfig+0x4e4>)
 80116e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ec:	08011705 	.word	0x08011705
 80116f0:	0801170d 	.word	0x0801170d
 80116f4:	08011715 	.word	0x08011715
 80116f8:	0801171d 	.word	0x0801171d
 80116fc:	08011725 	.word	0x08011725
 8011700:	0801172d 	.word	0x0801172d
 8011704:	2300      	movs	r3, #0
 8011706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801170a:	e154      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801170c:	2304      	movs	r3, #4
 801170e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011712:	e150      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011714:	2308      	movs	r3, #8
 8011716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171a:	e14c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801171c:	2310      	movs	r3, #16
 801171e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011722:	e148      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011724:	2320      	movs	r3, #32
 8011726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172a:	e144      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801172c:	2340      	movs	r3, #64	; 0x40
 801172e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011732:	e140      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011734:	2380      	movs	r3, #128	; 0x80
 8011736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801173a:	e13c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4a41      	ldr	r2, [pc, #260]	; (8011848 <UART_SetConfig+0x640>)
 8011742:	4293      	cmp	r3, r2
 8011744:	f040 8082 	bne.w	801184c <UART_SetConfig+0x644>
 8011748:	4b3c      	ldr	r3, [pc, #240]	; (801183c <UART_SetConfig+0x634>)
 801174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801174c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011750:	2b28      	cmp	r3, #40	; 0x28
 8011752:	d86d      	bhi.n	8011830 <UART_SetConfig+0x628>
 8011754:	a201      	add	r2, pc, #4	; (adr r2, 801175c <UART_SetConfig+0x554>)
 8011756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801175a:	bf00      	nop
 801175c:	08011801 	.word	0x08011801
 8011760:	08011831 	.word	0x08011831
 8011764:	08011831 	.word	0x08011831
 8011768:	08011831 	.word	0x08011831
 801176c:	08011831 	.word	0x08011831
 8011770:	08011831 	.word	0x08011831
 8011774:	08011831 	.word	0x08011831
 8011778:	08011831 	.word	0x08011831
 801177c:	08011809 	.word	0x08011809
 8011780:	08011831 	.word	0x08011831
 8011784:	08011831 	.word	0x08011831
 8011788:	08011831 	.word	0x08011831
 801178c:	08011831 	.word	0x08011831
 8011790:	08011831 	.word	0x08011831
 8011794:	08011831 	.word	0x08011831
 8011798:	08011831 	.word	0x08011831
 801179c:	08011811 	.word	0x08011811
 80117a0:	08011831 	.word	0x08011831
 80117a4:	08011831 	.word	0x08011831
 80117a8:	08011831 	.word	0x08011831
 80117ac:	08011831 	.word	0x08011831
 80117b0:	08011831 	.word	0x08011831
 80117b4:	08011831 	.word	0x08011831
 80117b8:	08011831 	.word	0x08011831
 80117bc:	08011819 	.word	0x08011819
 80117c0:	08011831 	.word	0x08011831
 80117c4:	08011831 	.word	0x08011831
 80117c8:	08011831 	.word	0x08011831
 80117cc:	08011831 	.word	0x08011831
 80117d0:	08011831 	.word	0x08011831
 80117d4:	08011831 	.word	0x08011831
 80117d8:	08011831 	.word	0x08011831
 80117dc:	08011821 	.word	0x08011821
 80117e0:	08011831 	.word	0x08011831
 80117e4:	08011831 	.word	0x08011831
 80117e8:	08011831 	.word	0x08011831
 80117ec:	08011831 	.word	0x08011831
 80117f0:	08011831 	.word	0x08011831
 80117f4:	08011831 	.word	0x08011831
 80117f8:	08011831 	.word	0x08011831
 80117fc:	08011829 	.word	0x08011829
 8011800:	2301      	movs	r3, #1
 8011802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011806:	e0d6      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011808:	2304      	movs	r3, #4
 801180a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180e:	e0d2      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011810:	2308      	movs	r3, #8
 8011812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011816:	e0ce      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011818:	2310      	movs	r3, #16
 801181a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181e:	e0ca      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011820:	2320      	movs	r3, #32
 8011822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011826:	e0c6      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011828:	2340      	movs	r3, #64	; 0x40
 801182a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801182e:	e0c2      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011830:	2380      	movs	r3, #128	; 0x80
 8011832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011836:	e0be      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011838:	40011400 	.word	0x40011400
 801183c:	58024400 	.word	0x58024400
 8011840:	40007800 	.word	0x40007800
 8011844:	40007c00 	.word	0x40007c00
 8011848:	40011800 	.word	0x40011800
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4aad      	ldr	r2, [pc, #692]	; (8011b08 <UART_SetConfig+0x900>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d176      	bne.n	8011944 <UART_SetConfig+0x73c>
 8011856:	4bad      	ldr	r3, [pc, #692]	; (8011b0c <UART_SetConfig+0x904>)
 8011858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801185a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801185e:	2b28      	cmp	r3, #40	; 0x28
 8011860:	d86c      	bhi.n	801193c <UART_SetConfig+0x734>
 8011862:	a201      	add	r2, pc, #4	; (adr r2, 8011868 <UART_SetConfig+0x660>)
 8011864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011868:	0801190d 	.word	0x0801190d
 801186c:	0801193d 	.word	0x0801193d
 8011870:	0801193d 	.word	0x0801193d
 8011874:	0801193d 	.word	0x0801193d
 8011878:	0801193d 	.word	0x0801193d
 801187c:	0801193d 	.word	0x0801193d
 8011880:	0801193d 	.word	0x0801193d
 8011884:	0801193d 	.word	0x0801193d
 8011888:	08011915 	.word	0x08011915
 801188c:	0801193d 	.word	0x0801193d
 8011890:	0801193d 	.word	0x0801193d
 8011894:	0801193d 	.word	0x0801193d
 8011898:	0801193d 	.word	0x0801193d
 801189c:	0801193d 	.word	0x0801193d
 80118a0:	0801193d 	.word	0x0801193d
 80118a4:	0801193d 	.word	0x0801193d
 80118a8:	0801191d 	.word	0x0801191d
 80118ac:	0801193d 	.word	0x0801193d
 80118b0:	0801193d 	.word	0x0801193d
 80118b4:	0801193d 	.word	0x0801193d
 80118b8:	0801193d 	.word	0x0801193d
 80118bc:	0801193d 	.word	0x0801193d
 80118c0:	0801193d 	.word	0x0801193d
 80118c4:	0801193d 	.word	0x0801193d
 80118c8:	08011925 	.word	0x08011925
 80118cc:	0801193d 	.word	0x0801193d
 80118d0:	0801193d 	.word	0x0801193d
 80118d4:	0801193d 	.word	0x0801193d
 80118d8:	0801193d 	.word	0x0801193d
 80118dc:	0801193d 	.word	0x0801193d
 80118e0:	0801193d 	.word	0x0801193d
 80118e4:	0801193d 	.word	0x0801193d
 80118e8:	0801192d 	.word	0x0801192d
 80118ec:	0801193d 	.word	0x0801193d
 80118f0:	0801193d 	.word	0x0801193d
 80118f4:	0801193d 	.word	0x0801193d
 80118f8:	0801193d 	.word	0x0801193d
 80118fc:	0801193d 	.word	0x0801193d
 8011900:	0801193d 	.word	0x0801193d
 8011904:	0801193d 	.word	0x0801193d
 8011908:	08011935 	.word	0x08011935
 801190c:	2301      	movs	r3, #1
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011912:	e050      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011914:	2304      	movs	r3, #4
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191a:	e04c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801191c:	2308      	movs	r3, #8
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011922:	e048      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011924:	2310      	movs	r3, #16
 8011926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801192a:	e044      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801192c:	2320      	movs	r3, #32
 801192e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011932:	e040      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011934:	2340      	movs	r3, #64	; 0x40
 8011936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801193a:	e03c      	b.n	80119b6 <UART_SetConfig+0x7ae>
 801193c:	2380      	movs	r3, #128	; 0x80
 801193e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011942:	e038      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	4a71      	ldr	r2, [pc, #452]	; (8011b10 <UART_SetConfig+0x908>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d130      	bne.n	80119b0 <UART_SetConfig+0x7a8>
 801194e:	4b6f      	ldr	r3, [pc, #444]	; (8011b0c <UART_SetConfig+0x904>)
 8011950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011952:	f003 0307 	and.w	r3, r3, #7
 8011956:	2b05      	cmp	r3, #5
 8011958:	d826      	bhi.n	80119a8 <UART_SetConfig+0x7a0>
 801195a:	a201      	add	r2, pc, #4	; (adr r2, 8011960 <UART_SetConfig+0x758>)
 801195c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011960:	08011979 	.word	0x08011979
 8011964:	08011981 	.word	0x08011981
 8011968:	08011989 	.word	0x08011989
 801196c:	08011991 	.word	0x08011991
 8011970:	08011999 	.word	0x08011999
 8011974:	080119a1 	.word	0x080119a1
 8011978:	2302      	movs	r3, #2
 801197a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801197e:	e01a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011980:	2304      	movs	r3, #4
 8011982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011986:	e016      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011988:	2308      	movs	r3, #8
 801198a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198e:	e012      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011990:	2310      	movs	r3, #16
 8011992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011996:	e00e      	b.n	80119b6 <UART_SetConfig+0x7ae>
 8011998:	2320      	movs	r3, #32
 801199a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199e:	e00a      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80119a0:	2340      	movs	r3, #64	; 0x40
 80119a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119a6:	e006      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80119a8:	2380      	movs	r3, #128	; 0x80
 80119aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80119ae:	e002      	b.n	80119b6 <UART_SetConfig+0x7ae>
 80119b0:	2380      	movs	r3, #128	; 0x80
 80119b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	4a55      	ldr	r2, [pc, #340]	; (8011b10 <UART_SetConfig+0x908>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	f040 80f8 	bne.w	8011bb2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119c6:	2b20      	cmp	r3, #32
 80119c8:	dc46      	bgt.n	8011a58 <UART_SetConfig+0x850>
 80119ca:	2b02      	cmp	r3, #2
 80119cc:	db75      	blt.n	8011aba <UART_SetConfig+0x8b2>
 80119ce:	3b02      	subs	r3, #2
 80119d0:	2b1e      	cmp	r3, #30
 80119d2:	d872      	bhi.n	8011aba <UART_SetConfig+0x8b2>
 80119d4:	a201      	add	r2, pc, #4	; (adr r2, 80119dc <UART_SetConfig+0x7d4>)
 80119d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119da:	bf00      	nop
 80119dc:	08011a5f 	.word	0x08011a5f
 80119e0:	08011abb 	.word	0x08011abb
 80119e4:	08011a67 	.word	0x08011a67
 80119e8:	08011abb 	.word	0x08011abb
 80119ec:	08011abb 	.word	0x08011abb
 80119f0:	08011abb 	.word	0x08011abb
 80119f4:	08011a77 	.word	0x08011a77
 80119f8:	08011abb 	.word	0x08011abb
 80119fc:	08011abb 	.word	0x08011abb
 8011a00:	08011abb 	.word	0x08011abb
 8011a04:	08011abb 	.word	0x08011abb
 8011a08:	08011abb 	.word	0x08011abb
 8011a0c:	08011abb 	.word	0x08011abb
 8011a10:	08011abb 	.word	0x08011abb
 8011a14:	08011a87 	.word	0x08011a87
 8011a18:	08011abb 	.word	0x08011abb
 8011a1c:	08011abb 	.word	0x08011abb
 8011a20:	08011abb 	.word	0x08011abb
 8011a24:	08011abb 	.word	0x08011abb
 8011a28:	08011abb 	.word	0x08011abb
 8011a2c:	08011abb 	.word	0x08011abb
 8011a30:	08011abb 	.word	0x08011abb
 8011a34:	08011abb 	.word	0x08011abb
 8011a38:	08011abb 	.word	0x08011abb
 8011a3c:	08011abb 	.word	0x08011abb
 8011a40:	08011abb 	.word	0x08011abb
 8011a44:	08011abb 	.word	0x08011abb
 8011a48:	08011abb 	.word	0x08011abb
 8011a4c:	08011abb 	.word	0x08011abb
 8011a50:	08011abb 	.word	0x08011abb
 8011a54:	08011aad 	.word	0x08011aad
 8011a58:	2b40      	cmp	r3, #64	; 0x40
 8011a5a:	d02a      	beq.n	8011ab2 <UART_SetConfig+0x8aa>
 8011a5c:	e02d      	b.n	8011aba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011a5e:	f7fa febd 	bl	800c7dc <HAL_RCCEx_GetD3PCLK1Freq>
 8011a62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a64:	e02f      	b.n	8011ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fa fecc 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a74:	e027      	b.n	8011ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a76:	f107 0318 	add.w	r3, r7, #24
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7fb f818 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a84:	e01f      	b.n	8011ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a86:	4b21      	ldr	r3, [pc, #132]	; (8011b0c <UART_SetConfig+0x904>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f003 0320 	and.w	r3, r3, #32
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d009      	beq.n	8011aa6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a92:	4b1e      	ldr	r3, [pc, #120]	; (8011b0c <UART_SetConfig+0x904>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	08db      	lsrs	r3, r3, #3
 8011a98:	f003 0303 	and.w	r3, r3, #3
 8011a9c:	4a1d      	ldr	r2, [pc, #116]	; (8011b14 <UART_SetConfig+0x90c>)
 8011a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8011aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011aa4:	e00f      	b.n	8011ac6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011aa6:	4b1b      	ldr	r3, [pc, #108]	; (8011b14 <UART_SetConfig+0x90c>)
 8011aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aaa:	e00c      	b.n	8011ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011aac:	4b1a      	ldr	r3, [pc, #104]	; (8011b18 <UART_SetConfig+0x910>)
 8011aae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab0:	e009      	b.n	8011ac6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab8:	e005      	b.n	8011ac6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011aba:	2300      	movs	r3, #0
 8011abc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	f000 81ee 	beq.w	8011eaa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad2:	4a12      	ldr	r2, [pc, #72]	; (8011b1c <UART_SetConfig+0x914>)
 8011ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ad8:	461a      	mov	r2, r3
 8011ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ae0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	685a      	ldr	r2, [r3, #4]
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4413      	add	r3, r2
 8011aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d305      	bcc.n	8011afe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011af2:	697b      	ldr	r3, [r7, #20]
 8011af4:	685b      	ldr	r3, [r3, #4]
 8011af6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d910      	bls.n	8011b20 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011afe:	2301      	movs	r3, #1
 8011b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b04:	e1d1      	b.n	8011eaa <UART_SetConfig+0xca2>
 8011b06:	bf00      	nop
 8011b08:	40011c00 	.word	0x40011c00
 8011b0c:	58024400 	.word	0x58024400
 8011b10:	58000c00 	.word	0x58000c00
 8011b14:	03d09000 	.word	0x03d09000
 8011b18:	003d0900 	.word	0x003d0900
 8011b1c:	08018c44 	.word	0x08018c44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b22:	2200      	movs	r2, #0
 8011b24:	60bb      	str	r3, [r7, #8]
 8011b26:	60fa      	str	r2, [r7, #12]
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b2c:	4ac0      	ldr	r2, [pc, #768]	; (8011e30 <UART_SetConfig+0xc28>)
 8011b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	2200      	movs	r2, #0
 8011b36:	603b      	str	r3, [r7, #0]
 8011b38:	607a      	str	r2, [r7, #4]
 8011b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b42:	f7ee fc4d 	bl	80003e0 <__aeabi_uldivmod>
 8011b46:	4602      	mov	r2, r0
 8011b48:	460b      	mov	r3, r1
 8011b4a:	4610      	mov	r0, r2
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	f04f 0200 	mov.w	r2, #0
 8011b52:	f04f 0300 	mov.w	r3, #0
 8011b56:	020b      	lsls	r3, r1, #8
 8011b58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b5c:	0202      	lsls	r2, r0, #8
 8011b5e:	6979      	ldr	r1, [r7, #20]
 8011b60:	6849      	ldr	r1, [r1, #4]
 8011b62:	0849      	lsrs	r1, r1, #1
 8011b64:	2000      	movs	r0, #0
 8011b66:	460c      	mov	r4, r1
 8011b68:	4605      	mov	r5, r0
 8011b6a:	eb12 0804 	adds.w	r8, r2, r4
 8011b6e:	eb43 0905 	adc.w	r9, r3, r5
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	2200      	movs	r2, #0
 8011b78:	469a      	mov	sl, r3
 8011b7a:	4693      	mov	fp, r2
 8011b7c:	4652      	mov	r2, sl
 8011b7e:	465b      	mov	r3, fp
 8011b80:	4640      	mov	r0, r8
 8011b82:	4649      	mov	r1, r9
 8011b84:	f7ee fc2c 	bl	80003e0 <__aeabi_uldivmod>
 8011b88:	4602      	mov	r2, r0
 8011b8a:	460b      	mov	r3, r1
 8011b8c:	4613      	mov	r3, r2
 8011b8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b96:	d308      	bcc.n	8011baa <UART_SetConfig+0x9a2>
 8011b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b9e:	d204      	bcs.n	8011baa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ba6:	60da      	str	r2, [r3, #12]
 8011ba8:	e17f      	b.n	8011eaa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011baa:	2301      	movs	r3, #1
 8011bac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011bb0:	e17b      	b.n	8011eaa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	69db      	ldr	r3, [r3, #28]
 8011bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011bba:	f040 80bd 	bne.w	8011d38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011bbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011bc2:	2b20      	cmp	r3, #32
 8011bc4:	dc48      	bgt.n	8011c58 <UART_SetConfig+0xa50>
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	db7b      	blt.n	8011cc2 <UART_SetConfig+0xaba>
 8011bca:	2b20      	cmp	r3, #32
 8011bcc:	d879      	bhi.n	8011cc2 <UART_SetConfig+0xaba>
 8011bce:	a201      	add	r2, pc, #4	; (adr r2, 8011bd4 <UART_SetConfig+0x9cc>)
 8011bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bd4:	08011c5f 	.word	0x08011c5f
 8011bd8:	08011c67 	.word	0x08011c67
 8011bdc:	08011cc3 	.word	0x08011cc3
 8011be0:	08011cc3 	.word	0x08011cc3
 8011be4:	08011c6f 	.word	0x08011c6f
 8011be8:	08011cc3 	.word	0x08011cc3
 8011bec:	08011cc3 	.word	0x08011cc3
 8011bf0:	08011cc3 	.word	0x08011cc3
 8011bf4:	08011c7f 	.word	0x08011c7f
 8011bf8:	08011cc3 	.word	0x08011cc3
 8011bfc:	08011cc3 	.word	0x08011cc3
 8011c00:	08011cc3 	.word	0x08011cc3
 8011c04:	08011cc3 	.word	0x08011cc3
 8011c08:	08011cc3 	.word	0x08011cc3
 8011c0c:	08011cc3 	.word	0x08011cc3
 8011c10:	08011cc3 	.word	0x08011cc3
 8011c14:	08011c8f 	.word	0x08011c8f
 8011c18:	08011cc3 	.word	0x08011cc3
 8011c1c:	08011cc3 	.word	0x08011cc3
 8011c20:	08011cc3 	.word	0x08011cc3
 8011c24:	08011cc3 	.word	0x08011cc3
 8011c28:	08011cc3 	.word	0x08011cc3
 8011c2c:	08011cc3 	.word	0x08011cc3
 8011c30:	08011cc3 	.word	0x08011cc3
 8011c34:	08011cc3 	.word	0x08011cc3
 8011c38:	08011cc3 	.word	0x08011cc3
 8011c3c:	08011cc3 	.word	0x08011cc3
 8011c40:	08011cc3 	.word	0x08011cc3
 8011c44:	08011cc3 	.word	0x08011cc3
 8011c48:	08011cc3 	.word	0x08011cc3
 8011c4c:	08011cc3 	.word	0x08011cc3
 8011c50:	08011cc3 	.word	0x08011cc3
 8011c54:	08011cb5 	.word	0x08011cb5
 8011c58:	2b40      	cmp	r3, #64	; 0x40
 8011c5a:	d02e      	beq.n	8011cba <UART_SetConfig+0xab2>
 8011c5c:	e031      	b.n	8011cc2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c5e:	f7f8 ff1f 	bl	800aaa0 <HAL_RCC_GetPCLK1Freq>
 8011c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c64:	e033      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c66:	f7f8 ff31 	bl	800aacc <HAL_RCC_GetPCLK2Freq>
 8011c6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c6c:	e02f      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fa fdc8 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7c:	e027      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c7e:	f107 0318 	add.w	r3, r7, #24
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fa ff14 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c8c:	e01f      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c8e:	4b69      	ldr	r3, [pc, #420]	; (8011e34 <UART_SetConfig+0xc2c>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	f003 0320 	and.w	r3, r3, #32
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d009      	beq.n	8011cae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c9a:	4b66      	ldr	r3, [pc, #408]	; (8011e34 <UART_SetConfig+0xc2c>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	08db      	lsrs	r3, r3, #3
 8011ca0:	f003 0303 	and.w	r3, r3, #3
 8011ca4:	4a64      	ldr	r2, [pc, #400]	; (8011e38 <UART_SetConfig+0xc30>)
 8011ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8011caa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011cac:	e00f      	b.n	8011cce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011cae:	4b62      	ldr	r3, [pc, #392]	; (8011e38 <UART_SetConfig+0xc30>)
 8011cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cb2:	e00c      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011cb4:	4b61      	ldr	r3, [pc, #388]	; (8011e3c <UART_SetConfig+0xc34>)
 8011cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cb8:	e009      	b.n	8011cce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cc0:	e005      	b.n	8011cce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	f000 80ea 	beq.w	8011eaa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cda:	4a55      	ldr	r2, [pc, #340]	; (8011e30 <UART_SetConfig+0xc28>)
 8011cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ce8:	005a      	lsls	r2, r3, #1
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	085b      	lsrs	r3, r3, #1
 8011cf0:	441a      	add	r2, r3
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfe:	2b0f      	cmp	r3, #15
 8011d00:	d916      	bls.n	8011d30 <UART_SetConfig+0xb28>
 8011d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d08:	d212      	bcs.n	8011d30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d0c:	b29b      	uxth	r3, r3
 8011d0e:	f023 030f 	bic.w	r3, r3, #15
 8011d12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d16:	085b      	lsrs	r3, r3, #1
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	f003 0307 	and.w	r3, r3, #7
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d22:	4313      	orrs	r3, r2
 8011d24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011d26:	697b      	ldr	r3, [r7, #20]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011d2c:	60da      	str	r2, [r3, #12]
 8011d2e:	e0bc      	b.n	8011eaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011d30:	2301      	movs	r3, #1
 8011d32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d36:	e0b8      	b.n	8011eaa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d3c:	2b20      	cmp	r3, #32
 8011d3e:	dc4b      	bgt.n	8011dd8 <UART_SetConfig+0xbd0>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f2c0 8087 	blt.w	8011e54 <UART_SetConfig+0xc4c>
 8011d46:	2b20      	cmp	r3, #32
 8011d48:	f200 8084 	bhi.w	8011e54 <UART_SetConfig+0xc4c>
 8011d4c:	a201      	add	r2, pc, #4	; (adr r2, 8011d54 <UART_SetConfig+0xb4c>)
 8011d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d52:	bf00      	nop
 8011d54:	08011ddf 	.word	0x08011ddf
 8011d58:	08011de7 	.word	0x08011de7
 8011d5c:	08011e55 	.word	0x08011e55
 8011d60:	08011e55 	.word	0x08011e55
 8011d64:	08011def 	.word	0x08011def
 8011d68:	08011e55 	.word	0x08011e55
 8011d6c:	08011e55 	.word	0x08011e55
 8011d70:	08011e55 	.word	0x08011e55
 8011d74:	08011dff 	.word	0x08011dff
 8011d78:	08011e55 	.word	0x08011e55
 8011d7c:	08011e55 	.word	0x08011e55
 8011d80:	08011e55 	.word	0x08011e55
 8011d84:	08011e55 	.word	0x08011e55
 8011d88:	08011e55 	.word	0x08011e55
 8011d8c:	08011e55 	.word	0x08011e55
 8011d90:	08011e55 	.word	0x08011e55
 8011d94:	08011e0f 	.word	0x08011e0f
 8011d98:	08011e55 	.word	0x08011e55
 8011d9c:	08011e55 	.word	0x08011e55
 8011da0:	08011e55 	.word	0x08011e55
 8011da4:	08011e55 	.word	0x08011e55
 8011da8:	08011e55 	.word	0x08011e55
 8011dac:	08011e55 	.word	0x08011e55
 8011db0:	08011e55 	.word	0x08011e55
 8011db4:	08011e55 	.word	0x08011e55
 8011db8:	08011e55 	.word	0x08011e55
 8011dbc:	08011e55 	.word	0x08011e55
 8011dc0:	08011e55 	.word	0x08011e55
 8011dc4:	08011e55 	.word	0x08011e55
 8011dc8:	08011e55 	.word	0x08011e55
 8011dcc:	08011e55 	.word	0x08011e55
 8011dd0:	08011e55 	.word	0x08011e55
 8011dd4:	08011e47 	.word	0x08011e47
 8011dd8:	2b40      	cmp	r3, #64	; 0x40
 8011dda:	d037      	beq.n	8011e4c <UART_SetConfig+0xc44>
 8011ddc:	e03a      	b.n	8011e54 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011dde:	f7f8 fe5f 	bl	800aaa0 <HAL_RCC_GetPCLK1Freq>
 8011de2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011de4:	e03c      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011de6:	f7f8 fe71 	bl	800aacc <HAL_RCC_GetPCLK2Freq>
 8011dea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011dec:	e038      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fa fd08 	bl	800c808 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dfc:	e030      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011dfe:	f107 0318 	add.w	r3, r7, #24
 8011e02:	4618      	mov	r0, r3
 8011e04:	f7fa fe54 	bl	800cab0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e0c:	e028      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011e0e:	4b09      	ldr	r3, [pc, #36]	; (8011e34 <UART_SetConfig+0xc2c>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	f003 0320 	and.w	r3, r3, #32
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d012      	beq.n	8011e40 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e1a:	4b06      	ldr	r3, [pc, #24]	; (8011e34 <UART_SetConfig+0xc2c>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	08db      	lsrs	r3, r3, #3
 8011e20:	f003 0303 	and.w	r3, r3, #3
 8011e24:	4a04      	ldr	r2, [pc, #16]	; (8011e38 <UART_SetConfig+0xc30>)
 8011e26:	fa22 f303 	lsr.w	r3, r2, r3
 8011e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e2c:	e018      	b.n	8011e60 <UART_SetConfig+0xc58>
 8011e2e:	bf00      	nop
 8011e30:	08018c44 	.word	0x08018c44
 8011e34:	58024400 	.word	0x58024400
 8011e38:	03d09000 	.word	0x03d09000
 8011e3c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011e40:	4b24      	ldr	r3, [pc, #144]	; (8011ed4 <UART_SetConfig+0xccc>)
 8011e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e44:	e00c      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e46:	4b24      	ldr	r3, [pc, #144]	; (8011ed8 <UART_SetConfig+0xcd0>)
 8011e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e4a:	e009      	b.n	8011e60 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e52:	e005      	b.n	8011e60 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011e54:	2300      	movs	r3, #0
 8011e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011e5e:	bf00      	nop
    }

    if (pclk != 0U)
 8011e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d021      	beq.n	8011eaa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6a:	4a1c      	ldr	r2, [pc, #112]	; (8011edc <UART_SetConfig+0xcd4>)
 8011e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e70:	461a      	mov	r2, r3
 8011e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e74:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	085b      	lsrs	r3, r3, #1
 8011e7e:	441a      	add	r2, r3
 8011e80:	697b      	ldr	r3, [r7, #20]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e88:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8c:	2b0f      	cmp	r3, #15
 8011e8e:	d909      	bls.n	8011ea4 <UART_SetConfig+0xc9c>
 8011e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e96:	d205      	bcs.n	8011ea4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	60da      	str	r2, [r3, #12]
 8011ea2:	e002      	b.n	8011eaa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2201      	movs	r2, #1
 8011eae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011ec6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3748      	adds	r7, #72	; 0x48
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ed4:	03d09000 	.word	0x03d09000
 8011ed8:	003d0900 	.word	0x003d0900
 8011edc:	08018c44 	.word	0x08018c44

08011ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eec:	f003 0301 	and.w	r3, r3, #1
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00a      	beq.n	8011f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	430a      	orrs	r2, r1
 8011f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f0e:	f003 0302 	and.w	r3, r3, #2
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d00a      	beq.n	8011f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	430a      	orrs	r2, r1
 8011f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f30:	f003 0304 	and.w	r3, r3, #4
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d00a      	beq.n	8011f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	430a      	orrs	r2, r1
 8011f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f52:	f003 0308 	and.w	r3, r3, #8
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d00a      	beq.n	8011f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	430a      	orrs	r2, r1
 8011f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f74:	f003 0310 	and.w	r3, r3, #16
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d00a      	beq.n	8011f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	689b      	ldr	r3, [r3, #8]
 8011f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	430a      	orrs	r2, r1
 8011f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f96:	f003 0320 	and.w	r3, r3, #32
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d00a      	beq.n	8011fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	689b      	ldr	r3, [r3, #8]
 8011fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	430a      	orrs	r2, r1
 8011fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d01a      	beq.n	8011ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	430a      	orrs	r2, r1
 8011fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fde:	d10a      	bne.n	8011ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	430a      	orrs	r2, r1
 8011ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d00a      	beq.n	8012018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	430a      	orrs	r2, r1
 8012016:	605a      	str	r2, [r3, #4]
  }
}
 8012018:	bf00      	nop
 801201a:	370c      	adds	r7, #12
 801201c:	46bd      	mov	sp, r7
 801201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012022:	4770      	bx	lr

08012024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b098      	sub	sp, #96	; 0x60
 8012028:	af02      	add	r7, sp, #8
 801202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012034:	f7f1 fe74 	bl	8003d20 <HAL_GetTick>
 8012038:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f003 0308 	and.w	r3, r3, #8
 8012044:	2b08      	cmp	r3, #8
 8012046:	d12f      	bne.n	80120a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801204c:	9300      	str	r3, [sp, #0]
 801204e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012050:	2200      	movs	r2, #0
 8012052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f000 f88e 	bl	8012178 <UART_WaitOnFlagUntilTimeout>
 801205c:	4603      	mov	r3, r0
 801205e:	2b00      	cmp	r3, #0
 8012060:	d022      	beq.n	80120a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206a:	e853 3f00 	ldrex	r3, [r3]
 801206e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012076:	653b      	str	r3, [r7, #80]	; 0x50
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	461a      	mov	r2, r3
 801207e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012080:	647b      	str	r3, [r7, #68]	; 0x44
 8012082:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012084:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012088:	e841 2300 	strex	r3, r2, [r1]
 801208c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012090:	2b00      	cmp	r3, #0
 8012092:	d1e6      	bne.n	8012062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2220      	movs	r2, #32
 8012098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80120a4:	2303      	movs	r3, #3
 80120a6:	e063      	b.n	8012170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	f003 0304 	and.w	r3, r3, #4
 80120b2:	2b04      	cmp	r3, #4
 80120b4:	d149      	bne.n	801214a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80120ba:	9300      	str	r3, [sp, #0]
 80120bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120be:	2200      	movs	r2, #0
 80120c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	f000 f857 	bl	8012178 <UART_WaitOnFlagUntilTimeout>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d03c      	beq.n	801214a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	e853 3f00 	ldrex	r3, [r3]
 80120dc:	623b      	str	r3, [r7, #32]
   return(result);
 80120de:	6a3b      	ldr	r3, [r7, #32]
 80120e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	681b      	ldr	r3, [r3, #0]
 80120ea:	461a      	mov	r2, r3
 80120ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120ee:	633b      	str	r3, [r7, #48]	; 0x30
 80120f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120f6:	e841 2300 	strex	r3, r2, [r1]
 80120fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d1e6      	bne.n	80120d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	3308      	adds	r3, #8
 8012108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	e853 3f00 	ldrex	r3, [r3]
 8012110:	60fb      	str	r3, [r7, #12]
   return(result);
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f023 0301 	bic.w	r3, r3, #1
 8012118:	64bb      	str	r3, [r7, #72]	; 0x48
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	3308      	adds	r3, #8
 8012120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012122:	61fa      	str	r2, [r7, #28]
 8012124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012126:	69b9      	ldr	r1, [r7, #24]
 8012128:	69fa      	ldr	r2, [r7, #28]
 801212a:	e841 2300 	strex	r3, r2, [r1]
 801212e:	617b      	str	r3, [r7, #20]
   return(result);
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d1e5      	bne.n	8012102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2220      	movs	r2, #32
 801213a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2200      	movs	r2, #0
 8012142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012146:	2303      	movs	r3, #3
 8012148:	e012      	b.n	8012170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2220      	movs	r2, #32
 801214e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	2220      	movs	r2, #32
 8012156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2200      	movs	r2, #0
 8012164:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	2200      	movs	r2, #0
 801216a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3758      	adds	r7, #88	; 0x58
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}

08012178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b084      	sub	sp, #16
 801217c:	af00      	add	r7, sp, #0
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	603b      	str	r3, [r7, #0]
 8012184:	4613      	mov	r3, r2
 8012186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012188:	e049      	b.n	801221e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801218a:	69bb      	ldr	r3, [r7, #24]
 801218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012190:	d045      	beq.n	801221e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012192:	f7f1 fdc5 	bl	8003d20 <HAL_GetTick>
 8012196:	4602      	mov	r2, r0
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	1ad3      	subs	r3, r2, r3
 801219c:	69ba      	ldr	r2, [r7, #24]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d302      	bcc.n	80121a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d101      	bne.n	80121ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80121a8:	2303      	movs	r3, #3
 80121aa:	e048      	b.n	801223e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f003 0304 	and.w	r3, r3, #4
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d031      	beq.n	801221e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	69db      	ldr	r3, [r3, #28]
 80121c0:	f003 0308 	and.w	r3, r3, #8
 80121c4:	2b08      	cmp	r3, #8
 80121c6:	d110      	bne.n	80121ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2208      	movs	r2, #8
 80121ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f000 f839 	bl	8012248 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2208      	movs	r2, #8
 80121da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	2200      	movs	r2, #0
 80121e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80121e6:	2301      	movs	r3, #1
 80121e8:	e029      	b.n	801223e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	69db      	ldr	r3, [r3, #28]
 80121f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80121f8:	d111      	bne.n	801221e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012202:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012204:	68f8      	ldr	r0, [r7, #12]
 8012206:	f000 f81f 	bl	8012248 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2220      	movs	r2, #32
 801220e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801221a:	2303      	movs	r3, #3
 801221c:	e00f      	b.n	801223e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	69da      	ldr	r2, [r3, #28]
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	4013      	ands	r3, r2
 8012228:	68ba      	ldr	r2, [r7, #8]
 801222a:	429a      	cmp	r2, r3
 801222c:	bf0c      	ite	eq
 801222e:	2301      	moveq	r3, #1
 8012230:	2300      	movne	r3, #0
 8012232:	b2db      	uxtb	r3, r3
 8012234:	461a      	mov	r2, r3
 8012236:	79fb      	ldrb	r3, [r7, #7]
 8012238:	429a      	cmp	r2, r3
 801223a:	d0a6      	beq.n	801218a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
	...

08012248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012248:	b480      	push	{r7}
 801224a:	b095      	sub	sp, #84	; 0x54
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012258:	e853 3f00 	ldrex	r3, [r3]
 801225c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012260:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	461a      	mov	r2, r3
 801226c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226e:	643b      	str	r3, [r7, #64]	; 0x40
 8012270:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012272:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012276:	e841 2300 	strex	r3, r2, [r1]
 801227a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801227c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227e:	2b00      	cmp	r3, #0
 8012280:	d1e6      	bne.n	8012250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	3308      	adds	r3, #8
 8012288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801228a:	6a3b      	ldr	r3, [r7, #32]
 801228c:	e853 3f00 	ldrex	r3, [r3]
 8012290:	61fb      	str	r3, [r7, #28]
   return(result);
 8012292:	69fa      	ldr	r2, [r7, #28]
 8012294:	4b1e      	ldr	r3, [pc, #120]	; (8012310 <UART_EndRxTransfer+0xc8>)
 8012296:	4013      	ands	r3, r2
 8012298:	64bb      	str	r3, [r7, #72]	; 0x48
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	3308      	adds	r3, #8
 80122a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80122a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80122a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80122aa:	e841 2300 	strex	r3, r2, [r1]
 80122ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d1e5      	bne.n	8012282 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	d118      	bne.n	80122f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	e853 3f00 	ldrex	r3, [r3]
 80122ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80122cc:	68bb      	ldr	r3, [r7, #8]
 80122ce:	f023 0310 	bic.w	r3, r3, #16
 80122d2:	647b      	str	r3, [r7, #68]	; 0x44
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	461a      	mov	r2, r3
 80122da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122dc:	61bb      	str	r3, [r7, #24]
 80122de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e0:	6979      	ldr	r1, [r7, #20]
 80122e2:	69ba      	ldr	r2, [r7, #24]
 80122e4:	e841 2300 	strex	r3, r2, [r1]
 80122e8:	613b      	str	r3, [r7, #16]
   return(result);
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d1e6      	bne.n	80122be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	2220      	movs	r2, #32
 80122f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	2200      	movs	r2, #0
 80122fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012304:	bf00      	nop
 8012306:	3754      	adds	r7, #84	; 0x54
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	effffffe 	.word	0xeffffffe

08012314 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012314:	b480      	push	{r7}
 8012316:	b085      	sub	sp, #20
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012322:	2b01      	cmp	r3, #1
 8012324:	d101      	bne.n	801232a <HAL_UARTEx_DisableFifoMode+0x16>
 8012326:	2302      	movs	r3, #2
 8012328:	e027      	b.n	801237a <HAL_UARTEx_DisableFifoMode+0x66>
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2201      	movs	r2, #1
 801232e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2224      	movs	r2, #36	; 0x24
 8012336:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	681a      	ldr	r2, [r3, #0]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f022 0201 	bic.w	r2, r2, #1
 8012350:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012358:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	2200      	movs	r2, #0
 801235e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	68fa      	ldr	r2, [r7, #12]
 8012366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	2220      	movs	r2, #32
 801236c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	2200      	movs	r2, #0
 8012374:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	3714      	adds	r7, #20
 801237e:	46bd      	mov	sp, r7
 8012380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012384:	4770      	bx	lr

08012386 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012386:	b580      	push	{r7, lr}
 8012388:	b084      	sub	sp, #16
 801238a:	af00      	add	r7, sp, #0
 801238c:	6078      	str	r0, [r7, #4]
 801238e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012396:	2b01      	cmp	r3, #1
 8012398:	d101      	bne.n	801239e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801239a:	2302      	movs	r3, #2
 801239c:	e02d      	b.n	80123fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2201      	movs	r2, #1
 80123a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	2224      	movs	r2, #36	; 0x24
 80123aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f022 0201 	bic.w	r2, r2, #1
 80123c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	689b      	ldr	r3, [r3, #8]
 80123cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	683a      	ldr	r2, [r7, #0]
 80123d6:	430a      	orrs	r2, r1
 80123d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123da:	6878      	ldr	r0, [r7, #4]
 80123dc:	f000 f850 	bl	8012480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	68fa      	ldr	r2, [r7, #12]
 80123e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2220      	movs	r2, #32
 80123ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2200      	movs	r2, #0
 80123f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	3710      	adds	r7, #16
 80123fe:	46bd      	mov	sp, r7
 8012400:	bd80      	pop	{r7, pc}

08012402 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012402:	b580      	push	{r7, lr}
 8012404:	b084      	sub	sp, #16
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
 801240a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012412:	2b01      	cmp	r3, #1
 8012414:	d101      	bne.n	801241a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012416:	2302      	movs	r3, #2
 8012418:	e02d      	b.n	8012476 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2201      	movs	r2, #1
 801241e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2224      	movs	r2, #36	; 0x24
 8012426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f022 0201 	bic.w	r2, r2, #1
 8012440:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	683a      	ldr	r2, [r7, #0]
 8012452:	430a      	orrs	r2, r1
 8012454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f000 f812 	bl	8012480 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	68fa      	ldr	r2, [r7, #12]
 8012462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2220      	movs	r2, #32
 8012468:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	2200      	movs	r2, #0
 8012470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012474:	2300      	movs	r3, #0
}
 8012476:	4618      	mov	r0, r3
 8012478:	3710      	adds	r7, #16
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
	...

08012480 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012480:	b480      	push	{r7}
 8012482:	b085      	sub	sp, #20
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801248c:	2b00      	cmp	r3, #0
 801248e:	d108      	bne.n	80124a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2201      	movs	r2, #1
 8012494:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2201      	movs	r2, #1
 801249c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124a0:	e031      	b.n	8012506 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124a2:	2310      	movs	r3, #16
 80124a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124a6:	2310      	movs	r3, #16
 80124a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	0e5b      	lsrs	r3, r3, #25
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	f003 0307 	and.w	r3, r3, #7
 80124b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	689b      	ldr	r3, [r3, #8]
 80124c0:	0f5b      	lsrs	r3, r3, #29
 80124c2:	b2db      	uxtb	r3, r3
 80124c4:	f003 0307 	and.w	r3, r3, #7
 80124c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124ca:	7bbb      	ldrb	r3, [r7, #14]
 80124cc:	7b3a      	ldrb	r2, [r7, #12]
 80124ce:	4911      	ldr	r1, [pc, #68]	; (8012514 <UARTEx_SetNbDataToProcess+0x94>)
 80124d0:	5c8a      	ldrb	r2, [r1, r2]
 80124d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124d6:	7b3a      	ldrb	r2, [r7, #12]
 80124d8:	490f      	ldr	r1, [pc, #60]	; (8012518 <UARTEx_SetNbDataToProcess+0x98>)
 80124da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80124e0:	b29a      	uxth	r2, r3
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
 80124ea:	7b7a      	ldrb	r2, [r7, #13]
 80124ec:	4909      	ldr	r1, [pc, #36]	; (8012514 <UARTEx_SetNbDataToProcess+0x94>)
 80124ee:	5c8a      	ldrb	r2, [r1, r2]
 80124f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80124f4:	7b7a      	ldrb	r2, [r7, #13]
 80124f6:	4908      	ldr	r1, [pc, #32]	; (8012518 <UARTEx_SetNbDataToProcess+0x98>)
 80124f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80124fe:	b29a      	uxth	r2, r3
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012506:	bf00      	nop
 8012508:	3714      	adds	r7, #20
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop
 8012514:	08018c5c 	.word	0x08018c5c
 8012518:	08018c64 	.word	0x08018c64

0801251c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801251c:	b084      	sub	sp, #16
 801251e:	b480      	push	{r7}
 8012520:	b085      	sub	sp, #20
 8012522:	af00      	add	r7, sp, #0
 8012524:	6078      	str	r0, [r7, #4]
 8012526:	f107 001c 	add.w	r0, r7, #28
 801252a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012532:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012534:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012536:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801253a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801253e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012542:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	4313      	orrs	r3, r2
 8012548:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	685a      	ldr	r2, [r3, #4]
 801254e:	4b07      	ldr	r3, [pc, #28]	; (801256c <SDMMC_Init+0x50>)
 8012550:	4013      	ands	r3, r2
 8012552:	68fa      	ldr	r2, [r7, #12]
 8012554:	431a      	orrs	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801255a:	2300      	movs	r3, #0
}
 801255c:	4618      	mov	r0, r3
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	b004      	add	sp, #16
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop
 801256c:	ffc02c00 	.word	0xffc02c00

08012570 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012570:	b480      	push	{r7}
 8012572:	b083      	sub	sp, #12
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801257e:	4618      	mov	r0, r3
 8012580:	370c      	adds	r7, #12
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr

0801258a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801258a:	b480      	push	{r7}
 801258c:	b083      	sub	sp, #12
 801258e:	af00      	add	r7, sp, #0
 8012590:	6078      	str	r0, [r7, #4]
 8012592:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	370c      	adds	r7, #12
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b083      	sub	sp, #12
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	681b      	ldr	r3, [r3, #0]
 80125b8:	f043 0203 	orr.w	r2, r3, #3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80125c0:	2300      	movs	r3, #0
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	370c      	adds	r7, #12
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr

080125ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80125ce:	b480      	push	{r7}
 80125d0:	b083      	sub	sp, #12
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	f003 0303 	and.w	r3, r3, #3
}
 80125de:	4618      	mov	r0, r3
 80125e0:	370c      	adds	r7, #12
 80125e2:	46bd      	mov	sp, r7
 80125e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e8:	4770      	bx	lr
	...

080125ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b085      	sub	sp, #20
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
 80125f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80125f6:	2300      	movs	r3, #0
 80125f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80125fa:	683b      	ldr	r3, [r7, #0]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801260a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 801260c:	683b      	ldr	r3, [r7, #0]
 801260e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012610:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012616:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	4313      	orrs	r3, r2
 801261c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	4b06      	ldr	r3, [pc, #24]	; (801263c <SDMMC_SendCommand+0x50>)
 8012624:	4013      	ands	r3, r2
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	431a      	orrs	r2, r3
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3714      	adds	r7, #20
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr
 801263c:	fffee0c0 	.word	0xfffee0c0

08012640 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012640:	b480      	push	{r7}
 8012642:	b083      	sub	sp, #12
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	691b      	ldr	r3, [r3, #16]
 801264c:	b2db      	uxtb	r3, r3
}
 801264e:	4618      	mov	r0, r3
 8012650:	370c      	adds	r7, #12
 8012652:	46bd      	mov	sp, r7
 8012654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012658:	4770      	bx	lr

0801265a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801265a:	b480      	push	{r7}
 801265c:	b085      	sub	sp, #20
 801265e:	af00      	add	r7, sp, #0
 8012660:	6078      	str	r0, [r7, #4]
 8012662:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	3314      	adds	r3, #20
 8012668:	461a      	mov	r2, r3
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	4413      	add	r3, r2
 801266e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	681b      	ldr	r3, [r3, #0]
}
 8012674:	4618      	mov	r0, r3
 8012676:	3714      	adds	r7, #20
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012680:	b480      	push	{r7}
 8012682:	b085      	sub	sp, #20
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012696:	683b      	ldr	r3, [r7, #0]
 8012698:	685a      	ldr	r2, [r3, #4]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80126a6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80126ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80126b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	4313      	orrs	r3, r2
 80126b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	431a      	orrs	r2, r3
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80126ca:	2300      	movs	r3, #0

}
 80126cc:	4618      	mov	r0, r3
 80126ce:	3714      	adds	r7, #20
 80126d0:	46bd      	mov	sp, r7
 80126d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d6:	4770      	bx	lr

080126d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b088      	sub	sp, #32
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80126e6:	2310      	movs	r3, #16
 80126e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126f0:	2300      	movs	r3, #0
 80126f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126fa:	f107 0308 	add.w	r3, r7, #8
 80126fe:	4619      	mov	r1, r3
 8012700:	6878      	ldr	r0, [r7, #4]
 8012702:	f7ff ff73 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012706:	f241 3288 	movw	r2, #5000	; 0x1388
 801270a:	2110      	movs	r1, #16
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f000 fa5f 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012714:	69fb      	ldr	r3, [r7, #28]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801271e:	b580      	push	{r7, lr}
 8012720:	b088      	sub	sp, #32
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012728:	683b      	ldr	r3, [r7, #0]
 801272a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801272c:	2311      	movs	r3, #17
 801272e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012736:	2300      	movs	r3, #0
 8012738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801273a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801273e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012740:	f107 0308 	add.w	r3, r7, #8
 8012744:	4619      	mov	r1, r3
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff ff50 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012750:	2111      	movs	r1, #17
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f000 fa3c 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801275a:	69fb      	ldr	r3, [r7, #28]
}
 801275c:	4618      	mov	r0, r3
 801275e:	3720      	adds	r7, #32
 8012760:	46bd      	mov	sp, r7
 8012762:	bd80      	pop	{r7, pc}

08012764 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b088      	sub	sp, #32
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012772:	2312      	movs	r3, #18
 8012774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012776:	f44f 7380 	mov.w	r3, #256	; 0x100
 801277a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801277c:	2300      	movs	r3, #0
 801277e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012784:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012786:	f107 0308 	add.w	r3, r7, #8
 801278a:	4619      	mov	r1, r3
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f7ff ff2d 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012792:	f241 3288 	movw	r2, #5000	; 0x1388
 8012796:	2112      	movs	r1, #18
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fa19 	bl	8012bd0 <SDMMC_GetCmdResp1>
 801279e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127a0:	69fb      	ldr	r3, [r7, #28]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3720      	adds	r7, #32
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b088      	sub	sp, #32
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
 80127b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80127b8:	2318      	movs	r3, #24
 80127ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127c2:	2300      	movs	r3, #0
 80127c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127cc:	f107 0308 	add.w	r3, r7, #8
 80127d0:	4619      	mov	r1, r3
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff ff0a 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80127d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127dc:	2118      	movs	r1, #24
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 f9f6 	bl	8012bd0 <SDMMC_GetCmdResp1>
 80127e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127e6:	69fb      	ldr	r3, [r7, #28]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3720      	adds	r7, #32
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80127fe:	2319      	movs	r3, #25
 8012800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012808:	2300      	movs	r3, #0
 801280a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012812:	f107 0308 	add.w	r3, r7, #8
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff fee7 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801281e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012822:	2119      	movs	r1, #25
 8012824:	6878      	ldr	r0, [r7, #4]
 8012826:	f000 f9d3 	bl	8012bd0 <SDMMC_GetCmdResp1>
 801282a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801282c:	69fb      	ldr	r3, [r7, #28]
}
 801282e:	4618      	mov	r0, r3
 8012830:	3720      	adds	r7, #32
 8012832:	46bd      	mov	sp, r7
 8012834:	bd80      	pop	{r7, pc}
	...

08012838 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	b088      	sub	sp, #32
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012840:	2300      	movs	r3, #0
 8012842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012844:	230c      	movs	r3, #12
 8012846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012848:	f44f 7380 	mov.w	r3, #256	; 0x100
 801284c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801284e:	2300      	movs	r3, #0
 8012850:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012856:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	68db      	ldr	r3, [r3, #12]
 801285c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	68db      	ldr	r3, [r3, #12]
 8012868:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012870:	f107 0308 	add.w	r3, r7, #8
 8012874:	4619      	mov	r1, r3
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7ff feb8 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801287c:	4a0b      	ldr	r2, [pc, #44]	; (80128ac <SDMMC_CmdStopTransfer+0x74>)
 801287e:	210c      	movs	r1, #12
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 f9a5 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012886:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012894:	69fb      	ldr	r3, [r7, #28]
 8012896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801289a:	d101      	bne.n	80128a0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801289c:	2300      	movs	r3, #0
 801289e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80128a0:	69fb      	ldr	r3, [r7, #28]
}
 80128a2:	4618      	mov	r0, r3
 80128a4:	3720      	adds	r7, #32
 80128a6:	46bd      	mov	sp, r7
 80128a8:	bd80      	pop	{r7, pc}
 80128aa:	bf00      	nop
 80128ac:	05f5e100 	.word	0x05f5e100

080128b0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b088      	sub	sp, #32
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
 80128b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80128be:	2307      	movs	r3, #7
 80128c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128c8:	2300      	movs	r3, #0
 80128ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128d2:	f107 0308 	add.w	r3, r7, #8
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f7ff fe87 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80128de:	f241 3288 	movw	r2, #5000	; 0x1388
 80128e2:	2107      	movs	r1, #7
 80128e4:	6878      	ldr	r0, [r7, #4]
 80128e6:	f000 f973 	bl	8012bd0 <SDMMC_GetCmdResp1>
 80128ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128ec:	69fb      	ldr	r3, [r7, #28]
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	3720      	adds	r7, #32
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b088      	sub	sp, #32
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80128fe:	2300      	movs	r3, #0
 8012900:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012902:	2300      	movs	r3, #0
 8012904:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012906:	2300      	movs	r3, #0
 8012908:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801290a:	2300      	movs	r3, #0
 801290c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801290e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012912:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012914:	f107 0308 	add.w	r3, r7, #8
 8012918:	4619      	mov	r1, r3
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7ff fe66 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f000 fb97 	bl	8013054 <SDMMC_GetCmdError>
 8012926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012928:	69fb      	ldr	r3, [r7, #28]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3720      	adds	r7, #32
 801292e:	46bd      	mov	sp, r7
 8012930:	bd80      	pop	{r7, pc}

08012932 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012932:	b580      	push	{r7, lr}
 8012934:	b088      	sub	sp, #32
 8012936:	af00      	add	r7, sp, #0
 8012938:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801293a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801293e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012940:	2308      	movs	r3, #8
 8012942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012944:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801294a:	2300      	movs	r3, #0
 801294c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801294e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012954:	f107 0308 	add.w	r3, r7, #8
 8012958:	4619      	mov	r1, r3
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	f7ff fe46 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 fb29 	bl	8012fb8 <SDMMC_GetCmdResp7>
 8012966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012968:	69fb      	ldr	r3, [r7, #28]
}
 801296a:	4618      	mov	r0, r3
 801296c:	3720      	adds	r7, #32
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012972:	b580      	push	{r7, lr}
 8012974:	b088      	sub	sp, #32
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012980:	2337      	movs	r3, #55	; 0x37
 8012982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012984:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801298a:	2300      	movs	r3, #0
 801298c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801298e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012994:	f107 0308 	add.w	r3, r7, #8
 8012998:	4619      	mov	r1, r3
 801299a:	6878      	ldr	r0, [r7, #4]
 801299c:	f7ff fe26 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80129a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129a4:	2137      	movs	r1, #55	; 0x37
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 f912 	bl	8012bd0 <SDMMC_GetCmdResp1>
 80129ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129ae:	69fb      	ldr	r3, [r7, #28]
}
 80129b0:	4618      	mov	r0, r3
 80129b2:	3720      	adds	r7, #32
 80129b4:	46bd      	mov	sp, r7
 80129b6:	bd80      	pop	{r7, pc}

080129b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80129b8:	b580      	push	{r7, lr}
 80129ba:	b088      	sub	sp, #32
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
 80129c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80129c2:	683b      	ldr	r3, [r7, #0]
 80129c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80129c6:	2329      	movs	r3, #41	; 0x29
 80129c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129d0:	2300      	movs	r3, #0
 80129d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129da:	f107 0308 	add.w	r3, r7, #8
 80129de:	4619      	mov	r1, r3
 80129e0:	6878      	ldr	r0, [r7, #4]
 80129e2:	f7ff fe03 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f000 fa2e 	bl	8012e48 <SDMMC_GetCmdResp3>
 80129ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129ee:	69fb      	ldr	r3, [r7, #28]
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3720      	adds	r7, #32
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}

080129f8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b088      	sub	sp, #32
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
 8012a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012a06:	2306      	movs	r3, #6
 8012a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a10:	2300      	movs	r3, #0
 8012a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a1a:	f107 0308 	add.w	r3, r7, #8
 8012a1e:	4619      	mov	r1, r3
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7ff fde3 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a2a:	2106      	movs	r1, #6
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f000 f8cf 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012a32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a34:	69fb      	ldr	r3, [r7, #28]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3720      	adds	r7, #32
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b088      	sub	sp, #32
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012a46:	2300      	movs	r3, #0
 8012a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012a4a:	2333      	movs	r3, #51	; 0x33
 8012a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a54:	2300      	movs	r3, #0
 8012a56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a5e:	f107 0308 	add.w	r3, r7, #8
 8012a62:	4619      	mov	r1, r3
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7ff fdc1 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a6e:	2133      	movs	r1, #51	; 0x33
 8012a70:	6878      	ldr	r0, [r7, #4]
 8012a72:	f000 f8ad 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012a76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a78:	69fb      	ldr	r3, [r7, #28]
}
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	3720      	adds	r7, #32
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	bd80      	pop	{r7, pc}

08012a82 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012a82:	b580      	push	{r7, lr}
 8012a84:	b088      	sub	sp, #32
 8012a86:	af00      	add	r7, sp, #0
 8012a88:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012a8e:	2302      	movs	r3, #2
 8012a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012a92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012a96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012aa0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012aa2:	f107 0308 	add.w	r3, r7, #8
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f7ff fd9f 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 f980 	bl	8012db4 <SDMMC_GetCmdResp2>
 8012ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3720      	adds	r7, #32
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b088      	sub	sp, #32
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012ace:	2309      	movs	r3, #9
 8012ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012ad2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ae2:	f107 0308 	add.w	r3, r7, #8
 8012ae6:	4619      	mov	r1, r3
 8012ae8:	6878      	ldr	r0, [r7, #4]
 8012aea:	f7ff fd7f 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f000 f960 	bl	8012db4 <SDMMC_GetCmdResp2>
 8012af4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012af6:	69fb      	ldr	r3, [r7, #28]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3720      	adds	r7, #32
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}

08012b00 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b088      	sub	sp, #32
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
 8012b08:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012b0e:	2303      	movs	r3, #3
 8012b10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b22:	f107 0308 	add.w	r3, r7, #8
 8012b26:	4619      	mov	r1, r3
 8012b28:	6878      	ldr	r0, [r7, #4]
 8012b2a:	f7ff fd5f 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012b2e:	683a      	ldr	r2, [r7, #0]
 8012b30:	2103      	movs	r1, #3
 8012b32:	6878      	ldr	r0, [r7, #4]
 8012b34:	f000 f9c8 	bl	8012ec8 <SDMMC_GetCmdResp6>
 8012b38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b3a:	69fb      	ldr	r3, [r7, #28]
}
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	3720      	adds	r7, #32
 8012b40:	46bd      	mov	sp, r7
 8012b42:	bd80      	pop	{r7, pc}

08012b44 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b088      	sub	sp, #32
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012b52:	230d      	movs	r3, #13
 8012b54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b66:	f107 0308 	add.w	r3, r7, #8
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f7ff fd3d 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b76:	210d      	movs	r1, #13
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f000 f829 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b80:	69fb      	ldr	r3, [r7, #28]
}
 8012b82:	4618      	mov	r0, r3
 8012b84:	3720      	adds	r7, #32
 8012b86:	46bd      	mov	sp, r7
 8012b88:	bd80      	pop	{r7, pc}

08012b8a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012b8a:	b580      	push	{r7, lr}
 8012b8c:	b088      	sub	sp, #32
 8012b8e:	af00      	add	r7, sp, #0
 8012b90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012b92:	2300      	movs	r3, #0
 8012b94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012b96:	230d      	movs	r3, #13
 8012b98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ba4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ba8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012baa:	f107 0308 	add.w	r3, r7, #8
 8012bae:	4619      	mov	r1, r3
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff fd1b 	bl	80125ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012bba:	210d      	movs	r1, #13
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f000 f807 	bl	8012bd0 <SDMMC_GetCmdResp1>
 8012bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bc4:	69fb      	ldr	r3, [r7, #28]
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3720      	adds	r7, #32
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
	...

08012bd0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012bd0:	b580      	push	{r7, lr}
 8012bd2:	b088      	sub	sp, #32
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	460b      	mov	r3, r1
 8012bda:	607a      	str	r2, [r7, #4]
 8012bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012bde:	4b70      	ldr	r3, [pc, #448]	; (8012da0 <SDMMC_GetCmdResp1+0x1d0>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	4a70      	ldr	r2, [pc, #448]	; (8012da4 <SDMMC_GetCmdResp1+0x1d4>)
 8012be4:	fba2 2303 	umull	r2, r3, r2, r3
 8012be8:	0a5a      	lsrs	r2, r3, #9
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	fb02 f303 	mul.w	r3, r2, r3
 8012bf0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	1e5a      	subs	r2, r3, #1
 8012bf6:	61fa      	str	r2, [r7, #28]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d102      	bne.n	8012c02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c00:	e0c9      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c06:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012c08:	69ba      	ldr	r2, [r7, #24]
 8012c0a:	4b67      	ldr	r3, [pc, #412]	; (8012da8 <SDMMC_GetCmdResp1+0x1d8>)
 8012c0c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d0ef      	beq.n	8012bf2 <SDMMC_GetCmdResp1+0x22>
 8012c12:	69bb      	ldr	r3, [r7, #24]
 8012c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d1ea      	bne.n	8012bf2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c20:	f003 0304 	and.w	r3, r3, #4
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d004      	beq.n	8012c32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	2204      	movs	r2, #4
 8012c2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c2e:	2304      	movs	r3, #4
 8012c30:	e0b1      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c36:	f003 0301 	and.w	r3, r3, #1
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d004      	beq.n	8012c48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	2201      	movs	r2, #1
 8012c42:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c44:	2301      	movs	r3, #1
 8012c46:	e0a6      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	4a58      	ldr	r2, [pc, #352]	; (8012dac <SDMMC_GetCmdResp1+0x1dc>)
 8012c4c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c4e:	68f8      	ldr	r0, [r7, #12]
 8012c50:	f7ff fcf6 	bl	8012640 <SDMMC_GetCommandResponse>
 8012c54:	4603      	mov	r3, r0
 8012c56:	461a      	mov	r2, r3
 8012c58:	7afb      	ldrb	r3, [r7, #11]
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d001      	beq.n	8012c62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c5e:	2301      	movs	r3, #1
 8012c60:	e099      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012c62:	2100      	movs	r1, #0
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f7ff fcf8 	bl	801265a <SDMMC_GetResponse>
 8012c6a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012c6c:	697a      	ldr	r2, [r7, #20]
 8012c6e:	4b50      	ldr	r3, [pc, #320]	; (8012db0 <SDMMC_GetCmdResp1+0x1e0>)
 8012c70:	4013      	ands	r3, r2
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d101      	bne.n	8012c7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012c76:	2300      	movs	r3, #0
 8012c78:	e08d      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	da02      	bge.n	8012c86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012c84:	e087      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012c90:	2340      	movs	r3, #64	; 0x40
 8012c92:	e080      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012c9e:	2380      	movs	r3, #128	; 0x80
 8012ca0:	e079      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d002      	beq.n	8012cb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012cb0:	e071      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d002      	beq.n	8012cc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cc0:	e069      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d002      	beq.n	8012cd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cd0:	e061      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d002      	beq.n	8012ce2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012ce0:	e059      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d002      	beq.n	8012cf2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012cf0:	e051      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012d00:	e049      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012d0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d10:	e041      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012d1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d20:	e039      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d002      	beq.n	8012d32 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d30:	e031      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d002      	beq.n	8012d42 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012d3c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012d40:	e029      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012d50:	e021      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012d5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012d60:	e019      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d002      	beq.n	8012d72 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012d6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012d70:	e011      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d002      	beq.n	8012d82 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012d7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012d80:	e009      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	f003 0308 	and.w	r3, r3, #8
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d002      	beq.n	8012d92 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012d8c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012d90:	e001      	b.n	8012d96 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012d92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012d96:	4618      	mov	r0, r3
 8012d98:	3720      	adds	r7, #32
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	bd80      	pop	{r7, pc}
 8012d9e:	bf00      	nop
 8012da0:	24000000 	.word	0x24000000
 8012da4:	10624dd3 	.word	0x10624dd3
 8012da8:	00200045 	.word	0x00200045
 8012dac:	002000c5 	.word	0x002000c5
 8012db0:	fdffe008 	.word	0xfdffe008

08012db4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012db4:	b480      	push	{r7}
 8012db6:	b085      	sub	sp, #20
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012dbc:	4b1f      	ldr	r3, [pc, #124]	; (8012e3c <SDMMC_GetCmdResp2+0x88>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a1f      	ldr	r2, [pc, #124]	; (8012e40 <SDMMC_GetCmdResp2+0x8c>)
 8012dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8012dc6:	0a5b      	lsrs	r3, r3, #9
 8012dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dcc:	fb02 f303 	mul.w	r3, r2, r3
 8012dd0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	1e5a      	subs	r2, r3, #1
 8012dd6:	60fa      	str	r2, [r7, #12]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d102      	bne.n	8012de2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012de0:	e026      	b.n	8012e30 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012de6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012de8:	68bb      	ldr	r3, [r7, #8]
 8012dea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0ef      	beq.n	8012dd2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012df2:	68bb      	ldr	r3, [r7, #8]
 8012df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d1ea      	bne.n	8012dd2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e00:	f003 0304 	and.w	r3, r3, #4
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d004      	beq.n	8012e12 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2204      	movs	r2, #4
 8012e0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e0e:	2304      	movs	r3, #4
 8012e10:	e00e      	b.n	8012e30 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e16:	f003 0301 	and.w	r3, r3, #1
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d004      	beq.n	8012e28 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2201      	movs	r2, #1
 8012e22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e24:	2301      	movs	r3, #1
 8012e26:	e003      	b.n	8012e30 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	4a06      	ldr	r2, [pc, #24]	; (8012e44 <SDMMC_GetCmdResp2+0x90>)
 8012e2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e2e:	2300      	movs	r3, #0
}
 8012e30:	4618      	mov	r0, r3
 8012e32:	3714      	adds	r7, #20
 8012e34:	46bd      	mov	sp, r7
 8012e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3a:	4770      	bx	lr
 8012e3c:	24000000 	.word	0x24000000
 8012e40:	10624dd3 	.word	0x10624dd3
 8012e44:	002000c5 	.word	0x002000c5

08012e48 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012e48:	b480      	push	{r7}
 8012e4a:	b085      	sub	sp, #20
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e50:	4b1a      	ldr	r3, [pc, #104]	; (8012ebc <SDMMC_GetCmdResp3+0x74>)
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4a1a      	ldr	r2, [pc, #104]	; (8012ec0 <SDMMC_GetCmdResp3+0x78>)
 8012e56:	fba2 2303 	umull	r2, r3, r2, r3
 8012e5a:	0a5b      	lsrs	r3, r3, #9
 8012e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e60:	fb02 f303 	mul.w	r3, r2, r3
 8012e64:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	1e5a      	subs	r2, r3, #1
 8012e6a:	60fa      	str	r2, [r7, #12]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d102      	bne.n	8012e76 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e74:	e01b      	b.n	8012eae <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e7a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d0ef      	beq.n	8012e66 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1ea      	bne.n	8012e66 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e94:	f003 0304 	and.w	r3, r3, #4
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d004      	beq.n	8012ea6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2204      	movs	r2, #4
 8012ea0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012ea2:	2304      	movs	r3, #4
 8012ea4:	e003      	b.n	8012eae <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4a06      	ldr	r2, [pc, #24]	; (8012ec4 <SDMMC_GetCmdResp3+0x7c>)
 8012eaa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012eac:	2300      	movs	r3, #0
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3714      	adds	r7, #20
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb8:	4770      	bx	lr
 8012eba:	bf00      	nop
 8012ebc:	24000000 	.word	0x24000000
 8012ec0:	10624dd3 	.word	0x10624dd3
 8012ec4:	002000c5 	.word	0x002000c5

08012ec8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b088      	sub	sp, #32
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ed6:	4b35      	ldr	r3, [pc, #212]	; (8012fac <SDMMC_GetCmdResp6+0xe4>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	4a35      	ldr	r2, [pc, #212]	; (8012fb0 <SDMMC_GetCmdResp6+0xe8>)
 8012edc:	fba2 2303 	umull	r2, r3, r2, r3
 8012ee0:	0a5b      	lsrs	r3, r3, #9
 8012ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ee6:	fb02 f303 	mul.w	r3, r2, r3
 8012eea:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012eec:	69fb      	ldr	r3, [r7, #28]
 8012eee:	1e5a      	subs	r2, r3, #1
 8012ef0:	61fa      	str	r2, [r7, #28]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d102      	bne.n	8012efc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ef6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012efa:	e052      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f00:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d0ef      	beq.n	8012eec <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1ea      	bne.n	8012eec <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f1a:	f003 0304 	and.w	r3, r3, #4
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d004      	beq.n	8012f2c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2204      	movs	r2, #4
 8012f26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f28:	2304      	movs	r3, #4
 8012f2a:	e03a      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d004      	beq.n	8012f42 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e02f      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f42:	68f8      	ldr	r0, [r7, #12]
 8012f44:	f7ff fb7c 	bl	8012640 <SDMMC_GetCommandResponse>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	7afb      	ldrb	r3, [r7, #11]
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	d001      	beq.n	8012f56 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f52:	2301      	movs	r3, #1
 8012f54:	e025      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	4a16      	ldr	r2, [pc, #88]	; (8012fb4 <SDMMC_GetCmdResp6+0xec>)
 8012f5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f5c:	2100      	movs	r1, #0
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f7ff fb7b 	bl	801265a <SDMMC_GetResponse>
 8012f64:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d106      	bne.n	8012f7e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012f70:	697b      	ldr	r3, [r7, #20]
 8012f72:	0c1b      	lsrs	r3, r3, #16
 8012f74:	b29a      	uxth	r2, r3
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	e011      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012f88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f8c:	e009      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012f8e:	697b      	ldr	r3, [r7, #20]
 8012f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d002      	beq.n	8012f9e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f9c:	e001      	b.n	8012fa2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	3720      	adds	r7, #32
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	bd80      	pop	{r7, pc}
 8012faa:	bf00      	nop
 8012fac:	24000000 	.word	0x24000000
 8012fb0:	10624dd3 	.word	0x10624dd3
 8012fb4:	002000c5 	.word	0x002000c5

08012fb8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012fb8:	b480      	push	{r7}
 8012fba:	b085      	sub	sp, #20
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012fc0:	4b22      	ldr	r3, [pc, #136]	; (801304c <SDMMC_GetCmdResp7+0x94>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4a22      	ldr	r2, [pc, #136]	; (8013050 <SDMMC_GetCmdResp7+0x98>)
 8012fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fca:	0a5b      	lsrs	r3, r3, #9
 8012fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fd0:	fb02 f303 	mul.w	r3, r2, r3
 8012fd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	1e5a      	subs	r2, r3, #1
 8012fda:	60fa      	str	r2, [r7, #12]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012fe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012fe4:	e02c      	b.n	8013040 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d0ef      	beq.n	8012fd6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d1ea      	bne.n	8012fd6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013004:	f003 0304 	and.w	r3, r3, #4
 8013008:	2b00      	cmp	r3, #0
 801300a:	d004      	beq.n	8013016 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2204      	movs	r2, #4
 8013010:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013012:	2304      	movs	r3, #4
 8013014:	e014      	b.n	8013040 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801301a:	f003 0301 	and.w	r3, r3, #1
 801301e:	2b00      	cmp	r3, #0
 8013020:	d004      	beq.n	801302c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2201      	movs	r2, #1
 8013026:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013028:	2301      	movs	r3, #1
 801302a:	e009      	b.n	8013040 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013034:	2b00      	cmp	r3, #0
 8013036:	d002      	beq.n	801303e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2240      	movs	r2, #64	; 0x40
 801303c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801303e:	2300      	movs	r3, #0

}
 8013040:	4618      	mov	r0, r3
 8013042:	3714      	adds	r7, #20
 8013044:	46bd      	mov	sp, r7
 8013046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304a:	4770      	bx	lr
 801304c:	24000000 	.word	0x24000000
 8013050:	10624dd3 	.word	0x10624dd3

08013054 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801305c:	4b11      	ldr	r3, [pc, #68]	; (80130a4 <SDMMC_GetCmdError+0x50>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a11      	ldr	r2, [pc, #68]	; (80130a8 <SDMMC_GetCmdError+0x54>)
 8013062:	fba2 2303 	umull	r2, r3, r2, r3
 8013066:	0a5b      	lsrs	r3, r3, #9
 8013068:	f241 3288 	movw	r2, #5000	; 0x1388
 801306c:	fb02 f303 	mul.w	r3, r2, r3
 8013070:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	1e5a      	subs	r2, r3, #1
 8013076:	60fa      	str	r2, [r7, #12]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d102      	bne.n	8013082 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801307c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013080:	e009      	b.n	8013096 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801308a:	2b00      	cmp	r3, #0
 801308c:	d0f1      	beq.n	8013072 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	4a06      	ldr	r2, [pc, #24]	; (80130ac <SDMMC_GetCmdError+0x58>)
 8013092:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013094:	2300      	movs	r3, #0
}
 8013096:	4618      	mov	r0, r3
 8013098:	3714      	adds	r7, #20
 801309a:	46bd      	mov	sp, r7
 801309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a0:	4770      	bx	lr
 80130a2:	bf00      	nop
 80130a4:	24000000 	.word	0x24000000
 80130a8:	10624dd3 	.word	0x10624dd3
 80130ac:	002000c5 	.word	0x002000c5

080130b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80130b0:	b084      	sub	sp, #16
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b084      	sub	sp, #16
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	6078      	str	r0, [r7, #4]
 80130ba:	f107 001c 	add.w	r0, r7, #28
 80130be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c4:	2b01      	cmp	r3, #1
 80130c6:	d120      	bne.n	801310a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	68da      	ldr	r2, [r3, #12]
 80130d8:	4b2a      	ldr	r3, [pc, #168]	; (8013184 <USB_CoreInit+0xd4>)
 80130da:	4013      	ands	r3, r2
 80130dc:	687a      	ldr	r2, [r7, #4]
 80130de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80130ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d105      	bne.n	80130fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	68db      	ldr	r3, [r3, #12]
 80130f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f001 faf8 	bl	80146f4 <USB_CoreReset>
 8013104:	4603      	mov	r3, r0
 8013106:	73fb      	strb	r3, [r7, #15]
 8013108:	e01a      	b.n	8013140 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f001 faec 	bl	80146f4 <USB_CoreReset>
 801311c:	4603      	mov	r3, r0
 801311e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801312a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	639a      	str	r2, [r3, #56]	; 0x38
 8013132:	e005      	b.n	8013140 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013138:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	2b01      	cmp	r3, #1
 8013144:	d116      	bne.n	8013174 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801314a:	b29a      	uxth	r2, r3
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013154:	4b0c      	ldr	r3, [pc, #48]	; (8013188 <USB_CoreInit+0xd8>)
 8013156:	4313      	orrs	r3, r2
 8013158:	687a      	ldr	r2, [r7, #4]
 801315a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	689b      	ldr	r3, [r3, #8]
 8013160:	f043 0206 	orr.w	r2, r3, #6
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	689b      	ldr	r3, [r3, #8]
 801316c:	f043 0220 	orr.w	r2, r3, #32
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013174:	7bfb      	ldrb	r3, [r7, #15]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3710      	adds	r7, #16
 801317a:	46bd      	mov	sp, r7
 801317c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013180:	b004      	add	sp, #16
 8013182:	4770      	bx	lr
 8013184:	ffbdffbf 	.word	0xffbdffbf
 8013188:	03ee0000 	.word	0x03ee0000

0801318c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801318c:	b480      	push	{r7}
 801318e:	b087      	sub	sp, #28
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	4613      	mov	r3, r2
 8013198:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801319a:	79fb      	ldrb	r3, [r7, #7]
 801319c:	2b02      	cmp	r3, #2
 801319e:	d165      	bne.n	801326c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	4a41      	ldr	r2, [pc, #260]	; (80132a8 <USB_SetTurnaroundTime+0x11c>)
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d906      	bls.n	80131b6 <USB_SetTurnaroundTime+0x2a>
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	4a40      	ldr	r2, [pc, #256]	; (80132ac <USB_SetTurnaroundTime+0x120>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d202      	bcs.n	80131b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80131b0:	230f      	movs	r3, #15
 80131b2:	617b      	str	r3, [r7, #20]
 80131b4:	e062      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80131b6:	68bb      	ldr	r3, [r7, #8]
 80131b8:	4a3c      	ldr	r2, [pc, #240]	; (80132ac <USB_SetTurnaroundTime+0x120>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d306      	bcc.n	80131cc <USB_SetTurnaroundTime+0x40>
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	4a3b      	ldr	r2, [pc, #236]	; (80132b0 <USB_SetTurnaroundTime+0x124>)
 80131c2:	4293      	cmp	r3, r2
 80131c4:	d202      	bcs.n	80131cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80131c6:	230e      	movs	r3, #14
 80131c8:	617b      	str	r3, [r7, #20]
 80131ca:	e057      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80131cc:	68bb      	ldr	r3, [r7, #8]
 80131ce:	4a38      	ldr	r2, [pc, #224]	; (80132b0 <USB_SetTurnaroundTime+0x124>)
 80131d0:	4293      	cmp	r3, r2
 80131d2:	d306      	bcc.n	80131e2 <USB_SetTurnaroundTime+0x56>
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	4a37      	ldr	r2, [pc, #220]	; (80132b4 <USB_SetTurnaroundTime+0x128>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d202      	bcs.n	80131e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80131dc:	230d      	movs	r3, #13
 80131de:	617b      	str	r3, [r7, #20]
 80131e0:	e04c      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	4a33      	ldr	r2, [pc, #204]	; (80132b4 <USB_SetTurnaroundTime+0x128>)
 80131e6:	4293      	cmp	r3, r2
 80131e8:	d306      	bcc.n	80131f8 <USB_SetTurnaroundTime+0x6c>
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	4a32      	ldr	r2, [pc, #200]	; (80132b8 <USB_SetTurnaroundTime+0x12c>)
 80131ee:	4293      	cmp	r3, r2
 80131f0:	d802      	bhi.n	80131f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80131f2:	230c      	movs	r3, #12
 80131f4:	617b      	str	r3, [r7, #20]
 80131f6:	e041      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80131f8:	68bb      	ldr	r3, [r7, #8]
 80131fa:	4a2f      	ldr	r2, [pc, #188]	; (80132b8 <USB_SetTurnaroundTime+0x12c>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d906      	bls.n	801320e <USB_SetTurnaroundTime+0x82>
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	4a2e      	ldr	r2, [pc, #184]	; (80132bc <USB_SetTurnaroundTime+0x130>)
 8013204:	4293      	cmp	r3, r2
 8013206:	d802      	bhi.n	801320e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013208:	230b      	movs	r3, #11
 801320a:	617b      	str	r3, [r7, #20]
 801320c:	e036      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	4a2a      	ldr	r2, [pc, #168]	; (80132bc <USB_SetTurnaroundTime+0x130>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d906      	bls.n	8013224 <USB_SetTurnaroundTime+0x98>
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	4a29      	ldr	r2, [pc, #164]	; (80132c0 <USB_SetTurnaroundTime+0x134>)
 801321a:	4293      	cmp	r3, r2
 801321c:	d802      	bhi.n	8013224 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801321e:	230a      	movs	r3, #10
 8013220:	617b      	str	r3, [r7, #20]
 8013222:	e02b      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	4a26      	ldr	r2, [pc, #152]	; (80132c0 <USB_SetTurnaroundTime+0x134>)
 8013228:	4293      	cmp	r3, r2
 801322a:	d906      	bls.n	801323a <USB_SetTurnaroundTime+0xae>
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	4a25      	ldr	r2, [pc, #148]	; (80132c4 <USB_SetTurnaroundTime+0x138>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d202      	bcs.n	801323a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013234:	2309      	movs	r3, #9
 8013236:	617b      	str	r3, [r7, #20]
 8013238:	e020      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	4a21      	ldr	r2, [pc, #132]	; (80132c4 <USB_SetTurnaroundTime+0x138>)
 801323e:	4293      	cmp	r3, r2
 8013240:	d306      	bcc.n	8013250 <USB_SetTurnaroundTime+0xc4>
 8013242:	68bb      	ldr	r3, [r7, #8]
 8013244:	4a20      	ldr	r2, [pc, #128]	; (80132c8 <USB_SetTurnaroundTime+0x13c>)
 8013246:	4293      	cmp	r3, r2
 8013248:	d802      	bhi.n	8013250 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801324a:	2308      	movs	r3, #8
 801324c:	617b      	str	r3, [r7, #20]
 801324e:	e015      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	4a1d      	ldr	r2, [pc, #116]	; (80132c8 <USB_SetTurnaroundTime+0x13c>)
 8013254:	4293      	cmp	r3, r2
 8013256:	d906      	bls.n	8013266 <USB_SetTurnaroundTime+0xda>
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4a1c      	ldr	r2, [pc, #112]	; (80132cc <USB_SetTurnaroundTime+0x140>)
 801325c:	4293      	cmp	r3, r2
 801325e:	d202      	bcs.n	8013266 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013260:	2307      	movs	r3, #7
 8013262:	617b      	str	r3, [r7, #20]
 8013264:	e00a      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013266:	2306      	movs	r3, #6
 8013268:	617b      	str	r3, [r7, #20]
 801326a:	e007      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801326c:	79fb      	ldrb	r3, [r7, #7]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d102      	bne.n	8013278 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013272:	2309      	movs	r3, #9
 8013274:	617b      	str	r3, [r7, #20]
 8013276:	e001      	b.n	801327c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013278:	2309      	movs	r3, #9
 801327a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	68da      	ldr	r2, [r3, #12]
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	029b      	lsls	r3, r3, #10
 8013290:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013294:	431a      	orrs	r2, r3
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801329a:	2300      	movs	r3, #0
}
 801329c:	4618      	mov	r0, r3
 801329e:	371c      	adds	r7, #28
 80132a0:	46bd      	mov	sp, r7
 80132a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a6:	4770      	bx	lr
 80132a8:	00d8acbf 	.word	0x00d8acbf
 80132ac:	00e4e1c0 	.word	0x00e4e1c0
 80132b0:	00f42400 	.word	0x00f42400
 80132b4:	01067380 	.word	0x01067380
 80132b8:	011a499f 	.word	0x011a499f
 80132bc:	01312cff 	.word	0x01312cff
 80132c0:	014ca43f 	.word	0x014ca43f
 80132c4:	016e3600 	.word	0x016e3600
 80132c8:	01a6ab1f 	.word	0x01a6ab1f
 80132cc:	01e84800 	.word	0x01e84800

080132d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80132d0:	b480      	push	{r7}
 80132d2:	b083      	sub	sp, #12
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	689b      	ldr	r3, [r3, #8]
 80132dc:	f043 0201 	orr.w	r2, r3, #1
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80132e4:	2300      	movs	r3, #0
}
 80132e6:	4618      	mov	r0, r3
 80132e8:	370c      	adds	r7, #12
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr

080132f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80132f2:	b480      	push	{r7}
 80132f4:	b083      	sub	sp, #12
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	689b      	ldr	r3, [r3, #8]
 80132fe:	f023 0201 	bic.w	r2, r3, #1
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013306:	2300      	movs	r3, #0
}
 8013308:	4618      	mov	r0, r3
 801330a:	370c      	adds	r7, #12
 801330c:	46bd      	mov	sp, r7
 801330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013312:	4770      	bx	lr

08013314 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	460b      	mov	r3, r1
 801331e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013320:	2300      	movs	r3, #0
 8013322:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013330:	78fb      	ldrb	r3, [r7, #3]
 8013332:	2b01      	cmp	r3, #1
 8013334:	d115      	bne.n	8013362 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	68db      	ldr	r3, [r3, #12]
 801333a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013342:	2001      	movs	r0, #1
 8013344:	f7f0 fcf8 	bl	8003d38 <HAL_Delay>
      ms++;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	3301      	adds	r3, #1
 801334c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f001 f93f 	bl	80145d2 <USB_GetMode>
 8013354:	4603      	mov	r3, r0
 8013356:	2b01      	cmp	r3, #1
 8013358:	d01e      	beq.n	8013398 <USB_SetCurrentMode+0x84>
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	2b31      	cmp	r3, #49	; 0x31
 801335e:	d9f0      	bls.n	8013342 <USB_SetCurrentMode+0x2e>
 8013360:	e01a      	b.n	8013398 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013362:	78fb      	ldrb	r3, [r7, #3]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d115      	bne.n	8013394 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	68db      	ldr	r3, [r3, #12]
 801336c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013374:	2001      	movs	r0, #1
 8013376:	f7f0 fcdf 	bl	8003d38 <HAL_Delay>
      ms++;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	3301      	adds	r3, #1
 801337e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f001 f926 	bl	80145d2 <USB_GetMode>
 8013386:	4603      	mov	r3, r0
 8013388:	2b00      	cmp	r3, #0
 801338a:	d005      	beq.n	8013398 <USB_SetCurrentMode+0x84>
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2b31      	cmp	r3, #49	; 0x31
 8013390:	d9f0      	bls.n	8013374 <USB_SetCurrentMode+0x60>
 8013392:	e001      	b.n	8013398 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013394:	2301      	movs	r3, #1
 8013396:	e005      	b.n	80133a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	2b32      	cmp	r3, #50	; 0x32
 801339c:	d101      	bne.n	80133a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801339e:	2301      	movs	r3, #1
 80133a0:	e000      	b.n	80133a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80133a2:	2300      	movs	r3, #0
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}

080133ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80133ac:	b084      	sub	sp, #16
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b086      	sub	sp, #24
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80133ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80133be:	2300      	movs	r3, #0
 80133c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80133c6:	2300      	movs	r3, #0
 80133c8:	613b      	str	r3, [r7, #16]
 80133ca:	e009      	b.n	80133e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	693b      	ldr	r3, [r7, #16]
 80133d0:	3340      	adds	r3, #64	; 0x40
 80133d2:	009b      	lsls	r3, r3, #2
 80133d4:	4413      	add	r3, r2
 80133d6:	2200      	movs	r2, #0
 80133d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80133da:	693b      	ldr	r3, [r7, #16]
 80133dc:	3301      	adds	r3, #1
 80133de:	613b      	str	r3, [r7, #16]
 80133e0:	693b      	ldr	r3, [r7, #16]
 80133e2:	2b0e      	cmp	r3, #14
 80133e4:	d9f2      	bls.n	80133cc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80133e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d11c      	bne.n	8013426 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133f2:	685b      	ldr	r3, [r3, #4]
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80133fa:	f043 0302 	orr.w	r3, r3, #2
 80133fe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013404:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	601a      	str	r2, [r3, #0]
 8013424:	e005      	b.n	8013432 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801342a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013438:	461a      	mov	r2, r3
 801343a:	2300      	movs	r3, #0
 801343c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013444:	4619      	mov	r1, r3
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801344c:	461a      	mov	r2, r3
 801344e:	680b      	ldr	r3, [r1, #0]
 8013450:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013454:	2b01      	cmp	r3, #1
 8013456:	d10c      	bne.n	8013472 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345a:	2b00      	cmp	r3, #0
 801345c:	d104      	bne.n	8013468 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801345e:	2100      	movs	r1, #0
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f000 f965 	bl	8013730 <USB_SetDevSpeed>
 8013466:	e008      	b.n	801347a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013468:	2101      	movs	r1, #1
 801346a:	6878      	ldr	r0, [r7, #4]
 801346c:	f000 f960 	bl	8013730 <USB_SetDevSpeed>
 8013470:	e003      	b.n	801347a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013472:	2103      	movs	r1, #3
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f000 f95b 	bl	8013730 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801347a:	2110      	movs	r1, #16
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 f8f3 	bl	8013668 <USB_FlushTxFifo>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d001      	beq.n	801348c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013488:	2301      	movs	r3, #1
 801348a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801348c:	6878      	ldr	r0, [r7, #4]
 801348e:	f000 f91f 	bl	80136d0 <USB_FlushRxFifo>
 8013492:	4603      	mov	r3, r0
 8013494:	2b00      	cmp	r3, #0
 8013496:	d001      	beq.n	801349c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013498:	2301      	movs	r3, #1
 801349a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134a2:	461a      	mov	r2, r3
 80134a4:	2300      	movs	r3, #0
 80134a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134ae:	461a      	mov	r2, r3
 80134b0:	2300      	movs	r3, #0
 80134b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134ba:	461a      	mov	r2, r3
 80134bc:	2300      	movs	r3, #0
 80134be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80134c0:	2300      	movs	r3, #0
 80134c2:	613b      	str	r3, [r7, #16]
 80134c4:	e043      	b.n	801354e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	015a      	lsls	r2, r3, #5
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	4413      	add	r3, r2
 80134ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134dc:	d118      	bne.n	8013510 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10a      	bne.n	80134fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80134e4:	693b      	ldr	r3, [r7, #16]
 80134e6:	015a      	lsls	r2, r3, #5
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	4413      	add	r3, r2
 80134ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f0:	461a      	mov	r2, r3
 80134f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80134f6:	6013      	str	r3, [r2, #0]
 80134f8:	e013      	b.n	8013522 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	015a      	lsls	r2, r3, #5
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	4413      	add	r3, r2
 8013502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013506:	461a      	mov	r2, r3
 8013508:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801350c:	6013      	str	r3, [r2, #0]
 801350e:	e008      	b.n	8013522 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013510:	693b      	ldr	r3, [r7, #16]
 8013512:	015a      	lsls	r2, r3, #5
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	4413      	add	r3, r2
 8013518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801351c:	461a      	mov	r2, r3
 801351e:	2300      	movs	r3, #0
 8013520:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	015a      	lsls	r2, r3, #5
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	4413      	add	r3, r2
 801352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352e:	461a      	mov	r2, r3
 8013530:	2300      	movs	r3, #0
 8013532:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	015a      	lsls	r2, r3, #5
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	4413      	add	r3, r2
 801353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013540:	461a      	mov	r2, r3
 8013542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013548:	693b      	ldr	r3, [r7, #16]
 801354a:	3301      	adds	r3, #1
 801354c:	613b      	str	r3, [r7, #16]
 801354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013550:	693a      	ldr	r2, [r7, #16]
 8013552:	429a      	cmp	r2, r3
 8013554:	d3b7      	bcc.n	80134c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013556:	2300      	movs	r3, #0
 8013558:	613b      	str	r3, [r7, #16]
 801355a:	e043      	b.n	80135e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	015a      	lsls	r2, r3, #5
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	4413      	add	r3, r2
 8013564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801356e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013572:	d118      	bne.n	80135a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d10a      	bne.n	8013590 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	015a      	lsls	r2, r3, #5
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	4413      	add	r3, r2
 8013582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013586:	461a      	mov	r2, r3
 8013588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801358c:	6013      	str	r3, [r2, #0]
 801358e:	e013      	b.n	80135b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013590:	693b      	ldr	r3, [r7, #16]
 8013592:	015a      	lsls	r2, r3, #5
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	4413      	add	r3, r2
 8013598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801359c:	461a      	mov	r2, r3
 801359e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80135a2:	6013      	str	r3, [r2, #0]
 80135a4:	e008      	b.n	80135b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	015a      	lsls	r2, r3, #5
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	4413      	add	r3, r2
 80135ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b2:	461a      	mov	r2, r3
 80135b4:	2300      	movs	r3, #0
 80135b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	015a      	lsls	r2, r3, #5
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	4413      	add	r3, r2
 80135c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c4:	461a      	mov	r2, r3
 80135c6:	2300      	movs	r3, #0
 80135c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	015a      	lsls	r2, r3, #5
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	4413      	add	r3, r2
 80135d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d6:	461a      	mov	r2, r3
 80135d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80135dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	3301      	adds	r3, #1
 80135e2:	613b      	str	r3, [r7, #16]
 80135e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e6:	693a      	ldr	r2, [r7, #16]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d3b7      	bcc.n	801355c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135f2:	691b      	ldr	r3, [r3, #16]
 80135f4:	68fa      	ldr	r2, [r7, #12]
 80135f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80135fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80135fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2200      	movs	r2, #0
 8013604:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801360c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013610:	2b00      	cmp	r3, #0
 8013612:	d105      	bne.n	8013620 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	699b      	ldr	r3, [r3, #24]
 8013618:	f043 0210 	orr.w	r2, r3, #16
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	699a      	ldr	r2, [r3, #24]
 8013624:	4b0e      	ldr	r3, [pc, #56]	; (8013660 <USB_DevInit+0x2b4>)
 8013626:	4313      	orrs	r3, r2
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801362e:	2b00      	cmp	r3, #0
 8013630:	d005      	beq.n	801363e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	699b      	ldr	r3, [r3, #24]
 8013636:	f043 0208 	orr.w	r2, r3, #8
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801363e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013640:	2b01      	cmp	r3, #1
 8013642:	d105      	bne.n	8013650 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	699a      	ldr	r2, [r3, #24]
 8013648:	4b06      	ldr	r3, [pc, #24]	; (8013664 <USB_DevInit+0x2b8>)
 801364a:	4313      	orrs	r3, r2
 801364c:	687a      	ldr	r2, [r7, #4]
 801364e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013650:	7dfb      	ldrb	r3, [r7, #23]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3718      	adds	r7, #24
 8013656:	46bd      	mov	sp, r7
 8013658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801365c:	b004      	add	sp, #16
 801365e:	4770      	bx	lr
 8013660:	803c3800 	.word	0x803c3800
 8013664:	40000004 	.word	0x40000004

08013668 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013668:	b480      	push	{r7}
 801366a:	b085      	sub	sp, #20
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013672:	2300      	movs	r3, #0
 8013674:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	3301      	adds	r3, #1
 801367a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	4a13      	ldr	r2, [pc, #76]	; (80136cc <USB_FlushTxFifo+0x64>)
 8013680:	4293      	cmp	r3, r2
 8013682:	d901      	bls.n	8013688 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013684:	2303      	movs	r3, #3
 8013686:	e01b      	b.n	80136c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	691b      	ldr	r3, [r3, #16]
 801368c:	2b00      	cmp	r3, #0
 801368e:	daf2      	bge.n	8013676 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013690:	2300      	movs	r3, #0
 8013692:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	019b      	lsls	r3, r3, #6
 8013698:	f043 0220 	orr.w	r2, r3, #32
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	3301      	adds	r3, #1
 80136a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	4a08      	ldr	r2, [pc, #32]	; (80136cc <USB_FlushTxFifo+0x64>)
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d901      	bls.n	80136b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80136ae:	2303      	movs	r3, #3
 80136b0:	e006      	b.n	80136c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	691b      	ldr	r3, [r3, #16]
 80136b6:	f003 0320 	and.w	r3, r3, #32
 80136ba:	2b20      	cmp	r3, #32
 80136bc:	d0f0      	beq.n	80136a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3714      	adds	r7, #20
 80136c4:	46bd      	mov	sp, r7
 80136c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ca:	4770      	bx	lr
 80136cc:	00030d40 	.word	0x00030d40

080136d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b085      	sub	sp, #20
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80136d8:	2300      	movs	r3, #0
 80136da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	3301      	adds	r3, #1
 80136e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	4a11      	ldr	r2, [pc, #68]	; (801372c <USB_FlushRxFifo+0x5c>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d901      	bls.n	80136ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80136ea:	2303      	movs	r3, #3
 80136ec:	e018      	b.n	8013720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	691b      	ldr	r3, [r3, #16]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	daf2      	bge.n	80136dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80136f6:	2300      	movs	r3, #0
 80136f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	2210      	movs	r2, #16
 80136fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	3301      	adds	r3, #1
 8013704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	4a08      	ldr	r2, [pc, #32]	; (801372c <USB_FlushRxFifo+0x5c>)
 801370a:	4293      	cmp	r3, r2
 801370c:	d901      	bls.n	8013712 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801370e:	2303      	movs	r3, #3
 8013710:	e006      	b.n	8013720 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	691b      	ldr	r3, [r3, #16]
 8013716:	f003 0310 	and.w	r3, r3, #16
 801371a:	2b10      	cmp	r3, #16
 801371c:	d0f0      	beq.n	8013700 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801371e:	2300      	movs	r3, #0
}
 8013720:	4618      	mov	r0, r3
 8013722:	3714      	adds	r7, #20
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	00030d40 	.word	0x00030d40

08013730 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	460b      	mov	r3, r1
 801373a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013746:	681a      	ldr	r2, [r3, #0]
 8013748:	78fb      	ldrb	r3, [r7, #3]
 801374a:	68f9      	ldr	r1, [r7, #12]
 801374c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013750:	4313      	orrs	r3, r2
 8013752:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013754:	2300      	movs	r3, #0
}
 8013756:	4618      	mov	r0, r3
 8013758:	3714      	adds	r7, #20
 801375a:	46bd      	mov	sp, r7
 801375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013760:	4770      	bx	lr

08013762 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013762:	b480      	push	{r7}
 8013764:	b087      	sub	sp, #28
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013774:	689b      	ldr	r3, [r3, #8]
 8013776:	f003 0306 	and.w	r3, r3, #6
 801377a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d102      	bne.n	8013788 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013782:	2300      	movs	r3, #0
 8013784:	75fb      	strb	r3, [r7, #23]
 8013786:	e00a      	b.n	801379e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2b02      	cmp	r3, #2
 801378c:	d002      	beq.n	8013794 <USB_GetDevSpeed+0x32>
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2b06      	cmp	r3, #6
 8013792:	d102      	bne.n	801379a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013794:	2302      	movs	r3, #2
 8013796:	75fb      	strb	r3, [r7, #23]
 8013798:	e001      	b.n	801379e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801379a:	230f      	movs	r3, #15
 801379c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801379e:	7dfb      	ldrb	r3, [r7, #23]
}
 80137a0:	4618      	mov	r0, r3
 80137a2:	371c      	adds	r7, #28
 80137a4:	46bd      	mov	sp, r7
 80137a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137aa:	4770      	bx	lr

080137ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80137ac:	b480      	push	{r7}
 80137ae:	b085      	sub	sp, #20
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	785b      	ldrb	r3, [r3, #1]
 80137c4:	2b01      	cmp	r3, #1
 80137c6:	d139      	bne.n	801383c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ce:	69da      	ldr	r2, [r3, #28]
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	f003 030f 	and.w	r3, r3, #15
 80137d8:	2101      	movs	r1, #1
 80137da:	fa01 f303 	lsl.w	r3, r1, r3
 80137de:	b29b      	uxth	r3, r3
 80137e0:	68f9      	ldr	r1, [r7, #12]
 80137e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137e6:	4313      	orrs	r3, r2
 80137e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	015a      	lsls	r2, r3, #5
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	4413      	add	r3, r2
 80137f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d153      	bne.n	80138a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	015a      	lsls	r2, r3, #5
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	4413      	add	r3, r2
 8013808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801380c:	681a      	ldr	r2, [r3, #0]
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	689b      	ldr	r3, [r3, #8]
 8013812:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	791b      	ldrb	r3, [r3, #4]
 801381a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801381c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801381e:	68bb      	ldr	r3, [r7, #8]
 8013820:	059b      	lsls	r3, r3, #22
 8013822:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013824:	431a      	orrs	r2, r3
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	0159      	lsls	r1, r3, #5
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	440b      	add	r3, r1
 801382e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013832:	4619      	mov	r1, r3
 8013834:	4b20      	ldr	r3, [pc, #128]	; (80138b8 <USB_ActivateEndpoint+0x10c>)
 8013836:	4313      	orrs	r3, r2
 8013838:	600b      	str	r3, [r1, #0]
 801383a:	e035      	b.n	80138a8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013842:	69da      	ldr	r2, [r3, #28]
 8013844:	683b      	ldr	r3, [r7, #0]
 8013846:	781b      	ldrb	r3, [r3, #0]
 8013848:	f003 030f 	and.w	r3, r3, #15
 801384c:	2101      	movs	r1, #1
 801384e:	fa01 f303 	lsl.w	r3, r1, r3
 8013852:	041b      	lsls	r3, r3, #16
 8013854:	68f9      	ldr	r1, [r7, #12]
 8013856:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801385a:	4313      	orrs	r3, r2
 801385c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801385e:	68bb      	ldr	r3, [r7, #8]
 8013860:	015a      	lsls	r2, r3, #5
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	4413      	add	r3, r2
 8013866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013870:	2b00      	cmp	r3, #0
 8013872:	d119      	bne.n	80138a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	015a      	lsls	r2, r3, #5
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	4413      	add	r3, r2
 801387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	791b      	ldrb	r3, [r3, #4]
 801388e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013890:	430b      	orrs	r3, r1
 8013892:	431a      	orrs	r2, r3
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	0159      	lsls	r1, r3, #5
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	440b      	add	r3, r1
 801389c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138a0:	4619      	mov	r1, r3
 80138a2:	4b05      	ldr	r3, [pc, #20]	; (80138b8 <USB_ActivateEndpoint+0x10c>)
 80138a4:	4313      	orrs	r3, r2
 80138a6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80138a8:	2300      	movs	r3, #0
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3714      	adds	r7, #20
 80138ae:	46bd      	mov	sp, r7
 80138b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b4:	4770      	bx	lr
 80138b6:	bf00      	nop
 80138b8:	10008000 	.word	0x10008000

080138bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138bc:	b480      	push	{r7}
 80138be:	b085      	sub	sp, #20
 80138c0:	af00      	add	r7, sp, #0
 80138c2:	6078      	str	r0, [r7, #4]
 80138c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	785b      	ldrb	r3, [r3, #1]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d161      	bne.n	801399c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138d8:	68bb      	ldr	r3, [r7, #8]
 80138da:	015a      	lsls	r2, r3, #5
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	4413      	add	r3, r2
 80138e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138ee:	d11f      	bne.n	8013930 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80138f0:	68bb      	ldr	r3, [r7, #8]
 80138f2:	015a      	lsls	r2, r3, #5
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	4413      	add	r3, r2
 80138f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	68ba      	ldr	r2, [r7, #8]
 8013900:	0151      	lsls	r1, r2, #5
 8013902:	68fa      	ldr	r2, [r7, #12]
 8013904:	440a      	add	r2, r1
 8013906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801390a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801390e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	68ba      	ldr	r2, [r7, #8]
 8013920:	0151      	lsls	r1, r2, #5
 8013922:	68fa      	ldr	r2, [r7, #12]
 8013924:	440a      	add	r2, r1
 8013926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801392a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801392e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	f003 030f 	and.w	r3, r3, #15
 8013940:	2101      	movs	r1, #1
 8013942:	fa01 f303 	lsl.w	r3, r1, r3
 8013946:	b29b      	uxth	r3, r3
 8013948:	43db      	mvns	r3, r3
 801394a:	68f9      	ldr	r1, [r7, #12]
 801394c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013950:	4013      	ands	r3, r2
 8013952:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801395a:	69da      	ldr	r2, [r3, #28]
 801395c:	683b      	ldr	r3, [r7, #0]
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	f003 030f 	and.w	r3, r3, #15
 8013964:	2101      	movs	r1, #1
 8013966:	fa01 f303 	lsl.w	r3, r1, r3
 801396a:	b29b      	uxth	r3, r3
 801396c:	43db      	mvns	r3, r3
 801396e:	68f9      	ldr	r1, [r7, #12]
 8013970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013974:	4013      	ands	r3, r2
 8013976:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	015a      	lsls	r2, r3, #5
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	4413      	add	r3, r2
 8013980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013984:	681a      	ldr	r2, [r3, #0]
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	0159      	lsls	r1, r3, #5
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	440b      	add	r3, r1
 801398e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013992:	4619      	mov	r1, r3
 8013994:	4b35      	ldr	r3, [pc, #212]	; (8013a6c <USB_DeactivateEndpoint+0x1b0>)
 8013996:	4013      	ands	r3, r2
 8013998:	600b      	str	r3, [r1, #0]
 801399a:	e060      	b.n	8013a5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	015a      	lsls	r2, r3, #5
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	4413      	add	r3, r2
 80139a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139b2:	d11f      	bne.n	80139f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	015a      	lsls	r2, r3, #5
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	4413      	add	r3, r2
 80139bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	68ba      	ldr	r2, [r7, #8]
 80139c4:	0151      	lsls	r1, r2, #5
 80139c6:	68fa      	ldr	r2, [r7, #12]
 80139c8:	440a      	add	r2, r1
 80139ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	015a      	lsls	r2, r3, #5
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	4413      	add	r3, r2
 80139dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	68ba      	ldr	r2, [r7, #8]
 80139e4:	0151      	lsls	r1, r2, #5
 80139e6:	68fa      	ldr	r2, [r7, #12]
 80139e8:	440a      	add	r2, r1
 80139ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	781b      	ldrb	r3, [r3, #0]
 8013a00:	f003 030f 	and.w	r3, r3, #15
 8013a04:	2101      	movs	r1, #1
 8013a06:	fa01 f303 	lsl.w	r3, r1, r3
 8013a0a:	041b      	lsls	r3, r3, #16
 8013a0c:	43db      	mvns	r3, r3
 8013a0e:	68f9      	ldr	r1, [r7, #12]
 8013a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a14:	4013      	ands	r3, r2
 8013a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a1e:	69da      	ldr	r2, [r3, #28]
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	f003 030f 	and.w	r3, r3, #15
 8013a28:	2101      	movs	r1, #1
 8013a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a2e:	041b      	lsls	r3, r3, #16
 8013a30:	43db      	mvns	r3, r3
 8013a32:	68f9      	ldr	r1, [r7, #12]
 8013a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a38:	4013      	ands	r3, r2
 8013a3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a3c:	68bb      	ldr	r3, [r7, #8]
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	0159      	lsls	r1, r3, #5
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	440b      	add	r3, r1
 8013a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a56:	4619      	mov	r1, r3
 8013a58:	4b05      	ldr	r3, [pc, #20]	; (8013a70 <USB_DeactivateEndpoint+0x1b4>)
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013a5e:	2300      	movs	r3, #0
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3714      	adds	r7, #20
 8013a64:	46bd      	mov	sp, r7
 8013a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6a:	4770      	bx	lr
 8013a6c:	ec337800 	.word	0xec337800
 8013a70:	eff37800 	.word	0xeff37800

08013a74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013a74:	b580      	push	{r7, lr}
 8013a76:	b08a      	sub	sp, #40	; 0x28
 8013a78:	af02      	add	r7, sp, #8
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	4613      	mov	r3, r2
 8013a80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	785b      	ldrb	r3, [r3, #1]
 8013a90:	2b01      	cmp	r3, #1
 8013a92:	f040 8181 	bne.w	8013d98 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	691b      	ldr	r3, [r3, #16]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d132      	bne.n	8013b04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a9e:	69bb      	ldr	r3, [r7, #24]
 8013aa0:	015a      	lsls	r2, r3, #5
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aaa:	691a      	ldr	r2, [r3, #16]
 8013aac:	69bb      	ldr	r3, [r7, #24]
 8013aae:	0159      	lsls	r1, r3, #5
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	440b      	add	r3, r1
 8013ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ab8:	4619      	mov	r1, r3
 8013aba:	4ba5      	ldr	r3, [pc, #660]	; (8013d50 <USB_EPStartXfer+0x2dc>)
 8013abc:	4013      	ands	r3, r2
 8013abe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013ac0:	69bb      	ldr	r3, [r7, #24]
 8013ac2:	015a      	lsls	r2, r3, #5
 8013ac4:	69fb      	ldr	r3, [r7, #28]
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013acc:	691b      	ldr	r3, [r3, #16]
 8013ace:	69ba      	ldr	r2, [r7, #24]
 8013ad0:	0151      	lsls	r1, r2, #5
 8013ad2:	69fa      	ldr	r2, [r7, #28]
 8013ad4:	440a      	add	r2, r1
 8013ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ada:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ade:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	015a      	lsls	r2, r3, #5
 8013ae4:	69fb      	ldr	r3, [r7, #28]
 8013ae6:	4413      	add	r3, r2
 8013ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aec:	691a      	ldr	r2, [r3, #16]
 8013aee:	69bb      	ldr	r3, [r7, #24]
 8013af0:	0159      	lsls	r1, r3, #5
 8013af2:	69fb      	ldr	r3, [r7, #28]
 8013af4:	440b      	add	r3, r1
 8013af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013afa:	4619      	mov	r1, r3
 8013afc:	4b95      	ldr	r3, [pc, #596]	; (8013d54 <USB_EPStartXfer+0x2e0>)
 8013afe:	4013      	ands	r3, r2
 8013b00:	610b      	str	r3, [r1, #16]
 8013b02:	e092      	b.n	8013c2a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	015a      	lsls	r2, r3, #5
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	4413      	add	r3, r2
 8013b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b10:	691a      	ldr	r2, [r3, #16]
 8013b12:	69bb      	ldr	r3, [r7, #24]
 8013b14:	0159      	lsls	r1, r3, #5
 8013b16:	69fb      	ldr	r3, [r7, #28]
 8013b18:	440b      	add	r3, r1
 8013b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b1e:	4619      	mov	r1, r3
 8013b20:	4b8c      	ldr	r3, [pc, #560]	; (8013d54 <USB_EPStartXfer+0x2e0>)
 8013b22:	4013      	ands	r3, r2
 8013b24:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b26:	69bb      	ldr	r3, [r7, #24]
 8013b28:	015a      	lsls	r2, r3, #5
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b32:	691a      	ldr	r2, [r3, #16]
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	0159      	lsls	r1, r3, #5
 8013b38:	69fb      	ldr	r3, [r7, #28]
 8013b3a:	440b      	add	r3, r1
 8013b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b40:	4619      	mov	r1, r3
 8013b42:	4b83      	ldr	r3, [pc, #524]	; (8013d50 <USB_EPStartXfer+0x2dc>)
 8013b44:	4013      	ands	r3, r2
 8013b46:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013b48:	69bb      	ldr	r3, [r7, #24]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d11a      	bne.n	8013b84 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	691a      	ldr	r2, [r3, #16]
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	689b      	ldr	r3, [r3, #8]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d903      	bls.n	8013b62 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	689a      	ldr	r2, [r3, #8]
 8013b5e:	68bb      	ldr	r3, [r7, #8]
 8013b60:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	015a      	lsls	r2, r3, #5
 8013b66:	69fb      	ldr	r3, [r7, #28]
 8013b68:	4413      	add	r3, r2
 8013b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b6e:	691b      	ldr	r3, [r3, #16]
 8013b70:	69ba      	ldr	r2, [r7, #24]
 8013b72:	0151      	lsls	r1, r2, #5
 8013b74:	69fa      	ldr	r2, [r7, #28]
 8013b76:	440a      	add	r2, r1
 8013b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b80:	6113      	str	r3, [r2, #16]
 8013b82:	e01b      	b.n	8013bbc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013b84:	69bb      	ldr	r3, [r7, #24]
 8013b86:	015a      	lsls	r2, r3, #5
 8013b88:	69fb      	ldr	r3, [r7, #28]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b90:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	6919      	ldr	r1, [r3, #16]
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	689b      	ldr	r3, [r3, #8]
 8013b9a:	440b      	add	r3, r1
 8013b9c:	1e59      	subs	r1, r3, #1
 8013b9e:	68bb      	ldr	r3, [r7, #8]
 8013ba0:	689b      	ldr	r3, [r3, #8]
 8013ba2:	fbb1 f3f3 	udiv	r3, r1, r3
 8013ba6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013ba8:	4b6b      	ldr	r3, [pc, #428]	; (8013d58 <USB_EPStartXfer+0x2e4>)
 8013baa:	400b      	ands	r3, r1
 8013bac:	69b9      	ldr	r1, [r7, #24]
 8013bae:	0148      	lsls	r0, r1, #5
 8013bb0:	69f9      	ldr	r1, [r7, #28]
 8013bb2:	4401      	add	r1, r0
 8013bb4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013bb8:	4313      	orrs	r3, r2
 8013bba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013bbc:	69bb      	ldr	r3, [r7, #24]
 8013bbe:	015a      	lsls	r2, r3, #5
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc8:	691a      	ldr	r2, [r3, #16]
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	691b      	ldr	r3, [r3, #16]
 8013bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bd2:	69b9      	ldr	r1, [r7, #24]
 8013bd4:	0148      	lsls	r0, r1, #5
 8013bd6:	69f9      	ldr	r1, [r7, #28]
 8013bd8:	4401      	add	r1, r0
 8013bda:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013bde:	4313      	orrs	r3, r2
 8013be0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	791b      	ldrb	r3, [r3, #4]
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d11f      	bne.n	8013c2a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013bea:	69bb      	ldr	r3, [r7, #24]
 8013bec:	015a      	lsls	r2, r3, #5
 8013bee:	69fb      	ldr	r3, [r7, #28]
 8013bf0:	4413      	add	r3, r2
 8013bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bf6:	691b      	ldr	r3, [r3, #16]
 8013bf8:	69ba      	ldr	r2, [r7, #24]
 8013bfa:	0151      	lsls	r1, r2, #5
 8013bfc:	69fa      	ldr	r2, [r7, #28]
 8013bfe:	440a      	add	r2, r1
 8013c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013c08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013c0a:	69bb      	ldr	r3, [r7, #24]
 8013c0c:	015a      	lsls	r2, r3, #5
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	4413      	add	r3, r2
 8013c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c16:	691b      	ldr	r3, [r3, #16]
 8013c18:	69ba      	ldr	r2, [r7, #24]
 8013c1a:	0151      	lsls	r1, r2, #5
 8013c1c:	69fa      	ldr	r2, [r7, #28]
 8013c1e:	440a      	add	r2, r1
 8013c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013c2a:	79fb      	ldrb	r3, [r7, #7]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d14b      	bne.n	8013cc8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	69db      	ldr	r3, [r3, #28]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d009      	beq.n	8013c4c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013c38:	69bb      	ldr	r3, [r7, #24]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	4413      	add	r3, r2
 8013c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c44:	461a      	mov	r2, r3
 8013c46:	68bb      	ldr	r3, [r7, #8]
 8013c48:	69db      	ldr	r3, [r3, #28]
 8013c4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	791b      	ldrb	r3, [r3, #4]
 8013c50:	2b01      	cmp	r3, #1
 8013c52:	d128      	bne.n	8013ca6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d110      	bne.n	8013c86 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	69ba      	ldr	r2, [r7, #24]
 8013c74:	0151      	lsls	r1, r2, #5
 8013c76:	69fa      	ldr	r2, [r7, #28]
 8013c78:	440a      	add	r2, r1
 8013c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c82:	6013      	str	r3, [r2, #0]
 8013c84:	e00f      	b.n	8013ca6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	015a      	lsls	r2, r3, #5
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	4413      	add	r3, r2
 8013c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	69ba      	ldr	r2, [r7, #24]
 8013c96:	0151      	lsls	r1, r2, #5
 8013c98:	69fa      	ldr	r2, [r7, #28]
 8013c9a:	440a      	add	r2, r1
 8013c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ca4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013ca6:	69bb      	ldr	r3, [r7, #24]
 8013ca8:	015a      	lsls	r2, r3, #5
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	4413      	add	r3, r2
 8013cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	69ba      	ldr	r2, [r7, #24]
 8013cb6:	0151      	lsls	r1, r2, #5
 8013cb8:	69fa      	ldr	r2, [r7, #28]
 8013cba:	440a      	add	r2, r1
 8013cbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013cc4:	6013      	str	r3, [r2, #0]
 8013cc6:	e16a      	b.n	8013f9e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	015a      	lsls	r2, r3, #5
 8013ccc:	69fb      	ldr	r3, [r7, #28]
 8013cce:	4413      	add	r3, r2
 8013cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	69ba      	ldr	r2, [r7, #24]
 8013cd8:	0151      	lsls	r1, r2, #5
 8013cda:	69fa      	ldr	r2, [r7, #28]
 8013cdc:	440a      	add	r2, r1
 8013cde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ce2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013ce6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	791b      	ldrb	r3, [r3, #4]
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d015      	beq.n	8013d1c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	691b      	ldr	r3, [r3, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	f000 8152 	beq.w	8013f9e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	781b      	ldrb	r3, [r3, #0]
 8013d06:	f003 030f 	and.w	r3, r3, #15
 8013d0a:	2101      	movs	r1, #1
 8013d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d10:	69f9      	ldr	r1, [r7, #28]
 8013d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d16:	4313      	orrs	r3, r2
 8013d18:	634b      	str	r3, [r1, #52]	; 0x34
 8013d1a:	e140      	b.n	8013f9e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d22:	689b      	ldr	r3, [r3, #8]
 8013d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d117      	bne.n	8013d5c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d2c:	69bb      	ldr	r3, [r7, #24]
 8013d2e:	015a      	lsls	r2, r3, #5
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	4413      	add	r3, r2
 8013d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	69ba      	ldr	r2, [r7, #24]
 8013d3c:	0151      	lsls	r1, r2, #5
 8013d3e:	69fa      	ldr	r2, [r7, #28]
 8013d40:	440a      	add	r2, r1
 8013d42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d4a:	6013      	str	r3, [r2, #0]
 8013d4c:	e016      	b.n	8013d7c <USB_EPStartXfer+0x308>
 8013d4e:	bf00      	nop
 8013d50:	e007ffff 	.word	0xe007ffff
 8013d54:	fff80000 	.word	0xfff80000
 8013d58:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d5c:	69bb      	ldr	r3, [r7, #24]
 8013d5e:	015a      	lsls	r2, r3, #5
 8013d60:	69fb      	ldr	r3, [r7, #28]
 8013d62:	4413      	add	r3, r2
 8013d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	69ba      	ldr	r2, [r7, #24]
 8013d6c:	0151      	lsls	r1, r2, #5
 8013d6e:	69fa      	ldr	r2, [r7, #28]
 8013d70:	440a      	add	r2, r1
 8013d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d7a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	68d9      	ldr	r1, [r3, #12]
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	781a      	ldrb	r2, [r3, #0]
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	691b      	ldr	r3, [r3, #16]
 8013d88:	b298      	uxth	r0, r3
 8013d8a:	79fb      	ldrb	r3, [r7, #7]
 8013d8c:	9300      	str	r3, [sp, #0]
 8013d8e:	4603      	mov	r3, r0
 8013d90:	68f8      	ldr	r0, [r7, #12]
 8013d92:	f000 f9b9 	bl	8014108 <USB_WritePacket>
 8013d96:	e102      	b.n	8013f9e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013d98:	69bb      	ldr	r3, [r7, #24]
 8013d9a:	015a      	lsls	r2, r3, #5
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	4413      	add	r3, r2
 8013da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da4:	691a      	ldr	r2, [r3, #16]
 8013da6:	69bb      	ldr	r3, [r7, #24]
 8013da8:	0159      	lsls	r1, r3, #5
 8013daa:	69fb      	ldr	r3, [r7, #28]
 8013dac:	440b      	add	r3, r1
 8013dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db2:	4619      	mov	r1, r3
 8013db4:	4b7c      	ldr	r3, [pc, #496]	; (8013fa8 <USB_EPStartXfer+0x534>)
 8013db6:	4013      	ands	r3, r2
 8013db8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013dba:	69bb      	ldr	r3, [r7, #24]
 8013dbc:	015a      	lsls	r2, r3, #5
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc6:	691a      	ldr	r2, [r3, #16]
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	0159      	lsls	r1, r3, #5
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	440b      	add	r3, r1
 8013dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	4b75      	ldr	r3, [pc, #468]	; (8013fac <USB_EPStartXfer+0x538>)
 8013dd8:	4013      	ands	r3, r2
 8013dda:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013ddc:	69bb      	ldr	r3, [r7, #24]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d12f      	bne.n	8013e42 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	691b      	ldr	r3, [r3, #16]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d003      	beq.n	8013df2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	689a      	ldr	r2, [r3, #8]
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	689a      	ldr	r2, [r3, #8]
 8013df6:	68bb      	ldr	r3, [r7, #8]
 8013df8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	015a      	lsls	r2, r3, #5
 8013dfe:	69fb      	ldr	r3, [r7, #28]
 8013e00:	4413      	add	r3, r2
 8013e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e06:	691a      	ldr	r2, [r3, #16]
 8013e08:	68bb      	ldr	r3, [r7, #8]
 8013e0a:	6a1b      	ldr	r3, [r3, #32]
 8013e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e10:	69b9      	ldr	r1, [r7, #24]
 8013e12:	0148      	lsls	r0, r1, #5
 8013e14:	69f9      	ldr	r1, [r7, #28]
 8013e16:	4401      	add	r1, r0
 8013e18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e1c:	4313      	orrs	r3, r2
 8013e1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e20:	69bb      	ldr	r3, [r7, #24]
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	691b      	ldr	r3, [r3, #16]
 8013e2e:	69ba      	ldr	r2, [r7, #24]
 8013e30:	0151      	lsls	r1, r2, #5
 8013e32:	69fa      	ldr	r2, [r7, #28]
 8013e34:	440a      	add	r2, r1
 8013e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e3e:	6113      	str	r3, [r2, #16]
 8013e40:	e05f      	b.n	8013f02 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	691b      	ldr	r3, [r3, #16]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d123      	bne.n	8013e92 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	015a      	lsls	r2, r3, #5
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	4413      	add	r3, r2
 8013e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e56:	691a      	ldr	r2, [r3, #16]
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	689b      	ldr	r3, [r3, #8]
 8013e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e60:	69b9      	ldr	r1, [r7, #24]
 8013e62:	0148      	lsls	r0, r1, #5
 8013e64:	69f9      	ldr	r1, [r7, #28]
 8013e66:	4401      	add	r1, r0
 8013e68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e6c:	4313      	orrs	r3, r2
 8013e6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e70:	69bb      	ldr	r3, [r7, #24]
 8013e72:	015a      	lsls	r2, r3, #5
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	4413      	add	r3, r2
 8013e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e7c:	691b      	ldr	r3, [r3, #16]
 8013e7e:	69ba      	ldr	r2, [r7, #24]
 8013e80:	0151      	lsls	r1, r2, #5
 8013e82:	69fa      	ldr	r2, [r7, #28]
 8013e84:	440a      	add	r2, r1
 8013e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e8e:	6113      	str	r3, [r2, #16]
 8013e90:	e037      	b.n	8013f02 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013e92:	68bb      	ldr	r3, [r7, #8]
 8013e94:	691a      	ldr	r2, [r3, #16]
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	4413      	add	r3, r2
 8013e9c:	1e5a      	subs	r2, r3, #1
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	689b      	ldr	r3, [r3, #8]
 8013ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ea6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	689b      	ldr	r3, [r3, #8]
 8013eac:	8afa      	ldrh	r2, [r7, #22]
 8013eae:	fb03 f202 	mul.w	r2, r3, r2
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013eb6:	69bb      	ldr	r3, [r7, #24]
 8013eb8:	015a      	lsls	r2, r3, #5
 8013eba:	69fb      	ldr	r3, [r7, #28]
 8013ebc:	4413      	add	r3, r2
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	691a      	ldr	r2, [r3, #16]
 8013ec4:	8afb      	ldrh	r3, [r7, #22]
 8013ec6:	04d9      	lsls	r1, r3, #19
 8013ec8:	4b39      	ldr	r3, [pc, #228]	; (8013fb0 <USB_EPStartXfer+0x53c>)
 8013eca:	400b      	ands	r3, r1
 8013ecc:	69b9      	ldr	r1, [r7, #24]
 8013ece:	0148      	lsls	r0, r1, #5
 8013ed0:	69f9      	ldr	r1, [r7, #28]
 8013ed2:	4401      	add	r1, r0
 8013ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ed8:	4313      	orrs	r3, r2
 8013eda:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013edc:	69bb      	ldr	r3, [r7, #24]
 8013ede:	015a      	lsls	r2, r3, #5
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	4413      	add	r3, r2
 8013ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee8:	691a      	ldr	r2, [r3, #16]
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	6a1b      	ldr	r3, [r3, #32]
 8013eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ef2:	69b9      	ldr	r1, [r7, #24]
 8013ef4:	0148      	lsls	r0, r1, #5
 8013ef6:	69f9      	ldr	r1, [r7, #28]
 8013ef8:	4401      	add	r1, r0
 8013efa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013efe:	4313      	orrs	r3, r2
 8013f00:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013f02:	79fb      	ldrb	r3, [r7, #7]
 8013f04:	2b01      	cmp	r3, #1
 8013f06:	d10d      	bne.n	8013f24 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013f08:	68bb      	ldr	r3, [r7, #8]
 8013f0a:	68db      	ldr	r3, [r3, #12]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d009      	beq.n	8013f24 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	68d9      	ldr	r1, [r3, #12]
 8013f14:	69bb      	ldr	r3, [r7, #24]
 8013f16:	015a      	lsls	r2, r3, #5
 8013f18:	69fb      	ldr	r3, [r7, #28]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f20:	460a      	mov	r2, r1
 8013f22:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	791b      	ldrb	r3, [r3, #4]
 8013f28:	2b01      	cmp	r3, #1
 8013f2a:	d128      	bne.n	8013f7e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f32:	689b      	ldr	r3, [r3, #8]
 8013f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d110      	bne.n	8013f5e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	015a      	lsls	r2, r3, #5
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	4413      	add	r3, r2
 8013f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	69ba      	ldr	r2, [r7, #24]
 8013f4c:	0151      	lsls	r1, r2, #5
 8013f4e:	69fa      	ldr	r2, [r7, #28]
 8013f50:	440a      	add	r2, r1
 8013f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f5a:	6013      	str	r3, [r2, #0]
 8013f5c:	e00f      	b.n	8013f7e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	015a      	lsls	r2, r3, #5
 8013f62:	69fb      	ldr	r3, [r7, #28]
 8013f64:	4413      	add	r3, r2
 8013f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	69ba      	ldr	r2, [r7, #24]
 8013f6e:	0151      	lsls	r1, r2, #5
 8013f70:	69fa      	ldr	r2, [r7, #28]
 8013f72:	440a      	add	r2, r1
 8013f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	015a      	lsls	r2, r3, #5
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	4413      	add	r3, r2
 8013f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	69ba      	ldr	r2, [r7, #24]
 8013f8e:	0151      	lsls	r1, r2, #5
 8013f90:	69fa      	ldr	r2, [r7, #28]
 8013f92:	440a      	add	r2, r1
 8013f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013f9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f9e:	2300      	movs	r3, #0
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3720      	adds	r7, #32
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd80      	pop	{r7, pc}
 8013fa8:	fff80000 	.word	0xfff80000
 8013fac:	e007ffff 	.word	0xe007ffff
 8013fb0:	1ff80000 	.word	0x1ff80000

08013fb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fb4:	b480      	push	{r7}
 8013fb6:	b087      	sub	sp, #28
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	6078      	str	r0, [r7, #4]
 8013fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	785b      	ldrb	r3, [r3, #1]
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	d14a      	bne.n	8014068 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	781b      	ldrb	r3, [r3, #0]
 8013fd6:	015a      	lsls	r2, r3, #5
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	4413      	add	r3, r2
 8013fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fea:	f040 8086 	bne.w	80140fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	015a      	lsls	r2, r3, #5
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	4413      	add	r3, r2
 8013ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	683a      	ldr	r2, [r7, #0]
 8014000:	7812      	ldrb	r2, [r2, #0]
 8014002:	0151      	lsls	r1, r2, #5
 8014004:	693a      	ldr	r2, [r7, #16]
 8014006:	440a      	add	r2, r1
 8014008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801400c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014010:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	781b      	ldrb	r3, [r3, #0]
 8014016:	015a      	lsls	r2, r3, #5
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	4413      	add	r3, r2
 801401c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	7812      	ldrb	r2, [r2, #0]
 8014026:	0151      	lsls	r1, r2, #5
 8014028:	693a      	ldr	r2, [r7, #16]
 801402a:	440a      	add	r2, r1
 801402c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014030:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014034:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	3301      	adds	r3, #1
 801403a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014042:	4293      	cmp	r3, r2
 8014044:	d902      	bls.n	801404c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014046:	2301      	movs	r3, #1
 8014048:	75fb      	strb	r3, [r7, #23]
          break;
 801404a:	e056      	b.n	80140fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801404c:	683b      	ldr	r3, [r7, #0]
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	015a      	lsls	r2, r3, #5
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	4413      	add	r3, r2
 8014056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014064:	d0e7      	beq.n	8014036 <USB_EPStopXfer+0x82>
 8014066:	e048      	b.n	80140fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	015a      	lsls	r2, r3, #5
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	4413      	add	r3, r2
 8014072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801407c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014080:	d13b      	bne.n	80140fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	781b      	ldrb	r3, [r3, #0]
 8014086:	015a      	lsls	r2, r3, #5
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	4413      	add	r3, r2
 801408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	683a      	ldr	r2, [r7, #0]
 8014094:	7812      	ldrb	r2, [r2, #0]
 8014096:	0151      	lsls	r1, r2, #5
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	440a      	add	r2, r1
 801409c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80140a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	015a      	lsls	r2, r3, #5
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	4413      	add	r3, r2
 80140b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	683a      	ldr	r2, [r7, #0]
 80140b8:	7812      	ldrb	r2, [r2, #0]
 80140ba:	0151      	lsls	r1, r2, #5
 80140bc:	693a      	ldr	r2, [r7, #16]
 80140be:	440a      	add	r2, r1
 80140c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	3301      	adds	r3, #1
 80140ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80140d6:	4293      	cmp	r3, r2
 80140d8:	d902      	bls.n	80140e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80140da:	2301      	movs	r3, #1
 80140dc:	75fb      	strb	r3, [r7, #23]
          break;
 80140de:	e00c      	b.n	80140fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	015a      	lsls	r2, r3, #5
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	4413      	add	r3, r2
 80140ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140f8:	d0e7      	beq.n	80140ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80140fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	371c      	adds	r7, #28
 8014100:	46bd      	mov	sp, r7
 8014102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014106:	4770      	bx	lr

08014108 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8014108:	b480      	push	{r7}
 801410a:	b089      	sub	sp, #36	; 0x24
 801410c:	af00      	add	r7, sp, #0
 801410e:	60f8      	str	r0, [r7, #12]
 8014110:	60b9      	str	r1, [r7, #8]
 8014112:	4611      	mov	r1, r2
 8014114:	461a      	mov	r2, r3
 8014116:	460b      	mov	r3, r1
 8014118:	71fb      	strb	r3, [r7, #7]
 801411a:	4613      	mov	r3, r2
 801411c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014126:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801412a:	2b00      	cmp	r3, #0
 801412c:	d123      	bne.n	8014176 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801412e:	88bb      	ldrh	r3, [r7, #4]
 8014130:	3303      	adds	r3, #3
 8014132:	089b      	lsrs	r3, r3, #2
 8014134:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014136:	2300      	movs	r3, #0
 8014138:	61bb      	str	r3, [r7, #24]
 801413a:	e018      	b.n	801416e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801413c:	79fb      	ldrb	r3, [r7, #7]
 801413e:	031a      	lsls	r2, r3, #12
 8014140:	697b      	ldr	r3, [r7, #20]
 8014142:	4413      	add	r3, r2
 8014144:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014148:	461a      	mov	r2, r3
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	3301      	adds	r3, #1
 8014154:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	3301      	adds	r3, #1
 801415a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801415c:	69fb      	ldr	r3, [r7, #28]
 801415e:	3301      	adds	r3, #1
 8014160:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	3301      	adds	r3, #1
 8014166:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	3301      	adds	r3, #1
 801416c:	61bb      	str	r3, [r7, #24]
 801416e:	69ba      	ldr	r2, [r7, #24]
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	429a      	cmp	r2, r3
 8014174:	d3e2      	bcc.n	801413c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014176:	2300      	movs	r3, #0
}
 8014178:	4618      	mov	r0, r3
 801417a:	3724      	adds	r7, #36	; 0x24
 801417c:	46bd      	mov	sp, r7
 801417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014182:	4770      	bx	lr

08014184 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014184:	b480      	push	{r7}
 8014186:	b08b      	sub	sp, #44	; 0x2c
 8014188:	af00      	add	r7, sp, #0
 801418a:	60f8      	str	r0, [r7, #12]
 801418c:	60b9      	str	r1, [r7, #8]
 801418e:	4613      	mov	r3, r2
 8014190:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014196:	68bb      	ldr	r3, [r7, #8]
 8014198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801419a:	88fb      	ldrh	r3, [r7, #6]
 801419c:	089b      	lsrs	r3, r3, #2
 801419e:	b29b      	uxth	r3, r3
 80141a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80141a2:	88fb      	ldrh	r3, [r7, #6]
 80141a4:	f003 0303 	and.w	r3, r3, #3
 80141a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80141aa:	2300      	movs	r3, #0
 80141ac:	623b      	str	r3, [r7, #32]
 80141ae:	e014      	b.n	80141da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80141b0:	69bb      	ldr	r3, [r7, #24]
 80141b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141b6:	681a      	ldr	r2, [r3, #0]
 80141b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80141bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141be:	3301      	adds	r3, #1
 80141c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c4:	3301      	adds	r3, #1
 80141c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ca:	3301      	adds	r3, #1
 80141cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d0:	3301      	adds	r3, #1
 80141d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80141d4:	6a3b      	ldr	r3, [r7, #32]
 80141d6:	3301      	adds	r3, #1
 80141d8:	623b      	str	r3, [r7, #32]
 80141da:	6a3a      	ldr	r2, [r7, #32]
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d3e6      	bcc.n	80141b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80141e2:	8bfb      	ldrh	r3, [r7, #30]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d01e      	beq.n	8014226 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80141e8:	2300      	movs	r3, #0
 80141ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141f2:	461a      	mov	r2, r3
 80141f4:	f107 0310 	add.w	r3, r7, #16
 80141f8:	6812      	ldr	r2, [r2, #0]
 80141fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80141fc:	693a      	ldr	r2, [r7, #16]
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	b2db      	uxtb	r3, r3
 8014202:	00db      	lsls	r3, r3, #3
 8014204:	fa22 f303 	lsr.w	r3, r2, r3
 8014208:	b2da      	uxtb	r2, r3
 801420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420c:	701a      	strb	r2, [r3, #0]
      i++;
 801420e:	6a3b      	ldr	r3, [r7, #32]
 8014210:	3301      	adds	r3, #1
 8014212:	623b      	str	r3, [r7, #32]
      pDest++;
 8014214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014216:	3301      	adds	r3, #1
 8014218:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801421a:	8bfb      	ldrh	r3, [r7, #30]
 801421c:	3b01      	subs	r3, #1
 801421e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014220:	8bfb      	ldrh	r3, [r7, #30]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d1ea      	bne.n	80141fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014228:	4618      	mov	r0, r3
 801422a:	372c      	adds	r7, #44	; 0x2c
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr

08014234 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014234:	b480      	push	{r7}
 8014236:	b085      	sub	sp, #20
 8014238:	af00      	add	r7, sp, #0
 801423a:	6078      	str	r0, [r7, #4]
 801423c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014242:	683b      	ldr	r3, [r7, #0]
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014248:	683b      	ldr	r3, [r7, #0]
 801424a:	785b      	ldrb	r3, [r3, #1]
 801424c:	2b01      	cmp	r3, #1
 801424e:	d12c      	bne.n	80142aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	015a      	lsls	r2, r3, #5
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	4413      	add	r3, r2
 8014258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	db12      	blt.n	8014288 <USB_EPSetStall+0x54>
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00f      	beq.n	8014288 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	015a      	lsls	r2, r3, #5
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	4413      	add	r3, r2
 8014270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	68ba      	ldr	r2, [r7, #8]
 8014278:	0151      	lsls	r1, r2, #5
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	440a      	add	r2, r1
 801427e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014282:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014286:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	015a      	lsls	r2, r3, #5
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	4413      	add	r3, r2
 8014290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	68ba      	ldr	r2, [r7, #8]
 8014298:	0151      	lsls	r1, r2, #5
 801429a:	68fa      	ldr	r2, [r7, #12]
 801429c:	440a      	add	r2, r1
 801429e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80142a6:	6013      	str	r3, [r2, #0]
 80142a8:	e02b      	b.n	8014302 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	015a      	lsls	r2, r3, #5
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	4413      	add	r3, r2
 80142b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	db12      	blt.n	80142e2 <USB_EPSetStall+0xae>
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d00f      	beq.n	80142e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	015a      	lsls	r2, r3, #5
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	4413      	add	r3, r2
 80142ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	68ba      	ldr	r2, [r7, #8]
 80142d2:	0151      	lsls	r1, r2, #5
 80142d4:	68fa      	ldr	r2, [r7, #12]
 80142d6:	440a      	add	r2, r1
 80142d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80142e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	015a      	lsls	r2, r3, #5
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	4413      	add	r3, r2
 80142ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	68ba      	ldr	r2, [r7, #8]
 80142f2:	0151      	lsls	r1, r2, #5
 80142f4:	68fa      	ldr	r2, [r7, #12]
 80142f6:	440a      	add	r2, r1
 80142f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014300:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014302:	2300      	movs	r3, #0
}
 8014304:	4618      	mov	r0, r3
 8014306:	3714      	adds	r7, #20
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr

08014310 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014310:	b480      	push	{r7}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	781b      	ldrb	r3, [r3, #0]
 8014322:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014324:	683b      	ldr	r3, [r7, #0]
 8014326:	785b      	ldrb	r3, [r3, #1]
 8014328:	2b01      	cmp	r3, #1
 801432a:	d128      	bne.n	801437e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	015a      	lsls	r2, r3, #5
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	4413      	add	r3, r2
 8014334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	68ba      	ldr	r2, [r7, #8]
 801433c:	0151      	lsls	r1, r2, #5
 801433e:	68fa      	ldr	r2, [r7, #12]
 8014340:	440a      	add	r2, r1
 8014342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801434a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	791b      	ldrb	r3, [r3, #4]
 8014350:	2b03      	cmp	r3, #3
 8014352:	d003      	beq.n	801435c <USB_EPClearStall+0x4c>
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	791b      	ldrb	r3, [r3, #4]
 8014358:	2b02      	cmp	r3, #2
 801435a:	d138      	bne.n	80143ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801435c:	68bb      	ldr	r3, [r7, #8]
 801435e:	015a      	lsls	r2, r3, #5
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	4413      	add	r3, r2
 8014364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	68ba      	ldr	r2, [r7, #8]
 801436c:	0151      	lsls	r1, r2, #5
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	440a      	add	r2, r1
 8014372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801437a:	6013      	str	r3, [r2, #0]
 801437c:	e027      	b.n	80143ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	015a      	lsls	r2, r3, #5
 8014382:	68fb      	ldr	r3, [r7, #12]
 8014384:	4413      	add	r3, r2
 8014386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	0151      	lsls	r1, r2, #5
 8014390:	68fa      	ldr	r2, [r7, #12]
 8014392:	440a      	add	r2, r1
 8014394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801439c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801439e:	683b      	ldr	r3, [r7, #0]
 80143a0:	791b      	ldrb	r3, [r3, #4]
 80143a2:	2b03      	cmp	r3, #3
 80143a4:	d003      	beq.n	80143ae <USB_EPClearStall+0x9e>
 80143a6:	683b      	ldr	r3, [r7, #0]
 80143a8:	791b      	ldrb	r3, [r3, #4]
 80143aa:	2b02      	cmp	r3, #2
 80143ac:	d10f      	bne.n	80143ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	015a      	lsls	r2, r3, #5
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	4413      	add	r3, r2
 80143b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	68ba      	ldr	r2, [r7, #8]
 80143be:	0151      	lsls	r1, r2, #5
 80143c0:	68fa      	ldr	r2, [r7, #12]
 80143c2:	440a      	add	r2, r1
 80143c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80143ce:	2300      	movs	r3, #0
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3714      	adds	r7, #20
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr

080143dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80143dc:	b480      	push	{r7}
 80143de:	b085      	sub	sp, #20
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	6078      	str	r0, [r7, #4]
 80143e4:	460b      	mov	r3, r1
 80143e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	68fa      	ldr	r2, [r7, #12]
 80143f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80143fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	78fb      	ldrb	r3, [r7, #3]
 801440a:	011b      	lsls	r3, r3, #4
 801440c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014410:	68f9      	ldr	r1, [r7, #12]
 8014412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014416:	4313      	orrs	r3, r2
 8014418:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801441a:	2300      	movs	r3, #0
}
 801441c:	4618      	mov	r0, r3
 801441e:	3714      	adds	r7, #20
 8014420:	46bd      	mov	sp, r7
 8014422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014426:	4770      	bx	lr

08014428 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	68fa      	ldr	r2, [r7, #12]
 801443e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014442:	f023 0303 	bic.w	r3, r3, #3
 8014446:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014448:	68fb      	ldr	r3, [r7, #12]
 801444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014456:	f023 0302 	bic.w	r3, r3, #2
 801445a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801445c:	2300      	movs	r3, #0
}
 801445e:	4618      	mov	r0, r3
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014468:	4770      	bx	lr

0801446a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801446a:	b480      	push	{r7}
 801446c:	b085      	sub	sp, #20
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014484:	f023 0303 	bic.w	r3, r3, #3
 8014488:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014490:	685b      	ldr	r3, [r3, #4]
 8014492:	68fa      	ldr	r2, [r7, #12]
 8014494:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014498:	f043 0302 	orr.w	r3, r3, #2
 801449c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801449e:	2300      	movs	r3, #0
}
 80144a0:	4618      	mov	r0, r3
 80144a2:	3714      	adds	r7, #20
 80144a4:	46bd      	mov	sp, r7
 80144a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144aa:	4770      	bx	lr

080144ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80144ac:	b480      	push	{r7}
 80144ae:	b085      	sub	sp, #20
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	695b      	ldr	r3, [r3, #20]
 80144b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	699b      	ldr	r3, [r3, #24]
 80144be:	68fa      	ldr	r2, [r7, #12]
 80144c0:	4013      	ands	r3, r2
 80144c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80144c4:	68fb      	ldr	r3, [r7, #12]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3714      	adds	r7, #20
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr

080144d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80144d2:	b480      	push	{r7}
 80144d4:	b085      	sub	sp, #20
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144e4:	699b      	ldr	r3, [r3, #24]
 80144e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144ee:	69db      	ldr	r3, [r3, #28]
 80144f0:	68ba      	ldr	r2, [r7, #8]
 80144f2:	4013      	ands	r3, r2
 80144f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	0c1b      	lsrs	r3, r3, #16
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3714      	adds	r7, #20
 80144fe:	46bd      	mov	sp, r7
 8014500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014504:	4770      	bx	lr

08014506 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014506:	b480      	push	{r7}
 8014508:	b085      	sub	sp, #20
 801450a:	af00      	add	r7, sp, #0
 801450c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014518:	699b      	ldr	r3, [r3, #24]
 801451a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014522:	69db      	ldr	r3, [r3, #28]
 8014524:	68ba      	ldr	r2, [r7, #8]
 8014526:	4013      	ands	r3, r2
 8014528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	b29b      	uxth	r3, r3
}
 801452e:	4618      	mov	r0, r3
 8014530:	3714      	adds	r7, #20
 8014532:	46bd      	mov	sp, r7
 8014534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014538:	4770      	bx	lr

0801453a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801453a:	b480      	push	{r7}
 801453c:	b085      	sub	sp, #20
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
 8014542:	460b      	mov	r3, r1
 8014544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801454a:	78fb      	ldrb	r3, [r7, #3]
 801454c:	015a      	lsls	r2, r3, #5
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	4413      	add	r3, r2
 8014552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014560:	695b      	ldr	r3, [r3, #20]
 8014562:	68ba      	ldr	r2, [r7, #8]
 8014564:	4013      	ands	r3, r2
 8014566:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014568:	68bb      	ldr	r3, [r7, #8]
}
 801456a:	4618      	mov	r0, r3
 801456c:	3714      	adds	r7, #20
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr

08014576 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014576:	b480      	push	{r7}
 8014578:	b087      	sub	sp, #28
 801457a:	af00      	add	r7, sp, #0
 801457c:	6078      	str	r0, [r7, #4]
 801457e:	460b      	mov	r3, r1
 8014580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801458c:	691b      	ldr	r3, [r3, #16]
 801458e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014598:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801459a:	78fb      	ldrb	r3, [r7, #3]
 801459c:	f003 030f 	and.w	r3, r3, #15
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	fa22 f303 	lsr.w	r3, r2, r3
 80145a6:	01db      	lsls	r3, r3, #7
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	693a      	ldr	r2, [r7, #16]
 80145ac:	4313      	orrs	r3, r2
 80145ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80145b0:	78fb      	ldrb	r3, [r7, #3]
 80145b2:	015a      	lsls	r2, r3, #5
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	4413      	add	r3, r2
 80145b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145bc:	689b      	ldr	r3, [r3, #8]
 80145be:	693a      	ldr	r2, [r7, #16]
 80145c0:	4013      	ands	r3, r2
 80145c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80145c4:	68bb      	ldr	r3, [r7, #8]
}
 80145c6:	4618      	mov	r0, r3
 80145c8:	371c      	adds	r7, #28
 80145ca:	46bd      	mov	sp, r7
 80145cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d0:	4770      	bx	lr

080145d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80145d2:	b480      	push	{r7}
 80145d4:	b083      	sub	sp, #12
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	695b      	ldr	r3, [r3, #20]
 80145de:	f003 0301 	and.w	r3, r3, #1
}
 80145e2:	4618      	mov	r0, r3
 80145e4:	370c      	adds	r7, #12
 80145e6:	46bd      	mov	sp, r7
 80145e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ec:	4770      	bx	lr
	...

080145f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80145f0:	b480      	push	{r7}
 80145f2:	b085      	sub	sp, #20
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801460a:	4619      	mov	r1, r3
 801460c:	4b09      	ldr	r3, [pc, #36]	; (8014634 <USB_ActivateSetup+0x44>)
 801460e:	4013      	ands	r3, r2
 8014610:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014618:	685b      	ldr	r3, [r3, #4]
 801461a:	68fa      	ldr	r2, [r7, #12]
 801461c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014624:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014626:	2300      	movs	r3, #0
}
 8014628:	4618      	mov	r0, r3
 801462a:	3714      	adds	r7, #20
 801462c:	46bd      	mov	sp, r7
 801462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014632:	4770      	bx	lr
 8014634:	fffff800 	.word	0xfffff800

08014638 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014638:	b480      	push	{r7}
 801463a:	b087      	sub	sp, #28
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	460b      	mov	r3, r1
 8014642:	607a      	str	r2, [r7, #4]
 8014644:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	333c      	adds	r3, #60	; 0x3c
 801464e:	3304      	adds	r3, #4
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	4a26      	ldr	r2, [pc, #152]	; (80146f0 <USB_EP0_OutStart+0xb8>)
 8014658:	4293      	cmp	r3, r2
 801465a:	d90a      	bls.n	8014672 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801465c:	697b      	ldr	r3, [r7, #20]
 801465e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801466c:	d101      	bne.n	8014672 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801466e:	2300      	movs	r3, #0
 8014670:	e037      	b.n	80146e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014678:	461a      	mov	r2, r3
 801467a:	2300      	movs	r3, #0
 801467c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801467e:	697b      	ldr	r3, [r7, #20]
 8014680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014684:	691b      	ldr	r3, [r3, #16]
 8014686:	697a      	ldr	r2, [r7, #20]
 8014688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801468c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014690:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014692:	697b      	ldr	r3, [r7, #20]
 8014694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014698:	691b      	ldr	r3, [r3, #16]
 801469a:	697a      	ldr	r2, [r7, #20]
 801469c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146a0:	f043 0318 	orr.w	r3, r3, #24
 80146a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80146a6:	697b      	ldr	r3, [r7, #20]
 80146a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146ac:	691b      	ldr	r3, [r3, #16]
 80146ae:	697a      	ldr	r2, [r7, #20]
 80146b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80146b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80146ba:	7afb      	ldrb	r3, [r7, #11]
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d10f      	bne.n	80146e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c6:	461a      	mov	r2, r3
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80146cc:	697b      	ldr	r3, [r7, #20]
 80146ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	697a      	ldr	r2, [r7, #20]
 80146d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80146de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80146e0:	2300      	movs	r3, #0
}
 80146e2:	4618      	mov	r0, r3
 80146e4:	371c      	adds	r7, #28
 80146e6:	46bd      	mov	sp, r7
 80146e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ec:	4770      	bx	lr
 80146ee:	bf00      	nop
 80146f0:	4f54300a 	.word	0x4f54300a

080146f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80146f4:	b480      	push	{r7}
 80146f6:	b085      	sub	sp, #20
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146fc:	2300      	movs	r3, #0
 80146fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	3301      	adds	r3, #1
 8014704:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	4a13      	ldr	r2, [pc, #76]	; (8014758 <USB_CoreReset+0x64>)
 801470a:	4293      	cmp	r3, r2
 801470c:	d901      	bls.n	8014712 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801470e:	2303      	movs	r3, #3
 8014710:	e01b      	b.n	801474a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	691b      	ldr	r3, [r3, #16]
 8014716:	2b00      	cmp	r3, #0
 8014718:	daf2      	bge.n	8014700 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801471a:	2300      	movs	r3, #0
 801471c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	691b      	ldr	r3, [r3, #16]
 8014722:	f043 0201 	orr.w	r2, r3, #1
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801472a:	68fb      	ldr	r3, [r7, #12]
 801472c:	3301      	adds	r3, #1
 801472e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014730:	68fb      	ldr	r3, [r7, #12]
 8014732:	4a09      	ldr	r2, [pc, #36]	; (8014758 <USB_CoreReset+0x64>)
 8014734:	4293      	cmp	r3, r2
 8014736:	d901      	bls.n	801473c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014738:	2303      	movs	r3, #3
 801473a:	e006      	b.n	801474a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	691b      	ldr	r3, [r3, #16]
 8014740:	f003 0301 	and.w	r3, r3, #1
 8014744:	2b01      	cmp	r3, #1
 8014746:	d0f0      	beq.n	801472a <USB_CoreReset+0x36>

  return HAL_OK;
 8014748:	2300      	movs	r3, #0
}
 801474a:	4618      	mov	r0, r3
 801474c:	3714      	adds	r7, #20
 801474e:	46bd      	mov	sp, r7
 8014750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014754:	4770      	bx	lr
 8014756:	bf00      	nop
 8014758:	00030d40 	.word	0x00030d40

0801475c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014760:	4904      	ldr	r1, [pc, #16]	; (8014774 <MX_FATFS_Init+0x18>)
 8014762:	4805      	ldr	r0, [pc, #20]	; (8014778 <MX_FATFS_Init+0x1c>)
 8014764:	f002 fa80 	bl	8016c68 <FATFS_LinkDriver>
 8014768:	4603      	mov	r3, r0
 801476a:	461a      	mov	r2, r3
 801476c:	4b03      	ldr	r3, [pc, #12]	; (801477c <MX_FATFS_Init+0x20>)
 801476e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014770:	bf00      	nop
 8014772:	bd80      	pop	{r7, pc}
 8014774:	240016f8 	.word	0x240016f8
 8014778:	08018c6c 	.word	0x08018c6c
 801477c:	240016f4 	.word	0x240016f4

08014780 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014786:	2300      	movs	r3, #0
 8014788:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801478a:	f000 f885 	bl	8014898 <BSP_SD_IsDetected>
 801478e:	4603      	mov	r3, r0
 8014790:	2b01      	cmp	r3, #1
 8014792:	d001      	beq.n	8014798 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014794:	2302      	movs	r3, #2
 8014796:	e012      	b.n	80147be <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014798:	480b      	ldr	r0, [pc, #44]	; (80147c8 <BSP_SD_Init+0x48>)
 801479a:	f7f8 ff41 	bl	800d620 <HAL_SD_Init>
 801479e:	4603      	mov	r3, r0
 80147a0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80147a2:	79fb      	ldrb	r3, [r7, #7]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d109      	bne.n	80147bc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80147a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80147ac:	4806      	ldr	r0, [pc, #24]	; (80147c8 <BSP_SD_Init+0x48>)
 80147ae:	f7f9 fdf7 	bl	800e3a0 <HAL_SD_ConfigWideBusOperation>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d001      	beq.n	80147bc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80147b8:	2301      	movs	r3, #1
 80147ba:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80147bc:	79fb      	ldrb	r3, [r7, #7]
}
 80147be:	4618      	mov	r0, r3
 80147c0:	3708      	adds	r7, #8
 80147c2:	46bd      	mov	sp, r7
 80147c4:	bd80      	pop	{r7, pc}
 80147c6:	bf00      	nop
 80147c8:	24000fc4 	.word	0x24000fc4

080147cc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b086      	sub	sp, #24
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80147d8:	2300      	movs	r3, #0
 80147da:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	68f9      	ldr	r1, [r7, #12]
 80147e2:	4806      	ldr	r0, [pc, #24]	; (80147fc <BSP_SD_ReadBlocks_DMA+0x30>)
 80147e4:	f7f9 f83c 	bl	800d860 <HAL_SD_ReadBlocks_DMA>
 80147e8:	4603      	mov	r3, r0
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d001      	beq.n	80147f2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80147ee:	2301      	movs	r3, #1
 80147f0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80147f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80147f4:	4618      	mov	r0, r3
 80147f6:	3718      	adds	r7, #24
 80147f8:	46bd      	mov	sp, r7
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	24000fc4 	.word	0x24000fc4

08014800 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014800:	b580      	push	{r7, lr}
 8014802:	b086      	sub	sp, #24
 8014804:	af00      	add	r7, sp, #0
 8014806:	60f8      	str	r0, [r7, #12]
 8014808:	60b9      	str	r1, [r7, #8]
 801480a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801480c:	2300      	movs	r3, #0
 801480e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	68ba      	ldr	r2, [r7, #8]
 8014814:	68f9      	ldr	r1, [r7, #12]
 8014816:	4806      	ldr	r0, [pc, #24]	; (8014830 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014818:	f7f9 f8ca 	bl	800d9b0 <HAL_SD_WriteBlocks_DMA>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d001      	beq.n	8014826 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014822:	2301      	movs	r3, #1
 8014824:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014826:	7dfb      	ldrb	r3, [r7, #23]
}
 8014828:	4618      	mov	r0, r3
 801482a:	3718      	adds	r7, #24
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	24000fc4 	.word	0x24000fc4

08014834 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014838:	4805      	ldr	r0, [pc, #20]	; (8014850 <BSP_SD_GetCardState+0x1c>)
 801483a:	f7f9 fec3 	bl	800e5c4 <HAL_SD_GetCardState>
 801483e:	4603      	mov	r3, r0
 8014840:	2b04      	cmp	r3, #4
 8014842:	bf14      	ite	ne
 8014844:	2301      	movne	r3, #1
 8014846:	2300      	moveq	r3, #0
 8014848:	b2db      	uxtb	r3, r3
}
 801484a:	4618      	mov	r0, r3
 801484c:	bd80      	pop	{r7, pc}
 801484e:	bf00      	nop
 8014850:	24000fc4 	.word	0x24000fc4

08014854 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801485c:	6879      	ldr	r1, [r7, #4]
 801485e:	4803      	ldr	r0, [pc, #12]	; (801486c <BSP_SD_GetCardInfo+0x18>)
 8014860:	f7f9 fd72 	bl	800e348 <HAL_SD_GetCardInfo>
}
 8014864:	bf00      	nop
 8014866:	3708      	adds	r7, #8
 8014868:	46bd      	mov	sp, r7
 801486a:	bd80      	pop	{r7, pc}
 801486c:	24000fc4 	.word	0x24000fc4

08014870 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b082      	sub	sp, #8
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014878:	f000 f9a0 	bl	8014bbc <BSP_SD_WriteCpltCallback>
}
 801487c:	bf00      	nop
 801487e:	3708      	adds	r7, #8
 8014880:	46bd      	mov	sp, r7
 8014882:	bd80      	pop	{r7, pc}

08014884 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801488c:	f000 f9a2 	bl	8014bd4 <BSP_SD_ReadCpltCallback>
}
 8014890:	bf00      	nop
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}

08014898 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b082      	sub	sp, #8
 801489c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801489e:	2301      	movs	r3, #1
 80148a0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80148a2:	f000 f80b 	bl	80148bc <BSP_PlatformIsDetected>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d101      	bne.n	80148b0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80148ac:	2300      	movs	r3, #0
 80148ae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	b2db      	uxtb	r3, r3
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}

080148bc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80148bc:	b580      	push	{r7, lr}
 80148be:	b082      	sub	sp, #8
 80148c0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80148c2:	2301      	movs	r3, #1
 80148c4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80148c6:	2104      	movs	r1, #4
 80148c8:	4806      	ldr	r0, [pc, #24]	; (80148e4 <BSP_PlatformIsDetected+0x28>)
 80148ca:	f7f3 fccf 	bl	800826c <HAL_GPIO_ReadPin>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80148d4:	2300      	movs	r3, #0
 80148d6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80148d8:	79fb      	ldrb	r3, [r7, #7]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3708      	adds	r7, #8
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}
 80148e2:	bf00      	nop
 80148e4:	58020400 	.word	0x58020400

080148e8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b084      	sub	sp, #16
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80148f0:	f7ef fa16 	bl	8003d20 <HAL_GetTick>
 80148f4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80148f6:	e006      	b.n	8014906 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80148f8:	f7ff ff9c 	bl	8014834 <BSP_SD_GetCardState>
 80148fc:	4603      	mov	r3, r0
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d101      	bne.n	8014906 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014902:	2300      	movs	r3, #0
 8014904:	e009      	b.n	801491a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014906:	f7ef fa0b 	bl	8003d20 <HAL_GetTick>
 801490a:	4602      	mov	r2, r0
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	1ad3      	subs	r3, r2, r3
 8014910:	687a      	ldr	r2, [r7, #4]
 8014912:	429a      	cmp	r2, r3
 8014914:	d8f0      	bhi.n	80148f8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014916:	f04f 33ff 	mov.w	r3, #4294967295
}
 801491a:	4618      	mov	r0, r3
 801491c:	3710      	adds	r7, #16
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
	...

08014924 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b082      	sub	sp, #8
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801492e:	4b0b      	ldr	r3, [pc, #44]	; (801495c <SD_CheckStatus+0x38>)
 8014930:	2201      	movs	r2, #1
 8014932:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014934:	f7ff ff7e 	bl	8014834 <BSP_SD_GetCardState>
 8014938:	4603      	mov	r3, r0
 801493a:	2b00      	cmp	r3, #0
 801493c:	d107      	bne.n	801494e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801493e:	4b07      	ldr	r3, [pc, #28]	; (801495c <SD_CheckStatus+0x38>)
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	b2db      	uxtb	r3, r3
 8014944:	f023 0301 	bic.w	r3, r3, #1
 8014948:	b2da      	uxtb	r2, r3
 801494a:	4b04      	ldr	r3, [pc, #16]	; (801495c <SD_CheckStatus+0x38>)
 801494c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801494e:	4b03      	ldr	r3, [pc, #12]	; (801495c <SD_CheckStatus+0x38>)
 8014950:	781b      	ldrb	r3, [r3, #0]
 8014952:	b2db      	uxtb	r3, r3
}
 8014954:	4618      	mov	r0, r3
 8014956:	3708      	adds	r7, #8
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	2400000d 	.word	0x2400000d

08014960 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014960:	b580      	push	{r7, lr}
 8014962:	b082      	sub	sp, #8
 8014964:	af00      	add	r7, sp, #0
 8014966:	4603      	mov	r3, r0
 8014968:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801496a:	f7ff ff09 	bl	8014780 <BSP_SD_Init>
 801496e:	4603      	mov	r3, r0
 8014970:	2b00      	cmp	r3, #0
 8014972:	d107      	bne.n	8014984 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014974:	79fb      	ldrb	r3, [r7, #7]
 8014976:	4618      	mov	r0, r3
 8014978:	f7ff ffd4 	bl	8014924 <SD_CheckStatus>
 801497c:	4603      	mov	r3, r0
 801497e:	461a      	mov	r2, r3
 8014980:	4b04      	ldr	r3, [pc, #16]	; (8014994 <SD_initialize+0x34>)
 8014982:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014984:	4b03      	ldr	r3, [pc, #12]	; (8014994 <SD_initialize+0x34>)
 8014986:	781b      	ldrb	r3, [r3, #0]
 8014988:	b2db      	uxtb	r3, r3
}
 801498a:	4618      	mov	r0, r3
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}
 8014992:	bf00      	nop
 8014994:	2400000d 	.word	0x2400000d

08014998 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	4603      	mov	r3, r0
 80149a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80149a2:	79fb      	ldrb	r3, [r7, #7]
 80149a4:	4618      	mov	r0, r3
 80149a6:	f7ff ffbd 	bl	8014924 <SD_CheckStatus>
 80149aa:	4603      	mov	r3, r0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3708      	adds	r7, #8
 80149b0:	46bd      	mov	sp, r7
 80149b2:	bd80      	pop	{r7, pc}

080149b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b086      	sub	sp, #24
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	60b9      	str	r1, [r7, #8]
 80149bc:	607a      	str	r2, [r7, #4]
 80149be:	603b      	str	r3, [r7, #0]
 80149c0:	4603      	mov	r3, r0
 80149c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80149c4:	2301      	movs	r3, #1
 80149c6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80149c8:	f247 5030 	movw	r0, #30000	; 0x7530
 80149cc:	f7ff ff8c 	bl	80148e8 <SD_CheckStatusWithTimeout>
 80149d0:	4603      	mov	r3, r0
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	da01      	bge.n	80149da <SD_read+0x26>
  {
    return res;
 80149d6:	7dfb      	ldrb	r3, [r7, #23]
 80149d8:	e03b      	b.n	8014a52 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80149da:	683a      	ldr	r2, [r7, #0]
 80149dc:	6879      	ldr	r1, [r7, #4]
 80149de:	68b8      	ldr	r0, [r7, #8]
 80149e0:	f7ff fef4 	bl	80147cc <BSP_SD_ReadBlocks_DMA>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d132      	bne.n	8014a50 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80149ea:	4b1c      	ldr	r3, [pc, #112]	; (8014a5c <SD_read+0xa8>)
 80149ec:	2200      	movs	r2, #0
 80149ee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80149f0:	f7ef f996 	bl	8003d20 <HAL_GetTick>
 80149f4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80149f6:	bf00      	nop
 80149f8:	4b18      	ldr	r3, [pc, #96]	; (8014a5c <SD_read+0xa8>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d108      	bne.n	8014a12 <SD_read+0x5e>
 8014a00:	f7ef f98e 	bl	8003d20 <HAL_GetTick>
 8014a04:	4602      	mov	r2, r0
 8014a06:	693b      	ldr	r3, [r7, #16]
 8014a08:	1ad3      	subs	r3, r2, r3
 8014a0a:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a0e:	4293      	cmp	r3, r2
 8014a10:	d9f2      	bls.n	80149f8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014a12:	4b12      	ldr	r3, [pc, #72]	; (8014a5c <SD_read+0xa8>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d102      	bne.n	8014a20 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	75fb      	strb	r3, [r7, #23]
 8014a1e:	e017      	b.n	8014a50 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014a20:	4b0e      	ldr	r3, [pc, #56]	; (8014a5c <SD_read+0xa8>)
 8014a22:	2200      	movs	r2, #0
 8014a24:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014a26:	f7ef f97b 	bl	8003d20 <HAL_GetTick>
 8014a2a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a2c:	e007      	b.n	8014a3e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a2e:	f7ff ff01 	bl	8014834 <BSP_SD_GetCardState>
 8014a32:	4603      	mov	r3, r0
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d102      	bne.n	8014a3e <SD_read+0x8a>
          {
            res = RES_OK;
 8014a38:	2300      	movs	r3, #0
 8014a3a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014a3c:	e008      	b.n	8014a50 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a3e:	f7ef f96f 	bl	8003d20 <HAL_GetTick>
 8014a42:	4602      	mov	r2, r0
 8014a44:	693b      	ldr	r3, [r7, #16]
 8014a46:	1ad3      	subs	r3, r2, r3
 8014a48:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a4c:	4293      	cmp	r3, r2
 8014a4e:	d9ee      	bls.n	8014a2e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3718      	adds	r7, #24
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	24001700 	.word	0x24001700

08014a60 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b086      	sub	sp, #24
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	60b9      	str	r1, [r7, #8]
 8014a68:	607a      	str	r2, [r7, #4]
 8014a6a:	603b      	str	r3, [r7, #0]
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a70:	2301      	movs	r3, #1
 8014a72:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014a74:	4b24      	ldr	r3, [pc, #144]	; (8014b08 <SD_write+0xa8>)
 8014a76:	2200      	movs	r2, #0
 8014a78:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014a7a:	f247 5030 	movw	r0, #30000	; 0x7530
 8014a7e:	f7ff ff33 	bl	80148e8 <SD_CheckStatusWithTimeout>
 8014a82:	4603      	mov	r3, r0
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	da01      	bge.n	8014a8c <SD_write+0x2c>
  {
    return res;
 8014a88:	7dfb      	ldrb	r3, [r7, #23]
 8014a8a:	e038      	b.n	8014afe <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014a8c:	683a      	ldr	r2, [r7, #0]
 8014a8e:	6879      	ldr	r1, [r7, #4]
 8014a90:	68b8      	ldr	r0, [r7, #8]
 8014a92:	f7ff feb5 	bl	8014800 <BSP_SD_WriteBlocks_DMA>
 8014a96:	4603      	mov	r3, r0
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d12f      	bne.n	8014afc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014a9c:	f7ef f940 	bl	8003d20 <HAL_GetTick>
 8014aa0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014aa2:	bf00      	nop
 8014aa4:	4b18      	ldr	r3, [pc, #96]	; (8014b08 <SD_write+0xa8>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d108      	bne.n	8014abe <SD_write+0x5e>
 8014aac:	f7ef f938 	bl	8003d20 <HAL_GetTick>
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	f247 522f 	movw	r2, #29999	; 0x752f
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d9f2      	bls.n	8014aa4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014abe:	4b12      	ldr	r3, [pc, #72]	; (8014b08 <SD_write+0xa8>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d102      	bne.n	8014acc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	75fb      	strb	r3, [r7, #23]
 8014aca:	e017      	b.n	8014afc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014acc:	4b0e      	ldr	r3, [pc, #56]	; (8014b08 <SD_write+0xa8>)
 8014ace:	2200      	movs	r2, #0
 8014ad0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014ad2:	f7ef f925 	bl	8003d20 <HAL_GetTick>
 8014ad6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ad8:	e007      	b.n	8014aea <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014ada:	f7ff feab 	bl	8014834 <BSP_SD_GetCardState>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d102      	bne.n	8014aea <SD_write+0x8a>
          {
            res = RES_OK;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]
            break;
 8014ae8:	e008      	b.n	8014afc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014aea:	f7ef f919 	bl	8003d20 <HAL_GetTick>
 8014aee:	4602      	mov	r2, r0
 8014af0:	693b      	ldr	r3, [r7, #16]
 8014af2:	1ad3      	subs	r3, r2, r3
 8014af4:	f247 522f 	movw	r2, #29999	; 0x752f
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d9ee      	bls.n	8014ada <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3718      	adds	r7, #24
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	240016fc 	.word	0x240016fc

08014b0c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b08c      	sub	sp, #48	; 0x30
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	4603      	mov	r3, r0
 8014b14:	603a      	str	r2, [r7, #0]
 8014b16:	71fb      	strb	r3, [r7, #7]
 8014b18:	460b      	mov	r3, r1
 8014b1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014b1c:	2301      	movs	r3, #1
 8014b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014b22:	4b25      	ldr	r3, [pc, #148]	; (8014bb8 <SD_ioctl+0xac>)
 8014b24:	781b      	ldrb	r3, [r3, #0]
 8014b26:	b2db      	uxtb	r3, r3
 8014b28:	f003 0301 	and.w	r3, r3, #1
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d001      	beq.n	8014b34 <SD_ioctl+0x28>
 8014b30:	2303      	movs	r3, #3
 8014b32:	e03c      	b.n	8014bae <SD_ioctl+0xa2>

  switch (cmd)
 8014b34:	79bb      	ldrb	r3, [r7, #6]
 8014b36:	2b03      	cmp	r3, #3
 8014b38:	d834      	bhi.n	8014ba4 <SD_ioctl+0x98>
 8014b3a:	a201      	add	r2, pc, #4	; (adr r2, 8014b40 <SD_ioctl+0x34>)
 8014b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b40:	08014b51 	.word	0x08014b51
 8014b44:	08014b59 	.word	0x08014b59
 8014b48:	08014b71 	.word	0x08014b71
 8014b4c:	08014b8b 	.word	0x08014b8b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014b50:	2300      	movs	r3, #0
 8014b52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b56:	e028      	b.n	8014baa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b58:	f107 0308 	add.w	r3, r7, #8
 8014b5c:	4618      	mov	r0, r3
 8014b5e:	f7ff fe79 	bl	8014854 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014b62:	6a3a      	ldr	r2, [r7, #32]
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b6e:	e01c      	b.n	8014baa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b70:	f107 0308 	add.w	r3, r7, #8
 8014b74:	4618      	mov	r0, r3
 8014b76:	f7ff fe6d 	bl	8014854 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014b82:	2300      	movs	r3, #0
 8014b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b88:	e00f      	b.n	8014baa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b8a:	f107 0308 	add.w	r3, r7, #8
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7ff fe60 	bl	8014854 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b96:	0a5a      	lsrs	r2, r3, #9
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014ba2:	e002      	b.n	8014baa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014ba4:	2304      	movs	r3, #4
 8014ba6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014baa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3730      	adds	r7, #48	; 0x30
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	2400000d 	.word	0x2400000d

08014bbc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014bbc:	b480      	push	{r7}
 8014bbe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014bc0:	4b03      	ldr	r3, [pc, #12]	; (8014bd0 <BSP_SD_WriteCpltCallback+0x14>)
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	601a      	str	r2, [r3, #0]
}
 8014bc6:	bf00      	nop
 8014bc8:	46bd      	mov	sp, r7
 8014bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bce:	4770      	bx	lr
 8014bd0:	240016fc 	.word	0x240016fc

08014bd4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014bd4:	b480      	push	{r7}
 8014bd6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014bd8:	4b03      	ldr	r3, [pc, #12]	; (8014be8 <BSP_SD_ReadCpltCallback+0x14>)
 8014bda:	2201      	movs	r2, #1
 8014bdc:	601a      	str	r2, [r3, #0]
}
 8014bde:	bf00      	nop
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr
 8014be8:	24001700 	.word	0x24001700

08014bec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b084      	sub	sp, #16
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
 8014bf4:	460b      	mov	r3, r1
 8014bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014bf8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014bfc:	f002 fd2a 	bl	8017654 <USBD_static_malloc>
 8014c00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d109      	bne.n	8014c1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	32b0      	adds	r2, #176	; 0xb0
 8014c12:	2100      	movs	r1, #0
 8014c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014c18:	2302      	movs	r3, #2
 8014c1a:	e0d4      	b.n	8014dc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014c1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014c20:	2100      	movs	r1, #0
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f002 fda8 	bl	8017778 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	32b0      	adds	r2, #176	; 0xb0
 8014c32:	68f9      	ldr	r1, [r7, #12]
 8014c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	32b0      	adds	r2, #176	; 0xb0
 8014c42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	7c1b      	ldrb	r3, [r3, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d138      	bne.n	8014cc6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014c54:	4b5e      	ldr	r3, [pc, #376]	; (8014dd0 <USBD_CDC_Init+0x1e4>)
 8014c56:	7819      	ldrb	r1, [r3, #0]
 8014c58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c5c:	2202      	movs	r2, #2
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	f002 fbd5 	bl	801740e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014c64:	4b5a      	ldr	r3, [pc, #360]	; (8014dd0 <USBD_CDC_Init+0x1e4>)
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	f003 020f 	and.w	r2, r3, #15
 8014c6c:	6879      	ldr	r1, [r7, #4]
 8014c6e:	4613      	mov	r3, r2
 8014c70:	009b      	lsls	r3, r3, #2
 8014c72:	4413      	add	r3, r2
 8014c74:	009b      	lsls	r3, r3, #2
 8014c76:	440b      	add	r3, r1
 8014c78:	3324      	adds	r3, #36	; 0x24
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014c7e:	4b55      	ldr	r3, [pc, #340]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014c80:	7819      	ldrb	r1, [r3, #0]
 8014c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c86:	2202      	movs	r2, #2
 8014c88:	6878      	ldr	r0, [r7, #4]
 8014c8a:	f002 fbc0 	bl	801740e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014c8e:	4b51      	ldr	r3, [pc, #324]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	f003 020f 	and.w	r2, r3, #15
 8014c96:	6879      	ldr	r1, [r7, #4]
 8014c98:	4613      	mov	r3, r2
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	4413      	add	r3, r2
 8014c9e:	009b      	lsls	r3, r3, #2
 8014ca0:	440b      	add	r3, r1
 8014ca2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ca6:	2201      	movs	r2, #1
 8014ca8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014caa:	4b4b      	ldr	r3, [pc, #300]	; (8014dd8 <USBD_CDC_Init+0x1ec>)
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	f003 020f 	and.w	r2, r3, #15
 8014cb2:	6879      	ldr	r1, [r7, #4]
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	009b      	lsls	r3, r3, #2
 8014cb8:	4413      	add	r3, r2
 8014cba:	009b      	lsls	r3, r3, #2
 8014cbc:	440b      	add	r3, r1
 8014cbe:	3326      	adds	r3, #38	; 0x26
 8014cc0:	2210      	movs	r2, #16
 8014cc2:	801a      	strh	r2, [r3, #0]
 8014cc4:	e035      	b.n	8014d32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014cc6:	4b42      	ldr	r3, [pc, #264]	; (8014dd0 <USBD_CDC_Init+0x1e4>)
 8014cc8:	7819      	ldrb	r1, [r3, #0]
 8014cca:	2340      	movs	r3, #64	; 0x40
 8014ccc:	2202      	movs	r2, #2
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f002 fb9d 	bl	801740e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014cd4:	4b3e      	ldr	r3, [pc, #248]	; (8014dd0 <USBD_CDC_Init+0x1e4>)
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	f003 020f 	and.w	r2, r3, #15
 8014cdc:	6879      	ldr	r1, [r7, #4]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	009b      	lsls	r3, r3, #2
 8014ce2:	4413      	add	r3, r2
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	440b      	add	r3, r1
 8014ce8:	3324      	adds	r3, #36	; 0x24
 8014cea:	2201      	movs	r2, #1
 8014cec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014cee:	4b39      	ldr	r3, [pc, #228]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014cf0:	7819      	ldrb	r1, [r3, #0]
 8014cf2:	2340      	movs	r3, #64	; 0x40
 8014cf4:	2202      	movs	r2, #2
 8014cf6:	6878      	ldr	r0, [r7, #4]
 8014cf8:	f002 fb89 	bl	801740e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014cfc:	4b35      	ldr	r3, [pc, #212]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014cfe:	781b      	ldrb	r3, [r3, #0]
 8014d00:	f003 020f 	and.w	r2, r3, #15
 8014d04:	6879      	ldr	r1, [r7, #4]
 8014d06:	4613      	mov	r3, r2
 8014d08:	009b      	lsls	r3, r3, #2
 8014d0a:	4413      	add	r3, r2
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	440b      	add	r3, r1
 8014d10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d14:	2201      	movs	r2, #1
 8014d16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d18:	4b2f      	ldr	r3, [pc, #188]	; (8014dd8 <USBD_CDC_Init+0x1ec>)
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f003 020f 	and.w	r2, r3, #15
 8014d20:	6879      	ldr	r1, [r7, #4]
 8014d22:	4613      	mov	r3, r2
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	4413      	add	r3, r2
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	440b      	add	r3, r1
 8014d2c:	3326      	adds	r3, #38	; 0x26
 8014d2e:	2210      	movs	r2, #16
 8014d30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d32:	4b29      	ldr	r3, [pc, #164]	; (8014dd8 <USBD_CDC_Init+0x1ec>)
 8014d34:	7819      	ldrb	r1, [r3, #0]
 8014d36:	2308      	movs	r3, #8
 8014d38:	2203      	movs	r2, #3
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f002 fb67 	bl	801740e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014d40:	4b25      	ldr	r3, [pc, #148]	; (8014dd8 <USBD_CDC_Init+0x1ec>)
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	f003 020f 	and.w	r2, r3, #15
 8014d48:	6879      	ldr	r1, [r7, #4]
 8014d4a:	4613      	mov	r3, r2
 8014d4c:	009b      	lsls	r3, r3, #2
 8014d4e:	4413      	add	r3, r2
 8014d50:	009b      	lsls	r3, r3, #2
 8014d52:	440b      	add	r3, r1
 8014d54:	3324      	adds	r3, #36	; 0x24
 8014d56:	2201      	movs	r2, #1
 8014d58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d68:	687a      	ldr	r2, [r7, #4]
 8014d6a:	33b0      	adds	r3, #176	; 0xb0
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	4413      	add	r3, r2
 8014d70:	685b      	ldr	r3, [r3, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	2200      	movs	r2, #0
 8014d82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d101      	bne.n	8014d94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014d90:	2302      	movs	r3, #2
 8014d92:	e018      	b.n	8014dc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	7c1b      	ldrb	r3, [r3, #16]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d10a      	bne.n	8014db2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d9c:	4b0d      	ldr	r3, [pc, #52]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014d9e:	7819      	ldrb	r1, [r3, #0]
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014da6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f002 fc1e 	bl	80175ec <USBD_LL_PrepareReceive>
 8014db0:	e008      	b.n	8014dc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014db2:	4b08      	ldr	r3, [pc, #32]	; (8014dd4 <USBD_CDC_Init+0x1e8>)
 8014db4:	7819      	ldrb	r1, [r3, #0]
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dbc:	2340      	movs	r3, #64	; 0x40
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f002 fc14 	bl	80175ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014dc4:	2300      	movs	r3, #0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	24000097 	.word	0x24000097
 8014dd4:	24000098 	.word	0x24000098
 8014dd8:	24000099 	.word	0x24000099

08014ddc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014de8:	4b3a      	ldr	r3, [pc, #232]	; (8014ed4 <USBD_CDC_DeInit+0xf8>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	4619      	mov	r1, r3
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f002 fb33 	bl	801745a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014df4:	4b37      	ldr	r3, [pc, #220]	; (8014ed4 <USBD_CDC_DeInit+0xf8>)
 8014df6:	781b      	ldrb	r3, [r3, #0]
 8014df8:	f003 020f 	and.w	r2, r3, #15
 8014dfc:	6879      	ldr	r1, [r7, #4]
 8014dfe:	4613      	mov	r3, r2
 8014e00:	009b      	lsls	r3, r3, #2
 8014e02:	4413      	add	r3, r2
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	440b      	add	r3, r1
 8014e08:	3324      	adds	r3, #36	; 0x24
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014e0e:	4b32      	ldr	r3, [pc, #200]	; (8014ed8 <USBD_CDC_DeInit+0xfc>)
 8014e10:	781b      	ldrb	r3, [r3, #0]
 8014e12:	4619      	mov	r1, r3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f002 fb20 	bl	801745a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014e1a:	4b2f      	ldr	r3, [pc, #188]	; (8014ed8 <USBD_CDC_DeInit+0xfc>)
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	f003 020f 	and.w	r2, r3, #15
 8014e22:	6879      	ldr	r1, [r7, #4]
 8014e24:	4613      	mov	r3, r2
 8014e26:	009b      	lsls	r3, r3, #2
 8014e28:	4413      	add	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	440b      	add	r3, r1
 8014e2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e32:	2200      	movs	r2, #0
 8014e34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014e36:	4b29      	ldr	r3, [pc, #164]	; (8014edc <USBD_CDC_DeInit+0x100>)
 8014e38:	781b      	ldrb	r3, [r3, #0]
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f002 fb0c 	bl	801745a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014e42:	4b26      	ldr	r3, [pc, #152]	; (8014edc <USBD_CDC_DeInit+0x100>)
 8014e44:	781b      	ldrb	r3, [r3, #0]
 8014e46:	f003 020f 	and.w	r2, r3, #15
 8014e4a:	6879      	ldr	r1, [r7, #4]
 8014e4c:	4613      	mov	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4413      	add	r3, r2
 8014e52:	009b      	lsls	r3, r3, #2
 8014e54:	440b      	add	r3, r1
 8014e56:	3324      	adds	r3, #36	; 0x24
 8014e58:	2200      	movs	r2, #0
 8014e5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014e5c:	4b1f      	ldr	r3, [pc, #124]	; (8014edc <USBD_CDC_DeInit+0x100>)
 8014e5e:	781b      	ldrb	r3, [r3, #0]
 8014e60:	f003 020f 	and.w	r2, r3, #15
 8014e64:	6879      	ldr	r1, [r7, #4]
 8014e66:	4613      	mov	r3, r2
 8014e68:	009b      	lsls	r3, r3, #2
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	440b      	add	r3, r1
 8014e70:	3326      	adds	r3, #38	; 0x26
 8014e72:	2200      	movs	r2, #0
 8014e74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	32b0      	adds	r2, #176	; 0xb0
 8014e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d01f      	beq.n	8014ec8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e8e:	687a      	ldr	r2, [r7, #4]
 8014e90:	33b0      	adds	r3, #176	; 0xb0
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	4413      	add	r3, r2
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	685b      	ldr	r3, [r3, #4]
 8014e9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	32b0      	adds	r2, #176	; 0xb0
 8014ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f002 fbe0 	bl	8017670 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	32b0      	adds	r2, #176	; 0xb0
 8014eba:	2100      	movs	r1, #0
 8014ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014ec8:	2300      	movs	r3, #0
}
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}
 8014ed2:	bf00      	nop
 8014ed4:	24000097 	.word	0x24000097
 8014ed8:	24000098 	.word	0x24000098
 8014edc:	24000099 	.word	0x24000099

08014ee0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b086      	sub	sp, #24
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	6078      	str	r0, [r7, #4]
 8014ee8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	32b0      	adds	r2, #176	; 0xb0
 8014ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014efa:	2300      	movs	r3, #0
 8014efc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014efe:	2300      	movs	r3, #0
 8014f00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f02:	2300      	movs	r3, #0
 8014f04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d101      	bne.n	8014f10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014f0c:	2303      	movs	r3, #3
 8014f0e:	e0bf      	b.n	8015090 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	781b      	ldrb	r3, [r3, #0]
 8014f14:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d050      	beq.n	8014fbe <USBD_CDC_Setup+0xde>
 8014f1c:	2b20      	cmp	r3, #32
 8014f1e:	f040 80af 	bne.w	8015080 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	88db      	ldrh	r3, [r3, #6]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d03a      	beq.n	8014fa0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	b25b      	sxtb	r3, r3
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	da1b      	bge.n	8014f6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	33b0      	adds	r3, #176	; 0xb0
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	4413      	add	r3, r2
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	683a      	ldr	r2, [r7, #0]
 8014f48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014f4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f4c:	683a      	ldr	r2, [r7, #0]
 8014f4e:	88d2      	ldrh	r2, [r2, #6]
 8014f50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	88db      	ldrh	r3, [r3, #6]
 8014f56:	2b07      	cmp	r3, #7
 8014f58:	bf28      	it	cs
 8014f5a:	2307      	movcs	r3, #7
 8014f5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	89fa      	ldrh	r2, [r7, #14]
 8014f62:	4619      	mov	r1, r3
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f001 fdb3 	bl	8016ad0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014f6a:	e090      	b.n	801508e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	785a      	ldrb	r2, [r3, #1]
 8014f70:	693b      	ldr	r3, [r7, #16]
 8014f72:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	88db      	ldrh	r3, [r3, #6]
 8014f7a:	2b3f      	cmp	r3, #63	; 0x3f
 8014f7c:	d803      	bhi.n	8014f86 <USBD_CDC_Setup+0xa6>
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	88db      	ldrh	r3, [r3, #6]
 8014f82:	b2da      	uxtb	r2, r3
 8014f84:	e000      	b.n	8014f88 <USBD_CDC_Setup+0xa8>
 8014f86:	2240      	movs	r2, #64	; 0x40
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014f8e:	6939      	ldr	r1, [r7, #16]
 8014f90:	693b      	ldr	r3, [r7, #16]
 8014f92:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014f96:	461a      	mov	r2, r3
 8014f98:	6878      	ldr	r0, [r7, #4]
 8014f9a:	f001 fdc5 	bl	8016b28 <USBD_CtlPrepareRx>
      break;
 8014f9e:	e076      	b.n	801508e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fa6:	687a      	ldr	r2, [r7, #4]
 8014fa8:	33b0      	adds	r3, #176	; 0xb0
 8014faa:	009b      	lsls	r3, r3, #2
 8014fac:	4413      	add	r3, r2
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	689b      	ldr	r3, [r3, #8]
 8014fb2:	683a      	ldr	r2, [r7, #0]
 8014fb4:	7850      	ldrb	r0, [r2, #1]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	6839      	ldr	r1, [r7, #0]
 8014fba:	4798      	blx	r3
      break;
 8014fbc:	e067      	b.n	801508e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	785b      	ldrb	r3, [r3, #1]
 8014fc2:	2b0b      	cmp	r3, #11
 8014fc4:	d851      	bhi.n	801506a <USBD_CDC_Setup+0x18a>
 8014fc6:	a201      	add	r2, pc, #4	; (adr r2, 8014fcc <USBD_CDC_Setup+0xec>)
 8014fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fcc:	08014ffd 	.word	0x08014ffd
 8014fd0:	08015079 	.word	0x08015079
 8014fd4:	0801506b 	.word	0x0801506b
 8014fd8:	0801506b 	.word	0x0801506b
 8014fdc:	0801506b 	.word	0x0801506b
 8014fe0:	0801506b 	.word	0x0801506b
 8014fe4:	0801506b 	.word	0x0801506b
 8014fe8:	0801506b 	.word	0x0801506b
 8014fec:	0801506b 	.word	0x0801506b
 8014ff0:	0801506b 	.word	0x0801506b
 8014ff4:	08015027 	.word	0x08015027
 8014ff8:	08015051 	.word	0x08015051
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015002:	b2db      	uxtb	r3, r3
 8015004:	2b03      	cmp	r3, #3
 8015006:	d107      	bne.n	8015018 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015008:	f107 030a 	add.w	r3, r7, #10
 801500c:	2202      	movs	r2, #2
 801500e:	4619      	mov	r1, r3
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f001 fd5d 	bl	8016ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015016:	e032      	b.n	801507e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015018:	6839      	ldr	r1, [r7, #0]
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f001 fce7 	bl	80169ee <USBD_CtlError>
            ret = USBD_FAIL;
 8015020:	2303      	movs	r3, #3
 8015022:	75fb      	strb	r3, [r7, #23]
          break;
 8015024:	e02b      	b.n	801507e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b03      	cmp	r3, #3
 8015030:	d107      	bne.n	8015042 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015032:	f107 030d 	add.w	r3, r7, #13
 8015036:	2201      	movs	r2, #1
 8015038:	4619      	mov	r1, r3
 801503a:	6878      	ldr	r0, [r7, #4]
 801503c:	f001 fd48 	bl	8016ad0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015040:	e01d      	b.n	801507e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015042:	6839      	ldr	r1, [r7, #0]
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f001 fcd2 	bl	80169ee <USBD_CtlError>
            ret = USBD_FAIL;
 801504a:	2303      	movs	r3, #3
 801504c:	75fb      	strb	r3, [r7, #23]
          break;
 801504e:	e016      	b.n	801507e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015056:	b2db      	uxtb	r3, r3
 8015058:	2b03      	cmp	r3, #3
 801505a:	d00f      	beq.n	801507c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801505c:	6839      	ldr	r1, [r7, #0]
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f001 fcc5 	bl	80169ee <USBD_CtlError>
            ret = USBD_FAIL;
 8015064:	2303      	movs	r3, #3
 8015066:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015068:	e008      	b.n	801507c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801506a:	6839      	ldr	r1, [r7, #0]
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f001 fcbe 	bl	80169ee <USBD_CtlError>
          ret = USBD_FAIL;
 8015072:	2303      	movs	r3, #3
 8015074:	75fb      	strb	r3, [r7, #23]
          break;
 8015076:	e002      	b.n	801507e <USBD_CDC_Setup+0x19e>
          break;
 8015078:	bf00      	nop
 801507a:	e008      	b.n	801508e <USBD_CDC_Setup+0x1ae>
          break;
 801507c:	bf00      	nop
      }
      break;
 801507e:	e006      	b.n	801508e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015080:	6839      	ldr	r1, [r7, #0]
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f001 fcb3 	bl	80169ee <USBD_CtlError>
      ret = USBD_FAIL;
 8015088:	2303      	movs	r3, #3
 801508a:	75fb      	strb	r3, [r7, #23]
      break;
 801508c:	bf00      	nop
  }

  return (uint8_t)ret;
 801508e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015090:	4618      	mov	r0, r3
 8015092:	3718      	adds	r7, #24
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}

08015098 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
 80150a0:	460b      	mov	r3, r1
 80150a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80150aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	32b0      	adds	r2, #176	; 0xb0
 80150b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d101      	bne.n	80150c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80150be:	2303      	movs	r3, #3
 80150c0:	e065      	b.n	801518e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	32b0      	adds	r2, #176	; 0xb0
 80150cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80150d2:	78fb      	ldrb	r3, [r7, #3]
 80150d4:	f003 020f 	and.w	r2, r3, #15
 80150d8:	6879      	ldr	r1, [r7, #4]
 80150da:	4613      	mov	r3, r2
 80150dc:	009b      	lsls	r3, r3, #2
 80150de:	4413      	add	r3, r2
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	440b      	add	r3, r1
 80150e4:	3318      	adds	r3, #24
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d02f      	beq.n	801514c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80150ec:	78fb      	ldrb	r3, [r7, #3]
 80150ee:	f003 020f 	and.w	r2, r3, #15
 80150f2:	6879      	ldr	r1, [r7, #4]
 80150f4:	4613      	mov	r3, r2
 80150f6:	009b      	lsls	r3, r3, #2
 80150f8:	4413      	add	r3, r2
 80150fa:	009b      	lsls	r3, r3, #2
 80150fc:	440b      	add	r3, r1
 80150fe:	3318      	adds	r3, #24
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	78fb      	ldrb	r3, [r7, #3]
 8015104:	f003 010f 	and.w	r1, r3, #15
 8015108:	68f8      	ldr	r0, [r7, #12]
 801510a:	460b      	mov	r3, r1
 801510c:	00db      	lsls	r3, r3, #3
 801510e:	440b      	add	r3, r1
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	4403      	add	r3, r0
 8015114:	3344      	adds	r3, #68	; 0x44
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	fbb2 f1f3 	udiv	r1, r2, r3
 801511c:	fb01 f303 	mul.w	r3, r1, r3
 8015120:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015122:	2b00      	cmp	r3, #0
 8015124:	d112      	bne.n	801514c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015126:	78fb      	ldrb	r3, [r7, #3]
 8015128:	f003 020f 	and.w	r2, r3, #15
 801512c:	6879      	ldr	r1, [r7, #4]
 801512e:	4613      	mov	r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	4413      	add	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	440b      	add	r3, r1
 8015138:	3318      	adds	r3, #24
 801513a:	2200      	movs	r2, #0
 801513c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801513e:	78f9      	ldrb	r1, [r7, #3]
 8015140:	2300      	movs	r3, #0
 8015142:	2200      	movs	r2, #0
 8015144:	6878      	ldr	r0, [r7, #4]
 8015146:	f002 fa30 	bl	80175aa <USBD_LL_Transmit>
 801514a:	e01f      	b.n	801518c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	2200      	movs	r2, #0
 8015150:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801515a:	687a      	ldr	r2, [r7, #4]
 801515c:	33b0      	adds	r3, #176	; 0xb0
 801515e:	009b      	lsls	r3, r3, #2
 8015160:	4413      	add	r3, r2
 8015162:	685b      	ldr	r3, [r3, #4]
 8015164:	691b      	ldr	r3, [r3, #16]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d010      	beq.n	801518c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015170:	687a      	ldr	r2, [r7, #4]
 8015172:	33b0      	adds	r3, #176	; 0xb0
 8015174:	009b      	lsls	r3, r3, #2
 8015176:	4413      	add	r3, r2
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	691b      	ldr	r3, [r3, #16]
 801517c:	68ba      	ldr	r2, [r7, #8]
 801517e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015182:	68ba      	ldr	r2, [r7, #8]
 8015184:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015188:	78fa      	ldrb	r2, [r7, #3]
 801518a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801518c:	2300      	movs	r3, #0
}
 801518e:	4618      	mov	r0, r3
 8015190:	3710      	adds	r7, #16
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015196:	b580      	push	{r7, lr}
 8015198:	b084      	sub	sp, #16
 801519a:	af00      	add	r7, sp, #0
 801519c:	6078      	str	r0, [r7, #4]
 801519e:	460b      	mov	r3, r1
 80151a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	32b0      	adds	r2, #176	; 0xb0
 80151ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	32b0      	adds	r2, #176	; 0xb0
 80151bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d101      	bne.n	80151c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80151c4:	2303      	movs	r3, #3
 80151c6:	e01a      	b.n	80151fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80151c8:	78fb      	ldrb	r3, [r7, #3]
 80151ca:	4619      	mov	r1, r3
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f002 fa2e 	bl	801762e <USBD_LL_GetRxDataSize>
 80151d2:	4602      	mov	r2, r0
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	33b0      	adds	r3, #176	; 0xb0
 80151e4:	009b      	lsls	r3, r3, #2
 80151e6:	4413      	add	r3, r2
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80151f2:	68fa      	ldr	r2, [r7, #12]
 80151f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80151f8:	4611      	mov	r1, r2
 80151fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80151fc:	2300      	movs	r3, #0
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3710      	adds	r7, #16
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015206:	b580      	push	{r7, lr}
 8015208:	b084      	sub	sp, #16
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	32b0      	adds	r2, #176	; 0xb0
 8015218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801521c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d101      	bne.n	8015228 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015224:	2303      	movs	r3, #3
 8015226:	e025      	b.n	8015274 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801522e:	687a      	ldr	r2, [r7, #4]
 8015230:	33b0      	adds	r3, #176	; 0xb0
 8015232:	009b      	lsls	r3, r3, #2
 8015234:	4413      	add	r3, r2
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	2b00      	cmp	r3, #0
 801523a:	d01a      	beq.n	8015272 <USBD_CDC_EP0_RxReady+0x6c>
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015242:	2bff      	cmp	r3, #255	; 0xff
 8015244:	d015      	beq.n	8015272 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801524c:	687a      	ldr	r2, [r7, #4]
 801524e:	33b0      	adds	r3, #176	; 0xb0
 8015250:	009b      	lsls	r3, r3, #2
 8015252:	4413      	add	r3, r2
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	689b      	ldr	r3, [r3, #8]
 8015258:	68fa      	ldr	r2, [r7, #12]
 801525a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801525e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015260:	68fa      	ldr	r2, [r7, #12]
 8015262:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015266:	b292      	uxth	r2, r2
 8015268:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	22ff      	movs	r2, #255	; 0xff
 801526e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015272:	2300      	movs	r3, #0
}
 8015274:	4618      	mov	r0, r3
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801527c:	b580      	push	{r7, lr}
 801527e:	b086      	sub	sp, #24
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015284:	2182      	movs	r1, #130	; 0x82
 8015286:	4818      	ldr	r0, [pc, #96]	; (80152e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015288:	f000 fd4f 	bl	8015d2a <USBD_GetEpDesc>
 801528c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801528e:	2101      	movs	r1, #1
 8015290:	4815      	ldr	r0, [pc, #84]	; (80152e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015292:	f000 fd4a 	bl	8015d2a <USBD_GetEpDesc>
 8015296:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015298:	2181      	movs	r1, #129	; 0x81
 801529a:	4813      	ldr	r0, [pc, #76]	; (80152e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801529c:	f000 fd45 	bl	8015d2a <USBD_GetEpDesc>
 80152a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80152a2:	697b      	ldr	r3, [r7, #20]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d002      	beq.n	80152ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	2210      	movs	r2, #16
 80152ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80152ae:	693b      	ldr	r3, [r7, #16]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d006      	beq.n	80152c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152b4:	693b      	ldr	r3, [r7, #16]
 80152b6:	2200      	movs	r2, #0
 80152b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80152bc:	711a      	strb	r2, [r3, #4]
 80152be:	2200      	movs	r2, #0
 80152c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d006      	beq.n	80152d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2200      	movs	r2, #0
 80152cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80152d0:	711a      	strb	r2, [r3, #4]
 80152d2:	2200      	movs	r2, #0
 80152d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	2243      	movs	r2, #67	; 0x43
 80152da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80152dc:	4b02      	ldr	r3, [pc, #8]	; (80152e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3718      	adds	r7, #24
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd80      	pop	{r7, pc}
 80152e6:	bf00      	nop
 80152e8:	24000054 	.word	0x24000054

080152ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b086      	sub	sp, #24
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152f4:	2182      	movs	r1, #130	; 0x82
 80152f6:	4818      	ldr	r0, [pc, #96]	; (8015358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80152f8:	f000 fd17 	bl	8015d2a <USBD_GetEpDesc>
 80152fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152fe:	2101      	movs	r1, #1
 8015300:	4815      	ldr	r0, [pc, #84]	; (8015358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015302:	f000 fd12 	bl	8015d2a <USBD_GetEpDesc>
 8015306:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015308:	2181      	movs	r1, #129	; 0x81
 801530a:	4813      	ldr	r0, [pc, #76]	; (8015358 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801530c:	f000 fd0d 	bl	8015d2a <USBD_GetEpDesc>
 8015310:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d002      	beq.n	801531e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015318:	697b      	ldr	r3, [r7, #20]
 801531a:	2210      	movs	r2, #16
 801531c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801531e:	693b      	ldr	r3, [r7, #16]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d006      	beq.n	8015332 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015324:	693b      	ldr	r3, [r7, #16]
 8015326:	2200      	movs	r2, #0
 8015328:	711a      	strb	r2, [r3, #4]
 801532a:	2200      	movs	r2, #0
 801532c:	f042 0202 	orr.w	r2, r2, #2
 8015330:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d006      	beq.n	8015346 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	2200      	movs	r2, #0
 801533c:	711a      	strb	r2, [r3, #4]
 801533e:	2200      	movs	r2, #0
 8015340:	f042 0202 	orr.w	r2, r2, #2
 8015344:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2243      	movs	r2, #67	; 0x43
 801534a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801534c:	4b02      	ldr	r3, [pc, #8]	; (8015358 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801534e:	4618      	mov	r0, r3
 8015350:	3718      	adds	r7, #24
 8015352:	46bd      	mov	sp, r7
 8015354:	bd80      	pop	{r7, pc}
 8015356:	bf00      	nop
 8015358:	24000054 	.word	0x24000054

0801535c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b086      	sub	sp, #24
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015364:	2182      	movs	r1, #130	; 0x82
 8015366:	4818      	ldr	r0, [pc, #96]	; (80153c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015368:	f000 fcdf 	bl	8015d2a <USBD_GetEpDesc>
 801536c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801536e:	2101      	movs	r1, #1
 8015370:	4815      	ldr	r0, [pc, #84]	; (80153c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015372:	f000 fcda 	bl	8015d2a <USBD_GetEpDesc>
 8015376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015378:	2181      	movs	r1, #129	; 0x81
 801537a:	4813      	ldr	r0, [pc, #76]	; (80153c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801537c:	f000 fcd5 	bl	8015d2a <USBD_GetEpDesc>
 8015380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d002      	beq.n	801538e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	2210      	movs	r2, #16
 801538c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d006      	beq.n	80153a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015394:	693b      	ldr	r3, [r7, #16]
 8015396:	2200      	movs	r2, #0
 8015398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801539c:	711a      	strb	r2, [r3, #4]
 801539e:	2200      	movs	r2, #0
 80153a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80153a2:	68fb      	ldr	r3, [r7, #12]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d006      	beq.n	80153b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2200      	movs	r2, #0
 80153ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153b0:	711a      	strb	r2, [r3, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2243      	movs	r2, #67	; 0x43
 80153ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153bc:	4b02      	ldr	r3, [pc, #8]	; (80153c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3718      	adds	r7, #24
 80153c2:	46bd      	mov	sp, r7
 80153c4:	bd80      	pop	{r7, pc}
 80153c6:	bf00      	nop
 80153c8:	24000054 	.word	0x24000054

080153cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80153cc:	b480      	push	{r7}
 80153ce:	b083      	sub	sp, #12
 80153d0:	af00      	add	r7, sp, #0
 80153d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	220a      	movs	r2, #10
 80153d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80153da:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80153dc:	4618      	mov	r0, r3
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr
 80153e8:	24000010 	.word	0x24000010

080153ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80153f6:	683b      	ldr	r3, [r7, #0]
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d101      	bne.n	8015400 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80153fc:	2303      	movs	r3, #3
 80153fe:	e009      	b.n	8015414 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	33b0      	adds	r3, #176	; 0xb0
 801540a:	009b      	lsls	r3, r3, #2
 801540c:	4413      	add	r3, r2
 801540e:	683a      	ldr	r2, [r7, #0]
 8015410:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015412:	2300      	movs	r3, #0
}
 8015414:	4618      	mov	r0, r3
 8015416:	370c      	adds	r7, #12
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr

08015420 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015420:	b480      	push	{r7}
 8015422:	b087      	sub	sp, #28
 8015424:	af00      	add	r7, sp, #0
 8015426:	60f8      	str	r0, [r7, #12]
 8015428:	60b9      	str	r1, [r7, #8]
 801542a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	32b0      	adds	r2, #176	; 0xb0
 8015436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801543a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d101      	bne.n	8015446 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015442:	2303      	movs	r3, #3
 8015444:	e008      	b.n	8015458 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015446:	697b      	ldr	r3, [r7, #20]
 8015448:	68ba      	ldr	r2, [r7, #8]
 801544a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	687a      	ldr	r2, [r7, #4]
 8015452:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015456:	2300      	movs	r3, #0
}
 8015458:	4618      	mov	r0, r3
 801545a:	371c      	adds	r7, #28
 801545c:	46bd      	mov	sp, r7
 801545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015462:	4770      	bx	lr

08015464 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015464:	b480      	push	{r7}
 8015466:	b085      	sub	sp, #20
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	32b0      	adds	r2, #176	; 0xb0
 8015478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801547c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d101      	bne.n	8015488 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015484:	2303      	movs	r3, #3
 8015486:	e004      	b.n	8015492 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	683a      	ldr	r2, [r7, #0]
 801548c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015490:	2300      	movs	r3, #0
}
 8015492:	4618      	mov	r0, r3
 8015494:	3714      	adds	r7, #20
 8015496:	46bd      	mov	sp, r7
 8015498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549c:	4770      	bx	lr
	...

080154a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b084      	sub	sp, #16
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	32b0      	adds	r2, #176	; 0xb0
 80154b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80154b8:	2301      	movs	r3, #1
 80154ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d101      	bne.n	80154c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80154c2:	2303      	movs	r3, #3
 80154c4:	e025      	b.n	8015512 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80154c6:	68bb      	ldr	r3, [r7, #8]
 80154c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d11f      	bne.n	8015510 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	2201      	movs	r2, #1
 80154d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80154d8:	4b10      	ldr	r3, [pc, #64]	; (801551c <USBD_CDC_TransmitPacket+0x7c>)
 80154da:	781b      	ldrb	r3, [r3, #0]
 80154dc:	f003 020f 	and.w	r2, r3, #15
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	4613      	mov	r3, r2
 80154ea:	009b      	lsls	r3, r3, #2
 80154ec:	4413      	add	r3, r2
 80154ee:	009b      	lsls	r3, r3, #2
 80154f0:	4403      	add	r3, r0
 80154f2:	3318      	adds	r3, #24
 80154f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80154f6:	4b09      	ldr	r3, [pc, #36]	; (801551c <USBD_CDC_TransmitPacket+0x7c>)
 80154f8:	7819      	ldrb	r1, [r3, #0]
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015506:	6878      	ldr	r0, [r7, #4]
 8015508:	f002 f84f 	bl	80175aa <USBD_LL_Transmit>

    ret = USBD_OK;
 801550c:	2300      	movs	r3, #0
 801550e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015510:	7bfb      	ldrb	r3, [r7, #15]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	24000097 	.word	0x24000097

08015520 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b084      	sub	sp, #16
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	32b0      	adds	r2, #176	; 0xb0
 8015532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015536:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	32b0      	adds	r2, #176	; 0xb0
 8015542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d101      	bne.n	801554e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801554a:	2303      	movs	r3, #3
 801554c:	e018      	b.n	8015580 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	7c1b      	ldrb	r3, [r3, #16]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d10a      	bne.n	801556c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015556:	4b0c      	ldr	r3, [pc, #48]	; (8015588 <USBD_CDC_ReceivePacket+0x68>)
 8015558:	7819      	ldrb	r1, [r3, #0]
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f002 f841 	bl	80175ec <USBD_LL_PrepareReceive>
 801556a:	e008      	b.n	801557e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801556c:	4b06      	ldr	r3, [pc, #24]	; (8015588 <USBD_CDC_ReceivePacket+0x68>)
 801556e:	7819      	ldrb	r1, [r3, #0]
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015576:	2340      	movs	r3, #64	; 0x40
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f002 f837 	bl	80175ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801557e:	2300      	movs	r3, #0
}
 8015580:	4618      	mov	r0, r3
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}
 8015588:	24000098 	.word	0x24000098

0801558c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b086      	sub	sp, #24
 8015590:	af00      	add	r7, sp, #0
 8015592:	60f8      	str	r0, [r7, #12]
 8015594:	60b9      	str	r1, [r7, #8]
 8015596:	4613      	mov	r3, r2
 8015598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2b00      	cmp	r3, #0
 801559e:	d101      	bne.n	80155a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80155a0:	2303      	movs	r3, #3
 80155a2:	e01f      	b.n	80155e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2200      	movs	r2, #0
 80155a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	2200      	movs	r2, #0
 80155b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	2200      	movs	r2, #0
 80155b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d003      	beq.n	80155ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	68ba      	ldr	r2, [r7, #8]
 80155c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	2201      	movs	r2, #1
 80155ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	79fa      	ldrb	r2, [r7, #7]
 80155d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80155d8:	68f8      	ldr	r0, [r7, #12]
 80155da:	f001 feab 	bl	8017334 <USBD_LL_Init>
 80155de:	4603      	mov	r3, r0
 80155e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80155e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80155e4:	4618      	mov	r0, r3
 80155e6:	3718      	adds	r7, #24
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}

080155ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80155f6:	2300      	movs	r3, #0
 80155f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d101      	bne.n	8015604 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015600:	2303      	movs	r3, #3
 8015602:	e025      	b.n	8015650 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	683a      	ldr	r2, [r7, #0]
 8015608:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	32ae      	adds	r2, #174	; 0xae
 8015616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801561c:	2b00      	cmp	r3, #0
 801561e:	d00f      	beq.n	8015640 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	32ae      	adds	r2, #174	; 0xae
 801562a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801562e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015630:	f107 020e 	add.w	r2, r7, #14
 8015634:	4610      	mov	r0, r2
 8015636:	4798      	blx	r3
 8015638:	4602      	mov	r2, r0
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015646:	1c5a      	adds	r2, r3, #1
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801564e:	2300      	movs	r3, #0
}
 8015650:	4618      	mov	r0, r3
 8015652:	3710      	adds	r7, #16
 8015654:	46bd      	mov	sp, r7
 8015656:	bd80      	pop	{r7, pc}

08015658 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b082      	sub	sp, #8
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	f001 feb9 	bl	80173d8 <USBD_LL_Start>
 8015666:	4603      	mov	r3, r0
}
 8015668:	4618      	mov	r0, r3
 801566a:	3708      	adds	r7, #8
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015670:	b480      	push	{r7}
 8015672:	b083      	sub	sp, #12
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015678:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801567a:	4618      	mov	r0, r3
 801567c:	370c      	adds	r7, #12
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr

08015686 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015686:	b580      	push	{r7, lr}
 8015688:	b084      	sub	sp, #16
 801568a:	af00      	add	r7, sp, #0
 801568c:	6078      	str	r0, [r7, #4]
 801568e:	460b      	mov	r3, r1
 8015690:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015692:	2300      	movs	r3, #0
 8015694:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801569c:	2b00      	cmp	r3, #0
 801569e:	d009      	beq.n	80156b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	78fa      	ldrb	r2, [r7, #3]
 80156aa:	4611      	mov	r1, r2
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	4798      	blx	r3
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	3710      	adds	r7, #16
 80156ba:	46bd      	mov	sp, r7
 80156bc:	bd80      	pop	{r7, pc}

080156be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156be:	b580      	push	{r7, lr}
 80156c0:	b084      	sub	sp, #16
 80156c2:	af00      	add	r7, sp, #0
 80156c4:	6078      	str	r0, [r7, #4]
 80156c6:	460b      	mov	r3, r1
 80156c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80156ca:	2300      	movs	r3, #0
 80156cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d4:	685b      	ldr	r3, [r3, #4]
 80156d6:	78fa      	ldrb	r2, [r7, #3]
 80156d8:	4611      	mov	r1, r2
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	4798      	blx	r3
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d001      	beq.n	80156e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80156e4:	2303      	movs	r3, #3
 80156e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3710      	adds	r7, #16
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80156f2:	b580      	push	{r7, lr}
 80156f4:	b084      	sub	sp, #16
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015702:	6839      	ldr	r1, [r7, #0]
 8015704:	4618      	mov	r0, r3
 8015706:	f001 f938 	bl	801697a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2201      	movs	r2, #1
 801570e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015718:	461a      	mov	r2, r3
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015726:	f003 031f 	and.w	r3, r3, #31
 801572a:	2b02      	cmp	r3, #2
 801572c:	d01a      	beq.n	8015764 <USBD_LL_SetupStage+0x72>
 801572e:	2b02      	cmp	r3, #2
 8015730:	d822      	bhi.n	8015778 <USBD_LL_SetupStage+0x86>
 8015732:	2b00      	cmp	r3, #0
 8015734:	d002      	beq.n	801573c <USBD_LL_SetupStage+0x4a>
 8015736:	2b01      	cmp	r3, #1
 8015738:	d00a      	beq.n	8015750 <USBD_LL_SetupStage+0x5e>
 801573a:	e01d      	b.n	8015778 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015742:	4619      	mov	r1, r3
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f000 fb65 	bl	8015e14 <USBD_StdDevReq>
 801574a:	4603      	mov	r3, r0
 801574c:	73fb      	strb	r3, [r7, #15]
      break;
 801574e:	e020      	b.n	8015792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015756:	4619      	mov	r1, r3
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f000 fbcd 	bl	8015ef8 <USBD_StdItfReq>
 801575e:	4603      	mov	r3, r0
 8015760:	73fb      	strb	r3, [r7, #15]
      break;
 8015762:	e016      	b.n	8015792 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801576a:	4619      	mov	r1, r3
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f000 fc2f 	bl	8015fd0 <USBD_StdEPReq>
 8015772:	4603      	mov	r3, r0
 8015774:	73fb      	strb	r3, [r7, #15]
      break;
 8015776:	e00c      	b.n	8015792 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801577e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015782:	b2db      	uxtb	r3, r3
 8015784:	4619      	mov	r1, r3
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f001 fe86 	bl	8017498 <USBD_LL_StallEP>
 801578c:	4603      	mov	r3, r0
 801578e:	73fb      	strb	r3, [r7, #15]
      break;
 8015790:	bf00      	nop
  }

  return ret;
 8015792:	7bfb      	ldrb	r3, [r7, #15]
}
 8015794:	4618      	mov	r0, r3
 8015796:	3710      	adds	r7, #16
 8015798:	46bd      	mov	sp, r7
 801579a:	bd80      	pop	{r7, pc}

0801579c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b086      	sub	sp, #24
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	60f8      	str	r0, [r7, #12]
 80157a4:	460b      	mov	r3, r1
 80157a6:	607a      	str	r2, [r7, #4]
 80157a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80157aa:	2300      	movs	r3, #0
 80157ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80157ae:	7afb      	ldrb	r3, [r7, #11]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d16e      	bne.n	8015892 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80157ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80157c2:	2b03      	cmp	r3, #3
 80157c4:	f040 8098 	bne.w	80158f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	689a      	ldr	r2, [r3, #8]
 80157cc:	693b      	ldr	r3, [r7, #16]
 80157ce:	68db      	ldr	r3, [r3, #12]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d913      	bls.n	80157fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80157d4:	693b      	ldr	r3, [r7, #16]
 80157d6:	689a      	ldr	r2, [r3, #8]
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	68db      	ldr	r3, [r3, #12]
 80157dc:	1ad2      	subs	r2, r2, r3
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80157e2:	693b      	ldr	r3, [r7, #16]
 80157e4:	68da      	ldr	r2, [r3, #12]
 80157e6:	693b      	ldr	r3, [r7, #16]
 80157e8:	689b      	ldr	r3, [r3, #8]
 80157ea:	4293      	cmp	r3, r2
 80157ec:	bf28      	it	cs
 80157ee:	4613      	movcs	r3, r2
 80157f0:	461a      	mov	r2, r3
 80157f2:	6879      	ldr	r1, [r7, #4]
 80157f4:	68f8      	ldr	r0, [r7, #12]
 80157f6:	f001 f9b4 	bl	8016b62 <USBD_CtlContinueRx>
 80157fa:	e07d      	b.n	80158f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015802:	f003 031f 	and.w	r3, r3, #31
 8015806:	2b02      	cmp	r3, #2
 8015808:	d014      	beq.n	8015834 <USBD_LL_DataOutStage+0x98>
 801580a:	2b02      	cmp	r3, #2
 801580c:	d81d      	bhi.n	801584a <USBD_LL_DataOutStage+0xae>
 801580e:	2b00      	cmp	r3, #0
 8015810:	d002      	beq.n	8015818 <USBD_LL_DataOutStage+0x7c>
 8015812:	2b01      	cmp	r3, #1
 8015814:	d003      	beq.n	801581e <USBD_LL_DataOutStage+0x82>
 8015816:	e018      	b.n	801584a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015818:	2300      	movs	r3, #0
 801581a:	75bb      	strb	r3, [r7, #22]
            break;
 801581c:	e018      	b.n	8015850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015824:	b2db      	uxtb	r3, r3
 8015826:	4619      	mov	r1, r3
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f000 fa64 	bl	8015cf6 <USBD_CoreFindIF>
 801582e:	4603      	mov	r3, r0
 8015830:	75bb      	strb	r3, [r7, #22]
            break;
 8015832:	e00d      	b.n	8015850 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801583a:	b2db      	uxtb	r3, r3
 801583c:	4619      	mov	r1, r3
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f000 fa66 	bl	8015d10 <USBD_CoreFindEP>
 8015844:	4603      	mov	r3, r0
 8015846:	75bb      	strb	r3, [r7, #22]
            break;
 8015848:	e002      	b.n	8015850 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801584a:	2300      	movs	r3, #0
 801584c:	75bb      	strb	r3, [r7, #22]
            break;
 801584e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015850:	7dbb      	ldrb	r3, [r7, #22]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d119      	bne.n	801588a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801585c:	b2db      	uxtb	r3, r3
 801585e:	2b03      	cmp	r3, #3
 8015860:	d113      	bne.n	801588a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015862:	7dba      	ldrb	r2, [r7, #22]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	32ae      	adds	r2, #174	; 0xae
 8015868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801586c:	691b      	ldr	r3, [r3, #16]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d00b      	beq.n	801588a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015872:	7dba      	ldrb	r2, [r7, #22]
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801587a:	7dba      	ldrb	r2, [r7, #22]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	32ae      	adds	r2, #174	; 0xae
 8015880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015884:	691b      	ldr	r3, [r3, #16]
 8015886:	68f8      	ldr	r0, [r7, #12]
 8015888:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f001 f97a 	bl	8016b84 <USBD_CtlSendStatus>
 8015890:	e032      	b.n	80158f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015892:	7afb      	ldrb	r3, [r7, #11]
 8015894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015898:	b2db      	uxtb	r3, r3
 801589a:	4619      	mov	r1, r3
 801589c:	68f8      	ldr	r0, [r7, #12]
 801589e:	f000 fa37 	bl	8015d10 <USBD_CoreFindEP>
 80158a2:	4603      	mov	r3, r0
 80158a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80158a6:	7dbb      	ldrb	r3, [r7, #22]
 80158a8:	2bff      	cmp	r3, #255	; 0xff
 80158aa:	d025      	beq.n	80158f8 <USBD_LL_DataOutStage+0x15c>
 80158ac:	7dbb      	ldrb	r3, [r7, #22]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d122      	bne.n	80158f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158b8:	b2db      	uxtb	r3, r3
 80158ba:	2b03      	cmp	r3, #3
 80158bc:	d117      	bne.n	80158ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80158be:	7dba      	ldrb	r2, [r7, #22]
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	32ae      	adds	r2, #174	; 0xae
 80158c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c8:	699b      	ldr	r3, [r3, #24]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d00f      	beq.n	80158ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80158ce:	7dba      	ldrb	r2, [r7, #22]
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80158d6:	7dba      	ldrb	r2, [r7, #22]
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	32ae      	adds	r2, #174	; 0xae
 80158dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158e0:	699b      	ldr	r3, [r3, #24]
 80158e2:	7afa      	ldrb	r2, [r7, #11]
 80158e4:	4611      	mov	r1, r2
 80158e6:	68f8      	ldr	r0, [r7, #12]
 80158e8:	4798      	blx	r3
 80158ea:	4603      	mov	r3, r0
 80158ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80158ee:	7dfb      	ldrb	r3, [r7, #23]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d001      	beq.n	80158f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80158f4:	7dfb      	ldrb	r3, [r7, #23]
 80158f6:	e000      	b.n	80158fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80158f8:	2300      	movs	r3, #0
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3718      	adds	r7, #24
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}

08015902 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015902:	b580      	push	{r7, lr}
 8015904:	b086      	sub	sp, #24
 8015906:	af00      	add	r7, sp, #0
 8015908:	60f8      	str	r0, [r7, #12]
 801590a:	460b      	mov	r3, r1
 801590c:	607a      	str	r2, [r7, #4]
 801590e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015910:	7afb      	ldrb	r3, [r7, #11]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d16f      	bne.n	80159f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	3314      	adds	r3, #20
 801591a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015922:	2b02      	cmp	r3, #2
 8015924:	d15a      	bne.n	80159dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	689a      	ldr	r2, [r3, #8]
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	68db      	ldr	r3, [r3, #12]
 801592e:	429a      	cmp	r2, r3
 8015930:	d914      	bls.n	801595c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	689a      	ldr	r2, [r3, #8]
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	68db      	ldr	r3, [r3, #12]
 801593a:	1ad2      	subs	r2, r2, r3
 801593c:	693b      	ldr	r3, [r7, #16]
 801593e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015940:	693b      	ldr	r3, [r7, #16]
 8015942:	689b      	ldr	r3, [r3, #8]
 8015944:	461a      	mov	r2, r3
 8015946:	6879      	ldr	r1, [r7, #4]
 8015948:	68f8      	ldr	r0, [r7, #12]
 801594a:	f001 f8dc 	bl	8016b06 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801594e:	2300      	movs	r3, #0
 8015950:	2200      	movs	r2, #0
 8015952:	2100      	movs	r1, #0
 8015954:	68f8      	ldr	r0, [r7, #12]
 8015956:	f001 fe49 	bl	80175ec <USBD_LL_PrepareReceive>
 801595a:	e03f      	b.n	80159dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	68da      	ldr	r2, [r3, #12]
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	689b      	ldr	r3, [r3, #8]
 8015964:	429a      	cmp	r2, r3
 8015966:	d11c      	bne.n	80159a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	685a      	ldr	r2, [r3, #4]
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015970:	429a      	cmp	r2, r3
 8015972:	d316      	bcc.n	80159a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	685a      	ldr	r2, [r3, #4]
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801597e:	429a      	cmp	r2, r3
 8015980:	d20f      	bcs.n	80159a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015982:	2200      	movs	r2, #0
 8015984:	2100      	movs	r1, #0
 8015986:	68f8      	ldr	r0, [r7, #12]
 8015988:	f001 f8bd 	bl	8016b06 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2200      	movs	r2, #0
 8015990:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015994:	2300      	movs	r3, #0
 8015996:	2200      	movs	r2, #0
 8015998:	2100      	movs	r1, #0
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	f001 fe26 	bl	80175ec <USBD_LL_PrepareReceive>
 80159a0:	e01c      	b.n	80159dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	2b03      	cmp	r3, #3
 80159ac:	d10f      	bne.n	80159ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159b4:	68db      	ldr	r3, [r3, #12]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d009      	beq.n	80159ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2200      	movs	r2, #0
 80159be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	68f8      	ldr	r0, [r7, #12]
 80159cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80159ce:	2180      	movs	r1, #128	; 0x80
 80159d0:	68f8      	ldr	r0, [r7, #12]
 80159d2:	f001 fd61 	bl	8017498 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80159d6:	68f8      	ldr	r0, [r7, #12]
 80159d8:	f001 f8e7 	bl	8016baa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d03a      	beq.n	8015a5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	f7ff fe42 	bl	8015670 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	2200      	movs	r2, #0
 80159f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80159f4:	e032      	b.n	8015a5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80159f6:	7afb      	ldrb	r3, [r7, #11]
 80159f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80159fc:	b2db      	uxtb	r3, r3
 80159fe:	4619      	mov	r1, r3
 8015a00:	68f8      	ldr	r0, [r7, #12]
 8015a02:	f000 f985 	bl	8015d10 <USBD_CoreFindEP>
 8015a06:	4603      	mov	r3, r0
 8015a08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a0a:	7dfb      	ldrb	r3, [r7, #23]
 8015a0c:	2bff      	cmp	r3, #255	; 0xff
 8015a0e:	d025      	beq.n	8015a5c <USBD_LL_DataInStage+0x15a>
 8015a10:	7dfb      	ldrb	r3, [r7, #23]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d122      	bne.n	8015a5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	2b03      	cmp	r3, #3
 8015a20:	d11c      	bne.n	8015a5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015a22:	7dfa      	ldrb	r2, [r7, #23]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	32ae      	adds	r2, #174	; 0xae
 8015a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a2c:	695b      	ldr	r3, [r3, #20]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d014      	beq.n	8015a5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015a32:	7dfa      	ldrb	r2, [r7, #23]
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a3a:	7dfa      	ldrb	r2, [r7, #23]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	32ae      	adds	r2, #174	; 0xae
 8015a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a44:	695b      	ldr	r3, [r3, #20]
 8015a46:	7afa      	ldrb	r2, [r7, #11]
 8015a48:	4611      	mov	r1, r2
 8015a4a:	68f8      	ldr	r0, [r7, #12]
 8015a4c:	4798      	blx	r3
 8015a4e:	4603      	mov	r3, r0
 8015a50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015a52:	7dbb      	ldrb	r3, [r7, #22]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015a58:	7dbb      	ldrb	r3, [r7, #22]
 8015a5a:	e000      	b.n	8015a5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015a5c:	2300      	movs	r3, #0
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3718      	adds	r7, #24
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}

08015a66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015a66:	b580      	push	{r7, lr}
 8015a68:	b084      	sub	sp, #16
 8015a6a:	af00      	add	r7, sp, #0
 8015a6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2201      	movs	r2, #1
 8015a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	2200      	movs	r2, #0
 8015a86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d014      	beq.n	8015acc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aa8:	685b      	ldr	r3, [r3, #4]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d00e      	beq.n	8015acc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	687a      	ldr	r2, [r7, #4]
 8015ab8:	6852      	ldr	r2, [r2, #4]
 8015aba:	b2d2      	uxtb	r2, r2
 8015abc:	4611      	mov	r1, r2
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	4798      	blx	r3
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d001      	beq.n	8015acc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015ac8:	2303      	movs	r3, #3
 8015aca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015acc:	2340      	movs	r3, #64	; 0x40
 8015ace:	2200      	movs	r2, #0
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	6878      	ldr	r0, [r7, #4]
 8015ad4:	f001 fc9b 	bl	801740e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2201      	movs	r2, #1
 8015adc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	2240      	movs	r2, #64	; 0x40
 8015ae4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ae8:	2340      	movs	r3, #64	; 0x40
 8015aea:	2200      	movs	r2, #0
 8015aec:	2180      	movs	r1, #128	; 0x80
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f001 fc8d 	bl	801740e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2201      	movs	r2, #1
 8015af8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	2240      	movs	r2, #64	; 0x40
 8015afe:	621a      	str	r2, [r3, #32]

  return ret;
 8015b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b0a:	b480      	push	{r7}
 8015b0c:	b083      	sub	sp, #12
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
 8015b12:	460b      	mov	r3, r1
 8015b14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	78fa      	ldrb	r2, [r7, #3]
 8015b1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b1c:	2300      	movs	r3, #0
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	370c      	adds	r7, #12
 8015b22:	46bd      	mov	sp, r7
 8015b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b28:	4770      	bx	lr

08015b2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b2a:	b480      	push	{r7}
 8015b2c:	b083      	sub	sp, #12
 8015b2e:	af00      	add	r7, sp, #0
 8015b30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	2b04      	cmp	r3, #4
 8015b3c:	d006      	beq.n	8015b4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b44:	b2da      	uxtb	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2204      	movs	r2, #4
 8015b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015b54:	2300      	movs	r3, #0
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015b62:	b480      	push	{r7}
 8015b64:	b083      	sub	sp, #12
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b70:	b2db      	uxtb	r3, r3
 8015b72:	2b04      	cmp	r3, #4
 8015b74:	d106      	bne.n	8015b84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015b7c:	b2da      	uxtb	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015b84:	2300      	movs	r3, #0
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	370c      	adds	r7, #12
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b90:	4770      	bx	lr

08015b92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015b92:	b580      	push	{r7, lr}
 8015b94:	b082      	sub	sp, #8
 8015b96:	af00      	add	r7, sp, #0
 8015b98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ba0:	b2db      	uxtb	r3, r3
 8015ba2:	2b03      	cmp	r3, #3
 8015ba4:	d110      	bne.n	8015bc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d00b      	beq.n	8015bc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bb6:	69db      	ldr	r3, [r3, #28]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d005      	beq.n	8015bc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bc2:	69db      	ldr	r3, [r3, #28]
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015bc8:	2300      	movs	r3, #0
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3708      	adds	r7, #8
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b082      	sub	sp, #8
 8015bd6:	af00      	add	r7, sp, #0
 8015bd8:	6078      	str	r0, [r7, #4]
 8015bda:	460b      	mov	r3, r1
 8015bdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	32ae      	adds	r2, #174	; 0xae
 8015be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	d101      	bne.n	8015bf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015bf0:	2303      	movs	r3, #3
 8015bf2:	e01c      	b.n	8015c2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bfa:	b2db      	uxtb	r3, r3
 8015bfc:	2b03      	cmp	r3, #3
 8015bfe:	d115      	bne.n	8015c2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	32ae      	adds	r2, #174	; 0xae
 8015c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c0e:	6a1b      	ldr	r3, [r3, #32]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d00b      	beq.n	8015c2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	32ae      	adds	r2, #174	; 0xae
 8015c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c22:	6a1b      	ldr	r3, [r3, #32]
 8015c24:	78fa      	ldrb	r2, [r7, #3]
 8015c26:	4611      	mov	r1, r2
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c2c:	2300      	movs	r3, #0
}
 8015c2e:	4618      	mov	r0, r3
 8015c30:	3708      	adds	r7, #8
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}

08015c36 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c36:	b580      	push	{r7, lr}
 8015c38:	b082      	sub	sp, #8
 8015c3a:	af00      	add	r7, sp, #0
 8015c3c:	6078      	str	r0, [r7, #4]
 8015c3e:	460b      	mov	r3, r1
 8015c40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	32ae      	adds	r2, #174	; 0xae
 8015c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d101      	bne.n	8015c58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c54:	2303      	movs	r3, #3
 8015c56:	e01c      	b.n	8015c92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	2b03      	cmp	r3, #3
 8015c62:	d115      	bne.n	8015c90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	32ae      	adds	r2, #174	; 0xae
 8015c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00b      	beq.n	8015c90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	32ae      	adds	r2, #174	; 0xae
 8015c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c88:	78fa      	ldrb	r2, [r7, #3]
 8015c8a:	4611      	mov	r1, r2
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c90:	2300      	movs	r3, #0
}
 8015c92:	4618      	mov	r0, r3
 8015c94:	3708      	adds	r7, #8
 8015c96:	46bd      	mov	sp, r7
 8015c98:	bd80      	pop	{r7, pc}

08015c9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015c9a:	b480      	push	{r7}
 8015c9c:	b083      	sub	sp, #12
 8015c9e:	af00      	add	r7, sp, #0
 8015ca0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ca2:	2300      	movs	r3, #0
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	370c      	adds	r7, #12
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cae:	4770      	bx	lr

08015cb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b084      	sub	sp, #16
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015cb8:	2300      	movs	r3, #0
 8015cba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	2201      	movs	r2, #1
 8015cc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d00e      	beq.n	8015cec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	687a      	ldr	r2, [r7, #4]
 8015cd8:	6852      	ldr	r2, [r2, #4]
 8015cda:	b2d2      	uxtb	r2, r2
 8015cdc:	4611      	mov	r1, r2
 8015cde:	6878      	ldr	r0, [r7, #4]
 8015ce0:	4798      	blx	r3
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d001      	beq.n	8015cec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015ce8:	2303      	movs	r3, #3
 8015cea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3710      	adds	r7, #16
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}

08015cf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015cf6:	b480      	push	{r7}
 8015cf8:	b083      	sub	sp, #12
 8015cfa:	af00      	add	r7, sp, #0
 8015cfc:	6078      	str	r0, [r7, #4]
 8015cfe:	460b      	mov	r3, r1
 8015d00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	370c      	adds	r7, #12
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0e:	4770      	bx	lr

08015d10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d10:	b480      	push	{r7}
 8015d12:	b083      	sub	sp, #12
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]
 8015d18:	460b      	mov	r3, r1
 8015d1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	370c      	adds	r7, #12
 8015d22:	46bd      	mov	sp, r7
 8015d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d28:	4770      	bx	lr

08015d2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015d2a:	b580      	push	{r7, lr}
 8015d2c:	b086      	sub	sp, #24
 8015d2e:	af00      	add	r7, sp, #0
 8015d30:	6078      	str	r0, [r7, #4]
 8015d32:	460b      	mov	r3, r1
 8015d34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015d3e:	2300      	movs	r3, #0
 8015d40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	885b      	ldrh	r3, [r3, #2]
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	b29b      	uxth	r3, r3
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d920      	bls.n	8015d94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	b29b      	uxth	r3, r3
 8015d58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015d5a:	e013      	b.n	8015d84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015d5c:	f107 030a 	add.w	r3, r7, #10
 8015d60:	4619      	mov	r1, r3
 8015d62:	6978      	ldr	r0, [r7, #20]
 8015d64:	f000 f81b 	bl	8015d9e <USBD_GetNextDesc>
 8015d68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	785b      	ldrb	r3, [r3, #1]
 8015d6e:	2b05      	cmp	r3, #5
 8015d70:	d108      	bne.n	8015d84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015d76:	693b      	ldr	r3, [r7, #16]
 8015d78:	789b      	ldrb	r3, [r3, #2]
 8015d7a:	78fa      	ldrb	r2, [r7, #3]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d008      	beq.n	8015d92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015d80:	2300      	movs	r3, #0
 8015d82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	885b      	ldrh	r3, [r3, #2]
 8015d88:	b29a      	uxth	r2, r3
 8015d8a:	897b      	ldrh	r3, [r7, #10]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d8e5      	bhi.n	8015d5c <USBD_GetEpDesc+0x32>
 8015d90:	e000      	b.n	8015d94 <USBD_GetEpDesc+0x6a>
          break;
 8015d92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015d94:	693b      	ldr	r3, [r7, #16]
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	3718      	adds	r7, #24
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015d9e:	b480      	push	{r7}
 8015da0:	b085      	sub	sp, #20
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	6078      	str	r0, [r7, #4]
 8015da6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015dac:	683b      	ldr	r3, [r7, #0]
 8015dae:	881a      	ldrh	r2, [r3, #0]
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	781b      	ldrb	r3, [r3, #0]
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	4413      	add	r3, r2
 8015db8:	b29a      	uxth	r2, r3
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	781b      	ldrb	r3, [r3, #0]
 8015dc2:	461a      	mov	r2, r3
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	4413      	add	r3, r2
 8015dc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015dca:	68fb      	ldr	r3, [r7, #12]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3714      	adds	r7, #20
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dd6:	4770      	bx	lr

08015dd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015dd8:	b480      	push	{r7}
 8015dda:	b087      	sub	sp, #28
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	3301      	adds	r3, #1
 8015dee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	781b      	ldrb	r3, [r3, #0]
 8015df4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015df6:	8a3b      	ldrh	r3, [r7, #16]
 8015df8:	021b      	lsls	r3, r3, #8
 8015dfa:	b21a      	sxth	r2, r3
 8015dfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e00:	4313      	orrs	r3, r2
 8015e02:	b21b      	sxth	r3, r3
 8015e04:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015e06:	89fb      	ldrh	r3, [r7, #14]
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	371c      	adds	r7, #28
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e12:	4770      	bx	lr

08015e14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b084      	sub	sp, #16
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
 8015e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e22:	683b      	ldr	r3, [r7, #0]
 8015e24:	781b      	ldrb	r3, [r3, #0]
 8015e26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e2a:	2b40      	cmp	r3, #64	; 0x40
 8015e2c:	d005      	beq.n	8015e3a <USBD_StdDevReq+0x26>
 8015e2e:	2b40      	cmp	r3, #64	; 0x40
 8015e30:	d857      	bhi.n	8015ee2 <USBD_StdDevReq+0xce>
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d00f      	beq.n	8015e56 <USBD_StdDevReq+0x42>
 8015e36:	2b20      	cmp	r3, #32
 8015e38:	d153      	bne.n	8015ee2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	32ae      	adds	r2, #174	; 0xae
 8015e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e48:	689b      	ldr	r3, [r3, #8]
 8015e4a:	6839      	ldr	r1, [r7, #0]
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	4798      	blx	r3
 8015e50:	4603      	mov	r3, r0
 8015e52:	73fb      	strb	r3, [r7, #15]
      break;
 8015e54:	e04a      	b.n	8015eec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	785b      	ldrb	r3, [r3, #1]
 8015e5a:	2b09      	cmp	r3, #9
 8015e5c:	d83b      	bhi.n	8015ed6 <USBD_StdDevReq+0xc2>
 8015e5e:	a201      	add	r2, pc, #4	; (adr r2, 8015e64 <USBD_StdDevReq+0x50>)
 8015e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e64:	08015eb9 	.word	0x08015eb9
 8015e68:	08015ecd 	.word	0x08015ecd
 8015e6c:	08015ed7 	.word	0x08015ed7
 8015e70:	08015ec3 	.word	0x08015ec3
 8015e74:	08015ed7 	.word	0x08015ed7
 8015e78:	08015e97 	.word	0x08015e97
 8015e7c:	08015e8d 	.word	0x08015e8d
 8015e80:	08015ed7 	.word	0x08015ed7
 8015e84:	08015eaf 	.word	0x08015eaf
 8015e88:	08015ea1 	.word	0x08015ea1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015e8c:	6839      	ldr	r1, [r7, #0]
 8015e8e:	6878      	ldr	r0, [r7, #4]
 8015e90:	f000 fa3c 	bl	801630c <USBD_GetDescriptor>
          break;
 8015e94:	e024      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015e96:	6839      	ldr	r1, [r7, #0]
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f000 fbcb 	bl	8016634 <USBD_SetAddress>
          break;
 8015e9e:	e01f      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015ea0:	6839      	ldr	r1, [r7, #0]
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fc0a 	bl	80166bc <USBD_SetConfig>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	73fb      	strb	r3, [r7, #15]
          break;
 8015eac:	e018      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015eae:	6839      	ldr	r1, [r7, #0]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f000 fcad 	bl	8016810 <USBD_GetConfig>
          break;
 8015eb6:	e013      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015eb8:	6839      	ldr	r1, [r7, #0]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 fcde 	bl	801687c <USBD_GetStatus>
          break;
 8015ec0:	e00e      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015ec2:	6839      	ldr	r1, [r7, #0]
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f000 fd0d 	bl	80168e4 <USBD_SetFeature>
          break;
 8015eca:	e009      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015ecc:	6839      	ldr	r1, [r7, #0]
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f000 fd31 	bl	8016936 <USBD_ClrFeature>
          break;
 8015ed4:	e004      	b.n	8015ee0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015ed6:	6839      	ldr	r1, [r7, #0]
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f000 fd88 	bl	80169ee <USBD_CtlError>
          break;
 8015ede:	bf00      	nop
      }
      break;
 8015ee0:	e004      	b.n	8015eec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015ee2:	6839      	ldr	r1, [r7, #0]
 8015ee4:	6878      	ldr	r0, [r7, #4]
 8015ee6:	f000 fd82 	bl	80169ee <USBD_CtlError>
      break;
 8015eea:	bf00      	nop
  }

  return ret;
 8015eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3710      	adds	r7, #16
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop

08015ef8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f02:	2300      	movs	r3, #0
 8015f04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f0e:	2b40      	cmp	r3, #64	; 0x40
 8015f10:	d005      	beq.n	8015f1e <USBD_StdItfReq+0x26>
 8015f12:	2b40      	cmp	r3, #64	; 0x40
 8015f14:	d852      	bhi.n	8015fbc <USBD_StdItfReq+0xc4>
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <USBD_StdItfReq+0x26>
 8015f1a:	2b20      	cmp	r3, #32
 8015f1c:	d14e      	bne.n	8015fbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	3b01      	subs	r3, #1
 8015f28:	2b02      	cmp	r3, #2
 8015f2a:	d840      	bhi.n	8015fae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015f2c:	683b      	ldr	r3, [r7, #0]
 8015f2e:	889b      	ldrh	r3, [r3, #4]
 8015f30:	b2db      	uxtb	r3, r3
 8015f32:	2b01      	cmp	r3, #1
 8015f34:	d836      	bhi.n	8015fa4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015f36:	683b      	ldr	r3, [r7, #0]
 8015f38:	889b      	ldrh	r3, [r3, #4]
 8015f3a:	b2db      	uxtb	r3, r3
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	6878      	ldr	r0, [r7, #4]
 8015f40:	f7ff fed9 	bl	8015cf6 <USBD_CoreFindIF>
 8015f44:	4603      	mov	r3, r0
 8015f46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f48:	7bbb      	ldrb	r3, [r7, #14]
 8015f4a:	2bff      	cmp	r3, #255	; 0xff
 8015f4c:	d01d      	beq.n	8015f8a <USBD_StdItfReq+0x92>
 8015f4e:	7bbb      	ldrb	r3, [r7, #14]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d11a      	bne.n	8015f8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015f54:	7bba      	ldrb	r2, [r7, #14]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	32ae      	adds	r2, #174	; 0xae
 8015f5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f5e:	689b      	ldr	r3, [r3, #8]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d00f      	beq.n	8015f84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015f64:	7bba      	ldrb	r2, [r7, #14]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015f6c:	7bba      	ldrb	r2, [r7, #14]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	32ae      	adds	r2, #174	; 0xae
 8015f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f76:	689b      	ldr	r3, [r3, #8]
 8015f78:	6839      	ldr	r1, [r7, #0]
 8015f7a:	6878      	ldr	r0, [r7, #4]
 8015f7c:	4798      	blx	r3
 8015f7e:	4603      	mov	r3, r0
 8015f80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f82:	e004      	b.n	8015f8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015f84:	2303      	movs	r3, #3
 8015f86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f88:	e001      	b.n	8015f8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015f8a:	2303      	movs	r3, #3
 8015f8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	88db      	ldrh	r3, [r3, #6]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d110      	bne.n	8015fb8 <USBD_StdItfReq+0xc0>
 8015f96:	7bfb      	ldrb	r3, [r7, #15]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d10d      	bne.n	8015fb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f000 fdf1 	bl	8016b84 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015fa2:	e009      	b.n	8015fb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015fa4:	6839      	ldr	r1, [r7, #0]
 8015fa6:	6878      	ldr	r0, [r7, #4]
 8015fa8:	f000 fd21 	bl	80169ee <USBD_CtlError>
          break;
 8015fac:	e004      	b.n	8015fb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015fae:	6839      	ldr	r1, [r7, #0]
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fd1c 	bl	80169ee <USBD_CtlError>
          break;
 8015fb6:	e000      	b.n	8015fba <USBD_StdItfReq+0xc2>
          break;
 8015fb8:	bf00      	nop
      }
      break;
 8015fba:	e004      	b.n	8015fc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015fbc:	6839      	ldr	r1, [r7, #0]
 8015fbe:	6878      	ldr	r0, [r7, #4]
 8015fc0:	f000 fd15 	bl	80169ee <USBD_CtlError>
      break;
 8015fc4:	bf00      	nop
  }

  return ret;
 8015fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3710      	adds	r7, #16
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b084      	sub	sp, #16
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fda:	2300      	movs	r3, #0
 8015fdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015fde:	683b      	ldr	r3, [r7, #0]
 8015fe0:	889b      	ldrh	r3, [r3, #4]
 8015fe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fe4:	683b      	ldr	r3, [r7, #0]
 8015fe6:	781b      	ldrb	r3, [r3, #0]
 8015fe8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015fec:	2b40      	cmp	r3, #64	; 0x40
 8015fee:	d007      	beq.n	8016000 <USBD_StdEPReq+0x30>
 8015ff0:	2b40      	cmp	r3, #64	; 0x40
 8015ff2:	f200 817f 	bhi.w	80162f4 <USBD_StdEPReq+0x324>
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d02a      	beq.n	8016050 <USBD_StdEPReq+0x80>
 8015ffa:	2b20      	cmp	r3, #32
 8015ffc:	f040 817a 	bne.w	80162f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016000:	7bbb      	ldrb	r3, [r7, #14]
 8016002:	4619      	mov	r1, r3
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f7ff fe83 	bl	8015d10 <USBD_CoreFindEP>
 801600a:	4603      	mov	r3, r0
 801600c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801600e:	7b7b      	ldrb	r3, [r7, #13]
 8016010:	2bff      	cmp	r3, #255	; 0xff
 8016012:	f000 8174 	beq.w	80162fe <USBD_StdEPReq+0x32e>
 8016016:	7b7b      	ldrb	r3, [r7, #13]
 8016018:	2b00      	cmp	r3, #0
 801601a:	f040 8170 	bne.w	80162fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801601e:	7b7a      	ldrb	r2, [r7, #13]
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016026:	7b7a      	ldrb	r2, [r7, #13]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	32ae      	adds	r2, #174	; 0xae
 801602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	2b00      	cmp	r3, #0
 8016034:	f000 8163 	beq.w	80162fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016038:	7b7a      	ldrb	r2, [r7, #13]
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	32ae      	adds	r2, #174	; 0xae
 801603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016042:	689b      	ldr	r3, [r3, #8]
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	4798      	blx	r3
 801604a:	4603      	mov	r3, r0
 801604c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801604e:	e156      	b.n	80162fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016050:	683b      	ldr	r3, [r7, #0]
 8016052:	785b      	ldrb	r3, [r3, #1]
 8016054:	2b03      	cmp	r3, #3
 8016056:	d008      	beq.n	801606a <USBD_StdEPReq+0x9a>
 8016058:	2b03      	cmp	r3, #3
 801605a:	f300 8145 	bgt.w	80162e8 <USBD_StdEPReq+0x318>
 801605e:	2b00      	cmp	r3, #0
 8016060:	f000 809b 	beq.w	801619a <USBD_StdEPReq+0x1ca>
 8016064:	2b01      	cmp	r3, #1
 8016066:	d03c      	beq.n	80160e2 <USBD_StdEPReq+0x112>
 8016068:	e13e      	b.n	80162e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016070:	b2db      	uxtb	r3, r3
 8016072:	2b02      	cmp	r3, #2
 8016074:	d002      	beq.n	801607c <USBD_StdEPReq+0xac>
 8016076:	2b03      	cmp	r3, #3
 8016078:	d016      	beq.n	80160a8 <USBD_StdEPReq+0xd8>
 801607a:	e02c      	b.n	80160d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801607c:	7bbb      	ldrb	r3, [r7, #14]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d00d      	beq.n	801609e <USBD_StdEPReq+0xce>
 8016082:	7bbb      	ldrb	r3, [r7, #14]
 8016084:	2b80      	cmp	r3, #128	; 0x80
 8016086:	d00a      	beq.n	801609e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016088:	7bbb      	ldrb	r3, [r7, #14]
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f001 fa03 	bl	8017498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016092:	2180      	movs	r1, #128	; 0x80
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f001 f9ff 	bl	8017498 <USBD_LL_StallEP>
 801609a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801609c:	e020      	b.n	80160e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801609e:	6839      	ldr	r1, [r7, #0]
 80160a0:	6878      	ldr	r0, [r7, #4]
 80160a2:	f000 fca4 	bl	80169ee <USBD_CtlError>
              break;
 80160a6:	e01b      	b.n	80160e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	885b      	ldrh	r3, [r3, #2]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d10e      	bne.n	80160ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80160b0:	7bbb      	ldrb	r3, [r7, #14]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d00b      	beq.n	80160ce <USBD_StdEPReq+0xfe>
 80160b6:	7bbb      	ldrb	r3, [r7, #14]
 80160b8:	2b80      	cmp	r3, #128	; 0x80
 80160ba:	d008      	beq.n	80160ce <USBD_StdEPReq+0xfe>
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	88db      	ldrh	r3, [r3, #6]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d104      	bne.n	80160ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80160c4:	7bbb      	ldrb	r3, [r7, #14]
 80160c6:	4619      	mov	r1, r3
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f001 f9e5 	bl	8017498 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	f000 fd58 	bl	8016b84 <USBD_CtlSendStatus>

              break;
 80160d4:	e004      	b.n	80160e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80160d6:	6839      	ldr	r1, [r7, #0]
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f000 fc88 	bl	80169ee <USBD_CtlError>
              break;
 80160de:	bf00      	nop
          }
          break;
 80160e0:	e107      	b.n	80162f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160e8:	b2db      	uxtb	r3, r3
 80160ea:	2b02      	cmp	r3, #2
 80160ec:	d002      	beq.n	80160f4 <USBD_StdEPReq+0x124>
 80160ee:	2b03      	cmp	r3, #3
 80160f0:	d016      	beq.n	8016120 <USBD_StdEPReq+0x150>
 80160f2:	e04b      	b.n	801618c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80160f4:	7bbb      	ldrb	r3, [r7, #14]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d00d      	beq.n	8016116 <USBD_StdEPReq+0x146>
 80160fa:	7bbb      	ldrb	r3, [r7, #14]
 80160fc:	2b80      	cmp	r3, #128	; 0x80
 80160fe:	d00a      	beq.n	8016116 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016100:	7bbb      	ldrb	r3, [r7, #14]
 8016102:	4619      	mov	r1, r3
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f001 f9c7 	bl	8017498 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801610a:	2180      	movs	r1, #128	; 0x80
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f001 f9c3 	bl	8017498 <USBD_LL_StallEP>
 8016112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016114:	e040      	b.n	8016198 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016116:	6839      	ldr	r1, [r7, #0]
 8016118:	6878      	ldr	r0, [r7, #4]
 801611a:	f000 fc68 	bl	80169ee <USBD_CtlError>
              break;
 801611e:	e03b      	b.n	8016198 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	885b      	ldrh	r3, [r3, #2]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d136      	bne.n	8016196 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016128:	7bbb      	ldrb	r3, [r7, #14]
 801612a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801612e:	2b00      	cmp	r3, #0
 8016130:	d004      	beq.n	801613c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016132:	7bbb      	ldrb	r3, [r7, #14]
 8016134:	4619      	mov	r1, r3
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f001 f9cd 	bl	80174d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801613c:	6878      	ldr	r0, [r7, #4]
 801613e:	f000 fd21 	bl	8016b84 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016142:	7bbb      	ldrb	r3, [r7, #14]
 8016144:	4619      	mov	r1, r3
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7ff fde2 	bl	8015d10 <USBD_CoreFindEP>
 801614c:	4603      	mov	r3, r0
 801614e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016150:	7b7b      	ldrb	r3, [r7, #13]
 8016152:	2bff      	cmp	r3, #255	; 0xff
 8016154:	d01f      	beq.n	8016196 <USBD_StdEPReq+0x1c6>
 8016156:	7b7b      	ldrb	r3, [r7, #13]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d11c      	bne.n	8016196 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801615c:	7b7a      	ldrb	r2, [r7, #13]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016164:	7b7a      	ldrb	r2, [r7, #13]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	32ae      	adds	r2, #174	; 0xae
 801616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d010      	beq.n	8016196 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016174:	7b7a      	ldrb	r2, [r7, #13]
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	32ae      	adds	r2, #174	; 0xae
 801617a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801617e:	689b      	ldr	r3, [r3, #8]
 8016180:	6839      	ldr	r1, [r7, #0]
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	4798      	blx	r3
 8016186:	4603      	mov	r3, r0
 8016188:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801618a:	e004      	b.n	8016196 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 fc2d 	bl	80169ee <USBD_CtlError>
              break;
 8016194:	e000      	b.n	8016198 <USBD_StdEPReq+0x1c8>
              break;
 8016196:	bf00      	nop
          }
          break;
 8016198:	e0ab      	b.n	80162f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161a0:	b2db      	uxtb	r3, r3
 80161a2:	2b02      	cmp	r3, #2
 80161a4:	d002      	beq.n	80161ac <USBD_StdEPReq+0x1dc>
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d032      	beq.n	8016210 <USBD_StdEPReq+0x240>
 80161aa:	e097      	b.n	80162dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161ac:	7bbb      	ldrb	r3, [r7, #14]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d007      	beq.n	80161c2 <USBD_StdEPReq+0x1f2>
 80161b2:	7bbb      	ldrb	r3, [r7, #14]
 80161b4:	2b80      	cmp	r3, #128	; 0x80
 80161b6:	d004      	beq.n	80161c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80161b8:	6839      	ldr	r1, [r7, #0]
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 fc17 	bl	80169ee <USBD_CtlError>
                break;
 80161c0:	e091      	b.n	80162e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	da0b      	bge.n	80161e2 <USBD_StdEPReq+0x212>
 80161ca:	7bbb      	ldrb	r3, [r7, #14]
 80161cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161d0:	4613      	mov	r3, r2
 80161d2:	009b      	lsls	r3, r3, #2
 80161d4:	4413      	add	r3, r2
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	3310      	adds	r3, #16
 80161da:	687a      	ldr	r2, [r7, #4]
 80161dc:	4413      	add	r3, r2
 80161de:	3304      	adds	r3, #4
 80161e0:	e00b      	b.n	80161fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80161e2:	7bbb      	ldrb	r3, [r7, #14]
 80161e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161e8:	4613      	mov	r3, r2
 80161ea:	009b      	lsls	r3, r3, #2
 80161ec:	4413      	add	r3, r2
 80161ee:	009b      	lsls	r3, r3, #2
 80161f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	4413      	add	r3, r2
 80161f8:	3304      	adds	r3, #4
 80161fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	2200      	movs	r2, #0
 8016200:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	2202      	movs	r2, #2
 8016206:	4619      	mov	r1, r3
 8016208:	6878      	ldr	r0, [r7, #4]
 801620a:	f000 fc61 	bl	8016ad0 <USBD_CtlSendData>
              break;
 801620e:	e06a      	b.n	80162e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016210:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016214:	2b00      	cmp	r3, #0
 8016216:	da11      	bge.n	801623c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016218:	7bbb      	ldrb	r3, [r7, #14]
 801621a:	f003 020f 	and.w	r2, r3, #15
 801621e:	6879      	ldr	r1, [r7, #4]
 8016220:	4613      	mov	r3, r2
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	4413      	add	r3, r2
 8016226:	009b      	lsls	r3, r3, #2
 8016228:	440b      	add	r3, r1
 801622a:	3324      	adds	r3, #36	; 0x24
 801622c:	881b      	ldrh	r3, [r3, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d117      	bne.n	8016262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016232:	6839      	ldr	r1, [r7, #0]
 8016234:	6878      	ldr	r0, [r7, #4]
 8016236:	f000 fbda 	bl	80169ee <USBD_CtlError>
                  break;
 801623a:	e054      	b.n	80162e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801623c:	7bbb      	ldrb	r3, [r7, #14]
 801623e:	f003 020f 	and.w	r2, r3, #15
 8016242:	6879      	ldr	r1, [r7, #4]
 8016244:	4613      	mov	r3, r2
 8016246:	009b      	lsls	r3, r3, #2
 8016248:	4413      	add	r3, r2
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	440b      	add	r3, r1
 801624e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016252:	881b      	ldrh	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d104      	bne.n	8016262 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016258:	6839      	ldr	r1, [r7, #0]
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f000 fbc7 	bl	80169ee <USBD_CtlError>
                  break;
 8016260:	e041      	b.n	80162e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016262:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016266:	2b00      	cmp	r3, #0
 8016268:	da0b      	bge.n	8016282 <USBD_StdEPReq+0x2b2>
 801626a:	7bbb      	ldrb	r3, [r7, #14]
 801626c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016270:	4613      	mov	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	4413      	add	r3, r2
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	3310      	adds	r3, #16
 801627a:	687a      	ldr	r2, [r7, #4]
 801627c:	4413      	add	r3, r2
 801627e:	3304      	adds	r3, #4
 8016280:	e00b      	b.n	801629a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016282:	7bbb      	ldrb	r3, [r7, #14]
 8016284:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016288:	4613      	mov	r3, r2
 801628a:	009b      	lsls	r3, r3, #2
 801628c:	4413      	add	r3, r2
 801628e:	009b      	lsls	r3, r3, #2
 8016290:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016294:	687a      	ldr	r2, [r7, #4]
 8016296:	4413      	add	r3, r2
 8016298:	3304      	adds	r3, #4
 801629a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801629c:	7bbb      	ldrb	r3, [r7, #14]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d002      	beq.n	80162a8 <USBD_StdEPReq+0x2d8>
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
 80162a4:	2b80      	cmp	r3, #128	; 0x80
 80162a6:	d103      	bne.n	80162b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	2200      	movs	r2, #0
 80162ac:	601a      	str	r2, [r3, #0]
 80162ae:	e00e      	b.n	80162ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80162b0:	7bbb      	ldrb	r3, [r7, #14]
 80162b2:	4619      	mov	r1, r3
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f001 f92d 	bl	8017514 <USBD_LL_IsStallEP>
 80162ba:	4603      	mov	r3, r0
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d003      	beq.n	80162c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	2201      	movs	r2, #1
 80162c4:	601a      	str	r2, [r3, #0]
 80162c6:	e002      	b.n	80162ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	2200      	movs	r2, #0
 80162cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162ce:	68bb      	ldr	r3, [r7, #8]
 80162d0:	2202      	movs	r2, #2
 80162d2:	4619      	mov	r1, r3
 80162d4:	6878      	ldr	r0, [r7, #4]
 80162d6:	f000 fbfb 	bl	8016ad0 <USBD_CtlSendData>
              break;
 80162da:	e004      	b.n	80162e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80162dc:	6839      	ldr	r1, [r7, #0]
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f000 fb85 	bl	80169ee <USBD_CtlError>
              break;
 80162e4:	bf00      	nop
          }
          break;
 80162e6:	e004      	b.n	80162f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80162e8:	6839      	ldr	r1, [r7, #0]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 fb7f 	bl	80169ee <USBD_CtlError>
          break;
 80162f0:	bf00      	nop
      }
      break;
 80162f2:	e005      	b.n	8016300 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80162f4:	6839      	ldr	r1, [r7, #0]
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f000 fb79 	bl	80169ee <USBD_CtlError>
      break;
 80162fc:	e000      	b.n	8016300 <USBD_StdEPReq+0x330>
      break;
 80162fe:	bf00      	nop
  }

  return ret;
 8016300:	7bfb      	ldrb	r3, [r7, #15]
}
 8016302:	4618      	mov	r0, r3
 8016304:	3710      	adds	r7, #16
 8016306:	46bd      	mov	sp, r7
 8016308:	bd80      	pop	{r7, pc}
	...

0801630c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016316:	2300      	movs	r3, #0
 8016318:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801631a:	2300      	movs	r3, #0
 801631c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801631e:	2300      	movs	r3, #0
 8016320:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016322:	683b      	ldr	r3, [r7, #0]
 8016324:	885b      	ldrh	r3, [r3, #2]
 8016326:	0a1b      	lsrs	r3, r3, #8
 8016328:	b29b      	uxth	r3, r3
 801632a:	3b01      	subs	r3, #1
 801632c:	2b0e      	cmp	r3, #14
 801632e:	f200 8152 	bhi.w	80165d6 <USBD_GetDescriptor+0x2ca>
 8016332:	a201      	add	r2, pc, #4	; (adr r2, 8016338 <USBD_GetDescriptor+0x2c>)
 8016334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016338:	080163a9 	.word	0x080163a9
 801633c:	080163c1 	.word	0x080163c1
 8016340:	08016401 	.word	0x08016401
 8016344:	080165d7 	.word	0x080165d7
 8016348:	080165d7 	.word	0x080165d7
 801634c:	08016577 	.word	0x08016577
 8016350:	080165a3 	.word	0x080165a3
 8016354:	080165d7 	.word	0x080165d7
 8016358:	080165d7 	.word	0x080165d7
 801635c:	080165d7 	.word	0x080165d7
 8016360:	080165d7 	.word	0x080165d7
 8016364:	080165d7 	.word	0x080165d7
 8016368:	080165d7 	.word	0x080165d7
 801636c:	080165d7 	.word	0x080165d7
 8016370:	08016375 	.word	0x08016375
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801637a:	69db      	ldr	r3, [r3, #28]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d00b      	beq.n	8016398 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016386:	69db      	ldr	r3, [r3, #28]
 8016388:	687a      	ldr	r2, [r7, #4]
 801638a:	7c12      	ldrb	r2, [r2, #16]
 801638c:	f107 0108 	add.w	r1, r7, #8
 8016390:	4610      	mov	r0, r2
 8016392:	4798      	blx	r3
 8016394:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016396:	e126      	b.n	80165e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016398:	6839      	ldr	r1, [r7, #0]
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f000 fb27 	bl	80169ee <USBD_CtlError>
        err++;
 80163a0:	7afb      	ldrb	r3, [r7, #11]
 80163a2:	3301      	adds	r3, #1
 80163a4:	72fb      	strb	r3, [r7, #11]
      break;
 80163a6:	e11e      	b.n	80165e6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	7c12      	ldrb	r2, [r2, #16]
 80163b4:	f107 0108 	add.w	r1, r7, #8
 80163b8:	4610      	mov	r0, r2
 80163ba:	4798      	blx	r3
 80163bc:	60f8      	str	r0, [r7, #12]
      break;
 80163be:	e112      	b.n	80165e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	7c1b      	ldrb	r3, [r3, #16]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d10d      	bne.n	80163e4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163d0:	f107 0208 	add.w	r2, r7, #8
 80163d4:	4610      	mov	r0, r2
 80163d6:	4798      	blx	r3
 80163d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	3301      	adds	r3, #1
 80163de:	2202      	movs	r2, #2
 80163e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80163e2:	e100      	b.n	80165e6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163ec:	f107 0208 	add.w	r2, r7, #8
 80163f0:	4610      	mov	r0, r2
 80163f2:	4798      	blx	r3
 80163f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	3301      	adds	r3, #1
 80163fa:	2202      	movs	r2, #2
 80163fc:	701a      	strb	r2, [r3, #0]
      break;
 80163fe:	e0f2      	b.n	80165e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	885b      	ldrh	r3, [r3, #2]
 8016404:	b2db      	uxtb	r3, r3
 8016406:	2b05      	cmp	r3, #5
 8016408:	f200 80ac 	bhi.w	8016564 <USBD_GetDescriptor+0x258>
 801640c:	a201      	add	r2, pc, #4	; (adr r2, 8016414 <USBD_GetDescriptor+0x108>)
 801640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016412:	bf00      	nop
 8016414:	0801642d 	.word	0x0801642d
 8016418:	08016461 	.word	0x08016461
 801641c:	08016495 	.word	0x08016495
 8016420:	080164c9 	.word	0x080164c9
 8016424:	080164fd 	.word	0x080164fd
 8016428:	08016531 	.word	0x08016531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d00b      	beq.n	8016450 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	687a      	ldr	r2, [r7, #4]
 8016442:	7c12      	ldrb	r2, [r2, #16]
 8016444:	f107 0108 	add.w	r1, r7, #8
 8016448:	4610      	mov	r0, r2
 801644a:	4798      	blx	r3
 801644c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801644e:	e091      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016450:	6839      	ldr	r1, [r7, #0]
 8016452:	6878      	ldr	r0, [r7, #4]
 8016454:	f000 facb 	bl	80169ee <USBD_CtlError>
            err++;
 8016458:	7afb      	ldrb	r3, [r7, #11]
 801645a:	3301      	adds	r3, #1
 801645c:	72fb      	strb	r3, [r7, #11]
          break;
 801645e:	e089      	b.n	8016574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016466:	689b      	ldr	r3, [r3, #8]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00b      	beq.n	8016484 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	7c12      	ldrb	r2, [r2, #16]
 8016478:	f107 0108 	add.w	r1, r7, #8
 801647c:	4610      	mov	r0, r2
 801647e:	4798      	blx	r3
 8016480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016482:	e077      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016484:	6839      	ldr	r1, [r7, #0]
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f000 fab1 	bl	80169ee <USBD_CtlError>
            err++;
 801648c:	7afb      	ldrb	r3, [r7, #11]
 801648e:	3301      	adds	r3, #1
 8016490:	72fb      	strb	r3, [r7, #11]
          break;
 8016492:	e06f      	b.n	8016574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801649a:	68db      	ldr	r3, [r3, #12]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d00b      	beq.n	80164b8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	7c12      	ldrb	r2, [r2, #16]
 80164ac:	f107 0108 	add.w	r1, r7, #8
 80164b0:	4610      	mov	r0, r2
 80164b2:	4798      	blx	r3
 80164b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164b6:	e05d      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 fa97 	bl	80169ee <USBD_CtlError>
            err++;
 80164c0:	7afb      	ldrb	r3, [r7, #11]
 80164c2:	3301      	adds	r3, #1
 80164c4:	72fb      	strb	r3, [r7, #11]
          break;
 80164c6:	e055      	b.n	8016574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ce:	691b      	ldr	r3, [r3, #16]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00b      	beq.n	80164ec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164da:	691b      	ldr	r3, [r3, #16]
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	7c12      	ldrb	r2, [r2, #16]
 80164e0:	f107 0108 	add.w	r1, r7, #8
 80164e4:	4610      	mov	r0, r2
 80164e6:	4798      	blx	r3
 80164e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164ea:	e043      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164ec:	6839      	ldr	r1, [r7, #0]
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f000 fa7d 	bl	80169ee <USBD_CtlError>
            err++;
 80164f4:	7afb      	ldrb	r3, [r7, #11]
 80164f6:	3301      	adds	r3, #1
 80164f8:	72fb      	strb	r3, [r7, #11]
          break;
 80164fa:	e03b      	b.n	8016574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016502:	695b      	ldr	r3, [r3, #20]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d00b      	beq.n	8016520 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801650e:	695b      	ldr	r3, [r3, #20]
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	7c12      	ldrb	r2, [r2, #16]
 8016514:	f107 0108 	add.w	r1, r7, #8
 8016518:	4610      	mov	r0, r2
 801651a:	4798      	blx	r3
 801651c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801651e:	e029      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016520:	6839      	ldr	r1, [r7, #0]
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f000 fa63 	bl	80169ee <USBD_CtlError>
            err++;
 8016528:	7afb      	ldrb	r3, [r7, #11]
 801652a:	3301      	adds	r3, #1
 801652c:	72fb      	strb	r3, [r7, #11]
          break;
 801652e:	e021      	b.n	8016574 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016536:	699b      	ldr	r3, [r3, #24]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d00b      	beq.n	8016554 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016542:	699b      	ldr	r3, [r3, #24]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	7c12      	ldrb	r2, [r2, #16]
 8016548:	f107 0108 	add.w	r1, r7, #8
 801654c:	4610      	mov	r0, r2
 801654e:	4798      	blx	r3
 8016550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016552:	e00f      	b.n	8016574 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016554:	6839      	ldr	r1, [r7, #0]
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa49 	bl	80169ee <USBD_CtlError>
            err++;
 801655c:	7afb      	ldrb	r3, [r7, #11]
 801655e:	3301      	adds	r3, #1
 8016560:	72fb      	strb	r3, [r7, #11]
          break;
 8016562:	e007      	b.n	8016574 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016564:	6839      	ldr	r1, [r7, #0]
 8016566:	6878      	ldr	r0, [r7, #4]
 8016568:	f000 fa41 	bl	80169ee <USBD_CtlError>
          err++;
 801656c:	7afb      	ldrb	r3, [r7, #11]
 801656e:	3301      	adds	r3, #1
 8016570:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016572:	bf00      	nop
      }
      break;
 8016574:	e037      	b.n	80165e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	7c1b      	ldrb	r3, [r3, #16]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d109      	bne.n	8016592 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016586:	f107 0208 	add.w	r2, r7, #8
 801658a:	4610      	mov	r0, r2
 801658c:	4798      	blx	r3
 801658e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016590:	e029      	b.n	80165e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016592:	6839      	ldr	r1, [r7, #0]
 8016594:	6878      	ldr	r0, [r7, #4]
 8016596:	f000 fa2a 	bl	80169ee <USBD_CtlError>
        err++;
 801659a:	7afb      	ldrb	r3, [r7, #11]
 801659c:	3301      	adds	r3, #1
 801659e:	72fb      	strb	r3, [r7, #11]
      break;
 80165a0:	e021      	b.n	80165e6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	7c1b      	ldrb	r3, [r3, #16]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d10d      	bne.n	80165c6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165b2:	f107 0208 	add.w	r2, r7, #8
 80165b6:	4610      	mov	r0, r2
 80165b8:	4798      	blx	r3
 80165ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	3301      	adds	r3, #1
 80165c0:	2207      	movs	r2, #7
 80165c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165c4:	e00f      	b.n	80165e6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80165c6:	6839      	ldr	r1, [r7, #0]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fa10 	bl	80169ee <USBD_CtlError>
        err++;
 80165ce:	7afb      	ldrb	r3, [r7, #11]
 80165d0:	3301      	adds	r3, #1
 80165d2:	72fb      	strb	r3, [r7, #11]
      break;
 80165d4:	e007      	b.n	80165e6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80165d6:	6839      	ldr	r1, [r7, #0]
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f000 fa08 	bl	80169ee <USBD_CtlError>
      err++;
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	3301      	adds	r3, #1
 80165e2:	72fb      	strb	r3, [r7, #11]
      break;
 80165e4:	bf00      	nop
  }

  if (err != 0U)
 80165e6:	7afb      	ldrb	r3, [r7, #11]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d11e      	bne.n	801662a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80165ec:	683b      	ldr	r3, [r7, #0]
 80165ee:	88db      	ldrh	r3, [r3, #6]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d016      	beq.n	8016622 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80165f4:	893b      	ldrh	r3, [r7, #8]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d00e      	beq.n	8016618 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	88da      	ldrh	r2, [r3, #6]
 80165fe:	893b      	ldrh	r3, [r7, #8]
 8016600:	4293      	cmp	r3, r2
 8016602:	bf28      	it	cs
 8016604:	4613      	movcs	r3, r2
 8016606:	b29b      	uxth	r3, r3
 8016608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801660a:	893b      	ldrh	r3, [r7, #8]
 801660c:	461a      	mov	r2, r3
 801660e:	68f9      	ldr	r1, [r7, #12]
 8016610:	6878      	ldr	r0, [r7, #4]
 8016612:	f000 fa5d 	bl	8016ad0 <USBD_CtlSendData>
 8016616:	e009      	b.n	801662c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016618:	6839      	ldr	r1, [r7, #0]
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f000 f9e7 	bl	80169ee <USBD_CtlError>
 8016620:	e004      	b.n	801662c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016622:	6878      	ldr	r0, [r7, #4]
 8016624:	f000 faae 	bl	8016b84 <USBD_CtlSendStatus>
 8016628:	e000      	b.n	801662c <USBD_GetDescriptor+0x320>
    return;
 801662a:	bf00      	nop
  }
}
 801662c:	3710      	adds	r7, #16
 801662e:	46bd      	mov	sp, r7
 8016630:	bd80      	pop	{r7, pc}
 8016632:	bf00      	nop

08016634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016634:	b580      	push	{r7, lr}
 8016636:	b084      	sub	sp, #16
 8016638:	af00      	add	r7, sp, #0
 801663a:	6078      	str	r0, [r7, #4]
 801663c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	889b      	ldrh	r3, [r3, #4]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d131      	bne.n	80166aa <USBD_SetAddress+0x76>
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	88db      	ldrh	r3, [r3, #6]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d12d      	bne.n	80166aa <USBD_SetAddress+0x76>
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	885b      	ldrh	r3, [r3, #2]
 8016652:	2b7f      	cmp	r3, #127	; 0x7f
 8016654:	d829      	bhi.n	80166aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016656:	683b      	ldr	r3, [r7, #0]
 8016658:	885b      	ldrh	r3, [r3, #2]
 801665a:	b2db      	uxtb	r3, r3
 801665c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016668:	b2db      	uxtb	r3, r3
 801666a:	2b03      	cmp	r3, #3
 801666c:	d104      	bne.n	8016678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801666e:	6839      	ldr	r1, [r7, #0]
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 f9bc 	bl	80169ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016676:	e01d      	b.n	80166b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	7bfa      	ldrb	r2, [r7, #15]
 801667c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016680:	7bfb      	ldrb	r3, [r7, #15]
 8016682:	4619      	mov	r1, r3
 8016684:	6878      	ldr	r0, [r7, #4]
 8016686:	f000 ff71 	bl	801756c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f000 fa7a 	bl	8016b84 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016690:	7bfb      	ldrb	r3, [r7, #15]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d004      	beq.n	80166a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	2202      	movs	r2, #2
 801669a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801669e:	e009      	b.n	80166b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	2201      	movs	r2, #1
 80166a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166a8:	e004      	b.n	80166b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80166aa:	6839      	ldr	r1, [r7, #0]
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f000 f99e 	bl	80169ee <USBD_CtlError>
  }
}
 80166b2:	bf00      	nop
 80166b4:	bf00      	nop
 80166b6:	3710      	adds	r7, #16
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}

080166bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166bc:	b580      	push	{r7, lr}
 80166be:	b084      	sub	sp, #16
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166c6:	2300      	movs	r3, #0
 80166c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	885b      	ldrh	r3, [r3, #2]
 80166ce:	b2da      	uxtb	r2, r3
 80166d0:	4b4e      	ldr	r3, [pc, #312]	; (801680c <USBD_SetConfig+0x150>)
 80166d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80166d4:	4b4d      	ldr	r3, [pc, #308]	; (801680c <USBD_SetConfig+0x150>)
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	2b01      	cmp	r3, #1
 80166da:	d905      	bls.n	80166e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80166dc:	6839      	ldr	r1, [r7, #0]
 80166de:	6878      	ldr	r0, [r7, #4]
 80166e0:	f000 f985 	bl	80169ee <USBD_CtlError>
    return USBD_FAIL;
 80166e4:	2303      	movs	r3, #3
 80166e6:	e08c      	b.n	8016802 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166ee:	b2db      	uxtb	r3, r3
 80166f0:	2b02      	cmp	r3, #2
 80166f2:	d002      	beq.n	80166fa <USBD_SetConfig+0x3e>
 80166f4:	2b03      	cmp	r3, #3
 80166f6:	d029      	beq.n	801674c <USBD_SetConfig+0x90>
 80166f8:	e075      	b.n	80167e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80166fa:	4b44      	ldr	r3, [pc, #272]	; (801680c <USBD_SetConfig+0x150>)
 80166fc:	781b      	ldrb	r3, [r3, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d020      	beq.n	8016744 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016702:	4b42      	ldr	r3, [pc, #264]	; (801680c <USBD_SetConfig+0x150>)
 8016704:	781b      	ldrb	r3, [r3, #0]
 8016706:	461a      	mov	r2, r3
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801670c:	4b3f      	ldr	r3, [pc, #252]	; (801680c <USBD_SetConfig+0x150>)
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	4619      	mov	r1, r3
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f7fe ffb7 	bl	8015686 <USBD_SetClassConfig>
 8016718:	4603      	mov	r3, r0
 801671a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801671c:	7bfb      	ldrb	r3, [r7, #15]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d008      	beq.n	8016734 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016722:	6839      	ldr	r1, [r7, #0]
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 f962 	bl	80169ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2202      	movs	r2, #2
 801672e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016732:	e065      	b.n	8016800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f000 fa25 	bl	8016b84 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	2203      	movs	r2, #3
 801673e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016742:	e05d      	b.n	8016800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016744:	6878      	ldr	r0, [r7, #4]
 8016746:	f000 fa1d 	bl	8016b84 <USBD_CtlSendStatus>
      break;
 801674a:	e059      	b.n	8016800 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801674c:	4b2f      	ldr	r3, [pc, #188]	; (801680c <USBD_SetConfig+0x150>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d112      	bne.n	801677a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	2202      	movs	r2, #2
 8016758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801675c:	4b2b      	ldr	r3, [pc, #172]	; (801680c <USBD_SetConfig+0x150>)
 801675e:	781b      	ldrb	r3, [r3, #0]
 8016760:	461a      	mov	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016766:	4b29      	ldr	r3, [pc, #164]	; (801680c <USBD_SetConfig+0x150>)
 8016768:	781b      	ldrb	r3, [r3, #0]
 801676a:	4619      	mov	r1, r3
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f7fe ffa6 	bl	80156be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016772:	6878      	ldr	r0, [r7, #4]
 8016774:	f000 fa06 	bl	8016b84 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016778:	e042      	b.n	8016800 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801677a:	4b24      	ldr	r3, [pc, #144]	; (801680c <USBD_SetConfig+0x150>)
 801677c:	781b      	ldrb	r3, [r3, #0]
 801677e:	461a      	mov	r2, r3
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	685b      	ldr	r3, [r3, #4]
 8016784:	429a      	cmp	r2, r3
 8016786:	d02a      	beq.n	80167de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	685b      	ldr	r3, [r3, #4]
 801678c:	b2db      	uxtb	r3, r3
 801678e:	4619      	mov	r1, r3
 8016790:	6878      	ldr	r0, [r7, #4]
 8016792:	f7fe ff94 	bl	80156be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016796:	4b1d      	ldr	r3, [pc, #116]	; (801680c <USBD_SetConfig+0x150>)
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	461a      	mov	r2, r3
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167a0:	4b1a      	ldr	r3, [pc, #104]	; (801680c <USBD_SetConfig+0x150>)
 80167a2:	781b      	ldrb	r3, [r3, #0]
 80167a4:	4619      	mov	r1, r3
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f7fe ff6d 	bl	8015686 <USBD_SetClassConfig>
 80167ac:	4603      	mov	r3, r0
 80167ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80167b0:	7bfb      	ldrb	r3, [r7, #15]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d00f      	beq.n	80167d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80167b6:	6839      	ldr	r1, [r7, #0]
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f000 f918 	bl	80169ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	685b      	ldr	r3, [r3, #4]
 80167c2:	b2db      	uxtb	r3, r3
 80167c4:	4619      	mov	r1, r3
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f7fe ff79 	bl	80156be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	2202      	movs	r2, #2
 80167d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80167d4:	e014      	b.n	8016800 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 f9d4 	bl	8016b84 <USBD_CtlSendStatus>
      break;
 80167dc:	e010      	b.n	8016800 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f000 f9d0 	bl	8016b84 <USBD_CtlSendStatus>
      break;
 80167e4:	e00c      	b.n	8016800 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80167e6:	6839      	ldr	r1, [r7, #0]
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f000 f900 	bl	80169ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167ee:	4b07      	ldr	r3, [pc, #28]	; (801680c <USBD_SetConfig+0x150>)
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	4619      	mov	r1, r3
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7fe ff62 	bl	80156be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80167fa:	2303      	movs	r3, #3
 80167fc:	73fb      	strb	r3, [r7, #15]
      break;
 80167fe:	bf00      	nop
  }

  return ret;
 8016800:	7bfb      	ldrb	r3, [r7, #15]
}
 8016802:	4618      	mov	r0, r3
 8016804:	3710      	adds	r7, #16
 8016806:	46bd      	mov	sp, r7
 8016808:	bd80      	pop	{r7, pc}
 801680a:	bf00      	nop
 801680c:	24001704 	.word	0x24001704

08016810 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	88db      	ldrh	r3, [r3, #6]
 801681e:	2b01      	cmp	r3, #1
 8016820:	d004      	beq.n	801682c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016822:	6839      	ldr	r1, [r7, #0]
 8016824:	6878      	ldr	r0, [r7, #4]
 8016826:	f000 f8e2 	bl	80169ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801682a:	e023      	b.n	8016874 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016832:	b2db      	uxtb	r3, r3
 8016834:	2b02      	cmp	r3, #2
 8016836:	dc02      	bgt.n	801683e <USBD_GetConfig+0x2e>
 8016838:	2b00      	cmp	r3, #0
 801683a:	dc03      	bgt.n	8016844 <USBD_GetConfig+0x34>
 801683c:	e015      	b.n	801686a <USBD_GetConfig+0x5a>
 801683e:	2b03      	cmp	r3, #3
 8016840:	d00b      	beq.n	801685a <USBD_GetConfig+0x4a>
 8016842:	e012      	b.n	801686a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	2200      	movs	r2, #0
 8016848:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3308      	adds	r3, #8
 801684e:	2201      	movs	r2, #1
 8016850:	4619      	mov	r1, r3
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f000 f93c 	bl	8016ad0 <USBD_CtlSendData>
        break;
 8016858:	e00c      	b.n	8016874 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	3304      	adds	r3, #4
 801685e:	2201      	movs	r2, #1
 8016860:	4619      	mov	r1, r3
 8016862:	6878      	ldr	r0, [r7, #4]
 8016864:	f000 f934 	bl	8016ad0 <USBD_CtlSendData>
        break;
 8016868:	e004      	b.n	8016874 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801686a:	6839      	ldr	r1, [r7, #0]
 801686c:	6878      	ldr	r0, [r7, #4]
 801686e:	f000 f8be 	bl	80169ee <USBD_CtlError>
        break;
 8016872:	bf00      	nop
}
 8016874:	bf00      	nop
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b082      	sub	sp, #8
 8016880:	af00      	add	r7, sp, #0
 8016882:	6078      	str	r0, [r7, #4]
 8016884:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801688c:	b2db      	uxtb	r3, r3
 801688e:	3b01      	subs	r3, #1
 8016890:	2b02      	cmp	r3, #2
 8016892:	d81e      	bhi.n	80168d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	88db      	ldrh	r3, [r3, #6]
 8016898:	2b02      	cmp	r3, #2
 801689a:	d004      	beq.n	80168a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801689c:	6839      	ldr	r1, [r7, #0]
 801689e:	6878      	ldr	r0, [r7, #4]
 80168a0:	f000 f8a5 	bl	80169ee <USBD_CtlError>
        break;
 80168a4:	e01a      	b.n	80168dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	2201      	movs	r2, #1
 80168aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d005      	beq.n	80168c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	68db      	ldr	r3, [r3, #12]
 80168ba:	f043 0202 	orr.w	r2, r3, #2
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	330c      	adds	r3, #12
 80168c6:	2202      	movs	r2, #2
 80168c8:	4619      	mov	r1, r3
 80168ca:	6878      	ldr	r0, [r7, #4]
 80168cc:	f000 f900 	bl	8016ad0 <USBD_CtlSendData>
      break;
 80168d0:	e004      	b.n	80168dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80168d2:	6839      	ldr	r1, [r7, #0]
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f000 f88a 	bl	80169ee <USBD_CtlError>
      break;
 80168da:	bf00      	nop
  }
}
 80168dc:	bf00      	nop
 80168de:	3708      	adds	r7, #8
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	885b      	ldrh	r3, [r3, #2]
 80168f2:	2b01      	cmp	r3, #1
 80168f4:	d107      	bne.n	8016906 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	2201      	movs	r2, #1
 80168fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f000 f940 	bl	8016b84 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016904:	e013      	b.n	801692e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	885b      	ldrh	r3, [r3, #2]
 801690a:	2b02      	cmp	r3, #2
 801690c:	d10b      	bne.n	8016926 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801690e:	683b      	ldr	r3, [r7, #0]
 8016910:	889b      	ldrh	r3, [r3, #4]
 8016912:	0a1b      	lsrs	r3, r3, #8
 8016914:	b29b      	uxth	r3, r3
 8016916:	b2da      	uxtb	r2, r3
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f000 f930 	bl	8016b84 <USBD_CtlSendStatus>
}
 8016924:	e003      	b.n	801692e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016926:	6839      	ldr	r1, [r7, #0]
 8016928:	6878      	ldr	r0, [r7, #4]
 801692a:	f000 f860 	bl	80169ee <USBD_CtlError>
}
 801692e:	bf00      	nop
 8016930:	3708      	adds	r7, #8
 8016932:	46bd      	mov	sp, r7
 8016934:	bd80      	pop	{r7, pc}

08016936 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016936:	b580      	push	{r7, lr}
 8016938:	b082      	sub	sp, #8
 801693a:	af00      	add	r7, sp, #0
 801693c:	6078      	str	r0, [r7, #4]
 801693e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016946:	b2db      	uxtb	r3, r3
 8016948:	3b01      	subs	r3, #1
 801694a:	2b02      	cmp	r3, #2
 801694c:	d80b      	bhi.n	8016966 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	885b      	ldrh	r3, [r3, #2]
 8016952:	2b01      	cmp	r3, #1
 8016954:	d10c      	bne.n	8016970 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2200      	movs	r2, #0
 801695a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801695e:	6878      	ldr	r0, [r7, #4]
 8016960:	f000 f910 	bl	8016b84 <USBD_CtlSendStatus>
      }
      break;
 8016964:	e004      	b.n	8016970 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016966:	6839      	ldr	r1, [r7, #0]
 8016968:	6878      	ldr	r0, [r7, #4]
 801696a:	f000 f840 	bl	80169ee <USBD_CtlError>
      break;
 801696e:	e000      	b.n	8016972 <USBD_ClrFeature+0x3c>
      break;
 8016970:	bf00      	nop
  }
}
 8016972:	bf00      	nop
 8016974:	3708      	adds	r7, #8
 8016976:	46bd      	mov	sp, r7
 8016978:	bd80      	pop	{r7, pc}

0801697a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801697a:	b580      	push	{r7, lr}
 801697c:	b084      	sub	sp, #16
 801697e:	af00      	add	r7, sp, #0
 8016980:	6078      	str	r0, [r7, #4]
 8016982:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	781a      	ldrb	r2, [r3, #0]
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	3301      	adds	r3, #1
 8016994:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	781a      	ldrb	r2, [r3, #0]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	3301      	adds	r3, #1
 80169a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80169a4:	68f8      	ldr	r0, [r7, #12]
 80169a6:	f7ff fa17 	bl	8015dd8 <SWAPBYTE>
 80169aa:	4603      	mov	r3, r0
 80169ac:	461a      	mov	r2, r3
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	3301      	adds	r3, #1
 80169b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	3301      	adds	r3, #1
 80169bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80169be:	68f8      	ldr	r0, [r7, #12]
 80169c0:	f7ff fa0a 	bl	8015dd8 <SWAPBYTE>
 80169c4:	4603      	mov	r3, r0
 80169c6:	461a      	mov	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	3301      	adds	r3, #1
 80169d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	3301      	adds	r3, #1
 80169d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80169d8:	68f8      	ldr	r0, [r7, #12]
 80169da:	f7ff f9fd 	bl	8015dd8 <SWAPBYTE>
 80169de:	4603      	mov	r3, r0
 80169e0:	461a      	mov	r2, r3
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	80da      	strh	r2, [r3, #6]
}
 80169e6:	bf00      	nop
 80169e8:	3710      	adds	r7, #16
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}

080169ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169ee:	b580      	push	{r7, lr}
 80169f0:	b082      	sub	sp, #8
 80169f2:	af00      	add	r7, sp, #0
 80169f4:	6078      	str	r0, [r7, #4]
 80169f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80169f8:	2180      	movs	r1, #128	; 0x80
 80169fa:	6878      	ldr	r0, [r7, #4]
 80169fc:	f000 fd4c 	bl	8017498 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a00:	2100      	movs	r1, #0
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 fd48 	bl	8017498 <USBD_LL_StallEP>
}
 8016a08:	bf00      	nop
 8016a0a:	3708      	adds	r7, #8
 8016a0c:	46bd      	mov	sp, r7
 8016a0e:	bd80      	pop	{r7, pc}

08016a10 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a10:	b580      	push	{r7, lr}
 8016a12:	b086      	sub	sp, #24
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	60f8      	str	r0, [r7, #12]
 8016a18:	60b9      	str	r1, [r7, #8]
 8016a1a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d036      	beq.n	8016a94 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a2a:	6938      	ldr	r0, [r7, #16]
 8016a2c:	f000 f836 	bl	8016a9c <USBD_GetLen>
 8016a30:	4603      	mov	r3, r0
 8016a32:	3301      	adds	r3, #1
 8016a34:	b29b      	uxth	r3, r3
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	b29a      	uxth	r2, r3
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a3e:	7dfb      	ldrb	r3, [r7, #23]
 8016a40:	68ba      	ldr	r2, [r7, #8]
 8016a42:	4413      	add	r3, r2
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	7812      	ldrb	r2, [r2, #0]
 8016a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a4a:	7dfb      	ldrb	r3, [r7, #23]
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016a50:	7dfb      	ldrb	r3, [r7, #23]
 8016a52:	68ba      	ldr	r2, [r7, #8]
 8016a54:	4413      	add	r3, r2
 8016a56:	2203      	movs	r2, #3
 8016a58:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a5a:	7dfb      	ldrb	r3, [r7, #23]
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016a60:	e013      	b.n	8016a8a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016a62:	7dfb      	ldrb	r3, [r7, #23]
 8016a64:	68ba      	ldr	r2, [r7, #8]
 8016a66:	4413      	add	r3, r2
 8016a68:	693a      	ldr	r2, [r7, #16]
 8016a6a:	7812      	ldrb	r2, [r2, #0]
 8016a6c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016a6e:	693b      	ldr	r3, [r7, #16]
 8016a70:	3301      	adds	r3, #1
 8016a72:	613b      	str	r3, [r7, #16]
    idx++;
 8016a74:	7dfb      	ldrb	r3, [r7, #23]
 8016a76:	3301      	adds	r3, #1
 8016a78:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016a7a:	7dfb      	ldrb	r3, [r7, #23]
 8016a7c:	68ba      	ldr	r2, [r7, #8]
 8016a7e:	4413      	add	r3, r2
 8016a80:	2200      	movs	r2, #0
 8016a82:	701a      	strb	r2, [r3, #0]
    idx++;
 8016a84:	7dfb      	ldrb	r3, [r7, #23]
 8016a86:	3301      	adds	r3, #1
 8016a88:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016a8a:	693b      	ldr	r3, [r7, #16]
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d1e7      	bne.n	8016a62 <USBD_GetString+0x52>
 8016a92:	e000      	b.n	8016a96 <USBD_GetString+0x86>
    return;
 8016a94:	bf00      	nop
  }
}
 8016a96:	3718      	adds	r7, #24
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd80      	pop	{r7, pc}

08016a9c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016a9c:	b480      	push	{r7}
 8016a9e:	b085      	sub	sp, #20
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016aac:	e005      	b.n	8016aba <USBD_GetLen+0x1e>
  {
    len++;
 8016aae:	7bfb      	ldrb	r3, [r7, #15]
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	3301      	adds	r3, #1
 8016ab8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016aba:	68bb      	ldr	r3, [r7, #8]
 8016abc:	781b      	ldrb	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d1f5      	bne.n	8016aae <USBD_GetLen+0x12>
  }

  return len;
 8016ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ac4:	4618      	mov	r0, r3
 8016ac6:	3714      	adds	r7, #20
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ace:	4770      	bx	lr

08016ad0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b084      	sub	sp, #16
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	60f8      	str	r0, [r7, #12]
 8016ad8:	60b9      	str	r1, [r7, #8]
 8016ada:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	2202      	movs	r2, #2
 8016ae0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	687a      	ldr	r2, [r7, #4]
 8016ae8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	687a      	ldr	r2, [r7, #4]
 8016aee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	68ba      	ldr	r2, [r7, #8]
 8016af4:	2100      	movs	r1, #0
 8016af6:	68f8      	ldr	r0, [r7, #12]
 8016af8:	f000 fd57 	bl	80175aa <USBD_LL_Transmit>

  return USBD_OK;
 8016afc:	2300      	movs	r3, #0
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3710      	adds	r7, #16
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}

08016b06 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b06:	b580      	push	{r7, lr}
 8016b08:	b084      	sub	sp, #16
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	60f8      	str	r0, [r7, #12]
 8016b0e:	60b9      	str	r1, [r7, #8]
 8016b10:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	68ba      	ldr	r2, [r7, #8]
 8016b16:	2100      	movs	r1, #0
 8016b18:	68f8      	ldr	r0, [r7, #12]
 8016b1a:	f000 fd46 	bl	80175aa <USBD_LL_Transmit>

  return USBD_OK;
 8016b1e:	2300      	movs	r3, #0
}
 8016b20:	4618      	mov	r0, r3
 8016b22:	3710      	adds	r7, #16
 8016b24:	46bd      	mov	sp, r7
 8016b26:	bd80      	pop	{r7, pc}

08016b28 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b28:	b580      	push	{r7, lr}
 8016b2a:	b084      	sub	sp, #16
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	60f8      	str	r0, [r7, #12]
 8016b30:	60b9      	str	r1, [r7, #8]
 8016b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	2203      	movs	r2, #3
 8016b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	687a      	ldr	r2, [r7, #4]
 8016b40:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	68ba      	ldr	r2, [r7, #8]
 8016b50:	2100      	movs	r1, #0
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f000 fd4a 	bl	80175ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	3710      	adds	r7, #16
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	bd80      	pop	{r7, pc}

08016b62 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016b62:	b580      	push	{r7, lr}
 8016b64:	b084      	sub	sp, #16
 8016b66:	af00      	add	r7, sp, #0
 8016b68:	60f8      	str	r0, [r7, #12]
 8016b6a:	60b9      	str	r1, [r7, #8]
 8016b6c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	68ba      	ldr	r2, [r7, #8]
 8016b72:	2100      	movs	r1, #0
 8016b74:	68f8      	ldr	r0, [r7, #12]
 8016b76:	f000 fd39 	bl	80175ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3710      	adds	r7, #16
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b082      	sub	sp, #8
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2204      	movs	r2, #4
 8016b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016b94:	2300      	movs	r3, #0
 8016b96:	2200      	movs	r2, #0
 8016b98:	2100      	movs	r1, #0
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f000 fd05 	bl	80175aa <USBD_LL_Transmit>

  return USBD_OK;
 8016ba0:	2300      	movs	r3, #0
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3708      	adds	r7, #8
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	bd80      	pop	{r7, pc}

08016baa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016baa:	b580      	push	{r7, lr}
 8016bac:	b082      	sub	sp, #8
 8016bae:	af00      	add	r7, sp, #0
 8016bb0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	2205      	movs	r2, #5
 8016bb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016bba:	2300      	movs	r3, #0
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	2100      	movs	r1, #0
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f000 fd13 	bl	80175ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bc6:	2300      	movs	r3, #0
}
 8016bc8:	4618      	mov	r0, r3
 8016bca:	3708      	adds	r7, #8
 8016bcc:	46bd      	mov	sp, r7
 8016bce:	bd80      	pop	{r7, pc}

08016bd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016bd0:	b480      	push	{r7}
 8016bd2:	b087      	sub	sp, #28
 8016bd4:	af00      	add	r7, sp, #0
 8016bd6:	60f8      	str	r0, [r7, #12]
 8016bd8:	60b9      	str	r1, [r7, #8]
 8016bda:	4613      	mov	r3, r2
 8016bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016bde:	2301      	movs	r3, #1
 8016be0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016be2:	2300      	movs	r3, #0
 8016be4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016be6:	4b1f      	ldr	r3, [pc, #124]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016be8:	7a5b      	ldrb	r3, [r3, #9]
 8016bea:	b2db      	uxtb	r3, r3
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d131      	bne.n	8016c54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016bf0:	4b1c      	ldr	r3, [pc, #112]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016bf2:	7a5b      	ldrb	r3, [r3, #9]
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	4b1a      	ldr	r3, [pc, #104]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016bfe:	4b19      	ldr	r3, [pc, #100]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c00:	7a5b      	ldrb	r3, [r3, #9]
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	4a17      	ldr	r2, [pc, #92]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c06:	009b      	lsls	r3, r3, #2
 8016c08:	4413      	add	r3, r2
 8016c0a:	68fa      	ldr	r2, [r7, #12]
 8016c0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016c0e:	4b15      	ldr	r3, [pc, #84]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c10:	7a5b      	ldrb	r3, [r3, #9]
 8016c12:	b2db      	uxtb	r3, r3
 8016c14:	461a      	mov	r2, r3
 8016c16:	4b13      	ldr	r3, [pc, #76]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c18:	4413      	add	r3, r2
 8016c1a:	79fa      	ldrb	r2, [r7, #7]
 8016c1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016c1e:	4b11      	ldr	r3, [pc, #68]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c20:	7a5b      	ldrb	r3, [r3, #9]
 8016c22:	b2db      	uxtb	r3, r3
 8016c24:	1c5a      	adds	r2, r3, #1
 8016c26:	b2d1      	uxtb	r1, r2
 8016c28:	4a0e      	ldr	r2, [pc, #56]	; (8016c64 <FATFS_LinkDriverEx+0x94>)
 8016c2a:	7251      	strb	r1, [r2, #9]
 8016c2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016c2e:	7dbb      	ldrb	r3, [r7, #22]
 8016c30:	3330      	adds	r3, #48	; 0x30
 8016c32:	b2da      	uxtb	r2, r3
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	223a      	movs	r2, #58	; 0x3a
 8016c3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	3302      	adds	r3, #2
 8016c44:	222f      	movs	r2, #47	; 0x2f
 8016c46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016c48:	68bb      	ldr	r3, [r7, #8]
 8016c4a:	3303      	adds	r3, #3
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016c50:	2300      	movs	r3, #0
 8016c52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	371c      	adds	r7, #28
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c60:	4770      	bx	lr
 8016c62:	bf00      	nop
 8016c64:	24001708 	.word	0x24001708

08016c68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
 8016c70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016c72:	2200      	movs	r2, #0
 8016c74:	6839      	ldr	r1, [r7, #0]
 8016c76:	6878      	ldr	r0, [r7, #4]
 8016c78:	f7ff ffaa 	bl	8016bd0 <FATFS_LinkDriverEx>
 8016c7c:	4603      	mov	r3, r0
}
 8016c7e:	4618      	mov	r0, r3
 8016c80:	3708      	adds	r7, #8
 8016c82:	46bd      	mov	sp, r7
 8016c84:	bd80      	pop	{r7, pc}
	...

08016c88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	4913      	ldr	r1, [pc, #76]	; (8016cdc <MX_USB_DEVICE_Init+0x54>)
 8016c90:	4813      	ldr	r0, [pc, #76]	; (8016ce0 <MX_USB_DEVICE_Init+0x58>)
 8016c92:	f7fe fc7b 	bl	801558c <USBD_Init>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d001      	beq.n	8016ca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c9c:	f7eb ff12 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016ca0:	4910      	ldr	r1, [pc, #64]	; (8016ce4 <MX_USB_DEVICE_Init+0x5c>)
 8016ca2:	480f      	ldr	r0, [pc, #60]	; (8016ce0 <MX_USB_DEVICE_Init+0x58>)
 8016ca4:	f7fe fca2 	bl	80155ec <USBD_RegisterClass>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d001      	beq.n	8016cb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016cae:	f7eb ff09 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016cb2:	490d      	ldr	r1, [pc, #52]	; (8016ce8 <MX_USB_DEVICE_Init+0x60>)
 8016cb4:	480a      	ldr	r0, [pc, #40]	; (8016ce0 <MX_USB_DEVICE_Init+0x58>)
 8016cb6:	f7fe fb99 	bl	80153ec <USBD_CDC_RegisterInterface>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016cc0:	f7eb ff00 	bl	8002ac4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016cc4:	4806      	ldr	r0, [pc, #24]	; (8016ce0 <MX_USB_DEVICE_Init+0x58>)
 8016cc6:	f7fe fcc7 	bl	8015658 <USBD_Start>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d001      	beq.n	8016cd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016cd0:	f7eb fef8 	bl	8002ac4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016cd4:	f7f2 ff30 	bl	8009b38 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016cd8:	bf00      	nop
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	240000b0 	.word	0x240000b0
 8016ce0:	24001714 	.word	0x24001714
 8016ce4:	2400001c 	.word	0x2400001c
 8016ce8:	2400009c 	.word	0x2400009c

08016cec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016cf0:	2200      	movs	r2, #0
 8016cf2:	4905      	ldr	r1, [pc, #20]	; (8016d08 <CDC_Init_HS+0x1c>)
 8016cf4:	4805      	ldr	r0, [pc, #20]	; (8016d0c <CDC_Init_HS+0x20>)
 8016cf6:	f7fe fb93 	bl	8015420 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016cfa:	4905      	ldr	r1, [pc, #20]	; (8016d10 <CDC_Init_HS+0x24>)
 8016cfc:	4803      	ldr	r0, [pc, #12]	; (8016d0c <CDC_Init_HS+0x20>)
 8016cfe:	f7fe fbb1 	bl	8015464 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016d02:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	bd80      	pop	{r7, pc}
 8016d08:	240021f0 	.word	0x240021f0
 8016d0c:	24001714 	.word	0x24001714
 8016d10:	240019f0 	.word	0x240019f0

08016d14 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016d14:	b480      	push	{r7}
 8016d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016d18:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d22:	4770      	bx	lr

08016d24 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016d24:	b480      	push	{r7}
 8016d26:	b083      	sub	sp, #12
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	4603      	mov	r3, r0
 8016d2c:	6039      	str	r1, [r7, #0]
 8016d2e:	71fb      	strb	r3, [r7, #7]
 8016d30:	4613      	mov	r3, r2
 8016d32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016d34:	79fb      	ldrb	r3, [r7, #7]
 8016d36:	2b23      	cmp	r3, #35	; 0x23
 8016d38:	d84a      	bhi.n	8016dd0 <CDC_Control_HS+0xac>
 8016d3a:	a201      	add	r2, pc, #4	; (adr r2, 8016d40 <CDC_Control_HS+0x1c>)
 8016d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d40:	08016dd1 	.word	0x08016dd1
 8016d44:	08016dd1 	.word	0x08016dd1
 8016d48:	08016dd1 	.word	0x08016dd1
 8016d4c:	08016dd1 	.word	0x08016dd1
 8016d50:	08016dd1 	.word	0x08016dd1
 8016d54:	08016dd1 	.word	0x08016dd1
 8016d58:	08016dd1 	.word	0x08016dd1
 8016d5c:	08016dd1 	.word	0x08016dd1
 8016d60:	08016dd1 	.word	0x08016dd1
 8016d64:	08016dd1 	.word	0x08016dd1
 8016d68:	08016dd1 	.word	0x08016dd1
 8016d6c:	08016dd1 	.word	0x08016dd1
 8016d70:	08016dd1 	.word	0x08016dd1
 8016d74:	08016dd1 	.word	0x08016dd1
 8016d78:	08016dd1 	.word	0x08016dd1
 8016d7c:	08016dd1 	.word	0x08016dd1
 8016d80:	08016dd1 	.word	0x08016dd1
 8016d84:	08016dd1 	.word	0x08016dd1
 8016d88:	08016dd1 	.word	0x08016dd1
 8016d8c:	08016dd1 	.word	0x08016dd1
 8016d90:	08016dd1 	.word	0x08016dd1
 8016d94:	08016dd1 	.word	0x08016dd1
 8016d98:	08016dd1 	.word	0x08016dd1
 8016d9c:	08016dd1 	.word	0x08016dd1
 8016da0:	08016dd1 	.word	0x08016dd1
 8016da4:	08016dd1 	.word	0x08016dd1
 8016da8:	08016dd1 	.word	0x08016dd1
 8016dac:	08016dd1 	.word	0x08016dd1
 8016db0:	08016dd1 	.word	0x08016dd1
 8016db4:	08016dd1 	.word	0x08016dd1
 8016db8:	08016dd1 	.word	0x08016dd1
 8016dbc:	08016dd1 	.word	0x08016dd1
 8016dc0:	08016dd1 	.word	0x08016dd1
 8016dc4:	08016dd1 	.word	0x08016dd1
 8016dc8:	08016dd1 	.word	0x08016dd1
 8016dcc:	08016dd1 	.word	0x08016dd1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016dd0:	bf00      	nop
  }

  return (USBD_OK);
 8016dd2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	370c      	adds	r7, #12
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dde:	4770      	bx	lr

08016de0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b084      	sub	sp, #16
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	6078      	str	r0, [r7, #4]
 8016de8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016dea:	6879      	ldr	r1, [r7, #4]
 8016dec:	480e      	ldr	r0, [pc, #56]	; (8016e28 <CDC_Receive_HS+0x48>)
 8016dee:	f7fe fb39 	bl	8015464 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016df2:	480d      	ldr	r0, [pc, #52]	; (8016e28 <CDC_Receive_HS+0x48>)
 8016df4:	f7fe fb94 	bl	8015520 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	681b      	ldr	r3, [r3, #0]
 8016dfc:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016dfe:	4b0b      	ldr	r3, [pc, #44]	; (8016e2c <CDC_Receive_HS+0x4c>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	4a0b      	ldr	r2, [pc, #44]	; (8016e30 <CDC_Receive_HS+0x50>)
 8016e04:	4413      	add	r3, r2
 8016e06:	68fa      	ldr	r2, [r7, #12]
 8016e08:	6879      	ldr	r1, [r7, #4]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f000 fcf0 	bl	80177f0 <memcpy>
  usbBytesReady += cpyLen;
 8016e10:	4b06      	ldr	r3, [pc, #24]	; (8016e2c <CDC_Receive_HS+0x4c>)
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	4413      	add	r3, r2
 8016e18:	4a04      	ldr	r2, [pc, #16]	; (8016e2c <CDC_Receive_HS+0x4c>)
 8016e1a:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016e1c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	3710      	adds	r7, #16
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd80      	pop	{r7, pc}
 8016e26:	bf00      	nop
 8016e28:	24001714 	.word	0x24001714
 8016e2c:	24000270 	.word	0x24000270
 8016e30:	24000170 	.word	0x24000170

08016e34 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b084      	sub	sp, #16
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	460b      	mov	r3, r1
 8016e3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016e40:	2300      	movs	r3, #0
 8016e42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016e44:	4b0d      	ldr	r3, [pc, #52]	; (8016e7c <CDC_Transmit_HS+0x48>)
 8016e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d001      	beq.n	8016e5a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016e56:	2301      	movs	r3, #1
 8016e58:	e00b      	b.n	8016e72 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016e5a:	887b      	ldrh	r3, [r7, #2]
 8016e5c:	461a      	mov	r2, r3
 8016e5e:	6879      	ldr	r1, [r7, #4]
 8016e60:	4806      	ldr	r0, [pc, #24]	; (8016e7c <CDC_Transmit_HS+0x48>)
 8016e62:	f7fe fadd 	bl	8015420 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016e66:	4805      	ldr	r0, [pc, #20]	; (8016e7c <CDC_Transmit_HS+0x48>)
 8016e68:	f7fe fb1a 	bl	80154a0 <USBD_CDC_TransmitPacket>
 8016e6c:	4603      	mov	r3, r0
 8016e6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e72:	4618      	mov	r0, r3
 8016e74:	3710      	adds	r7, #16
 8016e76:	46bd      	mov	sp, r7
 8016e78:	bd80      	pop	{r7, pc}
 8016e7a:	bf00      	nop
 8016e7c:	24001714 	.word	0x24001714

08016e80 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016e80:	b480      	push	{r7}
 8016e82:	b087      	sub	sp, #28
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	4613      	mov	r3, r2
 8016e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	371c      	adds	r7, #28
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea0:	4770      	bx	lr
	...

08016ea4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b083      	sub	sp, #12
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	4603      	mov	r3, r0
 8016eac:	6039      	str	r1, [r7, #0]
 8016eae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	2212      	movs	r2, #18
 8016eb4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016eb6:	4b03      	ldr	r3, [pc, #12]	; (8016ec4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	370c      	adds	r7, #12
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec2:	4770      	bx	lr
 8016ec4:	240000d0 	.word	0x240000d0

08016ec8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ec8:	b480      	push	{r7}
 8016eca:	b083      	sub	sp, #12
 8016ecc:	af00      	add	r7, sp, #0
 8016ece:	4603      	mov	r3, r0
 8016ed0:	6039      	str	r1, [r7, #0]
 8016ed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016ed4:	683b      	ldr	r3, [r7, #0]
 8016ed6:	2204      	movs	r2, #4
 8016ed8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016eda:	4b03      	ldr	r3, [pc, #12]	; (8016ee8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016edc:	4618      	mov	r0, r3
 8016ede:	370c      	adds	r7, #12
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee6:	4770      	bx	lr
 8016ee8:	240000e4 	.word	0x240000e4

08016eec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b082      	sub	sp, #8
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	4603      	mov	r3, r0
 8016ef4:	6039      	str	r1, [r7, #0]
 8016ef6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016ef8:	79fb      	ldrb	r3, [r7, #7]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d105      	bne.n	8016f0a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	4907      	ldr	r1, [pc, #28]	; (8016f20 <USBD_HS_ProductStrDescriptor+0x34>)
 8016f02:	4808      	ldr	r0, [pc, #32]	; (8016f24 <USBD_HS_ProductStrDescriptor+0x38>)
 8016f04:	f7ff fd84 	bl	8016a10 <USBD_GetString>
 8016f08:	e004      	b.n	8016f14 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016f0a:	683a      	ldr	r2, [r7, #0]
 8016f0c:	4904      	ldr	r1, [pc, #16]	; (8016f20 <USBD_HS_ProductStrDescriptor+0x34>)
 8016f0e:	4805      	ldr	r0, [pc, #20]	; (8016f24 <USBD_HS_ProductStrDescriptor+0x38>)
 8016f10:	f7ff fd7e 	bl	8016a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f14:	4b02      	ldr	r3, [pc, #8]	; (8016f20 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016f16:	4618      	mov	r0, r3
 8016f18:	3708      	adds	r7, #8
 8016f1a:	46bd      	mov	sp, r7
 8016f1c:	bd80      	pop	{r7, pc}
 8016f1e:	bf00      	nop
 8016f20:	240029f0 	.word	0x240029f0
 8016f24:	08018b74 	.word	0x08018b74

08016f28 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f28:	b580      	push	{r7, lr}
 8016f2a:	b082      	sub	sp, #8
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	4603      	mov	r3, r0
 8016f30:	6039      	str	r1, [r7, #0]
 8016f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016f34:	683a      	ldr	r2, [r7, #0]
 8016f36:	4904      	ldr	r1, [pc, #16]	; (8016f48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016f38:	4804      	ldr	r0, [pc, #16]	; (8016f4c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016f3a:	f7ff fd69 	bl	8016a10 <USBD_GetString>
  return USBD_StrDesc;
 8016f3e:	4b02      	ldr	r3, [pc, #8]	; (8016f48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	3708      	adds	r7, #8
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}
 8016f48:	240029f0 	.word	0x240029f0
 8016f4c:	08018b90 	.word	0x08018b90

08016f50 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b082      	sub	sp, #8
 8016f54:	af00      	add	r7, sp, #0
 8016f56:	4603      	mov	r3, r0
 8016f58:	6039      	str	r1, [r7, #0]
 8016f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	221a      	movs	r2, #26
 8016f60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016f62:	f000 f843 	bl	8016fec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016f66:	4b02      	ldr	r3, [pc, #8]	; (8016f70 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016f68:	4618      	mov	r0, r3
 8016f6a:	3708      	adds	r7, #8
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	bd80      	pop	{r7, pc}
 8016f70:	240000e8 	.word	0x240000e8

08016f74 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f74:	b580      	push	{r7, lr}
 8016f76:	b082      	sub	sp, #8
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	6039      	str	r1, [r7, #0]
 8016f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f80:	79fb      	ldrb	r3, [r7, #7]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d105      	bne.n	8016f92 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f86:	683a      	ldr	r2, [r7, #0]
 8016f88:	4907      	ldr	r1, [pc, #28]	; (8016fa8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f8a:	4808      	ldr	r0, [pc, #32]	; (8016fac <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f8c:	f7ff fd40 	bl	8016a10 <USBD_GetString>
 8016f90:	e004      	b.n	8016f9c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f92:	683a      	ldr	r2, [r7, #0]
 8016f94:	4904      	ldr	r1, [pc, #16]	; (8016fa8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f96:	4805      	ldr	r0, [pc, #20]	; (8016fac <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f98:	f7ff fd3a 	bl	8016a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f9c:	4b02      	ldr	r3, [pc, #8]	; (8016fa8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	3708      	adds	r7, #8
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}
 8016fa6:	bf00      	nop
 8016fa8:	240029f0 	.word	0x240029f0
 8016fac:	08018b94 	.word	0x08018b94

08016fb0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	6039      	str	r1, [r7, #0]
 8016fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016fbc:	79fb      	ldrb	r3, [r7, #7]
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d105      	bne.n	8016fce <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016fc2:	683a      	ldr	r2, [r7, #0]
 8016fc4:	4907      	ldr	r1, [pc, #28]	; (8016fe4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016fc6:	4808      	ldr	r0, [pc, #32]	; (8016fe8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016fc8:	f7ff fd22 	bl	8016a10 <USBD_GetString>
 8016fcc:	e004      	b.n	8016fd8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016fce:	683a      	ldr	r2, [r7, #0]
 8016fd0:	4904      	ldr	r1, [pc, #16]	; (8016fe4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016fd2:	4805      	ldr	r0, [pc, #20]	; (8016fe8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016fd4:	f7ff fd1c 	bl	8016a10 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fd8:	4b02      	ldr	r3, [pc, #8]	; (8016fe4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016fda:	4618      	mov	r0, r3
 8016fdc:	3708      	adds	r7, #8
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}
 8016fe2:	bf00      	nop
 8016fe4:	240029f0 	.word	0x240029f0
 8016fe8:	08018ba0 	.word	0x08018ba0

08016fec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016ff2:	4b0f      	ldr	r3, [pc, #60]	; (8017030 <Get_SerialNum+0x44>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016ff8:	4b0e      	ldr	r3, [pc, #56]	; (8017034 <Get_SerialNum+0x48>)
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016ffe:	4b0e      	ldr	r3, [pc, #56]	; (8017038 <Get_SerialNum+0x4c>)
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017004:	68fa      	ldr	r2, [r7, #12]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	4413      	add	r3, r2
 801700a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d009      	beq.n	8017026 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017012:	2208      	movs	r2, #8
 8017014:	4909      	ldr	r1, [pc, #36]	; (801703c <Get_SerialNum+0x50>)
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f000 f814 	bl	8017044 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801701c:	2204      	movs	r2, #4
 801701e:	4908      	ldr	r1, [pc, #32]	; (8017040 <Get_SerialNum+0x54>)
 8017020:	68b8      	ldr	r0, [r7, #8]
 8017022:	f000 f80f 	bl	8017044 <IntToUnicode>
  }
}
 8017026:	bf00      	nop
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
 801702e:	bf00      	nop
 8017030:	1ff1e800 	.word	0x1ff1e800
 8017034:	1ff1e804 	.word	0x1ff1e804
 8017038:	1ff1e808 	.word	0x1ff1e808
 801703c:	240000ea 	.word	0x240000ea
 8017040:	240000fa 	.word	0x240000fa

08017044 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017044:	b480      	push	{r7}
 8017046:	b087      	sub	sp, #28
 8017048:	af00      	add	r7, sp, #0
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	60b9      	str	r1, [r7, #8]
 801704e:	4613      	mov	r3, r2
 8017050:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017052:	2300      	movs	r3, #0
 8017054:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017056:	2300      	movs	r3, #0
 8017058:	75fb      	strb	r3, [r7, #23]
 801705a:	e027      	b.n	80170ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	0f1b      	lsrs	r3, r3, #28
 8017060:	2b09      	cmp	r3, #9
 8017062:	d80b      	bhi.n	801707c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	0f1b      	lsrs	r3, r3, #28
 8017068:	b2da      	uxtb	r2, r3
 801706a:	7dfb      	ldrb	r3, [r7, #23]
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	4619      	mov	r1, r3
 8017070:	68bb      	ldr	r3, [r7, #8]
 8017072:	440b      	add	r3, r1
 8017074:	3230      	adds	r2, #48	; 0x30
 8017076:	b2d2      	uxtb	r2, r2
 8017078:	701a      	strb	r2, [r3, #0]
 801707a:	e00a      	b.n	8017092 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	0f1b      	lsrs	r3, r3, #28
 8017080:	b2da      	uxtb	r2, r3
 8017082:	7dfb      	ldrb	r3, [r7, #23]
 8017084:	005b      	lsls	r3, r3, #1
 8017086:	4619      	mov	r1, r3
 8017088:	68bb      	ldr	r3, [r7, #8]
 801708a:	440b      	add	r3, r1
 801708c:	3237      	adds	r2, #55	; 0x37
 801708e:	b2d2      	uxtb	r2, r2
 8017090:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	011b      	lsls	r3, r3, #4
 8017096:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017098:	7dfb      	ldrb	r3, [r7, #23]
 801709a:	005b      	lsls	r3, r3, #1
 801709c:	3301      	adds	r3, #1
 801709e:	68ba      	ldr	r2, [r7, #8]
 80170a0:	4413      	add	r3, r2
 80170a2:	2200      	movs	r2, #0
 80170a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80170a6:	7dfb      	ldrb	r3, [r7, #23]
 80170a8:	3301      	adds	r3, #1
 80170aa:	75fb      	strb	r3, [r7, #23]
 80170ac:	7dfa      	ldrb	r2, [r7, #23]
 80170ae:	79fb      	ldrb	r3, [r7, #7]
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d3d3      	bcc.n	801705c <IntToUnicode+0x18>
  }
}
 80170b4:	bf00      	nop
 80170b6:	bf00      	nop
 80170b8:	371c      	adds	r7, #28
 80170ba:	46bd      	mov	sp, r7
 80170bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c0:	4770      	bx	lr
	...

080170c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b0b2      	sub	sp, #200	; 0xc8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80170cc:	f107 0310 	add.w	r3, r7, #16
 80170d0:	22b8      	movs	r2, #184	; 0xb8
 80170d2:	2100      	movs	r1, #0
 80170d4:	4618      	mov	r0, r3
 80170d6:	f000 fb4f 	bl	8017778 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	4a1a      	ldr	r2, [pc, #104]	; (8017148 <HAL_PCD_MspInit+0x84>)
 80170e0:	4293      	cmp	r3, r2
 80170e2:	d12c      	bne.n	801713e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80170e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80170e8:	f04f 0300 	mov.w	r3, #0
 80170ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80170f0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80170f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80170f8:	f107 0310 	add.w	r3, r7, #16
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7f3 fcfb 	bl	800aaf8 <HAL_RCCEx_PeriphCLKConfig>
 8017102:	4603      	mov	r3, r0
 8017104:	2b00      	cmp	r3, #0
 8017106:	d001      	beq.n	801710c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8017108:	f7eb fcdc 	bl	8002ac4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801710c:	f7f2 fd14 	bl	8009b38 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017110:	4b0e      	ldr	r3, [pc, #56]	; (801714c <HAL_PCD_MspInit+0x88>)
 8017112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017116:	4a0d      	ldr	r2, [pc, #52]	; (801714c <HAL_PCD_MspInit+0x88>)
 8017118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801711c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017120:	4b0a      	ldr	r3, [pc, #40]	; (801714c <HAL_PCD_MspInit+0x88>)
 8017122:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801712a:	60fb      	str	r3, [r7, #12]
 801712c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801712e:	2200      	movs	r2, #0
 8017130:	2100      	movs	r1, #0
 8017132:	204d      	movs	r0, #77	; 0x4d
 8017134:	f7ee fa85 	bl	8005642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017138:	204d      	movs	r0, #77	; 0x4d
 801713a:	f7ee fa9c 	bl	8005676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801713e:	bf00      	nop
 8017140:	37c8      	adds	r7, #200	; 0xc8
 8017142:	46bd      	mov	sp, r7
 8017144:	bd80      	pop	{r7, pc}
 8017146:	bf00      	nop
 8017148:	40040000 	.word	0x40040000
 801714c:	58024400 	.word	0x58024400

08017150 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017164:	4619      	mov	r1, r3
 8017166:	4610      	mov	r0, r2
 8017168:	f7fe fac3 	bl	80156f2 <USBD_LL_SetupStage>
}
 801716c:	bf00      	nop
 801716e:	3708      	adds	r7, #8
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b082      	sub	sp, #8
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	460b      	mov	r3, r1
 801717e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017186:	78fa      	ldrb	r2, [r7, #3]
 8017188:	6879      	ldr	r1, [r7, #4]
 801718a:	4613      	mov	r3, r2
 801718c:	00db      	lsls	r3, r3, #3
 801718e:	4413      	add	r3, r2
 8017190:	009b      	lsls	r3, r3, #2
 8017192:	440b      	add	r3, r1
 8017194:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017198:	681a      	ldr	r2, [r3, #0]
 801719a:	78fb      	ldrb	r3, [r7, #3]
 801719c:	4619      	mov	r1, r3
 801719e:	f7fe fafd 	bl	801579c <USBD_LL_DataOutStage>
}
 80171a2:	bf00      	nop
 80171a4:	3708      	adds	r7, #8
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171aa:	b580      	push	{r7, lr}
 80171ac:	b082      	sub	sp, #8
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	6078      	str	r0, [r7, #4]
 80171b2:	460b      	mov	r3, r1
 80171b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80171bc:	78fa      	ldrb	r2, [r7, #3]
 80171be:	6879      	ldr	r1, [r7, #4]
 80171c0:	4613      	mov	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	4413      	add	r3, r2
 80171c6:	009b      	lsls	r3, r3, #2
 80171c8:	440b      	add	r3, r1
 80171ca:	3348      	adds	r3, #72	; 0x48
 80171cc:	681a      	ldr	r2, [r3, #0]
 80171ce:	78fb      	ldrb	r3, [r7, #3]
 80171d0:	4619      	mov	r1, r3
 80171d2:	f7fe fb96 	bl	8015902 <USBD_LL_DataInStage>
}
 80171d6:	bf00      	nop
 80171d8:	3708      	adds	r7, #8
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}

080171de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171de:	b580      	push	{r7, lr}
 80171e0:	b082      	sub	sp, #8
 80171e2:	af00      	add	r7, sp, #0
 80171e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7fe fcd0 	bl	8015b92 <USBD_LL_SOF>
}
 80171f2:	bf00      	nop
 80171f4:	3708      	adds	r7, #8
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}

080171fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171fa:	b580      	push	{r7, lr}
 80171fc:	b084      	sub	sp, #16
 80171fe:	af00      	add	r7, sp, #0
 8017200:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017202:	2301      	movs	r3, #1
 8017204:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	691b      	ldr	r3, [r3, #16]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d102      	bne.n	8017214 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801720e:	2300      	movs	r3, #0
 8017210:	73fb      	strb	r3, [r7, #15]
 8017212:	e008      	b.n	8017226 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	691b      	ldr	r3, [r3, #16]
 8017218:	2b02      	cmp	r3, #2
 801721a:	d102      	bne.n	8017222 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801721c:	2301      	movs	r3, #1
 801721e:	73fb      	strb	r3, [r7, #15]
 8017220:	e001      	b.n	8017226 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017222:	f7eb fc4f 	bl	8002ac4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801722c:	7bfa      	ldrb	r2, [r7, #15]
 801722e:	4611      	mov	r1, r2
 8017230:	4618      	mov	r0, r3
 8017232:	f7fe fc6a 	bl	8015b0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801723c:	4618      	mov	r0, r3
 801723e:	f7fe fc12 	bl	8015a66 <USBD_LL_Reset>
}
 8017242:	bf00      	nop
 8017244:	3710      	adds	r7, #16
 8017246:	46bd      	mov	sp, r7
 8017248:	bd80      	pop	{r7, pc}
	...

0801724c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801725a:	4618      	mov	r0, r3
 801725c:	f7fe fc65 	bl	8015b2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	6812      	ldr	r2, [r2, #0]
 801726e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017272:	f043 0301 	orr.w	r3, r3, #1
 8017276:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	6a1b      	ldr	r3, [r3, #32]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d005      	beq.n	801728c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017280:	4b04      	ldr	r3, [pc, #16]	; (8017294 <HAL_PCD_SuspendCallback+0x48>)
 8017282:	691b      	ldr	r3, [r3, #16]
 8017284:	4a03      	ldr	r2, [pc, #12]	; (8017294 <HAL_PCD_SuspendCallback+0x48>)
 8017286:	f043 0306 	orr.w	r3, r3, #6
 801728a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801728c:	bf00      	nop
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	e000ed00 	.word	0xe000ed00

08017298 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7fe fc5b 	bl	8015b62 <USBD_LL_Resume>
}
 80172ac:	bf00      	nop
 80172ae:	3708      	adds	r7, #8
 80172b0:	46bd      	mov	sp, r7
 80172b2:	bd80      	pop	{r7, pc}

080172b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b082      	sub	sp, #8
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
 80172bc:	460b      	mov	r3, r1
 80172be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172c6:	78fa      	ldrb	r2, [r7, #3]
 80172c8:	4611      	mov	r1, r2
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fe fcb3 	bl	8015c36 <USBD_LL_IsoOUTIncomplete>
}
 80172d0:	bf00      	nop
 80172d2:	3708      	adds	r7, #8
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}

080172d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b082      	sub	sp, #8
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	460b      	mov	r3, r1
 80172e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172ea:	78fa      	ldrb	r2, [r7, #3]
 80172ec:	4611      	mov	r1, r2
 80172ee:	4618      	mov	r0, r3
 80172f0:	f7fe fc6f 	bl	8015bd2 <USBD_LL_IsoINIncomplete>
}
 80172f4:	bf00      	nop
 80172f6:	3708      	adds	r7, #8
 80172f8:	46bd      	mov	sp, r7
 80172fa:	bd80      	pop	{r7, pc}

080172fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b082      	sub	sp, #8
 8017300:	af00      	add	r7, sp, #0
 8017302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801730a:	4618      	mov	r0, r3
 801730c:	f7fe fcc5 	bl	8015c9a <USBD_LL_DevConnected>
}
 8017310:	bf00      	nop
 8017312:	3708      	adds	r7, #8
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017326:	4618      	mov	r0, r3
 8017328:	f7fe fcc2 	bl	8015cb0 <USBD_LL_DevDisconnected>
}
 801732c:	bf00      	nop
 801732e:	3708      	adds	r7, #8
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}

08017334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	781b      	ldrb	r3, [r3, #0]
 8017340:	2b01      	cmp	r3, #1
 8017342:	d140      	bne.n	80173c6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017344:	4a22      	ldr	r2, [pc, #136]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	4a20      	ldr	r2, [pc, #128]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017350:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017354:	4b1e      	ldr	r3, [pc, #120]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017356:	4a1f      	ldr	r2, [pc, #124]	; (80173d4 <USBD_LL_Init+0xa0>)
 8017358:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801735a:	4b1d      	ldr	r3, [pc, #116]	; (80173d0 <USBD_LL_Init+0x9c>)
 801735c:	2209      	movs	r2, #9
 801735e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017360:	4b1b      	ldr	r3, [pc, #108]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017362:	2202      	movs	r2, #2
 8017364:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017366:	4b1a      	ldr	r3, [pc, #104]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017368:	2200      	movs	r2, #0
 801736a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801736c:	4b18      	ldr	r3, [pc, #96]	; (80173d0 <USBD_LL_Init+0x9c>)
 801736e:	2202      	movs	r2, #2
 8017370:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017372:	4b17      	ldr	r3, [pc, #92]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017374:	2200      	movs	r2, #0
 8017376:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017378:	4b15      	ldr	r3, [pc, #84]	; (80173d0 <USBD_LL_Init+0x9c>)
 801737a:	2200      	movs	r2, #0
 801737c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801737e:	4b14      	ldr	r3, [pc, #80]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017380:	2200      	movs	r2, #0
 8017382:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017384:	4b12      	ldr	r3, [pc, #72]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017386:	2200      	movs	r2, #0
 8017388:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801738a:	4b11      	ldr	r3, [pc, #68]	; (80173d0 <USBD_LL_Init+0x9c>)
 801738c:	2200      	movs	r2, #0
 801738e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017390:	4b0f      	ldr	r3, [pc, #60]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017392:	2200      	movs	r2, #0
 8017394:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017396:	480e      	ldr	r0, [pc, #56]	; (80173d0 <USBD_LL_Init+0x9c>)
 8017398:	f7f1 f8db 	bl	8008552 <HAL_PCD_Init>
 801739c:	4603      	mov	r3, r0
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d001      	beq.n	80173a6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80173a2:	f7eb fb8f 	bl	8002ac4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80173a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80173aa:	4809      	ldr	r0, [pc, #36]	; (80173d0 <USBD_LL_Init+0x9c>)
 80173ac:	f7f2 fb49 	bl	8009a42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80173b0:	2280      	movs	r2, #128	; 0x80
 80173b2:	2100      	movs	r1, #0
 80173b4:	4806      	ldr	r0, [pc, #24]	; (80173d0 <USBD_LL_Init+0x9c>)
 80173b6:	f7f2 fafd 	bl	80099b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80173ba:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80173be:	2101      	movs	r1, #1
 80173c0:	4803      	ldr	r0, [pc, #12]	; (80173d0 <USBD_LL_Init+0x9c>)
 80173c2:	f7f2 faf7 	bl	80099b4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}
 80173d0:	24002bf0 	.word	0x24002bf0
 80173d4:	40040000 	.word	0x40040000

080173d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b084      	sub	sp, #16
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173e0:	2300      	movs	r3, #0
 80173e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173e4:	2300      	movs	r3, #0
 80173e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7f1 f9d3 	bl	800879a <HAL_PCD_Start>
 80173f4:	4603      	mov	r3, r0
 80173f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173f8:	7bfb      	ldrb	r3, [r7, #15]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f000 f942 	bl	8017684 <USBD_Get_USB_Status>
 8017400:	4603      	mov	r3, r0
 8017402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017404:	7bbb      	ldrb	r3, [r7, #14]
}
 8017406:	4618      	mov	r0, r3
 8017408:	3710      	adds	r7, #16
 801740a:	46bd      	mov	sp, r7
 801740c:	bd80      	pop	{r7, pc}

0801740e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801740e:	b580      	push	{r7, lr}
 8017410:	b084      	sub	sp, #16
 8017412:	af00      	add	r7, sp, #0
 8017414:	6078      	str	r0, [r7, #4]
 8017416:	4608      	mov	r0, r1
 8017418:	4611      	mov	r1, r2
 801741a:	461a      	mov	r2, r3
 801741c:	4603      	mov	r3, r0
 801741e:	70fb      	strb	r3, [r7, #3]
 8017420:	460b      	mov	r3, r1
 8017422:	70bb      	strb	r3, [r7, #2]
 8017424:	4613      	mov	r3, r2
 8017426:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801742c:	2300      	movs	r3, #0
 801742e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017436:	78bb      	ldrb	r3, [r7, #2]
 8017438:	883a      	ldrh	r2, [r7, #0]
 801743a:	78f9      	ldrb	r1, [r7, #3]
 801743c:	f7f1 fed3 	bl	80091e6 <HAL_PCD_EP_Open>
 8017440:	4603      	mov	r3, r0
 8017442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017444:	7bfb      	ldrb	r3, [r7, #15]
 8017446:	4618      	mov	r0, r3
 8017448:	f000 f91c 	bl	8017684 <USBD_Get_USB_Status>
 801744c:	4603      	mov	r3, r0
 801744e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017450:	7bbb      	ldrb	r3, [r7, #14]
}
 8017452:	4618      	mov	r0, r3
 8017454:	3710      	adds	r7, #16
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}

0801745a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801745a:	b580      	push	{r7, lr}
 801745c:	b084      	sub	sp, #16
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
 8017462:	460b      	mov	r3, r1
 8017464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017466:	2300      	movs	r3, #0
 8017468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801746a:	2300      	movs	r3, #0
 801746c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017474:	78fa      	ldrb	r2, [r7, #3]
 8017476:	4611      	mov	r1, r2
 8017478:	4618      	mov	r0, r3
 801747a:	f7f1 ff1c 	bl	80092b6 <HAL_PCD_EP_Close>
 801747e:	4603      	mov	r3, r0
 8017480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017482:	7bfb      	ldrb	r3, [r7, #15]
 8017484:	4618      	mov	r0, r3
 8017486:	f000 f8fd 	bl	8017684 <USBD_Get_USB_Status>
 801748a:	4603      	mov	r3, r0
 801748c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801748e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017490:	4618      	mov	r0, r3
 8017492:	3710      	adds	r7, #16
 8017494:	46bd      	mov	sp, r7
 8017496:	bd80      	pop	{r7, pc}

08017498 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017498:	b580      	push	{r7, lr}
 801749a:	b084      	sub	sp, #16
 801749c:	af00      	add	r7, sp, #0
 801749e:	6078      	str	r0, [r7, #4]
 80174a0:	460b      	mov	r3, r1
 80174a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174a4:	2300      	movs	r3, #0
 80174a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174a8:	2300      	movs	r3, #0
 80174aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174b2:	78fa      	ldrb	r2, [r7, #3]
 80174b4:	4611      	mov	r1, r2
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f1 ffd6 	bl	8009468 <HAL_PCD_EP_SetStall>
 80174bc:	4603      	mov	r3, r0
 80174be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174c0:	7bfb      	ldrb	r3, [r7, #15]
 80174c2:	4618      	mov	r0, r3
 80174c4:	f000 f8de 	bl	8017684 <USBD_Get_USB_Status>
 80174c8:	4603      	mov	r3, r0
 80174ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80174ce:	4618      	mov	r0, r3
 80174d0:	3710      	adds	r7, #16
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}

080174d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174d6:	b580      	push	{r7, lr}
 80174d8:	b084      	sub	sp, #16
 80174da:	af00      	add	r7, sp, #0
 80174dc:	6078      	str	r0, [r7, #4]
 80174de:	460b      	mov	r3, r1
 80174e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174e2:	2300      	movs	r3, #0
 80174e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174e6:	2300      	movs	r3, #0
 80174e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174f0:	78fa      	ldrb	r2, [r7, #3]
 80174f2:	4611      	mov	r1, r2
 80174f4:	4618      	mov	r0, r3
 80174f6:	f7f2 f81b 	bl	8009530 <HAL_PCD_EP_ClrStall>
 80174fa:	4603      	mov	r3, r0
 80174fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174fe:	7bfb      	ldrb	r3, [r7, #15]
 8017500:	4618      	mov	r0, r3
 8017502:	f000 f8bf 	bl	8017684 <USBD_Get_USB_Status>
 8017506:	4603      	mov	r3, r0
 8017508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801750a:	7bbb      	ldrb	r3, [r7, #14]
}
 801750c:	4618      	mov	r0, r3
 801750e:	3710      	adds	r7, #16
 8017510:	46bd      	mov	sp, r7
 8017512:	bd80      	pop	{r7, pc}

08017514 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017514:	b480      	push	{r7}
 8017516:	b085      	sub	sp, #20
 8017518:	af00      	add	r7, sp, #0
 801751a:	6078      	str	r0, [r7, #4]
 801751c:	460b      	mov	r3, r1
 801751e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017526:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017528:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801752c:	2b00      	cmp	r3, #0
 801752e:	da0b      	bge.n	8017548 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017530:	78fb      	ldrb	r3, [r7, #3]
 8017532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017536:	68f9      	ldr	r1, [r7, #12]
 8017538:	4613      	mov	r3, r2
 801753a:	00db      	lsls	r3, r3, #3
 801753c:	4413      	add	r3, r2
 801753e:	009b      	lsls	r3, r3, #2
 8017540:	440b      	add	r3, r1
 8017542:	333e      	adds	r3, #62	; 0x3e
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	e00b      	b.n	8017560 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017548:	78fb      	ldrb	r3, [r7, #3]
 801754a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801754e:	68f9      	ldr	r1, [r7, #12]
 8017550:	4613      	mov	r3, r2
 8017552:	00db      	lsls	r3, r3, #3
 8017554:	4413      	add	r3, r2
 8017556:	009b      	lsls	r3, r3, #2
 8017558:	440b      	add	r3, r1
 801755a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801755e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017560:	4618      	mov	r0, r3
 8017562:	3714      	adds	r7, #20
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b084      	sub	sp, #16
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	460b      	mov	r3, r1
 8017576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017578:	2300      	movs	r3, #0
 801757a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801757c:	2300      	movs	r3, #0
 801757e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017586:	78fa      	ldrb	r2, [r7, #3]
 8017588:	4611      	mov	r1, r2
 801758a:	4618      	mov	r0, r3
 801758c:	f7f1 fe06 	bl	800919c <HAL_PCD_SetAddress>
 8017590:	4603      	mov	r3, r0
 8017592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017594:	7bfb      	ldrb	r3, [r7, #15]
 8017596:	4618      	mov	r0, r3
 8017598:	f000 f874 	bl	8017684 <USBD_Get_USB_Status>
 801759c:	4603      	mov	r3, r0
 801759e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80175a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}

080175aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175aa:	b580      	push	{r7, lr}
 80175ac:	b086      	sub	sp, #24
 80175ae:	af00      	add	r7, sp, #0
 80175b0:	60f8      	str	r0, [r7, #12]
 80175b2:	607a      	str	r2, [r7, #4]
 80175b4:	603b      	str	r3, [r7, #0]
 80175b6:	460b      	mov	r3, r1
 80175b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ba:	2300      	movs	r3, #0
 80175bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175be:	2300      	movs	r3, #0
 80175c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80175c8:	7af9      	ldrb	r1, [r7, #11]
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	687a      	ldr	r2, [r7, #4]
 80175ce:	f7f1 ff10 	bl	80093f2 <HAL_PCD_EP_Transmit>
 80175d2:	4603      	mov	r3, r0
 80175d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175d6:	7dfb      	ldrb	r3, [r7, #23]
 80175d8:	4618      	mov	r0, r3
 80175da:	f000 f853 	bl	8017684 <USBD_Get_USB_Status>
 80175de:	4603      	mov	r3, r0
 80175e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80175e4:	4618      	mov	r0, r3
 80175e6:	3718      	adds	r7, #24
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}

080175ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b086      	sub	sp, #24
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	60f8      	str	r0, [r7, #12]
 80175f4:	607a      	str	r2, [r7, #4]
 80175f6:	603b      	str	r3, [r7, #0]
 80175f8:	460b      	mov	r3, r1
 80175fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175fc:	2300      	movs	r3, #0
 80175fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017600:	2300      	movs	r3, #0
 8017602:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801760a:	7af9      	ldrb	r1, [r7, #11]
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	f7f1 fe9b 	bl	800934a <HAL_PCD_EP_Receive>
 8017614:	4603      	mov	r3, r0
 8017616:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017618:	7dfb      	ldrb	r3, [r7, #23]
 801761a:	4618      	mov	r0, r3
 801761c:	f000 f832 	bl	8017684 <USBD_Get_USB_Status>
 8017620:	4603      	mov	r3, r0
 8017622:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017624:	7dbb      	ldrb	r3, [r7, #22]
}
 8017626:	4618      	mov	r0, r3
 8017628:	3718      	adds	r7, #24
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}

0801762e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b082      	sub	sp, #8
 8017632:	af00      	add	r7, sp, #0
 8017634:	6078      	str	r0, [r7, #4]
 8017636:	460b      	mov	r3, r1
 8017638:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017640:	78fa      	ldrb	r2, [r7, #3]
 8017642:	4611      	mov	r1, r2
 8017644:	4618      	mov	r0, r3
 8017646:	f7f1 febc 	bl	80093c2 <HAL_PCD_EP_GetRxCount>
 801764a:	4603      	mov	r3, r0
}
 801764c:	4618      	mov	r0, r3
 801764e:	3708      	adds	r7, #8
 8017650:	46bd      	mov	sp, r7
 8017652:	bd80      	pop	{r7, pc}

08017654 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017654:	b480      	push	{r7}
 8017656:	b083      	sub	sp, #12
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801765c:	4b03      	ldr	r3, [pc, #12]	; (801766c <USBD_static_malloc+0x18>)
}
 801765e:	4618      	mov	r0, r3
 8017660:	370c      	adds	r7, #12
 8017662:	46bd      	mov	sp, r7
 8017664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017668:	4770      	bx	lr
 801766a:	bf00      	nop
 801766c:	240030fc 	.word	0x240030fc

08017670 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017670:	b480      	push	{r7}
 8017672:	b083      	sub	sp, #12
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017678:	bf00      	nop
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017684:	b480      	push	{r7}
 8017686:	b085      	sub	sp, #20
 8017688:	af00      	add	r7, sp, #0
 801768a:	4603      	mov	r3, r0
 801768c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017692:	79fb      	ldrb	r3, [r7, #7]
 8017694:	2b03      	cmp	r3, #3
 8017696:	d817      	bhi.n	80176c8 <USBD_Get_USB_Status+0x44>
 8017698:	a201      	add	r2, pc, #4	; (adr r2, 80176a0 <USBD_Get_USB_Status+0x1c>)
 801769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801769e:	bf00      	nop
 80176a0:	080176b1 	.word	0x080176b1
 80176a4:	080176b7 	.word	0x080176b7
 80176a8:	080176bd 	.word	0x080176bd
 80176ac:	080176c3 	.word	0x080176c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80176b0:	2300      	movs	r3, #0
 80176b2:	73fb      	strb	r3, [r7, #15]
    break;
 80176b4:	e00b      	b.n	80176ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80176b6:	2303      	movs	r3, #3
 80176b8:	73fb      	strb	r3, [r7, #15]
    break;
 80176ba:	e008      	b.n	80176ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80176bc:	2301      	movs	r3, #1
 80176be:	73fb      	strb	r3, [r7, #15]
    break;
 80176c0:	e005      	b.n	80176ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80176c2:	2303      	movs	r3, #3
 80176c4:	73fb      	strb	r3, [r7, #15]
    break;
 80176c6:	e002      	b.n	80176ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80176c8:	2303      	movs	r3, #3
 80176ca:	73fb      	strb	r3, [r7, #15]
    break;
 80176cc:	bf00      	nop
  }
  return usb_status;
 80176ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3714      	adds	r7, #20
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <siprintf>:
 80176dc:	b40e      	push	{r1, r2, r3}
 80176de:	b500      	push	{lr}
 80176e0:	b09c      	sub	sp, #112	; 0x70
 80176e2:	ab1d      	add	r3, sp, #116	; 0x74
 80176e4:	9002      	str	r0, [sp, #8]
 80176e6:	9006      	str	r0, [sp, #24]
 80176e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80176ec:	4809      	ldr	r0, [pc, #36]	; (8017714 <siprintf+0x38>)
 80176ee:	9107      	str	r1, [sp, #28]
 80176f0:	9104      	str	r1, [sp, #16]
 80176f2:	4909      	ldr	r1, [pc, #36]	; (8017718 <siprintf+0x3c>)
 80176f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80176f8:	9105      	str	r1, [sp, #20]
 80176fa:	6800      	ldr	r0, [r0, #0]
 80176fc:	9301      	str	r3, [sp, #4]
 80176fe:	a902      	add	r1, sp, #8
 8017700:	f000 f9d6 	bl	8017ab0 <_svfiprintf_r>
 8017704:	9b02      	ldr	r3, [sp, #8]
 8017706:	2200      	movs	r2, #0
 8017708:	701a      	strb	r2, [r3, #0]
 801770a:	b01c      	add	sp, #112	; 0x70
 801770c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017710:	b003      	add	sp, #12
 8017712:	4770      	bx	lr
 8017714:	24000150 	.word	0x24000150
 8017718:	ffff0208 	.word	0xffff0208

0801771c <siscanf>:
 801771c:	b40e      	push	{r1, r2, r3}
 801771e:	b510      	push	{r4, lr}
 8017720:	b09f      	sub	sp, #124	; 0x7c
 8017722:	ac21      	add	r4, sp, #132	; 0x84
 8017724:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017728:	f854 2b04 	ldr.w	r2, [r4], #4
 801772c:	9201      	str	r2, [sp, #4]
 801772e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017732:	9004      	str	r0, [sp, #16]
 8017734:	9008      	str	r0, [sp, #32]
 8017736:	f7e8 fdf5 	bl	8000324 <strlen>
 801773a:	4b0c      	ldr	r3, [pc, #48]	; (801776c <siscanf+0x50>)
 801773c:	9005      	str	r0, [sp, #20]
 801773e:	9009      	str	r0, [sp, #36]	; 0x24
 8017740:	930d      	str	r3, [sp, #52]	; 0x34
 8017742:	480b      	ldr	r0, [pc, #44]	; (8017770 <siscanf+0x54>)
 8017744:	9a01      	ldr	r2, [sp, #4]
 8017746:	6800      	ldr	r0, [r0, #0]
 8017748:	9403      	str	r4, [sp, #12]
 801774a:	2300      	movs	r3, #0
 801774c:	9311      	str	r3, [sp, #68]	; 0x44
 801774e:	9316      	str	r3, [sp, #88]	; 0x58
 8017750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017754:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017758:	a904      	add	r1, sp, #16
 801775a:	4623      	mov	r3, r4
 801775c:	f000 fb00 	bl	8017d60 <__ssvfiscanf_r>
 8017760:	b01f      	add	sp, #124	; 0x7c
 8017762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017766:	b003      	add	sp, #12
 8017768:	4770      	bx	lr
 801776a:	bf00      	nop
 801776c:	08017775 	.word	0x08017775
 8017770:	24000150 	.word	0x24000150

08017774 <__seofread>:
 8017774:	2000      	movs	r0, #0
 8017776:	4770      	bx	lr

08017778 <memset>:
 8017778:	4402      	add	r2, r0
 801777a:	4603      	mov	r3, r0
 801777c:	4293      	cmp	r3, r2
 801777e:	d100      	bne.n	8017782 <memset+0xa>
 8017780:	4770      	bx	lr
 8017782:	f803 1b01 	strb.w	r1, [r3], #1
 8017786:	e7f9      	b.n	801777c <memset+0x4>

08017788 <__errno>:
 8017788:	4b01      	ldr	r3, [pc, #4]	; (8017790 <__errno+0x8>)
 801778a:	6818      	ldr	r0, [r3, #0]
 801778c:	4770      	bx	lr
 801778e:	bf00      	nop
 8017790:	24000150 	.word	0x24000150

08017794 <__libc_init_array>:
 8017794:	b570      	push	{r4, r5, r6, lr}
 8017796:	4d0d      	ldr	r5, [pc, #52]	; (80177cc <__libc_init_array+0x38>)
 8017798:	4c0d      	ldr	r4, [pc, #52]	; (80177d0 <__libc_init_array+0x3c>)
 801779a:	1b64      	subs	r4, r4, r5
 801779c:	10a4      	asrs	r4, r4, #2
 801779e:	2600      	movs	r6, #0
 80177a0:	42a6      	cmp	r6, r4
 80177a2:	d109      	bne.n	80177b8 <__libc_init_array+0x24>
 80177a4:	4d0b      	ldr	r5, [pc, #44]	; (80177d4 <__libc_init_array+0x40>)
 80177a6:	4c0c      	ldr	r4, [pc, #48]	; (80177d8 <__libc_init_array+0x44>)
 80177a8:	f001 f8fe 	bl	80189a8 <_init>
 80177ac:	1b64      	subs	r4, r4, r5
 80177ae:	10a4      	asrs	r4, r4, #2
 80177b0:	2600      	movs	r6, #0
 80177b2:	42a6      	cmp	r6, r4
 80177b4:	d105      	bne.n	80177c2 <__libc_init_array+0x2e>
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177bc:	4798      	blx	r3
 80177be:	3601      	adds	r6, #1
 80177c0:	e7ee      	b.n	80177a0 <__libc_init_array+0xc>
 80177c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177c6:	4798      	blx	r3
 80177c8:	3601      	adds	r6, #1
 80177ca:	e7f2      	b.n	80177b2 <__libc_init_array+0x1e>
 80177cc:	08018dd8 	.word	0x08018dd8
 80177d0:	08018dd8 	.word	0x08018dd8
 80177d4:	08018dd8 	.word	0x08018dd8
 80177d8:	08018ddc 	.word	0x08018ddc

080177dc <__retarget_lock_acquire_recursive>:
 80177dc:	4770      	bx	lr

080177de <__retarget_lock_release_recursive>:
 80177de:	4770      	bx	lr

080177e0 <strcpy>:
 80177e0:	4603      	mov	r3, r0
 80177e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177e6:	f803 2b01 	strb.w	r2, [r3], #1
 80177ea:	2a00      	cmp	r2, #0
 80177ec:	d1f9      	bne.n	80177e2 <strcpy+0x2>
 80177ee:	4770      	bx	lr

080177f0 <memcpy>:
 80177f0:	440a      	add	r2, r1
 80177f2:	4291      	cmp	r1, r2
 80177f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80177f8:	d100      	bne.n	80177fc <memcpy+0xc>
 80177fa:	4770      	bx	lr
 80177fc:	b510      	push	{r4, lr}
 80177fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017802:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017806:	4291      	cmp	r1, r2
 8017808:	d1f9      	bne.n	80177fe <memcpy+0xe>
 801780a:	bd10      	pop	{r4, pc}

0801780c <_free_r>:
 801780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801780e:	2900      	cmp	r1, #0
 8017810:	d044      	beq.n	801789c <_free_r+0x90>
 8017812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017816:	9001      	str	r0, [sp, #4]
 8017818:	2b00      	cmp	r3, #0
 801781a:	f1a1 0404 	sub.w	r4, r1, #4
 801781e:	bfb8      	it	lt
 8017820:	18e4      	addlt	r4, r4, r3
 8017822:	f000 f8df 	bl	80179e4 <__malloc_lock>
 8017826:	4a1e      	ldr	r2, [pc, #120]	; (80178a0 <_free_r+0x94>)
 8017828:	9801      	ldr	r0, [sp, #4]
 801782a:	6813      	ldr	r3, [r2, #0]
 801782c:	b933      	cbnz	r3, 801783c <_free_r+0x30>
 801782e:	6063      	str	r3, [r4, #4]
 8017830:	6014      	str	r4, [r2, #0]
 8017832:	b003      	add	sp, #12
 8017834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017838:	f000 b8da 	b.w	80179f0 <__malloc_unlock>
 801783c:	42a3      	cmp	r3, r4
 801783e:	d908      	bls.n	8017852 <_free_r+0x46>
 8017840:	6825      	ldr	r5, [r4, #0]
 8017842:	1961      	adds	r1, r4, r5
 8017844:	428b      	cmp	r3, r1
 8017846:	bf01      	itttt	eq
 8017848:	6819      	ldreq	r1, [r3, #0]
 801784a:	685b      	ldreq	r3, [r3, #4]
 801784c:	1949      	addeq	r1, r1, r5
 801784e:	6021      	streq	r1, [r4, #0]
 8017850:	e7ed      	b.n	801782e <_free_r+0x22>
 8017852:	461a      	mov	r2, r3
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	b10b      	cbz	r3, 801785c <_free_r+0x50>
 8017858:	42a3      	cmp	r3, r4
 801785a:	d9fa      	bls.n	8017852 <_free_r+0x46>
 801785c:	6811      	ldr	r1, [r2, #0]
 801785e:	1855      	adds	r5, r2, r1
 8017860:	42a5      	cmp	r5, r4
 8017862:	d10b      	bne.n	801787c <_free_r+0x70>
 8017864:	6824      	ldr	r4, [r4, #0]
 8017866:	4421      	add	r1, r4
 8017868:	1854      	adds	r4, r2, r1
 801786a:	42a3      	cmp	r3, r4
 801786c:	6011      	str	r1, [r2, #0]
 801786e:	d1e0      	bne.n	8017832 <_free_r+0x26>
 8017870:	681c      	ldr	r4, [r3, #0]
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	6053      	str	r3, [r2, #4]
 8017876:	440c      	add	r4, r1
 8017878:	6014      	str	r4, [r2, #0]
 801787a:	e7da      	b.n	8017832 <_free_r+0x26>
 801787c:	d902      	bls.n	8017884 <_free_r+0x78>
 801787e:	230c      	movs	r3, #12
 8017880:	6003      	str	r3, [r0, #0]
 8017882:	e7d6      	b.n	8017832 <_free_r+0x26>
 8017884:	6825      	ldr	r5, [r4, #0]
 8017886:	1961      	adds	r1, r4, r5
 8017888:	428b      	cmp	r3, r1
 801788a:	bf04      	itt	eq
 801788c:	6819      	ldreq	r1, [r3, #0]
 801788e:	685b      	ldreq	r3, [r3, #4]
 8017890:	6063      	str	r3, [r4, #4]
 8017892:	bf04      	itt	eq
 8017894:	1949      	addeq	r1, r1, r5
 8017896:	6021      	streq	r1, [r4, #0]
 8017898:	6054      	str	r4, [r2, #4]
 801789a:	e7ca      	b.n	8017832 <_free_r+0x26>
 801789c:	b003      	add	sp, #12
 801789e:	bd30      	pop	{r4, r5, pc}
 80178a0:	2400345c 	.word	0x2400345c

080178a4 <sbrk_aligned>:
 80178a4:	b570      	push	{r4, r5, r6, lr}
 80178a6:	4e0e      	ldr	r6, [pc, #56]	; (80178e0 <sbrk_aligned+0x3c>)
 80178a8:	460c      	mov	r4, r1
 80178aa:	6831      	ldr	r1, [r6, #0]
 80178ac:	4605      	mov	r5, r0
 80178ae:	b911      	cbnz	r1, 80178b6 <sbrk_aligned+0x12>
 80178b0:	f000 ff3a 	bl	8018728 <_sbrk_r>
 80178b4:	6030      	str	r0, [r6, #0]
 80178b6:	4621      	mov	r1, r4
 80178b8:	4628      	mov	r0, r5
 80178ba:	f000 ff35 	bl	8018728 <_sbrk_r>
 80178be:	1c43      	adds	r3, r0, #1
 80178c0:	d00a      	beq.n	80178d8 <sbrk_aligned+0x34>
 80178c2:	1cc4      	adds	r4, r0, #3
 80178c4:	f024 0403 	bic.w	r4, r4, #3
 80178c8:	42a0      	cmp	r0, r4
 80178ca:	d007      	beq.n	80178dc <sbrk_aligned+0x38>
 80178cc:	1a21      	subs	r1, r4, r0
 80178ce:	4628      	mov	r0, r5
 80178d0:	f000 ff2a 	bl	8018728 <_sbrk_r>
 80178d4:	3001      	adds	r0, #1
 80178d6:	d101      	bne.n	80178dc <sbrk_aligned+0x38>
 80178d8:	f04f 34ff 	mov.w	r4, #4294967295
 80178dc:	4620      	mov	r0, r4
 80178de:	bd70      	pop	{r4, r5, r6, pc}
 80178e0:	24003460 	.word	0x24003460

080178e4 <_malloc_r>:
 80178e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178e8:	1ccd      	adds	r5, r1, #3
 80178ea:	f025 0503 	bic.w	r5, r5, #3
 80178ee:	3508      	adds	r5, #8
 80178f0:	2d0c      	cmp	r5, #12
 80178f2:	bf38      	it	cc
 80178f4:	250c      	movcc	r5, #12
 80178f6:	2d00      	cmp	r5, #0
 80178f8:	4607      	mov	r7, r0
 80178fa:	db01      	blt.n	8017900 <_malloc_r+0x1c>
 80178fc:	42a9      	cmp	r1, r5
 80178fe:	d905      	bls.n	801790c <_malloc_r+0x28>
 8017900:	230c      	movs	r3, #12
 8017902:	603b      	str	r3, [r7, #0]
 8017904:	2600      	movs	r6, #0
 8017906:	4630      	mov	r0, r6
 8017908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801790c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80179e0 <_malloc_r+0xfc>
 8017910:	f000 f868 	bl	80179e4 <__malloc_lock>
 8017914:	f8d8 3000 	ldr.w	r3, [r8]
 8017918:	461c      	mov	r4, r3
 801791a:	bb5c      	cbnz	r4, 8017974 <_malloc_r+0x90>
 801791c:	4629      	mov	r1, r5
 801791e:	4638      	mov	r0, r7
 8017920:	f7ff ffc0 	bl	80178a4 <sbrk_aligned>
 8017924:	1c43      	adds	r3, r0, #1
 8017926:	4604      	mov	r4, r0
 8017928:	d155      	bne.n	80179d6 <_malloc_r+0xf2>
 801792a:	f8d8 4000 	ldr.w	r4, [r8]
 801792e:	4626      	mov	r6, r4
 8017930:	2e00      	cmp	r6, #0
 8017932:	d145      	bne.n	80179c0 <_malloc_r+0xdc>
 8017934:	2c00      	cmp	r4, #0
 8017936:	d048      	beq.n	80179ca <_malloc_r+0xe6>
 8017938:	6823      	ldr	r3, [r4, #0]
 801793a:	4631      	mov	r1, r6
 801793c:	4638      	mov	r0, r7
 801793e:	eb04 0903 	add.w	r9, r4, r3
 8017942:	f000 fef1 	bl	8018728 <_sbrk_r>
 8017946:	4581      	cmp	r9, r0
 8017948:	d13f      	bne.n	80179ca <_malloc_r+0xe6>
 801794a:	6821      	ldr	r1, [r4, #0]
 801794c:	1a6d      	subs	r5, r5, r1
 801794e:	4629      	mov	r1, r5
 8017950:	4638      	mov	r0, r7
 8017952:	f7ff ffa7 	bl	80178a4 <sbrk_aligned>
 8017956:	3001      	adds	r0, #1
 8017958:	d037      	beq.n	80179ca <_malloc_r+0xe6>
 801795a:	6823      	ldr	r3, [r4, #0]
 801795c:	442b      	add	r3, r5
 801795e:	6023      	str	r3, [r4, #0]
 8017960:	f8d8 3000 	ldr.w	r3, [r8]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d038      	beq.n	80179da <_malloc_r+0xf6>
 8017968:	685a      	ldr	r2, [r3, #4]
 801796a:	42a2      	cmp	r2, r4
 801796c:	d12b      	bne.n	80179c6 <_malloc_r+0xe2>
 801796e:	2200      	movs	r2, #0
 8017970:	605a      	str	r2, [r3, #4]
 8017972:	e00f      	b.n	8017994 <_malloc_r+0xb0>
 8017974:	6822      	ldr	r2, [r4, #0]
 8017976:	1b52      	subs	r2, r2, r5
 8017978:	d41f      	bmi.n	80179ba <_malloc_r+0xd6>
 801797a:	2a0b      	cmp	r2, #11
 801797c:	d917      	bls.n	80179ae <_malloc_r+0xca>
 801797e:	1961      	adds	r1, r4, r5
 8017980:	42a3      	cmp	r3, r4
 8017982:	6025      	str	r5, [r4, #0]
 8017984:	bf18      	it	ne
 8017986:	6059      	strne	r1, [r3, #4]
 8017988:	6863      	ldr	r3, [r4, #4]
 801798a:	bf08      	it	eq
 801798c:	f8c8 1000 	streq.w	r1, [r8]
 8017990:	5162      	str	r2, [r4, r5]
 8017992:	604b      	str	r3, [r1, #4]
 8017994:	4638      	mov	r0, r7
 8017996:	f104 060b 	add.w	r6, r4, #11
 801799a:	f000 f829 	bl	80179f0 <__malloc_unlock>
 801799e:	f026 0607 	bic.w	r6, r6, #7
 80179a2:	1d23      	adds	r3, r4, #4
 80179a4:	1af2      	subs	r2, r6, r3
 80179a6:	d0ae      	beq.n	8017906 <_malloc_r+0x22>
 80179a8:	1b9b      	subs	r3, r3, r6
 80179aa:	50a3      	str	r3, [r4, r2]
 80179ac:	e7ab      	b.n	8017906 <_malloc_r+0x22>
 80179ae:	42a3      	cmp	r3, r4
 80179b0:	6862      	ldr	r2, [r4, #4]
 80179b2:	d1dd      	bne.n	8017970 <_malloc_r+0x8c>
 80179b4:	f8c8 2000 	str.w	r2, [r8]
 80179b8:	e7ec      	b.n	8017994 <_malloc_r+0xb0>
 80179ba:	4623      	mov	r3, r4
 80179bc:	6864      	ldr	r4, [r4, #4]
 80179be:	e7ac      	b.n	801791a <_malloc_r+0x36>
 80179c0:	4634      	mov	r4, r6
 80179c2:	6876      	ldr	r6, [r6, #4]
 80179c4:	e7b4      	b.n	8017930 <_malloc_r+0x4c>
 80179c6:	4613      	mov	r3, r2
 80179c8:	e7cc      	b.n	8017964 <_malloc_r+0x80>
 80179ca:	230c      	movs	r3, #12
 80179cc:	603b      	str	r3, [r7, #0]
 80179ce:	4638      	mov	r0, r7
 80179d0:	f000 f80e 	bl	80179f0 <__malloc_unlock>
 80179d4:	e797      	b.n	8017906 <_malloc_r+0x22>
 80179d6:	6025      	str	r5, [r4, #0]
 80179d8:	e7dc      	b.n	8017994 <_malloc_r+0xb0>
 80179da:	605b      	str	r3, [r3, #4]
 80179dc:	deff      	udf	#255	; 0xff
 80179de:	bf00      	nop
 80179e0:	2400345c 	.word	0x2400345c

080179e4 <__malloc_lock>:
 80179e4:	4801      	ldr	r0, [pc, #4]	; (80179ec <__malloc_lock+0x8>)
 80179e6:	f7ff bef9 	b.w	80177dc <__retarget_lock_acquire_recursive>
 80179ea:	bf00      	nop
 80179ec:	24003458 	.word	0x24003458

080179f0 <__malloc_unlock>:
 80179f0:	4801      	ldr	r0, [pc, #4]	; (80179f8 <__malloc_unlock+0x8>)
 80179f2:	f7ff bef4 	b.w	80177de <__retarget_lock_release_recursive>
 80179f6:	bf00      	nop
 80179f8:	24003458 	.word	0x24003458

080179fc <__ssputs_r>:
 80179fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a00:	688e      	ldr	r6, [r1, #8]
 8017a02:	461f      	mov	r7, r3
 8017a04:	42be      	cmp	r6, r7
 8017a06:	680b      	ldr	r3, [r1, #0]
 8017a08:	4682      	mov	sl, r0
 8017a0a:	460c      	mov	r4, r1
 8017a0c:	4690      	mov	r8, r2
 8017a0e:	d82c      	bhi.n	8017a6a <__ssputs_r+0x6e>
 8017a10:	898a      	ldrh	r2, [r1, #12]
 8017a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a16:	d026      	beq.n	8017a66 <__ssputs_r+0x6a>
 8017a18:	6965      	ldr	r5, [r4, #20]
 8017a1a:	6909      	ldr	r1, [r1, #16]
 8017a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a20:	eba3 0901 	sub.w	r9, r3, r1
 8017a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a28:	1c7b      	adds	r3, r7, #1
 8017a2a:	444b      	add	r3, r9
 8017a2c:	106d      	asrs	r5, r5, #1
 8017a2e:	429d      	cmp	r5, r3
 8017a30:	bf38      	it	cc
 8017a32:	461d      	movcc	r5, r3
 8017a34:	0553      	lsls	r3, r2, #21
 8017a36:	d527      	bpl.n	8017a88 <__ssputs_r+0x8c>
 8017a38:	4629      	mov	r1, r5
 8017a3a:	f7ff ff53 	bl	80178e4 <_malloc_r>
 8017a3e:	4606      	mov	r6, r0
 8017a40:	b360      	cbz	r0, 8017a9c <__ssputs_r+0xa0>
 8017a42:	6921      	ldr	r1, [r4, #16]
 8017a44:	464a      	mov	r2, r9
 8017a46:	f7ff fed3 	bl	80177f0 <memcpy>
 8017a4a:	89a3      	ldrh	r3, [r4, #12]
 8017a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a54:	81a3      	strh	r3, [r4, #12]
 8017a56:	6126      	str	r6, [r4, #16]
 8017a58:	6165      	str	r5, [r4, #20]
 8017a5a:	444e      	add	r6, r9
 8017a5c:	eba5 0509 	sub.w	r5, r5, r9
 8017a60:	6026      	str	r6, [r4, #0]
 8017a62:	60a5      	str	r5, [r4, #8]
 8017a64:	463e      	mov	r6, r7
 8017a66:	42be      	cmp	r6, r7
 8017a68:	d900      	bls.n	8017a6c <__ssputs_r+0x70>
 8017a6a:	463e      	mov	r6, r7
 8017a6c:	6820      	ldr	r0, [r4, #0]
 8017a6e:	4632      	mov	r2, r6
 8017a70:	4641      	mov	r1, r8
 8017a72:	f000 fe3e 	bl	80186f2 <memmove>
 8017a76:	68a3      	ldr	r3, [r4, #8]
 8017a78:	1b9b      	subs	r3, r3, r6
 8017a7a:	60a3      	str	r3, [r4, #8]
 8017a7c:	6823      	ldr	r3, [r4, #0]
 8017a7e:	4433      	add	r3, r6
 8017a80:	6023      	str	r3, [r4, #0]
 8017a82:	2000      	movs	r0, #0
 8017a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a88:	462a      	mov	r2, r5
 8017a8a:	f000 fe5d 	bl	8018748 <_realloc_r>
 8017a8e:	4606      	mov	r6, r0
 8017a90:	2800      	cmp	r0, #0
 8017a92:	d1e0      	bne.n	8017a56 <__ssputs_r+0x5a>
 8017a94:	6921      	ldr	r1, [r4, #16]
 8017a96:	4650      	mov	r0, sl
 8017a98:	f7ff feb8 	bl	801780c <_free_r>
 8017a9c:	230c      	movs	r3, #12
 8017a9e:	f8ca 3000 	str.w	r3, [sl]
 8017aa2:	89a3      	ldrh	r3, [r4, #12]
 8017aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017aa8:	81a3      	strh	r3, [r4, #12]
 8017aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8017aae:	e7e9      	b.n	8017a84 <__ssputs_r+0x88>

08017ab0 <_svfiprintf_r>:
 8017ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab4:	4698      	mov	r8, r3
 8017ab6:	898b      	ldrh	r3, [r1, #12]
 8017ab8:	061b      	lsls	r3, r3, #24
 8017aba:	b09d      	sub	sp, #116	; 0x74
 8017abc:	4607      	mov	r7, r0
 8017abe:	460d      	mov	r5, r1
 8017ac0:	4614      	mov	r4, r2
 8017ac2:	d50e      	bpl.n	8017ae2 <_svfiprintf_r+0x32>
 8017ac4:	690b      	ldr	r3, [r1, #16]
 8017ac6:	b963      	cbnz	r3, 8017ae2 <_svfiprintf_r+0x32>
 8017ac8:	2140      	movs	r1, #64	; 0x40
 8017aca:	f7ff ff0b 	bl	80178e4 <_malloc_r>
 8017ace:	6028      	str	r0, [r5, #0]
 8017ad0:	6128      	str	r0, [r5, #16]
 8017ad2:	b920      	cbnz	r0, 8017ade <_svfiprintf_r+0x2e>
 8017ad4:	230c      	movs	r3, #12
 8017ad6:	603b      	str	r3, [r7, #0]
 8017ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8017adc:	e0d0      	b.n	8017c80 <_svfiprintf_r+0x1d0>
 8017ade:	2340      	movs	r3, #64	; 0x40
 8017ae0:	616b      	str	r3, [r5, #20]
 8017ae2:	2300      	movs	r3, #0
 8017ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ae6:	2320      	movs	r3, #32
 8017ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017aec:	f8cd 800c 	str.w	r8, [sp, #12]
 8017af0:	2330      	movs	r3, #48	; 0x30
 8017af2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017c98 <_svfiprintf_r+0x1e8>
 8017af6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017afa:	f04f 0901 	mov.w	r9, #1
 8017afe:	4623      	mov	r3, r4
 8017b00:	469a      	mov	sl, r3
 8017b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b06:	b10a      	cbz	r2, 8017b0c <_svfiprintf_r+0x5c>
 8017b08:	2a25      	cmp	r2, #37	; 0x25
 8017b0a:	d1f9      	bne.n	8017b00 <_svfiprintf_r+0x50>
 8017b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8017b10:	d00b      	beq.n	8017b2a <_svfiprintf_r+0x7a>
 8017b12:	465b      	mov	r3, fp
 8017b14:	4622      	mov	r2, r4
 8017b16:	4629      	mov	r1, r5
 8017b18:	4638      	mov	r0, r7
 8017b1a:	f7ff ff6f 	bl	80179fc <__ssputs_r>
 8017b1e:	3001      	adds	r0, #1
 8017b20:	f000 80a9 	beq.w	8017c76 <_svfiprintf_r+0x1c6>
 8017b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b26:	445a      	add	r2, fp
 8017b28:	9209      	str	r2, [sp, #36]	; 0x24
 8017b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	f000 80a1 	beq.w	8017c76 <_svfiprintf_r+0x1c6>
 8017b34:	2300      	movs	r3, #0
 8017b36:	f04f 32ff 	mov.w	r2, #4294967295
 8017b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b3e:	f10a 0a01 	add.w	sl, sl, #1
 8017b42:	9304      	str	r3, [sp, #16]
 8017b44:	9307      	str	r3, [sp, #28]
 8017b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8017b4c:	4654      	mov	r4, sl
 8017b4e:	2205      	movs	r2, #5
 8017b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b54:	4850      	ldr	r0, [pc, #320]	; (8017c98 <_svfiprintf_r+0x1e8>)
 8017b56:	f7e8 fbf3 	bl	8000340 <memchr>
 8017b5a:	9a04      	ldr	r2, [sp, #16]
 8017b5c:	b9d8      	cbnz	r0, 8017b96 <_svfiprintf_r+0xe6>
 8017b5e:	06d0      	lsls	r0, r2, #27
 8017b60:	bf44      	itt	mi
 8017b62:	2320      	movmi	r3, #32
 8017b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b68:	0711      	lsls	r1, r2, #28
 8017b6a:	bf44      	itt	mi
 8017b6c:	232b      	movmi	r3, #43	; 0x2b
 8017b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b72:	f89a 3000 	ldrb.w	r3, [sl]
 8017b76:	2b2a      	cmp	r3, #42	; 0x2a
 8017b78:	d015      	beq.n	8017ba6 <_svfiprintf_r+0xf6>
 8017b7a:	9a07      	ldr	r2, [sp, #28]
 8017b7c:	4654      	mov	r4, sl
 8017b7e:	2000      	movs	r0, #0
 8017b80:	f04f 0c0a 	mov.w	ip, #10
 8017b84:	4621      	mov	r1, r4
 8017b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b8a:	3b30      	subs	r3, #48	; 0x30
 8017b8c:	2b09      	cmp	r3, #9
 8017b8e:	d94d      	bls.n	8017c2c <_svfiprintf_r+0x17c>
 8017b90:	b1b0      	cbz	r0, 8017bc0 <_svfiprintf_r+0x110>
 8017b92:	9207      	str	r2, [sp, #28]
 8017b94:	e014      	b.n	8017bc0 <_svfiprintf_r+0x110>
 8017b96:	eba0 0308 	sub.w	r3, r0, r8
 8017b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8017b9e:	4313      	orrs	r3, r2
 8017ba0:	9304      	str	r3, [sp, #16]
 8017ba2:	46a2      	mov	sl, r4
 8017ba4:	e7d2      	b.n	8017b4c <_svfiprintf_r+0x9c>
 8017ba6:	9b03      	ldr	r3, [sp, #12]
 8017ba8:	1d19      	adds	r1, r3, #4
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	9103      	str	r1, [sp, #12]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	bfbb      	ittet	lt
 8017bb2:	425b      	neglt	r3, r3
 8017bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8017bb8:	9307      	strge	r3, [sp, #28]
 8017bba:	9307      	strlt	r3, [sp, #28]
 8017bbc:	bfb8      	it	lt
 8017bbe:	9204      	strlt	r2, [sp, #16]
 8017bc0:	7823      	ldrb	r3, [r4, #0]
 8017bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8017bc4:	d10c      	bne.n	8017be0 <_svfiprintf_r+0x130>
 8017bc6:	7863      	ldrb	r3, [r4, #1]
 8017bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8017bca:	d134      	bne.n	8017c36 <_svfiprintf_r+0x186>
 8017bcc:	9b03      	ldr	r3, [sp, #12]
 8017bce:	1d1a      	adds	r2, r3, #4
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	9203      	str	r2, [sp, #12]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	bfb8      	it	lt
 8017bd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017bdc:	3402      	adds	r4, #2
 8017bde:	9305      	str	r3, [sp, #20]
 8017be0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017ca8 <_svfiprintf_r+0x1f8>
 8017be4:	7821      	ldrb	r1, [r4, #0]
 8017be6:	2203      	movs	r2, #3
 8017be8:	4650      	mov	r0, sl
 8017bea:	f7e8 fba9 	bl	8000340 <memchr>
 8017bee:	b138      	cbz	r0, 8017c00 <_svfiprintf_r+0x150>
 8017bf0:	9b04      	ldr	r3, [sp, #16]
 8017bf2:	eba0 000a 	sub.w	r0, r0, sl
 8017bf6:	2240      	movs	r2, #64	; 0x40
 8017bf8:	4082      	lsls	r2, r0
 8017bfa:	4313      	orrs	r3, r2
 8017bfc:	3401      	adds	r4, #1
 8017bfe:	9304      	str	r3, [sp, #16]
 8017c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c04:	4825      	ldr	r0, [pc, #148]	; (8017c9c <_svfiprintf_r+0x1ec>)
 8017c06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c0a:	2206      	movs	r2, #6
 8017c0c:	f7e8 fb98 	bl	8000340 <memchr>
 8017c10:	2800      	cmp	r0, #0
 8017c12:	d038      	beq.n	8017c86 <_svfiprintf_r+0x1d6>
 8017c14:	4b22      	ldr	r3, [pc, #136]	; (8017ca0 <_svfiprintf_r+0x1f0>)
 8017c16:	bb1b      	cbnz	r3, 8017c60 <_svfiprintf_r+0x1b0>
 8017c18:	9b03      	ldr	r3, [sp, #12]
 8017c1a:	3307      	adds	r3, #7
 8017c1c:	f023 0307 	bic.w	r3, r3, #7
 8017c20:	3308      	adds	r3, #8
 8017c22:	9303      	str	r3, [sp, #12]
 8017c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c26:	4433      	add	r3, r6
 8017c28:	9309      	str	r3, [sp, #36]	; 0x24
 8017c2a:	e768      	b.n	8017afe <_svfiprintf_r+0x4e>
 8017c2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c30:	460c      	mov	r4, r1
 8017c32:	2001      	movs	r0, #1
 8017c34:	e7a6      	b.n	8017b84 <_svfiprintf_r+0xd4>
 8017c36:	2300      	movs	r3, #0
 8017c38:	3401      	adds	r4, #1
 8017c3a:	9305      	str	r3, [sp, #20]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	f04f 0c0a 	mov.w	ip, #10
 8017c42:	4620      	mov	r0, r4
 8017c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c48:	3a30      	subs	r2, #48	; 0x30
 8017c4a:	2a09      	cmp	r2, #9
 8017c4c:	d903      	bls.n	8017c56 <_svfiprintf_r+0x1a6>
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d0c6      	beq.n	8017be0 <_svfiprintf_r+0x130>
 8017c52:	9105      	str	r1, [sp, #20]
 8017c54:	e7c4      	b.n	8017be0 <_svfiprintf_r+0x130>
 8017c56:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	e7f0      	b.n	8017c42 <_svfiprintf_r+0x192>
 8017c60:	ab03      	add	r3, sp, #12
 8017c62:	9300      	str	r3, [sp, #0]
 8017c64:	462a      	mov	r2, r5
 8017c66:	4b0f      	ldr	r3, [pc, #60]	; (8017ca4 <_svfiprintf_r+0x1f4>)
 8017c68:	a904      	add	r1, sp, #16
 8017c6a:	4638      	mov	r0, r7
 8017c6c:	f3af 8000 	nop.w
 8017c70:	1c42      	adds	r2, r0, #1
 8017c72:	4606      	mov	r6, r0
 8017c74:	d1d6      	bne.n	8017c24 <_svfiprintf_r+0x174>
 8017c76:	89ab      	ldrh	r3, [r5, #12]
 8017c78:	065b      	lsls	r3, r3, #25
 8017c7a:	f53f af2d 	bmi.w	8017ad8 <_svfiprintf_r+0x28>
 8017c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c80:	b01d      	add	sp, #116	; 0x74
 8017c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c86:	ab03      	add	r3, sp, #12
 8017c88:	9300      	str	r3, [sp, #0]
 8017c8a:	462a      	mov	r2, r5
 8017c8c:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <_svfiprintf_r+0x1f4>)
 8017c8e:	a904      	add	r1, sp, #16
 8017c90:	4638      	mov	r0, r7
 8017c92:	f000 fa4b 	bl	801812c <_printf_i>
 8017c96:	e7eb      	b.n	8017c70 <_svfiprintf_r+0x1c0>
 8017c98:	08018c80 	.word	0x08018c80
 8017c9c:	08018c8a 	.word	0x08018c8a
 8017ca0:	00000000 	.word	0x00000000
 8017ca4:	080179fd 	.word	0x080179fd
 8017ca8:	08018c86 	.word	0x08018c86

08017cac <_sungetc_r>:
 8017cac:	b538      	push	{r3, r4, r5, lr}
 8017cae:	1c4b      	adds	r3, r1, #1
 8017cb0:	4614      	mov	r4, r2
 8017cb2:	d103      	bne.n	8017cbc <_sungetc_r+0x10>
 8017cb4:	f04f 35ff 	mov.w	r5, #4294967295
 8017cb8:	4628      	mov	r0, r5
 8017cba:	bd38      	pop	{r3, r4, r5, pc}
 8017cbc:	8993      	ldrh	r3, [r2, #12]
 8017cbe:	f023 0320 	bic.w	r3, r3, #32
 8017cc2:	8193      	strh	r3, [r2, #12]
 8017cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017cc6:	6852      	ldr	r2, [r2, #4]
 8017cc8:	b2cd      	uxtb	r5, r1
 8017cca:	b18b      	cbz	r3, 8017cf0 <_sungetc_r+0x44>
 8017ccc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017cce:	4293      	cmp	r3, r2
 8017cd0:	dd08      	ble.n	8017ce4 <_sungetc_r+0x38>
 8017cd2:	6823      	ldr	r3, [r4, #0]
 8017cd4:	1e5a      	subs	r2, r3, #1
 8017cd6:	6022      	str	r2, [r4, #0]
 8017cd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017cdc:	6863      	ldr	r3, [r4, #4]
 8017cde:	3301      	adds	r3, #1
 8017ce0:	6063      	str	r3, [r4, #4]
 8017ce2:	e7e9      	b.n	8017cb8 <_sungetc_r+0xc>
 8017ce4:	4621      	mov	r1, r4
 8017ce6:	f000 fcca 	bl	801867e <__submore>
 8017cea:	2800      	cmp	r0, #0
 8017cec:	d0f1      	beq.n	8017cd2 <_sungetc_r+0x26>
 8017cee:	e7e1      	b.n	8017cb4 <_sungetc_r+0x8>
 8017cf0:	6921      	ldr	r1, [r4, #16]
 8017cf2:	6823      	ldr	r3, [r4, #0]
 8017cf4:	b151      	cbz	r1, 8017d0c <_sungetc_r+0x60>
 8017cf6:	4299      	cmp	r1, r3
 8017cf8:	d208      	bcs.n	8017d0c <_sungetc_r+0x60>
 8017cfa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017cfe:	42a9      	cmp	r1, r5
 8017d00:	d104      	bne.n	8017d0c <_sungetc_r+0x60>
 8017d02:	3b01      	subs	r3, #1
 8017d04:	3201      	adds	r2, #1
 8017d06:	6023      	str	r3, [r4, #0]
 8017d08:	6062      	str	r2, [r4, #4]
 8017d0a:	e7d5      	b.n	8017cb8 <_sungetc_r+0xc>
 8017d0c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d14:	6363      	str	r3, [r4, #52]	; 0x34
 8017d16:	2303      	movs	r3, #3
 8017d18:	63a3      	str	r3, [r4, #56]	; 0x38
 8017d1a:	4623      	mov	r3, r4
 8017d1c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017d20:	6023      	str	r3, [r4, #0]
 8017d22:	2301      	movs	r3, #1
 8017d24:	e7dc      	b.n	8017ce0 <_sungetc_r+0x34>

08017d26 <__ssrefill_r>:
 8017d26:	b510      	push	{r4, lr}
 8017d28:	460c      	mov	r4, r1
 8017d2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017d2c:	b169      	cbz	r1, 8017d4a <__ssrefill_r+0x24>
 8017d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d32:	4299      	cmp	r1, r3
 8017d34:	d001      	beq.n	8017d3a <__ssrefill_r+0x14>
 8017d36:	f7ff fd69 	bl	801780c <_free_r>
 8017d3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d3c:	6063      	str	r3, [r4, #4]
 8017d3e:	2000      	movs	r0, #0
 8017d40:	6360      	str	r0, [r4, #52]	; 0x34
 8017d42:	b113      	cbz	r3, 8017d4a <__ssrefill_r+0x24>
 8017d44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017d46:	6023      	str	r3, [r4, #0]
 8017d48:	bd10      	pop	{r4, pc}
 8017d4a:	6923      	ldr	r3, [r4, #16]
 8017d4c:	6023      	str	r3, [r4, #0]
 8017d4e:	2300      	movs	r3, #0
 8017d50:	6063      	str	r3, [r4, #4]
 8017d52:	89a3      	ldrh	r3, [r4, #12]
 8017d54:	f043 0320 	orr.w	r3, r3, #32
 8017d58:	81a3      	strh	r3, [r4, #12]
 8017d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8017d5e:	e7f3      	b.n	8017d48 <__ssrefill_r+0x22>

08017d60 <__ssvfiscanf_r>:
 8017d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d64:	460c      	mov	r4, r1
 8017d66:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017d70:	49a6      	ldr	r1, [pc, #664]	; (801800c <__ssvfiscanf_r+0x2ac>)
 8017d72:	91a0      	str	r1, [sp, #640]	; 0x280
 8017d74:	f10d 0804 	add.w	r8, sp, #4
 8017d78:	49a5      	ldr	r1, [pc, #660]	; (8018010 <__ssvfiscanf_r+0x2b0>)
 8017d7a:	4fa6      	ldr	r7, [pc, #664]	; (8018014 <__ssvfiscanf_r+0x2b4>)
 8017d7c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018018 <__ssvfiscanf_r+0x2b8>
 8017d80:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017d84:	4606      	mov	r6, r0
 8017d86:	91a1      	str	r1, [sp, #644]	; 0x284
 8017d88:	9300      	str	r3, [sp, #0]
 8017d8a:	7813      	ldrb	r3, [r2, #0]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	f000 815a 	beq.w	8018046 <__ssvfiscanf_r+0x2e6>
 8017d92:	5cf9      	ldrb	r1, [r7, r3]
 8017d94:	f011 0108 	ands.w	r1, r1, #8
 8017d98:	f102 0501 	add.w	r5, r2, #1
 8017d9c:	d019      	beq.n	8017dd2 <__ssvfiscanf_r+0x72>
 8017d9e:	6863      	ldr	r3, [r4, #4]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	dd0f      	ble.n	8017dc4 <__ssvfiscanf_r+0x64>
 8017da4:	6823      	ldr	r3, [r4, #0]
 8017da6:	781a      	ldrb	r2, [r3, #0]
 8017da8:	5cba      	ldrb	r2, [r7, r2]
 8017daa:	0712      	lsls	r2, r2, #28
 8017dac:	d401      	bmi.n	8017db2 <__ssvfiscanf_r+0x52>
 8017dae:	462a      	mov	r2, r5
 8017db0:	e7eb      	b.n	8017d8a <__ssvfiscanf_r+0x2a>
 8017db2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017db4:	3201      	adds	r2, #1
 8017db6:	9245      	str	r2, [sp, #276]	; 0x114
 8017db8:	6862      	ldr	r2, [r4, #4]
 8017dba:	3301      	adds	r3, #1
 8017dbc:	3a01      	subs	r2, #1
 8017dbe:	6062      	str	r2, [r4, #4]
 8017dc0:	6023      	str	r3, [r4, #0]
 8017dc2:	e7ec      	b.n	8017d9e <__ssvfiscanf_r+0x3e>
 8017dc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	4630      	mov	r0, r6
 8017dca:	4798      	blx	r3
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	d0e9      	beq.n	8017da4 <__ssvfiscanf_r+0x44>
 8017dd0:	e7ed      	b.n	8017dae <__ssvfiscanf_r+0x4e>
 8017dd2:	2b25      	cmp	r3, #37	; 0x25
 8017dd4:	d012      	beq.n	8017dfc <__ssvfiscanf_r+0x9c>
 8017dd6:	469a      	mov	sl, r3
 8017dd8:	6863      	ldr	r3, [r4, #4]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	f340 8091 	ble.w	8017f02 <__ssvfiscanf_r+0x1a2>
 8017de0:	6822      	ldr	r2, [r4, #0]
 8017de2:	7813      	ldrb	r3, [r2, #0]
 8017de4:	4553      	cmp	r3, sl
 8017de6:	f040 812e 	bne.w	8018046 <__ssvfiscanf_r+0x2e6>
 8017dea:	6863      	ldr	r3, [r4, #4]
 8017dec:	3b01      	subs	r3, #1
 8017dee:	6063      	str	r3, [r4, #4]
 8017df0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017df2:	3201      	adds	r2, #1
 8017df4:	3301      	adds	r3, #1
 8017df6:	6022      	str	r2, [r4, #0]
 8017df8:	9345      	str	r3, [sp, #276]	; 0x114
 8017dfa:	e7d8      	b.n	8017dae <__ssvfiscanf_r+0x4e>
 8017dfc:	9141      	str	r1, [sp, #260]	; 0x104
 8017dfe:	9143      	str	r1, [sp, #268]	; 0x10c
 8017e00:	7853      	ldrb	r3, [r2, #1]
 8017e02:	2b2a      	cmp	r3, #42	; 0x2a
 8017e04:	bf02      	ittt	eq
 8017e06:	2310      	moveq	r3, #16
 8017e08:	1c95      	addeq	r5, r2, #2
 8017e0a:	9341      	streq	r3, [sp, #260]	; 0x104
 8017e0c:	220a      	movs	r2, #10
 8017e0e:	46aa      	mov	sl, r5
 8017e10:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017e14:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017e18:	2b09      	cmp	r3, #9
 8017e1a:	d91c      	bls.n	8017e56 <__ssvfiscanf_r+0xf6>
 8017e1c:	487e      	ldr	r0, [pc, #504]	; (8018018 <__ssvfiscanf_r+0x2b8>)
 8017e1e:	2203      	movs	r2, #3
 8017e20:	f7e8 fa8e 	bl	8000340 <memchr>
 8017e24:	b138      	cbz	r0, 8017e36 <__ssvfiscanf_r+0xd6>
 8017e26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017e28:	eba0 0009 	sub.w	r0, r0, r9
 8017e2c:	2301      	movs	r3, #1
 8017e2e:	4083      	lsls	r3, r0
 8017e30:	4313      	orrs	r3, r2
 8017e32:	9341      	str	r3, [sp, #260]	; 0x104
 8017e34:	4655      	mov	r5, sl
 8017e36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017e3a:	2b78      	cmp	r3, #120	; 0x78
 8017e3c:	d806      	bhi.n	8017e4c <__ssvfiscanf_r+0xec>
 8017e3e:	2b57      	cmp	r3, #87	; 0x57
 8017e40:	d810      	bhi.n	8017e64 <__ssvfiscanf_r+0x104>
 8017e42:	2b25      	cmp	r3, #37	; 0x25
 8017e44:	d0c7      	beq.n	8017dd6 <__ssvfiscanf_r+0x76>
 8017e46:	d857      	bhi.n	8017ef8 <__ssvfiscanf_r+0x198>
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d065      	beq.n	8017f18 <__ssvfiscanf_r+0x1b8>
 8017e4c:	2303      	movs	r3, #3
 8017e4e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017e50:	230a      	movs	r3, #10
 8017e52:	9342      	str	r3, [sp, #264]	; 0x108
 8017e54:	e076      	b.n	8017f44 <__ssvfiscanf_r+0x1e4>
 8017e56:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017e58:	fb02 1103 	mla	r1, r2, r3, r1
 8017e5c:	3930      	subs	r1, #48	; 0x30
 8017e5e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017e60:	4655      	mov	r5, sl
 8017e62:	e7d4      	b.n	8017e0e <__ssvfiscanf_r+0xae>
 8017e64:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017e68:	2a20      	cmp	r2, #32
 8017e6a:	d8ef      	bhi.n	8017e4c <__ssvfiscanf_r+0xec>
 8017e6c:	a101      	add	r1, pc, #4	; (adr r1, 8017e74 <__ssvfiscanf_r+0x114>)
 8017e6e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017e72:	bf00      	nop
 8017e74:	08017f27 	.word	0x08017f27
 8017e78:	08017e4d 	.word	0x08017e4d
 8017e7c:	08017e4d 	.word	0x08017e4d
 8017e80:	08017f85 	.word	0x08017f85
 8017e84:	08017e4d 	.word	0x08017e4d
 8017e88:	08017e4d 	.word	0x08017e4d
 8017e8c:	08017e4d 	.word	0x08017e4d
 8017e90:	08017e4d 	.word	0x08017e4d
 8017e94:	08017e4d 	.word	0x08017e4d
 8017e98:	08017e4d 	.word	0x08017e4d
 8017e9c:	08017e4d 	.word	0x08017e4d
 8017ea0:	08017f9b 	.word	0x08017f9b
 8017ea4:	08017f81 	.word	0x08017f81
 8017ea8:	08017eff 	.word	0x08017eff
 8017eac:	08017eff 	.word	0x08017eff
 8017eb0:	08017eff 	.word	0x08017eff
 8017eb4:	08017e4d 	.word	0x08017e4d
 8017eb8:	08017f3d 	.word	0x08017f3d
 8017ebc:	08017e4d 	.word	0x08017e4d
 8017ec0:	08017e4d 	.word	0x08017e4d
 8017ec4:	08017e4d 	.word	0x08017e4d
 8017ec8:	08017e4d 	.word	0x08017e4d
 8017ecc:	08017fab 	.word	0x08017fab
 8017ed0:	08017f79 	.word	0x08017f79
 8017ed4:	08017f1f 	.word	0x08017f1f
 8017ed8:	08017e4d 	.word	0x08017e4d
 8017edc:	08017e4d 	.word	0x08017e4d
 8017ee0:	08017fa7 	.word	0x08017fa7
 8017ee4:	08017e4d 	.word	0x08017e4d
 8017ee8:	08017f81 	.word	0x08017f81
 8017eec:	08017e4d 	.word	0x08017e4d
 8017ef0:	08017e4d 	.word	0x08017e4d
 8017ef4:	08017f27 	.word	0x08017f27
 8017ef8:	3b45      	subs	r3, #69	; 0x45
 8017efa:	2b02      	cmp	r3, #2
 8017efc:	d8a6      	bhi.n	8017e4c <__ssvfiscanf_r+0xec>
 8017efe:	2305      	movs	r3, #5
 8017f00:	e01f      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017f02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017f04:	4621      	mov	r1, r4
 8017f06:	4630      	mov	r0, r6
 8017f08:	4798      	blx	r3
 8017f0a:	2800      	cmp	r0, #0
 8017f0c:	f43f af68 	beq.w	8017de0 <__ssvfiscanf_r+0x80>
 8017f10:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017f12:	2800      	cmp	r0, #0
 8017f14:	f040 808d 	bne.w	8018032 <__ssvfiscanf_r+0x2d2>
 8017f18:	f04f 30ff 	mov.w	r0, #4294967295
 8017f1c:	e08f      	b.n	801803e <__ssvfiscanf_r+0x2de>
 8017f1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f20:	f042 0220 	orr.w	r2, r2, #32
 8017f24:	9241      	str	r2, [sp, #260]	; 0x104
 8017f26:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f2c:	9241      	str	r2, [sp, #260]	; 0x104
 8017f2e:	2210      	movs	r2, #16
 8017f30:	2b6f      	cmp	r3, #111	; 0x6f
 8017f32:	9242      	str	r2, [sp, #264]	; 0x108
 8017f34:	bf34      	ite	cc
 8017f36:	2303      	movcc	r3, #3
 8017f38:	2304      	movcs	r3, #4
 8017f3a:	e002      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	9342      	str	r3, [sp, #264]	; 0x108
 8017f40:	2303      	movs	r3, #3
 8017f42:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f44:	6863      	ldr	r3, [r4, #4]
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	dd3d      	ble.n	8017fc6 <__ssvfiscanf_r+0x266>
 8017f4a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f4c:	0659      	lsls	r1, r3, #25
 8017f4e:	d404      	bmi.n	8017f5a <__ssvfiscanf_r+0x1fa>
 8017f50:	6823      	ldr	r3, [r4, #0]
 8017f52:	781a      	ldrb	r2, [r3, #0]
 8017f54:	5cba      	ldrb	r2, [r7, r2]
 8017f56:	0712      	lsls	r2, r2, #28
 8017f58:	d43c      	bmi.n	8017fd4 <__ssvfiscanf_r+0x274>
 8017f5a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017f5c:	2b02      	cmp	r3, #2
 8017f5e:	dc4b      	bgt.n	8017ff8 <__ssvfiscanf_r+0x298>
 8017f60:	466b      	mov	r3, sp
 8017f62:	4622      	mov	r2, r4
 8017f64:	a941      	add	r1, sp, #260	; 0x104
 8017f66:	4630      	mov	r0, r6
 8017f68:	f000 fa02 	bl	8018370 <_scanf_chars>
 8017f6c:	2801      	cmp	r0, #1
 8017f6e:	d06a      	beq.n	8018046 <__ssvfiscanf_r+0x2e6>
 8017f70:	2802      	cmp	r0, #2
 8017f72:	f47f af1c 	bne.w	8017dae <__ssvfiscanf_r+0x4e>
 8017f76:	e7cb      	b.n	8017f10 <__ssvfiscanf_r+0x1b0>
 8017f78:	2308      	movs	r3, #8
 8017f7a:	9342      	str	r3, [sp, #264]	; 0x108
 8017f7c:	2304      	movs	r3, #4
 8017f7e:	e7e0      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017f80:	220a      	movs	r2, #10
 8017f82:	e7d5      	b.n	8017f30 <__ssvfiscanf_r+0x1d0>
 8017f84:	4629      	mov	r1, r5
 8017f86:	4640      	mov	r0, r8
 8017f88:	f000 fb40 	bl	801860c <__sccl>
 8017f8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f92:	9341      	str	r3, [sp, #260]	; 0x104
 8017f94:	4605      	mov	r5, r0
 8017f96:	2301      	movs	r3, #1
 8017f98:	e7d3      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017f9a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fa0:	9341      	str	r3, [sp, #260]	; 0x104
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	e7cd      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017fa6:	2302      	movs	r3, #2
 8017fa8:	e7cb      	b.n	8017f42 <__ssvfiscanf_r+0x1e2>
 8017faa:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017fac:	06c3      	lsls	r3, r0, #27
 8017fae:	f53f aefe 	bmi.w	8017dae <__ssvfiscanf_r+0x4e>
 8017fb2:	9b00      	ldr	r3, [sp, #0]
 8017fb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017fb6:	1d19      	adds	r1, r3, #4
 8017fb8:	9100      	str	r1, [sp, #0]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	07c0      	lsls	r0, r0, #31
 8017fbe:	bf4c      	ite	mi
 8017fc0:	801a      	strhmi	r2, [r3, #0]
 8017fc2:	601a      	strpl	r2, [r3, #0]
 8017fc4:	e6f3      	b.n	8017dae <__ssvfiscanf_r+0x4e>
 8017fc6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017fc8:	4621      	mov	r1, r4
 8017fca:	4630      	mov	r0, r6
 8017fcc:	4798      	blx	r3
 8017fce:	2800      	cmp	r0, #0
 8017fd0:	d0bb      	beq.n	8017f4a <__ssvfiscanf_r+0x1ea>
 8017fd2:	e79d      	b.n	8017f10 <__ssvfiscanf_r+0x1b0>
 8017fd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017fd6:	3201      	adds	r2, #1
 8017fd8:	9245      	str	r2, [sp, #276]	; 0x114
 8017fda:	6862      	ldr	r2, [r4, #4]
 8017fdc:	3a01      	subs	r2, #1
 8017fde:	2a00      	cmp	r2, #0
 8017fe0:	6062      	str	r2, [r4, #4]
 8017fe2:	dd02      	ble.n	8017fea <__ssvfiscanf_r+0x28a>
 8017fe4:	3301      	adds	r3, #1
 8017fe6:	6023      	str	r3, [r4, #0]
 8017fe8:	e7b2      	b.n	8017f50 <__ssvfiscanf_r+0x1f0>
 8017fea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017fec:	4621      	mov	r1, r4
 8017fee:	4630      	mov	r0, r6
 8017ff0:	4798      	blx	r3
 8017ff2:	2800      	cmp	r0, #0
 8017ff4:	d0ac      	beq.n	8017f50 <__ssvfiscanf_r+0x1f0>
 8017ff6:	e78b      	b.n	8017f10 <__ssvfiscanf_r+0x1b0>
 8017ff8:	2b04      	cmp	r3, #4
 8017ffa:	dc0f      	bgt.n	801801c <__ssvfiscanf_r+0x2bc>
 8017ffc:	466b      	mov	r3, sp
 8017ffe:	4622      	mov	r2, r4
 8018000:	a941      	add	r1, sp, #260	; 0x104
 8018002:	4630      	mov	r0, r6
 8018004:	f000 fa0e 	bl	8018424 <_scanf_i>
 8018008:	e7b0      	b.n	8017f6c <__ssvfiscanf_r+0x20c>
 801800a:	bf00      	nop
 801800c:	08017cad 	.word	0x08017cad
 8018010:	08017d27 	.word	0x08017d27
 8018014:	08018ccf 	.word	0x08018ccf
 8018018:	08018c86 	.word	0x08018c86
 801801c:	4b0b      	ldr	r3, [pc, #44]	; (801804c <__ssvfiscanf_r+0x2ec>)
 801801e:	2b00      	cmp	r3, #0
 8018020:	f43f aec5 	beq.w	8017dae <__ssvfiscanf_r+0x4e>
 8018024:	466b      	mov	r3, sp
 8018026:	4622      	mov	r2, r4
 8018028:	a941      	add	r1, sp, #260	; 0x104
 801802a:	4630      	mov	r0, r6
 801802c:	f3af 8000 	nop.w
 8018030:	e79c      	b.n	8017f6c <__ssvfiscanf_r+0x20c>
 8018032:	89a3      	ldrh	r3, [r4, #12]
 8018034:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018038:	bf18      	it	ne
 801803a:	f04f 30ff 	movne.w	r0, #4294967295
 801803e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8018042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018046:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018048:	e7f9      	b.n	801803e <__ssvfiscanf_r+0x2de>
 801804a:	bf00      	nop
 801804c:	00000000 	.word	0x00000000

08018050 <_printf_common>:
 8018050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018054:	4616      	mov	r6, r2
 8018056:	4699      	mov	r9, r3
 8018058:	688a      	ldr	r2, [r1, #8]
 801805a:	690b      	ldr	r3, [r1, #16]
 801805c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018060:	4293      	cmp	r3, r2
 8018062:	bfb8      	it	lt
 8018064:	4613      	movlt	r3, r2
 8018066:	6033      	str	r3, [r6, #0]
 8018068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801806c:	4607      	mov	r7, r0
 801806e:	460c      	mov	r4, r1
 8018070:	b10a      	cbz	r2, 8018076 <_printf_common+0x26>
 8018072:	3301      	adds	r3, #1
 8018074:	6033      	str	r3, [r6, #0]
 8018076:	6823      	ldr	r3, [r4, #0]
 8018078:	0699      	lsls	r1, r3, #26
 801807a:	bf42      	ittt	mi
 801807c:	6833      	ldrmi	r3, [r6, #0]
 801807e:	3302      	addmi	r3, #2
 8018080:	6033      	strmi	r3, [r6, #0]
 8018082:	6825      	ldr	r5, [r4, #0]
 8018084:	f015 0506 	ands.w	r5, r5, #6
 8018088:	d106      	bne.n	8018098 <_printf_common+0x48>
 801808a:	f104 0a19 	add.w	sl, r4, #25
 801808e:	68e3      	ldr	r3, [r4, #12]
 8018090:	6832      	ldr	r2, [r6, #0]
 8018092:	1a9b      	subs	r3, r3, r2
 8018094:	42ab      	cmp	r3, r5
 8018096:	dc26      	bgt.n	80180e6 <_printf_common+0x96>
 8018098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801809c:	1e13      	subs	r3, r2, #0
 801809e:	6822      	ldr	r2, [r4, #0]
 80180a0:	bf18      	it	ne
 80180a2:	2301      	movne	r3, #1
 80180a4:	0692      	lsls	r2, r2, #26
 80180a6:	d42b      	bmi.n	8018100 <_printf_common+0xb0>
 80180a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180ac:	4649      	mov	r1, r9
 80180ae:	4638      	mov	r0, r7
 80180b0:	47c0      	blx	r8
 80180b2:	3001      	adds	r0, #1
 80180b4:	d01e      	beq.n	80180f4 <_printf_common+0xa4>
 80180b6:	6823      	ldr	r3, [r4, #0]
 80180b8:	6922      	ldr	r2, [r4, #16]
 80180ba:	f003 0306 	and.w	r3, r3, #6
 80180be:	2b04      	cmp	r3, #4
 80180c0:	bf02      	ittt	eq
 80180c2:	68e5      	ldreq	r5, [r4, #12]
 80180c4:	6833      	ldreq	r3, [r6, #0]
 80180c6:	1aed      	subeq	r5, r5, r3
 80180c8:	68a3      	ldr	r3, [r4, #8]
 80180ca:	bf0c      	ite	eq
 80180cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180d0:	2500      	movne	r5, #0
 80180d2:	4293      	cmp	r3, r2
 80180d4:	bfc4      	itt	gt
 80180d6:	1a9b      	subgt	r3, r3, r2
 80180d8:	18ed      	addgt	r5, r5, r3
 80180da:	2600      	movs	r6, #0
 80180dc:	341a      	adds	r4, #26
 80180de:	42b5      	cmp	r5, r6
 80180e0:	d11a      	bne.n	8018118 <_printf_common+0xc8>
 80180e2:	2000      	movs	r0, #0
 80180e4:	e008      	b.n	80180f8 <_printf_common+0xa8>
 80180e6:	2301      	movs	r3, #1
 80180e8:	4652      	mov	r2, sl
 80180ea:	4649      	mov	r1, r9
 80180ec:	4638      	mov	r0, r7
 80180ee:	47c0      	blx	r8
 80180f0:	3001      	adds	r0, #1
 80180f2:	d103      	bne.n	80180fc <_printf_common+0xac>
 80180f4:	f04f 30ff 	mov.w	r0, #4294967295
 80180f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180fc:	3501      	adds	r5, #1
 80180fe:	e7c6      	b.n	801808e <_printf_common+0x3e>
 8018100:	18e1      	adds	r1, r4, r3
 8018102:	1c5a      	adds	r2, r3, #1
 8018104:	2030      	movs	r0, #48	; 0x30
 8018106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801810a:	4422      	add	r2, r4
 801810c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018114:	3302      	adds	r3, #2
 8018116:	e7c7      	b.n	80180a8 <_printf_common+0x58>
 8018118:	2301      	movs	r3, #1
 801811a:	4622      	mov	r2, r4
 801811c:	4649      	mov	r1, r9
 801811e:	4638      	mov	r0, r7
 8018120:	47c0      	blx	r8
 8018122:	3001      	adds	r0, #1
 8018124:	d0e6      	beq.n	80180f4 <_printf_common+0xa4>
 8018126:	3601      	adds	r6, #1
 8018128:	e7d9      	b.n	80180de <_printf_common+0x8e>
	...

0801812c <_printf_i>:
 801812c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018130:	7e0f      	ldrb	r7, [r1, #24]
 8018132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018134:	2f78      	cmp	r7, #120	; 0x78
 8018136:	4691      	mov	r9, r2
 8018138:	4680      	mov	r8, r0
 801813a:	460c      	mov	r4, r1
 801813c:	469a      	mov	sl, r3
 801813e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018142:	d807      	bhi.n	8018154 <_printf_i+0x28>
 8018144:	2f62      	cmp	r7, #98	; 0x62
 8018146:	d80a      	bhi.n	801815e <_printf_i+0x32>
 8018148:	2f00      	cmp	r7, #0
 801814a:	f000 80d4 	beq.w	80182f6 <_printf_i+0x1ca>
 801814e:	2f58      	cmp	r7, #88	; 0x58
 8018150:	f000 80c0 	beq.w	80182d4 <_printf_i+0x1a8>
 8018154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801815c:	e03a      	b.n	80181d4 <_printf_i+0xa8>
 801815e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018162:	2b15      	cmp	r3, #21
 8018164:	d8f6      	bhi.n	8018154 <_printf_i+0x28>
 8018166:	a101      	add	r1, pc, #4	; (adr r1, 801816c <_printf_i+0x40>)
 8018168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801816c:	080181c5 	.word	0x080181c5
 8018170:	080181d9 	.word	0x080181d9
 8018174:	08018155 	.word	0x08018155
 8018178:	08018155 	.word	0x08018155
 801817c:	08018155 	.word	0x08018155
 8018180:	08018155 	.word	0x08018155
 8018184:	080181d9 	.word	0x080181d9
 8018188:	08018155 	.word	0x08018155
 801818c:	08018155 	.word	0x08018155
 8018190:	08018155 	.word	0x08018155
 8018194:	08018155 	.word	0x08018155
 8018198:	080182dd 	.word	0x080182dd
 801819c:	08018205 	.word	0x08018205
 80181a0:	08018297 	.word	0x08018297
 80181a4:	08018155 	.word	0x08018155
 80181a8:	08018155 	.word	0x08018155
 80181ac:	080182ff 	.word	0x080182ff
 80181b0:	08018155 	.word	0x08018155
 80181b4:	08018205 	.word	0x08018205
 80181b8:	08018155 	.word	0x08018155
 80181bc:	08018155 	.word	0x08018155
 80181c0:	0801829f 	.word	0x0801829f
 80181c4:	682b      	ldr	r3, [r5, #0]
 80181c6:	1d1a      	adds	r2, r3, #4
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	602a      	str	r2, [r5, #0]
 80181cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181d4:	2301      	movs	r3, #1
 80181d6:	e09f      	b.n	8018318 <_printf_i+0x1ec>
 80181d8:	6820      	ldr	r0, [r4, #0]
 80181da:	682b      	ldr	r3, [r5, #0]
 80181dc:	0607      	lsls	r7, r0, #24
 80181de:	f103 0104 	add.w	r1, r3, #4
 80181e2:	6029      	str	r1, [r5, #0]
 80181e4:	d501      	bpl.n	80181ea <_printf_i+0xbe>
 80181e6:	681e      	ldr	r6, [r3, #0]
 80181e8:	e003      	b.n	80181f2 <_printf_i+0xc6>
 80181ea:	0646      	lsls	r6, r0, #25
 80181ec:	d5fb      	bpl.n	80181e6 <_printf_i+0xba>
 80181ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80181f2:	2e00      	cmp	r6, #0
 80181f4:	da03      	bge.n	80181fe <_printf_i+0xd2>
 80181f6:	232d      	movs	r3, #45	; 0x2d
 80181f8:	4276      	negs	r6, r6
 80181fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181fe:	485a      	ldr	r0, [pc, #360]	; (8018368 <_printf_i+0x23c>)
 8018200:	230a      	movs	r3, #10
 8018202:	e012      	b.n	801822a <_printf_i+0xfe>
 8018204:	682b      	ldr	r3, [r5, #0]
 8018206:	6820      	ldr	r0, [r4, #0]
 8018208:	1d19      	adds	r1, r3, #4
 801820a:	6029      	str	r1, [r5, #0]
 801820c:	0605      	lsls	r5, r0, #24
 801820e:	d501      	bpl.n	8018214 <_printf_i+0xe8>
 8018210:	681e      	ldr	r6, [r3, #0]
 8018212:	e002      	b.n	801821a <_printf_i+0xee>
 8018214:	0641      	lsls	r1, r0, #25
 8018216:	d5fb      	bpl.n	8018210 <_printf_i+0xe4>
 8018218:	881e      	ldrh	r6, [r3, #0]
 801821a:	4853      	ldr	r0, [pc, #332]	; (8018368 <_printf_i+0x23c>)
 801821c:	2f6f      	cmp	r7, #111	; 0x6f
 801821e:	bf0c      	ite	eq
 8018220:	2308      	moveq	r3, #8
 8018222:	230a      	movne	r3, #10
 8018224:	2100      	movs	r1, #0
 8018226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801822a:	6865      	ldr	r5, [r4, #4]
 801822c:	60a5      	str	r5, [r4, #8]
 801822e:	2d00      	cmp	r5, #0
 8018230:	bfa2      	ittt	ge
 8018232:	6821      	ldrge	r1, [r4, #0]
 8018234:	f021 0104 	bicge.w	r1, r1, #4
 8018238:	6021      	strge	r1, [r4, #0]
 801823a:	b90e      	cbnz	r6, 8018240 <_printf_i+0x114>
 801823c:	2d00      	cmp	r5, #0
 801823e:	d04b      	beq.n	80182d8 <_printf_i+0x1ac>
 8018240:	4615      	mov	r5, r2
 8018242:	fbb6 f1f3 	udiv	r1, r6, r3
 8018246:	fb03 6711 	mls	r7, r3, r1, r6
 801824a:	5dc7      	ldrb	r7, [r0, r7]
 801824c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018250:	4637      	mov	r7, r6
 8018252:	42bb      	cmp	r3, r7
 8018254:	460e      	mov	r6, r1
 8018256:	d9f4      	bls.n	8018242 <_printf_i+0x116>
 8018258:	2b08      	cmp	r3, #8
 801825a:	d10b      	bne.n	8018274 <_printf_i+0x148>
 801825c:	6823      	ldr	r3, [r4, #0]
 801825e:	07de      	lsls	r6, r3, #31
 8018260:	d508      	bpl.n	8018274 <_printf_i+0x148>
 8018262:	6923      	ldr	r3, [r4, #16]
 8018264:	6861      	ldr	r1, [r4, #4]
 8018266:	4299      	cmp	r1, r3
 8018268:	bfde      	ittt	le
 801826a:	2330      	movle	r3, #48	; 0x30
 801826c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018270:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018274:	1b52      	subs	r2, r2, r5
 8018276:	6122      	str	r2, [r4, #16]
 8018278:	f8cd a000 	str.w	sl, [sp]
 801827c:	464b      	mov	r3, r9
 801827e:	aa03      	add	r2, sp, #12
 8018280:	4621      	mov	r1, r4
 8018282:	4640      	mov	r0, r8
 8018284:	f7ff fee4 	bl	8018050 <_printf_common>
 8018288:	3001      	adds	r0, #1
 801828a:	d14a      	bne.n	8018322 <_printf_i+0x1f6>
 801828c:	f04f 30ff 	mov.w	r0, #4294967295
 8018290:	b004      	add	sp, #16
 8018292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	f043 0320 	orr.w	r3, r3, #32
 801829c:	6023      	str	r3, [r4, #0]
 801829e:	4833      	ldr	r0, [pc, #204]	; (801836c <_printf_i+0x240>)
 80182a0:	2778      	movs	r7, #120	; 0x78
 80182a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182a6:	6823      	ldr	r3, [r4, #0]
 80182a8:	6829      	ldr	r1, [r5, #0]
 80182aa:	061f      	lsls	r7, r3, #24
 80182ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80182b0:	d402      	bmi.n	80182b8 <_printf_i+0x18c>
 80182b2:	065f      	lsls	r7, r3, #25
 80182b4:	bf48      	it	mi
 80182b6:	b2b6      	uxthmi	r6, r6
 80182b8:	07df      	lsls	r7, r3, #31
 80182ba:	bf48      	it	mi
 80182bc:	f043 0320 	orrmi.w	r3, r3, #32
 80182c0:	6029      	str	r1, [r5, #0]
 80182c2:	bf48      	it	mi
 80182c4:	6023      	strmi	r3, [r4, #0]
 80182c6:	b91e      	cbnz	r6, 80182d0 <_printf_i+0x1a4>
 80182c8:	6823      	ldr	r3, [r4, #0]
 80182ca:	f023 0320 	bic.w	r3, r3, #32
 80182ce:	6023      	str	r3, [r4, #0]
 80182d0:	2310      	movs	r3, #16
 80182d2:	e7a7      	b.n	8018224 <_printf_i+0xf8>
 80182d4:	4824      	ldr	r0, [pc, #144]	; (8018368 <_printf_i+0x23c>)
 80182d6:	e7e4      	b.n	80182a2 <_printf_i+0x176>
 80182d8:	4615      	mov	r5, r2
 80182da:	e7bd      	b.n	8018258 <_printf_i+0x12c>
 80182dc:	682b      	ldr	r3, [r5, #0]
 80182de:	6826      	ldr	r6, [r4, #0]
 80182e0:	6961      	ldr	r1, [r4, #20]
 80182e2:	1d18      	adds	r0, r3, #4
 80182e4:	6028      	str	r0, [r5, #0]
 80182e6:	0635      	lsls	r5, r6, #24
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	d501      	bpl.n	80182f0 <_printf_i+0x1c4>
 80182ec:	6019      	str	r1, [r3, #0]
 80182ee:	e002      	b.n	80182f6 <_printf_i+0x1ca>
 80182f0:	0670      	lsls	r0, r6, #25
 80182f2:	d5fb      	bpl.n	80182ec <_printf_i+0x1c0>
 80182f4:	8019      	strh	r1, [r3, #0]
 80182f6:	2300      	movs	r3, #0
 80182f8:	6123      	str	r3, [r4, #16]
 80182fa:	4615      	mov	r5, r2
 80182fc:	e7bc      	b.n	8018278 <_printf_i+0x14c>
 80182fe:	682b      	ldr	r3, [r5, #0]
 8018300:	1d1a      	adds	r2, r3, #4
 8018302:	602a      	str	r2, [r5, #0]
 8018304:	681d      	ldr	r5, [r3, #0]
 8018306:	6862      	ldr	r2, [r4, #4]
 8018308:	2100      	movs	r1, #0
 801830a:	4628      	mov	r0, r5
 801830c:	f7e8 f818 	bl	8000340 <memchr>
 8018310:	b108      	cbz	r0, 8018316 <_printf_i+0x1ea>
 8018312:	1b40      	subs	r0, r0, r5
 8018314:	6060      	str	r0, [r4, #4]
 8018316:	6863      	ldr	r3, [r4, #4]
 8018318:	6123      	str	r3, [r4, #16]
 801831a:	2300      	movs	r3, #0
 801831c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018320:	e7aa      	b.n	8018278 <_printf_i+0x14c>
 8018322:	6923      	ldr	r3, [r4, #16]
 8018324:	462a      	mov	r2, r5
 8018326:	4649      	mov	r1, r9
 8018328:	4640      	mov	r0, r8
 801832a:	47d0      	blx	sl
 801832c:	3001      	adds	r0, #1
 801832e:	d0ad      	beq.n	801828c <_printf_i+0x160>
 8018330:	6823      	ldr	r3, [r4, #0]
 8018332:	079b      	lsls	r3, r3, #30
 8018334:	d413      	bmi.n	801835e <_printf_i+0x232>
 8018336:	68e0      	ldr	r0, [r4, #12]
 8018338:	9b03      	ldr	r3, [sp, #12]
 801833a:	4298      	cmp	r0, r3
 801833c:	bfb8      	it	lt
 801833e:	4618      	movlt	r0, r3
 8018340:	e7a6      	b.n	8018290 <_printf_i+0x164>
 8018342:	2301      	movs	r3, #1
 8018344:	4632      	mov	r2, r6
 8018346:	4649      	mov	r1, r9
 8018348:	4640      	mov	r0, r8
 801834a:	47d0      	blx	sl
 801834c:	3001      	adds	r0, #1
 801834e:	d09d      	beq.n	801828c <_printf_i+0x160>
 8018350:	3501      	adds	r5, #1
 8018352:	68e3      	ldr	r3, [r4, #12]
 8018354:	9903      	ldr	r1, [sp, #12]
 8018356:	1a5b      	subs	r3, r3, r1
 8018358:	42ab      	cmp	r3, r5
 801835a:	dcf2      	bgt.n	8018342 <_printf_i+0x216>
 801835c:	e7eb      	b.n	8018336 <_printf_i+0x20a>
 801835e:	2500      	movs	r5, #0
 8018360:	f104 0619 	add.w	r6, r4, #25
 8018364:	e7f5      	b.n	8018352 <_printf_i+0x226>
 8018366:	bf00      	nop
 8018368:	08018c91 	.word	0x08018c91
 801836c:	08018ca2 	.word	0x08018ca2

08018370 <_scanf_chars>:
 8018370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018374:	4615      	mov	r5, r2
 8018376:	688a      	ldr	r2, [r1, #8]
 8018378:	4680      	mov	r8, r0
 801837a:	460c      	mov	r4, r1
 801837c:	b932      	cbnz	r2, 801838c <_scanf_chars+0x1c>
 801837e:	698a      	ldr	r2, [r1, #24]
 8018380:	2a00      	cmp	r2, #0
 8018382:	bf0c      	ite	eq
 8018384:	2201      	moveq	r2, #1
 8018386:	f04f 32ff 	movne.w	r2, #4294967295
 801838a:	608a      	str	r2, [r1, #8]
 801838c:	6822      	ldr	r2, [r4, #0]
 801838e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018420 <_scanf_chars+0xb0>
 8018392:	06d1      	lsls	r1, r2, #27
 8018394:	bf5f      	itttt	pl
 8018396:	681a      	ldrpl	r2, [r3, #0]
 8018398:	1d11      	addpl	r1, r2, #4
 801839a:	6019      	strpl	r1, [r3, #0]
 801839c:	6816      	ldrpl	r6, [r2, #0]
 801839e:	2700      	movs	r7, #0
 80183a0:	69a0      	ldr	r0, [r4, #24]
 80183a2:	b188      	cbz	r0, 80183c8 <_scanf_chars+0x58>
 80183a4:	2801      	cmp	r0, #1
 80183a6:	d107      	bne.n	80183b8 <_scanf_chars+0x48>
 80183a8:	682a      	ldr	r2, [r5, #0]
 80183aa:	7811      	ldrb	r1, [r2, #0]
 80183ac:	6962      	ldr	r2, [r4, #20]
 80183ae:	5c52      	ldrb	r2, [r2, r1]
 80183b0:	b952      	cbnz	r2, 80183c8 <_scanf_chars+0x58>
 80183b2:	2f00      	cmp	r7, #0
 80183b4:	d031      	beq.n	801841a <_scanf_chars+0xaa>
 80183b6:	e022      	b.n	80183fe <_scanf_chars+0x8e>
 80183b8:	2802      	cmp	r0, #2
 80183ba:	d120      	bne.n	80183fe <_scanf_chars+0x8e>
 80183bc:	682b      	ldr	r3, [r5, #0]
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80183c4:	071b      	lsls	r3, r3, #28
 80183c6:	d41a      	bmi.n	80183fe <_scanf_chars+0x8e>
 80183c8:	6823      	ldr	r3, [r4, #0]
 80183ca:	06da      	lsls	r2, r3, #27
 80183cc:	bf5e      	ittt	pl
 80183ce:	682b      	ldrpl	r3, [r5, #0]
 80183d0:	781b      	ldrbpl	r3, [r3, #0]
 80183d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80183d6:	682a      	ldr	r2, [r5, #0]
 80183d8:	686b      	ldr	r3, [r5, #4]
 80183da:	3201      	adds	r2, #1
 80183dc:	602a      	str	r2, [r5, #0]
 80183de:	68a2      	ldr	r2, [r4, #8]
 80183e0:	3b01      	subs	r3, #1
 80183e2:	3a01      	subs	r2, #1
 80183e4:	606b      	str	r3, [r5, #4]
 80183e6:	3701      	adds	r7, #1
 80183e8:	60a2      	str	r2, [r4, #8]
 80183ea:	b142      	cbz	r2, 80183fe <_scanf_chars+0x8e>
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	dcd7      	bgt.n	80183a0 <_scanf_chars+0x30>
 80183f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183f4:	4629      	mov	r1, r5
 80183f6:	4640      	mov	r0, r8
 80183f8:	4798      	blx	r3
 80183fa:	2800      	cmp	r0, #0
 80183fc:	d0d0      	beq.n	80183a0 <_scanf_chars+0x30>
 80183fe:	6823      	ldr	r3, [r4, #0]
 8018400:	f013 0310 	ands.w	r3, r3, #16
 8018404:	d105      	bne.n	8018412 <_scanf_chars+0xa2>
 8018406:	68e2      	ldr	r2, [r4, #12]
 8018408:	3201      	adds	r2, #1
 801840a:	60e2      	str	r2, [r4, #12]
 801840c:	69a2      	ldr	r2, [r4, #24]
 801840e:	b102      	cbz	r2, 8018412 <_scanf_chars+0xa2>
 8018410:	7033      	strb	r3, [r6, #0]
 8018412:	6923      	ldr	r3, [r4, #16]
 8018414:	443b      	add	r3, r7
 8018416:	6123      	str	r3, [r4, #16]
 8018418:	2000      	movs	r0, #0
 801841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801841e:	bf00      	nop
 8018420:	08018ccf 	.word	0x08018ccf

08018424 <_scanf_i>:
 8018424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018428:	4698      	mov	r8, r3
 801842a:	4b74      	ldr	r3, [pc, #464]	; (80185fc <_scanf_i+0x1d8>)
 801842c:	460c      	mov	r4, r1
 801842e:	4682      	mov	sl, r0
 8018430:	4616      	mov	r6, r2
 8018432:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018436:	b087      	sub	sp, #28
 8018438:	ab03      	add	r3, sp, #12
 801843a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801843e:	4b70      	ldr	r3, [pc, #448]	; (8018600 <_scanf_i+0x1dc>)
 8018440:	69a1      	ldr	r1, [r4, #24]
 8018442:	4a70      	ldr	r2, [pc, #448]	; (8018604 <_scanf_i+0x1e0>)
 8018444:	2903      	cmp	r1, #3
 8018446:	bf18      	it	ne
 8018448:	461a      	movne	r2, r3
 801844a:	68a3      	ldr	r3, [r4, #8]
 801844c:	9201      	str	r2, [sp, #4]
 801844e:	1e5a      	subs	r2, r3, #1
 8018450:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018454:	bf88      	it	hi
 8018456:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801845a:	4627      	mov	r7, r4
 801845c:	bf82      	ittt	hi
 801845e:	eb03 0905 	addhi.w	r9, r3, r5
 8018462:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018466:	60a3      	strhi	r3, [r4, #8]
 8018468:	f857 3b1c 	ldr.w	r3, [r7], #28
 801846c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018470:	bf98      	it	ls
 8018472:	f04f 0900 	movls.w	r9, #0
 8018476:	6023      	str	r3, [r4, #0]
 8018478:	463d      	mov	r5, r7
 801847a:	f04f 0b00 	mov.w	fp, #0
 801847e:	6831      	ldr	r1, [r6, #0]
 8018480:	ab03      	add	r3, sp, #12
 8018482:	7809      	ldrb	r1, [r1, #0]
 8018484:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018488:	2202      	movs	r2, #2
 801848a:	f7e7 ff59 	bl	8000340 <memchr>
 801848e:	b328      	cbz	r0, 80184dc <_scanf_i+0xb8>
 8018490:	f1bb 0f01 	cmp.w	fp, #1
 8018494:	d159      	bne.n	801854a <_scanf_i+0x126>
 8018496:	6862      	ldr	r2, [r4, #4]
 8018498:	b92a      	cbnz	r2, 80184a6 <_scanf_i+0x82>
 801849a:	6822      	ldr	r2, [r4, #0]
 801849c:	2308      	movs	r3, #8
 801849e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80184a2:	6063      	str	r3, [r4, #4]
 80184a4:	6022      	str	r2, [r4, #0]
 80184a6:	6822      	ldr	r2, [r4, #0]
 80184a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80184ac:	6022      	str	r2, [r4, #0]
 80184ae:	68a2      	ldr	r2, [r4, #8]
 80184b0:	1e51      	subs	r1, r2, #1
 80184b2:	60a1      	str	r1, [r4, #8]
 80184b4:	b192      	cbz	r2, 80184dc <_scanf_i+0xb8>
 80184b6:	6832      	ldr	r2, [r6, #0]
 80184b8:	1c51      	adds	r1, r2, #1
 80184ba:	6031      	str	r1, [r6, #0]
 80184bc:	7812      	ldrb	r2, [r2, #0]
 80184be:	f805 2b01 	strb.w	r2, [r5], #1
 80184c2:	6872      	ldr	r2, [r6, #4]
 80184c4:	3a01      	subs	r2, #1
 80184c6:	2a00      	cmp	r2, #0
 80184c8:	6072      	str	r2, [r6, #4]
 80184ca:	dc07      	bgt.n	80184dc <_scanf_i+0xb8>
 80184cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80184d0:	4631      	mov	r1, r6
 80184d2:	4650      	mov	r0, sl
 80184d4:	4790      	blx	r2
 80184d6:	2800      	cmp	r0, #0
 80184d8:	f040 8085 	bne.w	80185e6 <_scanf_i+0x1c2>
 80184dc:	f10b 0b01 	add.w	fp, fp, #1
 80184e0:	f1bb 0f03 	cmp.w	fp, #3
 80184e4:	d1cb      	bne.n	801847e <_scanf_i+0x5a>
 80184e6:	6863      	ldr	r3, [r4, #4]
 80184e8:	b90b      	cbnz	r3, 80184ee <_scanf_i+0xca>
 80184ea:	230a      	movs	r3, #10
 80184ec:	6063      	str	r3, [r4, #4]
 80184ee:	6863      	ldr	r3, [r4, #4]
 80184f0:	4945      	ldr	r1, [pc, #276]	; (8018608 <_scanf_i+0x1e4>)
 80184f2:	6960      	ldr	r0, [r4, #20]
 80184f4:	1ac9      	subs	r1, r1, r3
 80184f6:	f000 f889 	bl	801860c <__sccl>
 80184fa:	f04f 0b00 	mov.w	fp, #0
 80184fe:	68a3      	ldr	r3, [r4, #8]
 8018500:	6822      	ldr	r2, [r4, #0]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d03d      	beq.n	8018582 <_scanf_i+0x15e>
 8018506:	6831      	ldr	r1, [r6, #0]
 8018508:	6960      	ldr	r0, [r4, #20]
 801850a:	f891 c000 	ldrb.w	ip, [r1]
 801850e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018512:	2800      	cmp	r0, #0
 8018514:	d035      	beq.n	8018582 <_scanf_i+0x15e>
 8018516:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801851a:	d124      	bne.n	8018566 <_scanf_i+0x142>
 801851c:	0510      	lsls	r0, r2, #20
 801851e:	d522      	bpl.n	8018566 <_scanf_i+0x142>
 8018520:	f10b 0b01 	add.w	fp, fp, #1
 8018524:	f1b9 0f00 	cmp.w	r9, #0
 8018528:	d003      	beq.n	8018532 <_scanf_i+0x10e>
 801852a:	3301      	adds	r3, #1
 801852c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018530:	60a3      	str	r3, [r4, #8]
 8018532:	6873      	ldr	r3, [r6, #4]
 8018534:	3b01      	subs	r3, #1
 8018536:	2b00      	cmp	r3, #0
 8018538:	6073      	str	r3, [r6, #4]
 801853a:	dd1b      	ble.n	8018574 <_scanf_i+0x150>
 801853c:	6833      	ldr	r3, [r6, #0]
 801853e:	3301      	adds	r3, #1
 8018540:	6033      	str	r3, [r6, #0]
 8018542:	68a3      	ldr	r3, [r4, #8]
 8018544:	3b01      	subs	r3, #1
 8018546:	60a3      	str	r3, [r4, #8]
 8018548:	e7d9      	b.n	80184fe <_scanf_i+0xda>
 801854a:	f1bb 0f02 	cmp.w	fp, #2
 801854e:	d1ae      	bne.n	80184ae <_scanf_i+0x8a>
 8018550:	6822      	ldr	r2, [r4, #0]
 8018552:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018556:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801855a:	d1bf      	bne.n	80184dc <_scanf_i+0xb8>
 801855c:	2310      	movs	r3, #16
 801855e:	6063      	str	r3, [r4, #4]
 8018560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018564:	e7a2      	b.n	80184ac <_scanf_i+0x88>
 8018566:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801856a:	6022      	str	r2, [r4, #0]
 801856c:	780b      	ldrb	r3, [r1, #0]
 801856e:	f805 3b01 	strb.w	r3, [r5], #1
 8018572:	e7de      	b.n	8018532 <_scanf_i+0x10e>
 8018574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018578:	4631      	mov	r1, r6
 801857a:	4650      	mov	r0, sl
 801857c:	4798      	blx	r3
 801857e:	2800      	cmp	r0, #0
 8018580:	d0df      	beq.n	8018542 <_scanf_i+0x11e>
 8018582:	6823      	ldr	r3, [r4, #0]
 8018584:	05d9      	lsls	r1, r3, #23
 8018586:	d50d      	bpl.n	80185a4 <_scanf_i+0x180>
 8018588:	42bd      	cmp	r5, r7
 801858a:	d909      	bls.n	80185a0 <_scanf_i+0x17c>
 801858c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018590:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018594:	4632      	mov	r2, r6
 8018596:	4650      	mov	r0, sl
 8018598:	4798      	blx	r3
 801859a:	f105 39ff 	add.w	r9, r5, #4294967295
 801859e:	464d      	mov	r5, r9
 80185a0:	42bd      	cmp	r5, r7
 80185a2:	d028      	beq.n	80185f6 <_scanf_i+0x1d2>
 80185a4:	6822      	ldr	r2, [r4, #0]
 80185a6:	f012 0210 	ands.w	r2, r2, #16
 80185aa:	d113      	bne.n	80185d4 <_scanf_i+0x1b0>
 80185ac:	702a      	strb	r2, [r5, #0]
 80185ae:	6863      	ldr	r3, [r4, #4]
 80185b0:	9e01      	ldr	r6, [sp, #4]
 80185b2:	4639      	mov	r1, r7
 80185b4:	4650      	mov	r0, sl
 80185b6:	47b0      	blx	r6
 80185b8:	f8d8 3000 	ldr.w	r3, [r8]
 80185bc:	6821      	ldr	r1, [r4, #0]
 80185be:	1d1a      	adds	r2, r3, #4
 80185c0:	f8c8 2000 	str.w	r2, [r8]
 80185c4:	f011 0f20 	tst.w	r1, #32
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	d00f      	beq.n	80185ec <_scanf_i+0x1c8>
 80185cc:	6018      	str	r0, [r3, #0]
 80185ce:	68e3      	ldr	r3, [r4, #12]
 80185d0:	3301      	adds	r3, #1
 80185d2:	60e3      	str	r3, [r4, #12]
 80185d4:	6923      	ldr	r3, [r4, #16]
 80185d6:	1bed      	subs	r5, r5, r7
 80185d8:	445d      	add	r5, fp
 80185da:	442b      	add	r3, r5
 80185dc:	6123      	str	r3, [r4, #16]
 80185de:	2000      	movs	r0, #0
 80185e0:	b007      	add	sp, #28
 80185e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e6:	f04f 0b00 	mov.w	fp, #0
 80185ea:	e7ca      	b.n	8018582 <_scanf_i+0x15e>
 80185ec:	07ca      	lsls	r2, r1, #31
 80185ee:	bf4c      	ite	mi
 80185f0:	8018      	strhmi	r0, [r3, #0]
 80185f2:	6018      	strpl	r0, [r3, #0]
 80185f4:	e7eb      	b.n	80185ce <_scanf_i+0x1aa>
 80185f6:	2001      	movs	r0, #1
 80185f8:	e7f2      	b.n	80185e0 <_scanf_i+0x1bc>
 80185fa:	bf00      	nop
 80185fc:	08018bb0 	.word	0x08018bb0
 8018600:	08018995 	.word	0x08018995
 8018604:	080188ad 	.word	0x080188ad
 8018608:	08018cc3 	.word	0x08018cc3

0801860c <__sccl>:
 801860c:	b570      	push	{r4, r5, r6, lr}
 801860e:	780b      	ldrb	r3, [r1, #0]
 8018610:	4604      	mov	r4, r0
 8018612:	2b5e      	cmp	r3, #94	; 0x5e
 8018614:	bf0b      	itete	eq
 8018616:	784b      	ldrbeq	r3, [r1, #1]
 8018618:	1c4a      	addne	r2, r1, #1
 801861a:	1c8a      	addeq	r2, r1, #2
 801861c:	2100      	movne	r1, #0
 801861e:	bf08      	it	eq
 8018620:	2101      	moveq	r1, #1
 8018622:	3801      	subs	r0, #1
 8018624:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018628:	f800 1f01 	strb.w	r1, [r0, #1]!
 801862c:	42a8      	cmp	r0, r5
 801862e:	d1fb      	bne.n	8018628 <__sccl+0x1c>
 8018630:	b90b      	cbnz	r3, 8018636 <__sccl+0x2a>
 8018632:	1e50      	subs	r0, r2, #1
 8018634:	bd70      	pop	{r4, r5, r6, pc}
 8018636:	f081 0101 	eor.w	r1, r1, #1
 801863a:	54e1      	strb	r1, [r4, r3]
 801863c:	4610      	mov	r0, r2
 801863e:	4602      	mov	r2, r0
 8018640:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018644:	2d2d      	cmp	r5, #45	; 0x2d
 8018646:	d005      	beq.n	8018654 <__sccl+0x48>
 8018648:	2d5d      	cmp	r5, #93	; 0x5d
 801864a:	d016      	beq.n	801867a <__sccl+0x6e>
 801864c:	2d00      	cmp	r5, #0
 801864e:	d0f1      	beq.n	8018634 <__sccl+0x28>
 8018650:	462b      	mov	r3, r5
 8018652:	e7f2      	b.n	801863a <__sccl+0x2e>
 8018654:	7846      	ldrb	r6, [r0, #1]
 8018656:	2e5d      	cmp	r6, #93	; 0x5d
 8018658:	d0fa      	beq.n	8018650 <__sccl+0x44>
 801865a:	42b3      	cmp	r3, r6
 801865c:	dcf8      	bgt.n	8018650 <__sccl+0x44>
 801865e:	3002      	adds	r0, #2
 8018660:	461a      	mov	r2, r3
 8018662:	3201      	adds	r2, #1
 8018664:	4296      	cmp	r6, r2
 8018666:	54a1      	strb	r1, [r4, r2]
 8018668:	dcfb      	bgt.n	8018662 <__sccl+0x56>
 801866a:	1af2      	subs	r2, r6, r3
 801866c:	3a01      	subs	r2, #1
 801866e:	1c5d      	adds	r5, r3, #1
 8018670:	42b3      	cmp	r3, r6
 8018672:	bfa8      	it	ge
 8018674:	2200      	movge	r2, #0
 8018676:	18ab      	adds	r3, r5, r2
 8018678:	e7e1      	b.n	801863e <__sccl+0x32>
 801867a:	4610      	mov	r0, r2
 801867c:	e7da      	b.n	8018634 <__sccl+0x28>

0801867e <__submore>:
 801867e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018682:	460c      	mov	r4, r1
 8018684:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801868a:	4299      	cmp	r1, r3
 801868c:	d11d      	bne.n	80186ca <__submore+0x4c>
 801868e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018692:	f7ff f927 	bl	80178e4 <_malloc_r>
 8018696:	b918      	cbnz	r0, 80186a0 <__submore+0x22>
 8018698:	f04f 30ff 	mov.w	r0, #4294967295
 801869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80186a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80186a6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80186aa:	6360      	str	r0, [r4, #52]	; 0x34
 80186ac:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80186b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80186b4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80186b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80186bc:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80186c0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80186c4:	6020      	str	r0, [r4, #0]
 80186c6:	2000      	movs	r0, #0
 80186c8:	e7e8      	b.n	801869c <__submore+0x1e>
 80186ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80186cc:	0077      	lsls	r7, r6, #1
 80186ce:	463a      	mov	r2, r7
 80186d0:	f000 f83a 	bl	8018748 <_realloc_r>
 80186d4:	4605      	mov	r5, r0
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d0de      	beq.n	8018698 <__submore+0x1a>
 80186da:	eb00 0806 	add.w	r8, r0, r6
 80186de:	4601      	mov	r1, r0
 80186e0:	4632      	mov	r2, r6
 80186e2:	4640      	mov	r0, r8
 80186e4:	f7ff f884 	bl	80177f0 <memcpy>
 80186e8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80186ec:	f8c4 8000 	str.w	r8, [r4]
 80186f0:	e7e9      	b.n	80186c6 <__submore+0x48>

080186f2 <memmove>:
 80186f2:	4288      	cmp	r0, r1
 80186f4:	b510      	push	{r4, lr}
 80186f6:	eb01 0402 	add.w	r4, r1, r2
 80186fa:	d902      	bls.n	8018702 <memmove+0x10>
 80186fc:	4284      	cmp	r4, r0
 80186fe:	4623      	mov	r3, r4
 8018700:	d807      	bhi.n	8018712 <memmove+0x20>
 8018702:	1e43      	subs	r3, r0, #1
 8018704:	42a1      	cmp	r1, r4
 8018706:	d008      	beq.n	801871a <memmove+0x28>
 8018708:	f811 2b01 	ldrb.w	r2, [r1], #1
 801870c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018710:	e7f8      	b.n	8018704 <memmove+0x12>
 8018712:	4402      	add	r2, r0
 8018714:	4601      	mov	r1, r0
 8018716:	428a      	cmp	r2, r1
 8018718:	d100      	bne.n	801871c <memmove+0x2a>
 801871a:	bd10      	pop	{r4, pc}
 801871c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018720:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018724:	e7f7      	b.n	8018716 <memmove+0x24>
	...

08018728 <_sbrk_r>:
 8018728:	b538      	push	{r3, r4, r5, lr}
 801872a:	4d06      	ldr	r5, [pc, #24]	; (8018744 <_sbrk_r+0x1c>)
 801872c:	2300      	movs	r3, #0
 801872e:	4604      	mov	r4, r0
 8018730:	4608      	mov	r0, r1
 8018732:	602b      	str	r3, [r5, #0]
 8018734:	f7eb f996 	bl	8003a64 <_sbrk>
 8018738:	1c43      	adds	r3, r0, #1
 801873a:	d102      	bne.n	8018742 <_sbrk_r+0x1a>
 801873c:	682b      	ldr	r3, [r5, #0]
 801873e:	b103      	cbz	r3, 8018742 <_sbrk_r+0x1a>
 8018740:	6023      	str	r3, [r4, #0]
 8018742:	bd38      	pop	{r3, r4, r5, pc}
 8018744:	24003454 	.word	0x24003454

08018748 <_realloc_r>:
 8018748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801874c:	4680      	mov	r8, r0
 801874e:	4614      	mov	r4, r2
 8018750:	460e      	mov	r6, r1
 8018752:	b921      	cbnz	r1, 801875e <_realloc_r+0x16>
 8018754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018758:	4611      	mov	r1, r2
 801875a:	f7ff b8c3 	b.w	80178e4 <_malloc_r>
 801875e:	b92a      	cbnz	r2, 801876c <_realloc_r+0x24>
 8018760:	f7ff f854 	bl	801780c <_free_r>
 8018764:	4625      	mov	r5, r4
 8018766:	4628      	mov	r0, r5
 8018768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801876c:	f000 f914 	bl	8018998 <_malloc_usable_size_r>
 8018770:	4284      	cmp	r4, r0
 8018772:	4607      	mov	r7, r0
 8018774:	d802      	bhi.n	801877c <_realloc_r+0x34>
 8018776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801877a:	d812      	bhi.n	80187a2 <_realloc_r+0x5a>
 801877c:	4621      	mov	r1, r4
 801877e:	4640      	mov	r0, r8
 8018780:	f7ff f8b0 	bl	80178e4 <_malloc_r>
 8018784:	4605      	mov	r5, r0
 8018786:	2800      	cmp	r0, #0
 8018788:	d0ed      	beq.n	8018766 <_realloc_r+0x1e>
 801878a:	42bc      	cmp	r4, r7
 801878c:	4622      	mov	r2, r4
 801878e:	4631      	mov	r1, r6
 8018790:	bf28      	it	cs
 8018792:	463a      	movcs	r2, r7
 8018794:	f7ff f82c 	bl	80177f0 <memcpy>
 8018798:	4631      	mov	r1, r6
 801879a:	4640      	mov	r0, r8
 801879c:	f7ff f836 	bl	801780c <_free_r>
 80187a0:	e7e1      	b.n	8018766 <_realloc_r+0x1e>
 80187a2:	4635      	mov	r5, r6
 80187a4:	e7df      	b.n	8018766 <_realloc_r+0x1e>
	...

080187a8 <_strtol_l.constprop.0>:
 80187a8:	2b01      	cmp	r3, #1
 80187aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187ae:	d001      	beq.n	80187b4 <_strtol_l.constprop.0+0xc>
 80187b0:	2b24      	cmp	r3, #36	; 0x24
 80187b2:	d906      	bls.n	80187c2 <_strtol_l.constprop.0+0x1a>
 80187b4:	f7fe ffe8 	bl	8017788 <__errno>
 80187b8:	2316      	movs	r3, #22
 80187ba:	6003      	str	r3, [r0, #0]
 80187bc:	2000      	movs	r0, #0
 80187be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187c2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80188a8 <_strtol_l.constprop.0+0x100>
 80187c6:	460d      	mov	r5, r1
 80187c8:	462e      	mov	r6, r5
 80187ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187ce:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80187d2:	f017 0708 	ands.w	r7, r7, #8
 80187d6:	d1f7      	bne.n	80187c8 <_strtol_l.constprop.0+0x20>
 80187d8:	2c2d      	cmp	r4, #45	; 0x2d
 80187da:	d132      	bne.n	8018842 <_strtol_l.constprop.0+0x9a>
 80187dc:	782c      	ldrb	r4, [r5, #0]
 80187de:	2701      	movs	r7, #1
 80187e0:	1cb5      	adds	r5, r6, #2
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d05b      	beq.n	801889e <_strtol_l.constprop.0+0xf6>
 80187e6:	2b10      	cmp	r3, #16
 80187e8:	d109      	bne.n	80187fe <_strtol_l.constprop.0+0x56>
 80187ea:	2c30      	cmp	r4, #48	; 0x30
 80187ec:	d107      	bne.n	80187fe <_strtol_l.constprop.0+0x56>
 80187ee:	782c      	ldrb	r4, [r5, #0]
 80187f0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80187f4:	2c58      	cmp	r4, #88	; 0x58
 80187f6:	d14d      	bne.n	8018894 <_strtol_l.constprop.0+0xec>
 80187f8:	786c      	ldrb	r4, [r5, #1]
 80187fa:	2310      	movs	r3, #16
 80187fc:	3502      	adds	r5, #2
 80187fe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018802:	f108 38ff 	add.w	r8, r8, #4294967295
 8018806:	f04f 0e00 	mov.w	lr, #0
 801880a:	fbb8 f9f3 	udiv	r9, r8, r3
 801880e:	4676      	mov	r6, lr
 8018810:	fb03 8a19 	mls	sl, r3, r9, r8
 8018814:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018818:	f1bc 0f09 	cmp.w	ip, #9
 801881c:	d816      	bhi.n	801884c <_strtol_l.constprop.0+0xa4>
 801881e:	4664      	mov	r4, ip
 8018820:	42a3      	cmp	r3, r4
 8018822:	dd24      	ble.n	801886e <_strtol_l.constprop.0+0xc6>
 8018824:	f1be 3fff 	cmp.w	lr, #4294967295
 8018828:	d008      	beq.n	801883c <_strtol_l.constprop.0+0x94>
 801882a:	45b1      	cmp	r9, r6
 801882c:	d31c      	bcc.n	8018868 <_strtol_l.constprop.0+0xc0>
 801882e:	d101      	bne.n	8018834 <_strtol_l.constprop.0+0x8c>
 8018830:	45a2      	cmp	sl, r4
 8018832:	db19      	blt.n	8018868 <_strtol_l.constprop.0+0xc0>
 8018834:	fb06 4603 	mla	r6, r6, r3, r4
 8018838:	f04f 0e01 	mov.w	lr, #1
 801883c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018840:	e7e8      	b.n	8018814 <_strtol_l.constprop.0+0x6c>
 8018842:	2c2b      	cmp	r4, #43	; 0x2b
 8018844:	bf04      	itt	eq
 8018846:	782c      	ldrbeq	r4, [r5, #0]
 8018848:	1cb5      	addeq	r5, r6, #2
 801884a:	e7ca      	b.n	80187e2 <_strtol_l.constprop.0+0x3a>
 801884c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018850:	f1bc 0f19 	cmp.w	ip, #25
 8018854:	d801      	bhi.n	801885a <_strtol_l.constprop.0+0xb2>
 8018856:	3c37      	subs	r4, #55	; 0x37
 8018858:	e7e2      	b.n	8018820 <_strtol_l.constprop.0+0x78>
 801885a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801885e:	f1bc 0f19 	cmp.w	ip, #25
 8018862:	d804      	bhi.n	801886e <_strtol_l.constprop.0+0xc6>
 8018864:	3c57      	subs	r4, #87	; 0x57
 8018866:	e7db      	b.n	8018820 <_strtol_l.constprop.0+0x78>
 8018868:	f04f 3eff 	mov.w	lr, #4294967295
 801886c:	e7e6      	b.n	801883c <_strtol_l.constprop.0+0x94>
 801886e:	f1be 3fff 	cmp.w	lr, #4294967295
 8018872:	d105      	bne.n	8018880 <_strtol_l.constprop.0+0xd8>
 8018874:	2322      	movs	r3, #34	; 0x22
 8018876:	6003      	str	r3, [r0, #0]
 8018878:	4646      	mov	r6, r8
 801887a:	b942      	cbnz	r2, 801888e <_strtol_l.constprop.0+0xe6>
 801887c:	4630      	mov	r0, r6
 801887e:	e79e      	b.n	80187be <_strtol_l.constprop.0+0x16>
 8018880:	b107      	cbz	r7, 8018884 <_strtol_l.constprop.0+0xdc>
 8018882:	4276      	negs	r6, r6
 8018884:	2a00      	cmp	r2, #0
 8018886:	d0f9      	beq.n	801887c <_strtol_l.constprop.0+0xd4>
 8018888:	f1be 0f00 	cmp.w	lr, #0
 801888c:	d000      	beq.n	8018890 <_strtol_l.constprop.0+0xe8>
 801888e:	1e69      	subs	r1, r5, #1
 8018890:	6011      	str	r1, [r2, #0]
 8018892:	e7f3      	b.n	801887c <_strtol_l.constprop.0+0xd4>
 8018894:	2430      	movs	r4, #48	; 0x30
 8018896:	2b00      	cmp	r3, #0
 8018898:	d1b1      	bne.n	80187fe <_strtol_l.constprop.0+0x56>
 801889a:	2308      	movs	r3, #8
 801889c:	e7af      	b.n	80187fe <_strtol_l.constprop.0+0x56>
 801889e:	2c30      	cmp	r4, #48	; 0x30
 80188a0:	d0a5      	beq.n	80187ee <_strtol_l.constprop.0+0x46>
 80188a2:	230a      	movs	r3, #10
 80188a4:	e7ab      	b.n	80187fe <_strtol_l.constprop.0+0x56>
 80188a6:	bf00      	nop
 80188a8:	08018ccf 	.word	0x08018ccf

080188ac <_strtol_r>:
 80188ac:	f7ff bf7c 	b.w	80187a8 <_strtol_l.constprop.0>

080188b0 <_strtoul_l.constprop.0>:
 80188b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188b4:	4f36      	ldr	r7, [pc, #216]	; (8018990 <_strtoul_l.constprop.0+0xe0>)
 80188b6:	4686      	mov	lr, r0
 80188b8:	460d      	mov	r5, r1
 80188ba:	4628      	mov	r0, r5
 80188bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188c0:	5d3e      	ldrb	r6, [r7, r4]
 80188c2:	f016 0608 	ands.w	r6, r6, #8
 80188c6:	d1f8      	bne.n	80188ba <_strtoul_l.constprop.0+0xa>
 80188c8:	2c2d      	cmp	r4, #45	; 0x2d
 80188ca:	d130      	bne.n	801892e <_strtoul_l.constprop.0+0x7e>
 80188cc:	782c      	ldrb	r4, [r5, #0]
 80188ce:	2601      	movs	r6, #1
 80188d0:	1c85      	adds	r5, r0, #2
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d057      	beq.n	8018986 <_strtoul_l.constprop.0+0xd6>
 80188d6:	2b10      	cmp	r3, #16
 80188d8:	d109      	bne.n	80188ee <_strtoul_l.constprop.0+0x3e>
 80188da:	2c30      	cmp	r4, #48	; 0x30
 80188dc:	d107      	bne.n	80188ee <_strtoul_l.constprop.0+0x3e>
 80188de:	7828      	ldrb	r0, [r5, #0]
 80188e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80188e4:	2858      	cmp	r0, #88	; 0x58
 80188e6:	d149      	bne.n	801897c <_strtoul_l.constprop.0+0xcc>
 80188e8:	786c      	ldrb	r4, [r5, #1]
 80188ea:	2310      	movs	r3, #16
 80188ec:	3502      	adds	r5, #2
 80188ee:	f04f 38ff 	mov.w	r8, #4294967295
 80188f2:	2700      	movs	r7, #0
 80188f4:	fbb8 f8f3 	udiv	r8, r8, r3
 80188f8:	fb03 f908 	mul.w	r9, r3, r8
 80188fc:	ea6f 0909 	mvn.w	r9, r9
 8018900:	4638      	mov	r0, r7
 8018902:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018906:	f1bc 0f09 	cmp.w	ip, #9
 801890a:	d815      	bhi.n	8018938 <_strtoul_l.constprop.0+0x88>
 801890c:	4664      	mov	r4, ip
 801890e:	42a3      	cmp	r3, r4
 8018910:	dd23      	ble.n	801895a <_strtoul_l.constprop.0+0xaa>
 8018912:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018916:	d007      	beq.n	8018928 <_strtoul_l.constprop.0+0x78>
 8018918:	4580      	cmp	r8, r0
 801891a:	d31b      	bcc.n	8018954 <_strtoul_l.constprop.0+0xa4>
 801891c:	d101      	bne.n	8018922 <_strtoul_l.constprop.0+0x72>
 801891e:	45a1      	cmp	r9, r4
 8018920:	db18      	blt.n	8018954 <_strtoul_l.constprop.0+0xa4>
 8018922:	fb00 4003 	mla	r0, r0, r3, r4
 8018926:	2701      	movs	r7, #1
 8018928:	f815 4b01 	ldrb.w	r4, [r5], #1
 801892c:	e7e9      	b.n	8018902 <_strtoul_l.constprop.0+0x52>
 801892e:	2c2b      	cmp	r4, #43	; 0x2b
 8018930:	bf04      	itt	eq
 8018932:	782c      	ldrbeq	r4, [r5, #0]
 8018934:	1c85      	addeq	r5, r0, #2
 8018936:	e7cc      	b.n	80188d2 <_strtoul_l.constprop.0+0x22>
 8018938:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801893c:	f1bc 0f19 	cmp.w	ip, #25
 8018940:	d801      	bhi.n	8018946 <_strtoul_l.constprop.0+0x96>
 8018942:	3c37      	subs	r4, #55	; 0x37
 8018944:	e7e3      	b.n	801890e <_strtoul_l.constprop.0+0x5e>
 8018946:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801894a:	f1bc 0f19 	cmp.w	ip, #25
 801894e:	d804      	bhi.n	801895a <_strtoul_l.constprop.0+0xaa>
 8018950:	3c57      	subs	r4, #87	; 0x57
 8018952:	e7dc      	b.n	801890e <_strtoul_l.constprop.0+0x5e>
 8018954:	f04f 37ff 	mov.w	r7, #4294967295
 8018958:	e7e6      	b.n	8018928 <_strtoul_l.constprop.0+0x78>
 801895a:	1c7b      	adds	r3, r7, #1
 801895c:	d106      	bne.n	801896c <_strtoul_l.constprop.0+0xbc>
 801895e:	2322      	movs	r3, #34	; 0x22
 8018960:	f8ce 3000 	str.w	r3, [lr]
 8018964:	4638      	mov	r0, r7
 8018966:	b932      	cbnz	r2, 8018976 <_strtoul_l.constprop.0+0xc6>
 8018968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801896c:	b106      	cbz	r6, 8018970 <_strtoul_l.constprop.0+0xc0>
 801896e:	4240      	negs	r0, r0
 8018970:	2a00      	cmp	r2, #0
 8018972:	d0f9      	beq.n	8018968 <_strtoul_l.constprop.0+0xb8>
 8018974:	b107      	cbz	r7, 8018978 <_strtoul_l.constprop.0+0xc8>
 8018976:	1e69      	subs	r1, r5, #1
 8018978:	6011      	str	r1, [r2, #0]
 801897a:	e7f5      	b.n	8018968 <_strtoul_l.constprop.0+0xb8>
 801897c:	2430      	movs	r4, #48	; 0x30
 801897e:	2b00      	cmp	r3, #0
 8018980:	d1b5      	bne.n	80188ee <_strtoul_l.constprop.0+0x3e>
 8018982:	2308      	movs	r3, #8
 8018984:	e7b3      	b.n	80188ee <_strtoul_l.constprop.0+0x3e>
 8018986:	2c30      	cmp	r4, #48	; 0x30
 8018988:	d0a9      	beq.n	80188de <_strtoul_l.constprop.0+0x2e>
 801898a:	230a      	movs	r3, #10
 801898c:	e7af      	b.n	80188ee <_strtoul_l.constprop.0+0x3e>
 801898e:	bf00      	nop
 8018990:	08018ccf 	.word	0x08018ccf

08018994 <_strtoul_r>:
 8018994:	f7ff bf8c 	b.w	80188b0 <_strtoul_l.constprop.0>

08018998 <_malloc_usable_size_r>:
 8018998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801899c:	1f18      	subs	r0, r3, #4
 801899e:	2b00      	cmp	r3, #0
 80189a0:	bfbc      	itt	lt
 80189a2:	580b      	ldrlt	r3, [r1, r0]
 80189a4:	18c0      	addlt	r0, r0, r3
 80189a6:	4770      	bx	lr

080189a8 <_init>:
 80189a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189aa:	bf00      	nop
 80189ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ae:	bc08      	pop	{r3}
 80189b0:	469e      	mov	lr, r3
 80189b2:	4770      	bx	lr

080189b4 <_fini>:
 80189b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189b6:	bf00      	nop
 80189b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189ba:	bc08      	pop	{r3}
 80189bc:	469e      	mov	lr, r3
 80189be:	4770      	bx	lr
