
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018098  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08018368  08018368  00028368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018730  08018730  00028730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018738  08018738  00028738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801873c  0801873c  0002873c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018740  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  08018890  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  08018890  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035774  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  00065935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a925  00000000  00000000  000ae5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42a  00000000  00000000  000e8f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c0  00000000  00000000  00266340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00272600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018350 	.word	0x08018350

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018350 	.word	0x08018350

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc7e 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa14 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fa0e 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc6c 	bl	8007ff4 <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc54 	bl	8007ff4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9ea 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fbdf 	bl	800ef24 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc41 	bl	8007ff4 <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc2a 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9c0 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9ba 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc18 	bl	8007ff4 <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	0801851c 	.word	0x0801851c
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd78 	bl	800f7ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd72 	bl	800f7ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd6c 	bl	800f7ac <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd66 	bl	800f7ac <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	0801851c 	.word	0x0801851c
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f96b 	bl	8007ff4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d ff01 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f8f6 	bl	800ef24 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f958 	bl	8007ff4 <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f93b 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fed1 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fecb 	bl	800eb2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f929 	bl	8007ff4 <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f853 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f84d 	bl	8007ff4 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f887 	bl	8017084 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc27 	bl	80167dc <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08018368 	.word	0x08018368
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	LoRA_idle();
 80010bc:	f7ff fec0 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c0:	2012      	movs	r0, #18
 80010c2:	f7ff fe21 	bl	8000d08 <LoRA_Read_Register>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60bb      	str	r3, [r7, #8]
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d004      	beq.n	80010de <LoRA_sendPacket+0x2a>
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d022      	beq.n	8001124 <LoRA_sendPacket+0x70>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010de:	f7ff ff81 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	e00a      	b.n	80010fe <LoRA_sendPacket+0x4a>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff fe30 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff f910 	bl	8000324 <strlen>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d8ed      	bhi.n	80010e8 <LoRA_sendPacket+0x34>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff f909 	bl	8000324 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	2022      	movs	r0, #34	; 0x22
 800111a:	f7ff fe1d 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800111e:	f7ff ff6f 	bl	8001000 <LoRA_endPacket>
 8001122:	e004      	b.n	800112e <LoRA_sendPacket+0x7a>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001124:	2185      	movs	r1, #133	; 0x85
 8001126:	2001      	movs	r0, #1
 8001128:	f7ff fe16 	bl	8000d58 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <disarm+0xac>)
 8001146:	f006 ff55 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2104      	movs	r1, #4
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <disarm+0xac>)
 8001150:	f006 ff50 	bl	8007ff4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2102      	movs	r1, #2
 8001158:	4823      	ldr	r0, [pc, #140]	; (80011e8 <disarm+0xb0>)
 800115a:	f006 ff4b 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001164:	4821      	ldr	r0, [pc, #132]	; (80011ec <disarm+0xb4>)
 8001166:	f006 ff45 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	481e      	ldr	r0, [pc, #120]	; (80011ec <disarm+0xb4>)
 8001172:	f006 ff3f 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800117c:	481b      	ldr	r0, [pc, #108]	; (80011ec <disarm+0xb4>)
 800117e:	f006 ff39 	bl	8007ff4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	481a      	ldr	r0, [pc, #104]	; (80011f0 <disarm+0xb8>)
 8001188:	f006 ff34 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001192:	4818      	ldr	r0, [pc, #96]	; (80011f4 <disarm+0xbc>)
 8001194:	f006 ff2e 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001198:	2200      	movs	r2, #0
 800119a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119e:	4815      	ldr	r0, [pc, #84]	; (80011f4 <disarm+0xbc>)
 80011a0:	f006 ff28 	bl	8007ff4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011aa:	4812      	ldr	r0, [pc, #72]	; (80011f4 <disarm+0xbc>)
 80011ac:	f006 ff22 	bl	8007ff4 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <disarm+0xc0>)
 80011b2:	22ff      	movs	r2, #255	; 0xff
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <disarm+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <disarm+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011c2:	f7ff fbe9 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <disarm+0xc4>)
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	cb03      	ldmia	r3!, {r0, r1}
 80011d0:	6010      	str	r0, [r2, #0]
 80011d2:	6051      	str	r1, [r2, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	7213      	strb	r3, [r2, #8]
  return 0;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	58020000 	.word	0x58020000
 80011e8:	58020400 	.word	0x58020400
 80011ec:	58021400 	.word	0x58021400
 80011f0:	58021800 	.word	0x58021800
 80011f4:	58021000 	.word	0x58021000
 80011f8:	24000b50 	.word	0x24000b50
 80011fc:	0801836c 	.word	0x0801836c

08001200 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800120a:	f7ff ff12 	bl	8001032 <LoRA_parsePacket>
 800120e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	429a      	cmp	r2, r3
 8001216:	dc01      	bgt.n	800121c <recv_packet+0x1c>
  {
    return 0;
 8001218:	2300      	movs	r3, #0
 800121a:	e01c      	b.n	8001256 <recv_packet+0x56>
  }
  if(packet_length){
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d018      	beq.n	8001254 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	e00a      	b.n	800123e <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d4      	adds	r4, r2, r3
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fd6a 	bl	8000d08 <LoRA_Read_Register>
 8001234:	4603      	mov	r3, r0
 8001236:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3301      	adds	r3, #1
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	429a      	cmp	r2, r3
 8001244:	dbf0      	blt.n	8001228 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	e000      	b.n	8001256 <recv_packet+0x56>
  }
  else{
    return 0;
 8001254:	2300      	movs	r3, #0
  }
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bd90      	pop	{r4, r7, pc}

0800125e <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 800125e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	466b      	mov	r3, sp
 800126a:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f859 	bl	8000324 <strlen>
 8001272:	4603      	mov	r3, r0
 8001274:	b29b      	uxth	r3, r3
 8001276:	3301      	adds	r3, #1
 8001278:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 800127a:	8a79      	ldrh	r1, [r7, #18]
 800127c:	460b      	mov	r3, r1
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	b28b      	uxth	r3, r1
 8001284:	2200      	movs	r2, #0
 8001286:	4698      	mov	r8, r3
 8001288:	4691      	mov	r9, r2
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800129a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800129e:	b28b      	uxth	r3, r1
 80012a0:	2200      	movs	r2, #0
 80012a2:	461c      	mov	r4, r3
 80012a4:	4615      	mov	r5, r2
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	00eb      	lsls	r3, r5, #3
 80012b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012b4:	00e2      	lsls	r2, r4, #3
 80012b6:	460b      	mov	r3, r1
 80012b8:	3307      	adds	r3, #7
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	ebad 0d03 	sub.w	sp, sp, r3
 80012c2:	466b      	mov	r3, sp
 80012c4:	3300      	adds	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 80012c8:	f002 fbd6 	bl	8003a78 <HAL_GetTick>
 80012cc:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fef0 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 80012d4:	8a7b      	ldrh	r3, [r7, #18]
 80012d6:	4619      	mov	r1, r3
 80012d8:	68b8      	ldr	r0, [r7, #8]
 80012da:	f7ff ff91 	bl	8001200 <recv_packet>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d009      	beq.n	80012f8 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 80012e4:	6879      	ldr	r1, [r7, #4]
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff f812 	bl	8000310 <strcmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d011      	beq.n	8001316 <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fede 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80012f8:	f002 fbbe 	bl	8003a78 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001306:	d9e5      	bls.n	80012d4 <reliable_send_packet+0x76>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			LoRA_sendPacket(LoRA_data);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fed3 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 800130e:	f002 fbb3 	bl	8003a78 <HAL_GetTick>
 8001312:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001314:	e7de      	b.n	80012d4 <reliable_send_packet+0x76>
				break;
 8001316:	bf00      	nop
 8001318:	46b5      	mov	sp, r6
		}
	}
}
 800131a:	bf00      	nop
 800131c:	371c      	adds	r7, #28
 800131e:	46bd      	mov	sp, r7
 8001320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001324 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <usbReceiveHandle+0x38>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00c      	beq.n	8001352 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <usbReceiveHandle+0x3c>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f015 ff2b 	bl	8017198 <memcpy>
		output[temp] = '\0';
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4413      	add	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <usbReceiveHandle+0x38>)
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	2400026c 	.word	0x2400026c
 8001360:	2400016c 	.word	0x2400016c
 8001364:	00000000 	.word	0x00000000

08001368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800136a:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001370:	4bdb      	ldr	r3, [pc, #876]	; (80016e0 <main+0x378>)
 8001372:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 8001376:	461d      	mov	r5, r3
 8001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001380:	c403      	stmia	r4!, {r0, r1}
 8001382:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001384:	f002 faf2 	bl	800396c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001388:	f000 fb78 	bl	8001a7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800138c:	f000 fbee 	bl	8001b6c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f001 f976 	bl	8002680 <MX_GPIO_Init>
  MX_DMA_Init();
 8001394:	f001 f914 	bl	80025c0 <MX_DMA_Init>
  MX_SPI3_Init();
 8001398:	f000 fe6e 	bl	8002078 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800139c:	f000 fcfe 	bl	8001d9c <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013a0:	f001 f8c2 	bl	8002528 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013a4:	f000 fc14 	bl	8001bd0 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013a8:	f000 ff78 	bl	800229c <MX_TIM4_Init>
  MX_ADC3_Init();
 80013ac:	f000 fc88 	bl	8001cc0 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013b0:	f000 fe0c 	bl	8001fcc <MX_SPI2_Init>
  MX_I2C2_Init();
 80013b4:	f000 fd56 	bl	8001e64 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013b8:	f000 feb4 	bl	8002124 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013bc:	f000 ffea 	bl	8002394 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013c0:	f000 ff08 	bl	80021d4 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013c4:	f015 f934 	bl	8016630 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013c8:	f000 fdaa 	bl	8001f20 <MX_SPI1_Init>
  MX_UART4_Init();
 80013cc:	f001 f860 	bl	8002490 <MX_UART4_Init>
  MX_FATFS_Init();
 80013d0:	f012 fec2 	bl	8014158 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013d4:	f000 fd86 	bl	8001ee4 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80013d8:	f001 f836 	bl	8002448 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013dc:	2332      	movs	r3, #50	; 0x32
 80013de:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 80013e2:	a3bd      	add	r3, pc, #756	; (adr r3, 80016d8 <main+0x370>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 80013ec:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <main+0x37c>)
 8001406:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 800140a:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001416:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 800141a:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800141e:	213c      	movs	r1, #60	; 0x3c
 8001420:	2010      	movs	r0, #16
 8001422:	f7ff f9af 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001426:	2130      	movs	r1, #48	; 0x30
 8001428:	2011      	movs	r0, #17
 800142a:	f7ff f9ab 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800142e:	2104      	movs	r1, #4
 8001430:	2013      	movs	r0, #19
 8001432:	f7ff f9a7 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001436:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800143a:	f002 fb29 	bl	8003a90 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800143e:	21bf      	movs	r1, #191	; 0xbf
 8001440:	201c      	movs	r0, #28
 8001442:	f7ff f94b 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001446:	2002      	movs	r0, #2
 8001448:	f002 fb22 	bl	8003a90 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 800144c:	2158      	movs	r1, #88	; 0x58
 800144e:	201b      	movs	r0, #27
 8001450:	f7ff f944 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001454:	21d8      	movs	r1, #216	; 0xd8
 8001456:	201b      	movs	r0, #27
 8001458:	f7ff f940 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001464:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001474:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800147e:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001488:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001490:	e02e      	b.n	80014f0 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 8001492:	f7ff f99f 	bl	80007d4 <LG2_Get_Gyro_X>
 8001496:	eeb0 7a40 	vmov.f32	s14, s0
 800149a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014a6:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014aa:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014ae:	f7ff f9c1 	bl	8000834 <LG2_Get_Gyro_Y>
 80014b2:	eeb0 7a40 	vmov.f32	s14, s0
 80014b6:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014ca:	f7ff f9e5 	bl	8000898 <LG2_Get_Gyro_Z>
 80014ce:	eeb0 7a40 	vmov.f32	s14, s0
 80014d2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80014e2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80014e6:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014f0:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80014f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014f8:	dbcb      	blt.n	8001492 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80014fa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014fe:	ed93 7a00 	vldr	s14, [r3]
 8001502:	eddf 6a79 	vldr	s13, [pc, #484]	; 80016e8 <main+0x380>
 8001506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800150e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001512:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001516:	ed93 7a00 	vldr	s14, [r3]
 800151a:	eddf 6a73 	vldr	s13, [pc, #460]	; 80016e8 <main+0x380>
 800151e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001522:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001526:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800152a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800152e:	ed93 7a00 	vldr	s14, [r3]
 8001532:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80016e8 <main+0x380>
 8001536:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800153e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2101      	movs	r1, #1
 8001546:	4869      	ldr	r0, [pc, #420]	; (80016ec <main+0x384>)
 8001548:	f006 fd54 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800154c:	20c8      	movs	r0, #200	; 0xc8
 800154e:	f002 fa9f 	bl	8003a90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	4865      	ldr	r0, [pc, #404]	; (80016ec <main+0x384>)
 8001558:	f006 fd4c 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800155c:	20c8      	movs	r0, #200	; 0xc8
 800155e:	f002 fa97 	bl	8003a90 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001562:	2201      	movs	r2, #1
 8001564:	2101      	movs	r1, #1
 8001566:	4861      	ldr	r0, [pc, #388]	; (80016ec <main+0x384>)
 8001568:	f006 fd44 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800156c:	20c8      	movs	r0, #200	; 0xc8
 800156e:	f002 fa8f 	bl	8003a90 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001572:	2201      	movs	r2, #1
 8001574:	2104      	movs	r1, #4
 8001576:	485e      	ldr	r0, [pc, #376]	; (80016f0 <main+0x388>)
 8001578:	f006 fd3c 	bl	8007ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	2108      	movs	r1, #8
 8001580:	485b      	ldr	r0, [pc, #364]	; (80016f0 <main+0x388>)
 8001582:	f006 fd37 	bl	8007ff4 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	485a      	ldr	r0, [pc, #360]	; (80016f4 <main+0x38c>)
 800158a:	f00d fff3 	bl	800f574 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800158e:	2104      	movs	r1, #4
 8001590:	4858      	ldr	r0, [pc, #352]	; (80016f4 <main+0x38c>)
 8001592:	f00d ffef 	bl	800f574 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001596:	2108      	movs	r1, #8
 8001598:	4856      	ldr	r0, [pc, #344]	; (80016f4 <main+0x38c>)
 800159a:	f00d ffeb 	bl	800f574 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800159e:	210c      	movs	r1, #12
 80015a0:	4854      	ldr	r0, [pc, #336]	; (80016f4 <main+0x38c>)
 80015a2:	f00d ffe7 	bl	800f574 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015a6:	ed9f 0a54 	vldr	s0, [pc, #336]	; 80016f8 <main+0x390>
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff f9ac 	bl	8000908 <setServo>
    setServo(2, 180);
 80015b0:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80016fc <main+0x394>
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff f9a7 	bl	8000908 <setServo>
    setServo(3, 0);
 80015ba:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001700 <main+0x398>
 80015be:	2003      	movs	r0, #3
 80015c0:	f7ff f9a2 	bl	8000908 <setServo>
    setServo(4, 45);
 80015c4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001704 <main+0x39c>
 80015c8:	2004      	movs	r0, #4
 80015ca:	f7ff f99d 	bl	8000908 <setServo>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 80015e0:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015e4:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80015f2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80015f6:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	3304      	adds	r3, #4
 8001600:	22f6      	movs	r2, #246	; 0xf6
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f015 fd8b 	bl	8017120 <memset>
  char command[MAX_PAYLOAD_LENGHT];
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT] = "";
 800160a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800160e:	f5a3 63db 	sub.w	r3, r3, #1752	; 0x6d8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	3304      	adds	r3, #4
 8001618:	22f6      	movs	r2, #246	; 0xf6
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f015 fd7f 	bl	8017120 <memset>
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001628:	2332      	movs	r3, #50	; 0x32
 800162a:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 8001634:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001638:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 800163c:	4b32      	ldr	r3, [pc, #200]	; (8001708 <main+0x3a0>)
 800163e:	4634      	mov	r4, r6
 8001640:	461d      	mov	r5, r3
 8001642:	6828      	ldr	r0, [r5, #0]
 8001644:	6869      	ldr	r1, [r5, #4]
 8001646:	68aa      	ldr	r2, [r5, #8]
 8001648:	68eb      	ldr	r3, [r5, #12]
 800164a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164c:	7c2b      	ldrb	r3, [r5, #16]
 800164e:	7023      	strb	r3, [r4, #0]
 8001650:	f106 0311 	add.w	r3, r6, #17
 8001654:	2221      	movs	r2, #33	; 0x21
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f015 fd61 	bl	8017120 <memset>
  uint32_t previousTime = HAL_GetTick();
 800165e:	f002 fa0b 	bl	8003a78 <HAL_GetTick>
 8001662:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 8001666:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fd64 	bl	8001138 <disarm>
  LoRA_begin(868000000);
 8001670:	4826      	ldr	r0, [pc, #152]	; (800170c <main+0x3a4>)
 8001672:	f7ff fc63 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001676:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800167a:	4925      	ldr	r1, [pc, #148]	; (8001710 <main+0x3a8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fe47 	bl	8000310 <strcmp>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8089 	bne.w	800179c <main+0x434>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800168a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800168e:	21fa      	movs	r1, #250	; 0xfa
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fdb5 	bl	8001200 <recv_packet>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 81bc 	beq.w	8001a16 <main+0x6ae>
      {
    	have_recieved_anything = 1;
 800169e:	2301      	movs	r3, #1
 80016a0:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 80016a4:	f002 f9e8 	bl	8003a78 <HAL_GetTick>
 80016a8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80016ac:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80016b0:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016b4:	4917      	ldr	r1, [pc, #92]	; (8001714 <main+0x3ac>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f015 fd04 	bl	80170c4 <siscanf>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d12a      	bne.n	8001718 <main+0x3b0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80016c2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016c6:	4a10      	ldr	r2, [pc, #64]	; (8001708 <main+0x3a0>)
 80016c8:	461c      	mov	r4, r3
 80016ca:	4615      	mov	r5, r2
 80016cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	7023      	strb	r3, [r4, #0]
 80016d4:	e19f      	b.n	8001a16 <main+0x6ae>
 80016d6:	bf00      	nop
 80016d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80016dc:	3f50624d 	.word	0x3f50624d
 80016e0:	08018468 	.word	0x08018468
 80016e4:	3ff00000 	.word	0x3ff00000
 80016e8:	43fa0000 	.word	0x43fa0000
 80016ec:	58020c00 	.word	0x58020c00
 80016f0:	58021800 	.word	0x58021800
 80016f4:	24001168 	.word	0x24001168
 80016f8:	42b40000 	.word	0x42b40000
 80016fc:	43340000 	.word	0x43340000
 8001700:	00000000 	.word	0x00000000
 8001704:	42340000 	.word	0x42340000
 8001708:	080183d4 	.word	0x080183d4
 800170c:	33bca100 	.word	0x33bca100
 8001710:	080183b8 	.word	0x080183b8
 8001714:	080183cc 	.word	0x080183cc
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001718:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800171c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001720:	49c8      	ldr	r1, [pc, #800]	; (8001a44 <main+0x6dc>)
 8001722:	4618      	mov	r0, r3
 8001724:	f015 fcce 	bl	80170c4 <siscanf>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10b      	bne.n	8001746 <main+0x3de>
        {
          strcpy(communication_state,"SENDING STREAM");
 800172e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001732:	4ac5      	ldr	r2, [pc, #788]	; (8001a48 <main+0x6e0>)
 8001734:	461c      	mov	r4, r3
 8001736:	4613      	mov	r3, r2
 8001738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800173a:	c407      	stmia	r4!, {r0, r1, r2}
 800173c:	8023      	strh	r3, [r4, #0]
 800173e:	3402      	adds	r4, #2
 8001740:	0c1b      	lsrs	r3, r3, #16
 8001742:	7023      	strb	r3, [r4, #0]
 8001744:	e167      	b.n	8001a16 <main+0x6ae>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001746:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800174a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fddd 	bl	8000310 <strcmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <main+0x400>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 800175c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fca7 	bl	80010b4 <LoRA_sendPacket>
 8001766:	e156      	b.n	8001a16 <main+0x6ae>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001768:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800176c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f015 fd08 	bl	8017188 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 8001778:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fc99 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          /*char debug[250];
          sprintf(debug, "new packet: %s\n", recieved_packet);*/
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001782:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdcc 	bl	8000324 <strlen>
 800178c:	4602      	mov	r2, r0
 800178e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f015 f821 	bl	80167dc <CDC_Transmit_HS>
 800179a:	e13c      	b.n	8001a16 <main+0x6ae>

        }
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 800179c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017a0:	49aa      	ldr	r1, [pc, #680]	; (8001a4c <main+0x6e4>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fdb4 	bl	8000310 <strcmp>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d14a      	bne.n	8001844 <main+0x4dc>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80017ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017b2:	21fa      	movs	r1, #250	; 0xfa
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fd23 	bl	8001200 <recv_packet>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d025      	beq.n	800180c <main+0x4a4>
      {
        previousTime = HAL_GetTick();
 80017c0:	f002 f95a 	bl	8003a78 <HAL_GetTick>
 80017c4:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80017c8:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80017cc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d0:	499f      	ldr	r1, [pc, #636]	; (8001a50 <main+0x6e8>)
 80017d2:	4618      	mov	r0, r3
 80017d4:	f015 fc76 	bl	80170c4 <siscanf>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d109      	bne.n	80017f2 <main+0x48a>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 80017de:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80017e2:	4a9c      	ldr	r2, [pc, #624]	; (8001a54 <main+0x6ec>)
 80017e4:	461c      	mov	r4, r3
 80017e6:	4615      	mov	r5, r2
 80017e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ec:	682b      	ldr	r3, [r5, #0]
 80017ee:	7023      	strb	r3, [r4, #0]
 80017f0:	e111      	b.n	8001a16 <main+0x6ae>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017f2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fd94 	bl	8000324 <strlen>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001802:	4611      	mov	r1, r2
 8001804:	4618      	mov	r0, r3
 8001806:	f014 ffe9 	bl	80167dc <CDC_Transmit_HS>
 800180a:	e104      	b.n	8001a16 <main+0x6ae>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 800180c:	f002 f934 	bl	8003a78 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800181c:	f240 80fb 	bls.w	8001a16 <main+0x6ae>
      {
        previousTime = HAL_GetTick();
 8001820:	f002 f92a 	bl	8003a78 <HAL_GetTick>
 8001824:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001828:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800182c:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001830:	4984      	ldr	r1, [pc, #528]	; (8001a44 <main+0x6dc>)
 8001832:	4618      	mov	r0, r3
 8001834:	f015 fc26 	bl	8017084 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001838:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc39 	bl	80010b4 <LoRA_sendPacket>
 8001842:	e0e8      	b.n	8001a16 <main+0x6ae>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001844:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001848:	497f      	ldr	r1, [pc, #508]	; (8001a48 <main+0x6e0>)
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fd60 	bl	8000310 <strcmp>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d121      	bne.n	800189a <main+0x532>
    {
      if(max_packet_count == 0)
 8001856:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800185a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10e      	bne.n	8001882 <main+0x51a>
      {
        strcpy(communication_state,"TRANSITIONING");
 8001864:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001868:	4a7b      	ldr	r2, [pc, #492]	; (8001a58 <main+0x6f0>)
 800186a:	461c      	mov	r4, r3
 800186c:	4613      	mov	r3, r2
 800186e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001870:	c407      	stmia	r4!, {r0, r1, r2}
 8001872:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 800187a:	4878      	ldr	r0, [pc, #480]	; (8001a5c <main+0x6f4>)
 800187c:	f7ff fc1a 	bl	80010b4 <LoRA_sendPacket>
 8001880:	e0c9      	b.n	8001a16 <main+0x6ae>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001882:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001886:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001892:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e0bd      	b.n	8001a16 <main+0x6ae>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 800189a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800189e:	496d      	ldr	r1, [pc, #436]	; (8001a54 <main+0x6ec>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fd35 	bl	8000310 <strcmp>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d166      	bne.n	800197a <main+0x612>
    {
    	reliable_send_packet("*");
 80018ac:	486c      	ldr	r0, [pc, #432]	; (8001a60 <main+0x6f8>)
 80018ae:	f7ff fcd6 	bl	800125e <reliable_send_packet>
    	sprintf(response_packet, "\nState of other board: %s\n> ", state);
 80018b2:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80018b6:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018ba:	496a      	ldr	r1, [pc, #424]	; (8001a64 <main+0x6fc>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f015 fbe1 	bl	8017084 <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 80018c2:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fd2c 	bl	8000324 <strlen>
 80018cc:	4602      	mov	r2, r0
 80018ce:	f507 7350 	add.w	r3, r7, #832	; 0x340
 80018d2:	4611      	mov	r1, r2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f014 ff81 	bl	80167dc <CDC_Transmit_HS>
	  	//CDC_Transmit_HS("", strlen("> "));
    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 80018da:	bf00      	nop
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fd20 	bl	8001324 <usbReceiveHandle>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f8      	beq.n	80018dc <main+0x574>
    	{}

      reliable_send_packet(input);
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fcb6 	bl	800125e <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "%s\n", input);
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018f8:	495b      	ldr	r1, [pc, #364]	; (8001a68 <main+0x700>)
 80018fa:	4618      	mov	r0, r3
 80018fc:	f015 fbc2 	bl	8017084 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001900:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fd0d 	bl	8000324 <strlen>
 800190a:	4602      	mov	r2, r0
 800190c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f014 ff62 	bl	80167dc <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4954      	ldr	r1, [pc, #336]	; (8001a6c <main+0x704>)
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fcf7 	bl	8000310 <strcmp>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d116      	bne.n	8001956 <main+0x5ee>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001928:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800192c:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <main+0x6e4>)
 800192e:	461c      	mov	r4, r3
 8001930:	4615      	mov	r5, r2
 8001932:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001934:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001936:	682b      	ldr	r3, [r5, #0]
 8001938:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 800193a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800193e:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001942:	4940      	ldr	r1, [pc, #256]	; (8001a44 <main+0x6dc>)
 8001944:	4618      	mov	r0, r3
 8001946:	f015 fb9d 	bl	8017084 <siprintf>
        LoRA_sendPacket(sendMessage);
 800194a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fbb0 	bl	80010b4 <LoRA_sendPacket>
 8001954:	e05f      	b.n	8001a16 <main+0x6ae>
      }
      else
      {
        strcpy(communication_state,"TRANSITIONING");
 8001956:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800195a:	4a3f      	ldr	r2, [pc, #252]	; (8001a58 <main+0x6f0>)
 800195c:	461c      	mov	r4, r3
 800195e:	4613      	mov	r3, r2
 8001960:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001962:	c407      	stmia	r4!, {r0, r1, r2}
 8001964:	8023      	strh	r3, [r4, #0]
        have_recieved_anything = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 800196c:	2064      	movs	r0, #100	; 0x64
 800196e:	f002 f88f 	bl	8003a90 <HAL_Delay>
        LoRA_sendPacket("$");
 8001972:	483a      	ldr	r0, [pc, #232]	; (8001a5c <main+0x6f4>)
 8001974:	f7ff fb9e 	bl	80010b4 <LoRA_sendPacket>
 8001978:	e04d      	b.n	8001a16 <main+0x6ae>
      }
    }
    else if(strcmp(communication_state,"TRANSITIONING") == 0)
 800197a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800197e:	4936      	ldr	r1, [pc, #216]	; (8001a58 <main+0x6f0>)
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fcc5 	bl	8000310 <strcmp>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d144      	bne.n	8001a16 <main+0x6ae>
    {

        if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 800198c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001990:	21fa      	movs	r1, #250	; 0xfa
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc34 	bl	8001200 <recv_packet>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d02b      	beq.n	80019f6 <main+0x68e>
        {
          CDC_Transmit_HS("transitioning\n", strlen("transitioning\n"));
 800199e:	210e      	movs	r1, #14
 80019a0:	4833      	ldr	r0, [pc, #204]	; (8001a70 <main+0x708>)
 80019a2:	f014 ff1b 	bl	80167dc <CDC_Transmit_HS>
          previousTime = HAL_GetTick();
 80019a6:	f002 f867 	bl	8003a78 <HAL_GetTick>
 80019aa:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
          if(strcmp(recieved_packet, "*")==0)
 80019ae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80019b2:	492b      	ldr	r1, [pc, #172]	; (8001a60 <main+0x6f8>)
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fcab 	bl	8000310 <strcmp>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d12a      	bne.n	8001a16 <main+0x6ae>
          {
        	strcpy(previous_packet, recieved_packet);
 80019c0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80019c4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f015 fbdc 	bl	8017188 <strcpy>
        	strcpy(communication_state, "RECEIVING RELIABLE");
 80019d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019d4:	4a27      	ldr	r2, [pc, #156]	; (8001a74 <main+0x70c>)
 80019d6:	461c      	mov	r4, r3
 80019d8:	4615      	mov	r5, r2
 80019da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019de:	682b      	ldr	r3, [r5, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	8022      	strh	r2, [r4, #0]
 80019e4:	3402      	adds	r4, #2
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	7023      	strb	r3, [r4, #0]
            LoRA_sendPacket(recieved_packet);
 80019ea:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff fb60 	bl	80010b4 <LoRA_sendPacket>
 80019f4:	e00f      	b.n	8001a16 <main+0x6ae>
          }
        }
        else if (HAL_GetTick()-previousTime > 300)
 80019f6:	f002 f83f 	bl	8003a78 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001a06:	d906      	bls.n	8001a16 <main+0x6ae>
        {
          previousTime = HAL_GetTick();
 8001a08:	f002 f836 	bl	8003a78 <HAL_GetTick>
 8001a0c:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
		  LoRA_sendPacket("$");
 8001a10:	4812      	ldr	r0, [pc, #72]	; (8001a5c <main+0x6f4>)
 8001a12:	f7ff fb4f 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001a16:	f002 f82f 	bl	8003a78 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a2a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001a78 <main+0x710>
 8001a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a32:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a36:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a3a:	f002 f81d 	bl	8003a78 <HAL_GetTick>
 8001a3e:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a42:	e618      	b.n	8001676 <main+0x30e>
 8001a44:	080183e8 	.word	0x080183e8
 8001a48:	080183f0 	.word	0x080183f0
 8001a4c:	08018400 	.word	0x08018400
 8001a50:	080183cc 	.word	0x080183cc
 8001a54:	080183d4 	.word	0x080183d4
 8001a58:	08018414 	.word	0x08018414
 8001a5c:	08018424 	.word	0x08018424
 8001a60:	08018428 	.word	0x08018428
 8001a64:	0801842c 	.word	0x0801842c
 8001a68:	0801844c 	.word	0x0801844c
 8001a6c:	08018450 	.word	0x08018450
 8001a70:	08018458 	.word	0x08018458
 8001a74:	080183b8 	.word	0x080183b8
 8001a78:	447a0000 	.word	0x447a0000

08001a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b09c      	sub	sp, #112	; 0x70
 8001a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a86:	224c      	movs	r2, #76	; 0x4c
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f015 fb48 	bl	8017120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2220      	movs	r2, #32
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f015 fb42 	bl	8017120 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a9c:	2002      	movs	r0, #2
 8001a9e:	f007 febd 	bl	800981c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
 8001aa6:	4b30      	ldr	r3, [pc, #192]	; (8001b68 <SystemClock_Config+0xec>)
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001aae:	4a2e      	ldr	r2, [pc, #184]	; (8001b68 <SystemClock_Config+0xec>)
 8001ab0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ab4:	6193      	str	r3, [r2, #24]
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <SystemClock_Config+0xec>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001abe:	603b      	str	r3, [r7, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ac2:	bf00      	nop
 8001ac4:	4b28      	ldr	r3, [pc, #160]	; (8001b68 <SystemClock_Config+0xec>)
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ad0:	d1f8      	bne.n	8001ac4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001ad2:	2322      	movs	r3, #34	; 0x22
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ada:	2340      	movs	r3, #64	; 0x40
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001aea:	2304      	movs	r3, #4
 8001aec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001aee:	230c      	movs	r3, #12
 8001af0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001af6:	230c      	movs	r3, #12
 8001af8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001afe:	230c      	movs	r3, #12
 8001b00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b02:	2300      	movs	r3, #0
 8001b04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f007 fece 	bl	80098b0 <HAL_RCC_OscConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b1a:	f000 ff1b 	bl	8002954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b1e:	233f      	movs	r3, #63	; 0x3f
 8001b20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b22:	2303      	movs	r3, #3
 8001b24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b2e:	2340      	movs	r3, #64	; 0x40
 8001b30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	2101      	movs	r1, #1
 8001b44:	4618      	mov	r0, r3
 8001b46:	f008 fa8d 	bl	800a064 <HAL_RCC_ClockConfig>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b50:	f000 ff00 	bl	8002954 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f008 fc38 	bl	800a3d0 <HAL_RCC_MCOConfig>
}
 8001b60:	bf00      	nop
 8001b62:	3770      	adds	r7, #112	; 0x70
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	58024800 	.word	0x58024800

08001b6c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0ae      	sub	sp, #184	; 0xb8
 8001b70:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b72:	463b      	mov	r3, r7
 8001b74:	22b8      	movs	r2, #184	; 0xb8
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f015 fad1 	bl	8017120 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b7e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b8e:	230c      	movs	r3, #12
 8001b90:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b92:	2304      	movs	r3, #4
 8001b94:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b96:	2302      	movs	r3, #2
 8001b98:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fe49 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001bc4:	f000 fec6 	bl	8002954 <Error_Handler>
  }
}
 8001bc8:	bf00      	nop
 8001bca:	37b8      	adds	r7, #184	; 0xb8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001be2:	463b      	mov	r3, r7
 8001be4:	2224      	movs	r2, #36	; 0x24
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f015 fa99 	bl	8017120 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001bf0:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <MX_ADC1_Init+0xe8>)
 8001bf2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001bf4:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001bf6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001bfa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c02:	4b2c      	ldr	r3, [pc, #176]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001c0e:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c40:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c4e:	4819      	ldr	r0, [pc, #100]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c50:	f002 f99e 	bl	8003f90 <HAL_ADC_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c5a:	f000 fe7b 	bl	8002954 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c6a:	f003 f9d9 	bl	8005020 <HAL_ADCEx_MultiModeConfigChannel>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c74:	f000 fe6e 	bl	8002954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <MX_ADC1_Init+0xec>)
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c7c:	2306      	movs	r3, #6
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c80:	2303      	movs	r3, #3
 8001c82:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_ADC1_Init+0xe4>)
 8001c9e:	f002 fb7f 	bl	80043a0 <HAL_ADC_ConfigChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001ca8:	f000 fe54 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	24000bf8 	.word	0x24000bf8
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	2a000400 	.word	0x2a000400

08001cc0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2224      	movs	r2, #36	; 0x24
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f015 fa27 	bl	8017120 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cd2:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001cd4:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <MX_ADC3_Init+0xd4>)
 8001cd6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001cda:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cde:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001ce6:	4b2a      	ldr	r3, [pc, #168]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cfe:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001d04:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d26:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d2c:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d32:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d48:	f002 f922 	bl	8003f90 <HAL_ADC_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d52:	f000 fdff 	bl	8002954 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <MX_ADC3_Init+0xd8>)
 8001d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d66:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	4619      	mov	r1, r3
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_ADC3_Init+0xd0>)
 8001d7a:	f002 fb11 	bl	80043a0 <HAL_ADC_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d84:	f000 fde6 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	24000c68 	.word	0x24000c68
 8001d94:	58026000 	.word	0x58026000
 8001d98:	04300002 	.word	0x04300002

08001d9c <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <MX_FDCAN3_Init+0xc4>)
 8001da4:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001da6:	4b2d      	ldr	r3, [pc, #180]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001db8:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001dc4:	4b25      	ldr	r3, [pc, #148]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001dd0:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001dd6:	4b21      	ldr	r3, [pc, #132]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dd8:	2202      	movs	r2, #2
 8001dda:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001de8:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e26:	2204      	movs	r2, #4
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e44:	2204      	movs	r2, #4
 8001e46:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <MX_FDCAN3_Init+0xc0>)
 8001e4a:	f005 fbaf 	bl	80075ac <HAL_FDCAN_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e54:	f000 fd7e 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	24000dc8 	.word	0x24000dc8
 8001e60:	4000d400 	.word	0x4000d400

08001e64 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e68:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	; (8001edc <MX_I2C2_Init+0x78>)
 8001e6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e70:	4a1b      	ldr	r2, [pc, #108]	; (8001ee0 <MX_I2C2_Init+0x7c>)
 8001e72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e7a:	4b17      	ldr	r3, [pc, #92]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e86:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e8c:	4b12      	ldr	r3, [pc, #72]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e92:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e98:	4b0f      	ldr	r3, [pc, #60]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e9e:	480e      	ldr	r0, [pc, #56]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001ea0:	f006 f8c2 	bl	8008028 <HAL_I2C_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001eaa:	f000 fd53 	bl	8002954 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4809      	ldr	r0, [pc, #36]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001eb2:	f006 f963 	bl	800817c <HAL_I2CEx_ConfigAnalogFilter>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ebc:	f000 fd4a 	bl	8002954 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_I2C2_Init+0x74>)
 8001ec4:	f006 f9a5 	bl	8008212 <HAL_I2CEx_ConfigDigitalFilter>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ece:	f000 fd41 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	24000e68 	.word	0x24000e68
 8001edc:	40005800 	.word	0x40005800
 8001ee0:	20303e5d 	.word	0x20303e5d

08001ee4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <MX_SDMMC2_SD_Init+0x38>)
 8001eec:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001efc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f00:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <MX_SDMMC2_SD_Init+0x34>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	24000ebc 	.word	0x24000ebc
 8001f1c:	48022400 	.word	0x48022400

08001f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f26:	4a28      	ldr	r2, [pc, #160]	; (8001fc8 <MX_SPI1_Init+0xa8>)
 8001f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f32:	4b24      	ldr	r3, [pc, #144]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f3a:	2207      	movs	r2, #7
 8001f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3e:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f52:	4b1c      	ldr	r3, [pc, #112]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f54:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f78:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f7a:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fb0:	4804      	ldr	r0, [pc, #16]	; (8001fc4 <MX_SPI1_Init+0xa4>)
 8001fb2:	f00c fc97 	bl	800e8e4 <HAL_SPI_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fbc:	f000 fcca 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	24000f38 	.word	0x24000f38
 8001fc8:	40013000 	.word	0x40013000

08001fcc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001fd2:	4a28      	ldr	r2, [pc, #160]	; (8002074 <MX_SPI2_Init+0xa8>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001fd8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fdc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fea:	4b21      	ldr	r3, [pc, #132]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <MX_SPI2_Init+0xa4>)
 8001ff8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ffc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001ffe:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002000:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002004:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_SPI2_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_SPI2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002020:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002028:	2200      	movs	r2, #0
 800202a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <MX_SPI2_Init+0xa4>)
 800202e:	2200      	movs	r2, #0
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002034:	2200      	movs	r2, #0
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <MX_SPI2_Init+0xa4>)
 800203a:	2200      	movs	r2, #0
 800203c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002040:	2200      	movs	r2, #0
 8002042:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002046:	2200      	movs	r2, #0
 8002048:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_SPI2_Init+0xa4>)
 800204c:	2200      	movs	r2, #0
 800204e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_SPI2_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_SPI2_Init+0xa4>)
 800205e:	f00c fc41 	bl	800e8e4 <HAL_SPI_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002068:	f000 fc74 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	24000fc0 	.word	0x24000fc0
 8002074:	40003800 	.word	0x40003800

08002078 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <MX_SPI3_Init+0xa4>)
 800207e:	4a28      	ldr	r2, [pc, #160]	; (8002120 <MX_SPI3_Init+0xa8>)
 8002080:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002082:	4b26      	ldr	r3, [pc, #152]	; (800211c <MX_SPI3_Init+0xa4>)
 8002084:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002088:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <MX_SPI3_Init+0xa4>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002090:	4b22      	ldr	r3, [pc, #136]	; (800211c <MX_SPI3_Init+0xa4>)
 8002092:	2207      	movs	r2, #7
 8002094:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <MX_SPI3_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209c:	4b1f      	ldr	r3, [pc, #124]	; (800211c <MX_SPI3_Init+0xa4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020a2:	4b1e      	ldr	r3, [pc, #120]	; (800211c <MX_SPI3_Init+0xa4>)
 80020a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <MX_SPI3_Init+0xa4>)
 80020ac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020b0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b2:	4b1a      	ldr	r3, [pc, #104]	; (800211c <MX_SPI3_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MX_SPI3_Init+0xa4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <MX_SPI3_Init+0xa4>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <MX_SPI3_Init+0xa4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <MX_SPI3_Init+0xa4>)
 80020cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <MX_SPI3_Init+0xa4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <MX_SPI3_Init+0xa4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <MX_SPI3_Init+0xa4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020e4:	4b0d      	ldr	r3, [pc, #52]	; (800211c <MX_SPI3_Init+0xa4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020ea:	4b0c      	ldr	r3, [pc, #48]	; (800211c <MX_SPI3_Init+0xa4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <MX_SPI3_Init+0xa4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <MX_SPI3_Init+0xa4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <MX_SPI3_Init+0xa4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <MX_SPI3_Init+0xa4>)
 8002104:	2200      	movs	r2, #0
 8002106:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002108:	4804      	ldr	r0, [pc, #16]	; (800211c <MX_SPI3_Init+0xa4>)
 800210a:	f00c fbeb 	bl	800e8e4 <HAL_SPI_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002114:	f000 fc1e 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}
 800211c:	24001048 	.word	0x24001048
 8002120:	40003c00 	.word	0x40003c00

08002124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002136:	463b      	mov	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	605a      	str	r2, [r3, #4]
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	60da      	str	r2, [r3, #12]
 8002142:	611a      	str	r2, [r3, #16]
 8002144:	615a      	str	r2, [r3, #20]
 8002146:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_TIM2_Init+0xac>)
 800214a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800214e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_TIM2_Init+0xac>)
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_TIM2_Init+0xac>)
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 800215c:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM2_Init+0xac>)
 800215e:	225a      	movs	r2, #90	; 0x5a
 8002160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <MX_TIM2_Init+0xac>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <MX_TIM2_Init+0xac>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800216e:	4818      	ldr	r0, [pc, #96]	; (80021d0 <MX_TIM2_Init+0xac>)
 8002170:	f00d f9a8 	bl	800f4c4 <HAL_TIM_PWM_Init>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800217a:	f000 fbeb 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	4810      	ldr	r0, [pc, #64]	; (80021d0 <MX_TIM2_Init+0xac>)
 800218e:	f00e fc2f 	bl	80109f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002198:	f000 fbdc 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800219c:	2360      	movs	r3, #96	; 0x60
 800219e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ac:	463b      	mov	r3, r7
 80021ae:	2208      	movs	r2, #8
 80021b0:	4619      	mov	r1, r3
 80021b2:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM2_Init+0xac>)
 80021b4:	f00d fe4e 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021be:	f000 fbc9 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM2_Init+0xac>)
 80021c4:	f001 f8e4 	bl	8003390 <HAL_TIM_MspPostInit>

}
 80021c8:	bf00      	nop
 80021ca:	3728      	adds	r7, #40	; 0x28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	240010d0 	.word	0x240010d0

080021d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	615a      	str	r2, [r3, #20]
 80021f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f8:	4b26      	ldr	r3, [pc, #152]	; (8002294 <MX_TIM3_Init+0xc0>)
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <MX_TIM3_Init+0xc4>)
 80021fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021fe:	4b25      	ldr	r3, [pc, #148]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800220a:	4b22      	ldr	r3, [pc, #136]	; (8002294 <MX_TIM3_Init+0xc0>)
 800220c:	225a      	movs	r2, #90	; 0x5a
 800220e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b20      	ldr	r3, [pc, #128]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002216:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800221c:	481d      	ldr	r0, [pc, #116]	; (8002294 <MX_TIM3_Init+0xc0>)
 800221e:	f00d f951 	bl	800f4c4 <HAL_TIM_PWM_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002228:	f000 fb94 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4816      	ldr	r0, [pc, #88]	; (8002294 <MX_TIM3_Init+0xc0>)
 800223c:	f00e fbd8 	bl	80109f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002246:	f000 fb85 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224a:	2360      	movs	r3, #96	; 0x60
 800224c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225a:	463b      	mov	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	480c      	ldr	r0, [pc, #48]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002262:	f00d fdf7 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800226c:	f000 fb72 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	2204      	movs	r2, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4807      	ldr	r0, [pc, #28]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002278:	f00d fdec 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002282:	f000 fb67 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002286:	4803      	ldr	r0, [pc, #12]	; (8002294 <MX_TIM3_Init+0xc0>)
 8002288:	f001 f882 	bl	8003390 <HAL_TIM_MspPostInit>

}
 800228c:	bf00      	nop
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2400111c 	.word	0x2400111c
 8002298:	40000400 	.word	0x40000400

0800229c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ae:	463b      	mov	r3, r7
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	615a      	str	r2, [r3, #20]
 80022be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <MX_TIM4_Init+0xf0>)
 80022c2:	4a33      	ldr	r2, [pc, #204]	; (8002390 <MX_TIM4_Init+0xf4>)
 80022c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <MX_TIM4_Init+0xf0>)
 80022c8:	221c      	movs	r2, #28
 80022ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <MX_TIM4_Init+0xf0>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <MX_TIM4_Init+0xf0>)
 80022d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80022d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <MX_TIM4_Init+0xf0>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <MX_TIM4_Init+0xf0>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022e6:	4829      	ldr	r0, [pc, #164]	; (800238c <MX_TIM4_Init+0xf0>)
 80022e8:	f00d f8ec 	bl	800f4c4 <HAL_TIM_PWM_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022f2:	f000 fb2f 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022fe:	f107 031c 	add.w	r3, r7, #28
 8002302:	4619      	mov	r1, r3
 8002304:	4821      	ldr	r0, [pc, #132]	; (800238c <MX_TIM4_Init+0xf0>)
 8002306:	f00e fb73 	bl	80109f0 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002310:	f000 fb20 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002314:	2360      	movs	r3, #96	; 0x60
 8002316:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800231c:	2300      	movs	r3, #0
 800231e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002324:	463b      	mov	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	4619      	mov	r1, r3
 800232a:	4818      	ldr	r0, [pc, #96]	; (800238c <MX_TIM4_Init+0xf0>)
 800232c:	f00d fd92 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002336:	f000 fb0d 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800233a:	463b      	mov	r3, r7
 800233c:	2204      	movs	r2, #4
 800233e:	4619      	mov	r1, r3
 8002340:	4812      	ldr	r0, [pc, #72]	; (800238c <MX_TIM4_Init+0xf0>)
 8002342:	f00d fd87 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800234c:	f000 fb02 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	2208      	movs	r2, #8
 8002354:	4619      	mov	r1, r3
 8002356:	480d      	ldr	r0, [pc, #52]	; (800238c <MX_TIM4_Init+0xf0>)
 8002358:	f00d fd7c 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002362:	f000 faf7 	bl	8002954 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002366:	463b      	mov	r3, r7
 8002368:	220c      	movs	r2, #12
 800236a:	4619      	mov	r1, r3
 800236c:	4807      	ldr	r0, [pc, #28]	; (800238c <MX_TIM4_Init+0xf0>)
 800236e:	f00d fd71 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002378:	f000 faec 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800237c:	4803      	ldr	r0, [pc, #12]	; (800238c <MX_TIM4_Init+0xf0>)
 800237e:	f001 f807 	bl	8003390 <HAL_TIM_MspPostInit>

}
 8002382:	bf00      	nop
 8002384:	3728      	adds	r7, #40	; 0x28
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24001168 	.word	0x24001168
 8002390:	40000800 	.word	0x40000800

08002394 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	; 0x28
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]
 80023b4:	615a      	str	r2, [r3, #20]
 80023b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80023b8:	4b21      	ldr	r3, [pc, #132]	; (8002440 <MX_TIM5_Init+0xac>)
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <MX_TIM5_Init+0xb0>)
 80023bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023be:	4b20      	ldr	r3, [pc, #128]	; (8002440 <MX_TIM5_Init+0xac>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <MX_TIM5_Init+0xac>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <MX_TIM5_Init+0xac>)
 80023cc:	225a      	movs	r2, #90	; 0x5a
 80023ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <MX_TIM5_Init+0xac>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023d6:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <MX_TIM5_Init+0xac>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023dc:	4818      	ldr	r0, [pc, #96]	; (8002440 <MX_TIM5_Init+0xac>)
 80023de:	f00d f871 	bl	800f4c4 <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023e8:	f000 fab4 	bl	8002954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	4811      	ldr	r0, [pc, #68]	; (8002440 <MX_TIM5_Init+0xac>)
 80023fc:	f00e faf8 	bl	80109f0 <HAL_TIMEx_MasterConfigSynchronization>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002406:	f000 faa5 	bl	8002954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800240a:	2360      	movs	r3, #96	; 0x60
 800240c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800241a:	463b      	mov	r3, r7
 800241c:	220c      	movs	r2, #12
 800241e:	4619      	mov	r1, r3
 8002420:	4807      	ldr	r0, [pc, #28]	; (8002440 <MX_TIM5_Init+0xac>)
 8002422:	f00d fd17 	bl	800fe54 <HAL_TIM_PWM_ConfigChannel>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800242c:	f000 fa92 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002430:	4803      	ldr	r0, [pc, #12]	; (8002440 <MX_TIM5_Init+0xac>)
 8002432:	f000 ffad 	bl	8003390 <HAL_TIM_MspPostInit>

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	240011b4 	.word	0x240011b4
 8002444:	40000c00 	.word	0x40000c00

08002448 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800244c:	4b0e      	ldr	r3, [pc, #56]	; (8002488 <MX_TIM13_Init+0x40>)
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <MX_TIM13_Init+0x44>)
 8002450:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 8002452:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <MX_TIM13_Init+0x40>)
 8002454:	225f      	movs	r2, #95	; 0x5f
 8002456:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002458:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <MX_TIM13_Init+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <MX_TIM13_Init+0x40>)
 8002460:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002464:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <MX_TIM13_Init+0x40>)
 8002468:	2200      	movs	r2, #0
 800246a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800246c:	4b06      	ldr	r3, [pc, #24]	; (8002488 <MX_TIM13_Init+0x40>)
 800246e:	2200      	movs	r2, #0
 8002470:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <MX_TIM13_Init+0x40>)
 8002474:	f00c ffcf 	bl	800f416 <HAL_TIM_Base_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800247e:	f000 fa69 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	24001200 	.word	0x24001200
 800248c:	40001c00 	.word	0x40001c00

08002490 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002494:	4b22      	ldr	r3, [pc, #136]	; (8002520 <MX_UART4_Init+0x90>)
 8002496:	4a23      	ldr	r2, [pc, #140]	; (8002524 <MX_UART4_Init+0x94>)
 8002498:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <MX_UART4_Init+0x90>)
 800249c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024a0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <MX_UART4_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <MX_UART4_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <MX_UART4_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <MX_UART4_Init+0x90>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <MX_UART4_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_UART4_Init+0x90>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_UART4_Init+0x90>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024cc:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_UART4_Init+0x90>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <MX_UART4_Init+0x90>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024d8:	4811      	ldr	r0, [pc, #68]	; (8002520 <MX_UART4_Init+0x90>)
 80024da:	f00e fb43 	bl	8010b64 <HAL_UART_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80024e4:	f000 fa36 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_UART4_Init+0x90>)
 80024ec:	f00f fc49 	bl	8011d82 <HAL_UARTEx_SetTxFifoThreshold>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80024f6:	f000 fa2d 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024fa:	2100      	movs	r1, #0
 80024fc:	4808      	ldr	r0, [pc, #32]	; (8002520 <MX_UART4_Init+0x90>)
 80024fe:	f00f fc7e 	bl	8011dfe <HAL_UARTEx_SetRxFifoThreshold>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002508:	f000 fa24 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_UART4_Init+0x90>)
 800250e:	f00f fbff 	bl	8011d10 <HAL_UARTEx_DisableFifoMode>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002518:	f000 fa1c 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	240014a4 	.word	0x240014a4
 8002524:	40004c00 	.word	0x40004c00

08002528 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800252c:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 800252e:	4a23      	ldr	r2, [pc, #140]	; (80025bc <MX_USART6_UART_Init+0x94>)
 8002530:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002532:	4b21      	ldr	r3, [pc, #132]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002538:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002546:	4b1c      	ldr	r3, [pc, #112]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002570:	4811      	ldr	r0, [pc, #68]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002572:	f00e faf7 	bl	8010b64 <HAL_UART_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800257c:	f000 f9ea 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002580:	2100      	movs	r1, #0
 8002582:	480d      	ldr	r0, [pc, #52]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002584:	f00f fbfd 	bl	8011d82 <HAL_UARTEx_SetTxFifoThreshold>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800258e:	f000 f9e1 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002592:	2100      	movs	r1, #0
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 8002596:	f00f fc32 	bl	8011dfe <HAL_UARTEx_SetRxFifoThreshold>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80025a0:	f000 f9d8 	bl	8002954 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <MX_USART6_UART_Init+0x90>)
 80025a6:	f00f fbb3 	bl	8011d10 <HAL_UARTEx_DisableFifoMode>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f000 f9d0 	bl	8002954 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	24001538 	.word	0x24001538
 80025bc:	40011400 	.word	0x40011400

080025c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c6:	4b2d      	ldr	r3, [pc, #180]	; (800267c <MX_DMA_Init+0xbc>)
 80025c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <MX_DMA_Init+0xbc>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <MX_DMA_Init+0xbc>)
 80025d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <MX_DMA_Init+0xbc>)
 80025e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025ea:	4a24      	ldr	r2, [pc, #144]	; (800267c <MX_DMA_Init+0xbc>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <MX_DMA_Init+0xbc>)
 80025f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002602:	2200      	movs	r2, #0
 8002604:	2100      	movs	r1, #0
 8002606:	200b      	movs	r0, #11
 8002608:	f002 fec7 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800260c:	200b      	movs	r0, #11
 800260e:	f002 fede 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	2100      	movs	r1, #0
 8002616:	200c      	movs	r0, #12
 8002618:	f002 febf 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800261c:	200c      	movs	r0, #12
 800261e:	f002 fed6 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	200d      	movs	r0, #13
 8002628:	f002 feb7 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800262c:	200d      	movs	r0, #13
 800262e:	f002 fece 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	200e      	movs	r0, #14
 8002638:	f002 feaf 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800263c:	200e      	movs	r0, #14
 800263e:	f002 fec6 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	200f      	movs	r0, #15
 8002648:	f002 fea7 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800264c:	200f      	movs	r0, #15
 800264e:	f002 febe 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	2010      	movs	r0, #16
 8002658:	f002 fe9f 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800265c:	2010      	movs	r0, #16
 800265e:	f002 feb6 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002662:	2200      	movs	r2, #0
 8002664:	2100      	movs	r1, #0
 8002666:	2046      	movs	r0, #70	; 0x46
 8002668:	f002 fe97 	bl	800539a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800266c:	2046      	movs	r0, #70	; 0x46
 800266e:	f002 feae 	bl	80053ce <HAL_NVIC_EnableIRQ>

}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	58024400 	.word	0x58024400

08002680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	609a      	str	r2, [r3, #8]
 8002692:	60da      	str	r2, [r3, #12]
 8002694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002696:	4ba7      	ldr	r3, [pc, #668]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800269c:	4aa5      	ldr	r2, [pc, #660]	; (8002934 <MX_GPIO_Init+0x2b4>)
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026a6:	4ba3      	ldr	r3, [pc, #652]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b4:	4b9f      	ldr	r3, [pc, #636]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ba:	4a9e      	ldr	r2, [pc, #632]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026bc:	f043 0320 	orr.w	r3, r3, #32
 80026c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c4:	4b9b      	ldr	r3, [pc, #620]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b98      	ldr	r3, [pc, #608]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d8:	4a96      	ldr	r2, [pc, #600]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026e2:	4b94      	ldr	r3, [pc, #592]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	4b90      	ldr	r3, [pc, #576]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f6:	4a8f      	ldr	r2, [pc, #572]	; (8002934 <MX_GPIO_Init+0x2b4>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002700:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800270e:	4b89      	ldr	r3, [pc, #548]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002714:	4a87      	ldr	r2, [pc, #540]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271e:	4b85      	ldr	r3, [pc, #532]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <MX_GPIO_Init+0x2b4>)
 800272e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002732:	4a80      	ldr	r2, [pc, #512]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800273c:	4b7d      	ldr	r3, [pc, #500]	; (8002934 <MX_GPIO_Init+0x2b4>)
 800273e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800274a:	4b7a      	ldr	r3, [pc, #488]	; (8002934 <MX_GPIO_Init+0x2b4>)
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002750:	4a78      	ldr	r2, [pc, #480]	; (8002934 <MX_GPIO_Init+0x2b4>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800275a:	4b76      	ldr	r3, [pc, #472]	; (8002934 <MX_GPIO_Init+0x2b4>)
 800275c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002768:	2200      	movs	r2, #0
 800276a:	f241 5104 	movw	r1, #5380	; 0x1504
 800276e:	4872      	ldr	r0, [pc, #456]	; (8002938 <MX_GPIO_Init+0x2b8>)
 8002770:	f005 fc40 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002774:	2200      	movs	r2, #0
 8002776:	f248 0106 	movw	r1, #32774	; 0x8006
 800277a:	4870      	ldr	r0, [pc, #448]	; (800293c <MX_GPIO_Init+0x2bc>)
 800277c:	f005 fc3a 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2130      	movs	r1, #48	; 0x30
 8002784:	486e      	ldr	r0, [pc, #440]	; (8002940 <MX_GPIO_Init+0x2c0>)
 8002786:	f005 fc35 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 800278a:	2200      	movs	r2, #0
 800278c:	2103      	movs	r1, #3
 800278e:	486d      	ldr	r0, [pc, #436]	; (8002944 <MX_GPIO_Init+0x2c4>)
 8002790:	f005 fc30 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002794:	2200      	movs	r2, #0
 8002796:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800279a:	486b      	ldr	r0, [pc, #428]	; (8002948 <MX_GPIO_Init+0x2c8>)
 800279c:	f005 fc2a 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80027a0:	2200      	movs	r2, #0
 80027a2:	210e      	movs	r1, #14
 80027a4:	4869      	ldr	r0, [pc, #420]	; (800294c <MX_GPIO_Init+0x2cc>)
 80027a6:	f005 fc25 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80027aa:	2201      	movs	r2, #1
 80027ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80027b0:	4867      	ldr	r0, [pc, #412]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80027b2:	f005 fc1f 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2101      	movs	r1, #1
 80027ba:	4865      	ldr	r0, [pc, #404]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80027bc:	f005 fc1a 	bl	8007ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80027c0:	f241 5304 	movw	r3, #5380	; 0x1504
 80027c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	4857      	ldr	r0, [pc, #348]	; (8002938 <MX_GPIO_Init+0x2b8>)
 80027da:	f005 fa4b 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80027de:	f248 0306 	movw	r3, #32774	; 0x8006
 80027e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e4:	2301      	movs	r3, #1
 80027e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	4619      	mov	r1, r3
 80027f6:	4851      	ldr	r0, [pc, #324]	; (800293c <MX_GPIO_Init+0x2bc>)
 80027f8:	f005 fa3c 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027fc:	2330      	movs	r3, #48	; 0x30
 80027fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002800:	2301      	movs	r3, #1
 8002802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002808:	2300      	movs	r3, #0
 800280a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	484b      	ldr	r0, [pc, #300]	; (8002940 <MX_GPIO_Init+0x2c0>)
 8002814:	f005 fa2e 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002818:	2303      	movs	r3, #3
 800281a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800281c:	2301      	movs	r3, #1
 800281e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002828:	f107 031c 	add.w	r3, r7, #28
 800282c:	4619      	mov	r1, r3
 800282e:	4845      	ldr	r0, [pc, #276]	; (8002944 <MX_GPIO_Init+0x2c4>)
 8002830:	f005 fa20 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002834:	2304      	movs	r3, #4
 8002836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283c:	2301      	movs	r3, #1
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	483f      	ldr	r0, [pc, #252]	; (8002944 <MX_GPIO_Init+0x2c4>)
 8002848:	f005 fa14 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800284c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002852:	2301      	movs	r3, #1
 8002854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002856:	2300      	movs	r3, #0
 8002858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285a:	2300      	movs	r3, #0
 800285c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800285e:	f107 031c 	add.w	r3, r7, #28
 8002862:	4619      	mov	r1, r3
 8002864:	4838      	ldr	r0, [pc, #224]	; (8002948 <MX_GPIO_Init+0x2c8>)
 8002866:	f005 fa05 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800286a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800286e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002870:	2300      	movs	r3, #0
 8002872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002874:	2301      	movs	r3, #1
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002878:	f107 031c 	add.w	r3, r7, #28
 800287c:	4619      	mov	r1, r3
 800287e:	4832      	ldr	r0, [pc, #200]	; (8002948 <MX_GPIO_Init+0x2c8>)
 8002880:	f005 f9f8 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002884:	2301      	movs	r3, #1
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288c:	2301      	movs	r3, #1
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	482d      	ldr	r0, [pc, #180]	; (800294c <MX_GPIO_Init+0x2cc>)
 8002898:	f005 f9ec 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800289c:	230e      	movs	r3, #14
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a0:	2301      	movs	r3, #1
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	4826      	ldr	r0, [pc, #152]	; (800294c <MX_GPIO_Init+0x2cc>)
 80028b4:	f005 f9de 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80028b8:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028c2:	2301      	movs	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	481a      	ldr	r0, [pc, #104]	; (8002938 <MX_GPIO_Init+0x2b8>)
 80028ce:	f005 f9d1 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80028d2:	f240 7301 	movw	r3, #1793	; 0x701
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028d8:	2301      	movs	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4819      	ldr	r0, [pc, #100]	; (8002950 <MX_GPIO_Init+0x2d0>)
 80028ec:	f005 f9c2 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80028f0:	2310      	movs	r3, #16
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028f4:	2300      	movs	r3, #0
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <MX_GPIO_Init+0x2cc>)
 8002904:	f005 f9b6 	bl	8007c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800290c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290e:	2302      	movs	r3, #2
 8002910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002916:	2300      	movs	r3, #0
 8002918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800291a:	2300      	movs	r3, #0
 800291c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_GPIO_Init+0x2bc>)
 8002926:	f005 f9a5 	bl	8007c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800292a:	bf00      	nop
 800292c:	3730      	adds	r7, #48	; 0x30
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	58024400 	.word	0x58024400
 8002938:	58021000 	.word	0x58021000
 800293c:	58020000 	.word	0x58020000
 8002940:	58020800 	.word	0x58020800
 8002944:	58020400 	.word	0x58020400
 8002948:	58021400 	.word	0x58021400
 800294c:	58021800 	.word	0x58021800
 8002950:	58020c00 	.word	0x58020c00

08002954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002958:	b672      	cpsid	i
}
 800295a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800295c:	e7fe      	b.n	800295c <Error_Handler+0x8>
	...

08002960 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_MspInit+0x30>)
 8002968:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800296c:	4a08      	ldr	r2, [pc, #32]	; (8002990 <HAL_MspInit+0x30>)
 800296e:	f043 0302 	orr.w	r3, r3, #2
 8002972:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_MspInit+0x30>)
 8002978:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	58024400 	.word	0x58024400

08002994 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08c      	sub	sp, #48	; 0x30
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
 80029aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5d      	ldr	r2, [pc, #372]	; (8002b28 <HAL_ADC_MspInit+0x194>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d159      	bne.n	8002a6a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029b6:	4b5d      	ldr	r3, [pc, #372]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029bc:	4a5b      	ldr	r2, [pc, #364]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029c6:	4b59      	ldr	r3, [pc, #356]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029d4:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029da:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e4:	4b51      	ldr	r3, [pc, #324]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 80029e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	617b      	str	r3, [r7, #20]
 80029f0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029fe:	f107 031c 	add.w	r3, r7, #28
 8002a02:	4619      	mov	r1, r3
 8002a04:	484a      	ldr	r0, [pc, #296]	; (8002b30 <HAL_ADC_MspInit+0x19c>)
 8002a06:	f005 f935 	bl	8007c74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a0c:	4a4a      	ldr	r2, [pc, #296]	; (8002b38 <HAL_ADC_MspInit+0x1a4>)
 8002a0e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002a10:	4b48      	ldr	r3, [pc, #288]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a12:	2209      	movs	r2, #9
 8002a14:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a1c:	4b45      	ldr	r3, [pc, #276]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a22:	4b44      	ldr	r3, [pc, #272]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a2a:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a40:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a46:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a4c:	4839      	ldr	r0, [pc, #228]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a4e:	f002 fcd9 	bl	8005404 <HAL_DMA_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a58:	f7ff ff7c 	bl	8002954 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a60:	659a      	str	r2, [r3, #88]	; 0x58
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <HAL_ADC_MspInit+0x1a0>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a68:	e059      	b.n	8002b1e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a33      	ldr	r2, [pc, #204]	; (8002b3c <HAL_ADC_MspInit+0x1a8>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d154      	bne.n	8002b1e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a74:	4b2d      	ldr	r3, [pc, #180]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002a7c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a84:	4b29      	ldr	r3, [pc, #164]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	4b26      	ldr	r3, [pc, #152]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_ADC_MspInit+0x198>)
 8002aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002ab0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002ab4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002ab8:	f001 f80e 	bl	8003ad8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002abc:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002abe:	4a21      	ldr	r2, [pc, #132]	; (8002b44 <HAL_ADC_MspInit+0x1b0>)
 8002ac0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002ac4:	2273      	movs	r2, #115	; 0x73
 8002ac6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac8:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002ad6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ada:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ae4:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aea:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002aec:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002aee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002af4:	4b12      	ldr	r3, [pc, #72]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002af6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002afa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002afc:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002b02:	480f      	ldr	r0, [pc, #60]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002b04:	f002 fc7e 	bl	8005404 <HAL_DMA_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002b0e:	f7ff ff21 	bl	8002954 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58
 8002b18:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_ADC_MspInit+0x1ac>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b1e:	bf00      	nop
 8002b20:	3730      	adds	r7, #48	; 0x30
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	58024400 	.word	0x58024400
 8002b30:	58020800 	.word	0x58020800
 8002b34:	24000cd8 	.word	0x24000cd8
 8002b38:	40020088 	.word	0x40020088
 8002b3c:	58026000 	.word	0x58026000
 8002b40:	24000d50 	.word	0x24000d50
 8002b44:	400204b8 	.word	0x400204b8

08002b48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b0b8      	sub	sp, #224	; 0xe0
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b60:	f107 0310 	add.w	r3, r7, #16
 8002b64:	22b8      	movs	r2, #184	; 0xb8
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f014 fad9 	bl	8017120 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a26      	ldr	r2, [pc, #152]	; (8002c0c <HAL_FDCAN_MspInit+0xc4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d145      	bne.n	8002c04 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b88:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b8a:	f107 0310 	add.w	r3, r7, #16
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f007 fe5e 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002b9a:	f7ff fedb 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002ba0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ba4:	4a1a      	ldr	r2, [pc, #104]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002baa:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002bb0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002bc4:	f043 0320 	orr.w	r3, r3, #32
 8002bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_FDCAN_MspInit+0xc8>)
 8002bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	60bb      	str	r3, [r7, #8]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bda:	23c0      	movs	r3, #192	; 0xc0
 8002bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bec:	2300      	movs	r3, #0
 8002bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <HAL_FDCAN_MspInit+0xcc>)
 8002c00:	f005 f838 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002c04:	bf00      	nop
 8002c06:	37e0      	adds	r7, #224	; 0xe0
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	4000d400 	.word	0x4000d400
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58021400 	.word	0x58021400

08002c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0b8      	sub	sp, #224	; 0xe0
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c30:	f107 0310 	add.w	r3, r7, #16
 8002c34:	22b8      	movs	r2, #184	; 0xb8
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f014 fa71 	bl	8017120 <memset>
  if(hi2c->Instance==I2C2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <HAL_I2C_MspInit+0xd4>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d14d      	bne.n	8002ce4 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c48:	f04f 0208 	mov.w	r2, #8
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f007 fdf6 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c6a:	f7ff fe73 	bl	8002954 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c74:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002c76:	f043 0320 	orr.w	r3, r3, #32
 8002c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c92:	2312      	movs	r3, #18
 8002c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002caa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4810      	ldr	r0, [pc, #64]	; (8002cf4 <HAL_I2C_MspInit+0xdc>)
 8002cb2:	f004 ffdf 	bl	8007c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002cb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_I2C_MspInit+0xd8>)
 8002cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2021      	movs	r0, #33	; 0x21
 8002cda:	f002 fb5e 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002cde:	2021      	movs	r0, #33	; 0x21
 8002ce0:	f002 fb75 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ce4:	bf00      	nop
 8002ce6:	37e0      	adds	r7, #224	; 0xe0
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40005800 	.word	0x40005800
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	58021400 	.word	0x58021400

08002cf8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b0ba      	sub	sp, #232	; 0xe8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 0318 	add.w	r3, r7, #24
 8002d14:	22b8      	movs	r2, #184	; 0xb8
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f014 fa01 	bl	8017120 <memset>
  if(hsd->Instance==SDMMC2)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a5d      	ldr	r2, [pc, #372]	; (8002e98 <HAL_SD_MspInit+0x1a0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	f040 80b3 	bne.w	8002e90 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3a:	f107 0318 	add.w	r3, r7, #24
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f007 fd86 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d4a:	f7ff fe03 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d4e:	4b53      	ldr	r3, [pc, #332]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d54:	4a51      	ldr	r2, [pc, #324]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d5a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d60:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d72:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d90:	4a42      	ldr	r2, [pc, #264]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9a:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_SD_MspInit+0x1a4>)
 8002d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dc0:	230b      	movs	r3, #11
 8002dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dc6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4834      	ldr	r0, [pc, #208]	; (8002ea0 <HAL_SD_MspInit+0x1a8>)
 8002dce:	f004 ff51 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de4:	2303      	movs	r3, #3
 8002de6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dea:	230b      	movs	r3, #11
 8002dec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002df0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002df4:	4619      	mov	r1, r3
 8002df6:	482a      	ldr	r0, [pc, #168]	; (8002ea0 <HAL_SD_MspInit+0x1a8>)
 8002df8:	f004 ff3c 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e16:	230b      	movs	r3, #11
 8002e18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e1c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4820      	ldr	r0, [pc, #128]	; (8002ea4 <HAL_SD_MspInit+0x1ac>)
 8002e24:	f004 ff26 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e42:	230b      	movs	r3, #11
 8002e44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e48:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	4815      	ldr	r0, [pc, #84]	; (8002ea4 <HAL_SD_MspInit+0x1ac>)
 8002e50:	f004 ff10 	bl	8007c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e54:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e6e:	230a      	movs	r3, #10
 8002e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e74:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	480a      	ldr	r0, [pc, #40]	; (8002ea4 <HAL_SD_MspInit+0x1ac>)
 8002e7c:	f004 fefa 	bl	8007c74 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2100      	movs	r1, #0
 8002e84:	207c      	movs	r0, #124	; 0x7c
 8002e86:	f002 fa88 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e8a:	207c      	movs	r0, #124	; 0x7c
 8002e8c:	f002 fa9f 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e90:	bf00      	nop
 8002e92:	37e8      	adds	r7, #232	; 0xe8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	48022400 	.word	0x48022400
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	58020c00 	.word	0x58020c00
 8002ea4:	58021800 	.word	0x58021800

08002ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08e      	sub	sp, #56	; 0x38
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4f      	ldr	r2, [pc, #316]	; (8003004 <HAL_SPI_MspInit+0x15c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12e      	bne.n	8002f28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eca:	4b4f      	ldr	r3, [pc, #316]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ed0:	4a4d      	ldr	r2, [pc, #308]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ed6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eda:	4b4b      	ldr	r3, [pc, #300]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee8:	4b47      	ldr	r3, [pc, #284]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eee:	4a46      	ldr	r2, [pc, #280]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef8:	4b43      	ldr	r3, [pc, #268]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002f06:	23e0      	movs	r3, #224	; 0xe0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f16:	2305      	movs	r3, #5
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1e:	4619      	mov	r1, r3
 8002f20:	483a      	ldr	r0, [pc, #232]	; (800300c <HAL_SPI_MspInit+0x164>)
 8002f22:	f004 fea7 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f26:	e068      	b.n	8002ffa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a38      	ldr	r2, [pc, #224]	; (8003010 <HAL_SPI_MspInit+0x168>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d12f      	bne.n	8002f92 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f32:	4b35      	ldr	r3, [pc, #212]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f38:	4a33      	ldr	r2, [pc, #204]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f56:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f60:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f6e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f80:	2305      	movs	r3, #5
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4822      	ldr	r0, [pc, #136]	; (8003014 <HAL_SPI_MspInit+0x16c>)
 8002f8c:	f004 fe72 	bl	8007c74 <HAL_GPIO_Init>
}
 8002f90:	e033      	b.n	8002ffa <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a20      	ldr	r2, [pc, #128]	; (8003018 <HAL_SPI_MspInit+0x170>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12e      	bne.n	8002ffa <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fac:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc0:	4a11      	ldr	r2, [pc, #68]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fca:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <HAL_SPI_MspInit+0x160>)
 8002fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fea:	2306      	movs	r3, #6
 8002fec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <HAL_SPI_MspInit+0x174>)
 8002ff6:	f004 fe3d 	bl	8007c74 <HAL_GPIO_Init>
}
 8002ffa:	bf00      	nop
 8002ffc:	3738      	adds	r7, #56	; 0x38
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40013000 	.word	0x40013000
 8003008:	58024400 	.word	0x58024400
 800300c:	58020000 	.word	0x58020000
 8003010:	40003800 	.word	0x40003800
 8003014:	58020400 	.word	0x58020400
 8003018:	40003c00 	.word	0x40003c00
 800301c:	58020800 	.word	0x58020800

08003020 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003028:	f107 031c 	add.w	r3, r7, #28
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003040:	d15d      	bne.n	80030fe <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003042:	4b8e      	ldr	r3, [pc, #568]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003048:	4a8c      	ldr	r2, [pc, #560]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003052:	4b8a      	ldr	r3, [pc, #552]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	61bb      	str	r3, [r7, #24]
 800305e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003060:	4b86      	ldr	r3, [pc, #536]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003066:	4a85      	ldr	r2, [pc, #532]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003070:	4b82      	ldr	r3, [pc, #520]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800308e:	2301      	movs	r3, #1
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	4879      	ldr	r0, [pc, #484]	; (8003280 <HAL_TIM_PWM_MspInit+0x260>)
 800309a:	f004 fdeb 	bl	8007c74 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800309e:	4b79      	ldr	r3, [pc, #484]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030a0:	4a79      	ldr	r2, [pc, #484]	; (8003288 <HAL_TIM_PWM_MspInit+0x268>)
 80030a2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80030a4:	4b77      	ldr	r3, [pc, #476]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030a6:	2214      	movs	r2, #20
 80030a8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030aa:	4b76      	ldr	r3, [pc, #472]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030ac:	2240      	movs	r2, #64	; 0x40
 80030ae:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b0:	4b74      	ldr	r3, [pc, #464]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80030b6:	4b73      	ldr	r3, [pc, #460]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030bc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c6:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030cc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030d4:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030da:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80030e0:	4868      	ldr	r0, [pc, #416]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030e2:	f002 f98f 	bl	8005404 <HAL_DMA_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80030ec:	f7ff fc32 	bl	8002954 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a64      	ldr	r2, [pc, #400]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f6:	4a63      	ldr	r2, [pc, #396]	; (8003284 <HAL_TIM_PWM_MspInit+0x264>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030fc:	e119      	b.n	8003332 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_TIM_PWM_MspInit+0x26c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d16d      	bne.n	80031e4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003108:	4b5c      	ldr	r3, [pc, #368]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 800310a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800310e:	4a5b      	ldr	r2, [pc, #364]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003118:	4b58      	ldr	r3, [pc, #352]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 800311a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	613b      	str	r3, [r7, #16]
 8003124:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003126:	4b5a      	ldr	r3, [pc, #360]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003128:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_TIM_PWM_MspInit+0x274>)
 800312a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 800312c:	4b58      	ldr	r3, [pc, #352]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 800312e:	2218      	movs	r2, #24
 8003130:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003132:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003138:	4b55      	ldr	r3, [pc, #340]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 800313a:	2200      	movs	r2, #0
 800313c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003144:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003146:	4b52      	ldr	r3, [pc, #328]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800314e:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003150:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003154:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003156:	4b4e      	ldr	r3, [pc, #312]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003158:	2200      	movs	r2, #0
 800315a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800315c:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 800315e:	2200      	movs	r2, #0
 8003160:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003162:	4b4b      	ldr	r3, [pc, #300]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003168:	4849      	ldr	r0, [pc, #292]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 800316a:	f002 f94b 	bl	8005404 <HAL_DMA_Init>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003174:	f7ff fbee 	bl	8002954 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a45      	ldr	r2, [pc, #276]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 800317c:	629a      	str	r2, [r3, #40]	; 0x28
 800317e:	4a44      	ldr	r2, [pc, #272]	; (8003290 <HAL_TIM_PWM_MspInit+0x270>)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 8003186:	4a45      	ldr	r2, [pc, #276]	; (800329c <HAL_TIM_PWM_MspInit+0x27c>)
 8003188:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 800318c:	2217      	movs	r2, #23
 800318e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003190:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 8003192:	2240      	movs	r2, #64	; 0x40
 8003194:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003196:	4b40      	ldr	r3, [pc, #256]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800319c:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 800319e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031a2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031a4:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031aa:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031ac:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031b2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031bc:	2200      	movs	r2, #0
 80031be:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031c0:	4b35      	ldr	r3, [pc, #212]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80031c6:	4834      	ldr	r0, [pc, #208]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031c8:	f002 f91c 	bl	8005404 <HAL_DMA_Init>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80031d2:	f7ff fbbf 	bl	8002954 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031da:	625a      	str	r2, [r3, #36]	; 0x24
 80031dc:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <HAL_TIM_PWM_MspInit+0x278>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031e2:	e0a6      	b.n	8003332 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_TIM_PWM_MspInit+0x280>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d15e      	bne.n	80032ac <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031ee:	4b23      	ldr	r3, [pc, #140]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 80031f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f4:	4a21      	ldr	r2, [pc, #132]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 80031f6:	f043 0304 	orr.w	r3, r3, #4
 80031fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031fe:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_TIM_PWM_MspInit+0x25c>)
 8003200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_TIM_PWM_MspInit+0x288>)
 8003210:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8003212:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003214:	221f      	movs	r2, #31
 8003216:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003218:	4b22      	ldr	r3, [pc, #136]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 800321a:	2240      	movs	r2, #64	; 0x40
 800321c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800321e:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003220:	2200      	movs	r2, #0
 8003222:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800322a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 800322e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003232:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800323a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 800323e:	2200      	movs	r2, #0
 8003240:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003242:	4b18      	ldr	r3, [pc, #96]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003244:	2200      	movs	r2, #0
 8003246:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003248:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 800324a:	2200      	movs	r2, #0
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800324e:	4815      	ldr	r0, [pc, #84]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003250:	f002 f8d8 	bl	8005404 <HAL_DMA_Init>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800325a:	f7ff fb7b 	bl	8002954 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
 8003264:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <HAL_TIM_PWM_MspInit+0x284>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2100      	movs	r1, #0
 800326e:	201e      	movs	r0, #30
 8003270:	f002 f893 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003274:	201e      	movs	r0, #30
 8003276:	f002 f8aa 	bl	80053ce <HAL_NVIC_EnableIRQ>
}
 800327a:	e05a      	b.n	8003332 <HAL_TIM_PWM_MspInit+0x312>
 800327c:	58024400 	.word	0x58024400
 8003280:	58020000 	.word	0x58020000
 8003284:	2400124c 	.word	0x2400124c
 8003288:	40020028 	.word	0x40020028
 800328c:	40000400 	.word	0x40000400
 8003290:	240012c4 	.word	0x240012c4
 8003294:	40020058 	.word	0x40020058
 8003298:	2400133c 	.word	0x2400133c
 800329c:	40020070 	.word	0x40020070
 80032a0:	40000800 	.word	0x40000800
 80032a4:	240013b4 	.word	0x240013b4
 80032a8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a22      	ldr	r2, [pc, #136]	; (800333c <HAL_TIM_PWM_MspInit+0x31c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d13d      	bne.n	8003332 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_TIM_PWM_MspInit+0x320>)
 80032b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032bc:	4a20      	ldr	r2, [pc, #128]	; (8003340 <HAL_TIM_PWM_MspInit+0x320>)
 80032be:	f043 0308 	orr.w	r3, r3, #8
 80032c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c6:	4b1e      	ldr	r3, [pc, #120]	; (8003340 <HAL_TIM_PWM_MspInit+0x320>)
 80032c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032cc:	f003 0308 	and.w	r3, r3, #8
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_TIM_PWM_MspInit+0x328>)
 80032d8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80032da:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032dc:	223a      	movs	r2, #58	; 0x3a
 80032de:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032e2:	2240      	movs	r2, #64	; 0x40
 80032e4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032f2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032f4:	4b13      	ldr	r3, [pc, #76]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032fa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032fc:	4b11      	ldr	r3, [pc, #68]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 80032fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003302:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003304:	4b0f      	ldr	r3, [pc, #60]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800330a:	4b0e      	ldr	r3, [pc, #56]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 800330c:	2200      	movs	r2, #0
 800330e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 8003312:	2200      	movs	r2, #0
 8003314:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003316:	480b      	ldr	r0, [pc, #44]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 8003318:	f002 f874 	bl	8005404 <HAL_DMA_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003322:	f7ff fb17 	bl	8002954 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a06      	ldr	r2, [pc, #24]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 800332a:	631a      	str	r2, [r3, #48]	; 0x30
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <HAL_TIM_PWM_MspInit+0x324>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003332:	bf00      	nop
 8003334:	3730      	adds	r7, #48	; 0x30
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40000c00 	.word	0x40000c00
 8003340:	58024400 	.word	0x58024400
 8003344:	2400142c 	.word	0x2400142c
 8003348:	40020040 	.word	0x40020040

0800334c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a0b      	ldr	r2, [pc, #44]	; (8003388 <HAL_TIM_Base_MspInit+0x3c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d10e      	bne.n	800337c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800335e:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_TIM_Base_MspInit+0x40>)
 8003360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003364:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_TIM_Base_MspInit+0x40>)
 8003366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_TIM_Base_MspInit+0x40>)
 8003370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40001c00 	.word	0x40001c00
 800338c:	58024400 	.word	0x58024400

08003390 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003398:	f107 031c 	add.w	r3, r7, #28
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	605a      	str	r2, [r3, #4]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	60da      	str	r2, [r3, #12]
 80033a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b0:	d120      	bne.n	80033f4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033b2:	4b52      	ldr	r3, [pc, #328]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b8:	4a50      	ldr	r2, [pc, #320]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c2:	4b4e      	ldr	r3, [pc, #312]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80033c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033da:	2302      	movs	r3, #2
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4844      	ldr	r0, [pc, #272]	; (8003500 <HAL_TIM_MspPostInit+0x170>)
 80033ee:	f004 fc41 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033f2:	e07f      	b.n	80034f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a42      	ldr	r2, [pc, #264]	; (8003504 <HAL_TIM_MspPostInit+0x174>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d11f      	bne.n	800343e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fe:	4b3f      	ldr	r3, [pc, #252]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 8003400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003404:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 8003406:	f043 0302 	orr.w	r3, r3, #2
 800340a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 8003410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	617b      	str	r3, [r7, #20]
 800341a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800341c:	2330      	movs	r3, #48	; 0x30
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003424:	2302      	movs	r3, #2
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800342c:	2302      	movs	r3, #2
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	4619      	mov	r1, r3
 8003436:	4832      	ldr	r0, [pc, #200]	; (8003500 <HAL_TIM_MspPostInit+0x170>)
 8003438:	f004 fc1c 	bl	8007c74 <HAL_GPIO_Init>
}
 800343c:	e05a      	b.n	80034f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a31      	ldr	r2, [pc, #196]	; (8003508 <HAL_TIM_MspPostInit+0x178>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d131      	bne.n	80034ac <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003448:	4b2c      	ldr	r3, [pc, #176]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 8003450:	f043 0308 	orr.w	r3, r3, #8
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003466:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800346a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003478:	2302      	movs	r3, #2
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800347c:	f107 031c 	add.w	r3, r7, #28
 8003480:	4619      	mov	r1, r3
 8003482:	4822      	ldr	r0, [pc, #136]	; (800350c <HAL_TIM_MspPostInit+0x17c>)
 8003484:	f004 fbf6 	bl	8007c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003488:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800348c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348e:	2302      	movs	r3, #2
 8003490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003492:	2302      	movs	r3, #2
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003496:	2300      	movs	r3, #0
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800349a:	2302      	movs	r3, #2
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800349e:	f107 031c 	add.w	r3, r7, #28
 80034a2:	4619      	mov	r1, r3
 80034a4:	4819      	ldr	r0, [pc, #100]	; (800350c <HAL_TIM_MspPostInit+0x17c>)
 80034a6:	f004 fbe5 	bl	8007c74 <HAL_GPIO_Init>
}
 80034aa:	e023      	b.n	80034f4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a17      	ldr	r2, [pc, #92]	; (8003510 <HAL_TIM_MspPostInit+0x180>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d11e      	bne.n	80034f4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80034b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034c6:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <HAL_TIM_MspPostInit+0x16c>)
 80034c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034d4:	2308      	movs	r3, #8
 80034d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d8:	2302      	movs	r3, #2
 80034da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034dc:	2302      	movs	r3, #2
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e0:	2300      	movs	r3, #0
 80034e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034e4:	2302      	movs	r3, #2
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4809      	ldr	r0, [pc, #36]	; (8003514 <HAL_TIM_MspPostInit+0x184>)
 80034f0:	f004 fbc0 	bl	8007c74 <HAL_GPIO_Init>
}
 80034f4:	bf00      	nop
 80034f6:	3730      	adds	r7, #48	; 0x30
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58024400 	.word	0x58024400
 8003500:	58020400 	.word	0x58020400
 8003504:	40000400 	.word	0x40000400
 8003508:	40000800 	.word	0x40000800
 800350c:	58020c00 	.word	0x58020c00
 8003510:	40000c00 	.word	0x40000c00
 8003514:	58020000 	.word	0x58020000

08003518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b0ba      	sub	sp, #232	; 0xe8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003530:	f107 0318 	add.w	r3, r7, #24
 8003534:	22b8      	movs	r2, #184	; 0xb8
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f013 fdf1 	bl	8017120 <memset>
  if(huart->Instance==UART4)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4d      	ldr	r2, [pc, #308]	; (8003678 <HAL_UART_MspInit+0x160>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d147      	bne.n	80035d8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003548:	f04f 0202 	mov.w	r2, #2
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355a:	f107 0318 	add.w	r3, r7, #24
 800355e:	4618      	mov	r0, r3
 8003560:	f007 f976 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800356a:	f7ff f9f3 	bl	8002954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800356e:	4b43      	ldr	r3, [pc, #268]	; (800367c <HAL_UART_MspInit+0x164>)
 8003570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003574:	4a41      	ldr	r2, [pc, #260]	; (800367c <HAL_UART_MspInit+0x164>)
 8003576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800357a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <HAL_UART_MspInit+0x164>)
 8003580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_UART_MspInit+0x164>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003592:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_UART_MspInit+0x164>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800359c:	4b37      	ldr	r3, [pc, #220]	; (800367c <HAL_UART_MspInit+0x164>)
 800359e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b2:	2302      	movs	r3, #2
 80035b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	2300      	movs	r3, #0
 80035c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80035c4:	2308      	movs	r3, #8
 80035c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035ce:	4619      	mov	r1, r3
 80035d0:	482b      	ldr	r0, [pc, #172]	; (8003680 <HAL_UART_MspInit+0x168>)
 80035d2:	f004 fb4f 	bl	8007c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035d6:	e04a      	b.n	800366e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_UART_MspInit+0x16c>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d145      	bne.n	800366e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035e2:	f04f 0201 	mov.w	r2, #1
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035f4:	f107 0318 	add.w	r3, r7, #24
 80035f8:	4618      	mov	r0, r3
 80035fa:	f007 f929 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d001      	beq.n	8003608 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003604:	f7ff f9a6 	bl	8002954 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003608:	4b1c      	ldr	r3, [pc, #112]	; (800367c <HAL_UART_MspInit+0x164>)
 800360a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800360e:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_UART_MspInit+0x164>)
 8003610:	f043 0320 	orr.w	r3, r3, #32
 8003614:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003618:	4b18      	ldr	r3, [pc, #96]	; (800367c <HAL_UART_MspInit+0x164>)
 800361a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003626:	4b15      	ldr	r3, [pc, #84]	; (800367c <HAL_UART_MspInit+0x164>)
 8003628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <HAL_UART_MspInit+0x164>)
 800362e:	f043 0304 	orr.w	r3, r3, #4
 8003632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <HAL_UART_MspInit+0x164>)
 8003638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800363c:	f003 0304 	and.w	r3, r3, #4
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003644:	23c0      	movs	r3, #192	; 0xc0
 8003646:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003650:	2300      	movs	r3, #0
 8003652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800365c:	2307      	movs	r3, #7
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003662:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003666:	4619      	mov	r1, r3
 8003668:	4807      	ldr	r0, [pc, #28]	; (8003688 <HAL_UART_MspInit+0x170>)
 800366a:	f004 fb03 	bl	8007c74 <HAL_GPIO_Init>
}
 800366e:	bf00      	nop
 8003670:	37e8      	adds	r7, #232	; 0xe8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40004c00 	.word	0x40004c00
 800367c:	58024400 	.word	0x58024400
 8003680:	58020400 	.word	0x58020400
 8003684:	40011400 	.word	0x40011400
 8003688:	58020800 	.word	0x58020800

0800368c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <NMI_Handler+0x4>

08003692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003696:	e7fe      	b.n	8003696 <HardFault_Handler+0x4>

08003698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800369c:	e7fe      	b.n	800369c <MemManage_Handler+0x4>

0800369e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a2:	e7fe      	b.n	80036a2 <BusFault_Handler+0x4>

080036a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a8:	e7fe      	b.n	80036a8 <UsageFault_Handler+0x4>

080036aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d8:	f000 f9ba 	bl	8003a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036dc:	bf00      	nop
 80036de:	bd80      	pop	{r7, pc}

080036e0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <DMA1_Stream0_IRQHandler+0x10>)
 80036e6:	f002 fc4f 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	240013b4 	.word	0x240013b4

080036f4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <DMA1_Stream1_IRQHandler+0x10>)
 80036fa:	f002 fc45 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	2400124c 	.word	0x2400124c

08003708 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <DMA1_Stream2_IRQHandler+0x10>)
 800370e:	f002 fc3b 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2400142c 	.word	0x2400142c

0800371c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <DMA1_Stream3_IRQHandler+0x10>)
 8003722:	f002 fc31 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	240012c4 	.word	0x240012c4

08003730 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <DMA1_Stream4_IRQHandler+0x10>)
 8003736:	f002 fc27 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2400133c 	.word	0x2400133c

08003744 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <DMA1_Stream5_IRQHandler+0x10>)
 800374a:	f002 fc1d 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	24000cd8 	.word	0x24000cd8

08003758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <TIM4_IRQHandler+0x10>)
 800375e:	f00c fa59 	bl	800fc14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	24001168 	.word	0x24001168

0800376c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <I2C2_EV_IRQHandler+0x10>)
 8003772:	f004 fce9 	bl	8008148 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	24000e68 	.word	0x24000e68

08003780 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <DMA2_Stream7_IRQHandler+0x10>)
 8003786:	f002 fbff 	bl	8005f88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	24000d50 	.word	0x24000d50

08003794 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <OTG_HS_IRQHandler+0x10>)
 800379a:	f004 fedf 	bl	800855c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	24002ad0 	.word	0x24002ad0

080037a8 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <SDMMC2_IRQHandler+0x10>)
 80037ae:	f009 fea5 	bl	800d4fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	24000ebc 	.word	0x24000ebc

080037bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037ec:	f013 fca0 	bl	8017130 <__errno>
 80037f0:	4603      	mov	r3, r0
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <_sbrk+0x64>)
 800380c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	24050000 	.word	0x24050000
 800381c:	00000800 	.word	0x00000800
 8003820:	240015cc 	.word	0x240015cc
 8003824:	24003348 	.word	0x24003348

08003828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <SystemInit+0xd0>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	4a31      	ldr	r2, [pc, #196]	; (80038f8 <SystemInit+0xd0>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800383c:	4b2f      	ldr	r3, [pc, #188]	; (80038fc <SystemInit+0xd4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	2b06      	cmp	r3, #6
 8003846:	d807      	bhi.n	8003858 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003848:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <SystemInit+0xd4>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	4a2a      	ldr	r2, [pc, #168]	; (80038fc <SystemInit+0xd4>)
 8003852:	f043 0307 	orr.w	r3, r3, #7
 8003856:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003858:	4b29      	ldr	r3, [pc, #164]	; (8003900 <SystemInit+0xd8>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <SystemInit+0xd8>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <SystemInit+0xd8>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <SystemInit+0xd8>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4924      	ldr	r1, [pc, #144]	; (8003900 <SystemInit+0xd8>)
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <SystemInit+0xdc>)
 8003872:	4013      	ands	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003876:	4b21      	ldr	r3, [pc, #132]	; (80038fc <SystemInit+0xd4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003882:	4b1e      	ldr	r3, [pc, #120]	; (80038fc <SystemInit+0xd4>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 030f 	bic.w	r3, r3, #15
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <SystemInit+0xd4>)
 800388c:	f043 0307 	orr.w	r3, r3, #7
 8003890:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <SystemInit+0xd8>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <SystemInit+0xd8>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800389e:	4b18      	ldr	r3, [pc, #96]	; (8003900 <SystemInit+0xd8>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <SystemInit+0xd8>)
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <SystemInit+0xe0>)
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <SystemInit+0xd8>)
 80038ac:	4a17      	ldr	r2, [pc, #92]	; (800390c <SystemInit+0xe4>)
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80038b0:	4b13      	ldr	r3, [pc, #76]	; (8003900 <SystemInit+0xd8>)
 80038b2:	4a17      	ldr	r2, [pc, #92]	; (8003910 <SystemInit+0xe8>)
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <SystemInit+0xd8>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <SystemInit+0xd8>)
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <SystemInit+0xe8>)
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <SystemInit+0xd8>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <SystemInit+0xd8>)
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <SystemInit+0xe8>)
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <SystemInit+0xd8>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <SystemInit+0xd8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <SystemInit+0xd8>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <SystemInit+0xd8>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <SystemInit+0xec>)
 80038e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038ee:	bf00      	nop
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00
 80038fc:	52002000 	.word	0x52002000
 8003900:	58024400 	.word	0x58024400
 8003904:	eaf6ed7f 	.word	0xeaf6ed7f
 8003908:	02020200 	.word	0x02020200
 800390c:	01ff0000 	.word	0x01ff0000
 8003910:	01010280 	.word	0x01010280
 8003914:	52004000 	.word	0x52004000

08003918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003950 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800391c:	f7ff ff84 	bl	8003828 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003920:	480c      	ldr	r0, [pc, #48]	; (8003954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003922:	490d      	ldr	r1, [pc, #52]	; (8003958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003924:	4a0d      	ldr	r2, [pc, #52]	; (800395c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003928:	e002      	b.n	8003930 <LoopCopyDataInit>

0800392a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800392a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800392c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800392e:	3304      	adds	r3, #4

08003930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003934:	d3f9      	bcc.n	800392a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003936:	4a0a      	ldr	r2, [pc, #40]	; (8003960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003938:	4c0a      	ldr	r4, [pc, #40]	; (8003964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800393a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800393c:	e001      	b.n	8003942 <LoopFillZerobss>

0800393e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800393e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003940:	3204      	adds	r2, #4

08003942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003944:	d3fb      	bcc.n	800393e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003946:	f013 fbf9 	bl	801713c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800394a:	f7fd fd0d 	bl	8001368 <main>
  bx  lr
 800394e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003950:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003954:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003958:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 800395c:	08018740 	.word	0x08018740
  ldr r2, =_sbss
 8003960:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8003964:	24003344 	.word	0x24003344

08003968 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003968:	e7fe      	b.n	8003968 <ADC3_IRQHandler>
	...

0800396c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003972:	2003      	movs	r0, #3
 8003974:	f001 fd06 	bl	8005384 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003978:	f006 fd94 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <HAL_Init+0x68>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	0a1b      	lsrs	r3, r3, #8
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	4913      	ldr	r1, [pc, #76]	; (80039d8 <HAL_Init+0x6c>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	f003 031f 	and.w	r3, r3, #31
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_Init+0x68>)
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <HAL_Init+0x6c>)
 80039a0:	5cd3      	ldrb	r3, [r2, r3]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	fa22 f303 	lsr.w	r3, r2, r3
 80039ac:	4a0b      	ldr	r2, [pc, #44]	; (80039dc <HAL_Init+0x70>)
 80039ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <HAL_Init+0x74>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039b6:	200f      	movs	r0, #15
 80039b8:	f000 f814 	bl	80039e4 <HAL_InitTick>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e002      	b.n	80039cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039c6:	f7fe ffcb 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	58024400 	.word	0x58024400
 80039d8:	0801858c 	.word	0x0801858c
 80039dc:	24000004 	.word	0x24000004
 80039e0:	24000000 	.word	0x24000000

080039e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <HAL_InitTick+0x60>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e021      	b.n	8003a3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039f8:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_InitTick+0x64>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_InitTick+0x60>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	4619      	mov	r1, r3
 8003a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f001 fceb 	bl	80053ea <HAL_SYSTICK_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00e      	b.n	8003a3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b0f      	cmp	r3, #15
 8003a22:	d80a      	bhi.n	8003a3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a24:	2200      	movs	r2, #0
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	f001 fcb5 	bl	800539a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a30:	4a06      	ldr	r2, [pc, #24]	; (8003a4c <HAL_InitTick+0x68>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
 8003a38:	e000      	b.n	8003a3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	2400000c 	.word	0x2400000c
 8003a48:	24000000 	.word	0x24000000
 8003a4c:	24000008 	.word	0x24000008

08003a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_IncTick+0x20>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x24>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4413      	add	r3, r2
 8003a60:	4a04      	ldr	r2, [pc, #16]	; (8003a74 <HAL_IncTick+0x24>)
 8003a62:	6013      	str	r3, [r2, #0]
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2400000c 	.word	0x2400000c
 8003a74:	240015d0 	.word	0x240015d0

08003a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	; (8003a8c <HAL_GetTick+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	240015d0 	.word	0x240015d0

08003a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7ff ffee 	bl	8003a78 <HAL_GetTick>
 8003a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d005      	beq.n	8003ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <HAL_Delay+0x44>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ab6:	bf00      	nop
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d8f7      	bhi.n	8003ab8 <HAL_Delay+0x28>
  {
  }
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	2400000c 	.word	0x2400000c

08003ad8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003ae2:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	4904      	ldr	r1, [pc, #16]	; (8003b00 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	604b      	str	r3, [r1, #4]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	58000400 	.word	0x58000400

08003b04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
 8003b32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	3360      	adds	r3, #96	; 0x60
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4413      	add	r3, r2
 8003b86:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <LL_ADC_SetOffset+0x60>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d10b      	bne.n	8003ba8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003ba6:	e00b      	b.n	8003bc0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]
}
 8003bc0:	bf00      	nop
 8003bc2:	371c      	adds	r7, #28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	58026000 	.word	0x58026000

08003bd0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b085      	sub	sp, #20
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3360      	adds	r3, #96	; 0x60
 8003bde:	461a      	mov	r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4a0c      	ldr	r2, [pc, #48]	; (8003c70 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00e      	beq.n	8003c62 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3360      	adds	r3, #96	; 0x60
 8003c48:	461a      	mov	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	601a      	str	r2, [r3, #0]
  }
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	58026000 	.word	0x58026000

08003c74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a0c      	ldr	r2, [pc, #48]	; (8003cb4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d10e      	bne.n	8003ca6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3360      	adds	r3, #96	; 0x60
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003ca6:	bf00      	nop
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	58026000 	.word	0x58026000

08003cb8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a0c      	ldr	r2, [pc, #48]	; (8003cf8 <LL_ADC_SetOffsetSign+0x40>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10e      	bne.n	8003cea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	3360      	adds	r3, #96	; 0x60
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	58026000 	.word	0x58026000

08003cfc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	3360      	adds	r3, #96	; 0x60
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4a0c      	ldr	r2, [pc, #48]	; (8003d4c <LL_ADC_SetOffsetState+0x50>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d108      	bne.n	8003d30 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d2e:	e007      	b.n	8003d40 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	601a      	str	r2, [r3, #0]
}
 8003d40:	bf00      	nop
 8003d42:	371c      	adds	r7, #28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr
 8003d4c:	58026000 	.word	0x58026000

08003d50 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3330      	adds	r3, #48	; 0x30
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0a1b      	lsrs	r3, r3, #8
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	4413      	add	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 031f 	and.w	r3, r3, #31
 8003d7a:	211f      	movs	r1, #31
 8003d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	0e9b      	lsrs	r3, r3, #26
 8003d88:	f003 011f 	and.w	r1, r3, #31
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 031f 	and.w	r3, r3, #31
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	431a      	orrs	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d9c:	bf00      	nop
 8003d9e:	371c      	adds	r7, #28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	3314      	adds	r3, #20
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0e5b      	lsrs	r3, r3, #25
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0d1b      	lsrs	r3, r3, #20
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	2107      	movs	r1, #7
 8003dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	401a      	ands	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	0d1b      	lsrs	r3, r3, #20
 8003de2:	f003 031f 	and.w	r3, r3, #31
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dec:	431a      	orrs	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
	...

08003e00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a1a      	ldr	r2, [pc, #104]	; (8003e78 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d115      	bne.n	8003e40 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e20:	43db      	mvns	r3, r3
 8003e22:	401a      	ands	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f003 0318 	and.w	r3, r3, #24
 8003e2a:	4914      	ldr	r1, [pc, #80]	; (8003e7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e2c:	40d9      	lsrs	r1, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	400b      	ands	r3, r1
 8003e32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e36:	431a      	orrs	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e3e:	e014      	b.n	8003e6a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0318 	and.w	r3, r3, #24
 8003e56:	4909      	ldr	r1, [pc, #36]	; (8003e7c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e58:	40d9      	lsrs	r1, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	58026000 	.word	0x58026000
 8003e7c:	000fffff 	.word	0x000fffff

08003e80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6093      	str	r3, [r2, #8]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	5fffffc0 	.word	0x5fffffc0

08003ea4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003eb8:	d101      	bne.n	8003ebe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	6fffffc0 	.word	0x6fffffc0

08003ef4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f08:	d101      	bne.n	8003f0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <LL_ADC_IsEnabled+0x18>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <LL_ADC_IsEnabled+0x1a>
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b083      	sub	sp, #12
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0304 	and.w	r3, r3, #4
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d101      	bne.n	8003f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d101      	bne.n	8003f80 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f90:	b590      	push	{r4, r7, lr}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1ee      	b.n	8004388 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d109      	bne.n	8003fcc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fe fceb 	bl	8002994 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff ff67 	bl	8003ea4 <LL_ADC_IsDeepPowerDownEnabled>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff ff4d 	bl	8003e80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff82 	bl	8003ef4 <LL_ADC_IsInternalRegulatorEnabled>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d114      	bne.n	8004020 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7ff ff66 	bl	8003ecc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004000:	4b8e      	ldr	r3, [pc, #568]	; (800423c <HAL_ADC_Init+0x2ac>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	099b      	lsrs	r3, r3, #6
 8004006:	4a8e      	ldr	r2, [pc, #568]	; (8004240 <HAL_ADC_Init+0x2b0>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	3301      	adds	r3, #1
 8004010:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004012:	e002      	b.n	800401a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	3b01      	subs	r3, #1
 8004018:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f9      	bne.n	8004014 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff65 	bl	8003ef4 <LL_ADC_IsInternalRegulatorEnabled>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10d      	bne.n	800404c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004034:	f043 0210 	orr.w	r2, r3, #16
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff ff76 	bl	8003f42 <LL_ADC_REG_IsConversionOngoing>
 8004056:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b00      	cmp	r3, #0
 8004062:	f040 8188 	bne.w	8004376 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f040 8184 	bne.w	8004376 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff ff4a 	bl	8003f1c <LL_ADC_IsEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d136      	bne.n	80040fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a6c      	ldr	r2, [pc, #432]	; (8004244 <HAL_ADC_Init+0x2b4>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d004      	beq.n	80040a2 <HAL_ADC_Init+0x112>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a6a      	ldr	r2, [pc, #424]	; (8004248 <HAL_ADC_Init+0x2b8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10e      	bne.n	80040c0 <HAL_ADC_Init+0x130>
 80040a2:	4868      	ldr	r0, [pc, #416]	; (8004244 <HAL_ADC_Init+0x2b4>)
 80040a4:	f7ff ff3a 	bl	8003f1c <LL_ADC_IsEnabled>
 80040a8:	4604      	mov	r4, r0
 80040aa:	4867      	ldr	r0, [pc, #412]	; (8004248 <HAL_ADC_Init+0x2b8>)
 80040ac:	f7ff ff36 	bl	8003f1c <LL_ADC_IsEnabled>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4323      	orrs	r3, r4
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e008      	b.n	80040d2 <HAL_ADC_Init+0x142>
 80040c0:	4862      	ldr	r0, [pc, #392]	; (800424c <HAL_ADC_Init+0x2bc>)
 80040c2:	f7ff ff2b 	bl	8003f1c <LL_ADC_IsEnabled>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bf0c      	ite	eq
 80040cc:	2301      	moveq	r3, #1
 80040ce:	2300      	movne	r3, #0
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d012      	beq.n	80040fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5a      	ldr	r2, [pc, #360]	; (8004244 <HAL_ADC_Init+0x2b4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_ADC_Init+0x15a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a58      	ldr	r2, [pc, #352]	; (8004248 <HAL_ADC_Init+0x2b8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_ADC_Init+0x15e>
 80040ea:	4a59      	ldr	r2, [pc, #356]	; (8004250 <HAL_ADC_Init+0x2c0>)
 80040ec:	e000      	b.n	80040f0 <HAL_ADC_Init+0x160>
 80040ee:	4a59      	ldr	r2, [pc, #356]	; (8004254 <HAL_ADC_Init+0x2c4>)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7ff fd04 	bl	8003b04 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a52      	ldr	r2, [pc, #328]	; (800424c <HAL_ADC_Init+0x2bc>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d129      	bne.n	800415a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7e5b      	ldrb	r3, [r3, #25]
 800410a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004110:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004116:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b08      	cmp	r3, #8
 800411e:	d013      	beq.n	8004148 <HAL_ADC_Init+0x1b8>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d00d      	beq.n	8004144 <HAL_ADC_Init+0x1b4>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	2b1c      	cmp	r3, #28
 800412e:	d007      	beq.n	8004140 <HAL_ADC_Init+0x1b0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b18      	cmp	r3, #24
 8004136:	d101      	bne.n	800413c <HAL_ADC_Init+0x1ac>
 8004138:	2318      	movs	r3, #24
 800413a:	e006      	b.n	800414a <HAL_ADC_Init+0x1ba>
 800413c:	2300      	movs	r3, #0
 800413e:	e004      	b.n	800414a <HAL_ADC_Init+0x1ba>
 8004140:	2310      	movs	r3, #16
 8004142:	e002      	b.n	800414a <HAL_ADC_Init+0x1ba>
 8004144:	2308      	movs	r3, #8
 8004146:	e000      	b.n	800414a <HAL_ADC_Init+0x1ba>
 8004148:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800414a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004152:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
 8004158:	e00e      	b.n	8004178 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	7e5b      	ldrb	r3, [r3, #25]
 800415e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004164:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800416a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004172:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d106      	bne.n	8004190 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	3b01      	subs	r3, #1
 8004188:	045b      	lsls	r3, r3, #17
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4313      	orrs	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	d009      	beq.n	80041ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a26      	ldr	r2, [pc, #152]	; (800424c <HAL_ADC_Init+0x2bc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d115      	bne.n	80041e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	4b26      	ldr	r3, [pc, #152]	; (8004258 <HAL_ADC_Init+0x2c8>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	69b9      	ldr	r1, [r7, #24]
 80041c6:	430b      	orrs	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	611a      	str	r2, [r3, #16]
 80041e0:	e009      	b.n	80041f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b1c      	ldr	r3, [pc, #112]	; (800425c <HAL_ADC_Init+0x2cc>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	430b      	orrs	r3, r1
 80041f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff fea1 	bl	8003f42 <LL_ADC_REG_IsConversionOngoing>
 8004200:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff feae 	bl	8003f68 <LL_ADC_INJ_IsConversionOngoing>
 800420c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f040 808e 	bne.w	8004332 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 808a 	bne.w	8004332 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_ADC_Init+0x2bc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d11b      	bne.n	8004260 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7e1b      	ldrb	r3, [r3, #24]
 800422c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004234:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004236:	4313      	orrs	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	e018      	b.n	800426e <HAL_ADC_Init+0x2de>
 800423c:	24000000 	.word	0x24000000
 8004240:	053e2d63 	.word	0x053e2d63
 8004244:	40022000 	.word	0x40022000
 8004248:	40022100 	.word	0x40022100
 800424c:	58026000 	.word	0x58026000
 8004250:	40022300 	.word	0x40022300
 8004254:	58026300 	.word	0x58026300
 8004258:	fff04007 	.word	0xfff04007
 800425c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7e1b      	ldrb	r3, [r3, #24]
 8004264:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_ADC_Init+0x400>)
 8004276:	4013      	ands	r3, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6812      	ldr	r2, [r2, #0]
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	430b      	orrs	r3, r1
 8004280:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004288:	2b01      	cmp	r3, #1
 800428a:	d137      	bne.n	80042fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a3f      	ldr	r2, [pc, #252]	; (8004394 <HAL_ADC_Init+0x404>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d116      	bne.n	80042ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	4b3d      	ldr	r3, [pc, #244]	; (8004398 <HAL_ADC_Init+0x408>)
 80042a4:	4013      	ands	r3, r2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042b4:	4311      	orrs	r1, r2
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042ba:	430a      	orrs	r2, r1
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	611a      	str	r2, [r3, #16]
 80042c8:	e020      	b.n	800430c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	4b32      	ldr	r3, [pc, #200]	; (800439c <HAL_ADC_Init+0x40c>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042d8:	3a01      	subs	r2, #1
 80042da:	0411      	lsls	r1, r2, #16
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042e0:	4311      	orrs	r1, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042e6:	4311      	orrs	r1, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042ec:	430a      	orrs	r2, r1
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	611a      	str	r2, [r3, #16]
 80042fa:	e007      	b.n	800430c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <HAL_ADC_Init+0x404>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d002      	beq.n	8004332 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fd63 	bl	8004df8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d10c      	bne.n	8004354 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	f023 010f 	bic.w	r1, r3, #15
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	1e5a      	subs	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
 8004352:	e007      	b.n	8004364 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020f 	bic.w	r2, r2, #15
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004368:	f023 0303 	bic.w	r3, r3, #3
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
 8004374:	e007      	b.n	8004386 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	f043 0210 	orr.w	r2, r3, #16
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004386:	7ffb      	ldrb	r3, [r7, #31]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3724      	adds	r7, #36	; 0x24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd90      	pop	{r4, r7, pc}
 8004390:	ffffbffc 	.word	0xffffbffc
 8004394:	58026000 	.word	0x58026000
 8004398:	fc00f81f 	.word	0xfc00f81f
 800439c:	fc00f81e 	.word	0xfc00f81e

080043a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b0b9      	sub	sp, #228	; 0xe4
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043ba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	4aa9      	ldr	r2, [pc, #676]	; (8004668 <HAL_ADC_ConfigChannel+0x2c8>)
 80043c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_ADC_ConfigChannel+0x34>
 80043ce:	2302      	movs	r3, #2
 80043d0:	f000 bcfa 	b.w	8004dc8 <HAL_ADC_ConfigChannel+0xa28>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fdae 	bl	8003f42 <LL_ADC_REG_IsConversionOngoing>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 84de 	bne.w	8004daa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a9e      	ldr	r2, [pc, #632]	; (800466c <HAL_ADC_ConfigChannel+0x2cc>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d033      	beq.n	8004460 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x76>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	e01d      	b.n	8004452 <HAL_ADC_ConfigChannel+0xb2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004422:	fa93 f3a3 	rbit	r3, r3
 8004426:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800442a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800442e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800443a:	2320      	movs	r3, #32
 800443c:	e004      	b.n	8004448 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800443e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2201      	movs	r2, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	69d1      	ldr	r1, [r2, #28]
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	430b      	orrs	r3, r1
 800445e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6818      	ldr	r0, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	f7ff fc6f 	bl	8003d50 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fd63 	bl	8003f42 <LL_ADC_REG_IsConversionOngoing>
 800447c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fd6f 	bl	8003f68 <LL_ADC_INJ_IsConversionOngoing>
 800448a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800448e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004492:	2b00      	cmp	r3, #0
 8004494:	f040 8270 	bne.w	8004978 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004498:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 826b 	bne.w	8004978 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f7ff fc7a 	bl	8003da8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a6c      	ldr	r2, [pc, #432]	; (800466c <HAL_ADC_ConfigChannel+0x2cc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044d8:	e032      	b.n	8004540 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044da:	4b65      	ldr	r3, [pc, #404]	; (8004670 <HAL_ADC_ConfigChannel+0x2d0>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e6:	d10b      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x160>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	e01d      	b.n	800453c <HAL_ADC_ConfigChannel+0x19c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x186>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	089b      	lsrs	r3, r3, #2
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	e00a      	b.n	800453c <HAL_ADC_ConfigChannel+0x19c>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d048      	beq.n	80045da <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6818      	ldr	r0, [r3, #0]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6919      	ldr	r1, [r3, #16]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004558:	f7ff fb08 	bl	8003b6c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a42      	ldr	r2, [pc, #264]	; (800466c <HAL_ADC_ConfigChannel+0x2cc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d119      	bne.n	800459a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6919      	ldr	r1, [r3, #16]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	461a      	mov	r2, r3
 8004574:	f7ff fba0 	bl	8003cb8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6919      	ldr	r1, [r3, #16]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d102      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x1f0>
 800458a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458e:	e000      	b.n	8004592 <HAL_ADC_ConfigChannel+0x1f2>
 8004590:	2300      	movs	r3, #0
 8004592:	461a      	mov	r2, r3
 8004594:	f7ff fb6e 	bl	8003c74 <LL_ADC_SetOffsetSaturation>
 8004598:	e1ee      	b.n	8004978 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6818      	ldr	r0, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6919      	ldr	r1, [r3, #16]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d102      	bne.n	80045b2 <HAL_ADC_ConfigChannel+0x212>
 80045ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80045b0:	e000      	b.n	80045b4 <HAL_ADC_ConfigChannel+0x214>
 80045b2:	2300      	movs	r3, #0
 80045b4:	461a      	mov	r2, r3
 80045b6:	f7ff fb3b 	bl	8003c30 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	6919      	ldr	r1, [r3, #16]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	7e1b      	ldrb	r3, [r3, #24]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x230>
 80045ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045ce:	e000      	b.n	80045d2 <HAL_ADC_ConfigChannel+0x232>
 80045d0:	2300      	movs	r3, #0
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7ff fb12 	bl	8003bfc <LL_ADC_SetDataRightShift>
 80045d8:	e1ce      	b.n	8004978 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a23      	ldr	r2, [pc, #140]	; (800466c <HAL_ADC_ConfigChannel+0x2cc>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	f040 8181 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2100      	movs	r1, #0
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff faef 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_ADC_ConfigChannel+0x272>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fae4 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 8004608:	4603      	mov	r3, r0
 800460a:	0e9b      	lsrs	r3, r3, #26
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	e01e      	b.n	8004650 <HAL_ADC_ConfigChannel+0x2b0>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fad9 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 800461e:	4603      	mov	r3, r0
 8004620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004624:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004628:	fa93 f3a3 	rbit	r3, r3
 800462c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004630:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004634:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e004      	b.n	800464e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004644:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004648:	fab3 f383 	clz	r3, r3
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10b      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x2d4>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0e9b      	lsrs	r3, r3, #26
 8004662:	f003 031f 	and.w	r3, r3, #31
 8004666:	e01e      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x306>
 8004668:	47ff0000 	.word	0x47ff0000
 800466c:	58026000 	.word	0x58026000
 8004670:	5c001000 	.word	0x5c001000
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004680:	fa93 f3a3 	rbit	r3, r3
 8004684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800468c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e004      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800469c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d106      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fb22 	bl	8003cfc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2101      	movs	r1, #1
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff fa86 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80046c4:	4603      	mov	r3, r0
 80046c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x344>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	4618      	mov	r0, r3
 80046d6:	f7ff fa7b 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80046da:	4603      	mov	r3, r0
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	f003 021f 	and.w	r2, r3, #31
 80046e2:	e01e      	b.n	8004722 <HAL_ADC_ConfigChannel+0x382>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2101      	movs	r1, #1
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fa70 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046fa:	fa93 f3a3 	rbit	r3, r3
 80046fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800470a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004712:	2320      	movs	r3, #32
 8004714:	e004      	b.n	8004720 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <HAL_ADC_ConfigChannel+0x39a>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0e9b      	lsrs	r3, r3, #26
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	e018      	b.n	800476c <HAL_ADC_ConfigChannel+0x3cc>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800474e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004752:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800475e:	2320      	movs	r3, #32
 8004760:	e004      	b.n	800476c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004762:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	429a      	cmp	r2, r3
 800476e:	d106      	bne.n	800477e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff fabf 	bl	8003cfc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2102      	movs	r1, #2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff fa23 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 800478a:	4603      	mov	r3, r0
 800478c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10a      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x40a>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2102      	movs	r1, #2
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff fa18 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80047a0:	4603      	mov	r3, r0
 80047a2:	0e9b      	lsrs	r3, r3, #26
 80047a4:	f003 021f 	and.w	r2, r3, #31
 80047a8:	e01e      	b.n	80047e8 <HAL_ADC_ConfigChannel+0x448>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2102      	movs	r1, #2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fa0d 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047c0:	fa93 f3a3 	rbit	r3, r3
 80047c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80047d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047d8:	2320      	movs	r3, #32
 80047da:	e004      	b.n	80047e6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047e0:	fab3 f383 	clz	r3, r3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d105      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x460>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	0e9b      	lsrs	r3, r3, #26
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	e014      	b.n	800482a <HAL_ADC_ConfigChannel+0x48a>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004806:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800481c:	2320      	movs	r3, #32
 800481e:	e004      	b.n	800482a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004824:	fab3 f383 	clz	r3, r3
 8004828:	b2db      	uxtb	r3, r3
 800482a:	429a      	cmp	r2, r3
 800482c:	d106      	bne.n	800483c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	2102      	movs	r1, #2
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fa60 	bl	8003cfc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2103      	movs	r1, #3
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff f9c4 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10a      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x4c8>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2103      	movs	r1, #3
 8004858:	4618      	mov	r0, r3
 800485a:	f7ff f9b9 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	e017      	b.n	8004898 <HAL_ADC_ConfigChannel+0x4f8>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2103      	movs	r1, #3
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f9ae 	bl	8003bd0 <LL_ADC_GetOffsetChannel>
 8004874:	4603      	mov	r3, r0
 8004876:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004882:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800488a:	2320      	movs	r3, #32
 800488c:	e003      	b.n	8004896 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800488e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_ADC_ConfigChannel+0x510>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	f003 031f 	and.w	r3, r3, #31
 80048ae:	e011      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x534>
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048b8:	fa93 f3a3 	rbit	r3, r3
 80048bc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80048be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048c0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80048c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048c8:	2320      	movs	r3, #32
 80048ca:	e003      	b.n	80048d4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d14f      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2200      	movs	r2, #0
 80048de:	2103      	movs	r1, #3
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fa0b 	bl	8003cfc <LL_ADC_SetOffsetState>
 80048e6:	e047      	b.n	8004978 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	069b      	lsls	r3, r3, #26
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800490a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	069b      	lsls	r3, r3, #26
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800492e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	069b      	lsls	r3, r3, #26
 8004940:	429a      	cmp	r2, r3
 8004942:	d107      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004952:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	069b      	lsls	r3, r3, #26
 8004964:	429a      	cmp	r2, r3
 8004966:	d107      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004976:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff facd 	bl	8003f1c <LL_ADC_IsEnabled>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 8219 	bne.w	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	461a      	mov	r2, r3
 8004998:	f7ff fa32 	bl	8003e00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4aa1      	ldr	r2, [pc, #644]	; (8004c28 <HAL_ADC_ConfigChannel+0x888>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f040 812e 	bne.w	8004c04 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <HAL_ADC_ConfigChannel+0x630>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	0e9b      	lsrs	r3, r3, #26
 80049be:	3301      	adds	r3, #1
 80049c0:	f003 031f 	and.w	r3, r3, #31
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	bf94      	ite	ls
 80049c8:	2301      	movls	r3, #1
 80049ca:	2300      	movhi	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e019      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x664>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d8:	fa93 f3a3 	rbit	r3, r3
 80049dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049e8:	2320      	movs	r3, #32
 80049ea:	e003      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ee:	fab3 f383 	clz	r3, r3
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	3301      	adds	r3, #1
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2b09      	cmp	r3, #9
 80049fc:	bf94      	ite	ls
 80049fe:	2301      	movls	r3, #1
 8004a00:	2300      	movhi	r3, #0
 8004a02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d079      	beq.n	8004afc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x684>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	069b      	lsls	r3, r3, #26
 8004a1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a22:	e015      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x6b0>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a34:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	e003      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	069b      	lsls	r3, r3, #26
 8004a4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d109      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x6d0>
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0e9b      	lsrs	r3, r3, #26
 8004a62:	3301      	adds	r3, #1
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2101      	movs	r1, #1
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	e017      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x700>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	fa93 f3a3 	rbit	r3, r3
 8004a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a80:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a88:	2320      	movs	r3, #32
 8004a8a:	e003      	b.n	8004a94 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	fab3 f383 	clz	r3, r3
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	3301      	adds	r3, #1
 8004a96:	f003 031f 	and.w	r3, r3, #31
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	ea42 0103 	orr.w	r1, r2, r3
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x726>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	0e9b      	lsrs	r3, r3, #26
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f003 021f 	and.w	r2, r3, #31
 8004abc:	4613      	mov	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4413      	add	r3, r2
 8004ac2:	051b      	lsls	r3, r3, #20
 8004ac4:	e018      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x758>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	fa93 f3a3 	rbit	r3, r3
 8004ad2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004ade:	2320      	movs	r3, #32
 8004ae0:	e003      	b.n	8004aea <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	fab3 f383 	clz	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f003 021f 	and.w	r2, r3, #31
 8004af0:	4613      	mov	r3, r2
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	4413      	add	r3, r2
 8004af6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af8:	430b      	orrs	r3, r1
 8004afa:	e07e      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x778>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	0e9b      	lsrs	r3, r3, #26
 8004b0e:	3301      	adds	r3, #1
 8004b10:	069b      	lsls	r3, r3, #26
 8004b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b16:	e015      	b.n	8004b44 <HAL_ADC_ConfigChannel+0x7a4>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e003      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	069b      	lsls	r3, r3, #26
 8004b40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x7c4>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	0e9b      	lsrs	r3, r3, #26
 8004b56:	3301      	adds	r3, #1
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b62:	e017      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x7f4>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	fa93 f3a3 	rbit	r3, r3
 8004b70:	61bb      	str	r3, [r7, #24]
  return result;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b7c:	2320      	movs	r3, #32
 8004b7e:	e003      	b.n	8004b88 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	3301      	adds	r3, #1
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2101      	movs	r1, #1
 8004b90:	fa01 f303 	lsl.w	r3, r1, r3
 8004b94:	ea42 0103 	orr.w	r1, r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10d      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x820>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e9b      	lsrs	r3, r3, #26
 8004baa:	3301      	adds	r3, #1
 8004bac:	f003 021f 	and.w	r2, r3, #31
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	4413      	add	r3, r2
 8004bb6:	3b1e      	subs	r3, #30
 8004bb8:	051b      	lsls	r3, r3, #20
 8004bba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bbe:	e01b      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x858>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	60fb      	str	r3, [r7, #12]
  return result;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	e003      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f003 021f 	and.w	r2, r3, #31
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b1e      	subs	r3, #30
 8004bf2:	051b      	lsls	r3, r3, #20
 8004bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f7ff f8d2 	bl	8003da8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f280 80d7 	bge.w	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a06      	ldr	r2, [pc, #24]	; (8004c2c <HAL_ADC_ConfigChannel+0x88c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_ADC_ConfigChannel+0x882>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_ADC_ConfigChannel+0x890>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10a      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x898>
 8004c22:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <HAL_ADC_ConfigChannel+0x894>)
 8004c24:	e009      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x89a>
 8004c26:	bf00      	nop
 8004c28:	47ff0000 	.word	0x47ff0000
 8004c2c:	40022000 	.word	0x40022000
 8004c30:	40022100 	.word	0x40022100
 8004c34:	40022300 	.word	0x40022300
 8004c38:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe ff88 	bl	8003b50 <LL_ADC_GetCommonPathInternalCh>
 8004c40:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a62      	ldr	r2, [pc, #392]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d004      	beq.n	8004c58 <HAL_ADC_ConfigChannel+0x8b8>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a61      	ldr	r2, [pc, #388]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d10e      	bne.n	8004c76 <HAL_ADC_ConfigChannel+0x8d6>
 8004c58:	485e      	ldr	r0, [pc, #376]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004c5a:	f7ff f95f 	bl	8003f1c <LL_ADC_IsEnabled>
 8004c5e:	4604      	mov	r4, r0
 8004c60:	485d      	ldr	r0, [pc, #372]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004c62:	f7ff f95b 	bl	8003f1c <LL_ADC_IsEnabled>
 8004c66:	4603      	mov	r3, r0
 8004c68:	4323      	orrs	r3, r4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bf0c      	ite	eq
 8004c6e:	2301      	moveq	r3, #1
 8004c70:	2300      	movne	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e008      	b.n	8004c88 <HAL_ADC_ConfigChannel+0x8e8>
 8004c76:	4859      	ldr	r0, [pc, #356]	; (8004ddc <HAL_ADC_ConfigChannel+0xa3c>)
 8004c78:	f7ff f950 	bl	8003f1c <LL_ADC_IsEnabled>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf0c      	ite	eq
 8004c82:	2301      	moveq	r3, #1
 8004c84:	2300      	movne	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8084 	beq.w	8004d96 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a53      	ldr	r2, [pc, #332]	; (8004de0 <HAL_ADC_ConfigChannel+0xa40>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d132      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x95e>
 8004c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d12c      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a4c      	ldr	r2, [pc, #304]	; (8004ddc <HAL_ADC_ConfigChannel+0xa3c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	f040 8086 	bne.w	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a47      	ldr	r2, [pc, #284]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_ADC_ConfigChannel+0x924>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a46      	ldr	r2, [pc, #280]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x928>
 8004cc4:	4a47      	ldr	r2, [pc, #284]	; (8004de4 <HAL_ADC_ConfigChannel+0xa44>)
 8004cc6:	e000      	b.n	8004cca <HAL_ADC_ConfigChannel+0x92a>
 8004cc8:	4a41      	ldr	r2, [pc, #260]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004cca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fe ff28 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cda:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <HAL_ADC_ConfigChannel+0xa48>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	4a42      	ldr	r2, [pc, #264]	; (8004dec <HAL_ADC_ConfigChannel+0xa4c>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	3301      	adds	r3, #1
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cee:	e002      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f9      	bne.n	8004cf0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cfc:	e05e      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a3b      	ldr	r2, [pc, #236]	; (8004df0 <HAL_ADC_ConfigChannel+0xa50>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d120      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x9aa>
 8004d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11a      	bne.n	8004d4a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a30      	ldr	r2, [pc, #192]	; (8004ddc <HAL_ADC_ConfigChannel+0xa3c>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d14e      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2c      	ldr	r2, [pc, #176]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d004      	beq.n	8004d32 <HAL_ADC_ConfigChannel+0x992>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x996>
 8004d32:	4a2c      	ldr	r2, [pc, #176]	; (8004de4 <HAL_ADC_ConfigChannel+0xa44>)
 8004d34:	e000      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x998>
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fe fef1 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d48:	e038      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <HAL_ADC_ConfigChannel+0xa54>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d133      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
 8004d54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d12d      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1d      	ldr	r2, [pc, #116]	; (8004ddc <HAL_ADC_ConfigChannel+0xa3c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d128      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <HAL_ADC_ConfigChannel+0xa34>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_ADC_ConfigChannel+0x9de>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a17      	ldr	r2, [pc, #92]	; (8004dd8 <HAL_ADC_ConfigChannel+0xa38>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x9e2>
 8004d7e:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_ADC_ConfigChannel+0xa44>)
 8004d80:	e000      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x9e4>
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <HAL_ADC_ConfigChannel+0xa30>)
 8004d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	4610      	mov	r0, r2
 8004d90:	f7fe fecb 	bl	8003b2a <LL_ADC_SetCommonPathInternalCh>
 8004d94:	e012      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004da8:	e008      	b.n	8004dbc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004dc4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	37e4      	adds	r7, #228	; 0xe4
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd90      	pop	{r4, r7, pc}
 8004dd0:	58026300 	.word	0x58026300
 8004dd4:	40022000 	.word	0x40022000
 8004dd8:	40022100 	.word	0x40022100
 8004ddc:	58026000 	.word	0x58026000
 8004de0:	c7520000 	.word	0xc7520000
 8004de4:	40022300 	.word	0x40022300
 8004de8:	24000000 	.word	0x24000000
 8004dec:	053e2d63 	.word	0x053e2d63
 8004df0:	c3210000 	.word	0xc3210000
 8004df4:	cb840000 	.word	0xcb840000

08004df8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a6c      	ldr	r2, [pc, #432]	; (8004fb8 <ADC_ConfigureBoostMode+0x1c0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <ADC_ConfigureBoostMode+0x1c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a6b      	ldr	r2, [pc, #428]	; (8004fbc <ADC_ConfigureBoostMode+0x1c4>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d109      	bne.n	8004e28 <ADC_ConfigureBoostMode+0x30>
 8004e14:	4b6a      	ldr	r3, [pc, #424]	; (8004fc0 <ADC_ConfigureBoostMode+0x1c8>)
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e008      	b.n	8004e3a <ADC_ConfigureBoostMode+0x42>
 8004e28:	4b66      	ldr	r3, [pc, #408]	; (8004fc4 <ADC_ConfigureBoostMode+0x1cc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf14      	ite	ne
 8004e34:	2301      	movne	r3, #1
 8004e36:	2300      	moveq	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01c      	beq.n	8004e78 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e3e:	f005 fcab 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 8004e42:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e4c:	d010      	beq.n	8004e70 <ADC_ConfigureBoostMode+0x78>
 8004e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e52:	d873      	bhi.n	8004f3c <ADC_ConfigureBoostMode+0x144>
 8004e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e58:	d002      	beq.n	8004e60 <ADC_ConfigureBoostMode+0x68>
 8004e5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5e:	d16d      	bne.n	8004f3c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	e068      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	089b      	lsrs	r3, r3, #2
 8004e74:	60fb      	str	r3, [r7, #12]
        break;
 8004e76:	e064      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	f006 fe86 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e84:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e8e:	d051      	beq.n	8004f34 <ADC_ConfigureBoostMode+0x13c>
 8004e90:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e94:	d854      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004e96:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e9a:	d047      	beq.n	8004f2c <ADC_ConfigureBoostMode+0x134>
 8004e9c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004ea0:	d84e      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004ea2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004ea6:	d03d      	beq.n	8004f24 <ADC_ConfigureBoostMode+0x12c>
 8004ea8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004eac:	d848      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004eae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb2:	d033      	beq.n	8004f1c <ADC_ConfigureBoostMode+0x124>
 8004eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eb8:	d842      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004eba:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ebe:	d029      	beq.n	8004f14 <ADC_ConfigureBoostMode+0x11c>
 8004ec0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004ec4:	d83c      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004ec6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004eca:	d01a      	beq.n	8004f02 <ADC_ConfigureBoostMode+0x10a>
 8004ecc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ed0:	d836      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004ed2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004ed6:	d014      	beq.n	8004f02 <ADC_ConfigureBoostMode+0x10a>
 8004ed8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004edc:	d830      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d00e      	beq.n	8004f02 <ADC_ConfigureBoostMode+0x10a>
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee8:	d82a      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004eea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eee:	d008      	beq.n	8004f02 <ADC_ConfigureBoostMode+0x10a>
 8004ef0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ef4:	d824      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x148>
 8004ef6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004efa:	d002      	beq.n	8004f02 <ADC_ConfigureBoostMode+0x10a>
 8004efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f00:	d11e      	bne.n	8004f40 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	0c9b      	lsrs	r3, r3, #18
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e016      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	091b      	lsrs	r3, r3, #4
 8004f18:	60fb      	str	r3, [r7, #12]
        break;
 8004f1a:	e012      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	095b      	lsrs	r3, r3, #5
 8004f20:	60fb      	str	r3, [r7, #12]
        break;
 8004f22:	e00e      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	60fb      	str	r3, [r7, #12]
        break;
 8004f2a:	e00a      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	09db      	lsrs	r3, r3, #7
 8004f30:	60fb      	str	r3, [r7, #12]
        break;
 8004f32:	e006      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	60fb      	str	r3, [r7, #12]
        break;
 8004f3a:	e002      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f40:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <ADC_ConfigureBoostMode+0x1d0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d808      	bhi.n	8004f62 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689a      	ldr	r2, [r3, #8]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f5e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f60:	e025      	b.n	8004fae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <ADC_ConfigureBoostMode+0x1d4>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d80a      	bhi.n	8004f80 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	e016      	b.n	8004fae <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <ADC_ConfigureBoostMode+0x1d8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d80a      	bhi.n	8004f9e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f9a:	609a      	str	r2, [r3, #8]
}
 8004f9c:	e007      	b.n	8004fae <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004fac:	609a      	str	r2, [r3, #8]
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40022000 	.word	0x40022000
 8004fbc:	40022100 	.word	0x40022100
 8004fc0:	40022300 	.word	0x40022300
 8004fc4:	58026300 	.word	0x58026300
 8004fc8:	005f5e10 	.word	0x005f5e10
 8004fcc:	00bebc20 	.word	0x00bebc20
 8004fd0:	017d7840 	.word	0x017d7840

08004fd4 <LL_ADC_IsEnabled>:
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <LL_ADC_IsEnabled+0x18>
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e000      	b.n	8004fee <LL_ADC_IsEnabled+0x1a>
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <LL_ADC_REG_IsConversionOngoing>:
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	2b04      	cmp	r3, #4
 800500c:	d101      	bne.n	8005012 <LL_ADC_REG_IsConversionOngoing+0x18>
 800500e:	2301      	movs	r3, #1
 8005010:	e000      	b.n	8005014 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b0a3      	sub	sp, #140	; 0x8c
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800503a:	2302      	movs	r3, #2
 800503c:	e0c1      	b.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005046:	2300      	movs	r3, #0
 8005048:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800504a:	2300      	movs	r3, #0
 800504c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a5e      	ldr	r2, [pc, #376]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d102      	bne.n	800505e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005058:	4b5d      	ldr	r3, [pc, #372]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e001      	b.n	8005062 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d10b      	bne.n	8005080 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	f043 0220 	orr.w	r2, r3, #32
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0a0      	b.n	80051c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff ffb9 	bl	8004ffa <LL_ADC_REG_IsConversionOngoing>
 8005088:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff ffb2 	bl	8004ffa <LL_ADC_REG_IsConversionOngoing>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 8081 	bne.w	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800509e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d17c      	bne.n	80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a48      	ldr	r2, [pc, #288]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d004      	beq.n	80050ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a46      	ldr	r2, [pc, #280]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d101      	bne.n	80050be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80050ba:	4b46      	ldr	r3, [pc, #280]	; (80051d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80050bc:	e000      	b.n	80050c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80050be:	4b46      	ldr	r3, [pc, #280]	; (80051d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80050c0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d039      	beq.n	800513e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3a      	ldr	r2, [pc, #232]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a39      	ldr	r2, [pc, #228]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d10e      	bne.n	800510e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050f0:	4836      	ldr	r0, [pc, #216]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050f2:	f7ff ff6f 	bl	8004fd4 <LL_ADC_IsEnabled>
 80050f6:	4604      	mov	r4, r0
 80050f8:	4835      	ldr	r0, [pc, #212]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050fa:	f7ff ff6b 	bl	8004fd4 <LL_ADC_IsEnabled>
 80050fe:	4603      	mov	r3, r0
 8005100:	4323      	orrs	r3, r4
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	e008      	b.n	8005120 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800510e:	4833      	ldr	r0, [pc, #204]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005110:	f7ff ff60 	bl	8004fd4 <LL_ADC_IsEnabled>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	d047      	beq.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005124:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800512a:	4013      	ands	r3, r2
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	6811      	ldr	r1, [r2, #0]
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	6892      	ldr	r2, [r2, #8]
 8005134:	430a      	orrs	r2, r1
 8005136:	431a      	orrs	r2, r3
 8005138:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800513c:	e03a      	b.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800513e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005148:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a1d      	ldr	r2, [pc, #116]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10e      	bne.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800515e:	481b      	ldr	r0, [pc, #108]	; (80051cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005160:	f7ff ff38 	bl	8004fd4 <LL_ADC_IsEnabled>
 8005164:	4604      	mov	r4, r0
 8005166:	481a      	ldr	r0, [pc, #104]	; (80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005168:	f7ff ff34 	bl	8004fd4 <LL_ADC_IsEnabled>
 800516c:	4603      	mov	r3, r0
 800516e:	4323      	orrs	r3, r4
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	e008      	b.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800517c:	4817      	ldr	r0, [pc, #92]	; (80051dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800517e:	f7ff ff29 	bl	8004fd4 <LL_ADC_IsEnabled>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	bf0c      	ite	eq
 8005188:	2301      	moveq	r3, #1
 800518a:	2300      	movne	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d010      	beq.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005198:	4013      	ands	r3, r2
 800519a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800519c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800519e:	e009      	b.n	80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80051b2:	e000      	b.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80051be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	378c      	adds	r7, #140	; 0x8c
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd90      	pop	{r4, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40022000 	.word	0x40022000
 80051d0:	40022100 	.word	0x40022100
 80051d4:	40022300 	.word	0x40022300
 80051d8:	58026300 	.word	0x58026300
 80051dc:	58026000 	.word	0x58026000
 80051e0:	fffff0e0 	.word	0xfffff0e0

080051e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <__NVIC_SetPriorityGrouping+0x40>)
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005200:	4013      	ands	r3, r2
 8005202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800520c:	4b06      	ldr	r3, [pc, #24]	; (8005228 <__NVIC_SetPriorityGrouping+0x44>)
 800520e:	4313      	orrs	r3, r2
 8005210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005212:	4a04      	ldr	r2, [pc, #16]	; (8005224 <__NVIC_SetPriorityGrouping+0x40>)
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	60d3      	str	r3, [r2, #12]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	e000ed00 	.word	0xe000ed00
 8005228:	05fa0000 	.word	0x05fa0000

0800522c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005230:	4b04      	ldr	r3, [pc, #16]	; (8005244 <__NVIC_GetPriorityGrouping+0x18>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	f003 0307 	and.w	r3, r3, #7
}
 800523a:	4618      	mov	r0, r3
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	e000ed00 	.word	0xe000ed00

08005248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	4603      	mov	r3, r0
 8005250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	db0b      	blt.n	8005272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	f003 021f 	and.w	r2, r3, #31
 8005260:	4907      	ldr	r1, [pc, #28]	; (8005280 <__NVIC_EnableIRQ+0x38>)
 8005262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2001      	movs	r0, #1
 800526a:	fa00 f202 	lsl.w	r2, r0, r2
 800526e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	e000e100 	.word	0xe000e100

08005284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005294:	2b00      	cmp	r3, #0
 8005296:	db0a      	blt.n	80052ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	b2da      	uxtb	r2, r3
 800529c:	490c      	ldr	r1, [pc, #48]	; (80052d0 <__NVIC_SetPriority+0x4c>)
 800529e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052a2:	0112      	lsls	r2, r2, #4
 80052a4:	b2d2      	uxtb	r2, r2
 80052a6:	440b      	add	r3, r1
 80052a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052ac:	e00a      	b.n	80052c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4908      	ldr	r1, [pc, #32]	; (80052d4 <__NVIC_SetPriority+0x50>)
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	3b04      	subs	r3, #4
 80052bc:	0112      	lsls	r2, r2, #4
 80052be:	b2d2      	uxtb	r2, r2
 80052c0:	440b      	add	r3, r1
 80052c2:	761a      	strb	r2, [r3, #24]
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	e000e100 	.word	0xe000e100
 80052d4:	e000ed00 	.word	0xe000ed00

080052d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052d8:	b480      	push	{r7}
 80052da:	b089      	sub	sp, #36	; 0x24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f003 0307 	and.w	r3, r3, #7
 80052ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f1c3 0307 	rsb	r3, r3, #7
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	bf28      	it	cs
 80052f6:	2304      	movcs	r3, #4
 80052f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2b06      	cmp	r3, #6
 8005300:	d902      	bls.n	8005308 <NVIC_EncodePriority+0x30>
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3b03      	subs	r3, #3
 8005306:	e000      	b.n	800530a <NVIC_EncodePriority+0x32>
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800530c:	f04f 32ff 	mov.w	r2, #4294967295
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	fa02 f303 	lsl.w	r3, r2, r3
 8005316:	43da      	mvns	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	401a      	ands	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005320:	f04f 31ff 	mov.w	r1, #4294967295
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa01 f303 	lsl.w	r3, r1, r3
 800532a:	43d9      	mvns	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005330:	4313      	orrs	r3, r2
         );
}
 8005332:	4618      	mov	r0, r3
 8005334:	3724      	adds	r7, #36	; 0x24
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005350:	d301      	bcc.n	8005356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005352:	2301      	movs	r3, #1
 8005354:	e00f      	b.n	8005376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005356:	4a0a      	ldr	r2, [pc, #40]	; (8005380 <SysTick_Config+0x40>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3b01      	subs	r3, #1
 800535c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800535e:	210f      	movs	r1, #15
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	f7ff ff8e 	bl	8005284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005368:	4b05      	ldr	r3, [pc, #20]	; (8005380 <SysTick_Config+0x40>)
 800536a:	2200      	movs	r2, #0
 800536c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800536e:	4b04      	ldr	r3, [pc, #16]	; (8005380 <SysTick_Config+0x40>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3708      	adds	r7, #8
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	e000e010 	.word	0xe000e010

08005384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff29 	bl	80051e4 <__NVIC_SetPriorityGrouping>
}
 8005392:	bf00      	nop
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	4603      	mov	r3, r0
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80053a8:	f7ff ff40 	bl	800522c <__NVIC_GetPriorityGrouping>
 80053ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	6978      	ldr	r0, [r7, #20]
 80053b4:	f7ff ff90 	bl	80052d8 <NVIC_EncodePriority>
 80053b8:	4602      	mov	r2, r0
 80053ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053be:	4611      	mov	r1, r2
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7ff ff5f 	bl	8005284 <__NVIC_SetPriority>
}
 80053c6:	bf00      	nop
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	4603      	mov	r3, r0
 80053d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ff33 	bl	8005248 <__NVIC_EnableIRQ>
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b082      	sub	sp, #8
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ffa4 	bl	8005340 <SysTick_Config>
 80053f8:	4603      	mov	r3, r0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800540c:	f7fe fb34 	bl	8003a78 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e312      	b.n	8005a42 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a66      	ldr	r2, [pc, #408]	; (80055bc <HAL_DMA_Init+0x1b8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d04a      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_DMA_Init+0x1bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d045      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a63      	ldr	r2, [pc, #396]	; (80055c4 <HAL_DMA_Init+0x1c0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d040      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a62      	ldr	r2, [pc, #392]	; (80055c8 <HAL_DMA_Init+0x1c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d03b      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a60      	ldr	r2, [pc, #384]	; (80055cc <HAL_DMA_Init+0x1c8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d036      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a5f      	ldr	r2, [pc, #380]	; (80055d0 <HAL_DMA_Init+0x1cc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d031      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a5d      	ldr	r2, [pc, #372]	; (80055d4 <HAL_DMA_Init+0x1d0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d02c      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a5c      	ldr	r2, [pc, #368]	; (80055d8 <HAL_DMA_Init+0x1d4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d027      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5a      	ldr	r2, [pc, #360]	; (80055dc <HAL_DMA_Init+0x1d8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d022      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a59      	ldr	r2, [pc, #356]	; (80055e0 <HAL_DMA_Init+0x1dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d01d      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a57      	ldr	r2, [pc, #348]	; (80055e4 <HAL_DMA_Init+0x1e0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a56      	ldr	r2, [pc, #344]	; (80055e8 <HAL_DMA_Init+0x1e4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a54      	ldr	r2, [pc, #336]	; (80055ec <HAL_DMA_Init+0x1e8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a53      	ldr	r2, [pc, #332]	; (80055f0 <HAL_DMA_Init+0x1ec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a51      	ldr	r2, [pc, #324]	; (80055f4 <HAL_DMA_Init+0x1f0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <HAL_DMA_Init+0xb8>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a50      	ldr	r2, [pc, #320]	; (80055f8 <HAL_DMA_Init+0x1f4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d101      	bne.n	80054c0 <HAL_DMA_Init+0xbc>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <HAL_DMA_Init+0xbe>
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 813c 	beq.w	8005740 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a37      	ldr	r2, [pc, #220]	; (80055bc <HAL_DMA_Init+0x1b8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d04a      	beq.n	8005578 <HAL_DMA_Init+0x174>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a36      	ldr	r2, [pc, #216]	; (80055c0 <HAL_DMA_Init+0x1bc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d045      	beq.n	8005578 <HAL_DMA_Init+0x174>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <HAL_DMA_Init+0x1c0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d040      	beq.n	8005578 <HAL_DMA_Init+0x174>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a33      	ldr	r2, [pc, #204]	; (80055c8 <HAL_DMA_Init+0x1c4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d03b      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a31      	ldr	r2, [pc, #196]	; (80055cc <HAL_DMA_Init+0x1c8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d036      	beq.n	8005578 <HAL_DMA_Init+0x174>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a30      	ldr	r2, [pc, #192]	; (80055d0 <HAL_DMA_Init+0x1cc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d031      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a2e      	ldr	r2, [pc, #184]	; (80055d4 <HAL_DMA_Init+0x1d0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d02c      	beq.n	8005578 <HAL_DMA_Init+0x174>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <HAL_DMA_Init+0x1d4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d027      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2b      	ldr	r2, [pc, #172]	; (80055dc <HAL_DMA_Init+0x1d8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d022      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2a      	ldr	r2, [pc, #168]	; (80055e0 <HAL_DMA_Init+0x1dc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d01d      	beq.n	8005578 <HAL_DMA_Init+0x174>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a28      	ldr	r2, [pc, #160]	; (80055e4 <HAL_DMA_Init+0x1e0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d018      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <HAL_DMA_Init+0x1e4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d013      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a25      	ldr	r2, [pc, #148]	; (80055ec <HAL_DMA_Init+0x1e8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00e      	beq.n	8005578 <HAL_DMA_Init+0x174>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a24      	ldr	r2, [pc, #144]	; (80055f0 <HAL_DMA_Init+0x1ec>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d009      	beq.n	8005578 <HAL_DMA_Init+0x174>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_DMA_Init+0x1f0>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d004      	beq.n	8005578 <HAL_DMA_Init+0x174>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <HAL_DMA_Init+0x1f4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d108      	bne.n	800558a <HAL_DMA_Init+0x186>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e007      	b.n	800559a <HAL_DMA_Init+0x196>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f022 0201 	bic.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800559a:	e02f      	b.n	80055fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800559c:	f7fe fa6c 	bl	8003a78 <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b05      	cmp	r3, #5
 80055a8:	d928      	bls.n	80055fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2203      	movs	r2, #3
 80055b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e242      	b.n	8005a42 <HAL_DMA_Init+0x63e>
 80055bc:	40020010 	.word	0x40020010
 80055c0:	40020028 	.word	0x40020028
 80055c4:	40020040 	.word	0x40020040
 80055c8:	40020058 	.word	0x40020058
 80055cc:	40020070 	.word	0x40020070
 80055d0:	40020088 	.word	0x40020088
 80055d4:	400200a0 	.word	0x400200a0
 80055d8:	400200b8 	.word	0x400200b8
 80055dc:	40020410 	.word	0x40020410
 80055e0:	40020428 	.word	0x40020428
 80055e4:	40020440 	.word	0x40020440
 80055e8:	40020458 	.word	0x40020458
 80055ec:	40020470 	.word	0x40020470
 80055f0:	40020488 	.word	0x40020488
 80055f4:	400204a0 	.word	0x400204a0
 80055f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1c8      	bne.n	800559c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4b83      	ldr	r3, [pc, #524]	; (8005824 <HAL_DMA_Init+0x420>)
 8005616:	4013      	ands	r3, r2
 8005618:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005622:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800562e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	4313      	orrs	r3, r2
 8005646:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b04      	cmp	r3, #4
 800564e:	d107      	bne.n	8005660 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4313      	orrs	r3, r2
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b28      	cmp	r3, #40	; 0x28
 8005666:	d903      	bls.n	8005670 <HAL_DMA_Init+0x26c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b2e      	cmp	r3, #46	; 0x2e
 800566e:	d91f      	bls.n	80056b0 <HAL_DMA_Init+0x2ac>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b3e      	cmp	r3, #62	; 0x3e
 8005676:	d903      	bls.n	8005680 <HAL_DMA_Init+0x27c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b42      	cmp	r3, #66	; 0x42
 800567e:	d917      	bls.n	80056b0 <HAL_DMA_Init+0x2ac>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b46      	cmp	r3, #70	; 0x46
 8005686:	d903      	bls.n	8005690 <HAL_DMA_Init+0x28c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	2b48      	cmp	r3, #72	; 0x48
 800568e:	d90f      	bls.n	80056b0 <HAL_DMA_Init+0x2ac>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b4e      	cmp	r3, #78	; 0x4e
 8005696:	d903      	bls.n	80056a0 <HAL_DMA_Init+0x29c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	2b52      	cmp	r3, #82	; 0x52
 800569e:	d907      	bls.n	80056b0 <HAL_DMA_Init+0x2ac>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b73      	cmp	r3, #115	; 0x73
 80056a6:	d905      	bls.n	80056b4 <HAL_DMA_Init+0x2b0>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2b77      	cmp	r3, #119	; 0x77
 80056ae:	d801      	bhi.n	80056b4 <HAL_DMA_Init+0x2b0>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <HAL_DMA_Init+0x2b2>
 80056b4:	2300      	movs	r3, #0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056c0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	695b      	ldr	r3, [r3, #20]
 80056d0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f023 0307 	bic.w	r3, r3, #7
 80056d8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d117      	bne.n	800571c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00e      	beq.n	800571c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f001 fdca 	bl	8007298 <DMA_CheckFifoParam>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2240      	movs	r2, #64	; 0x40
 800570e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e192      	b.n	8005a42 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fd05 	bl	8007134 <DMA_CalcBaseAndBitshift>
 800572a:	4603      	mov	r3, r0
 800572c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005732:	f003 031f 	and.w	r3, r3, #31
 8005736:	223f      	movs	r2, #63	; 0x3f
 8005738:	409a      	lsls	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	609a      	str	r2, [r3, #8]
 800573e:	e0c8      	b.n	80058d2 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a38      	ldr	r2, [pc, #224]	; (8005828 <HAL_DMA_Init+0x424>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d022      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a37      	ldr	r2, [pc, #220]	; (800582c <HAL_DMA_Init+0x428>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d01d      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a35      	ldr	r2, [pc, #212]	; (8005830 <HAL_DMA_Init+0x42c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d018      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a34      	ldr	r2, [pc, #208]	; (8005834 <HAL_DMA_Init+0x430>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d013      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a32      	ldr	r2, [pc, #200]	; (8005838 <HAL_DMA_Init+0x434>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a31      	ldr	r2, [pc, #196]	; (800583c <HAL_DMA_Init+0x438>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d009      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a2f      	ldr	r2, [pc, #188]	; (8005840 <HAL_DMA_Init+0x43c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d004      	beq.n	8005790 <HAL_DMA_Init+0x38c>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	4a2e      	ldr	r2, [pc, #184]	; (8005844 <HAL_DMA_Init+0x440>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d101      	bne.n	8005794 <HAL_DMA_Init+0x390>
 8005790:	2301      	movs	r3, #1
 8005792:	e000      	b.n	8005796 <HAL_DMA_Init+0x392>
 8005794:	2300      	movs	r3, #0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 8092 	beq.w	80058c0 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_DMA_Init+0x424>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d021      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a20      	ldr	r2, [pc, #128]	; (800582c <HAL_DMA_Init+0x428>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d01c      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_DMA_Init+0x42c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d017      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_DMA_Init+0x430>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d012      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_DMA_Init+0x434>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00d      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <HAL_DMA_Init+0x438>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d008      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_DMA_Init+0x43c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <HAL_DMA_Init+0x3e6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_DMA_Init+0x440>)
 80057e8:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <HAL_DMA_Init+0x444>)
 8005806:	4013      	ands	r3, r2
 8005808:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b40      	cmp	r3, #64	; 0x40
 8005810:	d01c      	beq.n	800584c <HAL_DMA_Init+0x448>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b80      	cmp	r3, #128	; 0x80
 8005818:	d102      	bne.n	8005820 <HAL_DMA_Init+0x41c>
 800581a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800581e:	e016      	b.n	800584e <HAL_DMA_Init+0x44a>
 8005820:	2300      	movs	r3, #0
 8005822:	e014      	b.n	800584e <HAL_DMA_Init+0x44a>
 8005824:	fe10803f 	.word	0xfe10803f
 8005828:	58025408 	.word	0x58025408
 800582c:	5802541c 	.word	0x5802541c
 8005830:	58025430 	.word	0x58025430
 8005834:	58025444 	.word	0x58025444
 8005838:	58025458 	.word	0x58025458
 800583c:	5802546c 	.word	0x5802546c
 8005840:	58025480 	.word	0x58025480
 8005844:	58025494 	.word	0x58025494
 8005848:	fffe000f 	.word	0xfffe000f
 800584c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	68d2      	ldr	r2, [r2, #12]
 8005852:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005854:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800585c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005864:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800586c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005874:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800587c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	461a      	mov	r2, r3
 8005892:	4b6e      	ldr	r3, [pc, #440]	; (8005a4c <HAL_DMA_Init+0x648>)
 8005894:	4413      	add	r3, r2
 8005896:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <HAL_DMA_Init+0x64c>)
 8005898:	fba2 2303 	umull	r2, r3, r2, r3
 800589c:	091b      	lsrs	r3, r3, #4
 800589e:	009a      	lsls	r2, r3, #2
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fc45 	bl	8007134 <DMA_CalcBaseAndBitshift>
 80058aa:	4603      	mov	r3, r0
 80058ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	2201      	movs	r2, #1
 80058b8:	409a      	lsls	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	605a      	str	r2, [r3, #4]
 80058be:	e008      	b.n	80058d2 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2240      	movs	r2, #64	; 0x40
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2203      	movs	r2, #3
 80058ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e0b7      	b.n	8005a42 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a5f      	ldr	r2, [pc, #380]	; (8005a54 <HAL_DMA_Init+0x650>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d072      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a5d      	ldr	r2, [pc, #372]	; (8005a58 <HAL_DMA_Init+0x654>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d06d      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a5c      	ldr	r2, [pc, #368]	; (8005a5c <HAL_DMA_Init+0x658>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d068      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a5a      	ldr	r2, [pc, #360]	; (8005a60 <HAL_DMA_Init+0x65c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d063      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a59      	ldr	r2, [pc, #356]	; (8005a64 <HAL_DMA_Init+0x660>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d05e      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a57      	ldr	r2, [pc, #348]	; (8005a68 <HAL_DMA_Init+0x664>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d059      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a56      	ldr	r2, [pc, #344]	; (8005a6c <HAL_DMA_Init+0x668>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d054      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a54      	ldr	r2, [pc, #336]	; (8005a70 <HAL_DMA_Init+0x66c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d04f      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <HAL_DMA_Init+0x670>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d04a      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a51      	ldr	r2, [pc, #324]	; (8005a78 <HAL_DMA_Init+0x674>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d045      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a50      	ldr	r2, [pc, #320]	; (8005a7c <HAL_DMA_Init+0x678>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d040      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a4e      	ldr	r2, [pc, #312]	; (8005a80 <HAL_DMA_Init+0x67c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d03b      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a4d      	ldr	r2, [pc, #308]	; (8005a84 <HAL_DMA_Init+0x680>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d036      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a4b      	ldr	r2, [pc, #300]	; (8005a88 <HAL_DMA_Init+0x684>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d031      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a4a      	ldr	r2, [pc, #296]	; (8005a8c <HAL_DMA_Init+0x688>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d02c      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a48      	ldr	r2, [pc, #288]	; (8005a90 <HAL_DMA_Init+0x68c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d027      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a47      	ldr	r2, [pc, #284]	; (8005a94 <HAL_DMA_Init+0x690>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a45      	ldr	r2, [pc, #276]	; (8005a98 <HAL_DMA_Init+0x694>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01d      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a44      	ldr	r2, [pc, #272]	; (8005a9c <HAL_DMA_Init+0x698>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d018      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a42      	ldr	r2, [pc, #264]	; (8005aa0 <HAL_DMA_Init+0x69c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a41      	ldr	r2, [pc, #260]	; (8005aa4 <HAL_DMA_Init+0x6a0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <HAL_DMA_Init+0x6a4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d009      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a3e      	ldr	r2, [pc, #248]	; (8005aac <HAL_DMA_Init+0x6a8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d004      	beq.n	80059c2 <HAL_DMA_Init+0x5be>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3c      	ldr	r2, [pc, #240]	; (8005ab0 <HAL_DMA_Init+0x6ac>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d101      	bne.n	80059c6 <HAL_DMA_Init+0x5c2>
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_DMA_Init+0x5c4>
 80059c6:	2300      	movs	r3, #0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d032      	beq.n	8005a32 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fcdf 	bl	8007390 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d102      	bne.n	80059e0 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_DMA_Init+0x61c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d80c      	bhi.n	8005a20 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fd5c 	bl	80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a1c:	605a      	str	r2, [r3, #4]
 8005a1e:	e008      	b.n	8005a32 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	a7fdabf8 	.word	0xa7fdabf8
 8005a50:	cccccccd 	.word	0xcccccccd
 8005a54:	40020010 	.word	0x40020010
 8005a58:	40020028 	.word	0x40020028
 8005a5c:	40020040 	.word	0x40020040
 8005a60:	40020058 	.word	0x40020058
 8005a64:	40020070 	.word	0x40020070
 8005a68:	40020088 	.word	0x40020088
 8005a6c:	400200a0 	.word	0x400200a0
 8005a70:	400200b8 	.word	0x400200b8
 8005a74:	40020410 	.word	0x40020410
 8005a78:	40020428 	.word	0x40020428
 8005a7c:	40020440 	.word	0x40020440
 8005a80:	40020458 	.word	0x40020458
 8005a84:	40020470 	.word	0x40020470
 8005a88:	40020488 	.word	0x40020488
 8005a8c:	400204a0 	.word	0x400204a0
 8005a90:	400204b8 	.word	0x400204b8
 8005a94:	58025408 	.word	0x58025408
 8005a98:	5802541c 	.word	0x5802541c
 8005a9c:	58025430 	.word	0x58025430
 8005aa0:	58025444 	.word	0x58025444
 8005aa4:	58025458 	.word	0x58025458
 8005aa8:	5802546c 	.word	0x5802546c
 8005aac:	58025480 	.word	0x58025480
 8005ab0:	58025494 	.word	0x58025494

08005ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e226      	b.n	8005f1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_DMA_Start_IT+0x2a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e21f      	b.n	8005f1e <HAL_DMA_Start_IT+0x46a>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	f040 820a 	bne.w	8005f08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a68      	ldr	r2, [pc, #416]	; (8005ca8 <HAL_DMA_Start_IT+0x1f4>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d04a      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a66      	ldr	r2, [pc, #408]	; (8005cac <HAL_DMA_Start_IT+0x1f8>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d045      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a65      	ldr	r2, [pc, #404]	; (8005cb0 <HAL_DMA_Start_IT+0x1fc>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d040      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a63      	ldr	r2, [pc, #396]	; (8005cb4 <HAL_DMA_Start_IT+0x200>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d03b      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a62      	ldr	r2, [pc, #392]	; (8005cb8 <HAL_DMA_Start_IT+0x204>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d036      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a60      	ldr	r2, [pc, #384]	; (8005cbc <HAL_DMA_Start_IT+0x208>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d031      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5f      	ldr	r2, [pc, #380]	; (8005cc0 <HAL_DMA_Start_IT+0x20c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d02c      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5d      	ldr	r2, [pc, #372]	; (8005cc4 <HAL_DMA_Start_IT+0x210>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d027      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a5c      	ldr	r2, [pc, #368]	; (8005cc8 <HAL_DMA_Start_IT+0x214>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d022      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a5a      	ldr	r2, [pc, #360]	; (8005ccc <HAL_DMA_Start_IT+0x218>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d01d      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a59      	ldr	r2, [pc, #356]	; (8005cd0 <HAL_DMA_Start_IT+0x21c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d018      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a57      	ldr	r2, [pc, #348]	; (8005cd4 <HAL_DMA_Start_IT+0x220>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d013      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a56      	ldr	r2, [pc, #344]	; (8005cd8 <HAL_DMA_Start_IT+0x224>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a54      	ldr	r2, [pc, #336]	; (8005cdc <HAL_DMA_Start_IT+0x228>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d009      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a53      	ldr	r2, [pc, #332]	; (8005ce0 <HAL_DMA_Start_IT+0x22c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_DMA_Start_IT+0xee>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a51      	ldr	r2, [pc, #324]	; (8005ce4 <HAL_DMA_Start_IT+0x230>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d108      	bne.n	8005bb4 <HAL_DMA_Start_IT+0x100>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0201 	bic.w	r2, r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e007      	b.n	8005bc4 <HAL_DMA_Start_IT+0x110>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f001 f906 	bl	8006ddc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a34      	ldr	r2, [pc, #208]	; (8005ca8 <HAL_DMA_Start_IT+0x1f4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d04a      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a33      	ldr	r2, [pc, #204]	; (8005cac <HAL_DMA_Start_IT+0x1f8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d045      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a31      	ldr	r2, [pc, #196]	; (8005cb0 <HAL_DMA_Start_IT+0x1fc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d040      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a30      	ldr	r2, [pc, #192]	; (8005cb4 <HAL_DMA_Start_IT+0x200>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d03b      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a2e      	ldr	r2, [pc, #184]	; (8005cb8 <HAL_DMA_Start_IT+0x204>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d036      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a2d      	ldr	r2, [pc, #180]	; (8005cbc <HAL_DMA_Start_IT+0x208>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d031      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a2b      	ldr	r2, [pc, #172]	; (8005cc0 <HAL_DMA_Start_IT+0x20c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02c      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <HAL_DMA_Start_IT+0x210>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a28      	ldr	r2, [pc, #160]	; (8005cc8 <HAL_DMA_Start_IT+0x214>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a27      	ldr	r2, [pc, #156]	; (8005ccc <HAL_DMA_Start_IT+0x218>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a25      	ldr	r2, [pc, #148]	; (8005cd0 <HAL_DMA_Start_IT+0x21c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a24      	ldr	r2, [pc, #144]	; (8005cd4 <HAL_DMA_Start_IT+0x220>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a22      	ldr	r2, [pc, #136]	; (8005cd8 <HAL_DMA_Start_IT+0x224>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <HAL_DMA_Start_IT+0x228>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a1f      	ldr	r2, [pc, #124]	; (8005ce0 <HAL_DMA_Start_IT+0x22c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_DMA_Start_IT+0x1bc>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ce4 <HAL_DMA_Start_IT+0x230>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d101      	bne.n	8005c74 <HAL_DMA_Start_IT+0x1c0>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <HAL_DMA_Start_IT+0x1c2>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d036      	beq.n	8005ce8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f023 021e 	bic.w	r2, r3, #30
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0216 	orr.w	r2, r2, #22
 8005c8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d03e      	beq.n	8005d14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0208 	orr.w	r2, r2, #8
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	e035      	b.n	8005d14 <HAL_DMA_Start_IT+0x260>
 8005ca8:	40020010 	.word	0x40020010
 8005cac:	40020028 	.word	0x40020028
 8005cb0:	40020040 	.word	0x40020040
 8005cb4:	40020058 	.word	0x40020058
 8005cb8:	40020070 	.word	0x40020070
 8005cbc:	40020088 	.word	0x40020088
 8005cc0:	400200a0 	.word	0x400200a0
 8005cc4:	400200b8 	.word	0x400200b8
 8005cc8:	40020410 	.word	0x40020410
 8005ccc:	40020428 	.word	0x40020428
 8005cd0:	40020440 	.word	0x40020440
 8005cd4:	40020458 	.word	0x40020458
 8005cd8:	40020470 	.word	0x40020470
 8005cdc:	40020488 	.word	0x40020488
 8005ce0:	400204a0 	.word	0x400204a0
 8005ce4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 020e 	bic.w	r2, r3, #14
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 020a 	orr.w	r2, r2, #10
 8005cfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f042 0204 	orr.w	r2, r2, #4
 8005d12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a83      	ldr	r2, [pc, #524]	; (8005f28 <HAL_DMA_Start_IT+0x474>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d072      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a82      	ldr	r2, [pc, #520]	; (8005f2c <HAL_DMA_Start_IT+0x478>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d06d      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a80      	ldr	r2, [pc, #512]	; (8005f30 <HAL_DMA_Start_IT+0x47c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d068      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a7f      	ldr	r2, [pc, #508]	; (8005f34 <HAL_DMA_Start_IT+0x480>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d063      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a7d      	ldr	r2, [pc, #500]	; (8005f38 <HAL_DMA_Start_IT+0x484>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d05e      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a7c      	ldr	r2, [pc, #496]	; (8005f3c <HAL_DMA_Start_IT+0x488>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d059      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a7a      	ldr	r2, [pc, #488]	; (8005f40 <HAL_DMA_Start_IT+0x48c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d054      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a79      	ldr	r2, [pc, #484]	; (8005f44 <HAL_DMA_Start_IT+0x490>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d04f      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a77      	ldr	r2, [pc, #476]	; (8005f48 <HAL_DMA_Start_IT+0x494>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d04a      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a76      	ldr	r2, [pc, #472]	; (8005f4c <HAL_DMA_Start_IT+0x498>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d045      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a74      	ldr	r2, [pc, #464]	; (8005f50 <HAL_DMA_Start_IT+0x49c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d040      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a73      	ldr	r2, [pc, #460]	; (8005f54 <HAL_DMA_Start_IT+0x4a0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d03b      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a71      	ldr	r2, [pc, #452]	; (8005f58 <HAL_DMA_Start_IT+0x4a4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d036      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a70      	ldr	r2, [pc, #448]	; (8005f5c <HAL_DMA_Start_IT+0x4a8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d031      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a6e      	ldr	r2, [pc, #440]	; (8005f60 <HAL_DMA_Start_IT+0x4ac>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d02c      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a6d      	ldr	r2, [pc, #436]	; (8005f64 <HAL_DMA_Start_IT+0x4b0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d027      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a6b      	ldr	r2, [pc, #428]	; (8005f68 <HAL_DMA_Start_IT+0x4b4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a6a      	ldr	r2, [pc, #424]	; (8005f6c <HAL_DMA_Start_IT+0x4b8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d01d      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a68      	ldr	r2, [pc, #416]	; (8005f70 <HAL_DMA_Start_IT+0x4bc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a67      	ldr	r2, [pc, #412]	; (8005f74 <HAL_DMA_Start_IT+0x4c0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a65      	ldr	r2, [pc, #404]	; (8005f78 <HAL_DMA_Start_IT+0x4c4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a64      	ldr	r2, [pc, #400]	; (8005f7c <HAL_DMA_Start_IT+0x4c8>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a62      	ldr	r2, [pc, #392]	; (8005f80 <HAL_DMA_Start_IT+0x4cc>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_DMA_Start_IT+0x350>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a61      	ldr	r2, [pc, #388]	; (8005f84 <HAL_DMA_Start_IT+0x4d0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA_Start_IT+0x354>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <HAL_DMA_Start_IT+0x356>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01a      	beq.n	8005e44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a37      	ldr	r2, [pc, #220]	; (8005f28 <HAL_DMA_Start_IT+0x474>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d04a      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <HAL_DMA_Start_IT+0x478>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d045      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a34      	ldr	r2, [pc, #208]	; (8005f30 <HAL_DMA_Start_IT+0x47c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d040      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a33      	ldr	r2, [pc, #204]	; (8005f34 <HAL_DMA_Start_IT+0x480>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d03b      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a31      	ldr	r2, [pc, #196]	; (8005f38 <HAL_DMA_Start_IT+0x484>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d036      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a30      	ldr	r2, [pc, #192]	; (8005f3c <HAL_DMA_Start_IT+0x488>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d031      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a2e      	ldr	r2, [pc, #184]	; (8005f40 <HAL_DMA_Start_IT+0x48c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d02c      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a2d      	ldr	r2, [pc, #180]	; (8005f44 <HAL_DMA_Start_IT+0x490>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d027      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a2b      	ldr	r2, [pc, #172]	; (8005f48 <HAL_DMA_Start_IT+0x494>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d022      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2a      	ldr	r2, [pc, #168]	; (8005f4c <HAL_DMA_Start_IT+0x498>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d01d      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <HAL_DMA_Start_IT+0x49c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d018      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <HAL_DMA_Start_IT+0x4a0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d013      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a25      	ldr	r2, [pc, #148]	; (8005f58 <HAL_DMA_Start_IT+0x4a4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00e      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <HAL_DMA_Start_IT+0x4a8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d009      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a22      	ldr	r2, [pc, #136]	; (8005f60 <HAL_DMA_Start_IT+0x4ac>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_DMA_Start_IT+0x430>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a21      	ldr	r2, [pc, #132]	; (8005f64 <HAL_DMA_Start_IT+0x4b0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d108      	bne.n	8005ef6 <HAL_DMA_Start_IT+0x442>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0201 	orr.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e012      	b.n	8005f1c <HAL_DMA_Start_IT+0x468>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
 8005f06:	e009      	b.n	8005f1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40020010 	.word	0x40020010
 8005f2c:	40020028 	.word	0x40020028
 8005f30:	40020040 	.word	0x40020040
 8005f34:	40020058 	.word	0x40020058
 8005f38:	40020070 	.word	0x40020070
 8005f3c:	40020088 	.word	0x40020088
 8005f40:	400200a0 	.word	0x400200a0
 8005f44:	400200b8 	.word	0x400200b8
 8005f48:	40020410 	.word	0x40020410
 8005f4c:	40020428 	.word	0x40020428
 8005f50:	40020440 	.word	0x40020440
 8005f54:	40020458 	.word	0x40020458
 8005f58:	40020470 	.word	0x40020470
 8005f5c:	40020488 	.word	0x40020488
 8005f60:	400204a0 	.word	0x400204a0
 8005f64:	400204b8 	.word	0x400204b8
 8005f68:	58025408 	.word	0x58025408
 8005f6c:	5802541c 	.word	0x5802541c
 8005f70:	58025430 	.word	0x58025430
 8005f74:	58025444 	.word	0x58025444
 8005f78:	58025458 	.word	0x58025458
 8005f7c:	5802546c 	.word	0x5802546c
 8005f80:	58025480 	.word	0x58025480
 8005f84:	58025494 	.word	0x58025494

08005f88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f94:	4b67      	ldr	r3, [pc, #412]	; (8006134 <HAL_DMA_IRQHandler+0x1ac>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a67      	ldr	r2, [pc, #412]	; (8006138 <HAL_DMA_IRQHandler+0x1b0>)
 8005f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9e:	0a9b      	lsrs	r3, r3, #10
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a5f      	ldr	r2, [pc, #380]	; (800613c <HAL_DMA_IRQHandler+0x1b4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d04a      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a5d      	ldr	r2, [pc, #372]	; (8006140 <HAL_DMA_IRQHandler+0x1b8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d045      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a5c      	ldr	r2, [pc, #368]	; (8006144 <HAL_DMA_IRQHandler+0x1bc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d040      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a5a      	ldr	r2, [pc, #360]	; (8006148 <HAL_DMA_IRQHandler+0x1c0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d03b      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a59      	ldr	r2, [pc, #356]	; (800614c <HAL_DMA_IRQHandler+0x1c4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d036      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a57      	ldr	r2, [pc, #348]	; (8006150 <HAL_DMA_IRQHandler+0x1c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d031      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a56      	ldr	r2, [pc, #344]	; (8006154 <HAL_DMA_IRQHandler+0x1cc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d02c      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a54      	ldr	r2, [pc, #336]	; (8006158 <HAL_DMA_IRQHandler+0x1d0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d027      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a53      	ldr	r2, [pc, #332]	; (800615c <HAL_DMA_IRQHandler+0x1d4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d022      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a51      	ldr	r2, [pc, #324]	; (8006160 <HAL_DMA_IRQHandler+0x1d8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a50      	ldr	r2, [pc, #320]	; (8006164 <HAL_DMA_IRQHandler+0x1dc>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a4e      	ldr	r2, [pc, #312]	; (8006168 <HAL_DMA_IRQHandler+0x1e0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4d      	ldr	r2, [pc, #308]	; (800616c <HAL_DMA_IRQHandler+0x1e4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a4b      	ldr	r2, [pc, #300]	; (8006170 <HAL_DMA_IRQHandler+0x1e8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a4a      	ldr	r2, [pc, #296]	; (8006174 <HAL_DMA_IRQHandler+0x1ec>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_DMA_IRQHandler+0xd2>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a48      	ldr	r2, [pc, #288]	; (8006178 <HAL_DMA_IRQHandler+0x1f0>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_DMA_IRQHandler+0xd6>
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_DMA_IRQHandler+0xd8>
 800605e:	2300      	movs	r3, #0
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 842b 	beq.w	80068bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606a:	f003 031f 	and.w	r3, r3, #31
 800606e:	2208      	movs	r2, #8
 8006070:	409a      	lsls	r2, r3
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	4013      	ands	r3, r2
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80a2 	beq.w	80061c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2e      	ldr	r2, [pc, #184]	; (800613c <HAL_DMA_IRQHandler+0x1b4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d04a      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2d      	ldr	r2, [pc, #180]	; (8006140 <HAL_DMA_IRQHandler+0x1b8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d045      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a2b      	ldr	r2, [pc, #172]	; (8006144 <HAL_DMA_IRQHandler+0x1bc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d040      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2a      	ldr	r2, [pc, #168]	; (8006148 <HAL_DMA_IRQHandler+0x1c0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d03b      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a28      	ldr	r2, [pc, #160]	; (800614c <HAL_DMA_IRQHandler+0x1c4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d036      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <HAL_DMA_IRQHandler+0x1c8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d031      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a25      	ldr	r2, [pc, #148]	; (8006154 <HAL_DMA_IRQHandler+0x1cc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d02c      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a24      	ldr	r2, [pc, #144]	; (8006158 <HAL_DMA_IRQHandler+0x1d0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d027      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_DMA_IRQHandler+0x1d4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d022      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a21      	ldr	r2, [pc, #132]	; (8006160 <HAL_DMA_IRQHandler+0x1d8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01d      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_DMA_IRQHandler+0x1dc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d018      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <HAL_DMA_IRQHandler+0x1e0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d013      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_DMA_IRQHandler+0x1e4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00e      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_DMA_IRQHandler+0x1e8>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d009      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_DMA_IRQHandler+0x1ec>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d004      	beq.n	800611c <HAL_DMA_IRQHandler+0x194>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_DMA_IRQHandler+0x1f0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d12f      	bne.n	800617c <HAL_DMA_IRQHandler+0x1f4>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e02e      	b.n	8006190 <HAL_DMA_IRQHandler+0x208>
 8006132:	bf00      	nop
 8006134:	24000000 	.word	0x24000000
 8006138:	1b4e81b5 	.word	0x1b4e81b5
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	bf14      	ite	ne
 800618a:	2301      	movne	r3, #1
 800618c:	2300      	moveq	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	d015      	beq.n	80061c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0204 	bic.w	r2, r2, #4
 80061a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2208      	movs	r2, #8
 80061ae:	409a      	lsls	r2, r3
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d06e      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a69      	ldr	r2, [pc, #420]	; (8006380 <HAL_DMA_IRQHandler+0x3f8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d04a      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a67      	ldr	r2, [pc, #412]	; (8006384 <HAL_DMA_IRQHandler+0x3fc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d045      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a66      	ldr	r2, [pc, #408]	; (8006388 <HAL_DMA_IRQHandler+0x400>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d040      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a64      	ldr	r2, [pc, #400]	; (800638c <HAL_DMA_IRQHandler+0x404>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d03b      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a63      	ldr	r2, [pc, #396]	; (8006390 <HAL_DMA_IRQHandler+0x408>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d036      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a61      	ldr	r2, [pc, #388]	; (8006394 <HAL_DMA_IRQHandler+0x40c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d031      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a60      	ldr	r2, [pc, #384]	; (8006398 <HAL_DMA_IRQHandler+0x410>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d02c      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a5e      	ldr	r2, [pc, #376]	; (800639c <HAL_DMA_IRQHandler+0x414>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d027      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a5d      	ldr	r2, [pc, #372]	; (80063a0 <HAL_DMA_IRQHandler+0x418>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d022      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a5b      	ldr	r2, [pc, #364]	; (80063a4 <HAL_DMA_IRQHandler+0x41c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01d      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a5a      	ldr	r2, [pc, #360]	; (80063a8 <HAL_DMA_IRQHandler+0x420>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d018      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a58      	ldr	r2, [pc, #352]	; (80063ac <HAL_DMA_IRQHandler+0x424>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d013      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a57      	ldr	r2, [pc, #348]	; (80063b0 <HAL_DMA_IRQHandler+0x428>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d00e      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a55      	ldr	r2, [pc, #340]	; (80063b4 <HAL_DMA_IRQHandler+0x42c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d009      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a54      	ldr	r2, [pc, #336]	; (80063b8 <HAL_DMA_IRQHandler+0x430>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d004      	beq.n	8006276 <HAL_DMA_IRQHandler+0x2ee>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a52      	ldr	r2, [pc, #328]	; (80063bc <HAL_DMA_IRQHandler+0x434>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d10a      	bne.n	800628c <HAL_DMA_IRQHandler+0x304>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006280:	2b00      	cmp	r3, #0
 8006282:	bf14      	ite	ne
 8006284:	2301      	movne	r3, #1
 8006286:	2300      	moveq	r3, #0
 8006288:	b2db      	uxtb	r3, r3
 800628a:	e003      	b.n	8006294 <HAL_DMA_IRQHandler+0x30c>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2300      	movs	r3, #0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00d      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800629c:	f003 031f 	and.w	r3, r3, #31
 80062a0:	2201      	movs	r2, #1
 80062a2:	409a      	lsls	r2, r3
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ac:	f043 0202 	orr.w	r2, r3, #2
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2204      	movs	r2, #4
 80062be:	409a      	lsls	r2, r3
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 808f 	beq.w	80063e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a2c      	ldr	r2, [pc, #176]	; (8006380 <HAL_DMA_IRQHandler+0x3f8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d04a      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2a      	ldr	r2, [pc, #168]	; (8006384 <HAL_DMA_IRQHandler+0x3fc>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d045      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a29      	ldr	r2, [pc, #164]	; (8006388 <HAL_DMA_IRQHandler+0x400>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d040      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a27      	ldr	r2, [pc, #156]	; (800638c <HAL_DMA_IRQHandler+0x404>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d03b      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a26      	ldr	r2, [pc, #152]	; (8006390 <HAL_DMA_IRQHandler+0x408>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d036      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a24      	ldr	r2, [pc, #144]	; (8006394 <HAL_DMA_IRQHandler+0x40c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d031      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a23      	ldr	r2, [pc, #140]	; (8006398 <HAL_DMA_IRQHandler+0x410>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d02c      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a21      	ldr	r2, [pc, #132]	; (800639c <HAL_DMA_IRQHandler+0x414>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d027      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_DMA_IRQHandler+0x418>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a1e      	ldr	r2, [pc, #120]	; (80063a4 <HAL_DMA_IRQHandler+0x41c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01d      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_DMA_IRQHandler+0x420>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a1b      	ldr	r2, [pc, #108]	; (80063ac <HAL_DMA_IRQHandler+0x424>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1a      	ldr	r2, [pc, #104]	; (80063b0 <HAL_DMA_IRQHandler+0x428>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <HAL_DMA_IRQHandler+0x42c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <HAL_DMA_IRQHandler+0x430>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <HAL_DMA_IRQHandler+0x3e2>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <HAL_DMA_IRQHandler+0x434>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d12a      	bne.n	80063c0 <HAL_DMA_IRQHandler+0x438>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e023      	b.n	80063c8 <HAL_DMA_IRQHandler+0x440>
 8006380:	40020010 	.word	0x40020010
 8006384:	40020028 	.word	0x40020028
 8006388:	40020040 	.word	0x40020040
 800638c:	40020058 	.word	0x40020058
 8006390:	40020070 	.word	0x40020070
 8006394:	40020088 	.word	0x40020088
 8006398:	400200a0 	.word	0x400200a0
 800639c:	400200b8 	.word	0x400200b8
 80063a0:	40020410 	.word	0x40020410
 80063a4:	40020428 	.word	0x40020428
 80063a8:	40020440 	.word	0x40020440
 80063ac:	40020458 	.word	0x40020458
 80063b0:	40020470 	.word	0x40020470
 80063b4:	40020488 	.word	0x40020488
 80063b8:	400204a0 	.word	0x400204a0
 80063bc:	400204b8 	.word	0x400204b8
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00d      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d0:	f003 031f 	and.w	r3, r3, #31
 80063d4:	2204      	movs	r2, #4
 80063d6:	409a      	lsls	r2, r3
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	f043 0204 	orr.w	r2, r3, #4
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	f003 031f 	and.w	r3, r3, #31
 80063f0:	2210      	movs	r2, #16
 80063f2:	409a      	lsls	r2, r3
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4013      	ands	r3, r2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	f000 80a6 	beq.w	800654a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a85      	ldr	r2, [pc, #532]	; (8006618 <HAL_DMA_IRQHandler+0x690>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d04a      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a83      	ldr	r2, [pc, #524]	; (800661c <HAL_DMA_IRQHandler+0x694>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d045      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a82      	ldr	r2, [pc, #520]	; (8006620 <HAL_DMA_IRQHandler+0x698>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d040      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a80      	ldr	r2, [pc, #512]	; (8006624 <HAL_DMA_IRQHandler+0x69c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d03b      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a7f      	ldr	r2, [pc, #508]	; (8006628 <HAL_DMA_IRQHandler+0x6a0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d036      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7d      	ldr	r2, [pc, #500]	; (800662c <HAL_DMA_IRQHandler+0x6a4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d031      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a7c      	ldr	r2, [pc, #496]	; (8006630 <HAL_DMA_IRQHandler+0x6a8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d02c      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a7a      	ldr	r2, [pc, #488]	; (8006634 <HAL_DMA_IRQHandler+0x6ac>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d027      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a79      	ldr	r2, [pc, #484]	; (8006638 <HAL_DMA_IRQHandler+0x6b0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d022      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a77      	ldr	r2, [pc, #476]	; (800663c <HAL_DMA_IRQHandler+0x6b4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01d      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a76      	ldr	r2, [pc, #472]	; (8006640 <HAL_DMA_IRQHandler+0x6b8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a74      	ldr	r2, [pc, #464]	; (8006644 <HAL_DMA_IRQHandler+0x6bc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a73      	ldr	r2, [pc, #460]	; (8006648 <HAL_DMA_IRQHandler+0x6c0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a71      	ldr	r2, [pc, #452]	; (800664c <HAL_DMA_IRQHandler+0x6c4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a70      	ldr	r2, [pc, #448]	; (8006650 <HAL_DMA_IRQHandler+0x6c8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_DMA_IRQHandler+0x516>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <HAL_DMA_IRQHandler+0x6cc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10a      	bne.n	80064b4 <HAL_DMA_IRQHandler+0x52c>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	bf14      	ite	ne
 80064ac:	2301      	movne	r3, #1
 80064ae:	2300      	moveq	r3, #0
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	e009      	b.n	80064c8 <HAL_DMA_IRQHandler+0x540>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0304 	and.w	r3, r3, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bf14      	ite	ne
 80064c2:	2301      	movne	r3, #1
 80064c4:	2300      	moveq	r3, #0
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d03e      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2210      	movs	r2, #16
 80064d6:	409a      	lsls	r2, r3
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d108      	bne.n	800650a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d024      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	4798      	blx	r3
 8006508:	e01f      	b.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01b      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	4798      	blx	r3
 800651a:	e016      	b.n	800654a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006526:	2b00      	cmp	r3, #0
 8006528:	d107      	bne.n	800653a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0208 	bic.w	r2, r2, #8
 8006538:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	2220      	movs	r2, #32
 8006554:	409a      	lsls	r2, r3
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8110 	beq.w	8006780 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_DMA_IRQHandler+0x690>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d04a      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_DMA_IRQHandler+0x694>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d045      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a29      	ldr	r2, [pc, #164]	; (8006620 <HAL_DMA_IRQHandler+0x698>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d040      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a28      	ldr	r2, [pc, #160]	; (8006624 <HAL_DMA_IRQHandler+0x69c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d03b      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a26      	ldr	r2, [pc, #152]	; (8006628 <HAL_DMA_IRQHandler+0x6a0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d036      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a25      	ldr	r2, [pc, #148]	; (800662c <HAL_DMA_IRQHandler+0x6a4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d031      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_DMA_IRQHandler+0x6a8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d02c      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a22      	ldr	r2, [pc, #136]	; (8006634 <HAL_DMA_IRQHandler+0x6ac>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d027      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_DMA_IRQHandler+0x6b0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d022      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a1f      	ldr	r2, [pc, #124]	; (800663c <HAL_DMA_IRQHandler+0x6b4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d01d      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <HAL_DMA_IRQHandler+0x6b8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d018      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a1c      	ldr	r2, [pc, #112]	; (8006644 <HAL_DMA_IRQHandler+0x6bc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d013      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <HAL_DMA_IRQHandler+0x6c0>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00e      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a19      	ldr	r2, [pc, #100]	; (800664c <HAL_DMA_IRQHandler+0x6c4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d009      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_DMA_IRQHandler+0x6c8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d004      	beq.n	8006600 <HAL_DMA_IRQHandler+0x678>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a16      	ldr	r2, [pc, #88]	; (8006654 <HAL_DMA_IRQHandler+0x6cc>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d12b      	bne.n	8006658 <HAL_DMA_IRQHandler+0x6d0>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	bf14      	ite	ne
 800660e:	2301      	movne	r3, #1
 8006610:	2300      	moveq	r3, #0
 8006612:	b2db      	uxtb	r3, r3
 8006614:	e02a      	b.n	800666c <HAL_DMA_IRQHandler+0x6e4>
 8006616:	bf00      	nop
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	bf14      	ite	ne
 8006666:	2301      	movne	r3, #1
 8006668:	2300      	moveq	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 8087 	beq.w	8006780 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2220      	movs	r2, #32
 800667c:	409a      	lsls	r2, r3
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b04      	cmp	r3, #4
 800668c:	d139      	bne.n	8006702 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0216 	bic.w	r2, r2, #22
 800669c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695a      	ldr	r2, [r3, #20]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d103      	bne.n	80066be <HAL_DMA_IRQHandler+0x736>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d007      	beq.n	80066ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f022 0208 	bic.w	r2, r2, #8
 80066cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	f003 031f 	and.w	r3, r3, #31
 80066d6:	223f      	movs	r2, #63	; 0x3f
 80066d8:	409a      	lsls	r2, r3
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 834a 	beq.w	8006d8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	4798      	blx	r3
          }
          return;
 8006700:	e344      	b.n	8006d8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d018      	beq.n	8006742 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	2b00      	cmp	r3, #0
 8006724:	d02c      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	4798      	blx	r3
 800672e:	e027      	b.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006734:	2b00      	cmp	r3, #0
 8006736:	d023      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	4798      	blx	r3
 8006740:	e01e      	b.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10f      	bne.n	8006770 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0210 	bic.w	r2, r2, #16
 800675e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8306 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 8088 	beq.w	80068a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2204      	movs	r2, #4
 800679c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a7a      	ldr	r2, [pc, #488]	; (8006990 <HAL_DMA_IRQHandler+0xa08>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d04a      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a79      	ldr	r2, [pc, #484]	; (8006994 <HAL_DMA_IRQHandler+0xa0c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d045      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a77      	ldr	r2, [pc, #476]	; (8006998 <HAL_DMA_IRQHandler+0xa10>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d040      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a76      	ldr	r2, [pc, #472]	; (800699c <HAL_DMA_IRQHandler+0xa14>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d03b      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a74      	ldr	r2, [pc, #464]	; (80069a0 <HAL_DMA_IRQHandler+0xa18>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d036      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a73      	ldr	r2, [pc, #460]	; (80069a4 <HAL_DMA_IRQHandler+0xa1c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d031      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a71      	ldr	r2, [pc, #452]	; (80069a8 <HAL_DMA_IRQHandler+0xa20>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d02c      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a70      	ldr	r2, [pc, #448]	; (80069ac <HAL_DMA_IRQHandler+0xa24>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d027      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a6e      	ldr	r2, [pc, #440]	; (80069b0 <HAL_DMA_IRQHandler+0xa28>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d022      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a6d      	ldr	r2, [pc, #436]	; (80069b4 <HAL_DMA_IRQHandler+0xa2c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d01d      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a6b      	ldr	r2, [pc, #428]	; (80069b8 <HAL_DMA_IRQHandler+0xa30>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d018      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a6a      	ldr	r2, [pc, #424]	; (80069bc <HAL_DMA_IRQHandler+0xa34>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d013      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a68      	ldr	r2, [pc, #416]	; (80069c0 <HAL_DMA_IRQHandler+0xa38>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00e      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a67      	ldr	r2, [pc, #412]	; (80069c4 <HAL_DMA_IRQHandler+0xa3c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d009      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a65      	ldr	r2, [pc, #404]	; (80069c8 <HAL_DMA_IRQHandler+0xa40>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d004      	beq.n	8006840 <HAL_DMA_IRQHandler+0x8b8>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a64      	ldr	r2, [pc, #400]	; (80069cc <HAL_DMA_IRQHandler+0xa44>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d108      	bne.n	8006852 <HAL_DMA_IRQHandler+0x8ca>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 0201 	bic.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	e007      	b.n	8006862 <HAL_DMA_IRQHandler+0x8da>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0201 	bic.w	r2, r2, #1
 8006860:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	429a      	cmp	r2, r3
 800686c:	d307      	bcc.n	800687e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f2      	bne.n	8006862 <HAL_DMA_IRQHandler+0x8da>
 800687c:	e000      	b.n	8006880 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800687e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2203      	movs	r2, #3
 8006892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006896:	e003      	b.n	80068a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f000 8272 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	e26c      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <HAL_DMA_IRQHandler+0xa48>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d022      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a42      	ldr	r2, [pc, #264]	; (80069d4 <HAL_DMA_IRQHandler+0xa4c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d01d      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a40      	ldr	r2, [pc, #256]	; (80069d8 <HAL_DMA_IRQHandler+0xa50>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d018      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a3f      	ldr	r2, [pc, #252]	; (80069dc <HAL_DMA_IRQHandler+0xa54>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a3d      	ldr	r2, [pc, #244]	; (80069e0 <HAL_DMA_IRQHandler+0xa58>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d00e      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_IRQHandler+0xa5c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d009      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3a      	ldr	r2, [pc, #232]	; (80069e8 <HAL_DMA_IRQHandler+0xa60>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d004      	beq.n	800690c <HAL_DMA_IRQHandler+0x984>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a39      	ldr	r2, [pc, #228]	; (80069ec <HAL_DMA_IRQHandler+0xa64>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d101      	bne.n	8006910 <HAL_DMA_IRQHandler+0x988>
 800690c:	2301      	movs	r3, #1
 800690e:	e000      	b.n	8006912 <HAL_DMA_IRQHandler+0x98a>
 8006910:	2300      	movs	r3, #0
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 823f 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006924:	f003 031f 	and.w	r3, r3, #31
 8006928:	2204      	movs	r2, #4
 800692a:	409a      	lsls	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80cd 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xb48>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80c7 	beq.w	8006ad0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2204      	movs	r2, #4
 800694c:	409a      	lsls	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d049      	beq.n	80069f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 8210 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006978:	e20a      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8206 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800698c:	e200      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
 800698e:	bf00      	nop
 8006990:	40020010 	.word	0x40020010
 8006994:	40020028 	.word	0x40020028
 8006998:	40020040 	.word	0x40020040
 800699c:	40020058 	.word	0x40020058
 80069a0:	40020070 	.word	0x40020070
 80069a4:	40020088 	.word	0x40020088
 80069a8:	400200a0 	.word	0x400200a0
 80069ac:	400200b8 	.word	0x400200b8
 80069b0:	40020410 	.word	0x40020410
 80069b4:	40020428 	.word	0x40020428
 80069b8:	40020440 	.word	0x40020440
 80069bc:	40020458 	.word	0x40020458
 80069c0:	40020470 	.word	0x40020470
 80069c4:	40020488 	.word	0x40020488
 80069c8:	400204a0 	.word	0x400204a0
 80069cc:	400204b8 	.word	0x400204b8
 80069d0:	58025408 	.word	0x58025408
 80069d4:	5802541c 	.word	0x5802541c
 80069d8:	58025430 	.word	0x58025430
 80069dc:	58025444 	.word	0x58025444
 80069e0:	58025458 	.word	0x58025458
 80069e4:	5802546c 	.word	0x5802546c
 80069e8:	58025480 	.word	0x58025480
 80069ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f003 0320 	and.w	r3, r3, #32
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d160      	bne.n	8006abc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a7f      	ldr	r2, [pc, #508]	; (8006bfc <HAL_DMA_IRQHandler+0xc74>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d04a      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7d      	ldr	r2, [pc, #500]	; (8006c00 <HAL_DMA_IRQHandler+0xc78>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d045      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7c      	ldr	r2, [pc, #496]	; (8006c04 <HAL_DMA_IRQHandler+0xc7c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d040      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a7a      	ldr	r2, [pc, #488]	; (8006c08 <HAL_DMA_IRQHandler+0xc80>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d03b      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a79      	ldr	r2, [pc, #484]	; (8006c0c <HAL_DMA_IRQHandler+0xc84>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d036      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a77      	ldr	r2, [pc, #476]	; (8006c10 <HAL_DMA_IRQHandler+0xc88>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d031      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a76      	ldr	r2, [pc, #472]	; (8006c14 <HAL_DMA_IRQHandler+0xc8c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d02c      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a74      	ldr	r2, [pc, #464]	; (8006c18 <HAL_DMA_IRQHandler+0xc90>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d027      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a73      	ldr	r2, [pc, #460]	; (8006c1c <HAL_DMA_IRQHandler+0xc94>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d022      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a71      	ldr	r2, [pc, #452]	; (8006c20 <HAL_DMA_IRQHandler+0xc98>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01d      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a70      	ldr	r2, [pc, #448]	; (8006c24 <HAL_DMA_IRQHandler+0xc9c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d018      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a6e      	ldr	r2, [pc, #440]	; (8006c28 <HAL_DMA_IRQHandler+0xca0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d013      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a6d      	ldr	r2, [pc, #436]	; (8006c2c <HAL_DMA_IRQHandler+0xca4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d00e      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a6b      	ldr	r2, [pc, #428]	; (8006c30 <HAL_DMA_IRQHandler+0xca8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d009      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a6a      	ldr	r2, [pc, #424]	; (8006c34 <HAL_DMA_IRQHandler+0xcac>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d004      	beq.n	8006a9a <HAL_DMA_IRQHandler+0xb12>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a68      	ldr	r2, [pc, #416]	; (8006c38 <HAL_DMA_IRQHandler+0xcb0>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d108      	bne.n	8006aac <HAL_DMA_IRQHandler+0xb24>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0208 	bic.w	r2, r2, #8
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	e007      	b.n	8006abc <HAL_DMA_IRQHandler+0xb34>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 8165 	beq.w	8006d90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ace:	e15f      	b.n	8006d90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad4:	f003 031f 	and.w	r3, r3, #31
 8006ad8:	2202      	movs	r2, #2
 8006ada:	409a      	lsls	r2, r3
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 80c5 	beq.w	8006c70 <HAL_DMA_IRQHandler+0xce8>
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0302 	and.w	r3, r3, #2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80bf 	beq.w	8006c70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af6:	f003 031f 	and.w	r3, r3, #31
 8006afa:	2202      	movs	r2, #2
 8006afc:	409a      	lsls	r2, r3
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d018      	beq.n	8006b3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d109      	bne.n	8006b2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 813a 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b28:	e134      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 8130 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3c:	e12a      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f040 8089 	bne.w	8006c5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2b      	ldr	r2, [pc, #172]	; (8006bfc <HAL_DMA_IRQHandler+0xc74>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04a      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a29      	ldr	r2, [pc, #164]	; (8006c00 <HAL_DMA_IRQHandler+0xc78>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d045      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a28      	ldr	r2, [pc, #160]	; (8006c04 <HAL_DMA_IRQHandler+0xc7c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d040      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a26      	ldr	r2, [pc, #152]	; (8006c08 <HAL_DMA_IRQHandler+0xc80>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d03b      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a25      	ldr	r2, [pc, #148]	; (8006c0c <HAL_DMA_IRQHandler+0xc84>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d036      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a23      	ldr	r2, [pc, #140]	; (8006c10 <HAL_DMA_IRQHandler+0xc88>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d031      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a22      	ldr	r2, [pc, #136]	; (8006c14 <HAL_DMA_IRQHandler+0xc8c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02c      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <HAL_DMA_IRQHandler+0xc90>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d027      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1f      	ldr	r2, [pc, #124]	; (8006c1c <HAL_DMA_IRQHandler+0xc94>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d022      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1d      	ldr	r2, [pc, #116]	; (8006c20 <HAL_DMA_IRQHandler+0xc98>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d01d      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a1c      	ldr	r2, [pc, #112]	; (8006c24 <HAL_DMA_IRQHandler+0xc9c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d018      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1a      	ldr	r2, [pc, #104]	; (8006c28 <HAL_DMA_IRQHandler+0xca0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d013      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a19      	ldr	r2, [pc, #100]	; (8006c2c <HAL_DMA_IRQHandler+0xca4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00e      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a17      	ldr	r2, [pc, #92]	; (8006c30 <HAL_DMA_IRQHandler+0xca8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d009      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_DMA_IRQHandler+0xcac>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d004      	beq.n	8006bea <HAL_DMA_IRQHandler+0xc62>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a14      	ldr	r2, [pc, #80]	; (8006c38 <HAL_DMA_IRQHandler+0xcb0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d128      	bne.n	8006c3c <HAL_DMA_IRQHandler+0xcb4>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0214 	bic.w	r2, r2, #20
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e027      	b.n	8006c4c <HAL_DMA_IRQHandler+0xcc4>
 8006bfc:	40020010 	.word	0x40020010
 8006c00:	40020028 	.word	0x40020028
 8006c04:	40020040 	.word	0x40020040
 8006c08:	40020058 	.word	0x40020058
 8006c0c:	40020070 	.word	0x40020070
 8006c10:	40020088 	.word	0x40020088
 8006c14:	400200a0 	.word	0x400200a0
 8006c18:	400200b8 	.word	0x400200b8
 8006c1c:	40020410 	.word	0x40020410
 8006c20:	40020428 	.word	0x40020428
 8006c24:	40020440 	.word	0x40020440
 8006c28:	40020458 	.word	0x40020458
 8006c2c:	40020470 	.word	0x40020470
 8006c30:	40020488 	.word	0x40020488
 8006c34:	400204a0 	.word	0x400204a0
 8006c38:	400204b8 	.word	0x400204b8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 020a 	bic.w	r2, r2, #10
 8006c4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	f000 8097 	beq.w	8006d94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c6e:	e091      	b.n	8006d94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c74:	f003 031f 	and.w	r3, r3, #31
 8006c78:	2208      	movs	r2, #8
 8006c7a:	409a      	lsls	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8088 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f003 0308 	and.w	r3, r3, #8
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8082 	beq.w	8006d96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a41      	ldr	r2, [pc, #260]	; (8006d9c <HAL_DMA_IRQHandler+0xe14>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a3f      	ldr	r2, [pc, #252]	; (8006da0 <HAL_DMA_IRQHandler+0xe18>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a3e      	ldr	r2, [pc, #248]	; (8006da4 <HAL_DMA_IRQHandler+0xe1c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a3c      	ldr	r2, [pc, #240]	; (8006da8 <HAL_DMA_IRQHandler+0xe20>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a3b      	ldr	r2, [pc, #236]	; (8006dac <HAL_DMA_IRQHandler+0xe24>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a39      	ldr	r2, [pc, #228]	; (8006db0 <HAL_DMA_IRQHandler+0xe28>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a38      	ldr	r2, [pc, #224]	; (8006db4 <HAL_DMA_IRQHandler+0xe2c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a36      	ldr	r2, [pc, #216]	; (8006db8 <HAL_DMA_IRQHandler+0xe30>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a35      	ldr	r2, [pc, #212]	; (8006dbc <HAL_DMA_IRQHandler+0xe34>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a33      	ldr	r2, [pc, #204]	; (8006dc0 <HAL_DMA_IRQHandler+0xe38>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a32      	ldr	r2, [pc, #200]	; (8006dc4 <HAL_DMA_IRQHandler+0xe3c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a30      	ldr	r2, [pc, #192]	; (8006dc8 <HAL_DMA_IRQHandler+0xe40>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <HAL_DMA_IRQHandler+0xe44>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_DMA_IRQHandler+0xe48>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a2c      	ldr	r2, [pc, #176]	; (8006dd4 <HAL_DMA_IRQHandler+0xe4c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xdaa>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <HAL_DMA_IRQHandler+0xe50>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <HAL_DMA_IRQHandler+0xdbc>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 021c 	bic.w	r2, r2, #28
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e007      	b.n	8006d54 <HAL_DMA_IRQHandler+0xdcc>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 020e 	bic.w	r2, r2, #14
 8006d52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	e004      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d96:	3728      	adds	r7, #40	; 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40020010 	.word	0x40020010
 8006da0:	40020028 	.word	0x40020028
 8006da4:	40020040 	.word	0x40020040
 8006da8:	40020058 	.word	0x40020058
 8006dac:	40020070 	.word	0x40020070
 8006db0:	40020088 	.word	0x40020088
 8006db4:	400200a0 	.word	0x400200a0
 8006db8:	400200b8 	.word	0x400200b8
 8006dbc:	40020410 	.word	0x40020410
 8006dc0:	40020428 	.word	0x40020428
 8006dc4:	40020440 	.word	0x40020440
 8006dc8:	40020458 	.word	0x40020458
 8006dcc:	40020470 	.word	0x40020470
 8006dd0:	40020488 	.word	0x40020488
 8006dd4:	400204a0 	.word	0x400204a0
 8006dd8:	400204b8 	.word	0x400204b8

08006ddc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a7f      	ldr	r2, [pc, #508]	; (8006ff8 <DMA_SetConfig+0x21c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d072      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a7d      	ldr	r2, [pc, #500]	; (8006ffc <DMA_SetConfig+0x220>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d06d      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7c      	ldr	r2, [pc, #496]	; (8007000 <DMA_SetConfig+0x224>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d068      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a7a      	ldr	r2, [pc, #488]	; (8007004 <DMA_SetConfig+0x228>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d063      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a79      	ldr	r2, [pc, #484]	; (8007008 <DMA_SetConfig+0x22c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d05e      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a77      	ldr	r2, [pc, #476]	; (800700c <DMA_SetConfig+0x230>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d059      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a76      	ldr	r2, [pc, #472]	; (8007010 <DMA_SetConfig+0x234>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d054      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a74      	ldr	r2, [pc, #464]	; (8007014 <DMA_SetConfig+0x238>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d04f      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a73      	ldr	r2, [pc, #460]	; (8007018 <DMA_SetConfig+0x23c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d04a      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a71      	ldr	r2, [pc, #452]	; (800701c <DMA_SetConfig+0x240>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d045      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a70      	ldr	r2, [pc, #448]	; (8007020 <DMA_SetConfig+0x244>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d040      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a6e      	ldr	r2, [pc, #440]	; (8007024 <DMA_SetConfig+0x248>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d03b      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a6d      	ldr	r2, [pc, #436]	; (8007028 <DMA_SetConfig+0x24c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d036      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a6b      	ldr	r2, [pc, #428]	; (800702c <DMA_SetConfig+0x250>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d031      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a6a      	ldr	r2, [pc, #424]	; (8007030 <DMA_SetConfig+0x254>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d02c      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a68      	ldr	r2, [pc, #416]	; (8007034 <DMA_SetConfig+0x258>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d027      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a67      	ldr	r2, [pc, #412]	; (8007038 <DMA_SetConfig+0x25c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d022      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a65      	ldr	r2, [pc, #404]	; (800703c <DMA_SetConfig+0x260>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d01d      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a64      	ldr	r2, [pc, #400]	; (8007040 <DMA_SetConfig+0x264>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d018      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a62      	ldr	r2, [pc, #392]	; (8007044 <DMA_SetConfig+0x268>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d013      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a61      	ldr	r2, [pc, #388]	; (8007048 <DMA_SetConfig+0x26c>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d00e      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a5f      	ldr	r2, [pc, #380]	; (800704c <DMA_SetConfig+0x270>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d009      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5e      	ldr	r2, [pc, #376]	; (8007050 <DMA_SetConfig+0x274>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d004      	beq.n	8006ee6 <DMA_SetConfig+0x10a>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5c      	ldr	r2, [pc, #368]	; (8007054 <DMA_SetConfig+0x278>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <DMA_SetConfig+0x10e>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <DMA_SetConfig+0x110>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d00d      	beq.n	8006f0c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ef8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d004      	beq.n	8006f0c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f0a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a39      	ldr	r2, [pc, #228]	; (8006ff8 <DMA_SetConfig+0x21c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d04a      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a38      	ldr	r2, [pc, #224]	; (8006ffc <DMA_SetConfig+0x220>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d045      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a36      	ldr	r2, [pc, #216]	; (8007000 <DMA_SetConfig+0x224>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d040      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a35      	ldr	r2, [pc, #212]	; (8007004 <DMA_SetConfig+0x228>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d03b      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a33      	ldr	r2, [pc, #204]	; (8007008 <DMA_SetConfig+0x22c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d036      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a32      	ldr	r2, [pc, #200]	; (800700c <DMA_SetConfig+0x230>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d031      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a30      	ldr	r2, [pc, #192]	; (8007010 <DMA_SetConfig+0x234>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d02c      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a2f      	ldr	r2, [pc, #188]	; (8007014 <DMA_SetConfig+0x238>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d027      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a2d      	ldr	r2, [pc, #180]	; (8007018 <DMA_SetConfig+0x23c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d022      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a2c      	ldr	r2, [pc, #176]	; (800701c <DMA_SetConfig+0x240>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d01d      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a2a      	ldr	r2, [pc, #168]	; (8007020 <DMA_SetConfig+0x244>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d018      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a29      	ldr	r2, [pc, #164]	; (8007024 <DMA_SetConfig+0x248>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d013      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a27      	ldr	r2, [pc, #156]	; (8007028 <DMA_SetConfig+0x24c>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00e      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a26      	ldr	r2, [pc, #152]	; (800702c <DMA_SetConfig+0x250>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d009      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a24      	ldr	r2, [pc, #144]	; (8007030 <DMA_SetConfig+0x254>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d004      	beq.n	8006fac <DMA_SetConfig+0x1d0>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a23      	ldr	r2, [pc, #140]	; (8007034 <DMA_SetConfig+0x258>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d101      	bne.n	8006fb0 <DMA_SetConfig+0x1d4>
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <DMA_SetConfig+0x1d6>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d059      	beq.n	800706a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	223f      	movs	r2, #63	; 0x3f
 8006fc0:	409a      	lsls	r2, r3
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fd4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	683a      	ldr	r2, [r7, #0]
 8006fdc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	2b40      	cmp	r3, #64	; 0x40
 8006fe4:	d138      	bne.n	8007058 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ff6:	e086      	b.n	8007106 <DMA_SetConfig+0x32a>
 8006ff8:	40020010 	.word	0x40020010
 8006ffc:	40020028 	.word	0x40020028
 8007000:	40020040 	.word	0x40020040
 8007004:	40020058 	.word	0x40020058
 8007008:	40020070 	.word	0x40020070
 800700c:	40020088 	.word	0x40020088
 8007010:	400200a0 	.word	0x400200a0
 8007014:	400200b8 	.word	0x400200b8
 8007018:	40020410 	.word	0x40020410
 800701c:	40020428 	.word	0x40020428
 8007020:	40020440 	.word	0x40020440
 8007024:	40020458 	.word	0x40020458
 8007028:	40020470 	.word	0x40020470
 800702c:	40020488 	.word	0x40020488
 8007030:	400204a0 	.word	0x400204a0
 8007034:	400204b8 	.word	0x400204b8
 8007038:	58025408 	.word	0x58025408
 800703c:	5802541c 	.word	0x5802541c
 8007040:	58025430 	.word	0x58025430
 8007044:	58025444 	.word	0x58025444
 8007048:	58025458 	.word	0x58025458
 800704c:	5802546c 	.word	0x5802546c
 8007050:	58025480 	.word	0x58025480
 8007054:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	60da      	str	r2, [r3, #12]
}
 8007068:	e04d      	b.n	8007106 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a29      	ldr	r2, [pc, #164]	; (8007114 <DMA_SetConfig+0x338>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d022      	beq.n	80070ba <DMA_SetConfig+0x2de>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a27      	ldr	r2, [pc, #156]	; (8007118 <DMA_SetConfig+0x33c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01d      	beq.n	80070ba <DMA_SetConfig+0x2de>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a26      	ldr	r2, [pc, #152]	; (800711c <DMA_SetConfig+0x340>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d018      	beq.n	80070ba <DMA_SetConfig+0x2de>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a24      	ldr	r2, [pc, #144]	; (8007120 <DMA_SetConfig+0x344>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <DMA_SetConfig+0x2de>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a23      	ldr	r2, [pc, #140]	; (8007124 <DMA_SetConfig+0x348>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <DMA_SetConfig+0x2de>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a21      	ldr	r2, [pc, #132]	; (8007128 <DMA_SetConfig+0x34c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <DMA_SetConfig+0x2de>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a20      	ldr	r2, [pc, #128]	; (800712c <DMA_SetConfig+0x350>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <DMA_SetConfig+0x2de>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1e      	ldr	r2, [pc, #120]	; (8007130 <DMA_SetConfig+0x354>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d101      	bne.n	80070be <DMA_SetConfig+0x2e2>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <DMA_SetConfig+0x2e4>
 80070be:	2300      	movs	r3, #0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d020      	beq.n	8007106 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c8:	f003 031f 	and.w	r3, r3, #31
 80070cc:	2201      	movs	r2, #1
 80070ce:	409a      	lsls	r2, r3
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d108      	bne.n	80070f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	60da      	str	r2, [r3, #12]
}
 80070f4:	e007      	b.n	8007106 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	60da      	str	r2, [r3, #12]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	58025408 	.word	0x58025408
 8007118:	5802541c 	.word	0x5802541c
 800711c:	58025430 	.word	0x58025430
 8007120:	58025444 	.word	0x58025444
 8007124:	58025458 	.word	0x58025458
 8007128:	5802546c 	.word	0x5802546c
 800712c:	58025480 	.word	0x58025480
 8007130:	58025494 	.word	0x58025494

08007134 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a42      	ldr	r2, [pc, #264]	; (800724c <DMA_CalcBaseAndBitshift+0x118>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04a      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a41      	ldr	r2, [pc, #260]	; (8007250 <DMA_CalcBaseAndBitshift+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d045      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a3f      	ldr	r2, [pc, #252]	; (8007254 <DMA_CalcBaseAndBitshift+0x120>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d040      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a3e      	ldr	r2, [pc, #248]	; (8007258 <DMA_CalcBaseAndBitshift+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d03b      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a3c      	ldr	r2, [pc, #240]	; (800725c <DMA_CalcBaseAndBitshift+0x128>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d036      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <DMA_CalcBaseAndBitshift+0x12c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d031      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a39      	ldr	r2, [pc, #228]	; (8007264 <DMA_CalcBaseAndBitshift+0x130>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d02c      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a38      	ldr	r2, [pc, #224]	; (8007268 <DMA_CalcBaseAndBitshift+0x134>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d027      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a36      	ldr	r2, [pc, #216]	; (800726c <DMA_CalcBaseAndBitshift+0x138>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d022      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a35      	ldr	r2, [pc, #212]	; (8007270 <DMA_CalcBaseAndBitshift+0x13c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d01d      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a33      	ldr	r2, [pc, #204]	; (8007274 <DMA_CalcBaseAndBitshift+0x140>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d018      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a32      	ldr	r2, [pc, #200]	; (8007278 <DMA_CalcBaseAndBitshift+0x144>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d013      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a30      	ldr	r2, [pc, #192]	; (800727c <DMA_CalcBaseAndBitshift+0x148>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d00e      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2f      	ldr	r2, [pc, #188]	; (8007280 <DMA_CalcBaseAndBitshift+0x14c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d009      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <DMA_CalcBaseAndBitshift+0x150>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d004      	beq.n	80071dc <DMA_CalcBaseAndBitshift+0xa8>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <DMA_CalcBaseAndBitshift+0x154>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d101      	bne.n	80071e0 <DMA_CalcBaseAndBitshift+0xac>
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <DMA_CalcBaseAndBitshift+0xae>
 80071e0:	2300      	movs	r3, #0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d024      	beq.n	8007230 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	3b10      	subs	r3, #16
 80071ee:	4a27      	ldr	r2, [pc, #156]	; (800728c <DMA_CalcBaseAndBitshift+0x158>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	091b      	lsrs	r3, r3, #4
 80071f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <DMA_CalcBaseAndBitshift+0x15c>)
 8007200:	5cd3      	ldrb	r3, [r2, r3]
 8007202:	461a      	mov	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	2b03      	cmp	r3, #3
 800720c:	d908      	bls.n	8007220 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <DMA_CalcBaseAndBitshift+0x160>)
 8007216:	4013      	ands	r3, r2
 8007218:	1d1a      	adds	r2, r3, #4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	659a      	str	r2, [r3, #88]	; 0x58
 800721e:	e00d      	b.n	800723c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	461a      	mov	r2, r3
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <DMA_CalcBaseAndBitshift+0x160>)
 8007228:	4013      	ands	r3, r2
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	6593      	str	r3, [r2, #88]	; 0x58
 800722e:	e005      	b.n	800723c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	40020010 	.word	0x40020010
 8007250:	40020028 	.word	0x40020028
 8007254:	40020040 	.word	0x40020040
 8007258:	40020058 	.word	0x40020058
 800725c:	40020070 	.word	0x40020070
 8007260:	40020088 	.word	0x40020088
 8007264:	400200a0 	.word	0x400200a0
 8007268:	400200b8 	.word	0x400200b8
 800726c:	40020410 	.word	0x40020410
 8007270:	40020428 	.word	0x40020428
 8007274:	40020440 	.word	0x40020440
 8007278:	40020458 	.word	0x40020458
 800727c:	40020470 	.word	0x40020470
 8007280:	40020488 	.word	0x40020488
 8007284:	400204a0 	.word	0x400204a0
 8007288:	400204b8 	.word	0x400204b8
 800728c:	aaaaaaab 	.word	0xaaaaaaab
 8007290:	0801859c 	.word	0x0801859c
 8007294:	fffffc00 	.word	0xfffffc00

08007298 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d120      	bne.n	80072ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b0:	2b03      	cmp	r3, #3
 80072b2:	d858      	bhi.n	8007366 <DMA_CheckFifoParam+0xce>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <DMA_CheckFifoParam+0x24>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072cd 	.word	0x080072cd
 80072c0:	080072df 	.word	0x080072df
 80072c4:	080072cd 	.word	0x080072cd
 80072c8:	08007367 	.word	0x08007367
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d048      	beq.n	800736a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072dc:	e045      	b.n	800736a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072e6:	d142      	bne.n	800736e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072ec:	e03f      	b.n	800736e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f6:	d123      	bne.n	8007340 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fc:	2b03      	cmp	r3, #3
 80072fe:	d838      	bhi.n	8007372 <DMA_CheckFifoParam+0xda>
 8007300:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <DMA_CheckFifoParam+0x70>)
 8007302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007306:	bf00      	nop
 8007308:	08007319 	.word	0x08007319
 800730c:	0800731f 	.word	0x0800731f
 8007310:	08007319 	.word	0x08007319
 8007314:	08007331 	.word	0x08007331
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	73fb      	strb	r3, [r7, #15]
        break;
 800731c:	e030      	b.n	8007380 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d025      	beq.n	8007376 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800732e:	e022      	b.n	8007376 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007338:	d11f      	bne.n	800737a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800733e:	e01c      	b.n	800737a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007344:	2b02      	cmp	r3, #2
 8007346:	d902      	bls.n	800734e <DMA_CheckFifoParam+0xb6>
 8007348:	2b03      	cmp	r3, #3
 800734a:	d003      	beq.n	8007354 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800734c:	e018      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
        break;
 8007352:	e015      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
    break;
 8007364:	e00b      	b.n	800737e <DMA_CheckFifoParam+0xe6>
        break;
 8007366:	bf00      	nop
 8007368:	e00a      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800736a:	bf00      	nop
 800736c:	e008      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800736e:	bf00      	nop
 8007370:	e006      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 8007372:	bf00      	nop
 8007374:	e004      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 8007376:	bf00      	nop
 8007378:	e002      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
        break;
 800737a:	bf00      	nop
 800737c:	e000      	b.n	8007380 <DMA_CheckFifoParam+0xe8>
    break;
 800737e:	bf00      	nop
    }
  }

  return status;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop

08007390 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a38      	ldr	r2, [pc, #224]	; (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a36      	ldr	r2, [pc, #216]	; (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a35      	ldr	r2, [pc, #212]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a33      	ldr	r2, [pc, #204]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a32      	ldr	r2, [pc, #200]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a30      	ldr	r2, [pc, #192]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a2f      	ldr	r2, [pc, #188]	; (800749c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d101      	bne.n	80073f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073ee:	2301      	movs	r3, #1
 80073f0:	e000      	b.n	80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073f2:	2300      	movs	r3, #0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01a      	beq.n	800742e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	3b08      	subs	r3, #8
 8007400:	4a28      	ldr	r2, [pc, #160]	; (80074a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007402:	fba2 2303 	umull	r2, r3, r2, r3
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800740a:	68fa      	ldr	r2, [r7, #12]
 800740c:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	461a      	mov	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a24      	ldr	r2, [pc, #144]	; (80074ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800741c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f003 031f 	and.w	r3, r3, #31
 8007424:	2201      	movs	r2, #1
 8007426:	409a      	lsls	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800742c:	e024      	b.n	8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	3b10      	subs	r3, #16
 8007436:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007438:	fba2 2303 	umull	r2, r3, r2, r3
 800743c:	091b      	lsrs	r3, r3, #4
 800743e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d806      	bhi.n	8007456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d902      	bls.n	8007456 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3308      	adds	r3, #8
 8007454:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	4b18      	ldr	r3, [pc, #96]	; (80074bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a16      	ldr	r2, [pc, #88]	; (80074c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007468:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 031f 	and.w	r3, r3, #31
 8007470:	2201      	movs	r2, #1
 8007472:	409a      	lsls	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	58025408 	.word	0x58025408
 8007488:	5802541c 	.word	0x5802541c
 800748c:	58025430 	.word	0x58025430
 8007490:	58025444 	.word	0x58025444
 8007494:	58025458 	.word	0x58025458
 8007498:	5802546c 	.word	0x5802546c
 800749c:	58025480 	.word	0x58025480
 80074a0:	58025494 	.word	0x58025494
 80074a4:	cccccccd 	.word	0xcccccccd
 80074a8:	16009600 	.word	0x16009600
 80074ac:	58025880 	.word	0x58025880
 80074b0:	aaaaaaab 	.word	0xaaaaaaab
 80074b4:	400204b8 	.word	0x400204b8
 80074b8:	4002040f 	.word	0x4002040f
 80074bc:	10008200 	.word	0x10008200
 80074c0:	40020880 	.word	0x40020880

080074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d04a      	beq.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d847      	bhi.n	8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a25      	ldr	r2, [pc, #148]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d022      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a24      	ldr	r2, [pc, #144]	; (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d01d      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a22      	ldr	r2, [pc, #136]	; (8007584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d018      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a21      	ldr	r2, [pc, #132]	; (8007588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d013      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a1f      	ldr	r2, [pc, #124]	; (800758c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1b      	ldr	r2, [pc, #108]	; (8007598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d101      	bne.n	8007534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007534:	2300      	movs	r3, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00a      	beq.n	8007550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	461a      	mov	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a15      	ldr	r2, [pc, #84]	; (80075a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800754c:	671a      	str	r2, [r3, #112]	; 0x70
 800754e:	e009      	b.n	8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a11      	ldr	r2, [pc, #68]	; (80075a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007562:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3b01      	subs	r3, #1
 8007568:	2201      	movs	r2, #1
 800756a:	409a      	lsls	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007570:	bf00      	nop
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	58025408 	.word	0x58025408
 8007580:	5802541c 	.word	0x5802541c
 8007584:	58025430 	.word	0x58025430
 8007588:	58025444 	.word	0x58025444
 800758c:	58025458 	.word	0x58025458
 8007590:	5802546c 	.word	0x5802546c
 8007594:	58025480 	.word	0x58025480
 8007598:	58025494 	.word	0x58025494
 800759c:	1600963f 	.word	0x1600963f
 80075a0:	58025940 	.word	0x58025940
 80075a4:	1000823f 	.word	0x1000823f
 80075a8:	40020940 	.word	0x40020940

080075ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b098      	sub	sp, #96	; 0x60
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80075b4:	4a84      	ldr	r2, [pc, #528]	; (80077c8 <HAL_FDCAN_Init+0x21c>)
 80075b6:	f107 030c 	add.w	r3, r7, #12
 80075ba:	4611      	mov	r1, r2
 80075bc:	224c      	movs	r2, #76	; 0x4c
 80075be:	4618      	mov	r0, r3
 80075c0:	f00f fdea 	bl	8017198 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e1c6      	b.n	800795c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a7e      	ldr	r2, [pc, #504]	; (80077cc <HAL_FDCAN_Init+0x220>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d106      	bne.n	80075e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075e0:	461a      	mov	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d106      	bne.n	8007600 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f7fb faa4 	bl	8002b48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0210 	bic.w	r2, r2, #16
 800760e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007610:	f7fc fa32 	bl	8003a78 <HAL_GetTick>
 8007614:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007616:	e014      	b.n	8007642 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007618:	f7fc fa2e 	bl	8003a78 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b0a      	cmp	r3, #10
 8007624:	d90d      	bls.n	8007642 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800762c:	f043 0201 	orr.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2203      	movs	r2, #3
 800763a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e18c      	b.n	800795c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b08      	cmp	r3, #8
 800764e:	d0e3      	beq.n	8007618 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699a      	ldr	r2, [r3, #24]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f042 0201 	orr.w	r2, r2, #1
 800765e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007660:	f7fc fa0a 	bl	8003a78 <HAL_GetTick>
 8007664:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007666:	e014      	b.n	8007692 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007668:	f7fc fa06 	bl	8003a78 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b0a      	cmp	r3, #10
 8007674:	d90d      	bls.n	8007692 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800767c:	f043 0201 	orr.w	r2, r3, #1
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2203      	movs	r2, #3
 800768a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e164      	b.n	800795c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0e3      	beq.n	8007668 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	699a      	ldr	r2, [r3, #24]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0202 	orr.w	r2, r2, #2
 80076ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	7c1b      	ldrb	r3, [r3, #16]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d108      	bne.n	80076ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699a      	ldr	r2, [r3, #24]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c6:	619a      	str	r2, [r3, #24]
 80076c8:	e007      	b.n	80076da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	699a      	ldr	r2, [r3, #24]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	7c5b      	ldrb	r3, [r3, #17]
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d108      	bne.n	80076f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076f0:	619a      	str	r2, [r3, #24]
 80076f2:	e007      	b.n	8007704 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	699a      	ldr	r2, [r3, #24]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007702:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	7c9b      	ldrb	r3, [r3, #18]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d108      	bne.n	800771e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	699a      	ldr	r2, [r3, #24]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800771a:	619a      	str	r2, [r3, #24]
 800771c:	e007      	b.n	800772e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800772c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007752:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0210 	bic.w	r2, r2, #16
 8007762:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d108      	bne.n	800777e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0204 	orr.w	r2, r2, #4
 800777a:	619a      	str	r2, [r3, #24]
 800777c:	e030      	b.n	80077e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d02c      	beq.n	80077e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b02      	cmp	r3, #2
 800778c:	d020      	beq.n	80077d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800779c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0210 	orr.w	r2, r2, #16
 80077ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	2b03      	cmp	r3, #3
 80077b4:	d114      	bne.n	80077e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699a      	ldr	r2, [r3, #24]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0220 	orr.w	r2, r2, #32
 80077c4:	619a      	str	r2, [r3, #24]
 80077c6:	e00b      	b.n	80077e0 <HAL_FDCAN_Init+0x234>
 80077c8:	08018488 	.word	0x08018488
 80077cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699a      	ldr	r2, [r3, #24]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0220 	orr.w	r2, r2, #32
 80077de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	3b01      	subs	r3, #1
 80077e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	3b01      	subs	r3, #1
 80077ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	3b01      	subs	r3, #1
 8007802:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007808:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800780a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007814:	d115      	bne.n	8007842 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007820:	3b01      	subs	r3, #1
 8007822:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007824:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	3b01      	subs	r3, #1
 800782c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800782e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007836:	3b01      	subs	r3, #1
 8007838:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800783e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007840:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	430a      	orrs	r2, r1
 800785c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007868:	4413      	add	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d011      	beq.n	8007892 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007876:	f023 0107 	bic.w	r1, r3, #7
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800787e:	009b      	lsls	r3, r3, #2
 8007880:	3360      	adds	r3, #96	; 0x60
 8007882:	443b      	add	r3, r7
 8007884:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007896:	2b00      	cmp	r3, #0
 8007898:	d011      	beq.n	80078be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078a2:	f023 0107 	bic.w	r1, r3, #7
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	009b      	lsls	r3, r3, #2
 80078ac:	3360      	adds	r3, #96	; 0x60
 80078ae:	443b      	add	r3, r7
 80078b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d012      	beq.n	80078ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078ce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	3360      	adds	r3, #96	; 0x60
 80078da:	443b      	add	r3, r7
 80078dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078e0:	011a      	lsls	r2, r3, #4
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d012      	beq.n	800791a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078fc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	3360      	adds	r3, #96	; 0x60
 8007908:	443b      	add	r3, r7
 800790a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800790e:	021a      	lsls	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	430a      	orrs	r2, r1
 8007916:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a11      	ldr	r2, [pc, #68]	; (8007964 <HAL_FDCAN_Init+0x3b8>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d107      	bne.n	8007934 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f022 0203 	bic.w	r2, r2, #3
 8007932:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f80b 	bl	8007968 <FDCAN_CalcultateRamBlockAddresses>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007958:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800795c:	4618      	mov	r0, r3
 800795e:	3760      	adds	r7, #96	; 0x60
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	4000a000 	.word	0x4000a000

08007968 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007974:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800797e:	4ba7      	ldr	r3, [pc, #668]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007980:	4013      	ands	r3, r2
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	0091      	lsls	r1, r2, #2
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	6812      	ldr	r2, [r2, #0]
 800798a:	430b      	orrs	r3, r1
 800798c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007998:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a0:	041a      	lsls	r2, r3, #16
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	4413      	add	r3, r2
 80079b4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80079be:	4b97      	ldr	r3, [pc, #604]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0091      	lsls	r1, r2, #2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6812      	ldr	r2, [r2, #0]
 80079ca:	430b      	orrs	r3, r1
 80079cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	041a      	lsls	r2, r3, #16
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	4413      	add	r3, r2
 80079f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007a00:	4b86      	ldr	r3, [pc, #536]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	0091      	lsls	r1, r2, #2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	041a      	lsls	r2, r3, #16
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a36:	fb02 f303 	mul.w	r3, r2, r3
 8007a3a:	68ba      	ldr	r2, [r7, #8]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a48:	4b74      	ldr	r3, [pc, #464]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	0091      	lsls	r1, r2, #2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6812      	ldr	r2, [r2, #0]
 8007a54:	430b      	orrs	r3, r1
 8007a56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6a:	041a      	lsls	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	430a      	orrs	r2, r1
 8007a72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a7e:	fb02 f303 	mul.w	r3, r2, r3
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a90:	4b62      	ldr	r3, [pc, #392]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a92:	4013      	ands	r3, r2
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	0091      	lsls	r1, r2, #2
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	6812      	ldr	r2, [r2, #0]
 8007a9c:	430b      	orrs	r3, r1
 8007a9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007abc:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007abe:	4013      	ands	r3, r2
 8007ac0:	68ba      	ldr	r2, [r7, #8]
 8007ac2:	0091      	lsls	r1, r2, #2
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6812      	ldr	r2, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ad6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ade:	041a      	lsls	r2, r3, #16
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	4413      	add	r3, r2
 8007af4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	0091      	lsls	r1, r2, #2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	430b      	orrs	r3, r1
 8007b0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b18:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b20:	041a      	lsls	r2, r3, #16
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	430a      	orrs	r2, r1
 8007b28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b34:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b3c:	061a      	lsls	r2, r3, #24
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b4c:	4b34      	ldr	r3, [pc, #208]	; (8007c20 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b4e:	4413      	add	r3, r2
 8007b50:	009a      	lsls	r2, r3, #2
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	441a      	add	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	441a      	add	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b96:	6879      	ldr	r1, [r7, #4]
 8007b98:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	00db      	lsls	r3, r3, #3
 8007bcc:	441a      	add	r2, r3
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007be2:	fb01 f303 	mul.w	r3, r1, r3
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	441a      	add	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c12:	4a04      	ldr	r2, [pc, #16]	; (8007c24 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d915      	bls.n	8007c44 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007c18:	e006      	b.n	8007c28 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007c1a:	bf00      	nop
 8007c1c:	ffff0003 	.word	0xffff0003
 8007c20:	10002b00 	.word	0x10002b00
 8007c24:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c2e:	f043 0220 	orr.w	r2, r3, #32
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e010      	b.n	8007c66 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c48:	60fb      	str	r3, [r7, #12]
 8007c4a:	e005      	b.n	8007c58 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	3304      	adds	r3, #4
 8007c56:	60fb      	str	r3, [r7, #12]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3f3      	bcc.n	8007c4c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop

08007c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b089      	sub	sp, #36	; 0x24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c82:	4b86      	ldr	r3, [pc, #536]	; (8007e9c <HAL_GPIO_Init+0x228>)
 8007c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c86:	e18c      	b.n	8007fa2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	4013      	ands	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	f000 817e 	beq.w	8007f9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d005      	beq.n	8007cb8 <HAL_GPIO_Init+0x44>
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	f003 0303 	and.w	r3, r3, #3
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d130      	bne.n	8007d1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	4013      	ands	r3, r2
 8007cce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cee:	2201      	movs	r2, #1
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43db      	mvns	r3, r3
 8007cf8:	69ba      	ldr	r2, [r7, #24]
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	091b      	lsrs	r3, r3, #4
 8007d04:	f003 0201 	and.w	r2, r3, #1
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d017      	beq.n	8007d56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	005b      	lsls	r3, r3, #1
 8007d30:	2203      	movs	r2, #3
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	43db      	mvns	r3, r3
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	fa02 f303 	lsl.w	r3, r2, r3
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d123      	bne.n	8007daa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	08da      	lsrs	r2, r3, #3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	3208      	adds	r2, #8
 8007d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	220f      	movs	r2, #15
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	4013      	ands	r3, r2
 8007d84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	691a      	ldr	r2, [r3, #16]
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	08da      	lsrs	r2, r3, #3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3208      	adds	r2, #8
 8007da4:	69b9      	ldr	r1, [r7, #24]
 8007da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007db0:	69fb      	ldr	r3, [r7, #28]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	2203      	movs	r2, #3
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	43db      	mvns	r3, r3
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f003 0203 	and.w	r2, r3, #3
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	005b      	lsls	r3, r3, #1
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	69ba      	ldr	r2, [r7, #24]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f000 80d8 	beq.w	8007f9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dec:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <HAL_GPIO_Init+0x22c>)
 8007dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007df2:	4a2b      	ldr	r2, [pc, #172]	; (8007ea0 <HAL_GPIO_Init+0x22c>)
 8007df4:	f043 0302 	orr.w	r3, r3, #2
 8007df8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dfc:	4b28      	ldr	r3, [pc, #160]	; (8007ea0 <HAL_GPIO_Init+0x22c>)
 8007dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e0a:	4a26      	ldr	r2, [pc, #152]	; (8007ea4 <HAL_GPIO_Init+0x230>)
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	089b      	lsrs	r3, r3, #2
 8007e10:	3302      	adds	r3, #2
 8007e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f003 0303 	and.w	r3, r3, #3
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	220f      	movs	r2, #15
 8007e22:	fa02 f303 	lsl.w	r3, r2, r3
 8007e26:	43db      	mvns	r3, r3
 8007e28:	69ba      	ldr	r2, [r7, #24]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <HAL_GPIO_Init+0x234>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d04a      	beq.n	8007ecc <HAL_GPIO_Init+0x258>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <HAL_GPIO_Init+0x238>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d02b      	beq.n	8007e96 <HAL_GPIO_Init+0x222>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a1b      	ldr	r2, [pc, #108]	; (8007eb0 <HAL_GPIO_Init+0x23c>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d025      	beq.n	8007e92 <HAL_GPIO_Init+0x21e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a1a      	ldr	r2, [pc, #104]	; (8007eb4 <HAL_GPIO_Init+0x240>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01f      	beq.n	8007e8e <HAL_GPIO_Init+0x21a>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a19      	ldr	r2, [pc, #100]	; (8007eb8 <HAL_GPIO_Init+0x244>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d019      	beq.n	8007e8a <HAL_GPIO_Init+0x216>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a18      	ldr	r2, [pc, #96]	; (8007ebc <HAL_GPIO_Init+0x248>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d013      	beq.n	8007e86 <HAL_GPIO_Init+0x212>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a17      	ldr	r2, [pc, #92]	; (8007ec0 <HAL_GPIO_Init+0x24c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00d      	beq.n	8007e82 <HAL_GPIO_Init+0x20e>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a16      	ldr	r2, [pc, #88]	; (8007ec4 <HAL_GPIO_Init+0x250>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d007      	beq.n	8007e7e <HAL_GPIO_Init+0x20a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a15      	ldr	r2, [pc, #84]	; (8007ec8 <HAL_GPIO_Init+0x254>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d101      	bne.n	8007e7a <HAL_GPIO_Init+0x206>
 8007e76:	2309      	movs	r3, #9
 8007e78:	e029      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e027      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e7e:	2307      	movs	r3, #7
 8007e80:	e025      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e82:	2306      	movs	r3, #6
 8007e84:	e023      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e86:	2305      	movs	r3, #5
 8007e88:	e021      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e8a:	2304      	movs	r3, #4
 8007e8c:	e01f      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e01d      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e01b      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e96:	2301      	movs	r3, #1
 8007e98:	e019      	b.n	8007ece <HAL_GPIO_Init+0x25a>
 8007e9a:	bf00      	nop
 8007e9c:	58000080 	.word	0x58000080
 8007ea0:	58024400 	.word	0x58024400
 8007ea4:	58000400 	.word	0x58000400
 8007ea8:	58020000 	.word	0x58020000
 8007eac:	58020400 	.word	0x58020400
 8007eb0:	58020800 	.word	0x58020800
 8007eb4:	58020c00 	.word	0x58020c00
 8007eb8:	58021000 	.word	0x58021000
 8007ebc:	58021400 	.word	0x58021400
 8007ec0:	58021800 	.word	0x58021800
 8007ec4:	58021c00 	.word	0x58021c00
 8007ec8:	58022400 	.word	0x58022400
 8007ecc:	2300      	movs	r3, #0
 8007ece:	69fa      	ldr	r2, [r7, #28]
 8007ed0:	f002 0203 	and.w	r2, r2, #3
 8007ed4:	0092      	lsls	r2, r2, #2
 8007ed6:	4093      	lsls	r3, r2
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ede:	4938      	ldr	r1, [pc, #224]	; (8007fc0 <HAL_GPIO_Init+0x34c>)
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	089b      	lsrs	r3, r3, #2
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	4013      	ands	r3, r2
 8007efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007f0a:	69ba      	ldr	r2, [r7, #24]
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	43db      	mvns	r3, r3
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d003      	beq.n	8007f40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f38:	69ba      	ldr	r2, [r7, #24]
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	43db      	mvns	r3, r3
 8007f52:	69ba      	ldr	r2, [r7, #24]
 8007f54:	4013      	ands	r3, r2
 8007f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	43db      	mvns	r3, r3
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	4013      	ands	r3, r2
 8007f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f47f ae6b 	bne.w	8007c88 <HAL_GPIO_Init+0x14>
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	bf00      	nop
 8007fb6:	3724      	adds	r7, #36	; 0x24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr
 8007fc0:	58000400 	.word	0x58000400

08007fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	887b      	ldrh	r3, [r7, #2]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e001      	b.n	8007fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3714      	adds	r7, #20
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
 8008000:	4613      	mov	r3, r2
 8008002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008004:	787b      	ldrb	r3, [r7, #1]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800800a:	887a      	ldrh	r2, [r7, #2]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008010:	e003      	b.n	800801a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008012:	887b      	ldrh	r3, [r7, #2]
 8008014:	041a      	lsls	r2, r3, #16
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	619a      	str	r2, [r3, #24]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
	...

08008028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e07f      	b.n	800813a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7fa fde2 	bl	8002c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2224      	movs	r2, #36	; 0x24
 8008058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f022 0201 	bic.w	r2, r2, #1
 800806a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008078:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689a      	ldr	r2, [r3, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008088:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d107      	bne.n	80080a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800809e:	609a      	str	r2, [r3, #8]
 80080a0:	e006      	b.n	80080b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80080ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d104      	bne.n	80080c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6859      	ldr	r1, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <HAL_I2C_Init+0x11c>)
 80080ce:	430b      	orrs	r3, r1
 80080d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68da      	ldr	r2, [r3, #12]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	69d9      	ldr	r1, [r3, #28]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a1a      	ldr	r2, [r3, #32]
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0201 	orr.w	r2, r2, #1
 800811a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	02008000 	.word	0x02008000

08008148 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008164:	2b00      	cmp	r3, #0
 8008166:	d005      	beq.n	8008174 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	4798      	blx	r3
  }
}
 8008174:	bf00      	nop
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b20      	cmp	r3, #32
 8008190:	d138      	bne.n	8008204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008198:	2b01      	cmp	r3, #1
 800819a:	d101      	bne.n	80081a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800819c:	2302      	movs	r3, #2
 800819e:	e032      	b.n	8008206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2224      	movs	r2, #36	; 0x24
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	6819      	ldr	r1, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e000      	b.n	8008206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008204:	2302      	movs	r3, #2
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008212:	b480      	push	{r7}
 8008214:	b085      	sub	sp, #20
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
 800821a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008222:	b2db      	uxtb	r3, r3
 8008224:	2b20      	cmp	r3, #32
 8008226:	d139      	bne.n	800829c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008232:	2302      	movs	r3, #2
 8008234:	e033      	b.n	800829e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2224      	movs	r2, #36	; 0x24
 8008242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f022 0201 	bic.w	r2, r2, #1
 8008254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	e000      	b.n	800829e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800829c:	2302      	movs	r3, #2
  }
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80082aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ac:	b08f      	sub	sp, #60	; 0x3c
 80082ae:	af0a      	add	r7, sp, #40	; 0x28
 80082b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e116      	b.n	80084ea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f00e fbc8 	bl	8016a6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2203      	movs	r2, #3
 80082e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f00a fcf7 	bl	8012cee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	603b      	str	r3, [r7, #0]
 8008306:	687e      	ldr	r6, [r7, #4]
 8008308:	466d      	mov	r5, sp
 800830a:	f106 0410 	add.w	r4, r6, #16
 800830e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008310:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008316:	e894 0003 	ldmia.w	r4, {r0, r1}
 800831a:	e885 0003 	stmia.w	r5, {r0, r1}
 800831e:	1d33      	adds	r3, r6, #4
 8008320:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008322:	6838      	ldr	r0, [r7, #0]
 8008324:	f00a fbc2 	bl	8012aac <USB_CoreInit>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e0d7      	b.n	80084ea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f00a fce5 	bl	8012d10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	e04a      	b.n	80083e2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800834c:	7bfa      	ldrb	r2, [r7, #15]
 800834e:	6879      	ldr	r1, [r7, #4]
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	4413      	add	r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	440b      	add	r3, r1
 800835a:	333d      	adds	r3, #61	; 0x3d
 800835c:	2201      	movs	r2, #1
 800835e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008360:	7bfa      	ldrb	r2, [r7, #15]
 8008362:	6879      	ldr	r1, [r7, #4]
 8008364:	4613      	mov	r3, r2
 8008366:	00db      	lsls	r3, r3, #3
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	440b      	add	r3, r1
 800836e:	333c      	adds	r3, #60	; 0x3c
 8008370:	7bfa      	ldrb	r2, [r7, #15]
 8008372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008374:	7bfa      	ldrb	r2, [r7, #15]
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	b298      	uxth	r0, r3
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	3356      	adds	r3, #86	; 0x56
 8008388:	4602      	mov	r2, r0
 800838a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800838c:	7bfa      	ldrb	r2, [r7, #15]
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3340      	adds	r3, #64	; 0x40
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	3344      	adds	r3, #68	; 0x44
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80083b4:	7bfa      	ldrb	r2, [r7, #15]
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	440b      	add	r3, r1
 80083c2:	3348      	adds	r3, #72	; 0x48
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083c8:	7bfa      	ldrb	r2, [r7, #15]
 80083ca:	6879      	ldr	r1, [r7, #4]
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	334c      	adds	r3, #76	; 0x4c
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	3301      	adds	r3, #1
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	7bfa      	ldrb	r2, [r7, #15]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d3af      	bcc.n	800834c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
 80083f0:	e044      	b.n	800847c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4613      	mov	r3, r2
 80083f8:	00db      	lsls	r3, r3, #3
 80083fa:	4413      	add	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	440b      	add	r3, r1
 8008400:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008408:	7bfa      	ldrb	r2, [r7, #15]
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800841a:	7bfa      	ldrb	r2, [r7, #15]
 800841c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800841e:	7bfa      	ldrb	r2, [r7, #15]
 8008420:	6879      	ldr	r1, [r7, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008434:	7bfa      	ldrb	r2, [r7, #15]
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4613      	mov	r3, r2
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	440b      	add	r3, r1
 8008442:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800844a:	7bfa      	ldrb	r2, [r7, #15]
 800844c:	6879      	ldr	r1, [r7, #4]
 800844e:	4613      	mov	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008460:	7bfa      	ldrb	r2, [r7, #15]
 8008462:	6879      	ldr	r1, [r7, #4]
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008472:	2200      	movs	r2, #0
 8008474:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	3301      	adds	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
 800847c:	7bfa      	ldrb	r2, [r7, #15]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	429a      	cmp	r2, r3
 8008484:	d3b5      	bcc.n	80083f2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	687e      	ldr	r6, [r7, #4]
 800848e:	466d      	mov	r5, sp
 8008490:	f106 0410 	add.w	r4, r6, #16
 8008494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800849a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800849c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80084a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80084a4:	1d33      	adds	r3, r6, #4
 80084a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084a8:	6838      	ldr	r0, [r7, #0]
 80084aa:	f00a fc7d 	bl	8012da8 <USB_DevInit>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d005      	beq.n	80084c0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e014      	b.n	80084ea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d102      	bne.n	80084de <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f96f 	bl	80097bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f00b fcbf 	bl	8013e66 <USB_DevDisconnect>

  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_PCD_Start+0x1c>
 800850a:	2302      	movs	r3, #2
 800850c:	e022      	b.n	8008554 <HAL_PCD_Start+0x62>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008526:	2b01      	cmp	r3, #1
 8008528:	d105      	bne.n	8008536 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f00a fbc6 	bl	8012ccc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4618      	mov	r0, r3
 8008546:	f00b fc6d 	bl	8013e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800855c:	b590      	push	{r4, r7, lr}
 800855e:	b08d      	sub	sp, #52	; 0x34
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f00b fd2b 	bl	8013fce <USB_GetMode>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	f040 84b7 	bne.w	8008eee <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f00b fc8f 	bl	8013ea8 <USB_ReadInterrupts>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 84ad 	beq.w	8008eec <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f00b fc7c 	bl	8013ea8 <USB_ReadInterrupts>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f003 0302 	and.w	r3, r3, #2
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d107      	bne.n	80085ca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695a      	ldr	r2, [r3, #20]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f002 0202 	and.w	r2, r2, #2
 80085c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f00b fc6a 	bl	8013ea8 <USB_ReadInterrupts>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d161      	bne.n	80086a2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	699a      	ldr	r2, [r3, #24]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0210 	bic.w	r2, r2, #16
 80085ec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	4413      	add	r3, r2
 800860a:	3304      	adds	r3, #4
 800860c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	0c5b      	lsrs	r3, r3, #17
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	2b02      	cmp	r3, #2
 8008618:	d124      	bne.n	8008664 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d035      	beq.n	8008692 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	091b      	lsrs	r3, r3, #4
 800862e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008634:	b29b      	uxth	r3, r3
 8008636:	461a      	mov	r2, r3
 8008638:	6a38      	ldr	r0, [r7, #32]
 800863a:	f00b faa1 	bl	8013b80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	68da      	ldr	r2, [r3, #12]
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	091b      	lsrs	r3, r3, #4
 8008646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800864a:	441a      	add	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	695a      	ldr	r2, [r3, #20]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	091b      	lsrs	r3, r3, #4
 8008658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800865c:	441a      	add	r2, r3
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	615a      	str	r2, [r3, #20]
 8008662:	e016      	b.n	8008692 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	0c5b      	lsrs	r3, r3, #17
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	2b06      	cmp	r3, #6
 800866e:	d110      	bne.n	8008692 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008676:	2208      	movs	r2, #8
 8008678:	4619      	mov	r1, r3
 800867a:	6a38      	ldr	r0, [r7, #32]
 800867c:	f00b fa80 	bl	8013b80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	695a      	ldr	r2, [r3, #20]
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	091b      	lsrs	r3, r3, #4
 8008688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800868c:	441a      	add	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0210 	orr.w	r2, r2, #16
 80086a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f00b fbfe 	bl	8013ea8 <USB_ReadInterrupts>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80086b6:	f040 80a7 	bne.w	8008808 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f00b fc03 	bl	8013ece <USB_ReadDevAllOutEpInterrupt>
 80086c8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086ca:	e099      	b.n	8008800 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f000 808e 	beq.w	80087f4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f00b fc27 	bl	8013f36 <USB_ReadDevOutEPInterrupt>
 80086e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f003 0301 	and.w	r3, r3, #1
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00c      	beq.n	800870e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	461a      	mov	r2, r3
 8008702:	2301      	movs	r3, #1
 8008704:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f000 fed1 	bl	80094b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00c      	beq.n	8008732 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008724:	461a      	mov	r2, r3
 8008726:	2308      	movs	r3, #8
 8008728:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800872a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 ffa7 	bl	8009680 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d008      	beq.n	800874e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008748:	461a      	mov	r2, r3
 800874a:	2310      	movs	r3, #16
 800874c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d030      	beq.n	80087ba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008760:	2b80      	cmp	r3, #128	; 0x80
 8008762:	d109      	bne.n	8008778 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008776:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	3304      	adds	r3, #4
 800878c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	78db      	ldrb	r3, [r3, #3]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d108      	bne.n	80087a8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	2200      	movs	r2, #0
 800879a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f00e fa5a 	bl	8016c5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80087a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b4:	461a      	mov	r2, r3
 80087b6:	2302      	movs	r3, #2
 80087b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d008      	beq.n	80087d6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2320      	movs	r3, #32
 80087d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ec:	461a      	mov	r2, r3
 80087ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	3301      	adds	r3, #1
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f af62 	bne.w	80086cc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4618      	mov	r0, r3
 800880e:	f00b fb4b 	bl	8013ea8 <USB_ReadInterrupts>
 8008812:	4603      	mov	r3, r0
 8008814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008818:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800881c:	f040 80db 	bne.w	80089d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f00b fb6c 	bl	8013f02 <USB_ReadDevAllInEpInterrupt>
 800882a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008830:	e0cd      	b.n	80089ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80c2 	beq.w	80089c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008844:	b2d2      	uxtb	r2, r2
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f00b fb92 	bl	8013f72 <USB_ReadDevInEPInterrupt>
 800884e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d057      	beq.n	800890a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2201      	movs	r2, #1
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800886e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	43db      	mvns	r3, r3
 8008874:	69f9      	ldr	r1, [r7, #28]
 8008876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800887a:	4013      	ands	r3, r2
 800887c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888a:	461a      	mov	r2, r3
 800888c:	2301      	movs	r3, #1
 800888e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d132      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889c:	4613      	mov	r3, r2
 800889e:	00db      	lsls	r3, r3, #3
 80088a0:	4413      	add	r3, r2
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	440b      	add	r3, r1
 80088a6:	3348      	adds	r3, #72	; 0x48
 80088a8:	6819      	ldr	r1, [r3, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ae:	4613      	mov	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	4403      	add	r3, r0
 80088b8:	3344      	adds	r3, #68	; 0x44
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4419      	add	r1, r3
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	4613      	mov	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4403      	add	r3, r0
 80088cc:	3348      	adds	r3, #72	; 0x48
 80088ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d113      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
 80088d6:	6879      	ldr	r1, [r7, #4]
 80088d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088da:	4613      	mov	r3, r2
 80088dc:	00db      	lsls	r3, r3, #3
 80088de:	4413      	add	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	440b      	add	r3, r1
 80088e4:	334c      	adds	r3, #76	; 0x4c
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d108      	bne.n	80088fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088f6:	461a      	mov	r2, r3
 80088f8:	2101      	movs	r1, #1
 80088fa:	f00b fb9b 	bl	8014034 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008900:	b2db      	uxtb	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f00e f924 	bl	8016b52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d008      	beq.n	8008926 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	461a      	mov	r2, r3
 8008922:	2308      	movs	r3, #8
 8008924:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f003 0310 	and.w	r3, r3, #16
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	015a      	lsls	r2, r3, #5
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	4413      	add	r3, r2
 8008938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893c:	461a      	mov	r2, r3
 800893e:	2310      	movs	r3, #16
 8008940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008958:	461a      	mov	r2, r3
 800895a:	2340      	movs	r3, #64	; 0x40
 800895c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d023      	beq.n	80089b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008968:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800896a:	6a38      	ldr	r0, [r7, #32]
 800896c:	f00a fb7a 	bl	8013064 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008972:	4613      	mov	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	4413      	add	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3338      	adds	r3, #56	; 0x38
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	4413      	add	r3, r2
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	78db      	ldrb	r3, [r3, #3]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d108      	bne.n	800899e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	2200      	movs	r2, #0
 8008990:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008994:	b2db      	uxtb	r3, r3
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f00e f971 	bl	8016c80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	461a      	mov	r2, r3
 80089ac:	2302      	movs	r3, #2
 80089ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80089ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fcea 	bl	8009396 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	3301      	adds	r3, #1
 80089c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ca:	085b      	lsrs	r3, r3, #1
 80089cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f47f af2e 	bne.w	8008832 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4618      	mov	r0, r3
 80089dc:	f00b fa64 	bl	8013ea8 <USB_ReadInterrupts>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089ea:	d122      	bne.n	8008a32 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fa:	f023 0301 	bic.w	r3, r3, #1
 80089fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d108      	bne.n	8008a1c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008a12:	2100      	movs	r1, #0
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fef5 	bl	8009804 <HAL_PCDEx_LPM_Callback>
 8008a1a:	e002      	b.n	8008a22 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f00e f90f 	bl	8016c40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	695a      	ldr	r2, [r3, #20]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f00b fa36 	bl	8013ea8 <USB_ReadInterrupts>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a46:	d112      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	f003 0301 	and.w	r3, r3, #1
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d102      	bne.n	8008a5e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f00e f8cb 	bl	8016bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f00b fa18 	bl	8013ea8 <USB_ReadInterrupts>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a82:	d121      	bne.n	8008ac8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a92:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d111      	bne.n	8008ac2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aac:	089b      	lsrs	r3, r3, #2
 8008aae:	f003 020f 	and.w	r2, r3, #15
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ab8:	2101      	movs	r1, #1
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 fea2 	bl	8009804 <HAL_PCDEx_LPM_Callback>
 8008ac0:	e002      	b.n	8008ac8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f00e f896 	bl	8016bf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f00b f9eb 	bl	8013ea8 <USB_ReadInterrupts>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008adc:	f040 80b7 	bne.w	8008c4e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aee:	f023 0301 	bic.w	r3, r3, #1
 8008af2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2110      	movs	r1, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f00a fab2 	bl	8013064 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b04:	e046      	b.n	8008b94 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	461a      	mov	r2, r3
 8008b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	461a      	mov	r2, r3
 8008b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	015a      	lsls	r2, r3, #5
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	4413      	add	r3, r2
 8008b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b5e:	0151      	lsls	r1, r2, #5
 8008b60:	69fa      	ldr	r2, [r7, #28]
 8008b62:	440a      	add	r2, r1
 8008b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	69fa      	ldr	r2, [r7, #28]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b90:	3301      	adds	r3, #1
 8008b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d3b3      	bcc.n	8008b06 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	69fa      	ldr	r2, [r7, #28]
 8008ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008bb0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d016      	beq.n	8008be8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bc4:	69fa      	ldr	r2, [r7, #28]
 8008bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bca:	f043 030b 	orr.w	r3, r3, #11
 8008bce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be0:	f043 030b 	orr.w	r3, r3, #11
 8008be4:	6453      	str	r3, [r2, #68]	; 0x44
 8008be6:	e015      	b.n	8008c14 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bee:	695a      	ldr	r2, [r3, #20]
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c0e:	f043 030b 	orr.w	r3, r3, #11
 8008c12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008c26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c38:	461a      	mov	r2, r3
 8008c3a:	f00b f9fb 	bl	8014034 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	695a      	ldr	r2, [r3, #20]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f00b f928 	bl	8013ea8 <USB_ReadInterrupts>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c62:	d124      	bne.n	8008cae <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f00b f9bf 	bl	8013fec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f00a fa73 	bl	801315e <USB_GetDevSpeed>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681c      	ldr	r4, [r3, #0]
 8008c84:	f001 fd88 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 8008c88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	461a      	mov	r2, r3
 8008c92:	4620      	mov	r0, r4
 8008c94:	f009 ff78 	bl	8012b88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f00d ff82 	bl	8016ba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	695a      	ldr	r2, [r3, #20]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f00b f8f8 	bl	8013ea8 <USB_ReadInterrupts>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b08      	cmp	r3, #8
 8008cc0:	d10a      	bne.n	8008cd8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f00d ff5f 	bl	8016b86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695a      	ldr	r2, [r3, #20]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f002 0208 	and.w	r2, r2, #8
 8008cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f00b f8e3 	bl	8013ea8 <USB_ReadInterrupts>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce8:	2b80      	cmp	r3, #128	; 0x80
 8008cea:	d122      	bne.n	8008d32 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008cec:	6a3b      	ldr	r3, [r7, #32]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cfc:	e014      	b.n	8008d28 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	4413      	add	r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d105      	bne.n	8008d22 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fb09 	bl	8009334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d24:	3301      	adds	r3, #1
 8008d26:	627b      	str	r3, [r7, #36]	; 0x24
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d3e5      	bcc.n	8008cfe <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f00b f8b6 	bl	8013ea8 <USB_ReadInterrupts>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d46:	d13b      	bne.n	8008dc0 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d48:	2301      	movs	r3, #1
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4c:	e02b      	b.n	8008da6 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d50:	015a      	lsls	r2, r3, #5
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	4413      	add	r3, r2
 8008d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d62:	4613      	mov	r3, r2
 8008d64:	00db      	lsls	r3, r3, #3
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3340      	adds	r3, #64	; 0x40
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d115      	bne.n	8008da0 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da12      	bge.n	8008da0 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d7e:	4613      	mov	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	333f      	adds	r3, #63	; 0x3f
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 faca 	bl	8009334 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	3301      	adds	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d3ce      	bcc.n	8008d4e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695a      	ldr	r2, [r3, #20]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f00b f86f 	bl	8013ea8 <USB_ReadInterrupts>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dd4:	d155      	bne.n	8008e82 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8008dda:	e045      	b.n	8008e68 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df0:	4613      	mov	r3, r2
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d12e      	bne.n	8008e62 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e04:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da2b      	bge.n	8008e62 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008e16:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d121      	bne.n	8008e62 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e22:	4613      	mov	r3, r2
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4413      	add	r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e30:	2201      	movs	r2, #1
 8008e32:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e34:	6a3b      	ldr	r3, [r7, #32]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e5e:	6053      	str	r3, [r2, #4]
            break;
 8008e60:	e007      	b.n	8008e72 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	3301      	adds	r3, #1
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d3b4      	bcc.n	8008ddc <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695a      	ldr	r2, [r3, #20]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f00b f80e 	bl	8013ea8 <USB_ReadInterrupts>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e96:	d10a      	bne.n	8008eae <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f00d ff03 	bl	8016ca4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f00a fff8 	bl	8013ea8 <USB_ReadInterrupts>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f003 0304 	and.w	r3, r3, #4
 8008ebe:	2b04      	cmp	r3, #4
 8008ec0:	d115      	bne.n	8008eee <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f00d fef3 	bl	8016cc0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6859      	ldr	r1, [r3, #4]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	69ba      	ldr	r2, [r7, #24]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	e000      	b.n	8008eee <HAL_PCD_IRQHandler+0x992>
      return;
 8008eec:	bf00      	nop
    }
  }
}
 8008eee:	3734      	adds	r7, #52	; 0x34
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd90      	pop	{r4, r7, pc}

08008ef4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d101      	bne.n	8008f0e <HAL_PCD_SetAddress+0x1a>
 8008f0a:	2302      	movs	r3, #2
 8008f0c:	e013      	b.n	8008f36 <HAL_PCD_SetAddress+0x42>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	78fa      	ldrb	r2, [r7, #3]
 8008f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	78fa      	ldrb	r2, [r7, #3]
 8008f24:	4611      	mov	r1, r2
 8008f26:	4618      	mov	r0, r3
 8008f28:	f00a ff56 	bl	8013dd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f34:	2300      	movs	r3, #0
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3708      	adds	r7, #8
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b084      	sub	sp, #16
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
 8008f46:	4608      	mov	r0, r1
 8008f48:	4611      	mov	r1, r2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	70fb      	strb	r3, [r7, #3]
 8008f50:	460b      	mov	r3, r1
 8008f52:	803b      	strh	r3, [r7, #0]
 8008f54:	4613      	mov	r3, r2
 8008f56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	da0f      	bge.n	8008f84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f64:	78fb      	ldrb	r3, [r7, #3]
 8008f66:	f003 020f 	and.w	r2, r3, #15
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	00db      	lsls	r3, r3, #3
 8008f6e:	4413      	add	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	3338      	adds	r3, #56	; 0x38
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	4413      	add	r3, r2
 8008f78:	3304      	adds	r3, #4
 8008f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	705a      	strb	r2, [r3, #1]
 8008f82:	e00f      	b.n	8008fa4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f84:	78fb      	ldrb	r3, [r7, #3]
 8008f86:	f003 020f 	and.w	r2, r3, #15
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008fb0:	883a      	ldrh	r2, [r7, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	78ba      	ldrb	r2, [r7, #2]
 8008fba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	785b      	ldrb	r3, [r3, #1]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d004      	beq.n	8008fce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	b29a      	uxth	r2, r3
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fce:	78bb      	ldrb	r3, [r7, #2]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d102      	bne.n	8008fda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d101      	bne.n	8008fe8 <HAL_PCD_EP_Open+0xaa>
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	e00e      	b.n	8009006 <HAL_PCD_EP_Open+0xc8>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68f9      	ldr	r1, [r7, #12]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f00a f8d6 	bl	80131a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009004:	7afb      	ldrb	r3, [r7, #11]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3710      	adds	r7, #16
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	460b      	mov	r3, r1
 8009018:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800901a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800901e:	2b00      	cmp	r3, #0
 8009020:	da0f      	bge.n	8009042 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009022:	78fb      	ldrb	r3, [r7, #3]
 8009024:	f003 020f 	and.w	r2, r3, #15
 8009028:	4613      	mov	r3, r2
 800902a:	00db      	lsls	r3, r3, #3
 800902c:	4413      	add	r3, r2
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	3338      	adds	r3, #56	; 0x38
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	4413      	add	r3, r2
 8009036:	3304      	adds	r3, #4
 8009038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2201      	movs	r2, #1
 800903e:	705a      	strb	r2, [r3, #1]
 8009040:	e00f      	b.n	8009062 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009042:	78fb      	ldrb	r3, [r7, #3]
 8009044:	f003 020f 	and.w	r2, r3, #15
 8009048:	4613      	mov	r3, r2
 800904a:	00db      	lsls	r3, r3, #3
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	4413      	add	r3, r2
 8009058:	3304      	adds	r3, #4
 800905a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	b2da      	uxtb	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009074:	2b01      	cmp	r3, #1
 8009076:	d101      	bne.n	800907c <HAL_PCD_EP_Close+0x6e>
 8009078:	2302      	movs	r3, #2
 800907a:	e00e      	b.n	800909a <HAL_PCD_EP_Close+0x8c>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	4618      	mov	r0, r3
 800908c:	f00a f914 	bl	80132b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b086      	sub	sp, #24
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
 80090ae:	460b      	mov	r3, r1
 80090b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090b2:	7afb      	ldrb	r3, [r7, #11]
 80090b4:	f003 020f 	and.w	r2, r3, #15
 80090b8:	4613      	mov	r3, r2
 80090ba:	00db      	lsls	r3, r3, #3
 80090bc:	4413      	add	r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	3304      	adds	r3, #4
 80090ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2200      	movs	r2, #0
 80090dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	2200      	movs	r2, #0
 80090e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d102      	bne.n	80090fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	461a      	mov	r2, r3
 800910a:	6979      	ldr	r1, [r7, #20]
 800910c:	f00a f9b0 	bl	8013470 <USB_EPStartXfer>

  return HAL_OK;
 8009110:	2300      	movs	r3, #0
}
 8009112:	4618      	mov	r0, r3
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009126:	78fb      	ldrb	r3, [r7, #3]
 8009128:	f003 020f 	and.w	r2, r3, #15
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	00db      	lsls	r3, r3, #3
 8009132:	4413      	add	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800913c:	681b      	ldr	r3, [r3, #0]
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b086      	sub	sp, #24
 800914e:	af00      	add	r7, sp, #0
 8009150:	60f8      	str	r0, [r7, #12]
 8009152:	607a      	str	r2, [r7, #4]
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	460b      	mov	r3, r1
 8009158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	f003 020f 	and.w	r2, r3, #15
 8009160:	4613      	mov	r3, r2
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4413      	add	r3, r2
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3338      	adds	r3, #56	; 0x38
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4413      	add	r3, r2
 800916e:	3304      	adds	r3, #4
 8009170:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2200      	movs	r2, #0
 8009182:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2201      	movs	r2, #1
 8009188:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	f003 030f 	and.w	r3, r3, #15
 8009190:	b2da      	uxtb	r2, r3
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d102      	bne.n	80091a4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6818      	ldr	r0, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	461a      	mov	r2, r3
 80091b0:	6979      	ldr	r1, [r7, #20]
 80091b2:	f00a f95d 	bl	8013470 <USB_EPStartXfer>

  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b084      	sub	sp, #16
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	f003 020f 	and.w	r2, r3, #15
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d901      	bls.n	80091de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e050      	b.n	8009280 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	da0f      	bge.n	8009206 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	f003 020f 	and.w	r2, r3, #15
 80091ec:	4613      	mov	r3, r2
 80091ee:	00db      	lsls	r3, r3, #3
 80091f0:	4413      	add	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	3338      	adds	r3, #56	; 0x38
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	4413      	add	r3, r2
 80091fa:	3304      	adds	r3, #4
 80091fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	705a      	strb	r2, [r3, #1]
 8009204:	e00d      	b.n	8009222 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009206:	78fa      	ldrb	r2, [r7, #3]
 8009208:	4613      	mov	r3, r2
 800920a:	00db      	lsls	r3, r3, #3
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	4413      	add	r3, r2
 8009218:	3304      	adds	r3, #4
 800921a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	f003 030f 	and.w	r3, r3, #15
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800923a:	2b01      	cmp	r3, #1
 800923c:	d101      	bne.n	8009242 <HAL_PCD_EP_SetStall+0x82>
 800923e:	2302      	movs	r3, #2
 8009240:	e01e      	b.n	8009280 <HAL_PCD_EP_SetStall+0xc0>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	4618      	mov	r0, r3
 8009252:	f00a fced 	bl	8013c30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009256:	78fb      	ldrb	r3, [r7, #3]
 8009258:	f003 030f 	and.w	r3, r3, #15
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6818      	ldr	r0, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	b2d9      	uxtb	r1, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009270:	461a      	mov	r2, r3
 8009272:	f00a fedf 	bl	8014034 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800927e:	2300      	movs	r3, #0
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	f003 020f 	and.w	r2, r3, #15
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d901      	bls.n	80092a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e042      	b.n	800932c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	da0f      	bge.n	80092ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	f003 020f 	and.w	r2, r3, #15
 80092b4:	4613      	mov	r3, r2
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	4413      	add	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	3338      	adds	r3, #56	; 0x38
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	4413      	add	r3, r2
 80092c2:	3304      	adds	r3, #4
 80092c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	705a      	strb	r2, [r3, #1]
 80092cc:	e00f      	b.n	80092ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092ce:	78fb      	ldrb	r3, [r7, #3]
 80092d0:	f003 020f 	and.w	r2, r3, #15
 80092d4:	4613      	mov	r3, r2
 80092d6:	00db      	lsls	r3, r3, #3
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	4413      	add	r3, r2
 80092e4:	3304      	adds	r3, #4
 80092e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	f003 030f 	and.w	r3, r3, #15
 80092fa:	b2da      	uxtb	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_PCD_EP_ClrStall+0x86>
 800930a:	2302      	movs	r3, #2
 800930c:	e00e      	b.n	800932c <HAL_PCD_EP_ClrStall+0xa4>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68f9      	ldr	r1, [r7, #12]
 800931c:	4618      	mov	r0, r3
 800931e:	f00a fcf5 	bl	8013d0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}

08009334 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009344:	2b00      	cmp	r3, #0
 8009346:	da0c      	bge.n	8009362 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009348:	78fb      	ldrb	r3, [r7, #3]
 800934a:	f003 020f 	and.w	r2, r3, #15
 800934e:	4613      	mov	r3, r2
 8009350:	00db      	lsls	r3, r3, #3
 8009352:	4413      	add	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	3338      	adds	r3, #56	; 0x38
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4413      	add	r3, r2
 800935c:	3304      	adds	r3, #4
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	e00c      	b.n	800937c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009362:	78fb      	ldrb	r3, [r7, #3]
 8009364:	f003 020f 	and.w	r2, r3, #15
 8009368:	4613      	mov	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	4413      	add	r3, r2
 8009378:	3304      	adds	r3, #4
 800937a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68f9      	ldr	r1, [r7, #12]
 8009382:	4618      	mov	r0, r3
 8009384:	f00a fb14 	bl	80139b0 <USB_EPStopXfer>
 8009388:	4603      	mov	r3, r0
 800938a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800938c:	7afb      	ldrb	r3, [r7, #11]
}
 800938e:	4618      	mov	r0, r3
 8009390:	3710      	adds	r7, #16
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b08a      	sub	sp, #40	; 0x28
 800939a:	af02      	add	r7, sp, #8
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	3338      	adds	r3, #56	; 0x38
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4413      	add	r3, r2
 80093ba:	3304      	adds	r3, #4
 80093bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	695a      	ldr	r2, [r3, #20]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d901      	bls.n	80093ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e06c      	b.n	80094a8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d902      	bls.n	80093ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	3303      	adds	r3, #3
 80093ee:	089b      	lsrs	r3, r3, #2
 80093f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093f2:	e02b      	b.n	800944c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691a      	ldr	r2, [r3, #16]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	69fa      	ldr	r2, [r7, #28]
 8009406:	429a      	cmp	r2, r3
 8009408:	d902      	bls.n	8009410 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	3303      	adds	r3, #3
 8009414:	089b      	lsrs	r3, r3, #2
 8009416:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68d9      	ldr	r1, [r3, #12]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	b2da      	uxtb	r2, r3
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009428:	b2db      	uxtb	r3, r3
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	4603      	mov	r3, r0
 800942e:	6978      	ldr	r0, [r7, #20]
 8009430:	f00a fb68 	bl	8013b04 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	68da      	ldr	r2, [r3, #12]
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	441a      	add	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	695a      	ldr	r2, [r3, #20]
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	441a      	add	r2, r3
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	015a      	lsls	r2, r3, #5
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	4413      	add	r3, r2
 8009454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	429a      	cmp	r2, r3
 8009460:	d809      	bhi.n	8009476 <PCD_WriteEmptyTxFifo+0xe0>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800946a:	429a      	cmp	r2, r3
 800946c:	d203      	bcs.n	8009476 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	691b      	ldr	r3, [r3, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1be      	bne.n	80093f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	429a      	cmp	r2, r3
 8009480:	d811      	bhi.n	80094a6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f003 030f 	and.w	r3, r3, #15
 8009488:	2201      	movs	r2, #1
 800948a:	fa02 f303 	lsl.w	r3, r2, r3
 800948e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	43db      	mvns	r3, r3
 800949c:	6939      	ldr	r1, [r7, #16]
 800949e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094a2:	4013      	ands	r3, r2
 80094a4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3720      	adds	r7, #32
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	333c      	adds	r3, #60	; 0x3c
 80094c8:	3304      	adds	r3, #4
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	015a      	lsls	r2, r3, #5
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	4413      	add	r3, r2
 80094d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d17b      	bne.n	80095de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f003 0308 	and.w	r3, r3, #8
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d015      	beq.n	800951c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	4a61      	ldr	r2, [pc, #388]	; (8009678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	f240 80b9 	bls.w	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 80b3 	beq.w	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	015a      	lsls	r2, r3, #5
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	4413      	add	r3, r2
 800950e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009512:	461a      	mov	r2, r3
 8009514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009518:	6093      	str	r3, [r2, #8]
 800951a:	e0a7      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f003 0320 	and.w	r3, r3, #32
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	4413      	add	r3, r2
 800952e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009532:	461a      	mov	r2, r3
 8009534:	2320      	movs	r3, #32
 8009536:	6093      	str	r3, [r2, #8]
 8009538:	e098      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009540:	2b00      	cmp	r3, #0
 8009542:	f040 8093 	bne.w	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	4a4b      	ldr	r2, [pc, #300]	; (8009678 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d90f      	bls.n	800956e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009554:	2b00      	cmp	r3, #0
 8009556:	d00a      	beq.n	800956e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009564:	461a      	mov	r2, r3
 8009566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800956a:	6093      	str	r3, [r2, #8]
 800956c:	e07e      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4613      	mov	r3, r2
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	4413      	add	r3, r2
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4413      	add	r3, r2
 8009580:	3304      	adds	r3, #4
 8009582:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6a1a      	ldr	r2, [r3, #32]
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	0159      	lsls	r1, r3, #5
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	440b      	add	r3, r1
 8009590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d114      	bne.n	80095d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d109      	bne.n	80095c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80095b8:	461a      	mov	r2, r3
 80095ba:	2101      	movs	r1, #1
 80095bc:	f00a fd3a 	bl	8014034 <USB_EP0_OutStart>
 80095c0:	e006      	b.n	80095d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	68da      	ldr	r2, [r3, #12]
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	695b      	ldr	r3, [r3, #20]
 80095ca:	441a      	add	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f00d faa0 	bl	8016b1c <HAL_PCD_DataOutStageCallback>
 80095dc:	e046      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4a26      	ldr	r2, [pc, #152]	; (800967c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d124      	bne.n	8009630 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00a      	beq.n	8009606 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	015a      	lsls	r2, r3, #5
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	4413      	add	r3, r2
 80095f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095fc:	461a      	mov	r2, r3
 80095fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009602:	6093      	str	r3, [r2, #8]
 8009604:	e032      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d008      	beq.n	8009622 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	4413      	add	r3, r2
 8009618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800961c:	461a      	mov	r2, r3
 800961e:	2320      	movs	r3, #32
 8009620:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f00d fa77 	bl	8016b1c <HAL_PCD_DataOutStageCallback>
 800962e:	e01d      	b.n	800966c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d114      	bne.n	8009660 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009636:	6879      	ldr	r1, [r7, #4]
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	4613      	mov	r3, r2
 800963c:	00db      	lsls	r3, r3, #3
 800963e:	4413      	add	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	440b      	add	r3, r1
 8009644:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d108      	bne.n	8009660 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6818      	ldr	r0, [r3, #0]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009658:	461a      	mov	r2, r3
 800965a:	2100      	movs	r1, #0
 800965c:	f00a fcea 	bl	8014034 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	b2db      	uxtb	r3, r3
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f00d fa58 	bl	8016b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3720      	adds	r7, #32
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	4f54300a 	.word	0x4f54300a
 800967c:	4f54310a 	.word	0x4f54310a

08009680 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b086      	sub	sp, #24
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	333c      	adds	r3, #60	; 0x3c
 8009698:	3304      	adds	r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	4a15      	ldr	r2, [pc, #84]	; (8009708 <PCD_EP_OutSetupPacket_int+0x88>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d90e      	bls.n	80096d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d009      	beq.n	80096d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	461a      	mov	r2, r3
 80096ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f00d fa0f 	bl	8016af8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4a0a      	ldr	r2, [pc, #40]	; (8009708 <PCD_EP_OutSetupPacket_int+0x88>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d90c      	bls.n	80096fc <PCD_EP_OutSetupPacket_int+0x7c>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d108      	bne.n	80096fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096f4:	461a      	mov	r2, r3
 80096f6:	2101      	movs	r1, #1
 80096f8:	f00a fc9c 	bl	8014034 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3718      	adds	r7, #24
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	4f54300a 	.word	0x4f54300a

0800970c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	460b      	mov	r3, r1
 8009716:	70fb      	strb	r3, [r7, #3]
 8009718:	4613      	mov	r3, r2
 800971a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d107      	bne.n	800973a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800972a:	883b      	ldrh	r3, [r7, #0]
 800972c:	0419      	lsls	r1, r3, #16
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	430a      	orrs	r2, r1
 8009736:	629a      	str	r2, [r3, #40]	; 0x28
 8009738:	e028      	b.n	800978c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	0c1b      	lsrs	r3, r3, #16
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	4413      	add	r3, r2
 8009746:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
 800974c:	e00d      	b.n	800976a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	3340      	adds	r3, #64	; 0x40
 8009756:	009b      	lsls	r3, r3, #2
 8009758:	4413      	add	r3, r2
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	0c1b      	lsrs	r3, r3, #16
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	4413      	add	r3, r2
 8009762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009764:	7bfb      	ldrb	r3, [r7, #15]
 8009766:	3301      	adds	r3, #1
 8009768:	73fb      	strb	r3, [r7, #15]
 800976a:	7bfa      	ldrb	r2, [r7, #15]
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	3b01      	subs	r3, #1
 8009770:	429a      	cmp	r2, r3
 8009772:	d3ec      	bcc.n	800974e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009774:	883b      	ldrh	r3, [r7, #0]
 8009776:	0418      	lsls	r0, r3, #16
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6819      	ldr	r1, [r3, #0]
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	3b01      	subs	r3, #1
 8009780:	68ba      	ldr	r2, [r7, #8]
 8009782:	4302      	orrs	r2, r0
 8009784:	3340      	adds	r3, #64	; 0x40
 8009786:	009b      	lsls	r3, r3, #2
 8009788:	440b      	add	r3, r1
 800978a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	887a      	ldrh	r2, [r7, #2]
 80097ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80097ae:	2300      	movs	r3, #0
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <HAL_PCDEx_ActivateLPM+0x44>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr
 8009800:	10000003 	.word	0x10000003

08009804 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009824:	4b19      	ldr	r3, [pc, #100]	; (800988c <HAL_PWREx_ConfigSupply+0x70>)
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	f003 0304 	and.w	r3, r3, #4
 800982c:	2b04      	cmp	r3, #4
 800982e:	d00a      	beq.n	8009846 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009830:	4b16      	ldr	r3, [pc, #88]	; (800988c <HAL_PWREx_ConfigSupply+0x70>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	f003 0307 	and.w	r3, r3, #7
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	429a      	cmp	r2, r3
 800983c:	d001      	beq.n	8009842 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e01f      	b.n	8009882 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	e01d      	b.n	8009882 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <HAL_PWREx_ConfigSupply+0x70>)
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f023 0207 	bic.w	r2, r3, #7
 800984e:	490f      	ldr	r1, [pc, #60]	; (800988c <HAL_PWREx_ConfigSupply+0x70>)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4313      	orrs	r3, r2
 8009854:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009856:	f7fa f90f 	bl	8003a78 <HAL_GetTick>
 800985a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800985c:	e009      	b.n	8009872 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800985e:	f7fa f90b 	bl	8003a78 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800986c:	d901      	bls.n	8009872 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800986e:	2301      	movs	r3, #1
 8009870:	e007      	b.n	8009882 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009872:	4b06      	ldr	r3, [pc, #24]	; (800988c <HAL_PWREx_ConfigSupply+0x70>)
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800987a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800987e:	d1ee      	bne.n	800985e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	58024800 	.word	0x58024800

08009890 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800989a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800989e:	60d3      	str	r3, [r2, #12]
}
 80098a0:	bf00      	nop
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	58024800 	.word	0x58024800

080098b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08c      	sub	sp, #48	; 0x30
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d101      	bne.n	80098c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e3c8      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f000 8087 	beq.w	80099de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098d0:	4b88      	ldr	r3, [pc, #544]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098da:	4b86      	ldr	r3, [pc, #536]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80098dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d007      	beq.n	80098f6 <HAL_RCC_OscConfig+0x46>
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	2b18      	cmp	r3, #24
 80098ea:	d110      	bne.n	800990e <HAL_RCC_OscConfig+0x5e>
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	f003 0303 	and.w	r3, r3, #3
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d10b      	bne.n	800990e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f6:	4b7f      	ldr	r3, [pc, #508]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d06c      	beq.n	80099dc <HAL_RCC_OscConfig+0x12c>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d168      	bne.n	80099dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e3a2      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009916:	d106      	bne.n	8009926 <HAL_RCC_OscConfig+0x76>
 8009918:	4b76      	ldr	r3, [pc, #472]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a75      	ldr	r2, [pc, #468]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800991e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	e02e      	b.n	8009984 <HAL_RCC_OscConfig+0xd4>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d10c      	bne.n	8009948 <HAL_RCC_OscConfig+0x98>
 800992e:	4b71      	ldr	r3, [pc, #452]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a70      	ldr	r2, [pc, #448]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009934:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009938:	6013      	str	r3, [r2, #0]
 800993a:	4b6e      	ldr	r3, [pc, #440]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a6d      	ldr	r2, [pc, #436]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009944:	6013      	str	r3, [r2, #0]
 8009946:	e01d      	b.n	8009984 <HAL_RCC_OscConfig+0xd4>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009950:	d10c      	bne.n	800996c <HAL_RCC_OscConfig+0xbc>
 8009952:	4b68      	ldr	r3, [pc, #416]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a67      	ldr	r2, [pc, #412]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800995c:	6013      	str	r3, [r2, #0]
 800995e:	4b65      	ldr	r3, [pc, #404]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a64      	ldr	r2, [pc, #400]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e00b      	b.n	8009984 <HAL_RCC_OscConfig+0xd4>
 800996c:	4b61      	ldr	r3, [pc, #388]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a60      	ldr	r2, [pc, #384]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	4b5e      	ldr	r3, [pc, #376]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a5d      	ldr	r2, [pc, #372]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 800997e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d013      	beq.n	80099b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7fa f874 	bl	8003a78 <HAL_GetTick>
 8009990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009994:	f7fa f870 	bl	8003a78 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b64      	cmp	r3, #100	; 0x64
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e356      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80099a6:	4b53      	ldr	r3, [pc, #332]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d0f0      	beq.n	8009994 <HAL_RCC_OscConfig+0xe4>
 80099b2:	e014      	b.n	80099de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099b4:	f7fa f860 	bl	8003a78 <HAL_GetTick>
 80099b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ba:	e008      	b.n	80099ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099bc:	f7fa f85c 	bl	8003a78 <HAL_GetTick>
 80099c0:	4602      	mov	r2, r0
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	2b64      	cmp	r3, #100	; 0x64
 80099c8:	d901      	bls.n	80099ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e342      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099ce:	4b49      	ldr	r3, [pc, #292]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1f0      	bne.n	80099bc <HAL_RCC_OscConfig+0x10c>
 80099da:	e000      	b.n	80099de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0302 	and.w	r3, r3, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f000 808c 	beq.w	8009b04 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099ec:	4b41      	ldr	r3, [pc, #260]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099f6:	4b3f      	ldr	r3, [pc, #252]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d007      	beq.n	8009a12 <HAL_RCC_OscConfig+0x162>
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	2b18      	cmp	r3, #24
 8009a06:	d137      	bne.n	8009a78 <HAL_RCC_OscConfig+0x1c8>
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d132      	bne.n	8009a78 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a12:	4b38      	ldr	r3, [pc, #224]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0304 	and.w	r3, r3, #4
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d005      	beq.n	8009a2a <HAL_RCC_OscConfig+0x17a>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d101      	bne.n	8009a2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e314      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a2a:	4b32      	ldr	r3, [pc, #200]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f023 0219 	bic.w	r2, r3, #25
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	68db      	ldr	r3, [r3, #12]
 8009a36:	492f      	ldr	r1, [pc, #188]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a3c:	f7fa f81c 	bl	8003a78 <HAL_GetTick>
 8009a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a42:	e008      	b.n	8009a56 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a44:	f7fa f818 	bl	8003a78 <HAL_GetTick>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	2b02      	cmp	r3, #2
 8009a50:	d901      	bls.n	8009a56 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a52:	2303      	movs	r3, #3
 8009a54:	e2fe      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a56:	4b27      	ldr	r3, [pc, #156]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f003 0304 	and.w	r3, r3, #4
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0f0      	beq.n	8009a44 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a62:	4b24      	ldr	r3, [pc, #144]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	061b      	lsls	r3, r3, #24
 8009a70:	4920      	ldr	r1, [pc, #128]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a76:	e045      	b.n	8009b04 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d026      	beq.n	8009ace <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a80:	4b1c      	ldr	r3, [pc, #112]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f023 0219 	bic.w	r2, r3, #25
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68db      	ldr	r3, [r3, #12]
 8009a8c:	4919      	ldr	r1, [pc, #100]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a92:	f7f9 fff1 	bl	8003a78 <HAL_GetTick>
 8009a96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a98:	e008      	b.n	8009aac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a9a:	f7f9 ffed 	bl	8003a78 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e2d3      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aac:	4b11      	ldr	r3, [pc, #68]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0304 	and.w	r3, r3, #4
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d0f0      	beq.n	8009a9a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ab8:	4b0e      	ldr	r3, [pc, #56]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	061b      	lsls	r3, r3, #24
 8009ac6:	490b      	ldr	r1, [pc, #44]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	604b      	str	r3, [r1, #4]
 8009acc:	e01a      	b.n	8009b04 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ace:	4b09      	ldr	r3, [pc, #36]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a08      	ldr	r2, [pc, #32]	; (8009af4 <HAL_RCC_OscConfig+0x244>)
 8009ad4:	f023 0301 	bic.w	r3, r3, #1
 8009ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ada:	f7f9 ffcd 	bl	8003a78 <HAL_GetTick>
 8009ade:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ae0:	e00a      	b.n	8009af8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ae2:	f7f9 ffc9 	bl	8003a78 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d903      	bls.n	8009af8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e2af      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
 8009af4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009af8:	4b96      	ldr	r3, [pc, #600]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0304 	and.w	r3, r3, #4
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1ee      	bne.n	8009ae2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d06a      	beq.n	8009be6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b10:	4b90      	ldr	r3, [pc, #576]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b18:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b1a:	4b8e      	ldr	r3, [pc, #568]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	2b08      	cmp	r3, #8
 8009b24:	d007      	beq.n	8009b36 <HAL_RCC_OscConfig+0x286>
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	2b18      	cmp	r3, #24
 8009b2a:	d11b      	bne.n	8009b64 <HAL_RCC_OscConfig+0x2b4>
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	f003 0303 	and.w	r3, r3, #3
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d116      	bne.n	8009b64 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b36:	4b87      	ldr	r3, [pc, #540]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <HAL_RCC_OscConfig+0x29e>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	69db      	ldr	r3, [r3, #28]
 8009b46:	2b80      	cmp	r3, #128	; 0x80
 8009b48:	d001      	beq.n	8009b4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	e282      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b4e:	4b81      	ldr	r3, [pc, #516]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	061b      	lsls	r3, r3, #24
 8009b5c:	497d      	ldr	r1, [pc, #500]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b62:	e040      	b.n	8009be6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d023      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b6c:	4b79      	ldr	r3, [pc, #484]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a78      	ldr	r2, [pc, #480]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b78:	f7f9 ff7e 	bl	8003a78 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b80:	f7f9 ff7a 	bl	8003a78 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e260      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b92:	4b70      	ldr	r3, [pc, #448]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d0f0      	beq.n	8009b80 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b9e:	4b6d      	ldr	r3, [pc, #436]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a1b      	ldr	r3, [r3, #32]
 8009baa:	061b      	lsls	r3, r3, #24
 8009bac:	4969      	ldr	r1, [pc, #420]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	60cb      	str	r3, [r1, #12]
 8009bb2:	e018      	b.n	8009be6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bb4:	4b67      	ldr	r3, [pc, #412]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a66      	ldr	r2, [pc, #408]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7f9 ff5a 	bl	8003a78 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009bc8:	f7f9 ff56 	bl	8003a78 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e23c      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bda:	4b5e      	ldr	r3, [pc, #376]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1f0      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0308 	and.w	r3, r3, #8
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d036      	beq.n	8009c60 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d019      	beq.n	8009c2e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bfa:	4b56      	ldr	r3, [pc, #344]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfe:	4a55      	ldr	r2, [pc, #340]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c00:	f043 0301 	orr.w	r3, r3, #1
 8009c04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c06:	f7f9 ff37 	bl	8003a78 <HAL_GetTick>
 8009c0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c0c:	e008      	b.n	8009c20 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c0e:	f7f9 ff33 	bl	8003a78 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d901      	bls.n	8009c20 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	e219      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c20:	4b4c      	ldr	r3, [pc, #304]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c24:	f003 0302 	and.w	r3, r3, #2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d0f0      	beq.n	8009c0e <HAL_RCC_OscConfig+0x35e>
 8009c2c:	e018      	b.n	8009c60 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c2e:	4b49      	ldr	r3, [pc, #292]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c32:	4a48      	ldr	r2, [pc, #288]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c34:	f023 0301 	bic.w	r3, r3, #1
 8009c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c3a:	f7f9 ff1d 	bl	8003a78 <HAL_GetTick>
 8009c3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c40:	e008      	b.n	8009c54 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c42:	f7f9 ff19 	bl	8003a78 <HAL_GetTick>
 8009c46:	4602      	mov	r2, r0
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e1ff      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c54:	4b3f      	ldr	r3, [pc, #252]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d1f0      	bne.n	8009c42 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 0320 	and.w	r3, r3, #32
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d036      	beq.n	8009cda <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d019      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c74:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a36      	ldr	r2, [pc, #216]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c7e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c80:	f7f9 fefa 	bl	8003a78 <HAL_GetTick>
 8009c84:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c86:	e008      	b.n	8009c9a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c88:	f7f9 fef6 	bl	8003a78 <HAL_GetTick>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	1ad3      	subs	r3, r2, r3
 8009c92:	2b02      	cmp	r3, #2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e1dc      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c9a:	4b2e      	ldr	r3, [pc, #184]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0f0      	beq.n	8009c88 <HAL_RCC_OscConfig+0x3d8>
 8009ca6:	e018      	b.n	8009cda <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009ca8:	4b2a      	ldr	r3, [pc, #168]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009cae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cb4:	f7f9 fee0 	bl	8003a78 <HAL_GetTick>
 8009cb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cbc:	f7f9 fedc 	bl	8003a78 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e1c2      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cce:	4b21      	ldr	r3, [pc, #132]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f0      	bne.n	8009cbc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0304 	and.w	r3, r3, #4
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f000 8086 	beq.w	8009df4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ce8:	4b1b      	ldr	r3, [pc, #108]	; (8009d58 <HAL_RCC_OscConfig+0x4a8>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a1a      	ldr	r2, [pc, #104]	; (8009d58 <HAL_RCC_OscConfig+0x4a8>)
 8009cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cf4:	f7f9 fec0 	bl	8003a78 <HAL_GetTick>
 8009cf8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cfa:	e008      	b.n	8009d0e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cfc:	f7f9 febc 	bl	8003a78 <HAL_GetTick>
 8009d00:	4602      	mov	r2, r0
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	1ad3      	subs	r3, r2, r3
 8009d06:	2b64      	cmp	r3, #100	; 0x64
 8009d08:	d901      	bls.n	8009d0e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009d0a:	2303      	movs	r3, #3
 8009d0c:	e1a2      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d0e:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <HAL_RCC_OscConfig+0x4a8>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d0f0      	beq.n	8009cfc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	2b01      	cmp	r3, #1
 8009d20:	d106      	bne.n	8009d30 <HAL_RCC_OscConfig+0x480>
 8009d22:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d26:	4a0b      	ldr	r2, [pc, #44]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d28:	f043 0301 	orr.w	r3, r3, #1
 8009d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d2e:	e032      	b.n	8009d96 <HAL_RCC_OscConfig+0x4e6>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d111      	bne.n	8009d5c <HAL_RCC_OscConfig+0x4ac>
 8009d38:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3c:	4a05      	ldr	r2, [pc, #20]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d3e:	f023 0301 	bic.w	r3, r3, #1
 8009d42:	6713      	str	r3, [r2, #112]	; 0x70
 8009d44:	4b03      	ldr	r3, [pc, #12]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d48:	4a02      	ldr	r2, [pc, #8]	; (8009d54 <HAL_RCC_OscConfig+0x4a4>)
 8009d4a:	f023 0304 	bic.w	r3, r3, #4
 8009d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d50:	e021      	b.n	8009d96 <HAL_RCC_OscConfig+0x4e6>
 8009d52:	bf00      	nop
 8009d54:	58024400 	.word	0x58024400
 8009d58:	58024800 	.word	0x58024800
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	2b05      	cmp	r3, #5
 8009d62:	d10c      	bne.n	8009d7e <HAL_RCC_OscConfig+0x4ce>
 8009d64:	4b83      	ldr	r3, [pc, #524]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d68:	4a82      	ldr	r2, [pc, #520]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d6a:	f043 0304 	orr.w	r3, r3, #4
 8009d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d70:	4b80      	ldr	r3, [pc, #512]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d74:	4a7f      	ldr	r2, [pc, #508]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d76:	f043 0301 	orr.w	r3, r3, #1
 8009d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7c:	e00b      	b.n	8009d96 <HAL_RCC_OscConfig+0x4e6>
 8009d7e:	4b7d      	ldr	r3, [pc, #500]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	4a7c      	ldr	r2, [pc, #496]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d84:	f023 0301 	bic.w	r3, r3, #1
 8009d88:	6713      	str	r3, [r2, #112]	; 0x70
 8009d8a:	4b7a      	ldr	r3, [pc, #488]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	4a79      	ldr	r2, [pc, #484]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009d90:	f023 0304 	bic.w	r3, r3, #4
 8009d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d015      	beq.n	8009dca <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d9e:	f7f9 fe6b 	bl	8003a78 <HAL_GetTick>
 8009da2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009da4:	e00a      	b.n	8009dbc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009da6:	f7f9 fe67 	bl	8003a78 <HAL_GetTick>
 8009daa:	4602      	mov	r2, r0
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d901      	bls.n	8009dbc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e14b      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dbc:	4b6d      	ldr	r3, [pc, #436]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0ee      	beq.n	8009da6 <HAL_RCC_OscConfig+0x4f6>
 8009dc8:	e014      	b.n	8009df4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dca:	f7f9 fe55 	bl	8003a78 <HAL_GetTick>
 8009dce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dd0:	e00a      	b.n	8009de8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dd2:	f7f9 fe51 	bl	8003a78 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d901      	bls.n	8009de8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e135      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009de8:	4b62      	ldr	r3, [pc, #392]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1ee      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 812a 	beq.w	800a052 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009dfe:	4b5d      	ldr	r3, [pc, #372]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e06:	2b18      	cmp	r3, #24
 8009e08:	f000 80ba 	beq.w	8009f80 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	f040 8095 	bne.w	8009f40 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e16:	4b57      	ldr	r3, [pc, #348]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a56      	ldr	r2, [pc, #344]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e22:	f7f9 fe29 	bl	8003a78 <HAL_GetTick>
 8009e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e28:	e008      	b.n	8009e3c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e2a:	f7f9 fe25 	bl	8003a78 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e10b      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e3c:	4b4d      	ldr	r3, [pc, #308]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f0      	bne.n	8009e2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e48:	4b4a      	ldr	r3, [pc, #296]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e4c:	4b4a      	ldr	r3, [pc, #296]	; (8009f78 <HAL_RCC_OscConfig+0x6c8>)
 8009e4e:	4013      	ands	r3, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e58:	0112      	lsls	r2, r2, #4
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	4945      	ldr	r1, [pc, #276]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	628b      	str	r3, [r1, #40]	; 0x28
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	3b01      	subs	r3, #1
 8009e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e70:	3b01      	subs	r3, #1
 8009e72:	025b      	lsls	r3, r3, #9
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	431a      	orrs	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	3b01      	subs	r3, #1
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e84:	431a      	orrs	r2, r3
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	061b      	lsls	r3, r3, #24
 8009e8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e92:	4938      	ldr	r1, [pc, #224]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e94:	4313      	orrs	r3, r2
 8009e96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e98:	4b36      	ldr	r3, [pc, #216]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9c:	4a35      	ldr	r2, [pc, #212]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009e9e:	f023 0301 	bic.w	r3, r3, #1
 8009ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ea4:	4b33      	ldr	r3, [pc, #204]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea8:	4b34      	ldr	r3, [pc, #208]	; (8009f7c <HAL_RCC_OscConfig+0x6cc>)
 8009eaa:	4013      	ands	r3, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009eb0:	00d2      	lsls	r2, r2, #3
 8009eb2:	4930      	ldr	r1, [pc, #192]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009eb8:	4b2e      	ldr	r3, [pc, #184]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	f023 020c 	bic.w	r2, r3, #12
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	492b      	ldr	r1, [pc, #172]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009eca:	4b2a      	ldr	r3, [pc, #168]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ece:	f023 0202 	bic.w	r2, r3, #2
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed6:	4927      	ldr	r1, [pc, #156]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	4a24      	ldr	r2, [pc, #144]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee8:	4b22      	ldr	r3, [pc, #136]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	4a21      	ldr	r2, [pc, #132]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009ef4:	4b1f      	ldr	r3, [pc, #124]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef8:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009f00:	4b1c      	ldr	r3, [pc, #112]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a1b      	ldr	r2, [pc, #108]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f0c:	4b19      	ldr	r3, [pc, #100]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a18      	ldr	r2, [pc, #96]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f18:	f7f9 fdae 	bl	8003a78 <HAL_GetTick>
 8009f1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f20:	f7f9 fdaa 	bl	8003a78 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e090      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f32:	4b10      	ldr	r3, [pc, #64]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0f0      	beq.n	8009f20 <HAL_RCC_OscConfig+0x670>
 8009f3e:	e088      	b.n	800a052 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f40:	4b0c      	ldr	r3, [pc, #48]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4c:	f7f9 fd94 	bl	8003a78 <HAL_GetTick>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f54:	f7f9 fd90 	bl	8003a78 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e076      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f66:	4b03      	ldr	r3, [pc, #12]	; (8009f74 <HAL_RCC_OscConfig+0x6c4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <HAL_RCC_OscConfig+0x6a4>
 8009f72:	e06e      	b.n	800a052 <HAL_RCC_OscConfig+0x7a2>
 8009f74:	58024400 	.word	0x58024400
 8009f78:	fffffc0c 	.word	0xfffffc0c
 8009f7c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f80:	4b36      	ldr	r3, [pc, #216]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 8009f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f86:	4b35      	ldr	r3, [pc, #212]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 8009f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d031      	beq.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	f003 0203 	and.w	r2, r3, #3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d12a      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	091b      	lsrs	r3, r3, #4
 8009fa6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d122      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d11a      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	0a5b      	lsrs	r3, r3, #9
 8009fc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d111      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d108      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	0e1b      	lsrs	r3, r3, #24
 8009fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d001      	beq.n	8009ffc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	e02b      	b.n	800a054 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 8009ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a000:	08db      	lsrs	r3, r3, #3
 800a002:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a006:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d01f      	beq.n	800a052 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a016:	4a11      	ldr	r2, [pc, #68]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a018:	f023 0301 	bic.w	r3, r3, #1
 800a01c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a01e:	f7f9 fd2b 	bl	8003a78 <HAL_GetTick>
 800a022:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a024:	bf00      	nop
 800a026:	f7f9 fd27 	bl	8003a78 <HAL_GetTick>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	4293      	cmp	r3, r2
 800a030:	d0f9      	beq.n	800a026 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a032:	4b0a      	ldr	r3, [pc, #40]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a036:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <HAL_RCC_OscConfig+0x7b0>)
 800a038:	4013      	ands	r3, r2
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a03e:	00d2      	lsls	r2, r2, #3
 800a040:	4906      	ldr	r1, [pc, #24]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a042:	4313      	orrs	r3, r2
 800a044:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a046:	4b05      	ldr	r3, [pc, #20]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	4a04      	ldr	r2, [pc, #16]	; (800a05c <HAL_RCC_OscConfig+0x7ac>)
 800a04c:	f043 0301 	orr.w	r3, r3, #1
 800a050:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3730      	adds	r7, #48	; 0x30
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	58024400 	.word	0x58024400
 800a060:	ffff0007 	.word	0xffff0007

0800a064 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b086      	sub	sp, #24
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e19c      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a078:	4b8a      	ldr	r3, [pc, #552]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 030f 	and.w	r3, r3, #15
 800a080:	683a      	ldr	r2, [r7, #0]
 800a082:	429a      	cmp	r2, r3
 800a084:	d910      	bls.n	800a0a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a086:	4b87      	ldr	r3, [pc, #540]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f023 020f 	bic.w	r2, r3, #15
 800a08e:	4985      	ldr	r1, [pc, #532]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	4313      	orrs	r3, r2
 800a094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a096:	4b83      	ldr	r3, [pc, #524]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 030f 	and.w	r3, r3, #15
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e184      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d010      	beq.n	800a0d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	4b7b      	ldr	r3, [pc, #492]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d908      	bls.n	800a0d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a0c4:	4b78      	ldr	r3, [pc, #480]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	4975      	ldr	r1, [pc, #468]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0308 	and.w	r3, r3, #8
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	695a      	ldr	r2, [r3, #20]
 800a0e6:	4b70      	ldr	r3, [pc, #448]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d908      	bls.n	800a104 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0f2:	4b6d      	ldr	r3, [pc, #436]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	695b      	ldr	r3, [r3, #20]
 800a0fe:	496a      	ldr	r1, [pc, #424]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a100:	4313      	orrs	r3, r2
 800a102:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 0310 	and.w	r3, r3, #16
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d010      	beq.n	800a132 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	699a      	ldr	r2, [r3, #24]
 800a114:	4b64      	ldr	r3, [pc, #400]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d908      	bls.n	800a132 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a120:	4b61      	ldr	r3, [pc, #388]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a122:	69db      	ldr	r3, [r3, #28]
 800a124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	495e      	ldr	r1, [pc, #376]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a12e:	4313      	orrs	r3, r2
 800a130:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f003 0320 	and.w	r3, r3, #32
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d010      	beq.n	800a160 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	69da      	ldr	r2, [r3, #28]
 800a142:	4b59      	ldr	r3, [pc, #356]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d908      	bls.n	800a160 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a14e:	4b56      	ldr	r3, [pc, #344]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	69db      	ldr	r3, [r3, #28]
 800a15a:	4953      	ldr	r1, [pc, #332]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a15c:	4313      	orrs	r3, r2
 800a15e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f003 0302 	and.w	r3, r3, #2
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d010      	beq.n	800a18e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	68da      	ldr	r2, [r3, #12]
 800a170:	4b4d      	ldr	r3, [pc, #308]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	f003 030f 	and.w	r3, r3, #15
 800a178:	429a      	cmp	r2, r3
 800a17a:	d908      	bls.n	800a18e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a17c:	4b4a      	ldr	r3, [pc, #296]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f023 020f 	bic.w	r2, r3, #15
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	4947      	ldr	r1, [pc, #284]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	4313      	orrs	r3, r2
 800a18c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d055      	beq.n	800a246 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a19a:	4b43      	ldr	r3, [pc, #268]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4940      	ldr	r1, [pc, #256]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d107      	bne.n	800a1c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1b4:	4b3c      	ldr	r3, [pc, #240]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d121      	bne.n	800a204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	e0f6      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d107      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1cc:	4b36      	ldr	r3, [pc, #216]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d115      	bne.n	800a204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e0ea      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d107      	bne.n	800a1f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1e4:	4b30      	ldr	r3, [pc, #192]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d109      	bne.n	800a204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e0de      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1f4:	4b2c      	ldr	r3, [pc, #176]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e0d6      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a204:	4b28      	ldr	r3, [pc, #160]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	f023 0207 	bic.w	r2, r3, #7
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	4925      	ldr	r1, [pc, #148]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a212:	4313      	orrs	r3, r2
 800a214:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a216:	f7f9 fc2f 	bl	8003a78 <HAL_GetTick>
 800a21a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a21c:	e00a      	b.n	800a234 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a21e:	f7f9 fc2b 	bl	8003a78 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	f241 3288 	movw	r2, #5000	; 0x1388
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d901      	bls.n	800a234 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a230:	2303      	movs	r3, #3
 800a232:	e0be      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a236:	691b      	ldr	r3, [r3, #16]
 800a238:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	685b      	ldr	r3, [r3, #4]
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	429a      	cmp	r2, r3
 800a244:	d1eb      	bne.n	800a21e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0302 	and.w	r3, r3, #2
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d010      	beq.n	800a274 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	68da      	ldr	r2, [r3, #12]
 800a256:	4b14      	ldr	r3, [pc, #80]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f003 030f 	and.w	r3, r3, #15
 800a25e:	429a      	cmp	r2, r3
 800a260:	d208      	bcs.n	800a274 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	f023 020f 	bic.w	r2, r3, #15
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	68db      	ldr	r3, [r3, #12]
 800a26e:	490e      	ldr	r1, [pc, #56]	; (800a2a8 <HAL_RCC_ClockConfig+0x244>)
 800a270:	4313      	orrs	r3, r2
 800a272:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a274:	4b0b      	ldr	r3, [pc, #44]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 030f 	and.w	r3, r3, #15
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d214      	bcs.n	800a2ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a282:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f023 020f 	bic.w	r2, r3, #15
 800a28a:	4906      	ldr	r1, [pc, #24]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	4313      	orrs	r3, r2
 800a290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a292:	4b04      	ldr	r3, [pc, #16]	; (800a2a4 <HAL_RCC_ClockConfig+0x240>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 030f 	and.w	r3, r3, #15
 800a29a:	683a      	ldr	r2, [r7, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d005      	beq.n	800a2ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e086      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x34e>
 800a2a4:	52002000 	.word	0x52002000
 800a2a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0304 	and.w	r3, r3, #4
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d010      	beq.n	800a2da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	691a      	ldr	r2, [r3, #16]
 800a2bc:	4b3f      	ldr	r3, [pc, #252]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d208      	bcs.n	800a2da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2c8:	4b3c      	ldr	r3, [pc, #240]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	4939      	ldr	r1, [pc, #228]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d010      	beq.n	800a308 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	695a      	ldr	r2, [r3, #20]
 800a2ea:	4b34      	ldr	r3, [pc, #208]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d208      	bcs.n	800a308 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2f6:	4b31      	ldr	r3, [pc, #196]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	492e      	ldr	r1, [pc, #184]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a304:	4313      	orrs	r3, r2
 800a306:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0310 	and.w	r3, r3, #16
 800a310:	2b00      	cmp	r3, #0
 800a312:	d010      	beq.n	800a336 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	699a      	ldr	r2, [r3, #24]
 800a318:	4b28      	ldr	r3, [pc, #160]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a320:	429a      	cmp	r2, r3
 800a322:	d208      	bcs.n	800a336 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a324:	4b25      	ldr	r3, [pc, #148]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	4922      	ldr	r1, [pc, #136]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a332:	4313      	orrs	r3, r2
 800a334:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d010      	beq.n	800a364 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	69da      	ldr	r2, [r3, #28]
 800a346:	4b1d      	ldr	r3, [pc, #116]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a348:	6a1b      	ldr	r3, [r3, #32]
 800a34a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a34e:	429a      	cmp	r2, r3
 800a350:	d208      	bcs.n	800a364 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a352:	4b1a      	ldr	r3, [pc, #104]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a354:	6a1b      	ldr	r3, [r3, #32]
 800a356:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	69db      	ldr	r3, [r3, #28]
 800a35e:	4917      	ldr	r1, [pc, #92]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a360:	4313      	orrs	r3, r2
 800a362:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a364:	f000 f89e 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800a368:	4602      	mov	r2, r0
 800a36a:	4b14      	ldr	r3, [pc, #80]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a36c:	699b      	ldr	r3, [r3, #24]
 800a36e:	0a1b      	lsrs	r3, r3, #8
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	4912      	ldr	r1, [pc, #72]	; (800a3c0 <HAL_RCC_ClockConfig+0x35c>)
 800a376:	5ccb      	ldrb	r3, [r1, r3]
 800a378:	f003 031f 	and.w	r3, r3, #31
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
 800a380:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a382:	4b0e      	ldr	r3, [pc, #56]	; (800a3bc <HAL_RCC_ClockConfig+0x358>)
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	f003 030f 	and.w	r3, r3, #15
 800a38a:	4a0d      	ldr	r2, [pc, #52]	; (800a3c0 <HAL_RCC_ClockConfig+0x35c>)
 800a38c:	5cd3      	ldrb	r3, [r2, r3]
 800a38e:	f003 031f 	and.w	r3, r3, #31
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	fa22 f303 	lsr.w	r3, r2, r3
 800a398:	4a0a      	ldr	r2, [pc, #40]	; (800a3c4 <HAL_RCC_ClockConfig+0x360>)
 800a39a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a39c:	4a0a      	ldr	r2, [pc, #40]	; (800a3c8 <HAL_RCC_ClockConfig+0x364>)
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a3a2:	4b0a      	ldr	r3, [pc, #40]	; (800a3cc <HAL_RCC_ClockConfig+0x368>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7f9 fb1c 	bl	80039e4 <HAL_InitTick>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3718      	adds	r7, #24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	58024400 	.word	0x58024400
 800a3c0:	0801858c 	.word	0x0801858c
 800a3c4:	24000004 	.word	0x24000004
 800a3c8:	24000000 	.word	0x24000000
 800a3cc:	24000008 	.word	0x24000008

0800a3d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08c      	sub	sp, #48	; 0x30
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d12a      	bne.n	800a438 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a3e2:	4b2d      	ldr	r3, [pc, #180]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a3e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3e8:	4a2b      	ldr	r2, [pc, #172]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a3ea:	f043 0301 	orr.w	r3, r3, #1
 800a3ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3f2:	4b29      	ldr	r3, [pc, #164]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a3f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	61bb      	str	r3, [r7, #24]
 800a3fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a400:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a406:	2302      	movs	r3, #2
 800a408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a40a:	2303      	movs	r3, #3
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a412:	2300      	movs	r3, #0
 800a414:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a416:	f107 031c 	add.w	r3, r7, #28
 800a41a:	4619      	mov	r1, r3
 800a41c:	481f      	ldr	r0, [pc, #124]	; (800a49c <HAL_RCC_MCOConfig+0xcc>)
 800a41e:	f7fd fc29 	bl	8007c74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a422:	4b1d      	ldr	r3, [pc, #116]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a42a:	68b9      	ldr	r1, [r7, #8]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	430b      	orrs	r3, r1
 800a430:	4919      	ldr	r1, [pc, #100]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a432:	4313      	orrs	r3, r2
 800a434:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a436:	e02a      	b.n	800a48e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a438:	4b17      	ldr	r3, [pc, #92]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a43a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a43e:	4a16      	ldr	r2, [pc, #88]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a440:	f043 0304 	orr.w	r3, r3, #4
 800a444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a448:	4b13      	ldr	r3, [pc, #76]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a44a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a44e:	f003 0304 	and.w	r3, r3, #4
 800a452:	617b      	str	r3, [r7, #20]
 800a454:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a45a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45c:	2302      	movs	r3, #2
 800a45e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a460:	2303      	movs	r3, #3
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a464:	2300      	movs	r3, #0
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a46c:	f107 031c 	add.w	r3, r7, #28
 800a470:	4619      	mov	r1, r3
 800a472:	480b      	ldr	r0, [pc, #44]	; (800a4a0 <HAL_RCC_MCOConfig+0xd0>)
 800a474:	f7fd fbfe 	bl	8007c74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a478:	4b07      	ldr	r3, [pc, #28]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	01d9      	lsls	r1, r3, #7
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	430b      	orrs	r3, r1
 800a488:	4903      	ldr	r1, [pc, #12]	; (800a498 <HAL_RCC_MCOConfig+0xc8>)
 800a48a:	4313      	orrs	r3, r2
 800a48c:	610b      	str	r3, [r1, #16]
}
 800a48e:	bf00      	nop
 800a490:	3730      	adds	r7, #48	; 0x30
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	58024400 	.word	0x58024400
 800a49c:	58020000 	.word	0x58020000
 800a4a0:	58020800 	.word	0x58020800

0800a4a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b089      	sub	sp, #36	; 0x24
 800a4a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4aa:	4bb3      	ldr	r3, [pc, #716]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4b2:	2b18      	cmp	r3, #24
 800a4b4:	f200 8155 	bhi.w	800a762 <HAL_RCC_GetSysClockFreq+0x2be>
 800a4b8:	a201      	add	r2, pc, #4	; (adr r2, 800a4c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a525 	.word	0x0800a525
 800a4c4:	0800a763 	.word	0x0800a763
 800a4c8:	0800a763 	.word	0x0800a763
 800a4cc:	0800a763 	.word	0x0800a763
 800a4d0:	0800a763 	.word	0x0800a763
 800a4d4:	0800a763 	.word	0x0800a763
 800a4d8:	0800a763 	.word	0x0800a763
 800a4dc:	0800a763 	.word	0x0800a763
 800a4e0:	0800a54b 	.word	0x0800a54b
 800a4e4:	0800a763 	.word	0x0800a763
 800a4e8:	0800a763 	.word	0x0800a763
 800a4ec:	0800a763 	.word	0x0800a763
 800a4f0:	0800a763 	.word	0x0800a763
 800a4f4:	0800a763 	.word	0x0800a763
 800a4f8:	0800a763 	.word	0x0800a763
 800a4fc:	0800a763 	.word	0x0800a763
 800a500:	0800a551 	.word	0x0800a551
 800a504:	0800a763 	.word	0x0800a763
 800a508:	0800a763 	.word	0x0800a763
 800a50c:	0800a763 	.word	0x0800a763
 800a510:	0800a763 	.word	0x0800a763
 800a514:	0800a763 	.word	0x0800a763
 800a518:	0800a763 	.word	0x0800a763
 800a51c:	0800a763 	.word	0x0800a763
 800a520:	0800a557 	.word	0x0800a557
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a524:	4b94      	ldr	r3, [pc, #592]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f003 0320 	and.w	r3, r3, #32
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d009      	beq.n	800a544 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a530:	4b91      	ldr	r3, [pc, #580]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	08db      	lsrs	r3, r3, #3
 800a536:	f003 0303 	and.w	r3, r3, #3
 800a53a:	4a90      	ldr	r2, [pc, #576]	; (800a77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a53c:	fa22 f303 	lsr.w	r3, r2, r3
 800a540:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a542:	e111      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a544:	4b8d      	ldr	r3, [pc, #564]	; (800a77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a546:	61bb      	str	r3, [r7, #24]
      break;
 800a548:	e10e      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a54a:	4b8d      	ldr	r3, [pc, #564]	; (800a780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a54c:	61bb      	str	r3, [r7, #24]
      break;
 800a54e:	e10b      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a550:	4b8c      	ldr	r3, [pc, #560]	; (800a784 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a552:	61bb      	str	r3, [r7, #24]
      break;
 800a554:	e108      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a556:	4b88      	ldr	r3, [pc, #544]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55a:	f003 0303 	and.w	r3, r3, #3
 800a55e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a560:	4b85      	ldr	r3, [pc, #532]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a564:	091b      	lsrs	r3, r3, #4
 800a566:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a56a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a56c:	4b82      	ldr	r3, [pc, #520]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a570:	f003 0301 	and.w	r3, r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a576:	4b80      	ldr	r3, [pc, #512]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a57a:	08db      	lsrs	r3, r3, #3
 800a57c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	fb02 f303 	mul.w	r3, r2, r3
 800a586:	ee07 3a90 	vmov	s15, r3
 800a58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 80e1 	beq.w	800a75c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	f000 8083 	beq.w	800a6a8 <HAL_RCC_GetSysClockFreq+0x204>
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	f200 80a1 	bhi.w	800a6ec <HAL_RCC_GetSysClockFreq+0x248>
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d003      	beq.n	800a5b8 <HAL_RCC_GetSysClockFreq+0x114>
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d056      	beq.n	800a664 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a5b6:	e099      	b.n	800a6ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5b8:	4b6f      	ldr	r3, [pc, #444]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 0320 	and.w	r3, r3, #32
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d02d      	beq.n	800a620 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5c4:	4b6c      	ldr	r3, [pc, #432]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	08db      	lsrs	r3, r3, #3
 800a5ca:	f003 0303 	and.w	r3, r3, #3
 800a5ce:	4a6b      	ldr	r2, [pc, #428]	; (800a77c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	ee07 3a90 	vmov	s15, r3
 800a5dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ee:	4b62      	ldr	r3, [pc, #392]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5f6:	ee07 3a90 	vmov	s15, r3
 800a5fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800a602:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a60a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a61a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a61e:	e087      	b.n	800a730 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	ee07 3a90 	vmov	s15, r3
 800a626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a78c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a632:	4b51      	ldr	r3, [pc, #324]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a63a:	ee07 3a90 	vmov	s15, r3
 800a63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a642:	ed97 6a02 	vldr	s12, [r7, #8]
 800a646:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a65e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a662:	e065      	b.n	800a730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	ee07 3a90 	vmov	s15, r3
 800a66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a66e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a790 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a676:	4b40      	ldr	r3, [pc, #256]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a67e:	ee07 3a90 	vmov	s15, r3
 800a682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a686:	ed97 6a02 	vldr	s12, [r7, #8]
 800a68a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6a6:	e043      	b.n	800a730 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	ee07 3a90 	vmov	s15, r3
 800a6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a794 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ba:	4b2f      	ldr	r3, [pc, #188]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6ea:	e021      	b.n	800a730 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	ee07 3a90 	vmov	s15, r3
 800a6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a790 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6fe:	4b1e      	ldr	r3, [pc, #120]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a712:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a788 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a72e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a730:	4b11      	ldr	r3, [pc, #68]	; (800a778 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a734:	0a5b      	lsrs	r3, r3, #9
 800a736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a73a:	3301      	adds	r3, #1
 800a73c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	ee07 3a90 	vmov	s15, r3
 800a744:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a748:	edd7 6a07 	vldr	s13, [r7, #28]
 800a74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a754:	ee17 3a90 	vmov	r3, s15
 800a758:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a75a:	e005      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61bb      	str	r3, [r7, #24]
      break;
 800a760:	e002      	b.n	800a768 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a762:	4b07      	ldr	r3, [pc, #28]	; (800a780 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a764:	61bb      	str	r3, [r7, #24]
      break;
 800a766:	bf00      	nop
  }

  return sysclockfreq;
 800a768:	69bb      	ldr	r3, [r7, #24]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3724      	adds	r7, #36	; 0x24
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	58024400 	.word	0x58024400
 800a77c:	03d09000 	.word	0x03d09000
 800a780:	003d0900 	.word	0x003d0900
 800a784:	02faf080 	.word	0x02faf080
 800a788:	46000000 	.word	0x46000000
 800a78c:	4c742400 	.word	0x4c742400
 800a790:	4a742400 	.word	0x4a742400
 800a794:	4c3ebc20 	.word	0x4c3ebc20

0800a798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a79e:	f7ff fe81 	bl	800a4a4 <HAL_RCC_GetSysClockFreq>
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7a6:	699b      	ldr	r3, [r3, #24]
 800a7a8:	0a1b      	lsrs	r3, r3, #8
 800a7aa:	f003 030f 	and.w	r3, r3, #15
 800a7ae:	490f      	ldr	r1, [pc, #60]	; (800a7ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a7b0:	5ccb      	ldrb	r3, [r1, r3]
 800a7b2:	f003 031f 	and.w	r3, r3, #31
 800a7b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7bc:	4b0a      	ldr	r3, [pc, #40]	; (800a7e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a7be:	699b      	ldr	r3, [r3, #24]
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <HAL_RCC_GetHCLKFreq+0x54>)
 800a7c6:	5cd3      	ldrb	r3, [r2, r3]
 800a7c8:	f003 031f 	and.w	r3, r3, #31
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d2:	4a07      	ldr	r2, [pc, #28]	; (800a7f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7d6:	4a07      	ldr	r2, [pc, #28]	; (800a7f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7de:	681b      	ldr	r3, [r3, #0]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3708      	adds	r7, #8
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	58024400 	.word	0x58024400
 800a7ec:	0801858c 	.word	0x0801858c
 800a7f0:	24000004 	.word	0x24000004
 800a7f4:	24000000 	.word	0x24000000

0800a7f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7fc:	f7ff ffcc 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 800a800:	4602      	mov	r2, r0
 800a802:	4b06      	ldr	r3, [pc, #24]	; (800a81c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a804:	69db      	ldr	r3, [r3, #28]
 800a806:	091b      	lsrs	r3, r3, #4
 800a808:	f003 0307 	and.w	r3, r3, #7
 800a80c:	4904      	ldr	r1, [pc, #16]	; (800a820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a80e:	5ccb      	ldrb	r3, [r1, r3]
 800a810:	f003 031f 	and.w	r3, r3, #31
 800a814:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a818:	4618      	mov	r0, r3
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	58024400 	.word	0x58024400
 800a820:	0801858c 	.word	0x0801858c

0800a824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a828:	f7ff ffb6 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 800a82c:	4602      	mov	r2, r0
 800a82e:	4b06      	ldr	r3, [pc, #24]	; (800a848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	0a1b      	lsrs	r3, r3, #8
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	4904      	ldr	r1, [pc, #16]	; (800a84c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a83a:	5ccb      	ldrb	r3, [r1, r3]
 800a83c:	f003 031f 	and.w	r3, r3, #31
 800a840:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a844:	4618      	mov	r0, r3
 800a846:	bd80      	pop	{r7, pc}
 800a848:	58024400 	.word	0x58024400
 800a84c:	0801858c 	.word	0x0801858c

0800a850 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a854:	b0c6      	sub	sp, #280	; 0x118
 800a856:	af00      	add	r7, sp, #0
 800a858:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a85c:	2300      	movs	r3, #0
 800a85e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a862:	2300      	movs	r3, #0
 800a864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a870:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a874:	2500      	movs	r5, #0
 800a876:	ea54 0305 	orrs.w	r3, r4, r5
 800a87a:	d049      	beq.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a882:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a886:	d02f      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a88c:	d828      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a88e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a892:	d01a      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a898:	d822      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a89e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8a2:	d007      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a8a4:	e01c      	b.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a6:	4bab      	ldr	r3, [pc, #684]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8aa:	4aaa      	ldr	r2, [pc, #680]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8b2:	e01a      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	2102      	movs	r1, #2
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f002 fa49 	bl	800cd54 <RCCEx_PLL2_Config>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8c8:	e00f      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ce:	3328      	adds	r3, #40	; 0x28
 800a8d0:	2102      	movs	r1, #2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f002 faf0 	bl	800ceb8 <RCCEx_PLL3_Config>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8de:	e004      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8e6:	e000      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10a      	bne.n	800a908 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8f2:	4b98      	ldr	r3, [pc, #608]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8f6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a900:	4a94      	ldr	r2, [pc, #592]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a902:	430b      	orrs	r3, r1
 800a904:	6513      	str	r3, [r2, #80]	; 0x50
 800a906:	e003      	b.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a908:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a90c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a918:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a91c:	f04f 0900 	mov.w	r9, #0
 800a920:	ea58 0309 	orrs.w	r3, r8, r9
 800a924:	d047      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d82a      	bhi.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a930:	a201      	add	r2, pc, #4	; (adr r2, 800a938 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a936:	bf00      	nop
 800a938:	0800a94d 	.word	0x0800a94d
 800a93c:	0800a95b 	.word	0x0800a95b
 800a940:	0800a971 	.word	0x0800a971
 800a944:	0800a98f 	.word	0x0800a98f
 800a948:	0800a98f 	.word	0x0800a98f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94c:	4b81      	ldr	r3, [pc, #516]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a94e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a950:	4a80      	ldr	r2, [pc, #512]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a956:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a958:	e01a      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	3308      	adds	r3, #8
 800a960:	2100      	movs	r1, #0
 800a962:	4618      	mov	r0, r3
 800a964:	f002 f9f6 	bl	800cd54 <RCCEx_PLL2_Config>
 800a968:	4603      	mov	r3, r0
 800a96a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a96e:	e00f      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a974:	3328      	adds	r3, #40	; 0x28
 800a976:	2100      	movs	r1, #0
 800a978:	4618      	mov	r0, r3
 800a97a:	f002 fa9d 	bl	800ceb8 <RCCEx_PLL3_Config>
 800a97e:	4603      	mov	r3, r0
 800a980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a984:	e004      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a98c:	e000      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a98e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a994:	2b00      	cmp	r3, #0
 800a996:	d10a      	bne.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a998:	4b6e      	ldr	r3, [pc, #440]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a99c:	f023 0107 	bic.w	r1, r3, #7
 800a9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a6:	4a6b      	ldr	r2, [pc, #428]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9a8:	430b      	orrs	r3, r1
 800a9aa:	6513      	str	r3, [r2, #80]	; 0x50
 800a9ac:	e003      	b.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a9c2:	f04f 0b00 	mov.w	fp, #0
 800a9c6:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9ca:	d05b      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9d4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9d8:	d03b      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9de:	d834      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9e4:	d037      	beq.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9ea:	d82e      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9f0:	d033      	beq.n	800aa5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9f6:	d828      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9fc:	d01a      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a9fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa02:	d822      	bhi.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aa08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa0c:	d007      	beq.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aa0e:	e01c      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa10:	4b50      	ldr	r3, [pc, #320]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa14:	4a4f      	ldr	r2, [pc, #316]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa1c:	e01e      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa22:	3308      	adds	r3, #8
 800aa24:	2100      	movs	r1, #0
 800aa26:	4618      	mov	r0, r3
 800aa28:	f002 f994 	bl	800cd54 <RCCEx_PLL2_Config>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa32:	e013      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa38:	3328      	adds	r3, #40	; 0x28
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f002 fa3b 	bl	800ceb8 <RCCEx_PLL3_Config>
 800aa42:	4603      	mov	r3, r0
 800aa44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa48:	e008      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa50:	e004      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa52:	bf00      	nop
 800aa54:	e002      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa56:	bf00      	nop
 800aa58:	e000      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d10b      	bne.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa64:	4b3b      	ldr	r3, [pc, #236]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa74:	4a37      	ldr	r2, [pc, #220]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa76:	430b      	orrs	r3, r1
 800aa78:	6593      	str	r3, [r2, #88]	; 0x58
 800aa7a:	e003      	b.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa94:	2300      	movs	r3, #0
 800aa96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	d05d      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aaa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aaac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aab0:	d03b      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aab2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aab6:	d834      	bhi.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aab8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aabc:	d037      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aabe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aac2:	d82e      	bhi.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aac4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aac8:	d033      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aaca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aace:	d828      	bhi.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aad0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aad4:	d01a      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aad6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aada:	d822      	bhi.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d003      	beq.n	800aae8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aae4:	d007      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aae6:	e01c      	b.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae8:	4b1a      	ldr	r3, [pc, #104]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaec:	4a19      	ldr	r2, [pc, #100]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aaee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaf4:	e01e      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aafa:	3308      	adds	r3, #8
 800aafc:	2100      	movs	r1, #0
 800aafe:	4618      	mov	r0, r3
 800ab00:	f002 f928 	bl	800cd54 <RCCEx_PLL2_Config>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab0a:	e013      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab10:	3328      	adds	r3, #40	; 0x28
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f002 f9cf 	bl	800ceb8 <RCCEx_PLL3_Config>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab20:	e008      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab28:	e004      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab2a:	bf00      	nop
 800ab2c:	e002      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab2e:	bf00      	nop
 800ab30:	e000      	b.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10d      	bne.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab3c:	4b05      	ldr	r3, [pc, #20]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab4c:	4a01      	ldr	r2, [pc, #4]	; (800ab54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab4e:	430b      	orrs	r3, r1
 800ab50:	6593      	str	r3, [r2, #88]	; 0x58
 800ab52:	e005      	b.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	d03a      	beq.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab86:	2b30      	cmp	r3, #48	; 0x30
 800ab88:	d01f      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab8a:	2b30      	cmp	r3, #48	; 0x30
 800ab8c:	d819      	bhi.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	d00c      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab92:	2b20      	cmp	r3, #32
 800ab94:	d815      	bhi.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d019      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ab9a:	2b10      	cmp	r3, #16
 800ab9c:	d111      	bne.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9e:	4baa      	ldr	r3, [pc, #680]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4aa9      	ldr	r2, [pc, #676]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abaa:	e011      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800abac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abb0:	3308      	adds	r3, #8
 800abb2:	2102      	movs	r1, #2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f002 f8cd 	bl	800cd54 <RCCEx_PLL2_Config>
 800abba:	4603      	mov	r3, r0
 800abbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800abc0:	e006      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abc8:	e002      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abca:	bf00      	nop
 800abcc:	e000      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800abce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abd8:	4b9b      	ldr	r3, [pc, #620]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abe6:	4a98      	ldr	r2, [pc, #608]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abe8:	430b      	orrs	r3, r1
 800abea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abec:	e003      	b.n	800abf6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abf2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ac02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ac06:	2300      	movs	r3, #0
 800ac08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ac0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ac10:	460b      	mov	r3, r1
 800ac12:	4313      	orrs	r3, r2
 800ac14:	d051      	beq.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac20:	d035      	beq.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ac22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac26:	d82e      	bhi.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac2c:	d031      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac32:	d828      	bhi.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac38:	d01a      	beq.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac3e:	d822      	bhi.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d003      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac48:	d007      	beq.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac4a:	e01c      	b.n	800ac86 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac4c:	4b7e      	ldr	r3, [pc, #504]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac50:	4a7d      	ldr	r2, [pc, #500]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac58:	e01c      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac5e:	3308      	adds	r3, #8
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f002 f876 	bl	800cd54 <RCCEx_PLL2_Config>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac6e:	e011      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac74:	3328      	adds	r3, #40	; 0x28
 800ac76:	2100      	movs	r1, #0
 800ac78:	4618      	mov	r0, r3
 800ac7a:	f002 f91d 	bl	800ceb8 <RCCEx_PLL3_Config>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac84:	e006      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac8c:	e002      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac8e:	bf00      	nop
 800ac90:	e000      	b.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10a      	bne.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac9c:	4b6a      	ldr	r3, [pc, #424]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acaa:	4a67      	ldr	r2, [pc, #412]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acac:	430b      	orrs	r3, r1
 800acae:	6513      	str	r3, [r2, #80]	; 0x50
 800acb0:	e003      	b.n	800acba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800acc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800acca:	2300      	movs	r3, #0
 800accc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800acd0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800acd4:	460b      	mov	r3, r1
 800acd6:	4313      	orrs	r3, r2
 800acd8:	d053      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ace4:	d033      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ace6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acea:	d82c      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acf0:	d02f      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800acf2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acf6:	d826      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acf8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acfc:	d02b      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800acfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ad02:	d820      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad08:	d012      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ad0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad0e:	d81a      	bhi.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d022      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ad14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad18:	d115      	bne.n	800ad46 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1e:	3308      	adds	r3, #8
 800ad20:	2101      	movs	r1, #1
 800ad22:	4618      	mov	r0, r3
 800ad24:	f002 f816 	bl	800cd54 <RCCEx_PLL2_Config>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad2e:	e015      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	3328      	adds	r3, #40	; 0x28
 800ad36:	2101      	movs	r1, #1
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f002 f8bd 	bl	800ceb8 <RCCEx_PLL3_Config>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad44:	e00a      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad46:	2301      	movs	r3, #1
 800ad48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad4c:	e006      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad4e:	bf00      	nop
 800ad50:	e004      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad52:	bf00      	nop
 800ad54:	e002      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10a      	bne.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad64:	4b38      	ldr	r3, [pc, #224]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad72:	4a35      	ldr	r2, [pc, #212]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad74:	430b      	orrs	r3, r1
 800ad76:	6513      	str	r3, [r2, #80]	; 0x50
 800ad78:	e003      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad7e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad92:	2300      	movs	r3, #0
 800ad94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad98:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad9c:	460b      	mov	r3, r1
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	d058      	beq.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ada2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adae:	d033      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800adb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800adb4:	d82c      	bhi.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adba:	d02f      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800adbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc0:	d826      	bhi.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adc2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adc6:	d02b      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800adc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adcc:	d820      	bhi.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add2:	d012      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800add4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800add8:	d81a      	bhi.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adda:	2b00      	cmp	r3, #0
 800addc:	d022      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800adde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ade2:	d115      	bne.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ade4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade8:	3308      	adds	r3, #8
 800adea:	2101      	movs	r1, #1
 800adec:	4618      	mov	r0, r3
 800adee:	f001 ffb1 	bl	800cd54 <RCCEx_PLL2_Config>
 800adf2:	4603      	mov	r3, r0
 800adf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800adf8:	e015      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfe:	3328      	adds	r3, #40	; 0x28
 800ae00:	2101      	movs	r1, #1
 800ae02:	4618      	mov	r0, r3
 800ae04:	f002 f858 	bl	800ceb8 <RCCEx_PLL3_Config>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ae0e:	e00a      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae16:	e006      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae18:	bf00      	nop
 800ae1a:	e004      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae1c:	bf00      	nop
 800ae1e:	e002      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae20:	bf00      	nop
 800ae22:	e000      	b.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ae24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d10e      	bne.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae2e:	4b06      	ldr	r3, [pc, #24]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae32:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae3e:	4a02      	ldr	r2, [pc, #8]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae40:	430b      	orrs	r3, r1
 800ae42:	6593      	str	r3, [r2, #88]	; 0x58
 800ae44:	e006      	b.n	800ae54 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae46:	bf00      	nop
 800ae48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae64:	2300      	movs	r3, #0
 800ae66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4313      	orrs	r3, r2
 800ae72:	d037      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae7e:	d00e      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae84:	d816      	bhi.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d018      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8e:	d111      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae90:	4bc4      	ldr	r3, [pc, #784]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae94:	4ac3      	ldr	r2, [pc, #780]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae9c:	e00f      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea2:	3308      	adds	r3, #8
 800aea4:	2101      	movs	r1, #1
 800aea6:	4618      	mov	r0, r3
 800aea8:	f001 ff54 	bl	800cd54 <RCCEx_PLL2_Config>
 800aeac:	4603      	mov	r3, r0
 800aeae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800aeb2:	e004      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aeba:	e000      	b.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800aebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800aec6:	4bb7      	ldr	r3, [pc, #732]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aed4:	4ab3      	ldr	r2, [pc, #716]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aed6:	430b      	orrs	r3, r1
 800aed8:	6513      	str	r3, [r2, #80]	; 0x50
 800aeda:	e003      	b.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aedc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aee0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aef4:	2300      	movs	r3, #0
 800aef6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aefa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aefe:	460b      	mov	r3, r1
 800af00:	4313      	orrs	r3, r2
 800af02:	d039      	beq.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800af04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af0a:	2b03      	cmp	r3, #3
 800af0c:	d81c      	bhi.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800af0e:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800af10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af14:	0800af51 	.word	0x0800af51
 800af18:	0800af25 	.word	0x0800af25
 800af1c:	0800af33 	.word	0x0800af33
 800af20:	0800af51 	.word	0x0800af51
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af24:	4b9f      	ldr	r3, [pc, #636]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a9e      	ldr	r2, [pc, #632]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af30:	e00f      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	3308      	adds	r3, #8
 800af38:	2102      	movs	r1, #2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 ff0a 	bl	800cd54 <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af46:	e004      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af4e:	e000      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10a      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af5a:	4b92      	ldr	r3, [pc, #584]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af5e:	f023 0103 	bic.w	r1, r3, #3
 800af62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af68:	4a8e      	ldr	r2, [pc, #568]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af6a:	430b      	orrs	r3, r1
 800af6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af6e:	e003      	b.n	800af78 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af88:	2300      	movs	r3, #0
 800af8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af92:	460b      	mov	r3, r1
 800af94:	4313      	orrs	r3, r2
 800af96:	f000 8099 	beq.w	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af9a:	4b83      	ldr	r3, [pc, #524]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a82      	ldr	r2, [pc, #520]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afa4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800afa6:	f7f8 fd67 	bl	8003a78 <HAL_GetTick>
 800afaa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afae:	e00b      	b.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afb0:	f7f8 fd62 	bl	8003a78 <HAL_GetTick>
 800afb4:	4602      	mov	r2, r0
 800afb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b64      	cmp	r3, #100	; 0x64
 800afbe:	d903      	bls.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afc6:	e005      	b.n	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afc8:	4b77      	ldr	r3, [pc, #476]	; (800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d0ed      	beq.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d173      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afdc:	4b71      	ldr	r3, [pc, #452]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afe8:	4053      	eors	r3, r2
 800afea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d015      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aff2:	4b6c      	ldr	r3, [pc, #432]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800affa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800affe:	4b69      	ldr	r3, [pc, #420]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b002:	4a68      	ldr	r2, [pc, #416]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b008:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b00a:	4b66      	ldr	r3, [pc, #408]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b00e:	4a65      	ldr	r2, [pc, #404]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b014:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b016:	4a63      	ldr	r2, [pc, #396]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b01c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b02a:	d118      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7f8 fd24 	bl	8003a78 <HAL_GetTick>
 800b030:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b034:	e00d      	b.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b036:	f7f8 fd1f 	bl	8003a78 <HAL_GetTick>
 800b03a:	4602      	mov	r2, r0
 800b03c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b040:	1ad2      	subs	r2, r2, r3
 800b042:	f241 3388 	movw	r3, #5000	; 0x1388
 800b046:	429a      	cmp	r2, r3
 800b048:	d903      	bls.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b050:	e005      	b.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b052:	4b54      	ldr	r3, [pc, #336]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0eb      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b05e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b062:	2b00      	cmp	r3, #0
 800b064:	d129      	bne.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b06e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b076:	d10e      	bne.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b078:	4b4a      	ldr	r3, [pc, #296]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b084:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b088:	091a      	lsrs	r2, r3, #4
 800b08a:	4b48      	ldr	r3, [pc, #288]	; (800b1ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b08c:	4013      	ands	r3, r2
 800b08e:	4a45      	ldr	r2, [pc, #276]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b090:	430b      	orrs	r3, r1
 800b092:	6113      	str	r3, [r2, #16]
 800b094:	e005      	b.n	800b0a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b096:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b098:	691b      	ldr	r3, [r3, #16]
 800b09a:	4a42      	ldr	r2, [pc, #264]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b09c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b0a0:	6113      	str	r3, [r2, #16]
 800b0a2:	4b40      	ldr	r3, [pc, #256]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b2:	4a3c      	ldr	r2, [pc, #240]	; (800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0b4:	430b      	orrs	r3, r1
 800b0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b8:	e008      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b0ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b0c2:	e003      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	f002 0301 	and.w	r3, r2, #1
 800b0d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0dc:	2300      	movs	r3, #0
 800b0de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	f000 808f 	beq.w	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0f4:	2b28      	cmp	r3, #40	; 0x28
 800b0f6:	d871      	bhi.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b1e5 	.word	0x0800b1e5
 800b104:	0800b1dd 	.word	0x0800b1dd
 800b108:	0800b1dd 	.word	0x0800b1dd
 800b10c:	0800b1dd 	.word	0x0800b1dd
 800b110:	0800b1dd 	.word	0x0800b1dd
 800b114:	0800b1dd 	.word	0x0800b1dd
 800b118:	0800b1dd 	.word	0x0800b1dd
 800b11c:	0800b1dd 	.word	0x0800b1dd
 800b120:	0800b1b1 	.word	0x0800b1b1
 800b124:	0800b1dd 	.word	0x0800b1dd
 800b128:	0800b1dd 	.word	0x0800b1dd
 800b12c:	0800b1dd 	.word	0x0800b1dd
 800b130:	0800b1dd 	.word	0x0800b1dd
 800b134:	0800b1dd 	.word	0x0800b1dd
 800b138:	0800b1dd 	.word	0x0800b1dd
 800b13c:	0800b1dd 	.word	0x0800b1dd
 800b140:	0800b1c7 	.word	0x0800b1c7
 800b144:	0800b1dd 	.word	0x0800b1dd
 800b148:	0800b1dd 	.word	0x0800b1dd
 800b14c:	0800b1dd 	.word	0x0800b1dd
 800b150:	0800b1dd 	.word	0x0800b1dd
 800b154:	0800b1dd 	.word	0x0800b1dd
 800b158:	0800b1dd 	.word	0x0800b1dd
 800b15c:	0800b1dd 	.word	0x0800b1dd
 800b160:	0800b1e5 	.word	0x0800b1e5
 800b164:	0800b1dd 	.word	0x0800b1dd
 800b168:	0800b1dd 	.word	0x0800b1dd
 800b16c:	0800b1dd 	.word	0x0800b1dd
 800b170:	0800b1dd 	.word	0x0800b1dd
 800b174:	0800b1dd 	.word	0x0800b1dd
 800b178:	0800b1dd 	.word	0x0800b1dd
 800b17c:	0800b1dd 	.word	0x0800b1dd
 800b180:	0800b1e5 	.word	0x0800b1e5
 800b184:	0800b1dd 	.word	0x0800b1dd
 800b188:	0800b1dd 	.word	0x0800b1dd
 800b18c:	0800b1dd 	.word	0x0800b1dd
 800b190:	0800b1dd 	.word	0x0800b1dd
 800b194:	0800b1dd 	.word	0x0800b1dd
 800b198:	0800b1dd 	.word	0x0800b1dd
 800b19c:	0800b1dd 	.word	0x0800b1dd
 800b1a0:	0800b1e5 	.word	0x0800b1e5
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	58024800 	.word	0x58024800
 800b1ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b4:	3308      	adds	r3, #8
 800b1b6:	2101      	movs	r1, #1
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f001 fdcb 	bl	800cd54 <RCCEx_PLL2_Config>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1c4:	e00f      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ca:	3328      	adds	r3, #40	; 0x28
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 fe72 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1da:	e004      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1e2:	e000      	b.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d10a      	bne.n	800b204 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1ee:	4bbf      	ldr	r3, [pc, #764]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1fc:	4abb      	ldr	r2, [pc, #748]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1fe:	430b      	orrs	r3, r1
 800b200:	6553      	str	r3, [r2, #84]	; 0x54
 800b202:	e003      	b.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b204:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b208:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b214:	f002 0302 	and.w	r3, r2, #2
 800b218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b21c:	2300      	movs	r3, #0
 800b21e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b222:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b226:	460b      	mov	r3, r1
 800b228:	4313      	orrs	r3, r2
 800b22a:	d041      	beq.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b232:	2b05      	cmp	r3, #5
 800b234:	d824      	bhi.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b236:	a201      	add	r2, pc, #4	; (adr r2, 800b23c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23c:	0800b289 	.word	0x0800b289
 800b240:	0800b255 	.word	0x0800b255
 800b244:	0800b26b 	.word	0x0800b26b
 800b248:	0800b289 	.word	0x0800b289
 800b24c:	0800b289 	.word	0x0800b289
 800b250:	0800b289 	.word	0x0800b289
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b258:	3308      	adds	r3, #8
 800b25a:	2101      	movs	r1, #1
 800b25c:	4618      	mov	r0, r3
 800b25e:	f001 fd79 	bl	800cd54 <RCCEx_PLL2_Config>
 800b262:	4603      	mov	r3, r0
 800b264:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b268:	e00f      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b26e:	3328      	adds	r3, #40	; 0x28
 800b270:	2101      	movs	r1, #1
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fe20 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b278:	4603      	mov	r3, r0
 800b27a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b27e:	e004      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b280:	2301      	movs	r3, #1
 800b282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b286:	e000      	b.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b288:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b28a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b292:	4b96      	ldr	r3, [pc, #600]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b296:	f023 0107 	bic.w	r1, r3, #7
 800b29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2a0:	4a92      	ldr	r2, [pc, #584]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	6553      	str	r3, [r2, #84]	; 0x54
 800b2a6:	e003      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f002 0304 	and.w	r3, r2, #4
 800b2bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	d044      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2d8:	2b05      	cmp	r3, #5
 800b2da:	d825      	bhi.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2dc:	a201      	add	r2, pc, #4	; (adr r2, 800b2e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b331 	.word	0x0800b331
 800b2e8:	0800b2fd 	.word	0x0800b2fd
 800b2ec:	0800b313 	.word	0x0800b313
 800b2f0:	0800b331 	.word	0x0800b331
 800b2f4:	0800b331 	.word	0x0800b331
 800b2f8:	0800b331 	.word	0x0800b331
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	3308      	adds	r3, #8
 800b302:	2101      	movs	r1, #1
 800b304:	4618      	mov	r0, r3
 800b306:	f001 fd25 	bl	800cd54 <RCCEx_PLL2_Config>
 800b30a:	4603      	mov	r3, r0
 800b30c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b310:	e00f      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b316:	3328      	adds	r3, #40	; 0x28
 800b318:	2101      	movs	r1, #1
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 fdcc 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b320:	4603      	mov	r3, r0
 800b322:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b326:	e004      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b328:	2301      	movs	r3, #1
 800b32a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b32e:	e000      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b330:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b336:	2b00      	cmp	r3, #0
 800b338:	d10b      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b33a:	4b6c      	ldr	r3, [pc, #432]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33e:	f023 0107 	bic.w	r1, r3, #7
 800b342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34a:	4a68      	ldr	r2, [pc, #416]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b34c:	430b      	orrs	r3, r1
 800b34e:	6593      	str	r3, [r2, #88]	; 0x58
 800b350:	e003      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f002 0320 	and.w	r3, r2, #32
 800b366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b36a:	2300      	movs	r3, #0
 800b36c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b370:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b374:	460b      	mov	r3, r1
 800b376:	4313      	orrs	r3, r2
 800b378:	d055      	beq.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b37a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b37e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b386:	d033      	beq.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b38c:	d82c      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b38e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b392:	d02f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b398:	d826      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b39a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b39e:	d02b      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b3a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3a4:	d820      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3aa:	d012      	beq.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3b0:	d81a      	bhi.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d022      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3ba:	d115      	bne.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c0:	3308      	adds	r3, #8
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f001 fcc5 	bl	800cd54 <RCCEx_PLL2_Config>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3d0:	e015      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d6:	3328      	adds	r3, #40	; 0x28
 800b3d8:	2102      	movs	r1, #2
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f001 fd6c 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3e6:	e00a      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3ee:	e006      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3f0:	bf00      	nop
 800b3f2:	e004      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3f4:	bf00      	nop
 800b3f6:	e002      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3f8:	bf00      	nop
 800b3fa:	e000      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b402:	2b00      	cmp	r3, #0
 800b404:	d10b      	bne.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b406:	4b39      	ldr	r3, [pc, #228]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b412:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b416:	4a35      	ldr	r2, [pc, #212]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b418:	430b      	orrs	r3, r1
 800b41a:	6553      	str	r3, [r2, #84]	; 0x54
 800b41c:	e003      	b.n	800b426 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b422:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b432:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b436:	2300      	movs	r3, #0
 800b438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b43c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b440:	460b      	mov	r3, r1
 800b442:	4313      	orrs	r3, r2
 800b444:	d058      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b44e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b452:	d033      	beq.n	800b4bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b454:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b458:	d82c      	bhi.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b45e:	d02f      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b464:	d826      	bhi.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b46a:	d02b      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b46c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b470:	d820      	bhi.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b476:	d012      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b47c:	d81a      	bhi.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d022      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b486:	d115      	bne.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48c:	3308      	adds	r3, #8
 800b48e:	2100      	movs	r1, #0
 800b490:	4618      	mov	r0, r3
 800b492:	f001 fc5f 	bl	800cd54 <RCCEx_PLL2_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b49c:	e015      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a2:	3328      	adds	r3, #40	; 0x28
 800b4a4:	2102      	movs	r1, #2
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f001 fd06 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b4b2:	e00a      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4ba:	e006      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4bc:	bf00      	nop
 800b4be:	e004      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c0:	bf00      	nop
 800b4c2:	e002      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c4:	bf00      	nop
 800b4c6:	e000      	b.n	800b4ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d10e      	bne.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4d2:	4b06      	ldr	r3, [pc, #24]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4e2:	4a02      	ldr	r2, [pc, #8]	; (800b4ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e8:	e006      	b.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4ea:	bf00      	nop
 800b4ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b508:	2300      	movs	r3, #0
 800b50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b50e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b512:	460b      	mov	r3, r1
 800b514:	4313      	orrs	r3, r2
 800b516:	d055      	beq.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b520:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b524:	d033      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b526:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b52a:	d82c      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b52c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b530:	d02f      	beq.n	800b592 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b536:	d826      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b538:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b53c:	d02b      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b53e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b542:	d820      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b544:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b548:	d012      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b54a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b54e:	d81a      	bhi.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b550:	2b00      	cmp	r3, #0
 800b552:	d022      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b558:	d115      	bne.n	800b586 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55e:	3308      	adds	r3, #8
 800b560:	2100      	movs	r1, #0
 800b562:	4618      	mov	r0, r3
 800b564:	f001 fbf6 	bl	800cd54 <RCCEx_PLL2_Config>
 800b568:	4603      	mov	r3, r0
 800b56a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b56e:	e015      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b570:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b574:	3328      	adds	r3, #40	; 0x28
 800b576:	2102      	movs	r1, #2
 800b578:	4618      	mov	r0, r3
 800b57a:	f001 fc9d 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b57e:	4603      	mov	r3, r0
 800b580:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b584:	e00a      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b586:	2301      	movs	r3, #1
 800b588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b58c:	e006      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b58e:	bf00      	nop
 800b590:	e004      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b592:	bf00      	nop
 800b594:	e002      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b596:	bf00      	nop
 800b598:	e000      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b5a4:	4ba0      	ldr	r3, [pc, #640]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5b4:	4a9c      	ldr	r2, [pc, #624]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5b6:	430b      	orrs	r3, r1
 800b5b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ba:	e003      	b.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5cc:	f002 0308 	and.w	r3, r2, #8
 800b5d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	d01e      	beq.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5f0:	d10c      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	3328      	adds	r3, #40	; 0x28
 800b5f8:	2102      	movs	r1, #2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 fc5c 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b60c:	4b86      	ldr	r3, [pc, #536]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b61c:	4a82      	ldr	r2, [pc, #520]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b61e:	430b      	orrs	r3, r1
 800b620:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62a:	f002 0310 	and.w	r3, r2, #16
 800b62e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b632:	2300      	movs	r3, #0
 800b634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b638:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b63c:	460b      	mov	r3, r1
 800b63e:	4313      	orrs	r3, r2
 800b640:	d01e      	beq.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b64a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b64e:	d10c      	bne.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b654:	3328      	adds	r3, #40	; 0x28
 800b656:	2102      	movs	r1, #2
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 fc2d 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d002      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b66a:	4b6f      	ldr	r3, [pc, #444]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b66e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b67a:	4a6b      	ldr	r2, [pc, #428]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b67c:	430b      	orrs	r3, r1
 800b67e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b68c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b68e:	2300      	movs	r3, #0
 800b690:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b692:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b696:	460b      	mov	r3, r1
 800b698:	4313      	orrs	r3, r2
 800b69a:	d03e      	beq.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6a8:	d022      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b6aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6ae:	d81b      	bhi.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d003      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b6b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6b8:	d00b      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b6ba:	e015      	b.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	2100      	movs	r1, #0
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f001 fb45 	bl	800cd54 <RCCEx_PLL2_Config>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6d0:	e00f      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d6:	3328      	adds	r3, #40	; 0x28
 800b6d8:	2102      	movs	r1, #2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f001 fbec 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6e6:	e004      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6ee:	e000      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b6f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10b      	bne.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6fa:	4b4b      	ldr	r3, [pc, #300]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b706:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b70a:	4a47      	ldr	r2, [pc, #284]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b70c:	430b      	orrs	r3, r1
 800b70e:	6593      	str	r3, [r2, #88]	; 0x58
 800b710:	e003      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b712:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b716:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b71a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b726:	673b      	str	r3, [r7, #112]	; 0x70
 800b728:	2300      	movs	r3, #0
 800b72a:	677b      	str	r3, [r7, #116]	; 0x74
 800b72c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b730:	460b      	mov	r3, r1
 800b732:	4313      	orrs	r3, r2
 800b734:	d03b      	beq.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b73e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b742:	d01f      	beq.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b744:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b748:	d818      	bhi.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b74a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b74e:	d003      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b750:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b754:	d007      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b756:	e011      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b758:	4b33      	ldr	r3, [pc, #204]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75c:	4a32      	ldr	r2, [pc, #200]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b75e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b764:	e00f      	b.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b76a:	3328      	adds	r3, #40	; 0x28
 800b76c:	2101      	movs	r1, #1
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 fba2 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b774:	4603      	mov	r3, r0
 800b776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b77a:	e004      	b.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b782:	e000      	b.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b784:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b786:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10b      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b78e:	4b26      	ldr	r3, [pc, #152]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b792:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b79e:	4a22      	ldr	r2, [pc, #136]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7a0:	430b      	orrs	r3, r1
 800b7a2:	6553      	str	r3, [r2, #84]	; 0x54
 800b7a4:	e003      	b.n	800b7ae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b7ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800b7bc:	2300      	movs	r3, #0
 800b7be:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b7c0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	d034      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d8:	d007      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7da:	e011      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7dc:	4b12      	ldr	r3, [pc, #72]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	4a11      	ldr	r2, [pc, #68]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7e8:	e00e      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	2102      	movs	r1, #2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 faae 	bl	800cd54 <RCCEx_PLL2_Config>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7fe:	e003      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b806:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b808:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10d      	bne.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b810:	4b05      	ldr	r3, [pc, #20]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b814:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b81e:	4a02      	ldr	r2, [pc, #8]	; (800b828 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b820:	430b      	orrs	r3, r1
 800b822:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b824:	e006      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b826:	bf00      	nop
 800b828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b82c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b830:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b840:	663b      	str	r3, [r7, #96]	; 0x60
 800b842:	2300      	movs	r3, #0
 800b844:	667b      	str	r3, [r7, #100]	; 0x64
 800b846:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b84a:	460b      	mov	r3, r1
 800b84c:	4313      	orrs	r3, r2
 800b84e:	d00c      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	3328      	adds	r3, #40	; 0x28
 800b856:	2102      	movs	r1, #2
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 fb2d 	bl	800ceb8 <RCCEx_PLL3_Config>
 800b85e:	4603      	mov	r3, r0
 800b860:	2b00      	cmp	r3, #0
 800b862:	d002      	beq.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b864:	2301      	movs	r3, #1
 800b866:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b876:	65bb      	str	r3, [r7, #88]	; 0x58
 800b878:	2300      	movs	r3, #0
 800b87a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b87c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b880:	460b      	mov	r3, r1
 800b882:	4313      	orrs	r3, r2
 800b884:	d036      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b890:	d018      	beq.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b896:	d811      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b89c:	d014      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b89e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8a2:	d80b      	bhi.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d011      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b8a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8ac:	d106      	bne.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ae:	4bb7      	ldr	r3, [pc, #732]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b2:	4ab6      	ldr	r2, [pc, #728]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b8ba:	e008      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8c2:	e004      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8c4:	bf00      	nop
 800b8c6:	e002      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8c8:	bf00      	nop
 800b8ca:	e000      	b.n	800b8ce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d10a      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8d6:	4bad      	ldr	r3, [pc, #692]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e4:	4aa9      	ldr	r2, [pc, #676]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8e6:	430b      	orrs	r3, r1
 800b8e8:	6553      	str	r3, [r2, #84]	; 0x54
 800b8ea:	e003      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b900:	653b      	str	r3, [r7, #80]	; 0x50
 800b902:	2300      	movs	r3, #0
 800b904:	657b      	str	r3, [r7, #84]	; 0x54
 800b906:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b90a:	460b      	mov	r3, r1
 800b90c:	4313      	orrs	r3, r2
 800b90e:	d009      	beq.n	800b924 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b910:	4b9e      	ldr	r3, [pc, #632]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b914:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b91e:	4a9b      	ldr	r2, [pc, #620]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b930:	64bb      	str	r3, [r7, #72]	; 0x48
 800b932:	2300      	movs	r3, #0
 800b934:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b936:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b93a:	460b      	mov	r3, r1
 800b93c:	4313      	orrs	r3, r2
 800b93e:	d009      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b940:	4b92      	ldr	r3, [pc, #584]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b944:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b94c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b94e:	4a8f      	ldr	r2, [pc, #572]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b950:	430b      	orrs	r3, r1
 800b952:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b960:	643b      	str	r3, [r7, #64]	; 0x40
 800b962:	2300      	movs	r3, #0
 800b964:	647b      	str	r3, [r7, #68]	; 0x44
 800b966:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b96a:	460b      	mov	r3, r1
 800b96c:	4313      	orrs	r3, r2
 800b96e:	d00e      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b970:	4b86      	ldr	r3, [pc, #536]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	4a85      	ldr	r2, [pc, #532]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b976:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b97a:	6113      	str	r3, [r2, #16]
 800b97c:	4b83      	ldr	r3, [pc, #524]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b97e:	6919      	ldr	r1, [r3, #16]
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b988:	4a80      	ldr	r2, [pc, #512]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b98a:	430b      	orrs	r3, r1
 800b98c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b99a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b99c:	2300      	movs	r3, #0
 800b99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9a0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d009      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b9aa:	4b78      	ldr	r3, [pc, #480]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b8:	4a74      	ldr	r2, [pc, #464]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ba:	430b      	orrs	r3, r1
 800b9bc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b9be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9ca:	633b      	str	r3, [r7, #48]	; 0x30
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800b9d0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	d00a      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9da:	4b6c      	ldr	r3, [pc, #432]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9de:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9ea:	4a68      	ldr	r2, [pc, #416]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9ec:	430b      	orrs	r3, r1
 800b9ee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f8:	2100      	movs	r1, #0
 800b9fa:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9fc:	f003 0301 	and.w	r3, r3, #1
 800ba00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800ba06:	460b      	mov	r3, r1
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	d011      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba10:	3308      	adds	r3, #8
 800ba12:	2100      	movs	r1, #0
 800ba14:	4618      	mov	r0, r3
 800ba16:	f001 f99d 	bl	800cd54 <RCCEx_PLL2_Config>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d003      	beq.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	6239      	str	r1, [r7, #32]
 800ba3c:	f003 0302 	and.w	r3, r3, #2
 800ba40:	627b      	str	r3, [r7, #36]	; 0x24
 800ba42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba46:	460b      	mov	r3, r1
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	d011      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	3308      	adds	r3, #8
 800ba52:	2101      	movs	r1, #1
 800ba54:	4618      	mov	r0, r3
 800ba56:	f001 f97d 	bl	800cd54 <RCCEx_PLL2_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	61b9      	str	r1, [r7, #24]
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	61fb      	str	r3, [r7, #28]
 800ba82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba86:	460b      	mov	r3, r1
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	d011      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba90:	3308      	adds	r3, #8
 800ba92:	2102      	movs	r1, #2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 f95d 	bl	800cd54 <RCCEx_PLL2_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d003      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab8:	2100      	movs	r1, #0
 800baba:	6139      	str	r1, [r7, #16]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bac6:	460b      	mov	r3, r1
 800bac8:	4313      	orrs	r3, r2
 800baca:	d011      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad0:	3328      	adds	r3, #40	; 0x28
 800bad2:	2100      	movs	r1, #0
 800bad4:	4618      	mov	r0, r3
 800bad6:	f001 f9ef 	bl	800ceb8 <RCCEx_PLL3_Config>
 800bada:	4603      	mov	r3, r0
 800badc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bae0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf8:	2100      	movs	r1, #0
 800bafa:	60b9      	str	r1, [r7, #8]
 800bafc:	f003 0310 	and.w	r3, r3, #16
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bb06:	460b      	mov	r3, r1
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	d011      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	3328      	adds	r3, #40	; 0x28
 800bb12:	2101      	movs	r1, #1
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 f9cf 	bl	800ceb8 <RCCEx_PLL3_Config>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb38:	2100      	movs	r1, #0
 800bb3a:	6039      	str	r1, [r7, #0]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	607b      	str	r3, [r7, #4]
 800bb42:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb46:	460b      	mov	r3, r1
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	d011      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb50:	3328      	adds	r3, #40	; 0x28
 800bb52:	2102      	movs	r1, #2
 800bb54:	4618      	mov	r0, r3
 800bb56:	f001 f9af 	bl	800ceb8 <RCCEx_PLL3_Config>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d003      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	e000      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb84:	46bd      	mov	sp, r7
 800bb86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb8a:	bf00      	nop
 800bb8c:	58024400 	.word	0x58024400

0800bb90 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b090      	sub	sp, #64	; 0x40
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bba2:	430b      	orrs	r3, r1
 800bba4:	f040 8094 	bne.w	800bcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bba8:	4b9b      	ldr	r3, [pc, #620]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	f003 0307 	and.w	r3, r3, #7
 800bbb0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	2b04      	cmp	r3, #4
 800bbb6:	f200 8087 	bhi.w	800bcc8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bbba:	a201      	add	r2, pc, #4	; (adr r2, 800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bbd5 	.word	0x0800bbd5
 800bbc4:	0800bbfd 	.word	0x0800bbfd
 800bbc8:	0800bc25 	.word	0x0800bc25
 800bbcc:	0800bcc1 	.word	0x0800bcc1
 800bbd0:	0800bc4d 	.word	0x0800bc4d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbd4:	4b90      	ldr	r3, [pc, #576]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbe0:	d108      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 ff62 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf0:	f000 bc93 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	f000 bc8f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbfc:	4b86      	ldr	r3, [pc, #536]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc08:	d108      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0a:	f107 0318 	add.w	r3, r7, #24
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fca6 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc18:	f000 bc7f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc20:	f000 bc7b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc24:	4b7c      	ldr	r3, [pc, #496]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc30:	d108      	bne.n	800bc44 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc32:	f107 030c 	add.w	r3, r7, #12
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fde6 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc40:	f000 bc6b 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc44:	2300      	movs	r3, #0
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc48:	f000 bc67 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc4c:	4b72      	ldr	r3, [pc, #456]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc54:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc56:	4b70      	ldr	r3, [pc, #448]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f003 0304 	and.w	r3, r3, #4
 800bc5e:	2b04      	cmp	r3, #4
 800bc60:	d10c      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc68:	4b6b      	ldr	r3, [pc, #428]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	4a6a      	ldr	r2, [pc, #424]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc74:	fa22 f303 	lsr.w	r3, r2, r3
 800bc78:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc7a:	e01f      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc7c:	4b66      	ldr	r3, [pc, #408]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc88:	d106      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc90:	d102      	bne.n	800bc98 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc92:	4b63      	ldr	r3, [pc, #396]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc94:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc96:	e011      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc98:	4b5f      	ldr	r3, [pc, #380]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bca4:	d106      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcac:	d102      	bne.n	800bcb4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bcae:	4b5d      	ldr	r3, [pc, #372]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bcb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcb2:	e003      	b.n	800bcbc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bcb8:	f000 bc2f 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bcbc:	f000 bc2d 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bcc0:	4b59      	ldr	r3, [pc, #356]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc4:	f000 bc29 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bccc:	f000 bc25 	b.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	f040 80a7 	bne.w	800be2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcde:	4b4e      	ldr	r3, [pc, #312]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bce2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bce6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcee:	d054      	beq.n	800bd9a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcf6:	f200 808b 	bhi.w	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd00:	f000 8083 	beq.w	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd06:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bd0a:	f200 8081 	bhi.w	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd14:	d02f      	beq.n	800bd76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd1c:	d878      	bhi.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d004      	beq.n	800bd2e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd2a:	d012      	beq.n	800bd52 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd2c:	e070      	b.n	800be10 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd2e:	4b3a      	ldr	r3, [pc, #232]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd40:	4618      	mov	r0, r3
 800bd42:	f000 feb5 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd4a:	e3e6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd50:	e3e3      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd52:	4b31      	ldr	r3, [pc, #196]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd5e:	d107      	bne.n	800bd70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd60:	f107 0318 	add.w	r3, r7, #24
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fbfb 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6e:	e3d4      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd70:	2300      	movs	r3, #0
 800bd72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd74:	e3d1      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd76:	4b28      	ldr	r3, [pc, #160]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd82:	d107      	bne.n	800bd94 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f000 fd3d 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd92:	e3c2      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd94:	2300      	movs	r3, #0
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd98:	e3bf      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd9a:	4b1f      	ldr	r3, [pc, #124]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bda2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bda4:	4b1c      	ldr	r3, [pc, #112]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b04      	cmp	r3, #4
 800bdae:	d10c      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d109      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdb6:	4b18      	ldr	r3, [pc, #96]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	f003 0303 	and.w	r3, r3, #3
 800bdc0:	4a16      	ldr	r2, [pc, #88]	; (800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdc8:	e01e      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bdca:	4b13      	ldr	r3, [pc, #76]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdd6:	d106      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bdd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdde:	d102      	bne.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bde0:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bde4:	e010      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bde6:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdf2:	d106      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdfa:	d102      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdfc:	4b09      	ldr	r3, [pc, #36]	; (800be24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be00:	e002      	b.n	800be08 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be06:	e388      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be08:	e387      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be0a:	4b07      	ldr	r3, [pc, #28]	; (800be28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be0e:	e384      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be10:	2300      	movs	r3, #0
 800be12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be14:	e381      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be16:	bf00      	nop
 800be18:	58024400 	.word	0x58024400
 800be1c:	03d09000 	.word	0x03d09000
 800be20:	003d0900 	.word	0x003d0900
 800be24:	02faf080 	.word	0x02faf080
 800be28:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be30:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be34:	430b      	orrs	r3, r1
 800be36:	f040 809c 	bne.w	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be3a:	4b9e      	ldr	r3, [pc, #632]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be3e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be4a:	d054      	beq.n	800bef6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be52:	f200 808b 	bhi.w	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be5c:	f000 8083 	beq.w	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be66:	f200 8081 	bhi.w	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be70:	d02f      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be78:	d878      	bhi.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d004      	beq.n	800be8a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be86:	d012      	beq.n	800beae <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be88:	e070      	b.n	800bf6c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be8a:	4b8a      	ldr	r3, [pc, #552]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be96:	d107      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fe07 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bea6:	e338      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea8:	2300      	movs	r3, #0
 800beaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beac:	e335      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800beae:	4b81      	ldr	r3, [pc, #516]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800beb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800beba:	d107      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bebc:	f107 0318 	add.w	r3, r7, #24
 800bec0:	4618      	mov	r0, r3
 800bec2:	f000 fb4d 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beca:	e326      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed0:	e323      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bed2:	4b78      	ldr	r3, [pc, #480]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bede:	d107      	bne.n	800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bee0:	f107 030c 	add.w	r3, r7, #12
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 fc8f 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beee:	e314      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bef0:	2300      	movs	r3, #0
 800bef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bef4:	e311      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bef6:	4b6f      	ldr	r3, [pc, #444]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800befa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800befe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf00:	4b6c      	ldr	r3, [pc, #432]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0304 	and.w	r3, r3, #4
 800bf08:	2b04      	cmp	r3, #4
 800bf0a:	d10c      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d109      	bne.n	800bf26 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf12:	4b68      	ldr	r3, [pc, #416]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	08db      	lsrs	r3, r3, #3
 800bf18:	f003 0303 	and.w	r3, r3, #3
 800bf1c:	4a66      	ldr	r2, [pc, #408]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf1e:	fa22 f303 	lsr.w	r3, r2, r3
 800bf22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf24:	e01e      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf26:	4b63      	ldr	r3, [pc, #396]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf32:	d106      	bne.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf3a:	d102      	bne.n	800bf42 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf3c:	4b5f      	ldr	r3, [pc, #380]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf40:	e010      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf42:	4b5c      	ldr	r3, [pc, #368]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf4e:	d106      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf56:	d102      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf58:	4b59      	ldr	r3, [pc, #356]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf5c:	e002      	b.n	800bf64 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf62:	e2da      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf64:	e2d9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf66:	4b57      	ldr	r3, [pc, #348]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf6a:	e2d6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf70:	e2d3      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf76:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	f040 80a7 	bne.w	800c0ce <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf80:	4b4c      	ldr	r3, [pc, #304]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf84:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf90:	d055      	beq.n	800c03e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf98:	f200 8096 	bhi.w	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfa2:	f000 8084 	beq.w	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfac:	f200 808c 	bhi.w	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfb6:	d030      	beq.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfbe:	f200 8083 	bhi.w	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d004      	beq.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfce:	d012      	beq.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bfd0:	e07a      	b.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfd2:	4b38      	ldr	r3, [pc, #224]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfde:	d107      	bne.n	800bff0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fd63 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfee:	e294      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bff0:	2300      	movs	r3, #0
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff4:	e291      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bff6:	4b2f      	ldr	r3, [pc, #188]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bffe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c002:	d107      	bne.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c004:	f107 0318 	add.w	r3, r7, #24
 800c008:	4618      	mov	r0, r3
 800c00a:	f000 faa9 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c012:	e282      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c014:	2300      	movs	r3, #0
 800c016:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c018:	e27f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c01a:	4b26      	ldr	r3, [pc, #152]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c026:	d107      	bne.n	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	4618      	mov	r0, r3
 800c02e:	f000 fbeb 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c036:	e270      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c038:	2300      	movs	r3, #0
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03c:	e26d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c03e:	4b1d      	ldr	r3, [pc, #116]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c042:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c046:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c048:	4b1a      	ldr	r3, [pc, #104]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 0304 	and.w	r3, r3, #4
 800c050:	2b04      	cmp	r3, #4
 800c052:	d10c      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	2b00      	cmp	r3, #0
 800c058:	d109      	bne.n	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c05a:	4b16      	ldr	r3, [pc, #88]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	08db      	lsrs	r3, r3, #3
 800c060:	f003 0303 	and.w	r3, r3, #3
 800c064:	4a14      	ldr	r2, [pc, #80]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c066:	fa22 f303 	lsr.w	r3, r2, r3
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c06c:	e01e      	b.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c06e:	4b11      	ldr	r3, [pc, #68]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07a:	d106      	bne.n	800c08a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c07c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c07e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c082:	d102      	bne.n	800c08a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c084:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c088:	e010      	b.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c08a:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c092:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c096:	d106      	bne.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c09a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c09e:	d102      	bne.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0a0:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a4:	e002      	b.n	800c0ac <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0aa:	e236      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0ac:	e235      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0ae:	4b05      	ldr	r3, [pc, #20]	; (800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b2:	e232      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0b4:	58024400 	.word	0x58024400
 800c0b8:	03d09000 	.word	0x03d09000
 800c0bc:	003d0900 	.word	0x003d0900
 800c0c0:	02faf080 	.word	0x02faf080
 800c0c4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0cc:	e225      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c0d6:	430b      	orrs	r3, r1
 800c0d8:	f040 8085 	bne.w	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0dc:	4b9c      	ldr	r3, [pc, #624]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0e0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0e4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0ec:	d06b      	beq.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0f4:	d874      	bhi.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0fc:	d056      	beq.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c104:	d86c      	bhi.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c10c:	d03b      	beq.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c110:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c114:	d864      	bhi.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11c:	d021      	beq.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c124:	d85c      	bhi.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c132:	d004      	beq.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c134:	e054      	b.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c136:	f7fe fb5f 	bl	800a7f8 <HAL_RCC_GetPCLK1Freq>
 800c13a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c13c:	e1ed      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c13e:	4b84      	ldr	r3, [pc, #528]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c146:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c14a:	d107      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c14c:	f107 0318 	add.w	r3, r7, #24
 800c150:	4618      	mov	r0, r3
 800c152:	f000 fa05 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c15a:	e1de      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c160:	e1db      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c162:	4b7b      	ldr	r3, [pc, #492]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c16e:	d107      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c170:	f107 030c 	add.w	r3, r7, #12
 800c174:	4618      	mov	r0, r3
 800c176:	f000 fb47 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17e:	e1cc      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	e1c9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c186:	4b72      	ldr	r3, [pc, #456]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d109      	bne.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c192:	4b6f      	ldr	r3, [pc, #444]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	08db      	lsrs	r3, r3, #3
 800c198:	f003 0303 	and.w	r3, r3, #3
 800c19c:	4a6d      	ldr	r2, [pc, #436]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c19e:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a4:	e1b9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1aa:	e1b6      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c1ac:	4b68      	ldr	r3, [pc, #416]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b8:	d102      	bne.n	800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c1ba:	4b67      	ldr	r3, [pc, #412]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1be:	e1ac      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c4:	e1a9      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c1c6:	4b62      	ldr	r3, [pc, #392]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d2:	d102      	bne.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c1d4:	4b61      	ldr	r3, [pc, #388]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1d8:	e19f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1de:	e19c      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e4:	e199      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1ea:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c1ee:	430b      	orrs	r3, r1
 800c1f0:	d173      	bne.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1f2:	4b57      	ldr	r3, [pc, #348]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1fa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c202:	d02f      	beq.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c20a:	d863      	bhi.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c218:	d012      	beq.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c21a:	e05b      	b.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c21c:	4b4c      	ldr	r3, [pc, #304]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c228:	d107      	bne.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c22a:	f107 0318 	add.w	r3, r7, #24
 800c22e:	4618      	mov	r0, r3
 800c230:	f000 f996 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c234:	69bb      	ldr	r3, [r7, #24]
 800c236:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c238:	e16f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23e:	e16c      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c240:	4b43      	ldr	r3, [pc, #268]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c248:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c24c:	d107      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c24e:	f107 030c 	add.w	r3, r7, #12
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fad8 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c25c:	e15d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c262:	e15a      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c264:	4b3a      	ldr	r3, [pc, #232]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c268:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c26c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c26e:	4b38      	ldr	r3, [pc, #224]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b04      	cmp	r3, #4
 800c278:	d10c      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d109      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c280:	4b33      	ldr	r3, [pc, #204]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	08db      	lsrs	r3, r3, #3
 800c286:	f003 0303 	and.w	r3, r3, #3
 800c28a:	4a32      	ldr	r2, [pc, #200]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c28c:	fa22 f303 	lsr.w	r3, r2, r3
 800c290:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c292:	e01e      	b.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c294:	4b2e      	ldr	r3, [pc, #184]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a0:	d106      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a8:	d102      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2aa:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ae:	e010      	b.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2b0:	4b27      	ldr	r3, [pc, #156]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2bc:	d106      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c4:	d102      	bne.n	800c2cc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2c6:	4b25      	ldr	r3, [pc, #148]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ca:	e002      	b.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2d0:	e123      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2d2:	e122      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d8:	e11f      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2de:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c2e2:	430b      	orrs	r3, r1
 800c2e4:	d13c      	bne.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2e6:	4b1a      	ldr	r3, [pc, #104]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2ee:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d004      	beq.n	800c300 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2fc:	d012      	beq.n	800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c2fe:	e023      	b.n	800c348 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c300:	4b13      	ldr	r3, [pc, #76]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c30c:	d107      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c312:	4618      	mov	r0, r3
 800c314:	f000 fbcc 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31c:	e0fd      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c322:	e0fa      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c324:	4b0a      	ldr	r3, [pc, #40]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c32c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c330:	d107      	bne.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c332:	f107 0318 	add.w	r3, r7, #24
 800c336:	4618      	mov	r0, r3
 800c338:	f000 f912 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c33c:	6a3b      	ldr	r3, [r7, #32]
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c340:	e0eb      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c346:	e0e8      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34c:	e0e5      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c34e:	bf00      	nop
 800c350:	58024400 	.word	0x58024400
 800c354:	03d09000 	.word	0x03d09000
 800c358:	003d0900 	.word	0x003d0900
 800c35c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c360:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c364:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c368:	430b      	orrs	r3, r1
 800c36a:	f040 8085 	bne.w	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c36e:	4b6d      	ldr	r3, [pc, #436]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c372:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c376:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c37e:	d06b      	beq.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c386:	d874      	bhi.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c38e:	d056      	beq.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c396:	d86c      	bhi.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c39e:	d03b      	beq.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c3a6:	d864      	bhi.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3ae:	d021      	beq.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b6:	d85c      	bhi.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d004      	beq.n	800c3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3c4:	d004      	beq.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c3c6:	e054      	b.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3c8:	f000 f8b4 	bl	800c534 <HAL_RCCEx_GetD3PCLK1Freq>
 800c3cc:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3ce:	e0a4      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3d0:	4b54      	ldr	r3, [pc, #336]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3dc:	d107      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3de:	f107 0318 	add.w	r3, r7, #24
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 f8bc 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ec:	e095      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f2:	e092      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3f4:	4b4b      	ldr	r3, [pc, #300]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c400:	d107      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c402:	f107 030c 	add.w	r3, r7, #12
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f9fe 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c410:	e083      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c416:	e080      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c418:	4b42      	ldr	r3, [pc, #264]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	2b04      	cmp	r3, #4
 800c422:	d109      	bne.n	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c424:	4b3f      	ldr	r3, [pc, #252]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	08db      	lsrs	r3, r3, #3
 800c42a:	f003 0303 	and.w	r3, r3, #3
 800c42e:	4a3e      	ldr	r2, [pc, #248]	; (800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c430:	fa22 f303 	lsr.w	r3, r2, r3
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c436:	e070      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c43c:	e06d      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c43e:	4b39      	ldr	r3, [pc, #228]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c44a:	d102      	bne.n	800c452 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c44c:	4b37      	ldr	r3, [pc, #220]	; (800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c450:	e063      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c456:	e060      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c458:	4b32      	ldr	r3, [pc, #200]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c460:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c464:	d102      	bne.n	800c46c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c466:	4b32      	ldr	r3, [pc, #200]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c46a:	e056      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c470:	e053      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c476:	e050      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c47c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c480:	430b      	orrs	r3, r1
 800c482:	d148      	bne.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c484:	4b27      	ldr	r3, [pc, #156]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c488:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c48c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c494:	d02a      	beq.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c49c:	d838      	bhi.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d004      	beq.n	800c4ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4aa:	d00d      	beq.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c4ac:	e030      	b.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c4ae:	4b1d      	ldr	r3, [pc, #116]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ba:	d102      	bne.n	800c4c2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c4bc:	4b1c      	ldr	r3, [pc, #112]	; (800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c0:	e02b      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c6:	e028      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4c8:	4b16      	ldr	r3, [pc, #88]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4d4:	d107      	bne.n	800c4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f000 fae8 	bl	800cab0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e4:	e019      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ea:	e016      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ec:	4b0d      	ldr	r3, [pc, #52]	; (800c524 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f8:	d107      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4fa:	f107 0318 	add.w	r3, r7, #24
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f82e 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c508:	e007      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50e:	e004      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c514:	e001      	b.n	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3740      	adds	r7, #64	; 0x40
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	58024400 	.word	0x58024400
 800c528:	03d09000 	.word	0x03d09000
 800c52c:	003d0900 	.word	0x003d0900
 800c530:	02faf080 	.word	0x02faf080

0800c534 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c538:	f7fe f92e 	bl	800a798 <HAL_RCC_GetHCLKFreq>
 800c53c:	4602      	mov	r2, r0
 800c53e:	4b06      	ldr	r3, [pc, #24]	; (800c558 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	091b      	lsrs	r3, r3, #4
 800c544:	f003 0307 	and.w	r3, r3, #7
 800c548:	4904      	ldr	r1, [pc, #16]	; (800c55c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c54a:	5ccb      	ldrb	r3, [r1, r3]
 800c54c:	f003 031f 	and.w	r3, r3, #31
 800c550:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c554:	4618      	mov	r0, r3
 800c556:	bd80      	pop	{r7, pc}
 800c558:	58024400 	.word	0x58024400
 800c55c:	0801858c 	.word	0x0801858c

0800c560 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c560:	b480      	push	{r7}
 800c562:	b089      	sub	sp, #36	; 0x24
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c568:	4ba1      	ldr	r3, [pc, #644]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56c:	f003 0303 	and.w	r3, r3, #3
 800c570:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c572:	4b9f      	ldr	r3, [pc, #636]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	0b1b      	lsrs	r3, r3, #12
 800c578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c57c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c57e:	4b9c      	ldr	r3, [pc, #624]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c582:	091b      	lsrs	r3, r3, #4
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c58a:	4b99      	ldr	r3, [pc, #612]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c58c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c58e:	08db      	lsrs	r3, r3, #3
 800c590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	fb02 f303 	mul.w	r3, r2, r3
 800c59a:	ee07 3a90 	vmov	s15, r3
 800c59e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 8111 	beq.w	800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	f000 8083 	beq.w	800c6bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	f200 80a1 	bhi.w	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d003      	beq.n	800c5cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d056      	beq.n	800c678 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c5ca:	e099      	b.n	800c700 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5cc:	4b88      	ldr	r3, [pc, #544]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d02d      	beq.n	800c634 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5d8:	4b85      	ldr	r3, [pc, #532]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	08db      	lsrs	r3, r3, #3
 800c5de:	f003 0303 	and.w	r3, r3, #3
 800c5e2:	4a84      	ldr	r2, [pc, #528]	; (800c7f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	ee07 3a90 	vmov	s15, r3
 800c5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c602:	4b7b      	ldr	r3, [pc, #492]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c60a:	ee07 3a90 	vmov	s15, r3
 800c60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c612:	ed97 6a03 	vldr	s12, [r7, #12]
 800c616:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c62e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c632:	e087      	b.n	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	ee07 3a90 	vmov	s15, r3
 800c63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c63e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c646:	4b6a      	ldr	r3, [pc, #424]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c64e:	ee07 3a90 	vmov	s15, r3
 800c652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c656:	ed97 6a03 	vldr	s12, [r7, #12]
 800c65a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c676:	e065      	b.n	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c682:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c68a:	4b59      	ldr	r3, [pc, #356]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c692:	ee07 3a90 	vmov	s15, r3
 800c696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c69e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6ba:	e043      	b.n	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c804 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ce:	4b48      	ldr	r3, [pc, #288]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6d6:	ee07 3a90 	vmov	s15, r3
 800c6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6fe:	e021      	b.n	800c744 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	ee07 3a90 	vmov	s15, r3
 800c706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c800 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c712:	4b37      	ldr	r3, [pc, #220]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71a:	ee07 3a90 	vmov	s15, r3
 800c71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c722:	ed97 6a03 	vldr	s12, [r7, #12]
 800c726:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c742:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c744:	4b2a      	ldr	r3, [pc, #168]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c748:	0a5b      	lsrs	r3, r3, #9
 800c74a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c74e:	ee07 3a90 	vmov	s15, r3
 800c752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c76a:	ee17 2a90 	vmov	r2, s15
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c772:	4b1f      	ldr	r3, [pc, #124]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c776:	0c1b      	lsrs	r3, r3, #16
 800c778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77c:	ee07 3a90 	vmov	s15, r3
 800c780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c798:	ee17 2a90 	vmov	r2, s15
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c7a0:	4b13      	ldr	r3, [pc, #76]	; (800c7f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a4:	0e1b      	lsrs	r3, r3, #24
 800c7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7aa:	ee07 3a90 	vmov	s15, r3
 800c7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c7ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800c7be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7c6:	ee17 2a90 	vmov	r2, s15
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7ce:	e008      	b.n	800c7e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	609a      	str	r2, [r3, #8]
}
 800c7e2:	bf00      	nop
 800c7e4:	3724      	adds	r7, #36	; 0x24
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
 800c7ee:	bf00      	nop
 800c7f0:	58024400 	.word	0x58024400
 800c7f4:	03d09000 	.word	0x03d09000
 800c7f8:	46000000 	.word	0x46000000
 800c7fc:	4c742400 	.word	0x4c742400
 800c800:	4a742400 	.word	0x4a742400
 800c804:	4c3ebc20 	.word	0x4c3ebc20

0800c808 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c808:	b480      	push	{r7}
 800c80a:	b089      	sub	sp, #36	; 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c810:	4ba1      	ldr	r3, [pc, #644]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c814:	f003 0303 	and.w	r3, r3, #3
 800c818:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c81a:	4b9f      	ldr	r3, [pc, #636]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c81e:	0d1b      	lsrs	r3, r3, #20
 800c820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c824:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c826:	4b9c      	ldr	r3, [pc, #624]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82a:	0a1b      	lsrs	r3, r3, #8
 800c82c:	f003 0301 	and.w	r3, r3, #1
 800c830:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c832:	4b99      	ldr	r3, [pc, #612]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c836:	08db      	lsrs	r3, r3, #3
 800c838:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c83c:	693a      	ldr	r2, [r7, #16]
 800c83e:	fb02 f303 	mul.w	r3, r2, r3
 800c842:	ee07 3a90 	vmov	s15, r3
 800c846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c84a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 8111 	beq.w	800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	f000 8083 	beq.w	800c964 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	2b02      	cmp	r3, #2
 800c862:	f200 80a1 	bhi.w	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c86c:	69bb      	ldr	r3, [r7, #24]
 800c86e:	2b01      	cmp	r3, #1
 800c870:	d056      	beq.n	800c920 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c872:	e099      	b.n	800c9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c874:	4b88      	ldr	r3, [pc, #544]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0320 	and.w	r3, r3, #32
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d02d      	beq.n	800c8dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c880:	4b85      	ldr	r3, [pc, #532]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	08db      	lsrs	r3, r3, #3
 800c886:	f003 0303 	and.w	r3, r3, #3
 800c88a:	4a84      	ldr	r2, [pc, #528]	; (800ca9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c88c:	fa22 f303 	lsr.w	r3, r2, r3
 800c890:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	ee07 3a90 	vmov	s15, r3
 800c898:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	ee07 3a90 	vmov	s15, r3
 800c8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8aa:	4b7b      	ldr	r3, [pc, #492]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b2:	ee07 3a90 	vmov	s15, r3
 800c8b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8be:	eddf 5a78 	vldr	s11, [pc, #480]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8da:	e087      	b.n	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	ee07 3a90 	vmov	s15, r3
 800c8e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800caa4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ee:	4b6a      	ldr	r3, [pc, #424]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8f6:	ee07 3a90 	vmov	s15, r3
 800c8fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800c902:	eddf 5a67 	vldr	s11, [pc, #412]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c90a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c90e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c91a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c91e:	e065      	b.n	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	ee07 3a90 	vmov	s15, r3
 800c926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c92a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c92e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c932:	4b59      	ldr	r3, [pc, #356]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c93a:	ee07 3a90 	vmov	s15, r3
 800c93e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c942:	ed97 6a03 	vldr	s12, [r7, #12]
 800c946:	eddf 5a56 	vldr	s11, [pc, #344]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c94a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c94e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c95a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c95e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c962:	e043      	b.n	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800caac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b48      	ldr	r3, [pc, #288]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9a6:	e021      	b.n	800c9ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800caa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b37      	ldr	r3, [pc, #220]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800caa0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9ec:	4b2a      	ldr	r3, [pc, #168]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f0:	0a5b      	lsrs	r3, r3, #9
 800c9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f6:	ee07 3a90 	vmov	s15, r3
 800c9fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca12:	ee17 2a90 	vmov	r2, s15
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ca1a:	4b1f      	ldr	r3, [pc, #124]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca1e:	0c1b      	lsrs	r3, r3, #16
 800ca20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca24:	ee07 3a90 	vmov	s15, r3
 800ca28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca34:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca40:	ee17 2a90 	vmov	r2, s15
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca48:	4b13      	ldr	r3, [pc, #76]	; (800ca98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4c:	0e1b      	lsrs	r3, r3, #24
 800ca4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca6e:	ee17 2a90 	vmov	r2, s15
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca76:	e008      	b.n	800ca8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	609a      	str	r2, [r3, #8]
}
 800ca8a:	bf00      	nop
 800ca8c:	3724      	adds	r7, #36	; 0x24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	58024400 	.word	0x58024400
 800ca9c:	03d09000 	.word	0x03d09000
 800caa0:	46000000 	.word	0x46000000
 800caa4:	4c742400 	.word	0x4c742400
 800caa8:	4a742400 	.word	0x4a742400
 800caac:	4c3ebc20 	.word	0x4c3ebc20

0800cab0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cab0:	b480      	push	{r7}
 800cab2:	b089      	sub	sp, #36	; 0x24
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cab8:	4ba0      	ldr	r3, [pc, #640]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cabc:	f003 0303 	and.w	r3, r3, #3
 800cac0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cac2:	4b9e      	ldr	r3, [pc, #632]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac6:	091b      	lsrs	r3, r3, #4
 800cac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cacc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cace:	4b9b      	ldr	r3, [pc, #620]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cad8:	4b98      	ldr	r3, [pc, #608]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cadc:	08db      	lsrs	r3, r3, #3
 800cade:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cae2:	693a      	ldr	r2, [r7, #16]
 800cae4:	fb02 f303 	mul.w	r3, r2, r3
 800cae8:	ee07 3a90 	vmov	s15, r3
 800caec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	f000 8111 	beq.w	800cd1e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	f000 8083 	beq.w	800cc0a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	f200 80a1 	bhi.w	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cb0c:	69bb      	ldr	r3, [r7, #24]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d003      	beq.n	800cb1a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cb12:	69bb      	ldr	r3, [r7, #24]
 800cb14:	2b01      	cmp	r3, #1
 800cb16:	d056      	beq.n	800cbc6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cb18:	e099      	b.n	800cc4e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb1a:	4b88      	ldr	r3, [pc, #544]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	f003 0320 	and.w	r3, r3, #32
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d02d      	beq.n	800cb82 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb26:	4b85      	ldr	r3, [pc, #532]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	08db      	lsrs	r3, r3, #3
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	4a83      	ldr	r2, [pc, #524]	; (800cd40 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb32:	fa22 f303 	lsr.w	r3, r2, r3
 800cb36:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	ee07 3a90 	vmov	s15, r3
 800cb3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	ee07 3a90 	vmov	s15, r3
 800cb48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb50:	4b7a      	ldr	r3, [pc, #488]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb58:	ee07 3a90 	vmov	s15, r3
 800cb5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb60:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb64:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb80:	e087      	b.n	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	ee07 3a90 	vmov	s15, r3
 800cb88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb94:	4b69      	ldr	r3, [pc, #420]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9c:	ee07 3a90 	vmov	s15, r3
 800cba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc4:	e065      	b.n	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd4c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cbd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd8:	4b58      	ldr	r3, [pc, #352]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbe0:	ee07 3a90 	vmov	s15, r3
 800cbe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbec:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc08:	e043      	b.n	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cc18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1c:	4b47      	ldr	r3, [pc, #284]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc24:	ee07 3a90 	vmov	s15, r3
 800cc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc30:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc4c:	e021      	b.n	800cc92 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	ee07 3a90 	vmov	s15, r3
 800cc54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc58:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd48 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc60:	4b36      	ldr	r3, [pc, #216]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc68:	ee07 3a90 	vmov	s15, r3
 800cc6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc70:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc74:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd44 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc90:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc92:	4b2a      	ldr	r3, [pc, #168]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc96:	0a5b      	lsrs	r3, r3, #9
 800cc98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc9c:	ee07 3a90 	vmov	s15, r3
 800cca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cca8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccac:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccb8:	ee17 2a90 	vmov	r2, s15
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ccc0:	4b1e      	ldr	r3, [pc, #120]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc4:	0c1b      	lsrs	r3, r3, #16
 800ccc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccca:	ee07 3a90 	vmov	s15, r3
 800ccce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccda:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cce6:	ee17 2a90 	vmov	r2, s15
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ccee:	4b13      	ldr	r3, [pc, #76]	; (800cd3c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf2:	0e1b      	lsrs	r3, r3, #24
 800ccf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccf8:	ee07 3a90 	vmov	s15, r3
 800ccfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd08:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd14:	ee17 2a90 	vmov	r2, s15
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cd1c:	e008      	b.n	800cd30 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	609a      	str	r2, [r3, #8]
}
 800cd30:	bf00      	nop
 800cd32:	3724      	adds	r7, #36	; 0x24
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr
 800cd3c:	58024400 	.word	0x58024400
 800cd40:	03d09000 	.word	0x03d09000
 800cd44:	46000000 	.word	0x46000000
 800cd48:	4c742400 	.word	0x4c742400
 800cd4c:	4a742400 	.word	0x4a742400
 800cd50:	4c3ebc20 	.word	0x4c3ebc20

0800cd54 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd62:	4b53      	ldr	r3, [pc, #332]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd66:	f003 0303 	and.w	r3, r3, #3
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d101      	bne.n	800cd72 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e099      	b.n	800cea6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd72:	4b4f      	ldr	r3, [pc, #316]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a4e      	ldr	r2, [pc, #312]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cd78:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd7e:	f7f6 fe7b 	bl	8003a78 <HAL_GetTick>
 800cd82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd84:	e008      	b.n	800cd98 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd86:	f7f6 fe77 	bl	8003a78 <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	2b02      	cmp	r3, #2
 800cd92:	d901      	bls.n	800cd98 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd94:	2303      	movs	r3, #3
 800cd96:	e086      	b.n	800cea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd98:	4b45      	ldr	r3, [pc, #276]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1f0      	bne.n	800cd86 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cda4:	4b42      	ldr	r3, [pc, #264]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cda6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cda8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	031b      	lsls	r3, r3, #12
 800cdb2:	493f      	ldr	r1, [pc, #252]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	628b      	str	r3, [r1, #40]	; 0x28
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	3b01      	subs	r3, #1
 800cdc8:	025b      	lsls	r3, r3, #9
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	431a      	orrs	r2, r3
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	68db      	ldr	r3, [r3, #12]
 800cdd2:	3b01      	subs	r3, #1
 800cdd4:	041b      	lsls	r3, r3, #16
 800cdd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdda:	431a      	orrs	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	3b01      	subs	r3, #1
 800cde2:	061b      	lsls	r3, r3, #24
 800cde4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cde8:	4931      	ldr	r1, [pc, #196]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cdea:	4313      	orrs	r3, r2
 800cdec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdee:	4b30      	ldr	r3, [pc, #192]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	695b      	ldr	r3, [r3, #20]
 800cdfa:	492d      	ldr	r1, [pc, #180]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ce00:	4b2b      	ldr	r3, [pc, #172]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	f023 0220 	bic.w	r2, r3, #32
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	699b      	ldr	r3, [r3, #24]
 800ce0c:	4928      	ldr	r1, [pc, #160]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ce12:	4b27      	ldr	r3, [pc, #156]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce16:	4a26      	ldr	r2, [pc, #152]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce18:	f023 0310 	bic.w	r3, r3, #16
 800ce1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ce1e:	4b24      	ldr	r3, [pc, #144]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce22:	4b24      	ldr	r3, [pc, #144]	; (800ceb4 <RCCEx_PLL2_Config+0x160>)
 800ce24:	4013      	ands	r3, r2
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	69d2      	ldr	r2, [r2, #28]
 800ce2a:	00d2      	lsls	r2, r2, #3
 800ce2c:	4920      	ldr	r1, [pc, #128]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce32:	4b1f      	ldr	r3, [pc, #124]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce36:	4a1e      	ldr	r2, [pc, #120]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce38:	f043 0310 	orr.w	r3, r3, #16
 800ce3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d106      	bne.n	800ce52 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce44:	4b1a      	ldr	r3, [pc, #104]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce48:	4a19      	ldr	r2, [pc, #100]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce50:	e00f      	b.n	800ce72 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	2b01      	cmp	r3, #1
 800ce56:	d106      	bne.n	800ce66 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce58:	4b15      	ldr	r3, [pc, #84]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5c:	4a14      	ldr	r2, [pc, #80]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce64:	e005      	b.n	800ce72 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce66:	4b12      	ldr	r3, [pc, #72]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	4a11      	ldr	r2, [pc, #68]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a0e      	ldr	r2, [pc, #56]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce7e:	f7f6 fdfb 	bl	8003a78 <HAL_GetTick>
 800ce82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce84:	e008      	b.n	800ce98 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce86:	f7f6 fdf7 	bl	8003a78 <HAL_GetTick>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	1ad3      	subs	r3, r2, r3
 800ce90:	2b02      	cmp	r3, #2
 800ce92:	d901      	bls.n	800ce98 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce94:	2303      	movs	r3, #3
 800ce96:	e006      	b.n	800cea6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce98:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <RCCEx_PLL2_Config+0x15c>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0f0      	beq.n	800ce86 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3710      	adds	r7, #16
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	58024400 	.word	0x58024400
 800ceb4:	ffff0007 	.word	0xffff0007

0800ceb8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cec6:	4b53      	ldr	r3, [pc, #332]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceca:	f003 0303 	and.w	r3, r3, #3
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d101      	bne.n	800ced6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	e099      	b.n	800d00a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ced6:	4b4f      	ldr	r3, [pc, #316]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	4a4e      	ldr	r2, [pc, #312]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cedc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cee2:	f7f6 fdc9 	bl	8003a78 <HAL_GetTick>
 800cee6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cee8:	e008      	b.n	800cefc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ceea:	f7f6 fdc5 	bl	8003a78 <HAL_GetTick>
 800ceee:	4602      	mov	r2, r0
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	1ad3      	subs	r3, r2, r3
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d901      	bls.n	800cefc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cef8:	2303      	movs	r3, #3
 800cefa:	e086      	b.n	800d00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cefc:	4b45      	ldr	r3, [pc, #276]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1f0      	bne.n	800ceea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cf08:	4b42      	ldr	r3, [pc, #264]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	051b      	lsls	r3, r3, #20
 800cf16:	493f      	ldr	r1, [pc, #252]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	628b      	str	r3, [r1, #40]	; 0x28
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	3b01      	subs	r3, #1
 800cf22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	025b      	lsls	r3, r3, #9
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	431a      	orrs	r2, r3
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	68db      	ldr	r3, [r3, #12]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	041b      	lsls	r3, r3, #16
 800cf3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf3e:	431a      	orrs	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	061b      	lsls	r3, r3, #24
 800cf48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf4c:	4931      	ldr	r1, [pc, #196]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf52:	4b30      	ldr	r3, [pc, #192]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	695b      	ldr	r3, [r3, #20]
 800cf5e:	492d      	ldr	r1, [pc, #180]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf60:	4313      	orrs	r3, r2
 800cf62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf64:	4b2b      	ldr	r3, [pc, #172]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	699b      	ldr	r3, [r3, #24]
 800cf70:	4928      	ldr	r1, [pc, #160]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf72:	4313      	orrs	r3, r2
 800cf74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf76:	4b27      	ldr	r3, [pc, #156]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7a:	4a26      	ldr	r2, [pc, #152]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf82:	4b24      	ldr	r3, [pc, #144]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf86:	4b24      	ldr	r3, [pc, #144]	; (800d018 <RCCEx_PLL3_Config+0x160>)
 800cf88:	4013      	ands	r3, r2
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	69d2      	ldr	r2, [r2, #28]
 800cf8e:	00d2      	lsls	r2, r2, #3
 800cf90:	4920      	ldr	r1, [pc, #128]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf96:	4b1f      	ldr	r3, [pc, #124]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9a:	4a1e      	ldr	r2, [pc, #120]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cf9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d106      	bne.n	800cfb6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cfa8:	4b1a      	ldr	r3, [pc, #104]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfac:	4a19      	ldr	r2, [pc, #100]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cfb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfb4:	e00f      	b.n	800cfd6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d106      	bne.n	800cfca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cfbc:	4b15      	ldr	r3, [pc, #84]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	4a14      	ldr	r2, [pc, #80]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cfc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfc8:	e005      	b.n	800cfd6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfca:	4b12      	ldr	r3, [pc, #72]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfce:	4a11      	ldr	r2, [pc, #68]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfd4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfd6:	4b0f      	ldr	r3, [pc, #60]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a0e      	ldr	r2, [pc, #56]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cfdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfe0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfe2:	f7f6 fd49 	bl	8003a78 <HAL_GetTick>
 800cfe6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfe8:	e008      	b.n	800cffc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfea:	f7f6 fd45 	bl	8003a78 <HAL_GetTick>
 800cfee:	4602      	mov	r2, r0
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d901      	bls.n	800cffc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e006      	b.n	800d00a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cffc:	4b05      	ldr	r3, [pc, #20]	; (800d014 <RCCEx_PLL3_Config+0x15c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d004:	2b00      	cmp	r3, #0
 800d006:	d0f0      	beq.n	800cfea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d008:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	58024400 	.word	0x58024400
 800d018:	ffff0007 	.word	0xffff0007

0800d01c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b08a      	sub	sp, #40	; 0x28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e075      	b.n	800d11a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d105      	bne.n	800d046 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f7f5 fe59 	bl	8002cf8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2204      	movs	r2, #4
 800d04a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f000 f868 	bl	800d124 <HAL_SD_InitCard>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d001      	beq.n	800d05e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e05d      	b.n	800d11a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d05e:	f107 0308 	add.w	r3, r7, #8
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fdaf 	bl	800dbc8 <HAL_SD_GetCardStatus>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e052      	b.n	800d11a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d074:	7e3b      	ldrb	r3, [r7, #24]
 800d076:	b2db      	uxtb	r3, r3
 800d078:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d07a:	7e7b      	ldrb	r3, [r7, #25]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d084:	2b01      	cmp	r3, #1
 800d086:	d10a      	bne.n	800d09e <HAL_SD_Init+0x82>
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d102      	bne.n	800d094 <HAL_SD_Init+0x78>
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d004      	beq.n	800d09e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d09a:	659a      	str	r2, [r3, #88]	; 0x58
 800d09c:	e00b      	b.n	800d0b6 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d104      	bne.n	800d0b0 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0ac:	659a      	str	r2, [r3, #88]	; 0x58
 800d0ae:	e002      	b.n	800d0b6 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	68db      	ldr	r3, [r3, #12]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fe6d 	bl	800dd9c <HAL_SD_ConfigWideBusOperation>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d001      	beq.n	800d0cc <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	e026      	b.n	800d11a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0cc:	f7f6 fcd4 	bl	8003a78 <HAL_GetTick>
 800d0d0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0d2:	e011      	b.n	800d0f8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0d4:	f7f6 fcd0 	bl	8003a78 <HAL_GetTick>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	69fb      	ldr	r3, [r7, #28]
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e2:	d109      	bne.n	800d0f8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0ea:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d0f4:	2303      	movs	r3, #3
 800d0f6:	e010      	b.n	800d11a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 ff61 	bl	800dfc0 <HAL_SD_GetCardState>
 800d0fe:	4603      	mov	r3, r0
 800d100:	2b04      	cmp	r3, #4
 800d102:	d1e7      	bne.n	800d0d4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3728      	adds	r7, #40	; 0x28
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
	...

0800d124 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d124:	b590      	push	{r4, r7, lr}
 800d126:	b08d      	sub	sp, #52	; 0x34
 800d128:	af02      	add	r7, sp, #8
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d12c:	2300      	movs	r3, #0
 800d12e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d130:	2300      	movs	r3, #0
 800d132:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d138:	2300      	movs	r3, #0
 800d13a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d13c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d140:	f04f 0100 	mov.w	r1, #0
 800d144:	f7fe fd24 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800d148:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d109      	bne.n	800d164 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2201      	movs	r2, #1
 800d154:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d15e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e070      	b.n	800d246 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d166:	0a1b      	lsrs	r3, r3, #8
 800d168:	4a39      	ldr	r2, [pc, #228]	; (800d250 <HAL_SD_InitCard+0x12c>)
 800d16a:	fba2 2303 	umull	r2, r3, r2, r3
 800d16e:	091b      	lsrs	r3, r3, #4
 800d170:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681c      	ldr	r4, [r3, #0]
 800d176:	466a      	mov	r2, sp
 800d178:	f107 0318 	add.w	r3, r7, #24
 800d17c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d180:	e882 0003 	stmia.w	r2, {r0, r1}
 800d184:	f107 030c 	add.w	r3, r7, #12
 800d188:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d18a:	4620      	mov	r0, r4
 800d18c:	f004 fec4 	bl	8011f18 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f004 ff07 	bl	8011fa8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	005b      	lsls	r3, r3, #1
 800d1a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d007      	beq.n	800d1c2 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d1b2:	4a28      	ldr	r2, [pc, #160]	; (800d254 <HAL_SD_InitCard+0x130>)
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	4618      	mov	r0, r3
 800d1be:	f7f6 fc67 	bl	8003a90 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 ffea 	bl	800e19c <SD_PowerON>
 800d1c8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1ca:	6a3b      	ldr	r3, [r7, #32]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00b      	beq.n	800d1e8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	431a      	orrs	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e02e      	b.n	800d246 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 ff09 	bl	800e000 <SD_InitCard>
 800d1ee:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1f0:	6a3b      	ldr	r3, [r7, #32]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00b      	beq.n	800d20e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	431a      	orrs	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e01b      	b.n	800d246 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d216:	4618      	mov	r0, r3
 800d218:	f004 ff5c 	bl	80120d4 <SDMMC_CmdBlockLength>
 800d21c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00f      	beq.n	800d244 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a0b      	ldr	r2, [pc, #44]	; (800d258 <HAL_SD_InitCard+0x134>)
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	431a      	orrs	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e000      	b.n	800d246 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	4618      	mov	r0, r3
 800d248:	372c      	adds	r7, #44	; 0x2c
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd90      	pop	{r4, r7, pc}
 800d24e:	bf00      	nop
 800d250:	014f8b59 	.word	0x014f8b59
 800d254:	00012110 	.word	0x00012110
 800d258:	1fe00fff 	.word	0x1fe00fff

0800d25c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b08c      	sub	sp, #48	; 0x30
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	607a      	str	r2, [r7, #4]
 800d268:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d278:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e08d      	b.n	800d3a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	f040 8086 	bne.w	800d39e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2200      	movs	r2, #0
 800d296:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	441a      	add	r2, r3
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d907      	bls.n	800d2b6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2aa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e074      	b.n	800d3a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2203      	movs	r2, #3
 800d2ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	68ba      	ldr	r2, [r7, #8]
 800d2ca:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	025a      	lsls	r2, r3, #9
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d002      	beq.n	800d2e2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2de:	025b      	lsls	r3, r3, #9
 800d2e0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2e6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	025b      	lsls	r3, r3, #9
 800d2ec:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2ee:	2390      	movs	r3, #144	; 0x90
 800d2f0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f107 0210 	add.w	r2, r7, #16
 800d306:	4611      	mov	r1, r2
 800d308:	4618      	mov	r0, r3
 800d30a:	f004 feb7 	bl	801207c <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	68da      	ldr	r2, [r3, #12]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d31c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	2201      	movs	r2, #1
 800d32c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	2b01      	cmp	r3, #1
 800d332:	d90a      	bls.n	800d34a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2282      	movs	r2, #130	; 0x82
 800d338:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d340:	4618      	mov	r0, r3
 800d342:	f004 ff0d 	bl	8012160 <SDMMC_CmdReadMultiBlock>
 800d346:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d348:	e009      	b.n	800d35e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2281      	movs	r2, #129	; 0x81
 800d34e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d356:	4618      	mov	r0, r3
 800d358:	f004 fedf 	bl	801211a <SDMMC_CmdReadSingleBlock>
 800d35c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	2b00      	cmp	r3, #0
 800d362:	d012      	beq.n	800d38a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	4a0f      	ldr	r2, [pc, #60]	; (800d3a8 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d36a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d372:	431a      	orrs	r2, r3
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2201      	movs	r2, #1
 800d37c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	e00a      	b.n	800d3a0 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d398:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d39a:	2300      	movs	r3, #0
 800d39c:	e000      	b.n	800d3a0 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d39e:	2302      	movs	r3, #2
  }
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3730      	adds	r7, #48	; 0x30
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	1fe00fff 	.word	0x1fe00fff

0800d3ac <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08c      	sub	sp, #48	; 0x30
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	607a      	str	r2, [r7, #4]
 800d3b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d107      	bne.n	800d3d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	e08d      	b.n	800d4f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	f040 8086 	bne.w	800d4ee <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	441a      	add	r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d907      	bls.n	800d406 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e074      	b.n	800d4f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2203      	movs	r2, #3
 800d40a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2200      	movs	r2, #0
 800d414:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	025a      	lsls	r2, r3, #9
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d002      	beq.n	800d432 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42e:	025b      	lsls	r3, r3, #9
 800d430:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d432:	f04f 33ff 	mov.w	r3, #4294967295
 800d436:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	025b      	lsls	r3, r3, #9
 800d43c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d43e:	2390      	movs	r3, #144	; 0x90
 800d440:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d442:	2300      	movs	r3, #0
 800d444:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d446:	2300      	movs	r3, #0
 800d448:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d44a:	2300      	movs	r3, #0
 800d44c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f107 0210 	add.w	r2, r7, #16
 800d456:	4611      	mov	r1, r2
 800d458:	4618      	mov	r0, r3
 800d45a:	f004 fe0f 	bl	801207c <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	68da      	ldr	r2, [r3, #12]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d46c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	68ba      	ldr	r2, [r7, #8]
 800d474:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2201      	movs	r2, #1
 800d47c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2b01      	cmp	r3, #1
 800d482:	d90a      	bls.n	800d49a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	22a0      	movs	r2, #160	; 0xa0
 800d488:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d490:	4618      	mov	r0, r3
 800d492:	f004 feab 	bl	80121ec <SDMMC_CmdWriteMultiBlock>
 800d496:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d498:	e009      	b.n	800d4ae <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2290      	movs	r2, #144	; 0x90
 800d49e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f004 fe7d 	bl	80121a6 <SDMMC_CmdWriteSingleBlock>
 800d4ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d012      	beq.n	800d4da <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a0f      	ldr	r2, [pc, #60]	; (800d4f8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	e00a      	b.n	800d4f0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4e8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	e000      	b.n	800d4f0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4ee:	2302      	movs	r3, #2
  }
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3730      	adds	r7, #48	; 0x30
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	1fe00fff 	.word	0x1fe00fff

0800d4fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d508:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d008      	beq.n	800d52a <HAL_SD_IRQHandler+0x2e>
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f003 0308 	and.w	r3, r3, #8
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f001 f926 	bl	800e774 <SD_Read_IT>
 800d528:	e19a      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d534:	2b00      	cmp	r3, #0
 800d536:	f000 80ac 	beq.w	800d692 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d542:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	4b59      	ldr	r3, [pc, #356]	; (800d6b4 <HAL_SD_IRQHandler+0x1b8>)
 800d550:	400b      	ands	r3, r1
 800d552:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d562:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68da      	ldr	r2, [r3, #12]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d572:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0308 	and.w	r3, r3, #8
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d038      	beq.n	800d5f0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b00      	cmp	r3, #0
 800d586:	d104      	bne.n	800d592 <HAL_SD_IRQHandler+0x96>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0320 	and.w	r3, r3, #32
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d011      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	f004 fe4c 	bl	8012234 <SDMMC_CmdStopTransfer>
 800d59c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d008      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f95b 	bl	800d86c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a3f      	ldr	r2, [pc, #252]	; (800d6b8 <HAL_SD_IRQHandler+0x1bc>)
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2200      	movs	r2, #0
 800d5ca:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0301 	and.w	r3, r3, #1
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d104      	bne.n	800d5e0 <HAL_SD_IRQHandler+0xe4>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f003 0302 	and.w	r3, r3, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d003      	beq.n	800d5e8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f006 fe4d 	bl	8014280 <HAL_SD_RxCpltCallback>
 800d5e6:	e13b      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f006 fe3f 	bl	801426c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5ee:	e137      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 8132 	beq.w	800d860 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2200      	movs	r2, #0
 800d602:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2200      	movs	r2, #0
 800d60a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2200      	movs	r2, #0
 800d612:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f003 0302 	and.w	r3, r3, #2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d104      	bne.n	800d628 <HAL_SD_IRQHandler+0x12c>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	f003 0320 	and.w	r3, r3, #32
 800d624:	2b00      	cmp	r3, #0
 800d626:	d011      	beq.n	800d64c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4618      	mov	r0, r3
 800d62e:	f004 fe01 	bl	8012234 <SDMMC_CmdStopTransfer>
 800d632:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d008      	beq.n	800d64c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	431a      	orrs	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 f910 	bl	800d86c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f003 0310 	and.w	r3, r3, #16
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_SD_IRQHandler+0x172>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f006 fdfc 	bl	801426c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d105      	bne.n	800d68a <HAL_SD_IRQHandler+0x18e>
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	f003 0302 	and.w	r3, r3, #2
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80eb 	beq.w	800d860 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f006 fdf8 	bl	8014280 <HAL_SD_RxCpltCallback>
}
 800d690:	e0e6      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d00d      	beq.n	800d6bc <HAL_SD_IRQHandler+0x1c0>
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f003 0308 	and.w	r3, r3, #8
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d008      	beq.n	800d6bc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f001 f8a8 	bl	800e800 <SD_Write_IT>
 800d6b0:	e0d6      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
 800d6b2:	bf00      	nop
 800d6b4:	ffff3ec5 	.word	0xffff3ec5
 800d6b8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 809d 	beq.w	800d806 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d2:	f003 0302 	and.w	r3, r3, #2
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d005      	beq.n	800d6e6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6de:	f043 0202 	orr.w	r2, r3, #2
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ec:	f003 0308 	and.w	r3, r3, #8
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d005      	beq.n	800d700 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	f043 0208 	orr.w	r2, r3, #8
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d706:	f003 0320 	and.w	r3, r3, #32
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d005      	beq.n	800d71a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d712:	f043 0220 	orr.w	r2, r3, #32
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	f003 0310 	and.w	r3, r3, #16
 800d724:	2b00      	cmp	r3, #0
 800d726:	d005      	beq.n	800d734 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d72c:	f043 0210 	orr.w	r2, r3, #16
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a4b      	ldr	r2, [pc, #300]	; (800d868 <HAL_SD_IRQHandler+0x36c>)
 800d73a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d74a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	68da      	ldr	r2, [r3, #12]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d75a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d76a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d77a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4618      	mov	r0, r3
 800d782:	f004 fd57 	bl	8012234 <SDMMC_CmdStopTransfer>
 800d786:	4602      	mov	r2, r0
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78c:	431a      	orrs	r2, r3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68da      	ldr	r2, [r3, #12]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7a0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f003 0308 	and.w	r3, r3, #8
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00a      	beq.n	800d7cc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f851 	bl	800d86c <HAL_SD_ErrorCallback>
}
 800d7ca:	e049      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d044      	beq.n	800d860 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d040      	beq.n	800d860 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7ec:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f834 	bl	800d86c <HAL_SD_ErrorCallback>
}
 800d804:	e02c      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d810:	2b00      	cmp	r3, #0
 800d812:	d025      	beq.n	800d860 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d81c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d824:	f003 0304 	and.w	r3, r3, #4
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10c      	bne.n	800d846 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f003 0320 	and.w	r3, r3, #32
 800d832:	2b00      	cmp	r3, #0
 800d834:	d003      	beq.n	800d83e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f001 f84a 	bl	800e8d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d83c:	e010      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f001 f832 	bl	800e8a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d844:	e00c      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f003 0320 	and.w	r3, r3, #32
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f001 f833 	bl	800e8bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d856:	e003      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f001 f81b 	bl	800e894 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d85e:	e7ff      	b.n	800d860 <HAL_SD_IRQHandler+0x364>
 800d860:	bf00      	nop
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	18000f3a 	.word	0x18000f3a

0800d86c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d88e:	0f9b      	lsrs	r3, r3, #30
 800d890:	b2da      	uxtb	r2, r3
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d89a:	0e9b      	lsrs	r3, r3, #26
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	f003 030f 	and.w	r3, r3, #15
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ac:	0e1b      	lsrs	r3, r3, #24
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	f003 0303 	and.w	r3, r3, #3
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8be:	0c1b      	lsrs	r3, r3, #16
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ca:	0a1b      	lsrs	r3, r3, #8
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e0:	0d1b      	lsrs	r3, r3, #20
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8ec:	0c1b      	lsrs	r3, r3, #16
 800d8ee:	b2db      	uxtb	r3, r3
 800d8f0:	f003 030f 	and.w	r3, r3, #15
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8fe:	0bdb      	lsrs	r3, r3, #15
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 0301 	and.w	r3, r3, #1
 800d906:	b2da      	uxtb	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d910:	0b9b      	lsrs	r3, r3, #14
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d922:	0b5b      	lsrs	r3, r3, #13
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d934:	0b1b      	lsrs	r3, r3, #12
 800d936:	b2db      	uxtb	r3, r3
 800d938:	f003 0301 	and.w	r3, r3, #1
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	2200      	movs	r2, #0
 800d946:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d163      	bne.n	800da18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d954:	009a      	lsls	r2, r3, #2
 800d956:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d95a:	4013      	ands	r3, r2
 800d95c:	687a      	ldr	r2, [r7, #4]
 800d95e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d960:	0f92      	lsrs	r2, r2, #30
 800d962:	431a      	orrs	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d96c:	0edb      	lsrs	r3, r3, #27
 800d96e:	b2db      	uxtb	r3, r3
 800d970:	f003 0307 	and.w	r3, r3, #7
 800d974:	b2da      	uxtb	r2, r3
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97e:	0e1b      	lsrs	r3, r3, #24
 800d980:	b2db      	uxtb	r3, r3
 800d982:	f003 0307 	and.w	r3, r3, #7
 800d986:	b2da      	uxtb	r2, r3
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d990:	0d5b      	lsrs	r3, r3, #21
 800d992:	b2db      	uxtb	r3, r3
 800d994:	f003 0307 	and.w	r3, r3, #7
 800d998:	b2da      	uxtb	r2, r3
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a2:	0c9b      	lsrs	r3, r3, #18
 800d9a4:	b2db      	uxtb	r3, r3
 800d9a6:	f003 0307 	and.w	r3, r3, #7
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b4:	0bdb      	lsrs	r3, r3, #15
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 0307 	and.w	r3, r3, #7
 800d9bc:	b2da      	uxtb	r2, r3
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	691b      	ldr	r3, [r3, #16]
 800d9c6:	1c5a      	adds	r2, r3, #1
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	7e1b      	ldrb	r3, [r3, #24]
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	3302      	adds	r3, #2
 800d9d8:	2201      	movs	r2, #1
 800d9da:	fa02 f303 	lsl.w	r3, r2, r3
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d9e2:	fb03 f202 	mul.w	r2, r3, r2
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	7a1b      	ldrb	r3, [r3, #8]
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	f003 030f 	and.w	r3, r3, #15
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	409a      	lsls	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da04:	0a52      	lsrs	r2, r2, #9
 800da06:	fb03 f202 	mul.w	r2, r3, r2
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da14:	655a      	str	r2, [r3, #84]	; 0x54
 800da16:	e031      	b.n	800da7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d11d      	bne.n	800da5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da24:	041b      	lsls	r3, r3, #16
 800da26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da2e:	0c1b      	lsrs	r3, r3, #16
 800da30:	431a      	orrs	r2, r3
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	3301      	adds	r3, #1
 800da3c:	029a      	lsls	r2, r3, #10
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da50:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	655a      	str	r2, [r3, #84]	; 0x54
 800da5a:	e00f      	b.n	800da7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	4a58      	ldr	r2, [pc, #352]	; (800dbc4 <HAL_SD_GetCardCSD+0x344>)
 800da62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2201      	movs	r2, #1
 800da74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	e09d      	b.n	800dbb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da80:	0b9b      	lsrs	r3, r3, #14
 800da82:	b2db      	uxtb	r3, r3
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	b2da      	uxtb	r2, r3
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da92:	09db      	lsrs	r3, r3, #7
 800da94:	b2db      	uxtb	r3, r3
 800da96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da9a:	b2da      	uxtb	r2, r3
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daaa:	b2da      	uxtb	r2, r3
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab4:	0fdb      	lsrs	r3, r3, #31
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dac0:	0f5b      	lsrs	r3, r3, #29
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	f003 0303 	and.w	r3, r3, #3
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dad2:	0e9b      	lsrs	r3, r3, #26
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	f003 0307 	and.w	r3, r3, #7
 800dada:	b2da      	uxtb	r2, r3
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dae4:	0d9b      	lsrs	r3, r3, #22
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 030f 	and.w	r3, r3, #15
 800daec:	b2da      	uxtb	r2, r3
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf6:	0d5b      	lsrs	r3, r3, #21
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	f003 0301 	and.w	r3, r3, #1
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db12:	0c1b      	lsrs	r3, r3, #16
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db26:	0bdb      	lsrs	r3, r3, #15
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3a:	0b9b      	lsrs	r3, r3, #14
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db4e:	0b5b      	lsrs	r3, r3, #13
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db62:	0b1b      	lsrs	r3, r3, #12
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0301 	and.w	r3, r3, #1
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db76:	0a9b      	lsrs	r3, r3, #10
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0303 	and.w	r3, r3, #3
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db8a:	0a1b      	lsrs	r3, r3, #8
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0303 	and.w	r3, r3, #3
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9e:	085b      	lsrs	r3, r3, #1
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr
 800dbc4:	1fe00fff 	.word	0x1fe00fff

0800dbc8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b094      	sub	sp, #80	; 0x50
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d101      	bne.n	800dbe8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	e0a7      	b.n	800dd38 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbe8:	f107 0308 	add.w	r3, r7, #8
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fb62 	bl	800e2b8 <SD_SendSDStatus>
 800dbf4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d011      	beq.n	800dc20 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a4f      	ldr	r2, [pc, #316]	; (800dd40 <HAL_SD_GetCardStatus+0x178>)
 800dc02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc0a:	431a      	orrs	r2, r3
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc18:	2301      	movs	r3, #1
 800dc1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc1e:	e070      	b.n	800dd02 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	099b      	lsrs	r3, r3, #6
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	f003 0303 	and.w	r3, r3, #3
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	095b      	lsrs	r3, r3, #5
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	b29b      	uxth	r3, r3
 800dc46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc4a:	b29a      	uxth	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	0e1b      	lsrs	r3, r3, #24
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	4313      	orrs	r3, r2
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	061a      	lsls	r2, r3, #24
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	021b      	lsls	r3, r3, #8
 800dc62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc66:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	0a1b      	lsrs	r3, r3, #8
 800dc6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc70:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	0e1b      	lsrs	r3, r3, #24
 800dc76:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	b2da      	uxtb	r2, r3
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	0a1b      	lsrs	r3, r3, #8
 800dc88:	b2da      	uxtb	r2, r3
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	0d1b      	lsrs	r3, r3, #20
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	f003 030f 	and.w	r3, r3, #15
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	0c1b      	lsrs	r3, r3, #16
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	b29b      	uxth	r3, r3
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	b29a      	uxth	r2, r3
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	0a9b      	lsrs	r3, r3, #10
 800dcbe:	b2db      	uxtb	r3, r3
 800dcc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcc4:	b2da      	uxtb	r2, r3
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	0a1b      	lsrs	r3, r3, #8
 800dcce:	b2db      	uxtb	r3, r3
 800dcd0:	f003 0303 	and.w	r3, r3, #3
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	091b      	lsrs	r3, r3, #4
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	f003 030f 	and.w	r3, r3, #15
 800dce4:	b2da      	uxtb	r2, r3
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcea:	697b      	ldr	r3, [r7, #20]
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	f003 030f 	and.w	r3, r3, #15
 800dcf2:	b2da      	uxtb	r2, r3
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	0e1b      	lsrs	r3, r3, #24
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f004 f9e2 	bl	80120d4 <SDMMC_CmdBlockLength>
 800dd10:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00d      	beq.n	800dd34 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	4a08      	ldr	r2, [pc, #32]	; (800dd40 <HAL_SD_GetCardStatus+0x178>)
 800dd1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3750      	adds	r7, #80	; 0x50
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	1fe00fff 	.word	0x1fe00fff

0800dd44 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd44:	b480      	push	{r7}
 800dd46:	b083      	sub	sp, #12
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd8e:	2300      	movs	r3, #0
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	370c      	adds	r7, #12
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd9c:	b590      	push	{r4, r7, lr}
 800dd9e:	b08d      	sub	sp, #52	; 0x34
 800dda0:	af02      	add	r7, sp, #8
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dda6:	2300      	movs	r3, #0
 800dda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2203      	movs	r2, #3
 800ddb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb8:	2b03      	cmp	r3, #3
 800ddba:	d02e      	beq.n	800de1a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddc2:	d106      	bne.n	800ddd2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	635a      	str	r2, [r3, #52]	; 0x34
 800ddd0:	e029      	b.n	800de26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddd8:	d10a      	bne.n	800ddf0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ddda:	6878      	ldr	r0, [r7, #4]
 800dddc:	f000 fb64 	bl	800e4a8 <SD_WideBus_Enable>
 800dde0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dde6:	6a3b      	ldr	r3, [r7, #32]
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	635a      	str	r2, [r3, #52]	; 0x34
 800ddee:	e01a      	b.n	800de26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f000 fba1 	bl	800e53e <SD_WideBus_Disable>
 800ddfc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800de02:	6a3b      	ldr	r3, [r7, #32]
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	635a      	str	r2, [r3, #52]	; 0x34
 800de0a:	e00c      	b.n	800de26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de10:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	635a      	str	r2, [r3, #52]	; 0x34
 800de18:	e005      	b.n	800de26 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d007      	beq.n	800de3e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	4a5f      	ldr	r2, [pc, #380]	; (800dfb0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de34:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de3c:	e096      	b.n	800df6c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de3e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de42:	f04f 0100 	mov.w	r1, #0
 800de46:	f7fd fea3 	bl	800bb90 <HAL_RCCEx_GetPeriphCLKFreq>
 800de4a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de4c:	69fb      	ldr	r3, [r7, #28]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f000 8083 	beq.w	800df5a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	695a      	ldr	r2, [r3, #20]
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	4950      	ldr	r1, [pc, #320]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de72:	fba1 1303 	umull	r1, r3, r1, r3
 800de76:	0e1b      	lsrs	r3, r3, #24
 800de78:	429a      	cmp	r2, r3
 800de7a:	d303      	bcc.n	800de84 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	61bb      	str	r3, [r7, #24]
 800de82:	e05a      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de8c:	d103      	bne.n	800de96 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	e051      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de9e:	d126      	bne.n	800deee <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	695b      	ldr	r3, [r3, #20]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d10e      	bne.n	800dec6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800dea8:	69fb      	ldr	r3, [r7, #28]
 800deaa:	4a43      	ldr	r2, [pc, #268]	; (800dfb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d906      	bls.n	800debe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	4a40      	ldr	r2, [pc, #256]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800deb4:	fba2 2303 	umull	r2, r3, r2, r3
 800deb8:	0e5b      	lsrs	r3, r3, #25
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	e03d      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	e039      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	69fa      	ldr	r2, [r7, #28]
 800dece:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded2:	4a39      	ldr	r2, [pc, #228]	; (800dfb8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ded4:	4293      	cmp	r3, r2
 800ded6:	d906      	bls.n	800dee6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	4a36      	ldr	r2, [pc, #216]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dedc:	fba2 2303 	umull	r2, r3, r2, r3
 800dee0:	0e5b      	lsrs	r3, r3, #25
 800dee2:	61bb      	str	r3, [r7, #24]
 800dee4:	e029      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	61bb      	str	r3, [r7, #24]
 800deec:	e025      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d10e      	bne.n	800df14 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	4a30      	ldr	r2, [pc, #192]	; (800dfbc <HAL_SD_ConfigWideBusOperation+0x220>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d906      	bls.n	800df0c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	4a2c      	ldr	r2, [pc, #176]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df02:	fba2 2303 	umull	r2, r3, r2, r3
 800df06:	0e1b      	lsrs	r3, r3, #24
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e016      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	61bb      	str	r3, [r7, #24]
 800df12:	e012      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	695b      	ldr	r3, [r3, #20]
 800df18:	005b      	lsls	r3, r3, #1
 800df1a:	69fa      	ldr	r2, [r7, #28]
 800df1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df20:	4a26      	ldr	r2, [pc, #152]	; (800dfbc <HAL_SD_ConfigWideBusOperation+0x220>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d906      	bls.n	800df34 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	4a22      	ldr	r2, [pc, #136]	; (800dfb4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df2a:	fba2 2303 	umull	r2, r3, r2, r3
 800df2e:	0e1b      	lsrs	r3, r3, #24
 800df30:	61bb      	str	r3, [r7, #24]
 800df32:	e002      	b.n	800df3a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	695b      	ldr	r3, [r3, #20]
 800df38:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681c      	ldr	r4, [r3, #0]
 800df3e:	466a      	mov	r2, sp
 800df40:	f107 0314 	add.w	r3, r7, #20
 800df44:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df48:	e882 0003 	stmia.w	r2, {r0, r1}
 800df4c:	f107 0308 	add.w	r3, r7, #8
 800df50:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df52:	4620      	mov	r0, r4
 800df54:	f003 ffe0 	bl	8011f18 <SDMMC_Init>
 800df58:	e008      	b.n	800df6c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df74:	4618      	mov	r0, r3
 800df76:	f004 f8ad 	bl	80120d4 <SDMMC_CmdBlockLength>
 800df7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d00c      	beq.n	800df9c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	4a0a      	ldr	r2, [pc, #40]	; (800dfb0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	431a      	orrs	r2, r3
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df96:	2301      	movs	r3, #1
 800df98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800dfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	372c      	adds	r7, #44	; 0x2c
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd90      	pop	{r4, r7, pc}
 800dfb0:	1fe00fff 	.word	0x1fe00fff
 800dfb4:	55e63b89 	.word	0x55e63b89
 800dfb8:	02faf080 	.word	0x02faf080
 800dfbc:	017d7840 	.word	0x017d7840

0800dfc0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfcc:	f107 030c 	add.w	r3, r7, #12
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fa40 	bl	800e458 <SD_SendStatus>
 800dfd8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfda:	697b      	ldr	r3, [r7, #20]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d005      	beq.n	800dfec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	431a      	orrs	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	0a5b      	lsrs	r3, r3, #9
 800dff0:	f003 030f 	and.w	r3, r3, #15
 800dff4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dff6:	693b      	ldr	r3, [r7, #16]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b090      	sub	sp, #64	; 0x40
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e008:	2300      	movs	r3, #0
 800e00a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e00c:	f7f5 fd34 	bl	8003a78 <HAL_GetTick>
 800e010:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4618      	mov	r0, r3
 800e018:	f003 ffd7 	bl	8011fca <SDMMC_GetPowerState>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d102      	bne.n	800e028 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e022:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e026:	e0b5      	b.n	800e194 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e02c:	2b03      	cmp	r3, #3
 800e02e:	d02e      	beq.n	800e08e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	f004 fa22 	bl	801247e <SDMMC_CmdSendCID>
 800e03a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <SD_InitCard+0x46>
    {
      return errorstate;
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	e0a6      	b.n	800e194 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f004 f802 	bl	8012056 <SDMMC_GetResponse>
 800e052:	4602      	mov	r2, r0
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2104      	movs	r1, #4
 800e05e:	4618      	mov	r0, r3
 800e060:	f003 fff9 	bl	8012056 <SDMMC_GetResponse>
 800e064:	4602      	mov	r2, r0
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	2108      	movs	r1, #8
 800e070:	4618      	mov	r0, r3
 800e072:	f003 fff0 	bl	8012056 <SDMMC_GetResponse>
 800e076:	4602      	mov	r2, r0
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	210c      	movs	r1, #12
 800e082:	4618      	mov	r0, r3
 800e084:	f003 ffe7 	bl	8012056 <SDMMC_GetResponse>
 800e088:	4602      	mov	r2, r0
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e092:	2b03      	cmp	r3, #3
 800e094:	d01d      	beq.n	800e0d2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e096:	e019      	b.n	800e0cc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f107 020a 	add.w	r2, r7, #10
 800e0a0:	4611      	mov	r1, r2
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f004 fa2a 	bl	80124fc <SDMMC_CmdSetRelAdd>
 800e0a8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	e06f      	b.n	800e194 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e0b4:	f7f5 fce0 	bl	8003a78 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	f241 3287 	movw	r2, #4999	; 0x1387
 800e0c2:	4293      	cmp	r3, r2
 800e0c4:	d902      	bls.n	800e0cc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e0c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0ca:	e063      	b.n	800e194 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e0cc:	897b      	ldrh	r3, [r7, #10]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0e2      	beq.n	800e098 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0d6:	2b03      	cmp	r3, #3
 800e0d8:	d036      	beq.n	800e148 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0da:	897b      	ldrh	r3, [r7, #10]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681a      	ldr	r2, [r3, #0]
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ea:	041b      	lsls	r3, r3, #16
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	4610      	mov	r0, r2
 800e0f0:	f004 f9e4 	bl	80124bc <SDMMC_CmdSendCSD>
 800e0f4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d001      	beq.n	800e100 <SD_InitCard+0x100>
    {
      return errorstate;
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	e049      	b.n	800e194 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	2100      	movs	r1, #0
 800e106:	4618      	mov	r0, r3
 800e108:	f003 ffa5 	bl	8012056 <SDMMC_GetResponse>
 800e10c:	4602      	mov	r2, r0
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	2104      	movs	r1, #4
 800e118:	4618      	mov	r0, r3
 800e11a:	f003 ff9c 	bl	8012056 <SDMMC_GetResponse>
 800e11e:	4602      	mov	r2, r0
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	2108      	movs	r1, #8
 800e12a:	4618      	mov	r0, r3
 800e12c:	f003 ff93 	bl	8012056 <SDMMC_GetResponse>
 800e130:	4602      	mov	r2, r0
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	210c      	movs	r1, #12
 800e13c:	4618      	mov	r0, r3
 800e13e:	f003 ff8a 	bl	8012056 <SDMMC_GetResponse>
 800e142:	4602      	mov	r2, r0
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	2104      	movs	r1, #4
 800e14e:	4618      	mov	r0, r3
 800e150:	f003 ff81 	bl	8012056 <SDMMC_GetResponse>
 800e154:	4603      	mov	r3, r0
 800e156:	0d1a      	lsrs	r2, r3, #20
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e15c:	f107 030c 	add.w	r3, r7, #12
 800e160:	4619      	mov	r1, r3
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f7ff fb8c 	bl	800d880 <HAL_SD_GetCardCSD>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e16e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e172:	e00f      	b.n	800e194 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e17c:	041b      	lsls	r3, r3, #16
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f004 f893 	bl	80122ac <SDMMC_CmdSelDesel>
 800e186:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <SD_InitCard+0x192>
  {
    return errorstate;
 800e18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e190:	e000      	b.n	800e194 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3740      	adds	r7, #64	; 0x40
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b086      	sub	sp, #24
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f004 f89c 	bl	80122f2 <SDMMC_CmdGoIdleState>
 800e1ba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	e072      	b.n	800e2ac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f004 f8af 	bl	801232e <SDMMC_CmdOperCond>
 800e1d0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1d8:	d10d      	bne.n	800e1f6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f004 f884 	bl	80122f2 <SDMMC_CmdGoIdleState>
 800e1ea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d004      	beq.n	800e1fc <SD_PowerON+0x60>
    {
      return errorstate;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	e05a      	b.n	800e2ac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e200:	2b01      	cmp	r3, #1
 800e202:	d137      	bne.n	800e274 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2100      	movs	r1, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f004 f8af 	bl	801236e <SDMMC_CmdAppCommand>
 800e210:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d02d      	beq.n	800e274 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e21c:	e046      	b.n	800e2ac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	2100      	movs	r1, #0
 800e224:	4618      	mov	r0, r3
 800e226:	f004 f8a2 	bl	801236e <SDMMC_CmdAppCommand>
 800e22a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	e03a      	b.n	800e2ac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	491e      	ldr	r1, [pc, #120]	; (800e2b4 <SD_PowerON+0x118>)
 800e23c:	4618      	mov	r0, r3
 800e23e:	f004 f8b9 	bl	80123b4 <SDMMC_CmdAppOperCommand>
 800e242:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e24a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e24e:	e02d      	b.n	800e2ac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2100      	movs	r1, #0
 800e256:	4618      	mov	r0, r3
 800e258:	f003 fefd 	bl	8012056 <SDMMC_GetResponse>
 800e25c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	0fdb      	lsrs	r3, r3, #31
 800e262:	2b01      	cmp	r3, #1
 800e264:	d101      	bne.n	800e26a <SD_PowerON+0xce>
 800e266:	2301      	movs	r3, #1
 800e268:	e000      	b.n	800e26c <SD_PowerON+0xd0>
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]

    count++;
 800e26e:	68bb      	ldr	r3, [r7, #8]
 800e270:	3301      	adds	r3, #1
 800e272:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e274:	68bb      	ldr	r3, [r7, #8]
 800e276:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d802      	bhi.n	800e284 <SD_PowerON+0xe8>
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0cc      	beq.n	800e21e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d902      	bls.n	800e294 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e28e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e292:	e00b      	b.n	800e2ac <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d002      	beq.n	800e2aa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2aa:	2300      	movs	r3, #0
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3718      	adds	r7, #24
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	c1100000 	.word	0xc1100000

0800e2b8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08c      	sub	sp, #48	; 0x30
 800e2bc:	af00      	add	r7, sp, #0
 800e2be:	6078      	str	r0, [r7, #4]
 800e2c0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2c2:	f7f5 fbd9 	bl	8003a78 <HAL_GetTick>
 800e2c6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f003 febf 	bl	8012056 <SDMMC_GetResponse>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2e2:	d102      	bne.n	800e2ea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2e8:	e0b0      	b.n	800e44c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	2140      	movs	r1, #64	; 0x40
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f003 feef 	bl	80120d4 <SDMMC_CmdBlockLength>
 800e2f6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d005      	beq.n	800e30a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e306:	6a3b      	ldr	r3, [r7, #32]
 800e308:	e0a0      	b.n	800e44c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e312:	041b      	lsls	r3, r3, #16
 800e314:	4619      	mov	r1, r3
 800e316:	4610      	mov	r0, r2
 800e318:	f004 f829 	bl	801236e <SDMMC_CmdAppCommand>
 800e31c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d005      	beq.n	800e330 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	e08d      	b.n	800e44c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e330:	f04f 33ff 	mov.w	r3, #4294967295
 800e334:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e336:	2340      	movs	r3, #64	; 0x40
 800e338:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e33a:	2360      	movs	r3, #96	; 0x60
 800e33c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e33e:	2302      	movs	r3, #2
 800e340:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e342:	2300      	movs	r3, #0
 800e344:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e346:	2301      	movs	r3, #1
 800e348:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f107 0208 	add.w	r2, r7, #8
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f003 fe91 	bl	801207c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	4618      	mov	r0, r3
 800e360:	f004 f911 	bl	8012586 <SDMMC_CmdStatusRegister>
 800e364:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d02b      	beq.n	800e3c4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e374:	6a3b      	ldr	r3, [r7, #32]
 800e376:	e069      	b.n	800e44c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e37e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e382:	2b00      	cmp	r3, #0
 800e384:	d013      	beq.n	800e3ae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e386:	2300      	movs	r3, #0
 800e388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e38a:	e00d      	b.n	800e3a8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4618      	mov	r0, r3
 800e392:	f003 fdeb 	bl	8011f6c <SDMMC_ReadFIFO>
 800e396:	4602      	mov	r2, r0
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	601a      	str	r2, [r3, #0]
        pData++;
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	3304      	adds	r3, #4
 800e3a0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a4:	3301      	adds	r3, #1
 800e3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3aa:	2b07      	cmp	r3, #7
 800e3ac:	d9ee      	bls.n	800e38c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3ae:	f7f5 fb63 	bl	8003a78 <HAL_GetTick>
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	1ad3      	subs	r3, r2, r3
 800e3b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3bc:	d102      	bne.n	800e3c4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3c2:	e043      	b.n	800e44c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d0d2      	beq.n	800e378 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d8:	f003 0308 	and.w	r3, r3, #8
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3e0:	2308      	movs	r3, #8
 800e3e2:	e033      	b.n	800e44c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ea:	f003 0302 	and.w	r3, r3, #2
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3f2:	2302      	movs	r3, #2
 800e3f4:	e02a      	b.n	800e44c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fc:	f003 0320 	and.w	r3, r3, #32
 800e400:	2b00      	cmp	r3, #0
 800e402:	d017      	beq.n	800e434 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e404:	2320      	movs	r3, #32
 800e406:	e021      	b.n	800e44c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4618      	mov	r0, r3
 800e40e:	f003 fdad 	bl	8011f6c <SDMMC_ReadFIFO>
 800e412:	4602      	mov	r2, r0
 800e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e416:	601a      	str	r2, [r3, #0]
    pData++;
 800e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e41a:	3304      	adds	r3, #4
 800e41c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e41e:	f7f5 fb2b 	bl	8003a78 <HAL_GetTick>
 800e422:	4602      	mov	r2, r0
 800e424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e426:	1ad3      	subs	r3, r2, r3
 800e428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e42c:	d102      	bne.n	800e434 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e42e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e432:	e00b      	b.n	800e44c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1e2      	bne.n	800e408 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a03      	ldr	r2, [pc, #12]	; (800e454 <SD_SendSDStatus+0x19c>)
 800e448:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e44a:	2300      	movs	r3, #0
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3730      	adds	r7, #48	; 0x30
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	18000f3a 	.word	0x18000f3a

0800e458 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e46c:	e018      	b.n	800e4a0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e476:	041b      	lsls	r3, r3, #16
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f004 f860 	bl	8012540 <SDMMC_CmdSendStatus>
 800e480:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	e009      	b.n	800e4a0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	2100      	movs	r1, #0
 800e492:	4618      	mov	r0, r3
 800e494:	f003 fddf 	bl	8012056 <SDMMC_GetResponse>
 800e498:	4602      	mov	r2, r0
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e49e:	2300      	movs	r3, #0
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}

0800e4a8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	60fb      	str	r3, [r7, #12]
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	2100      	movs	r1, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f003 fdc9 	bl	8012056 <SDMMC_GetResponse>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4ce:	d102      	bne.n	800e4d6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4d4:	e02f      	b.n	800e536 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4d6:	f107 030c 	add.w	r3, r7, #12
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f879 	bl	800e5d4 <SD_FindSCR>
 800e4e2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	e023      	b.n	800e536 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d01c      	beq.n	800e532 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e500:	041b      	lsls	r3, r3, #16
 800e502:	4619      	mov	r1, r3
 800e504:	4610      	mov	r0, r2
 800e506:	f003 ff32 	bl	801236e <SDMMC_CmdAppCommand>
 800e50a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d001      	beq.n	800e516 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	e00f      	b.n	800e536 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	2102      	movs	r1, #2
 800e51c:	4618      	mov	r0, r3
 800e51e:	f003 ff69 	bl	80123f4 <SDMMC_CmdBusWidth>
 800e522:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	e003      	b.n	800e536 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e52e:	2300      	movs	r3, #0
 800e530:	e001      	b.n	800e536 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e532:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e536:	4618      	mov	r0, r3
 800e538:	3718      	adds	r7, #24
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}

0800e53e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e53e:	b580      	push	{r7, lr}
 800e540:	b086      	sub	sp, #24
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	2300      	movs	r3, #0
 800e54c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2100      	movs	r1, #0
 800e554:	4618      	mov	r0, r3
 800e556:	f003 fd7e 	bl	8012056 <SDMMC_GetResponse>
 800e55a:	4603      	mov	r3, r0
 800e55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e564:	d102      	bne.n	800e56c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e56a:	e02f      	b.n	800e5cc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e56c:	f107 030c 	add.w	r3, r7, #12
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f82e 	bl	800e5d4 <SD_FindSCR>
 800e578:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	e023      	b.n	800e5cc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e584:	693b      	ldr	r3, [r7, #16]
 800e586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d01c      	beq.n	800e5c8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681a      	ldr	r2, [r3, #0]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e596:	041b      	lsls	r3, r3, #16
 800e598:	4619      	mov	r1, r3
 800e59a:	4610      	mov	r0, r2
 800e59c:	f003 fee7 	bl	801236e <SDMMC_CmdAppCommand>
 800e5a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	e00f      	b.n	800e5cc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2100      	movs	r1, #0
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f003 ff1e 	bl	80123f4 <SDMMC_CmdBusWidth>
 800e5b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d001      	beq.n	800e5c4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	e003      	b.n	800e5cc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e001      	b.n	800e5cc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08e      	sub	sp, #56	; 0x38
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5de:	f7f5 fa4b 	bl	8003a78 <HAL_GetTick>
 800e5e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	60bb      	str	r3, [r7, #8]
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2108      	movs	r1, #8
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f003 fd6a 	bl	80120d4 <SDMMC_CmdBlockLength>
 800e600:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e604:	2b00      	cmp	r3, #0
 800e606:	d001      	beq.n	800e60c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60a:	e0ad      	b.n	800e768 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e614:	041b      	lsls	r3, r3, #16
 800e616:	4619      	mov	r1, r3
 800e618:	4610      	mov	r0, r2
 800e61a:	f003 fea8 	bl	801236e <SDMMC_CmdAppCommand>
 800e61e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e622:	2b00      	cmp	r3, #0
 800e624:	d001      	beq.n	800e62a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e628:	e09e      	b.n	800e768 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e62a:	f04f 33ff 	mov.w	r3, #4294967295
 800e62e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e630:	2308      	movs	r3, #8
 800e632:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e634:	2330      	movs	r3, #48	; 0x30
 800e636:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e638:	2302      	movs	r3, #2
 800e63a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e63c:	2300      	movs	r3, #0
 800e63e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e640:	2301      	movs	r3, #1
 800e642:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f107 0210 	add.w	r2, r7, #16
 800e64c:	4611      	mov	r1, r2
 800e64e:	4618      	mov	r0, r3
 800e650:	f003 fd14 	bl	801207c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4618      	mov	r0, r3
 800e65a:	f003 feee 	bl	801243a <SDMMC_CmdSendSCR>
 800e65e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e662:	2b00      	cmp	r3, #0
 800e664:	d027      	beq.n	800e6b6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e668:	e07e      	b.n	800e768 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e674:	2b00      	cmp	r3, #0
 800e676:	d113      	bne.n	800e6a0 <SD_FindSCR+0xcc>
 800e678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d110      	bne.n	800e6a0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4618      	mov	r0, r3
 800e684:	f003 fc72 	bl	8011f6c <SDMMC_ReadFIFO>
 800e688:	4603      	mov	r3, r0
 800e68a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f003 fc6b 	bl	8011f6c <SDMMC_ReadFIFO>
 800e696:	4603      	mov	r3, r0
 800e698:	60fb      	str	r3, [r7, #12]
      index++;
 800e69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e69c:	3301      	adds	r3, #1
 800e69e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6a0:	f7f5 f9ea 	bl	8003a78 <HAL_GetTick>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ae:	d102      	bne.n	800e6b6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6b4:	e058      	b.n	800e768 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6bc:	f240 532a 	movw	r3, #1322	; 0x52a
 800e6c0:	4013      	ands	r3, r2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0d1      	beq.n	800e66a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6cc:	f003 0308 	and.w	r3, r3, #8
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2208      	movs	r2, #8
 800e6da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6dc:	2308      	movs	r3, #8
 800e6de:	e043      	b.n	800e768 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e6:	f003 0302 	and.w	r3, r3, #2
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d005      	beq.n	800e6fa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6f6:	2302      	movs	r3, #2
 800e6f8:	e036      	b.n	800e768 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e700:	f003 0320 	and.w	r3, r3, #32
 800e704:	2b00      	cmp	r3, #0
 800e706:	d005      	beq.n	800e714 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2220      	movs	r2, #32
 800e70e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e710:	2320      	movs	r3, #32
 800e712:	e029      	b.n	800e768 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a15      	ldr	r2, [pc, #84]	; (800e770 <SD_FindSCR+0x19c>)
 800e71a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	061a      	lsls	r2, r3, #24
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	021b      	lsls	r3, r3, #8
 800e724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e728:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	0a1b      	lsrs	r3, r3, #8
 800e72e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e732:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	0e1b      	lsrs	r3, r3, #24
 800e738:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	601a      	str	r2, [r3, #0]
    scr++;
 800e73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e740:	3304      	adds	r3, #4
 800e742:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	061a      	lsls	r2, r3, #24
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	021b      	lsls	r3, r3, #8
 800e74c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e750:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	0a1b      	lsrs	r3, r3, #8
 800e756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e75a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	0e1b      	lsrs	r3, r3, #24
 800e760:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e766:	2300      	movs	r3, #0
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3738      	adds	r7, #56	; 0x38
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}
 800e770:	18000f3a 	.word	0x18000f3a

0800e774 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b086      	sub	sp, #24
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e780:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e786:	2b1f      	cmp	r3, #31
 800e788:	d936      	bls.n	800e7f8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e78a:	2300      	movs	r3, #0
 800e78c:	617b      	str	r3, [r7, #20]
 800e78e:	e027      	b.n	800e7e0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4618      	mov	r0, r3
 800e796:	f003 fbe9 	bl	8011f6c <SDMMC_ReadFIFO>
 800e79a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	0a1b      	lsrs	r3, r3, #8
 800e7ae:	b2da      	uxtb	r2, r3
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	3301      	adds	r3, #1
 800e7b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	0c1b      	lsrs	r3, r3, #16
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	0e1b      	lsrs	r3, r3, #24
 800e7ce:	b2da      	uxtb	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	617b      	str	r3, [r7, #20]
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b07      	cmp	r3, #7
 800e7e4:	d9d4      	bls.n	800e790 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	693a      	ldr	r2, [r7, #16]
 800e7ea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f0:	f1a3 0220 	sub.w	r2, r3, #32
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e7f8:	bf00      	nop
 800e7fa:	3718      	adds	r7, #24
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b086      	sub	sp, #24
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	69db      	ldr	r3, [r3, #28]
 800e80c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6a1b      	ldr	r3, [r3, #32]
 800e812:	2b1f      	cmp	r3, #31
 800e814:	d93a      	bls.n	800e88c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e816:	2300      	movs	r3, #0
 800e818:	617b      	str	r3, [r7, #20]
 800e81a:	e02b      	b.n	800e874 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	3301      	adds	r3, #1
 800e826:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	021a      	lsls	r2, r3, #8
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	4313      	orrs	r3, r2
 800e832:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	3301      	adds	r3, #1
 800e838:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	041a      	lsls	r2, r3, #16
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	4313      	orrs	r3, r2
 800e844:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	3301      	adds	r3, #1
 800e84a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	061a      	lsls	r2, r3, #24
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	4313      	orrs	r3, r2
 800e856:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e858:	693b      	ldr	r3, [r7, #16]
 800e85a:	3301      	adds	r3, #1
 800e85c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f107 020c 	add.w	r2, r7, #12
 800e866:	4611      	mov	r1, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f003 fb8c 	bl	8011f86 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	3301      	adds	r3, #1
 800e872:	617b      	str	r3, [r7, #20]
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	2b07      	cmp	r3, #7
 800e878:	d9d0      	bls.n	800e81c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	693a      	ldr	r2, [r7, #16]
 800e87e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	f1a3 0220 	sub.w	r2, r3, #32
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	621a      	str	r2, [r3, #32]
  }
}
 800e88c:	bf00      	nop
 800e88e:	3718      	adds	r7, #24
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8c4:	bf00      	nop
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8d8:	bf00      	nop
 800e8da:	370c      	adds	r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e2:	4770      	bx	lr

0800e8e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e10f      	b.n	800eb16 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4a87      	ldr	r2, [pc, #540]	; (800eb20 <HAL_SPI_Init+0x23c>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d00f      	beq.n	800e926 <HAL_SPI_Init+0x42>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a86      	ldr	r2, [pc, #536]	; (800eb24 <HAL_SPI_Init+0x240>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d00a      	beq.n	800e926 <HAL_SPI_Init+0x42>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a84      	ldr	r2, [pc, #528]	; (800eb28 <HAL_SPI_Init+0x244>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d005      	beq.n	800e926 <HAL_SPI_Init+0x42>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	2b0f      	cmp	r3, #15
 800e920:	d901      	bls.n	800e926 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e922:	2301      	movs	r3, #1
 800e924:	e0f7      	b.n	800eb16 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f000 fd5a 	bl	800f3e0 <SPI_GetPacketSize>
 800e92c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4a7b      	ldr	r2, [pc, #492]	; (800eb20 <HAL_SPI_Init+0x23c>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d00c      	beq.n	800e952 <HAL_SPI_Init+0x6e>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	4a79      	ldr	r2, [pc, #484]	; (800eb24 <HAL_SPI_Init+0x240>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d007      	beq.n	800e952 <HAL_SPI_Init+0x6e>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a78      	ldr	r2, [pc, #480]	; (800eb28 <HAL_SPI_Init+0x244>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d002      	beq.n	800e952 <HAL_SPI_Init+0x6e>
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2b08      	cmp	r3, #8
 800e950:	d811      	bhi.n	800e976 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e956:	4a72      	ldr	r2, [pc, #456]	; (800eb20 <HAL_SPI_Init+0x23c>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d009      	beq.n	800e970 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	4a70      	ldr	r2, [pc, #448]	; (800eb24 <HAL_SPI_Init+0x240>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d004      	beq.n	800e970 <HAL_SPI_Init+0x8c>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a6f      	ldr	r2, [pc, #444]	; (800eb28 <HAL_SPI_Init+0x244>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d104      	bne.n	800e97a <HAL_SPI_Init+0x96>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b10      	cmp	r3, #16
 800e974:	d901      	bls.n	800e97a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e976:	2301      	movs	r3, #1
 800e978:	e0cd      	b.n	800eb16 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2200      	movs	r2, #0
 800e98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7f4 fa8a 	bl	8002ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2202      	movs	r2, #2
 800e998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	681a      	ldr	r2, [r3, #0]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f022 0201 	bic.w	r2, r2, #1
 800e9aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e9b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	699b      	ldr	r3, [r3, #24]
 800e9bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e9c0:	d119      	bne.n	800e9f6 <HAL_SPI_Init+0x112>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9ca:	d103      	bne.n	800e9d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d008      	beq.n	800e9e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10c      	bne.n	800e9f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9e4:	d107      	bne.n	800e9f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00f      	beq.n	800ea22 <HAL_SPI_Init+0x13e>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	68db      	ldr	r3, [r3, #12]
 800ea06:	2b06      	cmp	r3, #6
 800ea08:	d90b      	bls.n	800ea22 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	430a      	orrs	r2, r1
 800ea1e:	601a      	str	r2, [r3, #0]
 800ea20:	e007      	b.n	800ea32 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	69da      	ldr	r2, [r3, #28]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea3a:	431a      	orrs	r2, r3
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	431a      	orrs	r2, r3
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea44:	ea42 0103 	orr.w	r1, r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	68da      	ldr	r2, [r3, #12]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	430a      	orrs	r2, r1
 800ea52:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5c:	431a      	orrs	r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea62:	431a      	orrs	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	431a      	orrs	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	431a      	orrs	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	695b      	ldr	r3, [r3, #20]
 800ea74:	431a      	orrs	r2, r3
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	6a1b      	ldr	r3, [r3, #32]
 800ea7a:	431a      	orrs	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	431a      	orrs	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea86:	431a      	orrs	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	689b      	ldr	r3, [r3, #8]
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea92:	ea42 0103 	orr.w	r1, r2, r3
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	685b      	ldr	r3, [r3, #4]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d113      	bne.n	800ead2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	689b      	ldr	r3, [r3, #8]
 800eab0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eabc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	689b      	ldr	r3, [r3, #8]
 800eac4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ead0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f022 0201 	bic.w	r2, r2, #1
 800eae0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00a      	beq.n	800eb04 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	430a      	orrs	r2, r1
 800eb02:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb14:	2300      	movs	r3, #0
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	40013000 	.word	0x40013000
 800eb24:	40003800 	.word	0x40003800
 800eb28:	40003c00 	.word	0x40003c00

0800eb2c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b08a      	sub	sp, #40	; 0x28
 800eb30:	af02      	add	r7, sp, #8
 800eb32:	60f8      	str	r0, [r7, #12]
 800eb34:	60b9      	str	r1, [r7, #8]
 800eb36:	603b      	str	r3, [r7, #0]
 800eb38:	4613      	mov	r3, r2
 800eb3a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	3320      	adds	r3, #32
 800eb42:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb44:	2300      	movs	r3, #0
 800eb46:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d101      	bne.n	800eb56 <HAL_SPI_Transmit+0x2a>
 800eb52:	2302      	movs	r3, #2
 800eb54:	e1e1      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2201      	movs	r2, #1
 800eb5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb5e:	f7f4 ff8b 	bl	8003a78 <HAL_GetTick>
 800eb62:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d007      	beq.n	800eb80 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb70:	2302      	movs	r3, #2
 800eb72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb7c:	7efb      	ldrb	r3, [r7, #27]
 800eb7e:	e1cc      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d002      	beq.n	800eb8c <HAL_SPI_Transmit+0x60>
 800eb86:	88fb      	ldrh	r3, [r7, #6]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d107      	bne.n	800eb9c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2200      	movs	r2, #0
 800eb94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb98:	7efb      	ldrb	r3, [r7, #27]
 800eb9a:	e1be      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2203      	movs	r2, #3
 800eba0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2200      	movs	r2, #0
 800eba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	68ba      	ldr	r2, [r7, #8]
 800ebb0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	88fa      	ldrh	r2, [r7, #6]
 800ebb6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	88fa      	ldrh	r2, [r7, #6]
 800ebbe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ebec:	d108      	bne.n	800ec00 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	e009      	b.n	800ec14 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68db      	ldr	r3, [r3, #12]
 800ec06:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ec12:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	4b96      	ldr	r3, [pc, #600]	; (800ee74 <HAL_SPI_Transmit+0x348>)
 800ec1c:	4013      	ands	r3, r2
 800ec1e:	88f9      	ldrh	r1, [r7, #6]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	6812      	ldr	r2, [r2, #0]
 800ec24:	430b      	orrs	r3, r1
 800ec26:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f042 0201 	orr.w	r2, r2, #1
 800ec36:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec40:	d107      	bne.n	800ec52 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	68db      	ldr	r3, [r3, #12]
 800ec56:	2b0f      	cmp	r3, #15
 800ec58:	d947      	bls.n	800ecea <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec5a:	e03f      	b.n	800ecdc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	f003 0302 	and.w	r3, r3, #2
 800ec66:	2b02      	cmp	r3, #2
 800ec68:	d114      	bne.n	800ec94 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	6812      	ldr	r2, [r2, #0]
 800ec74:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec7a:	1d1a      	adds	r2, r3, #4
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec92:	e023      	b.n	800ecdc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec94:	f7f4 fef0 	bl	8003a78 <HAL_GetTick>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	d803      	bhi.n	800ecac <HAL_SPI_Transmit+0x180>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecaa:	d102      	bne.n	800ecb2 <HAL_SPI_Transmit+0x186>
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d114      	bne.n	800ecdc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f000 fac6 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	e11e      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1b9      	bne.n	800ec5c <HAL_SPI_Transmit+0x130>
 800ece8:	e0f1      	b.n	800eece <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68db      	ldr	r3, [r3, #12]
 800ecee:	2b07      	cmp	r3, #7
 800ecf0:	f240 80e6 	bls.w	800eec0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecf4:	e05d      	b.n	800edb2 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	695b      	ldr	r3, [r3, #20]
 800ecfc:	f003 0302 	and.w	r3, r3, #2
 800ed00:	2b02      	cmp	r3, #2
 800ed02:	d132      	bne.n	800ed6a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d918      	bls.n	800ed42 <HAL_SPI_Transmit+0x216>
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d014      	beq.n	800ed42 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	6812      	ldr	r2, [r2, #0]
 800ed22:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed28:	1d1a      	adds	r2, r3, #4
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	3b02      	subs	r3, #2
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed40:	e037      	b.n	800edb2 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed46:	881a      	ldrh	r2, [r3, #0]
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed50:	1c9a      	adds	r2, r3, #2
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	b29a      	uxth	r2, r3
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed68:	e023      	b.n	800edb2 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed6a:	f7f4 fe85 	bl	8003a78 <HAL_GetTick>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	683a      	ldr	r2, [r7, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d803      	bhi.n	800ed82 <HAL_SPI_Transmit+0x256>
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed80:	d102      	bne.n	800ed88 <HAL_SPI_Transmit+0x25c>
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d114      	bne.n	800edb2 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f000 fa5b 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2201      	movs	r2, #1
 800edaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edae:	2303      	movs	r3, #3
 800edb0:	e0b3      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb8:	b29b      	uxth	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d19b      	bne.n	800ecf6 <HAL_SPI_Transmit+0x1ca>
 800edbe:	e086      	b.n	800eece <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	695b      	ldr	r3, [r3, #20]
 800edc6:	f003 0302 	and.w	r3, r3, #2
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d154      	bne.n	800ee78 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	2b03      	cmp	r3, #3
 800edd8:	d918      	bls.n	800ee0c <HAL_SPI_Transmit+0x2e0>
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edde:	2b40      	cmp	r3, #64	; 0x40
 800ede0:	d914      	bls.n	800ee0c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	6812      	ldr	r2, [r2, #0]
 800edec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edf2:	1d1a      	adds	r2, r3, #4
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	3b04      	subs	r3, #4
 800ee02:	b29a      	uxth	r2, r3
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee0a:	e059      	b.n	800eec0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d917      	bls.n	800ee48 <HAL_SPI_Transmit+0x31c>
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d013      	beq.n	800ee48 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee24:	881a      	ldrh	r2, [r3, #0]
 800ee26:	69fb      	ldr	r3, [r7, #28]
 800ee28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee2e:	1c9a      	adds	r2, r3, #2
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	3b02      	subs	r3, #2
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee46:	e03b      	b.n	800eec0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3320      	adds	r3, #32
 800ee52:	7812      	ldrb	r2, [r2, #0]
 800ee54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee5a:	1c5a      	adds	r2, r3, #1
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee72:	e025      	b.n	800eec0 <HAL_SPI_Transmit+0x394>
 800ee74:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee78:	f7f4 fdfe 	bl	8003a78 <HAL_GetTick>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	1ad3      	subs	r3, r2, r3
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d803      	bhi.n	800ee90 <HAL_SPI_Transmit+0x364>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8e:	d102      	bne.n	800ee96 <HAL_SPI_Transmit+0x36a>
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d114      	bne.n	800eec0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee96:	68f8      	ldr	r0, [r7, #12]
 800ee98:	f000 f9d4 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800eebc:	2303      	movs	r3, #3
 800eebe:	e02c      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eec6:	b29b      	uxth	r3, r3
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	f47f af79 	bne.w	800edc0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2200      	movs	r2, #0
 800eed6:	2108      	movs	r1, #8
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	f000 fa53 	bl	800f384 <SPI_WaitOnFlagUntilTimeout>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d007      	beq.n	800eef4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeea:	f043 0220 	orr.w	r2, r3, #32
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f000 f9a5 	bl	800f244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	2201      	movs	r2, #1
 800ef06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e000      	b.n	800ef1a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ef18:	7efb      	ldrb	r3, [r7, #27]
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3720      	adds	r7, #32
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop

0800ef24 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b088      	sub	sp, #32
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	603b      	str	r3, [r7, #0]
 800ef30:	4613      	mov	r3, r2
 800ef32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	3330      	adds	r3, #48	; 0x30
 800ef3e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d101      	bne.n	800ef4e <HAL_SPI_Receive+0x2a>
 800ef4a:	2302      	movs	r3, #2
 800ef4c:	e173      	b.n	800f236 <HAL_SPI_Receive+0x312>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef56:	f7f4 fd8f 	bl	8003a78 <HAL_GetTick>
 800ef5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d007      	beq.n	800ef78 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef68:	2302      	movs	r3, #2
 800ef6a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2200      	movs	r2, #0
 800ef70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef74:	7ffb      	ldrb	r3, [r7, #31]
 800ef76:	e15e      	b.n	800f236 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <HAL_SPI_Receive+0x60>
 800ef7e:	88fb      	ldrh	r3, [r7, #6]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d107      	bne.n	800ef94 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef84:	2301      	movs	r3, #1
 800ef86:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef90:	7ffb      	ldrb	r3, [r7, #31]
 800ef92:	e150      	b.n	800f236 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2204      	movs	r2, #4
 800ef98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	68ba      	ldr	r2, [r7, #8]
 800efa8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	88fa      	ldrh	r2, [r7, #6]
 800efae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	88fa      	ldrh	r2, [r7, #6]
 800efb6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	2200      	movs	r2, #0
 800efbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	2200      	movs	r2, #0
 800efcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2200      	movs	r2, #0
 800efda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800efe4:	d108      	bne.n	800eff8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eff4:	601a      	str	r2, [r3, #0]
 800eff6:	e009      	b.n	800f00c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f00a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	4b8b      	ldr	r3, [pc, #556]	; (800f240 <HAL_SPI_Receive+0x31c>)
 800f014:	4013      	ands	r3, r2
 800f016:	88f9      	ldrh	r1, [r7, #6]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	6812      	ldr	r2, [r2, #0]
 800f01c:	430b      	orrs	r3, r1
 800f01e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f042 0201 	orr.w	r2, r2, #1
 800f02e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f038:	d107      	bne.n	800f04a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f048:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	2b0f      	cmp	r3, #15
 800f050:	d948      	bls.n	800f0e4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f052:	e040      	b.n	800f0d6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	695a      	ldr	r2, [r3, #20]
 800f05a:	f248 0308 	movw	r3, #32776	; 0x8008
 800f05e:	4013      	ands	r3, r2
 800f060:	2b00      	cmp	r3, #0
 800f062:	d014      	beq.n	800f08e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f06c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f06e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f074:	1d1a      	adds	r2, r3, #4
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f080:	b29b      	uxth	r3, r3
 800f082:	3b01      	subs	r3, #1
 800f084:	b29a      	uxth	r2, r3
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f08c:	e023      	b.n	800f0d6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f08e:	f7f4 fcf3 	bl	8003a78 <HAL_GetTick>
 800f092:	4602      	mov	r2, r0
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	1ad3      	subs	r3, r2, r3
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d803      	bhi.n	800f0a6 <HAL_SPI_Receive+0x182>
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a4:	d102      	bne.n	800f0ac <HAL_SPI_Receive+0x188>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d114      	bne.n	800f0d6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ac:	68f8      	ldr	r0, [r7, #12]
 800f0ae:	f000 f8c9 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0d2:	2303      	movs	r3, #3
 800f0d4:	e0af      	b.n	800f236 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1b8      	bne.n	800f054 <HAL_SPI_Receive+0x130>
 800f0e2:	e095      	b.n	800f210 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	2b07      	cmp	r3, #7
 800f0ea:	f240 808b 	bls.w	800f204 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0ee:	e03f      	b.n	800f170 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	f003 0301 	and.w	r3, r3, #1
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d114      	bne.n	800f128 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f102:	69ba      	ldr	r2, [r7, #24]
 800f104:	8812      	ldrh	r2, [r2, #0]
 800f106:	b292      	uxth	r2, r2
 800f108:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f10e:	1c9a      	adds	r2, r3, #2
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	3b01      	subs	r3, #1
 800f11e:	b29a      	uxth	r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f126:	e023      	b.n	800f170 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f128:	f7f4 fca6 	bl	8003a78 <HAL_GetTick>
 800f12c:	4602      	mov	r2, r0
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	683a      	ldr	r2, [r7, #0]
 800f134:	429a      	cmp	r2, r3
 800f136:	d803      	bhi.n	800f140 <HAL_SPI_Receive+0x21c>
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f13e:	d102      	bne.n	800f146 <HAL_SPI_Receive+0x222>
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d114      	bne.n	800f170 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f000 f87c 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2200      	movs	r2, #0
 800f150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f15a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2201      	movs	r2, #1
 800f168:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f16c:	2303      	movs	r3, #3
 800f16e:	e062      	b.n	800f236 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f176:	b29b      	uxth	r3, r3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1b9      	bne.n	800f0f0 <HAL_SPI_Receive+0x1cc>
 800f17c:	e048      	b.n	800f210 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	695b      	ldr	r3, [r3, #20]
 800f184:	f003 0301 	and.w	r3, r3, #1
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d117      	bne.n	800f1bc <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f198:	7812      	ldrb	r2, [r2, #0]
 800f19a:	b2d2      	uxtb	r2, r2
 800f19c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1a2:	1c5a      	adds	r2, r3, #1
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	b29a      	uxth	r2, r3
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1ba:	e023      	b.n	800f204 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1bc:	f7f4 fc5c 	bl	8003a78 <HAL_GetTick>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d803      	bhi.n	800f1d4 <HAL_SPI_Receive+0x2b0>
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d2:	d102      	bne.n	800f1da <HAL_SPI_Receive+0x2b6>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d114      	bne.n	800f204 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1da:	68f8      	ldr	r0, [r7, #12]
 800f1dc:	f000 f832 	bl	800f244 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f200:	2303      	movs	r3, #3
 800f202:	e018      	b.n	800f236 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d1b6      	bne.n	800f17e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f000 f817 	bl	800f244 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	2201      	movs	r2, #1
 800f222:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d001      	beq.n	800f234 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f230:	2301      	movs	r3, #1
 800f232:	e000      	b.n	800f236 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f234:	7ffb      	ldrb	r3, [r7, #31]
}
 800f236:	4618      	mov	r0, r3
 800f238:	3720      	adds	r7, #32
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	ffff0000 	.word	0xffff0000

0800f244 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f244:	b480      	push	{r7}
 800f246:	b085      	sub	sp, #20
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	695b      	ldr	r3, [r3, #20]
 800f252:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	699a      	ldr	r2, [r3, #24]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f042 0208 	orr.w	r2, r2, #8
 800f262:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	699a      	ldr	r2, [r3, #24]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f042 0210 	orr.w	r2, r2, #16
 800f272:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f022 0201 	bic.w	r2, r2, #1
 800f282:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	6919      	ldr	r1, [r3, #16]
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	4b3c      	ldr	r3, [pc, #240]	; (800f380 <SPI_CloseTransfer+0x13c>)
 800f290:	400b      	ands	r3, r1
 800f292:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	689a      	ldr	r2, [r3, #8]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f2a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d014      	beq.n	800f2da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	f003 0320 	and.w	r3, r3, #32
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00f      	beq.n	800f2da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	699a      	ldr	r2, [r3, #24]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	f042 0220 	orr.w	r2, r2, #32
 800f2d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	2b03      	cmp	r3, #3
 800f2e4:	d014      	beq.n	800f310 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00f      	beq.n	800f310 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f6:	f043 0204 	orr.w	r2, r3, #4
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	699a      	ldr	r2, [r3, #24]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f30e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00f      	beq.n	800f33a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f320:	f043 0201 	orr.w	r2, r3, #1
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	699a      	ldr	r2, [r3, #24]
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f338:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00f      	beq.n	800f364 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f34a:	f043 0208 	orr.w	r2, r3, #8
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	699a      	ldr	r2, [r3, #24]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f362:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f374:	bf00      	nop
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	fffffc90 	.word	0xfffffc90

0800f384 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	603b      	str	r3, [r7, #0]
 800f390:	4613      	mov	r3, r2
 800f392:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f394:	e010      	b.n	800f3b8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f396:	f7f4 fb6f 	bl	8003a78 <HAL_GetTick>
 800f39a:	4602      	mov	r2, r0
 800f39c:	69bb      	ldr	r3, [r7, #24]
 800f39e:	1ad3      	subs	r3, r2, r3
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d803      	bhi.n	800f3ae <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f3ac:	d102      	bne.n	800f3b4 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f3b4:	2303      	movs	r3, #3
 800f3b6:	e00f      	b.n	800f3d8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	695a      	ldr	r2, [r3, #20]
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	429a      	cmp	r2, r3
 800f3c6:	bf0c      	ite	eq
 800f3c8:	2301      	moveq	r3, #1
 800f3ca:	2300      	movne	r3, #0
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	79fb      	ldrb	r3, [r7, #7]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d0df      	beq.n	800f396 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f3d6:	2300      	movs	r3, #0
}
 800f3d8:	4618      	mov	r0, r3
 800f3da:	3710      	adds	r7, #16
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b085      	sub	sp, #20
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ec:	095b      	lsrs	r3, r3, #5
 800f3ee:	3301      	adds	r3, #1
 800f3f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	68db      	ldr	r3, [r3, #12]
 800f3f6:	3301      	adds	r3, #1
 800f3f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3307      	adds	r3, #7
 800f3fe:	08db      	lsrs	r3, r3, #3
 800f400:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	68fa      	ldr	r2, [r7, #12]
 800f406:	fb02 f303 	mul.w	r3, r2, r3
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr

0800f416 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b082      	sub	sp, #8
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d101      	bne.n	800f428 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	e049      	b.n	800f4bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f42e:	b2db      	uxtb	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d106      	bne.n	800f442 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7f3 ff85 	bl	800334c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2202      	movs	r2, #2
 800f446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681a      	ldr	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	3304      	adds	r3, #4
 800f452:	4619      	mov	r1, r3
 800f454:	4610      	mov	r0, r2
 800f456:	f000 ff29 	bl	80102ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2201      	movs	r2, #1
 800f496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2201      	movs	r2, #1
 800f49e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2201      	movs	r2, #1
 800f4a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f4ba:	2300      	movs	r3, #0
}
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d101      	bne.n	800f4d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	e049      	b.n	800f56a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d106      	bne.n	800f4f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	2200      	movs	r2, #0
 800f4e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7f3 fd98 	bl	8003020 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2202      	movs	r2, #2
 800f4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681a      	ldr	r2, [r3, #0]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	3304      	adds	r3, #4
 800f500:	4619      	mov	r1, r3
 800f502:	4610      	mov	r0, r2
 800f504:	f000 fed2 	bl	80102ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	2201      	movs	r2, #1
 800f54c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2201      	movs	r2, #1
 800f554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2201      	movs	r2, #1
 800f55c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b084      	sub	sp, #16
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d109      	bne.n	800f598 <HAL_TIM_PWM_Start+0x24>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	bf14      	ite	ne
 800f590:	2301      	movne	r3, #1
 800f592:	2300      	moveq	r3, #0
 800f594:	b2db      	uxtb	r3, r3
 800f596:	e03c      	b.n	800f612 <HAL_TIM_PWM_Start+0x9e>
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	2b04      	cmp	r3, #4
 800f59c:	d109      	bne.n	800f5b2 <HAL_TIM_PWM_Start+0x3e>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f5a4:	b2db      	uxtb	r3, r3
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	bf14      	ite	ne
 800f5aa:	2301      	movne	r3, #1
 800f5ac:	2300      	moveq	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	e02f      	b.n	800f612 <HAL_TIM_PWM_Start+0x9e>
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	2b08      	cmp	r3, #8
 800f5b6:	d109      	bne.n	800f5cc <HAL_TIM_PWM_Start+0x58>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	2b01      	cmp	r3, #1
 800f5c2:	bf14      	ite	ne
 800f5c4:	2301      	movne	r3, #1
 800f5c6:	2300      	moveq	r3, #0
 800f5c8:	b2db      	uxtb	r3, r3
 800f5ca:	e022      	b.n	800f612 <HAL_TIM_PWM_Start+0x9e>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	2b0c      	cmp	r3, #12
 800f5d0:	d109      	bne.n	800f5e6 <HAL_TIM_PWM_Start+0x72>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	bf14      	ite	ne
 800f5de:	2301      	movne	r3, #1
 800f5e0:	2300      	moveq	r3, #0
 800f5e2:	b2db      	uxtb	r3, r3
 800f5e4:	e015      	b.n	800f612 <HAL_TIM_PWM_Start+0x9e>
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	2b10      	cmp	r3, #16
 800f5ea:	d109      	bne.n	800f600 <HAL_TIM_PWM_Start+0x8c>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	bf14      	ite	ne
 800f5f8:	2301      	movne	r3, #1
 800f5fa:	2300      	moveq	r3, #0
 800f5fc:	b2db      	uxtb	r3, r3
 800f5fe:	e008      	b.n	800f612 <HAL_TIM_PWM_Start+0x9e>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f606:	b2db      	uxtb	r3, r3
 800f608:	2b01      	cmp	r3, #1
 800f60a:	bf14      	ite	ne
 800f60c:	2301      	movne	r3, #1
 800f60e:	2300      	moveq	r3, #0
 800f610:	b2db      	uxtb	r3, r3
 800f612:	2b00      	cmp	r3, #0
 800f614:	d001      	beq.n	800f61a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f616:	2301      	movs	r3, #1
 800f618:	e0ab      	b.n	800f772 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d104      	bne.n	800f62a <HAL_TIM_PWM_Start+0xb6>
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2202      	movs	r2, #2
 800f624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f628:	e023      	b.n	800f672 <HAL_TIM_PWM_Start+0xfe>
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b04      	cmp	r3, #4
 800f62e:	d104      	bne.n	800f63a <HAL_TIM_PWM_Start+0xc6>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2202      	movs	r2, #2
 800f634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f638:	e01b      	b.n	800f672 <HAL_TIM_PWM_Start+0xfe>
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b08      	cmp	r3, #8
 800f63e:	d104      	bne.n	800f64a <HAL_TIM_PWM_Start+0xd6>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2202      	movs	r2, #2
 800f644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f648:	e013      	b.n	800f672 <HAL_TIM_PWM_Start+0xfe>
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	2b0c      	cmp	r3, #12
 800f64e:	d104      	bne.n	800f65a <HAL_TIM_PWM_Start+0xe6>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2202      	movs	r2, #2
 800f654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f658:	e00b      	b.n	800f672 <HAL_TIM_PWM_Start+0xfe>
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	2b10      	cmp	r3, #16
 800f65e:	d104      	bne.n	800f66a <HAL_TIM_PWM_Start+0xf6>
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2202      	movs	r2, #2
 800f664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f668:	e003      	b.n	800f672 <HAL_TIM_PWM_Start+0xfe>
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2202      	movs	r2, #2
 800f66e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	2201      	movs	r2, #1
 800f678:	6839      	ldr	r1, [r7, #0]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f001 f992 	bl	80109a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a3d      	ldr	r2, [pc, #244]	; (800f77c <HAL_TIM_PWM_Start+0x208>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d013      	beq.n	800f6b2 <HAL_TIM_PWM_Start+0x13e>
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4a3c      	ldr	r2, [pc, #240]	; (800f780 <HAL_TIM_PWM_Start+0x20c>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d00e      	beq.n	800f6b2 <HAL_TIM_PWM_Start+0x13e>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4a3a      	ldr	r2, [pc, #232]	; (800f784 <HAL_TIM_PWM_Start+0x210>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d009      	beq.n	800f6b2 <HAL_TIM_PWM_Start+0x13e>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	4a39      	ldr	r2, [pc, #228]	; (800f788 <HAL_TIM_PWM_Start+0x214>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d004      	beq.n	800f6b2 <HAL_TIM_PWM_Start+0x13e>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a37      	ldr	r2, [pc, #220]	; (800f78c <HAL_TIM_PWM_Start+0x218>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	d101      	bne.n	800f6b6 <HAL_TIM_PWM_Start+0x142>
 800f6b2:	2301      	movs	r3, #1
 800f6b4:	e000      	b.n	800f6b8 <HAL_TIM_PWM_Start+0x144>
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d007      	beq.n	800f6cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a2a      	ldr	r2, [pc, #168]	; (800f77c <HAL_TIM_PWM_Start+0x208>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d02c      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6de:	d027      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a2a      	ldr	r2, [pc, #168]	; (800f790 <HAL_TIM_PWM_Start+0x21c>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d022      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a29      	ldr	r2, [pc, #164]	; (800f794 <HAL_TIM_PWM_Start+0x220>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d01d      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a27      	ldr	r2, [pc, #156]	; (800f798 <HAL_TIM_PWM_Start+0x224>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d018      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a1f      	ldr	r2, [pc, #124]	; (800f780 <HAL_TIM_PWM_Start+0x20c>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d013      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a23      	ldr	r2, [pc, #140]	; (800f79c <HAL_TIM_PWM_Start+0x228>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d00e      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a1b      	ldr	r2, [pc, #108]	; (800f784 <HAL_TIM_PWM_Start+0x210>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d009      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a1f      	ldr	r2, [pc, #124]	; (800f7a0 <HAL_TIM_PWM_Start+0x22c>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d004      	beq.n	800f730 <HAL_TIM_PWM_Start+0x1bc>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4a1e      	ldr	r2, [pc, #120]	; (800f7a4 <HAL_TIM_PWM_Start+0x230>)
 800f72c:	4293      	cmp	r3, r2
 800f72e:	d115      	bne.n	800f75c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	689a      	ldr	r2, [r3, #8]
 800f736:	4b1c      	ldr	r3, [pc, #112]	; (800f7a8 <HAL_TIM_PWM_Start+0x234>)
 800f738:	4013      	ands	r3, r2
 800f73a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2b06      	cmp	r3, #6
 800f740:	d015      	beq.n	800f76e <HAL_TIM_PWM_Start+0x1fa>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f748:	d011      	beq.n	800f76e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	f042 0201 	orr.w	r2, r2, #1
 800f758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f75a:	e008      	b.n	800f76e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f042 0201 	orr.w	r2, r2, #1
 800f76a:	601a      	str	r2, [r3, #0]
 800f76c:	e000      	b.n	800f770 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f76e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	40010000 	.word	0x40010000
 800f780:	40010400 	.word	0x40010400
 800f784:	40014000 	.word	0x40014000
 800f788:	40014400 	.word	0x40014400
 800f78c:	40014800 	.word	0x40014800
 800f790:	40000400 	.word	0x40000400
 800f794:	40000800 	.word	0x40000800
 800f798:	40000c00 	.word	0x40000c00
 800f79c:	40001800 	.word	0x40001800
 800f7a0:	4000e000 	.word	0x4000e000
 800f7a4:	4000e400 	.word	0x4000e400
 800f7a8:	00010007 	.word	0x00010007

0800f7ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b086      	sub	sp, #24
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
 800f7b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f7ba:	2300      	movs	r3, #0
 800f7bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d109      	bne.n	800f7d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7ca:	b2db      	uxtb	r3, r3
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	bf0c      	ite	eq
 800f7d0:	2301      	moveq	r3, #1
 800f7d2:	2300      	movne	r3, #0
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	e03c      	b.n	800f852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	2b04      	cmp	r3, #4
 800f7dc:	d109      	bne.n	800f7f2 <HAL_TIM_PWM_Start_DMA+0x46>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	bf0c      	ite	eq
 800f7ea:	2301      	moveq	r3, #1
 800f7ec:	2300      	movne	r3, #0
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	e02f      	b.n	800f852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	2b08      	cmp	r3, #8
 800f7f6:	d109      	bne.n	800f80c <HAL_TIM_PWM_Start_DMA+0x60>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b02      	cmp	r3, #2
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	e022      	b.n	800f852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	2b0c      	cmp	r3, #12
 800f810:	d109      	bne.n	800f826 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b02      	cmp	r3, #2
 800f81c:	bf0c      	ite	eq
 800f81e:	2301      	moveq	r3, #1
 800f820:	2300      	movne	r3, #0
 800f822:	b2db      	uxtb	r3, r3
 800f824:	e015      	b.n	800f852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	2b10      	cmp	r3, #16
 800f82a:	d109      	bne.n	800f840 <HAL_TIM_PWM_Start_DMA+0x94>
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f832:	b2db      	uxtb	r3, r3
 800f834:	2b02      	cmp	r3, #2
 800f836:	bf0c      	ite	eq
 800f838:	2301      	moveq	r3, #1
 800f83a:	2300      	movne	r3, #0
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	e008      	b.n	800f852 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b02      	cmp	r3, #2
 800f84a:	bf0c      	ite	eq
 800f84c:	2301      	moveq	r3, #1
 800f84e:	2300      	movne	r3, #0
 800f850:	b2db      	uxtb	r3, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	d001      	beq.n	800f85a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f856:	2302      	movs	r3, #2
 800f858:	e1ba      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d109      	bne.n	800f874 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b01      	cmp	r3, #1
 800f86a:	bf0c      	ite	eq
 800f86c:	2301      	moveq	r3, #1
 800f86e:	2300      	movne	r3, #0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	e03c      	b.n	800f8ee <HAL_TIM_PWM_Start_DMA+0x142>
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	2b04      	cmp	r3, #4
 800f878:	d109      	bne.n	800f88e <HAL_TIM_PWM_Start_DMA+0xe2>
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f880:	b2db      	uxtb	r3, r3
 800f882:	2b01      	cmp	r3, #1
 800f884:	bf0c      	ite	eq
 800f886:	2301      	moveq	r3, #1
 800f888:	2300      	movne	r3, #0
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	e02f      	b.n	800f8ee <HAL_TIM_PWM_Start_DMA+0x142>
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	2b08      	cmp	r3, #8
 800f892:	d109      	bne.n	800f8a8 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	bf0c      	ite	eq
 800f8a0:	2301      	moveq	r3, #1
 800f8a2:	2300      	movne	r3, #0
 800f8a4:	b2db      	uxtb	r3, r3
 800f8a6:	e022      	b.n	800f8ee <HAL_TIM_PWM_Start_DMA+0x142>
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	2b0c      	cmp	r3, #12
 800f8ac:	d109      	bne.n	800f8c2 <HAL_TIM_PWM_Start_DMA+0x116>
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f8b4:	b2db      	uxtb	r3, r3
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	bf0c      	ite	eq
 800f8ba:	2301      	moveq	r3, #1
 800f8bc:	2300      	movne	r3, #0
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	e015      	b.n	800f8ee <HAL_TIM_PWM_Start_DMA+0x142>
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	2b10      	cmp	r3, #16
 800f8c6:	d109      	bne.n	800f8dc <HAL_TIM_PWM_Start_DMA+0x130>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	bf0c      	ite	eq
 800f8d4:	2301      	moveq	r3, #1
 800f8d6:	2300      	movne	r3, #0
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	e008      	b.n	800f8ee <HAL_TIM_PWM_Start_DMA+0x142>
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	bf0c      	ite	eq
 800f8e8:	2301      	moveq	r3, #1
 800f8ea:	2300      	movne	r3, #0
 800f8ec:	b2db      	uxtb	r3, r3
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d034      	beq.n	800f95c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d002      	beq.n	800f8fe <HAL_TIM_PWM_Start_DMA+0x152>
 800f8f8:	887b      	ldrh	r3, [r7, #2]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d101      	bne.n	800f902 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f8fe:	2301      	movs	r3, #1
 800f900:	e166      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d104      	bne.n	800f912 <HAL_TIM_PWM_Start_DMA+0x166>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2202      	movs	r2, #2
 800f90c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f910:	e026      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	2b04      	cmp	r3, #4
 800f916:	d104      	bne.n	800f922 <HAL_TIM_PWM_Start_DMA+0x176>
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2202      	movs	r2, #2
 800f91c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f920:	e01e      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	2b08      	cmp	r3, #8
 800f926:	d104      	bne.n	800f932 <HAL_TIM_PWM_Start_DMA+0x186>
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	2202      	movs	r2, #2
 800f92c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f930:	e016      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f932:	68bb      	ldr	r3, [r7, #8]
 800f934:	2b0c      	cmp	r3, #12
 800f936:	d104      	bne.n	800f942 <HAL_TIM_PWM_Start_DMA+0x196>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2202      	movs	r2, #2
 800f93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f940:	e00e      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	2b10      	cmp	r3, #16
 800f946:	d104      	bne.n	800f952 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	2202      	movs	r2, #2
 800f94c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f950:	e006      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2202      	movs	r2, #2
 800f956:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f95a:	e001      	b.n	800f960 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f95c:	2301      	movs	r3, #1
 800f95e:	e137      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	2b0c      	cmp	r3, #12
 800f964:	f200 80ae 	bhi.w	800fac4 <HAL_TIM_PWM_Start_DMA+0x318>
 800f968:	a201      	add	r2, pc, #4	; (adr r2, 800f970 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f96e:	bf00      	nop
 800f970:	0800f9a5 	.word	0x0800f9a5
 800f974:	0800fac5 	.word	0x0800fac5
 800f978:	0800fac5 	.word	0x0800fac5
 800f97c:	0800fac5 	.word	0x0800fac5
 800f980:	0800f9ed 	.word	0x0800f9ed
 800f984:	0800fac5 	.word	0x0800fac5
 800f988:	0800fac5 	.word	0x0800fac5
 800f98c:	0800fac5 	.word	0x0800fac5
 800f990:	0800fa35 	.word	0x0800fa35
 800f994:	0800fac5 	.word	0x0800fac5
 800f998:	0800fac5 	.word	0x0800fac5
 800f99c:	0800fac5 	.word	0x0800fac5
 800f9a0:	0800fa7d 	.word	0x0800fa7d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a8:	4a8b      	ldr	r2, [pc, #556]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9aa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b0:	4a8a      	ldr	r2, [pc, #552]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9b8:	4a89      	ldr	r2, [pc, #548]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9ba:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f9c0:	6879      	ldr	r1, [r7, #4]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	3334      	adds	r3, #52	; 0x34
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	887b      	ldrh	r3, [r7, #2]
 800f9cc:	f7f6 f872 	bl	8005ab4 <HAL_DMA_Start_IT>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d001      	beq.n	800f9da <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e0fa      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	68da      	ldr	r2, [r3, #12]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9e8:	60da      	str	r2, [r3, #12]
      break;
 800f9ea:	e06e      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f0:	4a79      	ldr	r2, [pc, #484]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9f2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f8:	4a78      	ldr	r2, [pc, #480]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa00:	4a77      	ldr	r2, [pc, #476]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fa08:	6879      	ldr	r1, [r7, #4]
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	3338      	adds	r3, #56	; 0x38
 800fa10:	461a      	mov	r2, r3
 800fa12:	887b      	ldrh	r3, [r7, #2]
 800fa14:	f7f6 f84e 	bl	8005ab4 <HAL_DMA_Start_IT>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d001      	beq.n	800fa22 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	e0d6      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	68da      	ldr	r2, [r3, #12]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa30:	60da      	str	r2, [r3, #12]
      break;
 800fa32:	e04a      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa38:	4a67      	ldr	r2, [pc, #412]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa40:	4a66      	ldr	r2, [pc, #408]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	4a65      	ldr	r2, [pc, #404]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fa50:	6879      	ldr	r1, [r7, #4]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	333c      	adds	r3, #60	; 0x3c
 800fa58:	461a      	mov	r2, r3
 800fa5a:	887b      	ldrh	r3, [r7, #2]
 800fa5c:	f7f6 f82a 	bl	8005ab4 <HAL_DMA_Start_IT>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa66:	2301      	movs	r3, #1
 800fa68:	e0b2      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68da      	ldr	r2, [r3, #12]
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa78:	60da      	str	r2, [r3, #12]
      break;
 800fa7a:	e026      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa80:	4a55      	ldr	r2, [pc, #340]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa88:	4a54      	ldr	r2, [pc, #336]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa90:	4a53      	ldr	r2, [pc, #332]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa98:	6879      	ldr	r1, [r7, #4]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	3340      	adds	r3, #64	; 0x40
 800faa0:	461a      	mov	r2, r3
 800faa2:	887b      	ldrh	r3, [r7, #2]
 800faa4:	f7f6 f806 	bl	8005ab4 <HAL_DMA_Start_IT>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d001      	beq.n	800fab2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800faae:	2301      	movs	r3, #1
 800fab0:	e08e      	b.n	800fbd0 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	68da      	ldr	r2, [r3, #12]
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fac0:	60da      	str	r2, [r3, #12]
      break;
 800fac2:	e002      	b.n	800faca <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	75fb      	strb	r3, [r7, #23]
      break;
 800fac8:	bf00      	nop
  }

  if (status == HAL_OK)
 800faca:	7dfb      	ldrb	r3, [r7, #23]
 800facc:	2b00      	cmp	r3, #0
 800face:	d17e      	bne.n	800fbce <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	2201      	movs	r2, #1
 800fad6:	68b9      	ldr	r1, [r7, #8]
 800fad8:	4618      	mov	r0, r3
 800fada:	f000 ff63 	bl	80109a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4a40      	ldr	r2, [pc, #256]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d013      	beq.n	800fb10 <HAL_TIM_PWM_Start_DMA+0x364>
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a3e      	ldr	r2, [pc, #248]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d00e      	beq.n	800fb10 <HAL_TIM_PWM_Start_DMA+0x364>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	4a3d      	ldr	r2, [pc, #244]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x440>)
 800faf8:	4293      	cmp	r3, r2
 800fafa:	d009      	beq.n	800fb10 <HAL_TIM_PWM_Start_DMA+0x364>
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a3b      	ldr	r2, [pc, #236]	; (800fbf0 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d004      	beq.n	800fb10 <HAL_TIM_PWM_Start_DMA+0x364>
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	4a3a      	ldr	r2, [pc, #232]	; (800fbf4 <HAL_TIM_PWM_Start_DMA+0x448>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d101      	bne.n	800fb14 <HAL_TIM_PWM_Start_DMA+0x368>
 800fb10:	2301      	movs	r3, #1
 800fb12:	e000      	b.n	800fb16 <HAL_TIM_PWM_Start_DMA+0x36a>
 800fb14:	2300      	movs	r3, #0
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d007      	beq.n	800fb2a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a2d      	ldr	r2, [pc, #180]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d02c      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb3c:	d027      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a2d      	ldr	r2, [pc, #180]	; (800fbf8 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d022      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a2b      	ldr	r2, [pc, #172]	; (800fbfc <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d01d      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a2a      	ldr	r2, [pc, #168]	; (800fc00 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d018      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a21      	ldr	r2, [pc, #132]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d013      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	4a26      	ldr	r2, [pc, #152]	; (800fc04 <HAL_TIM_PWM_Start_DMA+0x458>)
 800fb6c:	4293      	cmp	r3, r2
 800fb6e:	d00e      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	4a1d      	ldr	r2, [pc, #116]	; (800fbec <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d009      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a22      	ldr	r2, [pc, #136]	; (800fc08 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d004      	beq.n	800fb8e <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a20      	ldr	r2, [pc, #128]	; (800fc0c <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d115      	bne.n	800fbba <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	689a      	ldr	r2, [r3, #8]
 800fb94:	4b1e      	ldr	r3, [pc, #120]	; (800fc10 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fb96:	4013      	ands	r3, r2
 800fb98:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	2b06      	cmp	r3, #6
 800fb9e:	d015      	beq.n	800fbcc <HAL_TIM_PWM_Start_DMA+0x420>
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fba6:	d011      	beq.n	800fbcc <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681a      	ldr	r2, [r3, #0]
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f042 0201 	orr.w	r2, r2, #1
 800fbb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbb8:	e008      	b.n	800fbcc <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	681a      	ldr	r2, [r3, #0]
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f042 0201 	orr.w	r2, r2, #1
 800fbc8:	601a      	str	r2, [r3, #0]
 800fbca:	e000      	b.n	800fbce <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbcc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fbce:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	3718      	adds	r7, #24
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	0801019b 	.word	0x0801019b
 800fbdc:	08010243 	.word	0x08010243
 800fbe0:	08010109 	.word	0x08010109
 800fbe4:	40010000 	.word	0x40010000
 800fbe8:	40010400 	.word	0x40010400
 800fbec:	40014000 	.word	0x40014000
 800fbf0:	40014400 	.word	0x40014400
 800fbf4:	40014800 	.word	0x40014800
 800fbf8:	40000400 	.word	0x40000400
 800fbfc:	40000800 	.word	0x40000800
 800fc00:	40000c00 	.word	0x40000c00
 800fc04:	40001800 	.word	0x40001800
 800fc08:	4000e000 	.word	0x4000e000
 800fc0c:	4000e400 	.word	0x4000e400
 800fc10:	00010007 	.word	0x00010007

0800fc14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b082      	sub	sp, #8
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	691b      	ldr	r3, [r3, #16]
 800fc22:	f003 0302 	and.w	r3, r3, #2
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	d122      	bne.n	800fc70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	f003 0302 	and.w	r3, r3, #2
 800fc34:	2b02      	cmp	r3, #2
 800fc36:	d11b      	bne.n	800fc70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f06f 0202 	mvn.w	r2, #2
 800fc40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	699b      	ldr	r3, [r3, #24]
 800fc4e:	f003 0303 	and.w	r3, r3, #3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d003      	beq.n	800fc5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f000 fa24 	bl	80100a4 <HAL_TIM_IC_CaptureCallback>
 800fc5c:	e005      	b.n	800fc6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f000 fa16 	bl	8010090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f000 fa27 	bl	80100b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	f003 0304 	and.w	r3, r3, #4
 800fc7a:	2b04      	cmp	r3, #4
 800fc7c:	d122      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	f003 0304 	and.w	r3, r3, #4
 800fc88:	2b04      	cmp	r3, #4
 800fc8a:	d11b      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f06f 0204 	mvn.w	r2, #4
 800fc94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2202      	movs	r2, #2
 800fc9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 f9fa 	bl	80100a4 <HAL_TIM_IC_CaptureCallback>
 800fcb0:	e005      	b.n	800fcbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcb2:	6878      	ldr	r0, [r7, #4]
 800fcb4:	f000 f9ec 	bl	8010090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 f9fd 	bl	80100b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	f003 0308 	and.w	r3, r3, #8
 800fcce:	2b08      	cmp	r3, #8
 800fcd0:	d122      	bne.n	800fd18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	f003 0308 	and.w	r3, r3, #8
 800fcdc:	2b08      	cmp	r3, #8
 800fcde:	d11b      	bne.n	800fd18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0208 	mvn.w	r2, #8
 800fce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2204      	movs	r2, #4
 800fcee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	f003 0303 	and.w	r3, r3, #3
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d003      	beq.n	800fd06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f9d0 	bl	80100a4 <HAL_TIM_IC_CaptureCallback>
 800fd04:	e005      	b.n	800fd12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 f9c2 	bl	8010090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 f9d3 	bl	80100b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	2200      	movs	r2, #0
 800fd16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	f003 0310 	and.w	r3, r3, #16
 800fd22:	2b10      	cmp	r3, #16
 800fd24:	d122      	bne.n	800fd6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	68db      	ldr	r3, [r3, #12]
 800fd2c:	f003 0310 	and.w	r3, r3, #16
 800fd30:	2b10      	cmp	r3, #16
 800fd32:	d11b      	bne.n	800fd6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f06f 0210 	mvn.w	r2, #16
 800fd3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2208      	movs	r2, #8
 800fd42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	69db      	ldr	r3, [r3, #28]
 800fd4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d003      	beq.n	800fd5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f000 f9a6 	bl	80100a4 <HAL_TIM_IC_CaptureCallback>
 800fd58:	e005      	b.n	800fd66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f000 f998 	bl	8010090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f9a9 	bl	80100b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d10e      	bne.n	800fd98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	68db      	ldr	r3, [r3, #12]
 800fd80:	f003 0301 	and.w	r3, r3, #1
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d107      	bne.n	800fd98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f06f 0201 	mvn.w	r2, #1
 800fd90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f972 	bl	801007c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	691b      	ldr	r3, [r3, #16]
 800fd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fda2:	2b80      	cmp	r3, #128	; 0x80
 800fda4:	d10e      	bne.n	800fdc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdb0:	2b80      	cmp	r3, #128	; 0x80
 800fdb2:	d107      	bne.n	800fdc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fdbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 febc 	bl	8010b3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	691b      	ldr	r3, [r3, #16]
 800fdca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdd2:	d10e      	bne.n	800fdf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	68db      	ldr	r3, [r3, #12]
 800fdda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdde:	2b80      	cmp	r3, #128	; 0x80
 800fde0:	d107      	bne.n	800fdf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fdea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdec:	6878      	ldr	r0, [r7, #4]
 800fdee:	f000 feaf 	bl	8010b50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	691b      	ldr	r3, [r3, #16]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdfc:	2b40      	cmp	r3, #64	; 0x40
 800fdfe:	d10e      	bne.n	800fe1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe0a:	2b40      	cmp	r3, #64	; 0x40
 800fe0c:	d107      	bne.n	800fe1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fe16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fe18:	6878      	ldr	r0, [r7, #4]
 800fe1a:	f000 f961 	bl	80100e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	691b      	ldr	r3, [r3, #16]
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	2b20      	cmp	r3, #32
 800fe2a:	d10e      	bne.n	800fe4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	f003 0320 	and.w	r3, r3, #32
 800fe36:	2b20      	cmp	r3, #32
 800fe38:	d107      	bne.n	800fe4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f06f 0220 	mvn.w	r2, #32
 800fe42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 fe6f 	bl	8010b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe4a:	bf00      	nop
 800fe4c:	3708      	adds	r7, #8
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
	...

0800fe54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	60f8      	str	r0, [r7, #12]
 800fe5c:	60b9      	str	r1, [r7, #8]
 800fe5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe60:	2300      	movs	r3, #0
 800fe62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe6a:	2b01      	cmp	r3, #1
 800fe6c:	d101      	bne.n	800fe72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe6e:	2302      	movs	r3, #2
 800fe70:	e0ff      	b.n	8010072 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2201      	movs	r2, #1
 800fe76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b14      	cmp	r3, #20
 800fe7e:	f200 80f0 	bhi.w	8010062 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe82:	a201      	add	r2, pc, #4	; (adr r2, 800fe88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe88:	0800fedd 	.word	0x0800fedd
 800fe8c:	08010063 	.word	0x08010063
 800fe90:	08010063 	.word	0x08010063
 800fe94:	08010063 	.word	0x08010063
 800fe98:	0800ff1d 	.word	0x0800ff1d
 800fe9c:	08010063 	.word	0x08010063
 800fea0:	08010063 	.word	0x08010063
 800fea4:	08010063 	.word	0x08010063
 800fea8:	0800ff5f 	.word	0x0800ff5f
 800feac:	08010063 	.word	0x08010063
 800feb0:	08010063 	.word	0x08010063
 800feb4:	08010063 	.word	0x08010063
 800feb8:	0800ff9f 	.word	0x0800ff9f
 800febc:	08010063 	.word	0x08010063
 800fec0:	08010063 	.word	0x08010063
 800fec4:	08010063 	.word	0x08010063
 800fec8:	0800ffe1 	.word	0x0800ffe1
 800fecc:	08010063 	.word	0x08010063
 800fed0:	08010063 	.word	0x08010063
 800fed4:	08010063 	.word	0x08010063
 800fed8:	08010021 	.word	0x08010021
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	68b9      	ldr	r1, [r7, #8]
 800fee2:	4618      	mov	r0, r3
 800fee4:	f000 fa88 	bl	80103f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	699a      	ldr	r2, [r3, #24]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f042 0208 	orr.w	r2, r2, #8
 800fef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	699a      	ldr	r2, [r3, #24]
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f022 0204 	bic.w	r2, r2, #4
 800ff06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	6999      	ldr	r1, [r3, #24]
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	691a      	ldr	r2, [r3, #16]
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	430a      	orrs	r2, r1
 800ff18:	619a      	str	r2, [r3, #24]
      break;
 800ff1a:	e0a5      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	68b9      	ldr	r1, [r7, #8]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f000 faf8 	bl	8010518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	699a      	ldr	r2, [r3, #24]
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	6999      	ldr	r1, [r3, #24]
 800ff4e:	68bb      	ldr	r3, [r7, #8]
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	021a      	lsls	r2, r3, #8
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	430a      	orrs	r2, r1
 800ff5a:	619a      	str	r2, [r3, #24]
      break;
 800ff5c:	e084      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	68b9      	ldr	r1, [r7, #8]
 800ff64:	4618      	mov	r0, r3
 800ff66:	f000 fb61 	bl	801062c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	69da      	ldr	r2, [r3, #28]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f042 0208 	orr.w	r2, r2, #8
 800ff78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	69da      	ldr	r2, [r3, #28]
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f022 0204 	bic.w	r2, r2, #4
 800ff88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	69d9      	ldr	r1, [r3, #28]
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	691a      	ldr	r2, [r3, #16]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	430a      	orrs	r2, r1
 800ff9a:	61da      	str	r2, [r3, #28]
      break;
 800ff9c:	e064      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68b9      	ldr	r1, [r7, #8]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f000 fbc9 	bl	801073c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	69da      	ldr	r2, [r3, #28]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ffb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	69da      	ldr	r2, [r3, #28]
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	69d9      	ldr	r1, [r3, #28]
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	021a      	lsls	r2, r3, #8
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	430a      	orrs	r2, r1
 800ffdc:	61da      	str	r2, [r3, #28]
      break;
 800ffde:	e043      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	68b9      	ldr	r1, [r7, #8]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f000 fc12 	bl	8010810 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f042 0208 	orr.w	r2, r2, #8
 800fffa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f022 0204 	bic.w	r2, r2, #4
 801000a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	691a      	ldr	r2, [r3, #16]
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	430a      	orrs	r2, r1
 801001c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801001e:	e023      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	68b9      	ldr	r1, [r7, #8]
 8010026:	4618      	mov	r0, r3
 8010028:	f000 fc56 	bl	80108d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801003a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801004a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	021a      	lsls	r2, r3, #8
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	430a      	orrs	r2, r1
 801005e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010060:	e002      	b.n	8010068 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010062:	2301      	movs	r3, #1
 8010064:	75fb      	strb	r3, [r7, #23]
      break;
 8010066:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010070:	7dfb      	ldrb	r3, [r7, #23]
}
 8010072:	4618      	mov	r0, r3
 8010074:	3718      	adds	r7, #24
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
 801007a:	bf00      	nop

0801007c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100e8:	bf00      	nop
 80100ea:	370c      	adds	r7, #12
 80100ec:	46bd      	mov	sp, r7
 80100ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f2:	4770      	bx	lr

080100f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80100fc:	bf00      	nop
 80100fe:	370c      	adds	r7, #12
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr

08010108 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b084      	sub	sp, #16
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010114:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	429a      	cmp	r2, r3
 801011e:	d107      	bne.n	8010130 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2201      	movs	r2, #1
 8010124:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	2201      	movs	r2, #1
 801012a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801012e:	e02a      	b.n	8010186 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d107      	bne.n	801014a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	2202      	movs	r2, #2
 801013e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	2201      	movs	r2, #1
 8010144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010148:	e01d      	b.n	8010186 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d107      	bne.n	8010164 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	2204      	movs	r2, #4
 8010158:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2201      	movs	r2, #1
 801015e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010162:	e010      	b.n	8010186 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010168:	687a      	ldr	r2, [r7, #4]
 801016a:	429a      	cmp	r2, r3
 801016c:	d107      	bne.n	801017e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2208      	movs	r2, #8
 8010172:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801017c:	e003      	b.n	8010186 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff ffb4 	bl	80100f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2200      	movs	r2, #0
 8010190:	771a      	strb	r2, [r3, #28]
}
 8010192:	bf00      	nop
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d10b      	bne.n	80101ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2201      	movs	r2, #1
 80101b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	69db      	ldr	r3, [r3, #28]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d136      	bne.n	801022e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2201      	movs	r2, #1
 80101c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101c8:	e031      	b.n	801022e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d10b      	bne.n	80101ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2202      	movs	r2, #2
 80101d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	69db      	ldr	r3, [r3, #28]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d125      	bne.n	801022e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2201      	movs	r2, #1
 80101e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101ea:	e020      	b.n	801022e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101f0:	687a      	ldr	r2, [r7, #4]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d10b      	bne.n	801020e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	2204      	movs	r2, #4
 80101fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	69db      	ldr	r3, [r3, #28]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d114      	bne.n	801022e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801020c:	e00f      	b.n	801022e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010212:	687a      	ldr	r2, [r7, #4]
 8010214:	429a      	cmp	r2, r3
 8010216:	d10a      	bne.n	801022e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	2208      	movs	r2, #8
 801021c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	69db      	ldr	r3, [r3, #28]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d103      	bne.n	801022e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2201      	movs	r2, #1
 801022a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801022e:	68f8      	ldr	r0, [r7, #12]
 8010230:	f7ff ff42 	bl	80100b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	771a      	strb	r2, [r3, #28]
}
 801023a:	bf00      	nop
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801024e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	429a      	cmp	r2, r3
 8010258:	d103      	bne.n	8010262 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	771a      	strb	r2, [r3, #28]
 8010260:	e019      	b.n	8010296 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	429a      	cmp	r2, r3
 801026a:	d103      	bne.n	8010274 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2202      	movs	r2, #2
 8010270:	771a      	strb	r2, [r3, #28]
 8010272:	e010      	b.n	8010296 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d103      	bne.n	8010286 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	2204      	movs	r2, #4
 8010282:	771a      	strb	r2, [r3, #28]
 8010284:	e007      	b.n	8010296 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	429a      	cmp	r2, r3
 801028e:	d102      	bne.n	8010296 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2208      	movs	r2, #8
 8010294:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8010296:	68f8      	ldr	r0, [r7, #12]
 8010298:	f7ff ff18 	bl	80100cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2200      	movs	r2, #0
 80102a0:	771a      	strb	r2, [r3, #28]
}
 80102a2:	bf00      	nop
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
	...

080102ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4a44      	ldr	r2, [pc, #272]	; (80103d0 <TIM_Base_SetConfig+0x124>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d013      	beq.n	80102ec <TIM_Base_SetConfig+0x40>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102ca:	d00f      	beq.n	80102ec <TIM_Base_SetConfig+0x40>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4a41      	ldr	r2, [pc, #260]	; (80103d4 <TIM_Base_SetConfig+0x128>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d00b      	beq.n	80102ec <TIM_Base_SetConfig+0x40>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4a40      	ldr	r2, [pc, #256]	; (80103d8 <TIM_Base_SetConfig+0x12c>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d007      	beq.n	80102ec <TIM_Base_SetConfig+0x40>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4a3f      	ldr	r2, [pc, #252]	; (80103dc <TIM_Base_SetConfig+0x130>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d003      	beq.n	80102ec <TIM_Base_SetConfig+0x40>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	4a3e      	ldr	r2, [pc, #248]	; (80103e0 <TIM_Base_SetConfig+0x134>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d108      	bne.n	80102fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	68fa      	ldr	r2, [r7, #12]
 80102fa:	4313      	orrs	r3, r2
 80102fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4a33      	ldr	r2, [pc, #204]	; (80103d0 <TIM_Base_SetConfig+0x124>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d027      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801030c:	d023      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a30      	ldr	r2, [pc, #192]	; (80103d4 <TIM_Base_SetConfig+0x128>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d01f      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a2f      	ldr	r2, [pc, #188]	; (80103d8 <TIM_Base_SetConfig+0x12c>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d01b      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a2e      	ldr	r2, [pc, #184]	; (80103dc <TIM_Base_SetConfig+0x130>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d017      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a2d      	ldr	r2, [pc, #180]	; (80103e0 <TIM_Base_SetConfig+0x134>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d013      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4a2c      	ldr	r2, [pc, #176]	; (80103e4 <TIM_Base_SetConfig+0x138>)
 8010332:	4293      	cmp	r3, r2
 8010334:	d00f      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	4a2b      	ldr	r2, [pc, #172]	; (80103e8 <TIM_Base_SetConfig+0x13c>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d00b      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	4a2a      	ldr	r2, [pc, #168]	; (80103ec <TIM_Base_SetConfig+0x140>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d007      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	4a29      	ldr	r2, [pc, #164]	; (80103f0 <TIM_Base_SetConfig+0x144>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d003      	beq.n	8010356 <TIM_Base_SetConfig+0xaa>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	4a28      	ldr	r2, [pc, #160]	; (80103f4 <TIM_Base_SetConfig+0x148>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d108      	bne.n	8010368 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801035c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	4313      	orrs	r3, r2
 8010366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801036e:	683b      	ldr	r3, [r7, #0]
 8010370:	695b      	ldr	r3, [r3, #20]
 8010372:	4313      	orrs	r3, r2
 8010374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	689a      	ldr	r2, [r3, #8]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	681a      	ldr	r2, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	4a10      	ldr	r2, [pc, #64]	; (80103d0 <TIM_Base_SetConfig+0x124>)
 8010390:	4293      	cmp	r3, r2
 8010392:	d00f      	beq.n	80103b4 <TIM_Base_SetConfig+0x108>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	4a12      	ldr	r2, [pc, #72]	; (80103e0 <TIM_Base_SetConfig+0x134>)
 8010398:	4293      	cmp	r3, r2
 801039a:	d00b      	beq.n	80103b4 <TIM_Base_SetConfig+0x108>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	4a11      	ldr	r2, [pc, #68]	; (80103e4 <TIM_Base_SetConfig+0x138>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d007      	beq.n	80103b4 <TIM_Base_SetConfig+0x108>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	4a10      	ldr	r2, [pc, #64]	; (80103e8 <TIM_Base_SetConfig+0x13c>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d003      	beq.n	80103b4 <TIM_Base_SetConfig+0x108>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4a0f      	ldr	r2, [pc, #60]	; (80103ec <TIM_Base_SetConfig+0x140>)
 80103b0:	4293      	cmp	r3, r2
 80103b2:	d103      	bne.n	80103bc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	691a      	ldr	r2, [r3, #16]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2201      	movs	r2, #1
 80103c0:	615a      	str	r2, [r3, #20]
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	40010000 	.word	0x40010000
 80103d4:	40000400 	.word	0x40000400
 80103d8:	40000800 	.word	0x40000800
 80103dc:	40000c00 	.word	0x40000c00
 80103e0:	40010400 	.word	0x40010400
 80103e4:	40014000 	.word	0x40014000
 80103e8:	40014400 	.word	0x40014400
 80103ec:	40014800 	.word	0x40014800
 80103f0:	4000e000 	.word	0x4000e000
 80103f4:	4000e400 	.word	0x4000e400

080103f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103f8:	b480      	push	{r7}
 80103fa:	b087      	sub	sp, #28
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	f023 0201 	bic.w	r2, r3, #1
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6a1b      	ldr	r3, [r3, #32]
 8010412:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	685b      	ldr	r3, [r3, #4]
 8010418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	699b      	ldr	r3, [r3, #24]
 801041e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010420:	68fa      	ldr	r2, [r7, #12]
 8010422:	4b37      	ldr	r3, [pc, #220]	; (8010500 <TIM_OC1_SetConfig+0x108>)
 8010424:	4013      	ands	r3, r2
 8010426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f023 0303 	bic.w	r3, r3, #3
 801042e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	68fa      	ldr	r2, [r7, #12]
 8010436:	4313      	orrs	r3, r2
 8010438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	f023 0302 	bic.w	r3, r3, #2
 8010440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	697a      	ldr	r2, [r7, #20]
 8010448:	4313      	orrs	r3, r2
 801044a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	4a2d      	ldr	r2, [pc, #180]	; (8010504 <TIM_OC1_SetConfig+0x10c>)
 8010450:	4293      	cmp	r3, r2
 8010452:	d00f      	beq.n	8010474 <TIM_OC1_SetConfig+0x7c>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4a2c      	ldr	r2, [pc, #176]	; (8010508 <TIM_OC1_SetConfig+0x110>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d00b      	beq.n	8010474 <TIM_OC1_SetConfig+0x7c>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	4a2b      	ldr	r2, [pc, #172]	; (801050c <TIM_OC1_SetConfig+0x114>)
 8010460:	4293      	cmp	r3, r2
 8010462:	d007      	beq.n	8010474 <TIM_OC1_SetConfig+0x7c>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4a2a      	ldr	r2, [pc, #168]	; (8010510 <TIM_OC1_SetConfig+0x118>)
 8010468:	4293      	cmp	r3, r2
 801046a:	d003      	beq.n	8010474 <TIM_OC1_SetConfig+0x7c>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	4a29      	ldr	r2, [pc, #164]	; (8010514 <TIM_OC1_SetConfig+0x11c>)
 8010470:	4293      	cmp	r3, r2
 8010472:	d10c      	bne.n	801048e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	f023 0308 	bic.w	r3, r3, #8
 801047a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	68db      	ldr	r3, [r3, #12]
 8010480:	697a      	ldr	r2, [r7, #20]
 8010482:	4313      	orrs	r3, r2
 8010484:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	f023 0304 	bic.w	r3, r3, #4
 801048c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	4a1c      	ldr	r2, [pc, #112]	; (8010504 <TIM_OC1_SetConfig+0x10c>)
 8010492:	4293      	cmp	r3, r2
 8010494:	d00f      	beq.n	80104b6 <TIM_OC1_SetConfig+0xbe>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	4a1b      	ldr	r2, [pc, #108]	; (8010508 <TIM_OC1_SetConfig+0x110>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d00b      	beq.n	80104b6 <TIM_OC1_SetConfig+0xbe>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4a1a      	ldr	r2, [pc, #104]	; (801050c <TIM_OC1_SetConfig+0x114>)
 80104a2:	4293      	cmp	r3, r2
 80104a4:	d007      	beq.n	80104b6 <TIM_OC1_SetConfig+0xbe>
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4a19      	ldr	r2, [pc, #100]	; (8010510 <TIM_OC1_SetConfig+0x118>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d003      	beq.n	80104b6 <TIM_OC1_SetConfig+0xbe>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	4a18      	ldr	r2, [pc, #96]	; (8010514 <TIM_OC1_SetConfig+0x11c>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d111      	bne.n	80104da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	693a      	ldr	r2, [r7, #16]
 80104cc:	4313      	orrs	r3, r2
 80104ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	699b      	ldr	r3, [r3, #24]
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	697a      	ldr	r2, [r7, #20]
 80104f2:	621a      	str	r2, [r3, #32]
}
 80104f4:	bf00      	nop
 80104f6:	371c      	adds	r7, #28
 80104f8:	46bd      	mov	sp, r7
 80104fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fe:	4770      	bx	lr
 8010500:	fffeff8f 	.word	0xfffeff8f
 8010504:	40010000 	.word	0x40010000
 8010508:	40010400 	.word	0x40010400
 801050c:	40014000 	.word	0x40014000
 8010510:	40014400 	.word	0x40014400
 8010514:	40014800 	.word	0x40014800

08010518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010518:	b480      	push	{r7}
 801051a:	b087      	sub	sp, #28
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
 8010520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	6a1b      	ldr	r3, [r3, #32]
 8010526:	f023 0210 	bic.w	r2, r3, #16
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6a1b      	ldr	r3, [r3, #32]
 8010532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	699b      	ldr	r3, [r3, #24]
 801053e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010540:	68fa      	ldr	r2, [r7, #12]
 8010542:	4b34      	ldr	r3, [pc, #208]	; (8010614 <TIM_OC2_SetConfig+0xfc>)
 8010544:	4013      	ands	r3, r2
 8010546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801054e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	021b      	lsls	r3, r3, #8
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	4313      	orrs	r3, r2
 801055a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801055c:	697b      	ldr	r3, [r7, #20]
 801055e:	f023 0320 	bic.w	r3, r3, #32
 8010562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	689b      	ldr	r3, [r3, #8]
 8010568:	011b      	lsls	r3, r3, #4
 801056a:	697a      	ldr	r2, [r7, #20]
 801056c:	4313      	orrs	r3, r2
 801056e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	4a29      	ldr	r2, [pc, #164]	; (8010618 <TIM_OC2_SetConfig+0x100>)
 8010574:	4293      	cmp	r3, r2
 8010576:	d003      	beq.n	8010580 <TIM_OC2_SetConfig+0x68>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	4a28      	ldr	r2, [pc, #160]	; (801061c <TIM_OC2_SetConfig+0x104>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d10d      	bne.n	801059c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	68db      	ldr	r3, [r3, #12]
 801058c:	011b      	lsls	r3, r3, #4
 801058e:	697a      	ldr	r2, [r7, #20]
 8010590:	4313      	orrs	r3, r2
 8010592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801059a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	4a1e      	ldr	r2, [pc, #120]	; (8010618 <TIM_OC2_SetConfig+0x100>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d00f      	beq.n	80105c4 <TIM_OC2_SetConfig+0xac>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4a1d      	ldr	r2, [pc, #116]	; (801061c <TIM_OC2_SetConfig+0x104>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d00b      	beq.n	80105c4 <TIM_OC2_SetConfig+0xac>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	4a1c      	ldr	r2, [pc, #112]	; (8010620 <TIM_OC2_SetConfig+0x108>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d007      	beq.n	80105c4 <TIM_OC2_SetConfig+0xac>
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	4a1b      	ldr	r2, [pc, #108]	; (8010624 <TIM_OC2_SetConfig+0x10c>)
 80105b8:	4293      	cmp	r3, r2
 80105ba:	d003      	beq.n	80105c4 <TIM_OC2_SetConfig+0xac>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4a1a      	ldr	r2, [pc, #104]	; (8010628 <TIM_OC2_SetConfig+0x110>)
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d113      	bne.n	80105ec <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	695b      	ldr	r3, [r3, #20]
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	693a      	ldr	r2, [r7, #16]
 80105dc:	4313      	orrs	r3, r2
 80105de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	699b      	ldr	r3, [r3, #24]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	4313      	orrs	r3, r2
 80105ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	693a      	ldr	r2, [r7, #16]
 80105f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	685a      	ldr	r2, [r3, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	697a      	ldr	r2, [r7, #20]
 8010604:	621a      	str	r2, [r3, #32]
}
 8010606:	bf00      	nop
 8010608:	371c      	adds	r7, #28
 801060a:	46bd      	mov	sp, r7
 801060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010610:	4770      	bx	lr
 8010612:	bf00      	nop
 8010614:	feff8fff 	.word	0xfeff8fff
 8010618:	40010000 	.word	0x40010000
 801061c:	40010400 	.word	0x40010400
 8010620:	40014000 	.word	0x40014000
 8010624:	40014400 	.word	0x40014400
 8010628:	40014800 	.word	0x40014800

0801062c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801062c:	b480      	push	{r7}
 801062e:	b087      	sub	sp, #28
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
 8010634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6a1b      	ldr	r3, [r3, #32]
 801063a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	685b      	ldr	r3, [r3, #4]
 801064c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	69db      	ldr	r3, [r3, #28]
 8010652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	4b33      	ldr	r3, [pc, #204]	; (8010724 <TIM_OC3_SetConfig+0xf8>)
 8010658:	4013      	ands	r3, r2
 801065a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f023 0303 	bic.w	r3, r3, #3
 8010662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68fa      	ldr	r2, [r7, #12]
 801066a:	4313      	orrs	r3, r2
 801066c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	689b      	ldr	r3, [r3, #8]
 801067a:	021b      	lsls	r3, r3, #8
 801067c:	697a      	ldr	r2, [r7, #20]
 801067e:	4313      	orrs	r3, r2
 8010680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4a28      	ldr	r2, [pc, #160]	; (8010728 <TIM_OC3_SetConfig+0xfc>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d003      	beq.n	8010692 <TIM_OC3_SetConfig+0x66>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	4a27      	ldr	r2, [pc, #156]	; (801072c <TIM_OC3_SetConfig+0x100>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d10d      	bne.n	80106ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	68db      	ldr	r3, [r3, #12]
 801069e:	021b      	lsls	r3, r3, #8
 80106a0:	697a      	ldr	r2, [r7, #20]
 80106a2:	4313      	orrs	r3, r2
 80106a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80106a6:	697b      	ldr	r3, [r7, #20]
 80106a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80106ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	4a1d      	ldr	r2, [pc, #116]	; (8010728 <TIM_OC3_SetConfig+0xfc>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d00f      	beq.n	80106d6 <TIM_OC3_SetConfig+0xaa>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	4a1c      	ldr	r2, [pc, #112]	; (801072c <TIM_OC3_SetConfig+0x100>)
 80106ba:	4293      	cmp	r3, r2
 80106bc:	d00b      	beq.n	80106d6 <TIM_OC3_SetConfig+0xaa>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	4a1b      	ldr	r2, [pc, #108]	; (8010730 <TIM_OC3_SetConfig+0x104>)
 80106c2:	4293      	cmp	r3, r2
 80106c4:	d007      	beq.n	80106d6 <TIM_OC3_SetConfig+0xaa>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	4a1a      	ldr	r2, [pc, #104]	; (8010734 <TIM_OC3_SetConfig+0x108>)
 80106ca:	4293      	cmp	r3, r2
 80106cc:	d003      	beq.n	80106d6 <TIM_OC3_SetConfig+0xaa>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	4a19      	ldr	r2, [pc, #100]	; (8010738 <TIM_OC3_SetConfig+0x10c>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d113      	bne.n	80106fe <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106e6:	683b      	ldr	r3, [r7, #0]
 80106e8:	695b      	ldr	r3, [r3, #20]
 80106ea:	011b      	lsls	r3, r3, #4
 80106ec:	693a      	ldr	r2, [r7, #16]
 80106ee:	4313      	orrs	r3, r2
 80106f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	699b      	ldr	r3, [r3, #24]
 80106f6:	011b      	lsls	r3, r3, #4
 80106f8:	693a      	ldr	r2, [r7, #16]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	693a      	ldr	r2, [r7, #16]
 8010702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	621a      	str	r2, [r3, #32]
}
 8010718:	bf00      	nop
 801071a:	371c      	adds	r7, #28
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	fffeff8f 	.word	0xfffeff8f
 8010728:	40010000 	.word	0x40010000
 801072c:	40010400 	.word	0x40010400
 8010730:	40014000 	.word	0x40014000
 8010734:	40014400 	.word	0x40014400
 8010738:	40014800 	.word	0x40014800

0801073c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801073c:	b480      	push	{r7}
 801073e:	b087      	sub	sp, #28
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	69db      	ldr	r3, [r3, #28]
 8010762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	4b24      	ldr	r3, [pc, #144]	; (80107f8 <TIM_OC4_SetConfig+0xbc>)
 8010768:	4013      	ands	r3, r2
 801076a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010772:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010774:	683b      	ldr	r3, [r7, #0]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	021b      	lsls	r3, r3, #8
 801077a:	68fa      	ldr	r2, [r7, #12]
 801077c:	4313      	orrs	r3, r2
 801077e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	031b      	lsls	r3, r3, #12
 801078e:	693a      	ldr	r2, [r7, #16]
 8010790:	4313      	orrs	r3, r2
 8010792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a19      	ldr	r2, [pc, #100]	; (80107fc <TIM_OC4_SetConfig+0xc0>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d00f      	beq.n	80107bc <TIM_OC4_SetConfig+0x80>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a18      	ldr	r2, [pc, #96]	; (8010800 <TIM_OC4_SetConfig+0xc4>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d00b      	beq.n	80107bc <TIM_OC4_SetConfig+0x80>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a17      	ldr	r2, [pc, #92]	; (8010804 <TIM_OC4_SetConfig+0xc8>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d007      	beq.n	80107bc <TIM_OC4_SetConfig+0x80>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a16      	ldr	r2, [pc, #88]	; (8010808 <TIM_OC4_SetConfig+0xcc>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d003      	beq.n	80107bc <TIM_OC4_SetConfig+0x80>
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4a15      	ldr	r2, [pc, #84]	; (801080c <TIM_OC4_SetConfig+0xd0>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d109      	bne.n	80107d0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	695b      	ldr	r3, [r3, #20]
 80107c8:	019b      	lsls	r3, r3, #6
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	4313      	orrs	r3, r2
 80107ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	697a      	ldr	r2, [r7, #20]
 80107d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	68fa      	ldr	r2, [r7, #12]
 80107da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107dc:	683b      	ldr	r3, [r7, #0]
 80107de:	685a      	ldr	r2, [r3, #4]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	621a      	str	r2, [r3, #32]
}
 80107ea:	bf00      	nop
 80107ec:	371c      	adds	r7, #28
 80107ee:	46bd      	mov	sp, r7
 80107f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f4:	4770      	bx	lr
 80107f6:	bf00      	nop
 80107f8:	feff8fff 	.word	0xfeff8fff
 80107fc:	40010000 	.word	0x40010000
 8010800:	40010400 	.word	0x40010400
 8010804:	40014000 	.word	0x40014000
 8010808:	40014400 	.word	0x40014400
 801080c:	40014800 	.word	0x40014800

08010810 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010810:	b480      	push	{r7}
 8010812:	b087      	sub	sp, #28
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6a1b      	ldr	r3, [r3, #32]
 801081e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6a1b      	ldr	r3, [r3, #32]
 801082a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	685b      	ldr	r3, [r3, #4]
 8010830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010838:	68fa      	ldr	r2, [r7, #12]
 801083a:	4b21      	ldr	r3, [pc, #132]	; (80108c0 <TIM_OC5_SetConfig+0xb0>)
 801083c:	4013      	ands	r3, r2
 801083e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	68fa      	ldr	r2, [r7, #12]
 8010846:	4313      	orrs	r3, r2
 8010848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801084a:	693b      	ldr	r3, [r7, #16]
 801084c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010850:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	689b      	ldr	r3, [r3, #8]
 8010856:	041b      	lsls	r3, r3, #16
 8010858:	693a      	ldr	r2, [r7, #16]
 801085a:	4313      	orrs	r3, r2
 801085c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	4a18      	ldr	r2, [pc, #96]	; (80108c4 <TIM_OC5_SetConfig+0xb4>)
 8010862:	4293      	cmp	r3, r2
 8010864:	d00f      	beq.n	8010886 <TIM_OC5_SetConfig+0x76>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4a17      	ldr	r2, [pc, #92]	; (80108c8 <TIM_OC5_SetConfig+0xb8>)
 801086a:	4293      	cmp	r3, r2
 801086c:	d00b      	beq.n	8010886 <TIM_OC5_SetConfig+0x76>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	4a16      	ldr	r2, [pc, #88]	; (80108cc <TIM_OC5_SetConfig+0xbc>)
 8010872:	4293      	cmp	r3, r2
 8010874:	d007      	beq.n	8010886 <TIM_OC5_SetConfig+0x76>
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	4a15      	ldr	r2, [pc, #84]	; (80108d0 <TIM_OC5_SetConfig+0xc0>)
 801087a:	4293      	cmp	r3, r2
 801087c:	d003      	beq.n	8010886 <TIM_OC5_SetConfig+0x76>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	4a14      	ldr	r2, [pc, #80]	; (80108d4 <TIM_OC5_SetConfig+0xc4>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d109      	bne.n	801089a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801088c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	695b      	ldr	r3, [r3, #20]
 8010892:	021b      	lsls	r3, r3, #8
 8010894:	697a      	ldr	r2, [r7, #20]
 8010896:	4313      	orrs	r3, r2
 8010898:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	697a      	ldr	r2, [r7, #20]
 801089e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	685a      	ldr	r2, [r3, #4]
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	693a      	ldr	r2, [r7, #16]
 80108b2:	621a      	str	r2, [r3, #32]
}
 80108b4:	bf00      	nop
 80108b6:	371c      	adds	r7, #28
 80108b8:	46bd      	mov	sp, r7
 80108ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108be:	4770      	bx	lr
 80108c0:	fffeff8f 	.word	0xfffeff8f
 80108c4:	40010000 	.word	0x40010000
 80108c8:	40010400 	.word	0x40010400
 80108cc:	40014000 	.word	0x40014000
 80108d0:	40014400 	.word	0x40014400
 80108d4:	40014800 	.word	0x40014800

080108d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108d8:	b480      	push	{r7}
 80108da:	b087      	sub	sp, #28
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
 80108e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a1b      	ldr	r3, [r3, #32]
 80108f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010900:	68fa      	ldr	r2, [r7, #12]
 8010902:	4b22      	ldr	r3, [pc, #136]	; (801098c <TIM_OC6_SetConfig+0xb4>)
 8010904:	4013      	ands	r3, r2
 8010906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	021b      	lsls	r3, r3, #8
 801090e:	68fa      	ldr	r2, [r7, #12]
 8010910:	4313      	orrs	r3, r2
 8010912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801091a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	051b      	lsls	r3, r3, #20
 8010922:	693a      	ldr	r2, [r7, #16]
 8010924:	4313      	orrs	r3, r2
 8010926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a19      	ldr	r2, [pc, #100]	; (8010990 <TIM_OC6_SetConfig+0xb8>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d00f      	beq.n	8010950 <TIM_OC6_SetConfig+0x78>
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	4a18      	ldr	r2, [pc, #96]	; (8010994 <TIM_OC6_SetConfig+0xbc>)
 8010934:	4293      	cmp	r3, r2
 8010936:	d00b      	beq.n	8010950 <TIM_OC6_SetConfig+0x78>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	4a17      	ldr	r2, [pc, #92]	; (8010998 <TIM_OC6_SetConfig+0xc0>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d007      	beq.n	8010950 <TIM_OC6_SetConfig+0x78>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	4a16      	ldr	r2, [pc, #88]	; (801099c <TIM_OC6_SetConfig+0xc4>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d003      	beq.n	8010950 <TIM_OC6_SetConfig+0x78>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4a15      	ldr	r2, [pc, #84]	; (80109a0 <TIM_OC6_SetConfig+0xc8>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d109      	bne.n	8010964 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010956:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	695b      	ldr	r3, [r3, #20]
 801095c:	029b      	lsls	r3, r3, #10
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	4313      	orrs	r3, r2
 8010962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	697a      	ldr	r2, [r7, #20]
 8010968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	685a      	ldr	r2, [r3, #4]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	693a      	ldr	r2, [r7, #16]
 801097c:	621a      	str	r2, [r3, #32]
}
 801097e:	bf00      	nop
 8010980:	371c      	adds	r7, #28
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr
 801098a:	bf00      	nop
 801098c:	feff8fff 	.word	0xfeff8fff
 8010990:	40010000 	.word	0x40010000
 8010994:	40010400 	.word	0x40010400
 8010998:	40014000 	.word	0x40014000
 801099c:	40014400 	.word	0x40014400
 80109a0:	40014800 	.word	0x40014800

080109a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80109a4:	b480      	push	{r7}
 80109a6:	b087      	sub	sp, #28
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	f003 031f 	and.w	r3, r3, #31
 80109b6:	2201      	movs	r2, #1
 80109b8:	fa02 f303 	lsl.w	r3, r2, r3
 80109bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	6a1a      	ldr	r2, [r3, #32]
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	43db      	mvns	r3, r3
 80109c6:	401a      	ands	r2, r3
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6a1a      	ldr	r2, [r3, #32]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	f003 031f 	and.w	r3, r3, #31
 80109d6:	6879      	ldr	r1, [r7, #4]
 80109d8:	fa01 f303 	lsl.w	r3, r1, r3
 80109dc:	431a      	orrs	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	621a      	str	r2, [r3, #32]
}
 80109e2:	bf00      	nop
 80109e4:	371c      	adds	r7, #28
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr
	...

080109f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109f0:	b480      	push	{r7}
 80109f2:	b085      	sub	sp, #20
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	6078      	str	r0, [r7, #4]
 80109f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d101      	bne.n	8010a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010a04:	2302      	movs	r3, #2
 8010a06:	e077      	b.n	8010af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2202      	movs	r2, #2
 8010a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	685b      	ldr	r3, [r3, #4]
 8010a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	689b      	ldr	r3, [r3, #8]
 8010a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a35      	ldr	r2, [pc, #212]	; (8010b04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d004      	beq.n	8010a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a34      	ldr	r2, [pc, #208]	; (8010b08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d108      	bne.n	8010a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	685b      	ldr	r3, [r3, #4]
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	68fa      	ldr	r2, [r7, #12]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	68fa      	ldr	r2, [r7, #12]
 8010a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a25      	ldr	r2, [pc, #148]	; (8010b04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d02c      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a7a:	d027      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a22      	ldr	r2, [pc, #136]	; (8010b0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d022      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a21      	ldr	r2, [pc, #132]	; (8010b10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d01d      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a1f      	ldr	r2, [pc, #124]	; (8010b14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d018      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a1a      	ldr	r2, [pc, #104]	; (8010b08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d013      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	4a1b      	ldr	r2, [pc, #108]	; (8010b18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	d00e      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	4a1a      	ldr	r2, [pc, #104]	; (8010b1c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d009      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	4a18      	ldr	r2, [pc, #96]	; (8010b20 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d004      	beq.n	8010acc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4a17      	ldr	r2, [pc, #92]	; (8010b24 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d10c      	bne.n	8010ae6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ad2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	68ba      	ldr	r2, [r7, #8]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	68ba      	ldr	r2, [r7, #8]
 8010ae4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010af6:	2300      	movs	r3, #0
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	3714      	adds	r7, #20
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr
 8010b04:	40010000 	.word	0x40010000
 8010b08:	40010400 	.word	0x40010400
 8010b0c:	40000400 	.word	0x40000400
 8010b10:	40000800 	.word	0x40000800
 8010b14:	40000c00 	.word	0x40000c00
 8010b18:	40001800 	.word	0x40001800
 8010b1c:	40014000 	.word	0x40014000
 8010b20:	4000e000 	.word	0x4000e000
 8010b24:	4000e400 	.word	0x4000e400

08010b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b3c:	b480      	push	{r7}
 8010b3e:	b083      	sub	sp, #12
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b44:	bf00      	nop
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b58:	bf00      	nop
 8010b5a:	370c      	adds	r7, #12
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d101      	bne.n	8010b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e042      	b.n	8010bfc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d106      	bne.n	8010b8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7f2 fcc5 	bl	8003518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2224      	movs	r2, #36	; 0x24
 8010b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681a      	ldr	r2, [r3, #0]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f022 0201 	bic.w	r2, r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 f82c 	bl	8010c04 <UART_SetConfig>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d101      	bne.n	8010bb6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e022      	b.n	8010bfc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d002      	beq.n	8010bc4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fe8c 	bl	80118dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	685a      	ldr	r2, [r3, #4]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	689a      	ldr	r2, [r3, #8]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f042 0201 	orr.w	r2, r2, #1
 8010bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 ff13 	bl	8011a20 <UART_CheckIdleState>
 8010bfa:	4603      	mov	r3, r0
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010c08:	b092      	sub	sp, #72	; 0x48
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	689a      	ldr	r2, [r3, #8]
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	691b      	ldr	r3, [r3, #16]
 8010c1c:	431a      	orrs	r2, r3
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	695b      	ldr	r3, [r3, #20]
 8010c22:	431a      	orrs	r2, r3
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	69db      	ldr	r3, [r3, #28]
 8010c28:	4313      	orrs	r3, r2
 8010c2a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	4bbe      	ldr	r3, [pc, #760]	; (8010f2c <UART_SetConfig+0x328>)
 8010c34:	4013      	ands	r3, r2
 8010c36:	697a      	ldr	r2, [r7, #20]
 8010c38:	6812      	ldr	r2, [r2, #0]
 8010c3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c3c:	430b      	orrs	r3, r1
 8010c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	68da      	ldr	r2, [r3, #12]
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	430a      	orrs	r2, r1
 8010c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	699b      	ldr	r3, [r3, #24]
 8010c5a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	4ab3      	ldr	r2, [pc, #716]	; (8010f30 <UART_SetConfig+0x32c>)
 8010c62:	4293      	cmp	r3, r2
 8010c64:	d004      	beq.n	8010c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	6a1b      	ldr	r3, [r3, #32]
 8010c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c6c:	4313      	orrs	r3, r2
 8010c6e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	689a      	ldr	r2, [r3, #8]
 8010c76:	4baf      	ldr	r3, [pc, #700]	; (8010f34 <UART_SetConfig+0x330>)
 8010c78:	4013      	ands	r3, r2
 8010c7a:	697a      	ldr	r2, [r7, #20]
 8010c7c:	6812      	ldr	r2, [r2, #0]
 8010c7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c80:	430b      	orrs	r3, r1
 8010c82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c8a:	f023 010f 	bic.w	r1, r3, #15
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4aa6      	ldr	r2, [pc, #664]	; (8010f38 <UART_SetConfig+0x334>)
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	d177      	bne.n	8010d94 <UART_SetConfig+0x190>
 8010ca4:	4ba5      	ldr	r3, [pc, #660]	; (8010f3c <UART_SetConfig+0x338>)
 8010ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ca8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cac:	2b28      	cmp	r3, #40	; 0x28
 8010cae:	d86d      	bhi.n	8010d8c <UART_SetConfig+0x188>
 8010cb0:	a201      	add	r2, pc, #4	; (adr r2, 8010cb8 <UART_SetConfig+0xb4>)
 8010cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb6:	bf00      	nop
 8010cb8:	08010d5d 	.word	0x08010d5d
 8010cbc:	08010d8d 	.word	0x08010d8d
 8010cc0:	08010d8d 	.word	0x08010d8d
 8010cc4:	08010d8d 	.word	0x08010d8d
 8010cc8:	08010d8d 	.word	0x08010d8d
 8010ccc:	08010d8d 	.word	0x08010d8d
 8010cd0:	08010d8d 	.word	0x08010d8d
 8010cd4:	08010d8d 	.word	0x08010d8d
 8010cd8:	08010d65 	.word	0x08010d65
 8010cdc:	08010d8d 	.word	0x08010d8d
 8010ce0:	08010d8d 	.word	0x08010d8d
 8010ce4:	08010d8d 	.word	0x08010d8d
 8010ce8:	08010d8d 	.word	0x08010d8d
 8010cec:	08010d8d 	.word	0x08010d8d
 8010cf0:	08010d8d 	.word	0x08010d8d
 8010cf4:	08010d8d 	.word	0x08010d8d
 8010cf8:	08010d6d 	.word	0x08010d6d
 8010cfc:	08010d8d 	.word	0x08010d8d
 8010d00:	08010d8d 	.word	0x08010d8d
 8010d04:	08010d8d 	.word	0x08010d8d
 8010d08:	08010d8d 	.word	0x08010d8d
 8010d0c:	08010d8d 	.word	0x08010d8d
 8010d10:	08010d8d 	.word	0x08010d8d
 8010d14:	08010d8d 	.word	0x08010d8d
 8010d18:	08010d75 	.word	0x08010d75
 8010d1c:	08010d8d 	.word	0x08010d8d
 8010d20:	08010d8d 	.word	0x08010d8d
 8010d24:	08010d8d 	.word	0x08010d8d
 8010d28:	08010d8d 	.word	0x08010d8d
 8010d2c:	08010d8d 	.word	0x08010d8d
 8010d30:	08010d8d 	.word	0x08010d8d
 8010d34:	08010d8d 	.word	0x08010d8d
 8010d38:	08010d7d 	.word	0x08010d7d
 8010d3c:	08010d8d 	.word	0x08010d8d
 8010d40:	08010d8d 	.word	0x08010d8d
 8010d44:	08010d8d 	.word	0x08010d8d
 8010d48:	08010d8d 	.word	0x08010d8d
 8010d4c:	08010d8d 	.word	0x08010d8d
 8010d50:	08010d8d 	.word	0x08010d8d
 8010d54:	08010d8d 	.word	0x08010d8d
 8010d58:	08010d85 	.word	0x08010d85
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e326      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d64:	2304      	movs	r3, #4
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e322      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d6c:	2308      	movs	r3, #8
 8010d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d72:	e31e      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d74:	2310      	movs	r3, #16
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e31a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d7c:	2320      	movs	r3, #32
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e316      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d84:	2340      	movs	r3, #64	; 0x40
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e312      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d8c:	2380      	movs	r3, #128	; 0x80
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e30e      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	4a69      	ldr	r2, [pc, #420]	; (8010f40 <UART_SetConfig+0x33c>)
 8010d9a:	4293      	cmp	r3, r2
 8010d9c:	d130      	bne.n	8010e00 <UART_SetConfig+0x1fc>
 8010d9e:	4b67      	ldr	r3, [pc, #412]	; (8010f3c <UART_SetConfig+0x338>)
 8010da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010da2:	f003 0307 	and.w	r3, r3, #7
 8010da6:	2b05      	cmp	r3, #5
 8010da8:	d826      	bhi.n	8010df8 <UART_SetConfig+0x1f4>
 8010daa:	a201      	add	r2, pc, #4	; (adr r2, 8010db0 <UART_SetConfig+0x1ac>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010dc9 	.word	0x08010dc9
 8010db4:	08010dd1 	.word	0x08010dd1
 8010db8:	08010dd9 	.word	0x08010dd9
 8010dbc:	08010de1 	.word	0x08010de1
 8010dc0:	08010de9 	.word	0x08010de9
 8010dc4:	08010df1 	.word	0x08010df1
 8010dc8:	2300      	movs	r3, #0
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e2f0      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010dd0:	2304      	movs	r3, #4
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e2ec      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010dd8:	2308      	movs	r3, #8
 8010dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dde:	e2e8      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010de0:	2310      	movs	r3, #16
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e2e4      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010de8:	2320      	movs	r3, #32
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e2e0      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010df0:	2340      	movs	r3, #64	; 0x40
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df6:	e2dc      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010df8:	2380      	movs	r3, #128	; 0x80
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfe:	e2d8      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e00:	697b      	ldr	r3, [r7, #20]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a4f      	ldr	r2, [pc, #316]	; (8010f44 <UART_SetConfig+0x340>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d130      	bne.n	8010e6c <UART_SetConfig+0x268>
 8010e0a:	4b4c      	ldr	r3, [pc, #304]	; (8010f3c <UART_SetConfig+0x338>)
 8010e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e0e:	f003 0307 	and.w	r3, r3, #7
 8010e12:	2b05      	cmp	r3, #5
 8010e14:	d826      	bhi.n	8010e64 <UART_SetConfig+0x260>
 8010e16:	a201      	add	r2, pc, #4	; (adr r2, 8010e1c <UART_SetConfig+0x218>)
 8010e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e1c:	08010e35 	.word	0x08010e35
 8010e20:	08010e3d 	.word	0x08010e3d
 8010e24:	08010e45 	.word	0x08010e45
 8010e28:	08010e4d 	.word	0x08010e4d
 8010e2c:	08010e55 	.word	0x08010e55
 8010e30:	08010e5d 	.word	0x08010e5d
 8010e34:	2300      	movs	r3, #0
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3a:	e2ba      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e3c:	2304      	movs	r3, #4
 8010e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e42:	e2b6      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e44:	2308      	movs	r3, #8
 8010e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e4a:	e2b2      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e4c:	2310      	movs	r3, #16
 8010e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e52:	e2ae      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e54:	2320      	movs	r3, #32
 8010e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5a:	e2aa      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e5c:	2340      	movs	r3, #64	; 0x40
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e62:	e2a6      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e64:	2380      	movs	r3, #128	; 0x80
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6a:	e2a2      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a35      	ldr	r2, [pc, #212]	; (8010f48 <UART_SetConfig+0x344>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d130      	bne.n	8010ed8 <UART_SetConfig+0x2d4>
 8010e76:	4b31      	ldr	r3, [pc, #196]	; (8010f3c <UART_SetConfig+0x338>)
 8010e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e7a:	f003 0307 	and.w	r3, r3, #7
 8010e7e:	2b05      	cmp	r3, #5
 8010e80:	d826      	bhi.n	8010ed0 <UART_SetConfig+0x2cc>
 8010e82:	a201      	add	r2, pc, #4	; (adr r2, 8010e88 <UART_SetConfig+0x284>)
 8010e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e88:	08010ea1 	.word	0x08010ea1
 8010e8c:	08010ea9 	.word	0x08010ea9
 8010e90:	08010eb1 	.word	0x08010eb1
 8010e94:	08010eb9 	.word	0x08010eb9
 8010e98:	08010ec1 	.word	0x08010ec1
 8010e9c:	08010ec9 	.word	0x08010ec9
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e284      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010ea8:	2304      	movs	r3, #4
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e280      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010eb0:	2308      	movs	r3, #8
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb6:	e27c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010eb8:	2310      	movs	r3, #16
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e278      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010ec0:	2320      	movs	r3, #32
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e274      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010ec8:	2340      	movs	r3, #64	; 0x40
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e270      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010ed0:	2380      	movs	r3, #128	; 0x80
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e26c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4a1b      	ldr	r2, [pc, #108]	; (8010f4c <UART_SetConfig+0x348>)
 8010ede:	4293      	cmp	r3, r2
 8010ee0:	d142      	bne.n	8010f68 <UART_SetConfig+0x364>
 8010ee2:	4b16      	ldr	r3, [pc, #88]	; (8010f3c <UART_SetConfig+0x338>)
 8010ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ee6:	f003 0307 	and.w	r3, r3, #7
 8010eea:	2b05      	cmp	r3, #5
 8010eec:	d838      	bhi.n	8010f60 <UART_SetConfig+0x35c>
 8010eee:	a201      	add	r2, pc, #4	; (adr r2, 8010ef4 <UART_SetConfig+0x2f0>)
 8010ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef4:	08010f0d 	.word	0x08010f0d
 8010ef8:	08010f15 	.word	0x08010f15
 8010efc:	08010f1d 	.word	0x08010f1d
 8010f00:	08010f25 	.word	0x08010f25
 8010f04:	08010f51 	.word	0x08010f51
 8010f08:	08010f59 	.word	0x08010f59
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f12:	e24e      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f14:	2304      	movs	r3, #4
 8010f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1a:	e24a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f1c:	2308      	movs	r3, #8
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f22:	e246      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f24:	2310      	movs	r3, #16
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2a:	e242      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f2c:	cfff69f3 	.word	0xcfff69f3
 8010f30:	58000c00 	.word	0x58000c00
 8010f34:	11fff4ff 	.word	0x11fff4ff
 8010f38:	40011000 	.word	0x40011000
 8010f3c:	58024400 	.word	0x58024400
 8010f40:	40004400 	.word	0x40004400
 8010f44:	40004800 	.word	0x40004800
 8010f48:	40004c00 	.word	0x40004c00
 8010f4c:	40005000 	.word	0x40005000
 8010f50:	2320      	movs	r3, #32
 8010f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f56:	e22c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f58:	2340      	movs	r3, #64	; 0x40
 8010f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f5e:	e228      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f60:	2380      	movs	r3, #128	; 0x80
 8010f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f66:	e224      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	4ab1      	ldr	r2, [pc, #708]	; (8011234 <UART_SetConfig+0x630>)
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d176      	bne.n	8011060 <UART_SetConfig+0x45c>
 8010f72:	4bb1      	ldr	r3, [pc, #708]	; (8011238 <UART_SetConfig+0x634>)
 8010f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f7a:	2b28      	cmp	r3, #40	; 0x28
 8010f7c:	d86c      	bhi.n	8011058 <UART_SetConfig+0x454>
 8010f7e:	a201      	add	r2, pc, #4	; (adr r2, 8010f84 <UART_SetConfig+0x380>)
 8010f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f84:	08011029 	.word	0x08011029
 8010f88:	08011059 	.word	0x08011059
 8010f8c:	08011059 	.word	0x08011059
 8010f90:	08011059 	.word	0x08011059
 8010f94:	08011059 	.word	0x08011059
 8010f98:	08011059 	.word	0x08011059
 8010f9c:	08011059 	.word	0x08011059
 8010fa0:	08011059 	.word	0x08011059
 8010fa4:	08011031 	.word	0x08011031
 8010fa8:	08011059 	.word	0x08011059
 8010fac:	08011059 	.word	0x08011059
 8010fb0:	08011059 	.word	0x08011059
 8010fb4:	08011059 	.word	0x08011059
 8010fb8:	08011059 	.word	0x08011059
 8010fbc:	08011059 	.word	0x08011059
 8010fc0:	08011059 	.word	0x08011059
 8010fc4:	08011039 	.word	0x08011039
 8010fc8:	08011059 	.word	0x08011059
 8010fcc:	08011059 	.word	0x08011059
 8010fd0:	08011059 	.word	0x08011059
 8010fd4:	08011059 	.word	0x08011059
 8010fd8:	08011059 	.word	0x08011059
 8010fdc:	08011059 	.word	0x08011059
 8010fe0:	08011059 	.word	0x08011059
 8010fe4:	08011041 	.word	0x08011041
 8010fe8:	08011059 	.word	0x08011059
 8010fec:	08011059 	.word	0x08011059
 8010ff0:	08011059 	.word	0x08011059
 8010ff4:	08011059 	.word	0x08011059
 8010ff8:	08011059 	.word	0x08011059
 8010ffc:	08011059 	.word	0x08011059
 8011000:	08011059 	.word	0x08011059
 8011004:	08011049 	.word	0x08011049
 8011008:	08011059 	.word	0x08011059
 801100c:	08011059 	.word	0x08011059
 8011010:	08011059 	.word	0x08011059
 8011014:	08011059 	.word	0x08011059
 8011018:	08011059 	.word	0x08011059
 801101c:	08011059 	.word	0x08011059
 8011020:	08011059 	.word	0x08011059
 8011024:	08011051 	.word	0x08011051
 8011028:	2301      	movs	r3, #1
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e1c0      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011030:	2304      	movs	r3, #4
 8011032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011036:	e1bc      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011038:	2308      	movs	r3, #8
 801103a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801103e:	e1b8      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011040:	2310      	movs	r3, #16
 8011042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011046:	e1b4      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011048:	2320      	movs	r3, #32
 801104a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801104e:	e1b0      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011050:	2340      	movs	r3, #64	; 0x40
 8011052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011056:	e1ac      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011058:	2380      	movs	r3, #128	; 0x80
 801105a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801105e:	e1a8      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4a75      	ldr	r2, [pc, #468]	; (801123c <UART_SetConfig+0x638>)
 8011066:	4293      	cmp	r3, r2
 8011068:	d130      	bne.n	80110cc <UART_SetConfig+0x4c8>
 801106a:	4b73      	ldr	r3, [pc, #460]	; (8011238 <UART_SetConfig+0x634>)
 801106c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801106e:	f003 0307 	and.w	r3, r3, #7
 8011072:	2b05      	cmp	r3, #5
 8011074:	d826      	bhi.n	80110c4 <UART_SetConfig+0x4c0>
 8011076:	a201      	add	r2, pc, #4	; (adr r2, 801107c <UART_SetConfig+0x478>)
 8011078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801107c:	08011095 	.word	0x08011095
 8011080:	0801109d 	.word	0x0801109d
 8011084:	080110a5 	.word	0x080110a5
 8011088:	080110ad 	.word	0x080110ad
 801108c:	080110b5 	.word	0x080110b5
 8011090:	080110bd 	.word	0x080110bd
 8011094:	2300      	movs	r3, #0
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e18a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801109c:	2304      	movs	r3, #4
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a2:	e186      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110a4:	2308      	movs	r3, #8
 80110a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110aa:	e182      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110ac:	2310      	movs	r3, #16
 80110ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110b2:	e17e      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110b4:	2320      	movs	r3, #32
 80110b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ba:	e17a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110bc:	2340      	movs	r3, #64	; 0x40
 80110be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110c2:	e176      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110c4:	2380      	movs	r3, #128	; 0x80
 80110c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ca:	e172      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	4a5b      	ldr	r2, [pc, #364]	; (8011240 <UART_SetConfig+0x63c>)
 80110d2:	4293      	cmp	r3, r2
 80110d4:	d130      	bne.n	8011138 <UART_SetConfig+0x534>
 80110d6:	4b58      	ldr	r3, [pc, #352]	; (8011238 <UART_SetConfig+0x634>)
 80110d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110da:	f003 0307 	and.w	r3, r3, #7
 80110de:	2b05      	cmp	r3, #5
 80110e0:	d826      	bhi.n	8011130 <UART_SetConfig+0x52c>
 80110e2:	a201      	add	r2, pc, #4	; (adr r2, 80110e8 <UART_SetConfig+0x4e4>)
 80110e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110e8:	08011101 	.word	0x08011101
 80110ec:	08011109 	.word	0x08011109
 80110f0:	08011111 	.word	0x08011111
 80110f4:	08011119 	.word	0x08011119
 80110f8:	08011121 	.word	0x08011121
 80110fc:	08011129 	.word	0x08011129
 8011100:	2300      	movs	r3, #0
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011106:	e154      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011108:	2304      	movs	r3, #4
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110e:	e150      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011110:	2308      	movs	r3, #8
 8011112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011116:	e14c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011118:	2310      	movs	r3, #16
 801111a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801111e:	e148      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011120:	2320      	movs	r3, #32
 8011122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011126:	e144      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011128:	2340      	movs	r3, #64	; 0x40
 801112a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801112e:	e140      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011130:	2380      	movs	r3, #128	; 0x80
 8011132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011136:	e13c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	4a41      	ldr	r2, [pc, #260]	; (8011244 <UART_SetConfig+0x640>)
 801113e:	4293      	cmp	r3, r2
 8011140:	f040 8082 	bne.w	8011248 <UART_SetConfig+0x644>
 8011144:	4b3c      	ldr	r3, [pc, #240]	; (8011238 <UART_SetConfig+0x634>)
 8011146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801114c:	2b28      	cmp	r3, #40	; 0x28
 801114e:	d86d      	bhi.n	801122c <UART_SetConfig+0x628>
 8011150:	a201      	add	r2, pc, #4	; (adr r2, 8011158 <UART_SetConfig+0x554>)
 8011152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011156:	bf00      	nop
 8011158:	080111fd 	.word	0x080111fd
 801115c:	0801122d 	.word	0x0801122d
 8011160:	0801122d 	.word	0x0801122d
 8011164:	0801122d 	.word	0x0801122d
 8011168:	0801122d 	.word	0x0801122d
 801116c:	0801122d 	.word	0x0801122d
 8011170:	0801122d 	.word	0x0801122d
 8011174:	0801122d 	.word	0x0801122d
 8011178:	08011205 	.word	0x08011205
 801117c:	0801122d 	.word	0x0801122d
 8011180:	0801122d 	.word	0x0801122d
 8011184:	0801122d 	.word	0x0801122d
 8011188:	0801122d 	.word	0x0801122d
 801118c:	0801122d 	.word	0x0801122d
 8011190:	0801122d 	.word	0x0801122d
 8011194:	0801122d 	.word	0x0801122d
 8011198:	0801120d 	.word	0x0801120d
 801119c:	0801122d 	.word	0x0801122d
 80111a0:	0801122d 	.word	0x0801122d
 80111a4:	0801122d 	.word	0x0801122d
 80111a8:	0801122d 	.word	0x0801122d
 80111ac:	0801122d 	.word	0x0801122d
 80111b0:	0801122d 	.word	0x0801122d
 80111b4:	0801122d 	.word	0x0801122d
 80111b8:	08011215 	.word	0x08011215
 80111bc:	0801122d 	.word	0x0801122d
 80111c0:	0801122d 	.word	0x0801122d
 80111c4:	0801122d 	.word	0x0801122d
 80111c8:	0801122d 	.word	0x0801122d
 80111cc:	0801122d 	.word	0x0801122d
 80111d0:	0801122d 	.word	0x0801122d
 80111d4:	0801122d 	.word	0x0801122d
 80111d8:	0801121d 	.word	0x0801121d
 80111dc:	0801122d 	.word	0x0801122d
 80111e0:	0801122d 	.word	0x0801122d
 80111e4:	0801122d 	.word	0x0801122d
 80111e8:	0801122d 	.word	0x0801122d
 80111ec:	0801122d 	.word	0x0801122d
 80111f0:	0801122d 	.word	0x0801122d
 80111f4:	0801122d 	.word	0x0801122d
 80111f8:	08011225 	.word	0x08011225
 80111fc:	2301      	movs	r3, #1
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e0d6      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011204:	2304      	movs	r3, #4
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e0d2      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801120c:	2308      	movs	r3, #8
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e0ce      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011214:	2310      	movs	r3, #16
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e0ca      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801121c:	2320      	movs	r3, #32
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e0c6      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011224:	2340      	movs	r3, #64	; 0x40
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e0c2      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801122c:	2380      	movs	r3, #128	; 0x80
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e0be      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011234:	40011400 	.word	0x40011400
 8011238:	58024400 	.word	0x58024400
 801123c:	40007800 	.word	0x40007800
 8011240:	40007c00 	.word	0x40007c00
 8011244:	40011800 	.word	0x40011800
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	4aad      	ldr	r2, [pc, #692]	; (8011504 <UART_SetConfig+0x900>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d176      	bne.n	8011340 <UART_SetConfig+0x73c>
 8011252:	4bad      	ldr	r3, [pc, #692]	; (8011508 <UART_SetConfig+0x904>)
 8011254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801125a:	2b28      	cmp	r3, #40	; 0x28
 801125c:	d86c      	bhi.n	8011338 <UART_SetConfig+0x734>
 801125e:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <UART_SetConfig+0x660>)
 8011260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011264:	08011309 	.word	0x08011309
 8011268:	08011339 	.word	0x08011339
 801126c:	08011339 	.word	0x08011339
 8011270:	08011339 	.word	0x08011339
 8011274:	08011339 	.word	0x08011339
 8011278:	08011339 	.word	0x08011339
 801127c:	08011339 	.word	0x08011339
 8011280:	08011339 	.word	0x08011339
 8011284:	08011311 	.word	0x08011311
 8011288:	08011339 	.word	0x08011339
 801128c:	08011339 	.word	0x08011339
 8011290:	08011339 	.word	0x08011339
 8011294:	08011339 	.word	0x08011339
 8011298:	08011339 	.word	0x08011339
 801129c:	08011339 	.word	0x08011339
 80112a0:	08011339 	.word	0x08011339
 80112a4:	08011319 	.word	0x08011319
 80112a8:	08011339 	.word	0x08011339
 80112ac:	08011339 	.word	0x08011339
 80112b0:	08011339 	.word	0x08011339
 80112b4:	08011339 	.word	0x08011339
 80112b8:	08011339 	.word	0x08011339
 80112bc:	08011339 	.word	0x08011339
 80112c0:	08011339 	.word	0x08011339
 80112c4:	08011321 	.word	0x08011321
 80112c8:	08011339 	.word	0x08011339
 80112cc:	08011339 	.word	0x08011339
 80112d0:	08011339 	.word	0x08011339
 80112d4:	08011339 	.word	0x08011339
 80112d8:	08011339 	.word	0x08011339
 80112dc:	08011339 	.word	0x08011339
 80112e0:	08011339 	.word	0x08011339
 80112e4:	08011329 	.word	0x08011329
 80112e8:	08011339 	.word	0x08011339
 80112ec:	08011339 	.word	0x08011339
 80112f0:	08011339 	.word	0x08011339
 80112f4:	08011339 	.word	0x08011339
 80112f8:	08011339 	.word	0x08011339
 80112fc:	08011339 	.word	0x08011339
 8011300:	08011339 	.word	0x08011339
 8011304:	08011331 	.word	0x08011331
 8011308:	2301      	movs	r3, #1
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e050      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011310:	2304      	movs	r3, #4
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e04c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011318:	2308      	movs	r3, #8
 801131a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801131e:	e048      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011320:	2310      	movs	r3, #16
 8011322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011326:	e044      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011328:	2320      	movs	r3, #32
 801132a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801132e:	e040      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011330:	2340      	movs	r3, #64	; 0x40
 8011332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011336:	e03c      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011338:	2380      	movs	r3, #128	; 0x80
 801133a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801133e:	e038      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a71      	ldr	r2, [pc, #452]	; (801150c <UART_SetConfig+0x908>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d130      	bne.n	80113ac <UART_SetConfig+0x7a8>
 801134a:	4b6f      	ldr	r3, [pc, #444]	; (8011508 <UART_SetConfig+0x904>)
 801134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801134e:	f003 0307 	and.w	r3, r3, #7
 8011352:	2b05      	cmp	r3, #5
 8011354:	d826      	bhi.n	80113a4 <UART_SetConfig+0x7a0>
 8011356:	a201      	add	r2, pc, #4	; (adr r2, 801135c <UART_SetConfig+0x758>)
 8011358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801135c:	08011375 	.word	0x08011375
 8011360:	0801137d 	.word	0x0801137d
 8011364:	08011385 	.word	0x08011385
 8011368:	0801138d 	.word	0x0801138d
 801136c:	08011395 	.word	0x08011395
 8011370:	0801139d 	.word	0x0801139d
 8011374:	2302      	movs	r3, #2
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e01a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801137c:	2304      	movs	r3, #4
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e016      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011384:	2308      	movs	r3, #8
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801138a:	e012      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801138c:	2310      	movs	r3, #16
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e00e      	b.n	80113b2 <UART_SetConfig+0x7ae>
 8011394:	2320      	movs	r3, #32
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e00a      	b.n	80113b2 <UART_SetConfig+0x7ae>
 801139c:	2340      	movs	r3, #64	; 0x40
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e006      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80113a4:	2380      	movs	r3, #128	; 0x80
 80113a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113aa:	e002      	b.n	80113b2 <UART_SetConfig+0x7ae>
 80113ac:	2380      	movs	r3, #128	; 0x80
 80113ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4a55      	ldr	r2, [pc, #340]	; (801150c <UART_SetConfig+0x908>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	f040 80f8 	bne.w	80115ae <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80113be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80113c2:	2b20      	cmp	r3, #32
 80113c4:	dc46      	bgt.n	8011454 <UART_SetConfig+0x850>
 80113c6:	2b02      	cmp	r3, #2
 80113c8:	db75      	blt.n	80114b6 <UART_SetConfig+0x8b2>
 80113ca:	3b02      	subs	r3, #2
 80113cc:	2b1e      	cmp	r3, #30
 80113ce:	d872      	bhi.n	80114b6 <UART_SetConfig+0x8b2>
 80113d0:	a201      	add	r2, pc, #4	; (adr r2, 80113d8 <UART_SetConfig+0x7d4>)
 80113d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113d6:	bf00      	nop
 80113d8:	0801145b 	.word	0x0801145b
 80113dc:	080114b7 	.word	0x080114b7
 80113e0:	08011463 	.word	0x08011463
 80113e4:	080114b7 	.word	0x080114b7
 80113e8:	080114b7 	.word	0x080114b7
 80113ec:	080114b7 	.word	0x080114b7
 80113f0:	08011473 	.word	0x08011473
 80113f4:	080114b7 	.word	0x080114b7
 80113f8:	080114b7 	.word	0x080114b7
 80113fc:	080114b7 	.word	0x080114b7
 8011400:	080114b7 	.word	0x080114b7
 8011404:	080114b7 	.word	0x080114b7
 8011408:	080114b7 	.word	0x080114b7
 801140c:	080114b7 	.word	0x080114b7
 8011410:	08011483 	.word	0x08011483
 8011414:	080114b7 	.word	0x080114b7
 8011418:	080114b7 	.word	0x080114b7
 801141c:	080114b7 	.word	0x080114b7
 8011420:	080114b7 	.word	0x080114b7
 8011424:	080114b7 	.word	0x080114b7
 8011428:	080114b7 	.word	0x080114b7
 801142c:	080114b7 	.word	0x080114b7
 8011430:	080114b7 	.word	0x080114b7
 8011434:	080114b7 	.word	0x080114b7
 8011438:	080114b7 	.word	0x080114b7
 801143c:	080114b7 	.word	0x080114b7
 8011440:	080114b7 	.word	0x080114b7
 8011444:	080114b7 	.word	0x080114b7
 8011448:	080114b7 	.word	0x080114b7
 801144c:	080114b7 	.word	0x080114b7
 8011450:	080114a9 	.word	0x080114a9
 8011454:	2b40      	cmp	r3, #64	; 0x40
 8011456:	d02a      	beq.n	80114ae <UART_SetConfig+0x8aa>
 8011458:	e02d      	b.n	80114b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801145a:	f7fb f86b 	bl	800c534 <HAL_RCCEx_GetD3PCLK1Freq>
 801145e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011460:	e02f      	b.n	80114c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011466:	4618      	mov	r0, r3
 8011468:	f7fb f87a 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801146c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011470:	e027      	b.n	80114c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011472:	f107 0318 	add.w	r3, r7, #24
 8011476:	4618      	mov	r0, r3
 8011478:	f7fb f9c6 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011480:	e01f      	b.n	80114c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011482:	4b21      	ldr	r3, [pc, #132]	; (8011508 <UART_SetConfig+0x904>)
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f003 0320 	and.w	r3, r3, #32
 801148a:	2b00      	cmp	r3, #0
 801148c:	d009      	beq.n	80114a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801148e:	4b1e      	ldr	r3, [pc, #120]	; (8011508 <UART_SetConfig+0x904>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	08db      	lsrs	r3, r3, #3
 8011494:	f003 0303 	and.w	r3, r3, #3
 8011498:	4a1d      	ldr	r2, [pc, #116]	; (8011510 <UART_SetConfig+0x90c>)
 801149a:	fa22 f303 	lsr.w	r3, r2, r3
 801149e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80114a0:	e00f      	b.n	80114c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80114a2:	4b1b      	ldr	r3, [pc, #108]	; (8011510 <UART_SetConfig+0x90c>)
 80114a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114a6:	e00c      	b.n	80114c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80114a8:	4b1a      	ldr	r3, [pc, #104]	; (8011514 <UART_SetConfig+0x910>)
 80114aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ac:	e009      	b.n	80114c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80114b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114b4:	e005      	b.n	80114c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80114b6:	2300      	movs	r3, #0
 80114b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80114ba:	2301      	movs	r3, #1
 80114bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80114c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80114c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	f000 81ee 	beq.w	80118a6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114ce:	4a12      	ldr	r2, [pc, #72]	; (8011518 <UART_SetConfig+0x914>)
 80114d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114d4:	461a      	mov	r2, r3
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80114dc:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	685a      	ldr	r2, [r3, #4]
 80114e2:	4613      	mov	r3, r2
 80114e4:	005b      	lsls	r3, r3, #1
 80114e6:	4413      	add	r3, r2
 80114e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d305      	bcc.n	80114fa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d910      	bls.n	801151c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011500:	e1d1      	b.n	80118a6 <UART_SetConfig+0xca2>
 8011502:	bf00      	nop
 8011504:	40011c00 	.word	0x40011c00
 8011508:	58024400 	.word	0x58024400
 801150c:	58000c00 	.word	0x58000c00
 8011510:	03d09000 	.word	0x03d09000
 8011514:	003d0900 	.word	0x003d0900
 8011518:	080185a4 	.word	0x080185a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801151c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801151e:	2200      	movs	r2, #0
 8011520:	60bb      	str	r3, [r7, #8]
 8011522:	60fa      	str	r2, [r7, #12]
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011528:	4ac0      	ldr	r2, [pc, #768]	; (801182c <UART_SetConfig+0xc28>)
 801152a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801152e:	b29b      	uxth	r3, r3
 8011530:	2200      	movs	r2, #0
 8011532:	603b      	str	r3, [r7, #0]
 8011534:	607a      	str	r2, [r7, #4]
 8011536:	e9d7 2300 	ldrd	r2, r3, [r7]
 801153a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801153e:	f7ee ff4f 	bl	80003e0 <__aeabi_uldivmod>
 8011542:	4602      	mov	r2, r0
 8011544:	460b      	mov	r3, r1
 8011546:	4610      	mov	r0, r2
 8011548:	4619      	mov	r1, r3
 801154a:	f04f 0200 	mov.w	r2, #0
 801154e:	f04f 0300 	mov.w	r3, #0
 8011552:	020b      	lsls	r3, r1, #8
 8011554:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011558:	0202      	lsls	r2, r0, #8
 801155a:	6979      	ldr	r1, [r7, #20]
 801155c:	6849      	ldr	r1, [r1, #4]
 801155e:	0849      	lsrs	r1, r1, #1
 8011560:	2000      	movs	r0, #0
 8011562:	460c      	mov	r4, r1
 8011564:	4605      	mov	r5, r0
 8011566:	eb12 0804 	adds.w	r8, r2, r4
 801156a:	eb43 0905 	adc.w	r9, r3, r5
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	2200      	movs	r2, #0
 8011574:	469a      	mov	sl, r3
 8011576:	4693      	mov	fp, r2
 8011578:	4652      	mov	r2, sl
 801157a:	465b      	mov	r3, fp
 801157c:	4640      	mov	r0, r8
 801157e:	4649      	mov	r1, r9
 8011580:	f7ee ff2e 	bl	80003e0 <__aeabi_uldivmod>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4613      	mov	r3, r2
 801158a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011592:	d308      	bcc.n	80115a6 <UART_SetConfig+0x9a2>
 8011594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801159a:	d204      	bcs.n	80115a6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115a2:	60da      	str	r2, [r3, #12]
 80115a4:	e17f      	b.n	80118a6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80115a6:	2301      	movs	r3, #1
 80115a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80115ac:	e17b      	b.n	80118a6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115ae:	697b      	ldr	r3, [r7, #20]
 80115b0:	69db      	ldr	r3, [r3, #28]
 80115b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115b6:	f040 80bd 	bne.w	8011734 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80115ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80115be:	2b20      	cmp	r3, #32
 80115c0:	dc48      	bgt.n	8011654 <UART_SetConfig+0xa50>
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	db7b      	blt.n	80116be <UART_SetConfig+0xaba>
 80115c6:	2b20      	cmp	r3, #32
 80115c8:	d879      	bhi.n	80116be <UART_SetConfig+0xaba>
 80115ca:	a201      	add	r2, pc, #4	; (adr r2, 80115d0 <UART_SetConfig+0x9cc>)
 80115cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115d0:	0801165b 	.word	0x0801165b
 80115d4:	08011663 	.word	0x08011663
 80115d8:	080116bf 	.word	0x080116bf
 80115dc:	080116bf 	.word	0x080116bf
 80115e0:	0801166b 	.word	0x0801166b
 80115e4:	080116bf 	.word	0x080116bf
 80115e8:	080116bf 	.word	0x080116bf
 80115ec:	080116bf 	.word	0x080116bf
 80115f0:	0801167b 	.word	0x0801167b
 80115f4:	080116bf 	.word	0x080116bf
 80115f8:	080116bf 	.word	0x080116bf
 80115fc:	080116bf 	.word	0x080116bf
 8011600:	080116bf 	.word	0x080116bf
 8011604:	080116bf 	.word	0x080116bf
 8011608:	080116bf 	.word	0x080116bf
 801160c:	080116bf 	.word	0x080116bf
 8011610:	0801168b 	.word	0x0801168b
 8011614:	080116bf 	.word	0x080116bf
 8011618:	080116bf 	.word	0x080116bf
 801161c:	080116bf 	.word	0x080116bf
 8011620:	080116bf 	.word	0x080116bf
 8011624:	080116bf 	.word	0x080116bf
 8011628:	080116bf 	.word	0x080116bf
 801162c:	080116bf 	.word	0x080116bf
 8011630:	080116bf 	.word	0x080116bf
 8011634:	080116bf 	.word	0x080116bf
 8011638:	080116bf 	.word	0x080116bf
 801163c:	080116bf 	.word	0x080116bf
 8011640:	080116bf 	.word	0x080116bf
 8011644:	080116bf 	.word	0x080116bf
 8011648:	080116bf 	.word	0x080116bf
 801164c:	080116bf 	.word	0x080116bf
 8011650:	080116b1 	.word	0x080116b1
 8011654:	2b40      	cmp	r3, #64	; 0x40
 8011656:	d02e      	beq.n	80116b6 <UART_SetConfig+0xab2>
 8011658:	e031      	b.n	80116be <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801165a:	f7f9 f8cd 	bl	800a7f8 <HAL_RCC_GetPCLK1Freq>
 801165e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011660:	e033      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011662:	f7f9 f8df 	bl	800a824 <HAL_RCC_GetPCLK2Freq>
 8011666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011668:	e02f      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801166e:	4618      	mov	r0, r3
 8011670:	f7fa ff76 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011678:	e027      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801167a:	f107 0318 	add.w	r3, r7, #24
 801167e:	4618      	mov	r0, r3
 8011680:	f7fb f8c2 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011688:	e01f      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801168a:	4b69      	ldr	r3, [pc, #420]	; (8011830 <UART_SetConfig+0xc2c>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f003 0320 	and.w	r3, r3, #32
 8011692:	2b00      	cmp	r3, #0
 8011694:	d009      	beq.n	80116aa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011696:	4b66      	ldr	r3, [pc, #408]	; (8011830 <UART_SetConfig+0xc2c>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	08db      	lsrs	r3, r3, #3
 801169c:	f003 0303 	and.w	r3, r3, #3
 80116a0:	4a64      	ldr	r2, [pc, #400]	; (8011834 <UART_SetConfig+0xc30>)
 80116a2:	fa22 f303 	lsr.w	r3, r2, r3
 80116a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80116a8:	e00f      	b.n	80116ca <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80116aa:	4b62      	ldr	r3, [pc, #392]	; (8011834 <UART_SetConfig+0xc30>)
 80116ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116ae:	e00c      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116b0:	4b61      	ldr	r3, [pc, #388]	; (8011838 <UART_SetConfig+0xc34>)
 80116b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116b4:	e009      	b.n	80116ca <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116bc:	e005      	b.n	80116ca <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80116be:	2300      	movs	r3, #0
 80116c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116c2:	2301      	movs	r3, #1
 80116c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	f000 80ea 	beq.w	80118a6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d6:	4a55      	ldr	r2, [pc, #340]	; (801182c <UART_SetConfig+0xc28>)
 80116d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116dc:	461a      	mov	r2, r3
 80116de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80116e4:	005a      	lsls	r2, r3, #1
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	085b      	lsrs	r3, r3, #1
 80116ec:	441a      	add	r2, r3
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	2b0f      	cmp	r3, #15
 80116fc:	d916      	bls.n	801172c <UART_SetConfig+0xb28>
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011704:	d212      	bcs.n	801172c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011708:	b29b      	uxth	r3, r3
 801170a:	f023 030f 	bic.w	r3, r3, #15
 801170e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011712:	085b      	lsrs	r3, r3, #1
 8011714:	b29b      	uxth	r3, r3
 8011716:	f003 0307 	and.w	r3, r3, #7
 801171a:	b29a      	uxth	r2, r3
 801171c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801171e:	4313      	orrs	r3, r2
 8011720:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011728:	60da      	str	r2, [r3, #12]
 801172a:	e0bc      	b.n	80118a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801172c:	2301      	movs	r3, #1
 801172e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011732:	e0b8      	b.n	80118a6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011738:	2b20      	cmp	r3, #32
 801173a:	dc4b      	bgt.n	80117d4 <UART_SetConfig+0xbd0>
 801173c:	2b00      	cmp	r3, #0
 801173e:	f2c0 8087 	blt.w	8011850 <UART_SetConfig+0xc4c>
 8011742:	2b20      	cmp	r3, #32
 8011744:	f200 8084 	bhi.w	8011850 <UART_SetConfig+0xc4c>
 8011748:	a201      	add	r2, pc, #4	; (adr r2, 8011750 <UART_SetConfig+0xb4c>)
 801174a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174e:	bf00      	nop
 8011750:	080117db 	.word	0x080117db
 8011754:	080117e3 	.word	0x080117e3
 8011758:	08011851 	.word	0x08011851
 801175c:	08011851 	.word	0x08011851
 8011760:	080117eb 	.word	0x080117eb
 8011764:	08011851 	.word	0x08011851
 8011768:	08011851 	.word	0x08011851
 801176c:	08011851 	.word	0x08011851
 8011770:	080117fb 	.word	0x080117fb
 8011774:	08011851 	.word	0x08011851
 8011778:	08011851 	.word	0x08011851
 801177c:	08011851 	.word	0x08011851
 8011780:	08011851 	.word	0x08011851
 8011784:	08011851 	.word	0x08011851
 8011788:	08011851 	.word	0x08011851
 801178c:	08011851 	.word	0x08011851
 8011790:	0801180b 	.word	0x0801180b
 8011794:	08011851 	.word	0x08011851
 8011798:	08011851 	.word	0x08011851
 801179c:	08011851 	.word	0x08011851
 80117a0:	08011851 	.word	0x08011851
 80117a4:	08011851 	.word	0x08011851
 80117a8:	08011851 	.word	0x08011851
 80117ac:	08011851 	.word	0x08011851
 80117b0:	08011851 	.word	0x08011851
 80117b4:	08011851 	.word	0x08011851
 80117b8:	08011851 	.word	0x08011851
 80117bc:	08011851 	.word	0x08011851
 80117c0:	08011851 	.word	0x08011851
 80117c4:	08011851 	.word	0x08011851
 80117c8:	08011851 	.word	0x08011851
 80117cc:	08011851 	.word	0x08011851
 80117d0:	08011843 	.word	0x08011843
 80117d4:	2b40      	cmp	r3, #64	; 0x40
 80117d6:	d037      	beq.n	8011848 <UART_SetConfig+0xc44>
 80117d8:	e03a      	b.n	8011850 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117da:	f7f9 f80d 	bl	800a7f8 <HAL_RCC_GetPCLK1Freq>
 80117de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117e0:	e03c      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117e2:	f7f9 f81f 	bl	800a824 <HAL_RCC_GetPCLK2Freq>
 80117e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117e8:	e038      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fa feb6 	bl	800c560 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117f8:	e030      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117fa:	f107 0318 	add.w	r3, r7, #24
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fb f802 	bl	800c808 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011804:	69fb      	ldr	r3, [r7, #28]
 8011806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011808:	e028      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801180a:	4b09      	ldr	r3, [pc, #36]	; (8011830 <UART_SetConfig+0xc2c>)
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f003 0320 	and.w	r3, r3, #32
 8011812:	2b00      	cmp	r3, #0
 8011814:	d012      	beq.n	801183c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011816:	4b06      	ldr	r3, [pc, #24]	; (8011830 <UART_SetConfig+0xc2c>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	08db      	lsrs	r3, r3, #3
 801181c:	f003 0303 	and.w	r3, r3, #3
 8011820:	4a04      	ldr	r2, [pc, #16]	; (8011834 <UART_SetConfig+0xc30>)
 8011822:	fa22 f303 	lsr.w	r3, r2, r3
 8011826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011828:	e018      	b.n	801185c <UART_SetConfig+0xc58>
 801182a:	bf00      	nop
 801182c:	080185a4 	.word	0x080185a4
 8011830:	58024400 	.word	0x58024400
 8011834:	03d09000 	.word	0x03d09000
 8011838:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801183c:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <UART_SetConfig+0xccc>)
 801183e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011840:	e00c      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011842:	4b24      	ldr	r3, [pc, #144]	; (80118d4 <UART_SetConfig+0xcd0>)
 8011844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011846:	e009      	b.n	801185c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801184c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801184e:	e005      	b.n	801185c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011850:	2300      	movs	r3, #0
 8011852:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011854:	2301      	movs	r3, #1
 8011856:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801185a:	bf00      	nop
    }

    if (pclk != 0U)
 801185c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185e:	2b00      	cmp	r3, #0
 8011860:	d021      	beq.n	80118a6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011866:	4a1c      	ldr	r2, [pc, #112]	; (80118d8 <UART_SetConfig+0xcd4>)
 8011868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801186c:	461a      	mov	r2, r3
 801186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011870:	fbb3 f2f2 	udiv	r2, r3, r2
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	085b      	lsrs	r3, r3, #1
 801187a:	441a      	add	r2, r3
 801187c:	697b      	ldr	r3, [r7, #20]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	fbb2 f3f3 	udiv	r3, r2, r3
 8011884:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011888:	2b0f      	cmp	r3, #15
 801188a:	d909      	bls.n	80118a0 <UART_SetConfig+0xc9c>
 801188c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011892:	d205      	bcs.n	80118a0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	b29a      	uxth	r2, r3
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60da      	str	r2, [r3, #12]
 801189e:	e002      	b.n	80118a6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80118a0:	2301      	movs	r3, #1
 80118a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	2201      	movs	r2, #1
 80118aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	2201      	movs	r2, #1
 80118b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	2200      	movs	r2, #0
 80118ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	2200      	movs	r2, #0
 80118c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80118c2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3748      	adds	r7, #72	; 0x48
 80118ca:	46bd      	mov	sp, r7
 80118cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118d0:	03d09000 	.word	0x03d09000
 80118d4:	003d0900 	.word	0x003d0900
 80118d8:	080185a4 	.word	0x080185a4

080118dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118dc:	b480      	push	{r7}
 80118de:	b083      	sub	sp, #12
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00a      	beq.n	8011906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	430a      	orrs	r2, r1
 8011904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801190a:	f003 0302 	and.w	r3, r3, #2
 801190e:	2b00      	cmp	r3, #0
 8011910:	d00a      	beq.n	8011928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	430a      	orrs	r2, r1
 8011926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801192c:	f003 0304 	and.w	r3, r3, #4
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00a      	beq.n	801194a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	430a      	orrs	r2, r1
 8011948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801194e:	f003 0308 	and.w	r3, r3, #8
 8011952:	2b00      	cmp	r3, #0
 8011954:	d00a      	beq.n	801196c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	430a      	orrs	r2, r1
 801196a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011970:	f003 0310 	and.w	r3, r3, #16
 8011974:	2b00      	cmp	r3, #0
 8011976:	d00a      	beq.n	801198e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	689b      	ldr	r3, [r3, #8]
 801197e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	430a      	orrs	r2, r1
 801198c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011992:	f003 0320 	and.w	r3, r3, #32
 8011996:	2b00      	cmp	r3, #0
 8011998:	d00a      	beq.n	80119b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	689b      	ldr	r3, [r3, #8]
 80119a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	430a      	orrs	r2, r1
 80119ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d01a      	beq.n	80119f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	685b      	ldr	r3, [r3, #4]
 80119c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	430a      	orrs	r2, r1
 80119d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119da:	d10a      	bne.n	80119f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00a      	beq.n	8011a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	430a      	orrs	r2, r1
 8011a12:	605a      	str	r2, [r3, #4]
  }
}
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b098      	sub	sp, #96	; 0x60
 8011a24:	af02      	add	r7, sp, #8
 8011a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a30:	f7f2 f822 	bl	8003a78 <HAL_GetTick>
 8011a34:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	f003 0308 	and.w	r3, r3, #8
 8011a40:	2b08      	cmp	r3, #8
 8011a42:	d12f      	bne.n	8011aa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f000 f88e 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d022      	beq.n	8011aa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a66:	e853 3f00 	ldrex	r3, [r3]
 8011a6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a72:	653b      	str	r3, [r7, #80]	; 0x50
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8011a7e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a84:	e841 2300 	strex	r3, r2, [r1]
 8011a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1e6      	bne.n	8011a5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2220      	movs	r2, #32
 8011a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011aa0:	2303      	movs	r3, #3
 8011aa2:	e063      	b.n	8011b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	f003 0304 	and.w	r3, r3, #4
 8011aae:	2b04      	cmp	r3, #4
 8011ab0:	d149      	bne.n	8011b46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011ab2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ab6:	9300      	str	r3, [sp, #0]
 8011ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aba:	2200      	movs	r2, #0
 8011abc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f000 f857 	bl	8011b74 <UART_WaitOnFlagUntilTimeout>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d03c      	beq.n	8011b46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad4:	e853 3f00 	ldrex	r3, [r3]
 8011ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8011ada:	6a3b      	ldr	r3, [r7, #32]
 8011adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011aea:	633b      	str	r3, [r7, #48]	; 0x30
 8011aec:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011af2:	e841 2300 	strex	r3, r2, [r1]
 8011af6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d1e6      	bne.n	8011acc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	3308      	adds	r3, #8
 8011b04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	e853 3f00 	ldrex	r3, [r3]
 8011b0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f023 0301 	bic.w	r3, r3, #1
 8011b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	3308      	adds	r3, #8
 8011b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b1e:	61fa      	str	r2, [r7, #28]
 8011b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b22:	69b9      	ldr	r1, [r7, #24]
 8011b24:	69fa      	ldr	r2, [r7, #28]
 8011b26:	e841 2300 	strex	r3, r2, [r1]
 8011b2a:	617b      	str	r3, [r7, #20]
   return(result);
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1e5      	bne.n	8011afe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2220      	movs	r2, #32
 8011b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b42:	2303      	movs	r3, #3
 8011b44:	e012      	b.n	8011b6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2220      	movs	r2, #32
 8011b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	2220      	movs	r2, #32
 8011b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2200      	movs	r2, #0
 8011b5a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	2200      	movs	r2, #0
 8011b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3758      	adds	r7, #88	; 0x58
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b084      	sub	sp, #16
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	603b      	str	r3, [r7, #0]
 8011b80:	4613      	mov	r3, r2
 8011b82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b84:	e049      	b.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8c:	d045      	beq.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b8e:	f7f1 ff73 	bl	8003a78 <HAL_GetTick>
 8011b92:	4602      	mov	r2, r0
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	69ba      	ldr	r2, [r7, #24]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d302      	bcc.n	8011ba4 <UART_WaitOnFlagUntilTimeout+0x30>
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d101      	bne.n	8011ba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011ba4:	2303      	movs	r3, #3
 8011ba6:	e048      	b.n	8011c3a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	f003 0304 	and.w	r3, r3, #4
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d031      	beq.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	69db      	ldr	r3, [r3, #28]
 8011bbc:	f003 0308 	and.w	r3, r3, #8
 8011bc0:	2b08      	cmp	r3, #8
 8011bc2:	d110      	bne.n	8011be6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	2208      	movs	r2, #8
 8011bca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f000 f839 	bl	8011c44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	2208      	movs	r2, #8
 8011bd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2200      	movs	r2, #0
 8011bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011be2:	2301      	movs	r3, #1
 8011be4:	e029      	b.n	8011c3a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	69db      	ldr	r3, [r3, #28]
 8011bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bf4:	d111      	bne.n	8011c1a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bf6:	68fb      	ldr	r3, [r7, #12]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 f81f 	bl	8011c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2220      	movs	r2, #32
 8011c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2200      	movs	r2, #0
 8011c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011c16:	2303      	movs	r3, #3
 8011c18:	e00f      	b.n	8011c3a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	69da      	ldr	r2, [r3, #28]
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	4013      	ands	r3, r2
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	bf0c      	ite	eq
 8011c2a:	2301      	moveq	r3, #1
 8011c2c:	2300      	movne	r3, #0
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	461a      	mov	r2, r3
 8011c32:	79fb      	ldrb	r3, [r7, #7]
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d0a6      	beq.n	8011b86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c38:	2300      	movs	r3, #0
}
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	3710      	adds	r7, #16
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
	...

08011c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c44:	b480      	push	{r7}
 8011c46:	b095      	sub	sp, #84	; 0x54
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c54:	e853 3f00 	ldrex	r3, [r3]
 8011c58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	461a      	mov	r2, r3
 8011c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c6a:	643b      	str	r3, [r7, #64]	; 0x40
 8011c6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c72:	e841 2300 	strex	r3, r2, [r1]
 8011c76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1e6      	bne.n	8011c4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3308      	adds	r3, #8
 8011c84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c86:	6a3b      	ldr	r3, [r7, #32]
 8011c88:	e853 3f00 	ldrex	r3, [r3]
 8011c8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c8e:	69fa      	ldr	r2, [r7, #28]
 8011c90:	4b1e      	ldr	r3, [pc, #120]	; (8011d0c <UART_EndRxTransfer+0xc8>)
 8011c92:	4013      	ands	r3, r2
 8011c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	3308      	adds	r3, #8
 8011c9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ca0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ca6:	e841 2300 	strex	r3, r2, [r1]
 8011caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1e5      	bne.n	8011c7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d118      	bne.n	8011cec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	e853 3f00 	ldrex	r3, [r3]
 8011cc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	f023 0310 	bic.w	r3, r3, #16
 8011cce:	647b      	str	r3, [r7, #68]	; 0x44
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cd8:	61bb      	str	r3, [r7, #24]
 8011cda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cdc:	6979      	ldr	r1, [r7, #20]
 8011cde:	69ba      	ldr	r2, [r7, #24]
 8011ce0:	e841 2300 	strex	r3, r2, [r1]
 8011ce4:	613b      	str	r3, [r7, #16]
   return(result);
 8011ce6:	693b      	ldr	r3, [r7, #16]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1e6      	bne.n	8011cba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2220      	movs	r2, #32
 8011cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011d00:	bf00      	nop
 8011d02:	3754      	adds	r7, #84	; 0x54
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr
 8011d0c:	effffffe 	.word	0xeffffffe

08011d10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011d10:	b480      	push	{r7}
 8011d12:	b085      	sub	sp, #20
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d101      	bne.n	8011d26 <HAL_UARTEx_DisableFifoMode+0x16>
 8011d22:	2302      	movs	r3, #2
 8011d24:	e027      	b.n	8011d76 <HAL_UARTEx_DisableFifoMode+0x66>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	2201      	movs	r2, #1
 8011d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2224      	movs	r2, #36	; 0x24
 8011d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f022 0201 	bic.w	r2, r2, #1
 8011d4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	68fa      	ldr	r2, [r7, #12]
 8011d62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2220      	movs	r2, #32
 8011d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b084      	sub	sp, #16
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d92:	2b01      	cmp	r3, #1
 8011d94:	d101      	bne.n	8011d9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d96:	2302      	movs	r3, #2
 8011d98:	e02d      	b.n	8011df6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2201      	movs	r2, #1
 8011d9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2224      	movs	r2, #36	; 0x24
 8011da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	f022 0201 	bic.w	r2, r2, #1
 8011dc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	683a      	ldr	r2, [r7, #0]
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 f850 	bl	8011e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2220      	movs	r2, #32
 8011de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b084      	sub	sp, #16
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	6078      	str	r0, [r7, #4]
 8011e06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d101      	bne.n	8011e16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011e12:	2302      	movs	r3, #2
 8011e14:	e02d      	b.n	8011e72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2224      	movs	r2, #36	; 0x24
 8011e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	f022 0201 	bic.w	r2, r2, #1
 8011e3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	683a      	ldr	r2, [r7, #0]
 8011e4e:	430a      	orrs	r2, r1
 8011e50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e52:	6878      	ldr	r0, [r7, #4]
 8011e54:	f000 f812 	bl	8011e7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2220      	movs	r2, #32
 8011e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
	...

08011e7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d108      	bne.n	8011e9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2201      	movs	r2, #1
 8011e98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e9c:	e031      	b.n	8011f02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e9e:	2310      	movs	r3, #16
 8011ea0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ea2:	2310      	movs	r3, #16
 8011ea4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	689b      	ldr	r3, [r3, #8]
 8011eac:	0e5b      	lsrs	r3, r3, #25
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	f003 0307 	and.w	r3, r3, #7
 8011eb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	689b      	ldr	r3, [r3, #8]
 8011ebc:	0f5b      	lsrs	r3, r3, #29
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	f003 0307 	and.w	r3, r3, #7
 8011ec4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ec6:	7bbb      	ldrb	r3, [r7, #14]
 8011ec8:	7b3a      	ldrb	r2, [r7, #12]
 8011eca:	4911      	ldr	r1, [pc, #68]	; (8011f10 <UARTEx_SetNbDataToProcess+0x94>)
 8011ecc:	5c8a      	ldrb	r2, [r1, r2]
 8011ece:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011ed2:	7b3a      	ldrb	r2, [r7, #12]
 8011ed4:	490f      	ldr	r1, [pc, #60]	; (8011f14 <UARTEx_SetNbDataToProcess+0x98>)
 8011ed6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ed8:	fb93 f3f2 	sdiv	r3, r3, r2
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
 8011ee6:	7b7a      	ldrb	r2, [r7, #13]
 8011ee8:	4909      	ldr	r1, [pc, #36]	; (8011f10 <UARTEx_SetNbDataToProcess+0x94>)
 8011eea:	5c8a      	ldrb	r2, [r1, r2]
 8011eec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ef0:	7b7a      	ldrb	r2, [r7, #13]
 8011ef2:	4908      	ldr	r1, [pc, #32]	; (8011f14 <UARTEx_SetNbDataToProcess+0x98>)
 8011ef4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ef6:	fb93 f3f2 	sdiv	r3, r3, r2
 8011efa:	b29a      	uxth	r2, r3
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011f02:	bf00      	nop
 8011f04:	3714      	adds	r7, #20
 8011f06:	46bd      	mov	sp, r7
 8011f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0c:	4770      	bx	lr
 8011f0e:	bf00      	nop
 8011f10:	080185bc 	.word	0x080185bc
 8011f14:	080185c4 	.word	0x080185c4

08011f18 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011f18:	b084      	sub	sp, #16
 8011f1a:	b480      	push	{r7}
 8011f1c:	b085      	sub	sp, #20
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
 8011f22:	f107 001c 	add.w	r0, r7, #28
 8011f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f32:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f36:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f3a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f3e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	685a      	ldr	r2, [r3, #4]
 8011f4a:	4b07      	ldr	r3, [pc, #28]	; (8011f68 <SDMMC_Init+0x50>)
 8011f4c:	4013      	ands	r3, r2
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	431a      	orrs	r2, r3
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3714      	adds	r7, #20
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	b004      	add	sp, #16
 8011f64:	4770      	bx	lr
 8011f66:	bf00      	nop
 8011f68:	ffc02c00 	.word	0xffc02c00

08011f6c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	370c      	adds	r7, #12
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f84:	4770      	bx	lr

08011f86 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f86:	b480      	push	{r7}
 8011f88:	b083      	sub	sp, #12
 8011f8a:	af00      	add	r7, sp, #0
 8011f8c:	6078      	str	r0, [r7, #4]
 8011f8e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f9a:	2300      	movs	r3, #0
}
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	370c      	adds	r7, #12
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa6:	4770      	bx	lr

08011fa8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011fa8:	b480      	push	{r7}
 8011faa:	b083      	sub	sp, #12
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	f043 0203 	orr.w	r2, r3, #3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011fbc:	2300      	movs	r3, #0
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	370c      	adds	r7, #12
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fca:	b480      	push	{r7}
 8011fcc:	b083      	sub	sp, #12
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f003 0303 	and.w	r3, r3, #3
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	370c      	adds	r7, #12
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
	...

08011fe8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b085      	sub	sp, #20
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011ffe:	683b      	ldr	r3, [r7, #0]
 8012000:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012006:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 801200c:	431a      	orrs	r2, r3
                       Command->CPSM);
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012012:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	4313      	orrs	r3, r2
 8012018:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	68da      	ldr	r2, [r3, #12]
 801201e:	4b06      	ldr	r3, [pc, #24]	; (8012038 <SDMMC_SendCommand+0x50>)
 8012020:	4013      	ands	r3, r2
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	431a      	orrs	r2, r3
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801202a:	2300      	movs	r3, #0
}
 801202c:	4618      	mov	r0, r3
 801202e:	3714      	adds	r7, #20
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	fffee0c0 	.word	0xfffee0c0

0801203c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801203c:	b480      	push	{r7}
 801203e:	b083      	sub	sp, #12
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	691b      	ldr	r3, [r3, #16]
 8012048:	b2db      	uxtb	r3, r3
}
 801204a:	4618      	mov	r0, r3
 801204c:	370c      	adds	r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012054:	4770      	bx	lr

08012056 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012056:	b480      	push	{r7}
 8012058:	b085      	sub	sp, #20
 801205a:	af00      	add	r7, sp, #0
 801205c:	6078      	str	r0, [r7, #4]
 801205e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	3314      	adds	r3, #20
 8012064:	461a      	mov	r2, r3
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	4413      	add	r3, r2
 801206a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3714      	adds	r7, #20
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr

0801207c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 801207c:	b480      	push	{r7}
 801207e:	b085      	sub	sp, #20
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
 8012084:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012086:	2300      	movs	r3, #0
 8012088:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801208a:	683b      	ldr	r3, [r7, #0]
 801208c:	681a      	ldr	r2, [r3, #0]
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	685a      	ldr	r2, [r3, #4]
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120a2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80120a4:	683b      	ldr	r3, [r7, #0]
 80120a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80120a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80120ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	4313      	orrs	r3, r2
 80120b4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	431a      	orrs	r2, r3
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80120c6:	2300      	movs	r3, #0

}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3714      	adds	r7, #20
 80120cc:	46bd      	mov	sp, r7
 80120ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d2:	4770      	bx	lr

080120d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
 80120dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120de:	683b      	ldr	r3, [r7, #0]
 80120e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120e2:	2310      	movs	r3, #16
 80120e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ec:	2300      	movs	r3, #0
 80120ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120f6:	f107 0308 	add.w	r3, r7, #8
 80120fa:	4619      	mov	r1, r3
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	f7ff ff73 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012102:	f241 3288 	movw	r2, #5000	; 0x1388
 8012106:	2110      	movs	r1, #16
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f000 fa5f 	bl	80125cc <SDMMC_GetCmdResp1>
 801210e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012110:	69fb      	ldr	r3, [r7, #28]
}
 8012112:	4618      	mov	r0, r3
 8012114:	3720      	adds	r7, #32
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}

0801211a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801211a:	b580      	push	{r7, lr}
 801211c:	b088      	sub	sp, #32
 801211e:	af00      	add	r7, sp, #0
 8012120:	6078      	str	r0, [r7, #4]
 8012122:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012128:	2311      	movs	r3, #17
 801212a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012132:	2300      	movs	r3, #0
 8012134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801213a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801213c:	f107 0308 	add.w	r3, r7, #8
 8012140:	4619      	mov	r1, r3
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f7ff ff50 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012148:	f241 3288 	movw	r2, #5000	; 0x1388
 801214c:	2111      	movs	r1, #17
 801214e:	6878      	ldr	r0, [r7, #4]
 8012150:	f000 fa3c 	bl	80125cc <SDMMC_GetCmdResp1>
 8012154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012156:	69fb      	ldr	r3, [r7, #28]
}
 8012158:	4618      	mov	r0, r3
 801215a:	3720      	adds	r7, #32
 801215c:	46bd      	mov	sp, r7
 801215e:	bd80      	pop	{r7, pc}

08012160 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b088      	sub	sp, #32
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
 8012168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801216e:	2312      	movs	r3, #18
 8012170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012178:	2300      	movs	r3, #0
 801217a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012180:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012182:	f107 0308 	add.w	r3, r7, #8
 8012186:	4619      	mov	r1, r3
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	f7ff ff2d 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801218e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012192:	2112      	movs	r1, #18
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 fa19 	bl	80125cc <SDMMC_GetCmdResp1>
 801219a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801219c:	69fb      	ldr	r3, [r7, #28]
}
 801219e:	4618      	mov	r0, r3
 80121a0:	3720      	adds	r7, #32
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}

080121a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121a6:	b580      	push	{r7, lr}
 80121a8:	b088      	sub	sp, #32
 80121aa:	af00      	add	r7, sp, #0
 80121ac:	6078      	str	r0, [r7, #4]
 80121ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80121b4:	2318      	movs	r3, #24
 80121b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121be:	2300      	movs	r3, #0
 80121c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121c8:	f107 0308 	add.w	r3, r7, #8
 80121cc:	4619      	mov	r1, r3
 80121ce:	6878      	ldr	r0, [r7, #4]
 80121d0:	f7ff ff0a 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80121d8:	2118      	movs	r1, #24
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f000 f9f6 	bl	80125cc <SDMMC_GetCmdResp1>
 80121e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121e2:	69fb      	ldr	r3, [r7, #28]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3720      	adds	r7, #32
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b088      	sub	sp, #32
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80121fa:	2319      	movs	r3, #25
 80121fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012204:	2300      	movs	r3, #0
 8012206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801220c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801220e:	f107 0308 	add.w	r3, r7, #8
 8012212:	4619      	mov	r1, r3
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff fee7 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801221a:	f241 3288 	movw	r2, #5000	; 0x1388
 801221e:	2119      	movs	r1, #25
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f000 f9d3 	bl	80125cc <SDMMC_GetCmdResp1>
 8012226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012228:	69fb      	ldr	r3, [r7, #28]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3720      	adds	r7, #32
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
	...

08012234 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b088      	sub	sp, #32
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801223c:	2300      	movs	r3, #0
 801223e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012240:	230c      	movs	r3, #12
 8012242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012244:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801224a:	2300      	movs	r3, #0
 801224c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801224e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012252:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801226c:	f107 0308 	add.w	r3, r7, #8
 8012270:	4619      	mov	r1, r3
 8012272:	6878      	ldr	r0, [r7, #4]
 8012274:	f7ff feb8 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012278:	4a0b      	ldr	r2, [pc, #44]	; (80122a8 <SDMMC_CmdStopTransfer+0x74>)
 801227a:	210c      	movs	r1, #12
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f000 f9a5 	bl	80125cc <SDMMC_GetCmdResp1>
 8012282:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	68db      	ldr	r3, [r3, #12]
 8012288:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012296:	d101      	bne.n	801229c <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012298:	2300      	movs	r3, #0
 801229a:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 801229c:	69fb      	ldr	r3, [r7, #28]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	3720      	adds	r7, #32
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}
 80122a6:	bf00      	nop
 80122a8:	05f5e100 	.word	0x05f5e100

080122ac <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b088      	sub	sp, #32
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
 80122b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80122ba:	2307      	movs	r3, #7
 80122bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122c4:	2300      	movs	r3, #0
 80122c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122ce:	f107 0308 	add.w	r3, r7, #8
 80122d2:	4619      	mov	r1, r3
 80122d4:	6878      	ldr	r0, [r7, #4]
 80122d6:	f7ff fe87 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122da:	f241 3288 	movw	r2, #5000	; 0x1388
 80122de:	2107      	movs	r1, #7
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f973 	bl	80125cc <SDMMC_GetCmdResp1>
 80122e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122e8:	69fb      	ldr	r3, [r7, #28]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3720      	adds	r7, #32
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b088      	sub	sp, #32
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80122fa:	2300      	movs	r3, #0
 80122fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80122fe:	2300      	movs	r3, #0
 8012300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012302:	2300      	movs	r3, #0
 8012304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012306:	2300      	movs	r3, #0
 8012308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801230e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012310:	f107 0308 	add.w	r3, r7, #8
 8012314:	4619      	mov	r1, r3
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f7ff fe66 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 fb97 	bl	8012a50 <SDMMC_GetCmdError>
 8012322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012324:	69fb      	ldr	r3, [r7, #28]
}
 8012326:	4618      	mov	r0, r3
 8012328:	3720      	adds	r7, #32
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b088      	sub	sp, #32
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012336:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801233a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801233c:	2308      	movs	r3, #8
 801233e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012346:	2300      	movs	r3, #0
 8012348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801234a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801234e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012350:	f107 0308 	add.w	r3, r7, #8
 8012354:	4619      	mov	r1, r3
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ff fe46 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 801235c:	6878      	ldr	r0, [r7, #4]
 801235e:	f000 fb29 	bl	80129b4 <SDMMC_GetCmdResp7>
 8012362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012364:	69fb      	ldr	r3, [r7, #28]
}
 8012366:	4618      	mov	r0, r3
 8012368:	3720      	adds	r7, #32
 801236a:	46bd      	mov	sp, r7
 801236c:	bd80      	pop	{r7, pc}

0801236e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801236e:	b580      	push	{r7, lr}
 8012370:	b088      	sub	sp, #32
 8012372:	af00      	add	r7, sp, #0
 8012374:	6078      	str	r0, [r7, #4]
 8012376:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012378:	683b      	ldr	r3, [r7, #0]
 801237a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801237c:	2337      	movs	r3, #55	; 0x37
 801237e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012386:	2300      	movs	r3, #0
 8012388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801238a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801238e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012390:	f107 0308 	add.w	r3, r7, #8
 8012394:	4619      	mov	r1, r3
 8012396:	6878      	ldr	r0, [r7, #4]
 8012398:	f7ff fe26 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 801239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80123a0:	2137      	movs	r1, #55	; 0x37
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 f912 	bl	80125cc <SDMMC_GetCmdResp1>
 80123a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123aa:	69fb      	ldr	r3, [r7, #28]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80123c2:	2329      	movs	r3, #41	; 0x29
 80123c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123cc:	2300      	movs	r3, #0
 80123ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123d6:	f107 0308 	add.w	r3, r7, #8
 80123da:	4619      	mov	r1, r3
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7ff fe03 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fa2e 	bl	8012844 <SDMMC_GetCmdResp3>
 80123e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123ea:	69fb      	ldr	r3, [r7, #28]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	3720      	adds	r7, #32
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b088      	sub	sp, #32
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012402:	2306      	movs	r3, #6
 8012404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012406:	f44f 7380 	mov.w	r3, #256	; 0x100
 801240a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801240c:	2300      	movs	r3, #0
 801240e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012416:	f107 0308 	add.w	r3, r7, #8
 801241a:	4619      	mov	r1, r3
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fde3 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012422:	f241 3288 	movw	r2, #5000	; 0x1388
 8012426:	2106      	movs	r1, #6
 8012428:	6878      	ldr	r0, [r7, #4]
 801242a:	f000 f8cf 	bl	80125cc <SDMMC_GetCmdResp1>
 801242e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012430:	69fb      	ldr	r3, [r7, #28]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3720      	adds	r7, #32
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b088      	sub	sp, #32
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012442:	2300      	movs	r3, #0
 8012444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012446:	2333      	movs	r3, #51	; 0x33
 8012448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801244a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801244e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012450:	2300      	movs	r3, #0
 8012452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012458:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801245a:	f107 0308 	add.w	r3, r7, #8
 801245e:	4619      	mov	r1, r3
 8012460:	6878      	ldr	r0, [r7, #4]
 8012462:	f7ff fdc1 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012466:	f241 3288 	movw	r2, #5000	; 0x1388
 801246a:	2133      	movs	r1, #51	; 0x33
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f000 f8ad 	bl	80125cc <SDMMC_GetCmdResp1>
 8012472:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012474:	69fb      	ldr	r3, [r7, #28]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3720      	adds	r7, #32
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b088      	sub	sp, #32
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012486:	2300      	movs	r3, #0
 8012488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801248a:	2302      	movs	r3, #2
 801248c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801248e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012492:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012494:	2300      	movs	r3, #0
 8012496:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801249c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801249e:	f107 0308 	add.w	r3, r7, #8
 80124a2:	4619      	mov	r1, r3
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7ff fd9f 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 f980 	bl	80127b0 <SDMMC_GetCmdResp2>
 80124b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124b2:	69fb      	ldr	r3, [r7, #28]
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80124bc:	b580      	push	{r7, lr}
 80124be:	b088      	sub	sp, #32
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124ca:	2309      	movs	r3, #9
 80124cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124d4:	2300      	movs	r3, #0
 80124d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124de:	f107 0308 	add.w	r3, r7, #8
 80124e2:	4619      	mov	r1, r3
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7ff fd7f 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 f960 	bl	80127b0 <SDMMC_GetCmdResp2>
 80124f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124f2:	69fb      	ldr	r3, [r7, #28]
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3720      	adds	r7, #32
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b088      	sub	sp, #32
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
 8012504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012506:	2300      	movs	r3, #0
 8012508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801250a:	2303      	movs	r3, #3
 801250c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801250e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801251c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801251e:	f107 0308 	add.w	r3, r7, #8
 8012522:	4619      	mov	r1, r3
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff fd5f 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801252a:	683a      	ldr	r2, [r7, #0]
 801252c:	2103      	movs	r1, #3
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 f9c8 	bl	80128c4 <SDMMC_GetCmdResp6>
 8012534:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012536:	69fb      	ldr	r3, [r7, #28]
}
 8012538:	4618      	mov	r0, r3
 801253a:	3720      	adds	r7, #32
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	b088      	sub	sp, #32
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
 8012548:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801254e:	230d      	movs	r3, #13
 8012550:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012552:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012556:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012558:	2300      	movs	r3, #0
 801255a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801255c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012560:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012562:	f107 0308 	add.w	r3, r7, #8
 8012566:	4619      	mov	r1, r3
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7ff fd3d 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012572:	210d      	movs	r1, #13
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 f829 	bl	80125cc <SDMMC_GetCmdResp1>
 801257a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801257c:	69fb      	ldr	r3, [r7, #28]
}
 801257e:	4618      	mov	r0, r3
 8012580:	3720      	adds	r7, #32
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012586:	b580      	push	{r7, lr}
 8012588:	b088      	sub	sp, #32
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801258e:	2300      	movs	r3, #0
 8012590:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012592:	230d      	movs	r3, #13
 8012594:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012596:	f44f 7380 	mov.w	r3, #256	; 0x100
 801259a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801259c:	2300      	movs	r3, #0
 801259e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125a6:	f107 0308 	add.w	r3, r7, #8
 80125aa:	4619      	mov	r1, r3
 80125ac:	6878      	ldr	r0, [r7, #4]
 80125ae:	f7ff fd1b 	bl	8011fe8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80125b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80125b6:	210d      	movs	r1, #13
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f000 f807 	bl	80125cc <SDMMC_GetCmdResp1>
 80125be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125c0:	69fb      	ldr	r3, [r7, #28]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	3720      	adds	r7, #32
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
	...

080125cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b088      	sub	sp, #32
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	460b      	mov	r3, r1
 80125d6:	607a      	str	r2, [r7, #4]
 80125d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125da:	4b70      	ldr	r3, [pc, #448]	; (801279c <SDMMC_GetCmdResp1+0x1d0>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4a70      	ldr	r2, [pc, #448]	; (80127a0 <SDMMC_GetCmdResp1+0x1d4>)
 80125e0:	fba2 2303 	umull	r2, r3, r2, r3
 80125e4:	0a5a      	lsrs	r2, r3, #9
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	fb02 f303 	mul.w	r3, r2, r3
 80125ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80125ee:	69fb      	ldr	r3, [r7, #28]
 80125f0:	1e5a      	subs	r2, r3, #1
 80125f2:	61fa      	str	r2, [r7, #28]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d102      	bne.n	80125fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125fc:	e0c9      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012602:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012604:	69ba      	ldr	r2, [r7, #24]
 8012606:	4b67      	ldr	r3, [pc, #412]	; (80127a4 <SDMMC_GetCmdResp1+0x1d8>)
 8012608:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801260a:	2b00      	cmp	r3, #0
 801260c:	d0ef      	beq.n	80125ee <SDMMC_GetCmdResp1+0x22>
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1ea      	bne.n	80125ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801261c:	f003 0304 	and.w	r3, r3, #4
 8012620:	2b00      	cmp	r3, #0
 8012622:	d004      	beq.n	801262e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	2204      	movs	r2, #4
 8012628:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801262a:	2304      	movs	r3, #4
 801262c:	e0b1      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012632:	f003 0301 	and.w	r3, r3, #1
 8012636:	2b00      	cmp	r3, #0
 8012638:	d004      	beq.n	8012644 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	2201      	movs	r2, #1
 801263e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012640:	2301      	movs	r3, #1
 8012642:	e0a6      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	4a58      	ldr	r2, [pc, #352]	; (80127a8 <SDMMC_GetCmdResp1+0x1dc>)
 8012648:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801264a:	68f8      	ldr	r0, [r7, #12]
 801264c:	f7ff fcf6 	bl	801203c <SDMMC_GetCommandResponse>
 8012650:	4603      	mov	r3, r0
 8012652:	461a      	mov	r2, r3
 8012654:	7afb      	ldrb	r3, [r7, #11]
 8012656:	4293      	cmp	r3, r2
 8012658:	d001      	beq.n	801265e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801265a:	2301      	movs	r3, #1
 801265c:	e099      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801265e:	2100      	movs	r1, #0
 8012660:	68f8      	ldr	r0, [r7, #12]
 8012662:	f7ff fcf8 	bl	8012056 <SDMMC_GetResponse>
 8012666:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012668:	697a      	ldr	r2, [r7, #20]
 801266a:	4b50      	ldr	r3, [pc, #320]	; (80127ac <SDMMC_GetCmdResp1+0x1e0>)
 801266c:	4013      	ands	r3, r2
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012672:	2300      	movs	r3, #0
 8012674:	e08d      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	2b00      	cmp	r3, #0
 801267a:	da02      	bge.n	8012682 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801267c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012680:	e087      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012688:	2b00      	cmp	r3, #0
 801268a:	d001      	beq.n	8012690 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801268c:	2340      	movs	r3, #64	; 0x40
 801268e:	e080      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801269a:	2380      	movs	r3, #128	; 0x80
 801269c:	e079      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d002      	beq.n	80126ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80126a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126ac:	e071      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80126b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80126bc:	e069      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d002      	beq.n	80126ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126cc:	e061      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126dc:	e059      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d002      	beq.n	80126ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126ec:	e051      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d002      	beq.n	80126fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126fc:	e049      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012704:	2b00      	cmp	r3, #0
 8012706:	d002      	beq.n	801270e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801270c:	e041      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012714:	2b00      	cmp	r3, #0
 8012716:	d002      	beq.n	801271e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012718:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801271c:	e039      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012724:	2b00      	cmp	r3, #0
 8012726:	d002      	beq.n	801272e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012728:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801272c:	e031      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012738:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801273c:	e029      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012744:	2b00      	cmp	r3, #0
 8012746:	d002      	beq.n	801274e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012748:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801274c:	e021      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012758:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801275c:	e019      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012764:	2b00      	cmp	r3, #0
 8012766:	d002      	beq.n	801276e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012768:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801276c:	e011      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012774:	2b00      	cmp	r3, #0
 8012776:	d002      	beq.n	801277e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012778:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801277c:	e009      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	f003 0308 	and.w	r3, r3, #8
 8012784:	2b00      	cmp	r3, #0
 8012786:	d002      	beq.n	801278e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012788:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801278c:	e001      	b.n	8012792 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801278e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012792:	4618      	mov	r0, r3
 8012794:	3720      	adds	r7, #32
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}
 801279a:	bf00      	nop
 801279c:	24000000 	.word	0x24000000
 80127a0:	10624dd3 	.word	0x10624dd3
 80127a4:	00200045 	.word	0x00200045
 80127a8:	002000c5 	.word	0x002000c5
 80127ac:	fdffe008 	.word	0xfdffe008

080127b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80127b8:	4b1f      	ldr	r3, [pc, #124]	; (8012838 <SDMMC_GetCmdResp2+0x88>)
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	4a1f      	ldr	r2, [pc, #124]	; (801283c <SDMMC_GetCmdResp2+0x8c>)
 80127be:	fba2 2303 	umull	r2, r3, r2, r3
 80127c2:	0a5b      	lsrs	r3, r3, #9
 80127c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80127c8:	fb02 f303 	mul.w	r3, r2, r3
 80127cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	1e5a      	subs	r2, r3, #1
 80127d2:	60fa      	str	r2, [r7, #12]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d102      	bne.n	80127de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127dc:	e026      	b.n	801282c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d0ef      	beq.n	80127ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127ee:	68bb      	ldr	r3, [r7, #8]
 80127f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d1ea      	bne.n	80127ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127fc:	f003 0304 	and.w	r3, r3, #4
 8012800:	2b00      	cmp	r3, #0
 8012802:	d004      	beq.n	801280e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	2204      	movs	r2, #4
 8012808:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801280a:	2304      	movs	r3, #4
 801280c:	e00e      	b.n	801282c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012812:	f003 0301 	and.w	r3, r3, #1
 8012816:	2b00      	cmp	r3, #0
 8012818:	d004      	beq.n	8012824 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2201      	movs	r2, #1
 801281e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012820:	2301      	movs	r3, #1
 8012822:	e003      	b.n	801282c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4a06      	ldr	r2, [pc, #24]	; (8012840 <SDMMC_GetCmdResp2+0x90>)
 8012828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	3714      	adds	r7, #20
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr
 8012838:	24000000 	.word	0x24000000
 801283c:	10624dd3 	.word	0x10624dd3
 8012840:	002000c5 	.word	0x002000c5

08012844 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012844:	b480      	push	{r7}
 8012846:	b085      	sub	sp, #20
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801284c:	4b1a      	ldr	r3, [pc, #104]	; (80128b8 <SDMMC_GetCmdResp3+0x74>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a1a      	ldr	r2, [pc, #104]	; (80128bc <SDMMC_GetCmdResp3+0x78>)
 8012852:	fba2 2303 	umull	r2, r3, r2, r3
 8012856:	0a5b      	lsrs	r3, r3, #9
 8012858:	f241 3288 	movw	r2, #5000	; 0x1388
 801285c:	fb02 f303 	mul.w	r3, r2, r3
 8012860:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	1e5a      	subs	r2, r3, #1
 8012866:	60fa      	str	r2, [r7, #12]
 8012868:	2b00      	cmp	r3, #0
 801286a:	d102      	bne.n	8012872 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801286c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012870:	e01b      	b.n	80128aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012876:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012878:	68bb      	ldr	r3, [r7, #8]
 801287a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801287e:	2b00      	cmp	r3, #0
 8012880:	d0ef      	beq.n	8012862 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012882:	68bb      	ldr	r3, [r7, #8]
 8012884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012888:	2b00      	cmp	r3, #0
 801288a:	d1ea      	bne.n	8012862 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012890:	f003 0304 	and.w	r3, r3, #4
 8012894:	2b00      	cmp	r3, #0
 8012896:	d004      	beq.n	80128a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2204      	movs	r2, #4
 801289c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801289e:	2304      	movs	r3, #4
 80128a0:	e003      	b.n	80128aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	4a06      	ldr	r2, [pc, #24]	; (80128c0 <SDMMC_GetCmdResp3+0x7c>)
 80128a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80128a8:	2300      	movs	r3, #0
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3714      	adds	r7, #20
 80128ae:	46bd      	mov	sp, r7
 80128b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	24000000 	.word	0x24000000
 80128bc:	10624dd3 	.word	0x10624dd3
 80128c0:	002000c5 	.word	0x002000c5

080128c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	460b      	mov	r3, r1
 80128ce:	607a      	str	r2, [r7, #4]
 80128d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128d2:	4b35      	ldr	r3, [pc, #212]	; (80129a8 <SDMMC_GetCmdResp6+0xe4>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	4a35      	ldr	r2, [pc, #212]	; (80129ac <SDMMC_GetCmdResp6+0xe8>)
 80128d8:	fba2 2303 	umull	r2, r3, r2, r3
 80128dc:	0a5b      	lsrs	r3, r3, #9
 80128de:	f241 3288 	movw	r2, #5000	; 0x1388
 80128e2:	fb02 f303 	mul.w	r3, r2, r3
 80128e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	1e5a      	subs	r2, r3, #1
 80128ec:	61fa      	str	r2, [r7, #28]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d102      	bne.n	80128f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128f6:	e052      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128fc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012904:	2b00      	cmp	r3, #0
 8012906:	d0ef      	beq.n	80128e8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801290e:	2b00      	cmp	r3, #0
 8012910:	d1ea      	bne.n	80128e8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012916:	f003 0304 	and.w	r3, r3, #4
 801291a:	2b00      	cmp	r3, #0
 801291c:	d004      	beq.n	8012928 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2204      	movs	r2, #4
 8012922:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012924:	2304      	movs	r3, #4
 8012926:	e03a      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801292c:	f003 0301 	and.w	r3, r3, #1
 8012930:	2b00      	cmp	r3, #0
 8012932:	d004      	beq.n	801293e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2201      	movs	r2, #1
 8012938:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801293a:	2301      	movs	r3, #1
 801293c:	e02f      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801293e:	68f8      	ldr	r0, [r7, #12]
 8012940:	f7ff fb7c 	bl	801203c <SDMMC_GetCommandResponse>
 8012944:	4603      	mov	r3, r0
 8012946:	461a      	mov	r2, r3
 8012948:	7afb      	ldrb	r3, [r7, #11]
 801294a:	4293      	cmp	r3, r2
 801294c:	d001      	beq.n	8012952 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801294e:	2301      	movs	r3, #1
 8012950:	e025      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	4a16      	ldr	r2, [pc, #88]	; (80129b0 <SDMMC_GetCmdResp6+0xec>)
 8012956:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012958:	2100      	movs	r1, #0
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff fb7b 	bl	8012056 <SDMMC_GetResponse>
 8012960:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012968:	2b00      	cmp	r3, #0
 801296a:	d106      	bne.n	801297a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	0c1b      	lsrs	r3, r3, #16
 8012970:	b29a      	uxth	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012976:	2300      	movs	r3, #0
 8012978:	e011      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012980:	2b00      	cmp	r3, #0
 8012982:	d002      	beq.n	801298a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012988:	e009      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801298a:	697b      	ldr	r3, [r7, #20]
 801298c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012990:	2b00      	cmp	r3, #0
 8012992:	d002      	beq.n	801299a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012998:	e001      	b.n	801299e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801299a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3720      	adds	r7, #32
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	24000000 	.word	0x24000000
 80129ac:	10624dd3 	.word	0x10624dd3
 80129b0:	002000c5 	.word	0x002000c5

080129b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b085      	sub	sp, #20
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80129bc:	4b22      	ldr	r3, [pc, #136]	; (8012a48 <SDMMC_GetCmdResp7+0x94>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4a22      	ldr	r2, [pc, #136]	; (8012a4c <SDMMC_GetCmdResp7+0x98>)
 80129c2:	fba2 2303 	umull	r2, r3, r2, r3
 80129c6:	0a5b      	lsrs	r3, r3, #9
 80129c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80129cc:	fb02 f303 	mul.w	r3, r2, r3
 80129d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	60fa      	str	r2, [r7, #12]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d102      	bne.n	80129e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129e0:	e02c      	b.n	8012a3c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d0ef      	beq.n	80129d2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d1ea      	bne.n	80129d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a00:	f003 0304 	and.w	r3, r3, #4
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d004      	beq.n	8012a12 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2204      	movs	r2, #4
 8012a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a0e:	2304      	movs	r3, #4
 8012a10:	e014      	b.n	8012a3c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a16:	f003 0301 	and.w	r3, r3, #1
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d004      	beq.n	8012a28 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	2201      	movs	r2, #1
 8012a22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a24:	2301      	movs	r3, #1
 8012a26:	e009      	b.n	8012a3c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d002      	beq.n	8012a3a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2240      	movs	r2, #64	; 0x40
 8012a38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a3a:	2300      	movs	r3, #0

}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3714      	adds	r7, #20
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr
 8012a48:	24000000 	.word	0x24000000
 8012a4c:	10624dd3 	.word	0x10624dd3

08012a50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a50:	b480      	push	{r7}
 8012a52:	b085      	sub	sp, #20
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a58:	4b11      	ldr	r3, [pc, #68]	; (8012aa0 <SDMMC_GetCmdError+0x50>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a11      	ldr	r2, [pc, #68]	; (8012aa4 <SDMMC_GetCmdError+0x54>)
 8012a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8012a62:	0a5b      	lsrs	r3, r3, #9
 8012a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a68:	fb02 f303 	mul.w	r3, r2, r3
 8012a6c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	1e5a      	subs	r2, r3, #1
 8012a72:	60fa      	str	r2, [r7, #12]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d102      	bne.n	8012a7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a7c:	e009      	b.n	8012a92 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d0f1      	beq.n	8012a6e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4a06      	ldr	r2, [pc, #24]	; (8012aa8 <SDMMC_GetCmdError+0x58>)
 8012a8e:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a90:	2300      	movs	r3, #0
}
 8012a92:	4618      	mov	r0, r3
 8012a94:	3714      	adds	r7, #20
 8012a96:	46bd      	mov	sp, r7
 8012a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9c:	4770      	bx	lr
 8012a9e:	bf00      	nop
 8012aa0:	24000000 	.word	0x24000000
 8012aa4:	10624dd3 	.word	0x10624dd3
 8012aa8:	002000c5 	.word	0x002000c5

08012aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012aac:	b084      	sub	sp, #16
 8012aae:	b580      	push	{r7, lr}
 8012ab0:	b084      	sub	sp, #16
 8012ab2:	af00      	add	r7, sp, #0
 8012ab4:	6078      	str	r0, [r7, #4]
 8012ab6:	f107 001c 	add.w	r0, r7, #28
 8012aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d120      	bne.n	8012b06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	68da      	ldr	r2, [r3, #12]
 8012ad4:	4b2a      	ldr	r3, [pc, #168]	; (8012b80 <USB_CoreInit+0xd4>)
 8012ad6:	4013      	ands	r3, r2
 8012ad8:	687a      	ldr	r2, [r7, #4]
 8012ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aea:	2b01      	cmp	r3, #1
 8012aec:	d105      	bne.n	8012afa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	68db      	ldr	r3, [r3, #12]
 8012af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f001 faf8 	bl	80140f0 <USB_CoreReset>
 8012b00:	4603      	mov	r3, r0
 8012b02:	73fb      	strb	r3, [r7, #15]
 8012b04:	e01a      	b.n	8012b3c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f001 faec 	bl	80140f0 <USB_CoreReset>
 8012b18:	4603      	mov	r3, r0
 8012b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8012b2e:	e005      	b.n	8012b3c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d116      	bne.n	8012b70 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b50:	4b0c      	ldr	r3, [pc, #48]	; (8012b84 <USB_CoreInit+0xd8>)
 8012b52:	4313      	orrs	r3, r2
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	689b      	ldr	r3, [r3, #8]
 8012b5c:	f043 0206 	orr.w	r2, r3, #6
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	f043 0220 	orr.w	r2, r3, #32
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b7c:	b004      	add	sp, #16
 8012b7e:	4770      	bx	lr
 8012b80:	ffbdffbf 	.word	0xffbdffbf
 8012b84:	03ee0000 	.word	0x03ee0000

08012b88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b087      	sub	sp, #28
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	4613      	mov	r3, r2
 8012b94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012b96:	79fb      	ldrb	r3, [r7, #7]
 8012b98:	2b02      	cmp	r3, #2
 8012b9a:	d165      	bne.n	8012c68 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	4a41      	ldr	r2, [pc, #260]	; (8012ca4 <USB_SetTurnaroundTime+0x11c>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d906      	bls.n	8012bb2 <USB_SetTurnaroundTime+0x2a>
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	4a40      	ldr	r2, [pc, #256]	; (8012ca8 <USB_SetTurnaroundTime+0x120>)
 8012ba8:	4293      	cmp	r3, r2
 8012baa:	d202      	bcs.n	8012bb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012bac:	230f      	movs	r3, #15
 8012bae:	617b      	str	r3, [r7, #20]
 8012bb0:	e062      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	4a3c      	ldr	r2, [pc, #240]	; (8012ca8 <USB_SetTurnaroundTime+0x120>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d306      	bcc.n	8012bc8 <USB_SetTurnaroundTime+0x40>
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	4a3b      	ldr	r2, [pc, #236]	; (8012cac <USB_SetTurnaroundTime+0x124>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d202      	bcs.n	8012bc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012bc2:	230e      	movs	r3, #14
 8012bc4:	617b      	str	r3, [r7, #20]
 8012bc6:	e057      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	4a38      	ldr	r2, [pc, #224]	; (8012cac <USB_SetTurnaroundTime+0x124>)
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d306      	bcc.n	8012bde <USB_SetTurnaroundTime+0x56>
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	4a37      	ldr	r2, [pc, #220]	; (8012cb0 <USB_SetTurnaroundTime+0x128>)
 8012bd4:	4293      	cmp	r3, r2
 8012bd6:	d202      	bcs.n	8012bde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012bd8:	230d      	movs	r3, #13
 8012bda:	617b      	str	r3, [r7, #20]
 8012bdc:	e04c      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	4a33      	ldr	r2, [pc, #204]	; (8012cb0 <USB_SetTurnaroundTime+0x128>)
 8012be2:	4293      	cmp	r3, r2
 8012be4:	d306      	bcc.n	8012bf4 <USB_SetTurnaroundTime+0x6c>
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	4a32      	ldr	r2, [pc, #200]	; (8012cb4 <USB_SetTurnaroundTime+0x12c>)
 8012bea:	4293      	cmp	r3, r2
 8012bec:	d802      	bhi.n	8012bf4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012bee:	230c      	movs	r3, #12
 8012bf0:	617b      	str	r3, [r7, #20]
 8012bf2:	e041      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012bf4:	68bb      	ldr	r3, [r7, #8]
 8012bf6:	4a2f      	ldr	r2, [pc, #188]	; (8012cb4 <USB_SetTurnaroundTime+0x12c>)
 8012bf8:	4293      	cmp	r3, r2
 8012bfa:	d906      	bls.n	8012c0a <USB_SetTurnaroundTime+0x82>
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	4a2e      	ldr	r2, [pc, #184]	; (8012cb8 <USB_SetTurnaroundTime+0x130>)
 8012c00:	4293      	cmp	r3, r2
 8012c02:	d802      	bhi.n	8012c0a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012c04:	230b      	movs	r3, #11
 8012c06:	617b      	str	r3, [r7, #20]
 8012c08:	e036      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012c0a:	68bb      	ldr	r3, [r7, #8]
 8012c0c:	4a2a      	ldr	r2, [pc, #168]	; (8012cb8 <USB_SetTurnaroundTime+0x130>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d906      	bls.n	8012c20 <USB_SetTurnaroundTime+0x98>
 8012c12:	68bb      	ldr	r3, [r7, #8]
 8012c14:	4a29      	ldr	r2, [pc, #164]	; (8012cbc <USB_SetTurnaroundTime+0x134>)
 8012c16:	4293      	cmp	r3, r2
 8012c18:	d802      	bhi.n	8012c20 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012c1a:	230a      	movs	r3, #10
 8012c1c:	617b      	str	r3, [r7, #20]
 8012c1e:	e02b      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	4a26      	ldr	r2, [pc, #152]	; (8012cbc <USB_SetTurnaroundTime+0x134>)
 8012c24:	4293      	cmp	r3, r2
 8012c26:	d906      	bls.n	8012c36 <USB_SetTurnaroundTime+0xae>
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	4a25      	ldr	r2, [pc, #148]	; (8012cc0 <USB_SetTurnaroundTime+0x138>)
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	d202      	bcs.n	8012c36 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c30:	2309      	movs	r3, #9
 8012c32:	617b      	str	r3, [r7, #20]
 8012c34:	e020      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c36:	68bb      	ldr	r3, [r7, #8]
 8012c38:	4a21      	ldr	r2, [pc, #132]	; (8012cc0 <USB_SetTurnaroundTime+0x138>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d306      	bcc.n	8012c4c <USB_SetTurnaroundTime+0xc4>
 8012c3e:	68bb      	ldr	r3, [r7, #8]
 8012c40:	4a20      	ldr	r2, [pc, #128]	; (8012cc4 <USB_SetTurnaroundTime+0x13c>)
 8012c42:	4293      	cmp	r3, r2
 8012c44:	d802      	bhi.n	8012c4c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c46:	2308      	movs	r3, #8
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	e015      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	4a1d      	ldr	r2, [pc, #116]	; (8012cc4 <USB_SetTurnaroundTime+0x13c>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d906      	bls.n	8012c62 <USB_SetTurnaroundTime+0xda>
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	4a1c      	ldr	r2, [pc, #112]	; (8012cc8 <USB_SetTurnaroundTime+0x140>)
 8012c58:	4293      	cmp	r3, r2
 8012c5a:	d202      	bcs.n	8012c62 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c5c:	2307      	movs	r3, #7
 8012c5e:	617b      	str	r3, [r7, #20]
 8012c60:	e00a      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c62:	2306      	movs	r3, #6
 8012c64:	617b      	str	r3, [r7, #20]
 8012c66:	e007      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c68:	79fb      	ldrb	r3, [r7, #7]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d102      	bne.n	8012c74 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c6e:	2309      	movs	r3, #9
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	e001      	b.n	8012c78 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c74:	2309      	movs	r3, #9
 8012c76:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	68da      	ldr	r2, [r3, #12]
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	029b      	lsls	r3, r3, #10
 8012c8c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c90:	431a      	orrs	r2, r3
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c96:	2300      	movs	r3, #0
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	371c      	adds	r7, #28
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr
 8012ca4:	00d8acbf 	.word	0x00d8acbf
 8012ca8:	00e4e1c0 	.word	0x00e4e1c0
 8012cac:	00f42400 	.word	0x00f42400
 8012cb0:	01067380 	.word	0x01067380
 8012cb4:	011a499f 	.word	0x011a499f
 8012cb8:	01312cff 	.word	0x01312cff
 8012cbc:	014ca43f 	.word	0x014ca43f
 8012cc0:	016e3600 	.word	0x016e3600
 8012cc4:	01a6ab1f 	.word	0x01a6ab1f
 8012cc8:	01e84800 	.word	0x01e84800

08012ccc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ccc:	b480      	push	{r7}
 8012cce:	b083      	sub	sp, #12
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	689b      	ldr	r3, [r3, #8]
 8012cd8:	f043 0201 	orr.w	r2, r3, #1
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012ce0:	2300      	movs	r3, #0
}
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	370c      	adds	r7, #12
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cec:	4770      	bx	lr

08012cee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cee:	b480      	push	{r7}
 8012cf0:	b083      	sub	sp, #12
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	689b      	ldr	r3, [r3, #8]
 8012cfa:	f023 0201 	bic.w	r2, r3, #1
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012d02:	2300      	movs	r3, #0
}
 8012d04:	4618      	mov	r0, r3
 8012d06:	370c      	adds	r7, #12
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0e:	4770      	bx	lr

08012d10 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b084      	sub	sp, #16
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
 8012d18:	460b      	mov	r3, r1
 8012d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d2c:	78fb      	ldrb	r3, [r7, #3]
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d115      	bne.n	8012d5e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d3e:	2001      	movs	r0, #1
 8012d40:	f7f0 fea6 	bl	8003a90 <HAL_Delay>
      ms++;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	3301      	adds	r3, #1
 8012d48:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f001 f93f 	bl	8013fce <USB_GetMode>
 8012d50:	4603      	mov	r3, r0
 8012d52:	2b01      	cmp	r3, #1
 8012d54:	d01e      	beq.n	8012d94 <USB_SetCurrentMode+0x84>
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	2b31      	cmp	r3, #49	; 0x31
 8012d5a:	d9f0      	bls.n	8012d3e <USB_SetCurrentMode+0x2e>
 8012d5c:	e01a      	b.n	8012d94 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d5e:	78fb      	ldrb	r3, [r7, #3]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d115      	bne.n	8012d90 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d70:	2001      	movs	r0, #1
 8012d72:	f7f0 fe8d 	bl	8003a90 <HAL_Delay>
      ms++;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	3301      	adds	r3, #1
 8012d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d7c:	6878      	ldr	r0, [r7, #4]
 8012d7e:	f001 f926 	bl	8013fce <USB_GetMode>
 8012d82:	4603      	mov	r3, r0
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d005      	beq.n	8012d94 <USB_SetCurrentMode+0x84>
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b31      	cmp	r3, #49	; 0x31
 8012d8c:	d9f0      	bls.n	8012d70 <USB_SetCurrentMode+0x60>
 8012d8e:	e001      	b.n	8012d94 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d90:	2301      	movs	r3, #1
 8012d92:	e005      	b.n	8012da0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2b32      	cmp	r3, #50	; 0x32
 8012d98:	d101      	bne.n	8012d9e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	e000      	b.n	8012da0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d9e:	2300      	movs	r3, #0
}
 8012da0:	4618      	mov	r0, r3
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}

08012da8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012da8:	b084      	sub	sp, #16
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b086      	sub	sp, #24
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
 8012db2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	613b      	str	r3, [r7, #16]
 8012dc6:	e009      	b.n	8012ddc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	3340      	adds	r3, #64	; 0x40
 8012dce:	009b      	lsls	r3, r3, #2
 8012dd0:	4413      	add	r3, r2
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012dd6:	693b      	ldr	r3, [r7, #16]
 8012dd8:	3301      	adds	r3, #1
 8012dda:	613b      	str	r3, [r7, #16]
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	2b0e      	cmp	r3, #14
 8012de0:	d9f2      	bls.n	8012dc8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d11c      	bne.n	8012e22 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	68fa      	ldr	r2, [r7, #12]
 8012df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012df6:	f043 0302 	orr.w	r3, r3, #2
 8012dfa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e00:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	e005      	b.n	8012e2e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e34:	461a      	mov	r2, r3
 8012e36:	2300      	movs	r3, #0
 8012e38:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e40:	4619      	mov	r1, r3
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e48:	461a      	mov	r2, r3
 8012e4a:	680b      	ldr	r3, [r1, #0]
 8012e4c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e50:	2b01      	cmp	r3, #1
 8012e52:	d10c      	bne.n	8012e6e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d104      	bne.n	8012e64 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f000 f965 	bl	801312c <USB_SetDevSpeed>
 8012e62:	e008      	b.n	8012e76 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e64:	2101      	movs	r1, #1
 8012e66:	6878      	ldr	r0, [r7, #4]
 8012e68:	f000 f960 	bl	801312c <USB_SetDevSpeed>
 8012e6c:	e003      	b.n	8012e76 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e6e:	2103      	movs	r1, #3
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f000 f95b 	bl	801312c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e76:	2110      	movs	r1, #16
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f000 f8f3 	bl	8013064 <USB_FlushTxFifo>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d001      	beq.n	8012e88 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e84:	2301      	movs	r3, #1
 8012e86:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e88:	6878      	ldr	r0, [r7, #4]
 8012e8a:	f000 f91f 	bl	80130cc <USB_FlushRxFifo>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d001      	beq.n	8012e98 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012e94:	2301      	movs	r3, #1
 8012e96:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eaa:	461a      	mov	r2, r3
 8012eac:	2300      	movs	r3, #0
 8012eae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	2300      	movs	r3, #0
 8012eba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	613b      	str	r3, [r7, #16]
 8012ec0:	e043      	b.n	8012f4a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	015a      	lsls	r2, r3, #5
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	4413      	add	r3, r2
 8012eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012ed8:	d118      	bne.n	8012f0c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012eda:	693b      	ldr	r3, [r7, #16]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d10a      	bne.n	8012ef6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	015a      	lsls	r2, r3, #5
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eec:	461a      	mov	r2, r3
 8012eee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012ef2:	6013      	str	r3, [r2, #0]
 8012ef4:	e013      	b.n	8012f1e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	015a      	lsls	r2, r3, #5
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	4413      	add	r3, r2
 8012efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f02:	461a      	mov	r2, r3
 8012f04:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f08:	6013      	str	r3, [r2, #0]
 8012f0a:	e008      	b.n	8012f1e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	015a      	lsls	r2, r3, #5
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	4413      	add	r3, r2
 8012f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f18:	461a      	mov	r2, r3
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	015a      	lsls	r2, r3, #5
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	4413      	add	r3, r2
 8012f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	015a      	lsls	r2, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f3c:	461a      	mov	r2, r3
 8012f3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f42:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	3301      	adds	r3, #1
 8012f48:	613b      	str	r3, [r7, #16]
 8012f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f4c:	693a      	ldr	r2, [r7, #16]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d3b7      	bcc.n	8012ec2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f52:	2300      	movs	r3, #0
 8012f54:	613b      	str	r3, [r7, #16]
 8012f56:	e043      	b.n	8012fe0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	015a      	lsls	r2, r3, #5
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	4413      	add	r3, r2
 8012f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f6e:	d118      	bne.n	8012fa2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d10a      	bne.n	8012f8c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	015a      	lsls	r2, r3, #5
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f82:	461a      	mov	r2, r3
 8012f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f88:	6013      	str	r3, [r2, #0]
 8012f8a:	e013      	b.n	8012fb4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	015a      	lsls	r2, r3, #5
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4413      	add	r3, r2
 8012f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f98:	461a      	mov	r2, r3
 8012f9a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f9e:	6013      	str	r3, [r2, #0]
 8012fa0:	e008      	b.n	8012fb4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	015a      	lsls	r2, r3, #5
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	4413      	add	r3, r2
 8012faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fae:	461a      	mov	r2, r3
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	015a      	lsls	r2, r3, #5
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	4413      	add	r3, r2
 8012fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	015a      	lsls	r2, r3, #5
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	4413      	add	r3, r2
 8012fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fd8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	613b      	str	r3, [r7, #16]
 8012fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fe2:	693a      	ldr	r2, [r7, #16]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d3b7      	bcc.n	8012f58 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fee:	691b      	ldr	r3, [r3, #16]
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ffa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2200      	movs	r2, #0
 8013000:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013008:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801300a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801300c:	2b00      	cmp	r3, #0
 801300e:	d105      	bne.n	801301c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	699b      	ldr	r3, [r3, #24]
 8013014:	f043 0210 	orr.w	r2, r3, #16
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	699a      	ldr	r2, [r3, #24]
 8013020:	4b0e      	ldr	r3, [pc, #56]	; (801305c <USB_DevInit+0x2b4>)
 8013022:	4313      	orrs	r3, r2
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801302a:	2b00      	cmp	r3, #0
 801302c:	d005      	beq.n	801303a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	699b      	ldr	r3, [r3, #24]
 8013032:	f043 0208 	orr.w	r2, r3, #8
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801303a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801303c:	2b01      	cmp	r3, #1
 801303e:	d105      	bne.n	801304c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	699a      	ldr	r2, [r3, #24]
 8013044:	4b06      	ldr	r3, [pc, #24]	; (8013060 <USB_DevInit+0x2b8>)
 8013046:	4313      	orrs	r3, r2
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801304c:	7dfb      	ldrb	r3, [r7, #23]
}
 801304e:	4618      	mov	r0, r3
 8013050:	3718      	adds	r7, #24
 8013052:	46bd      	mov	sp, r7
 8013054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013058:	b004      	add	sp, #16
 801305a:	4770      	bx	lr
 801305c:	803c3800 	.word	0x803c3800
 8013060:	40000004 	.word	0x40000004

08013064 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013064:	b480      	push	{r7}
 8013066:	b085      	sub	sp, #20
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
 801306c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801306e:	2300      	movs	r3, #0
 8013070:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	3301      	adds	r3, #1
 8013076:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	4a13      	ldr	r2, [pc, #76]	; (80130c8 <USB_FlushTxFifo+0x64>)
 801307c:	4293      	cmp	r3, r2
 801307e:	d901      	bls.n	8013084 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013080:	2303      	movs	r3, #3
 8013082:	e01b      	b.n	80130bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	691b      	ldr	r3, [r3, #16]
 8013088:	2b00      	cmp	r3, #0
 801308a:	daf2      	bge.n	8013072 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801308c:	2300      	movs	r3, #0
 801308e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	019b      	lsls	r3, r3, #6
 8013094:	f043 0220 	orr.w	r2, r3, #32
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	3301      	adds	r3, #1
 80130a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	4a08      	ldr	r2, [pc, #32]	; (80130c8 <USB_FlushTxFifo+0x64>)
 80130a6:	4293      	cmp	r3, r2
 80130a8:	d901      	bls.n	80130ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80130aa:	2303      	movs	r3, #3
 80130ac:	e006      	b.n	80130bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	691b      	ldr	r3, [r3, #16]
 80130b2:	f003 0320 	and.w	r3, r3, #32
 80130b6:	2b20      	cmp	r3, #32
 80130b8:	d0f0      	beq.n	801309c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80130ba:	2300      	movs	r3, #0
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr
 80130c8:	00030d40 	.word	0x00030d40

080130cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130d4:	2300      	movs	r3, #0
 80130d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	3301      	adds	r3, #1
 80130dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	4a11      	ldr	r2, [pc, #68]	; (8013128 <USB_FlushRxFifo+0x5c>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d901      	bls.n	80130ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130e6:	2303      	movs	r3, #3
 80130e8:	e018      	b.n	801311c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	691b      	ldr	r3, [r3, #16]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	daf2      	bge.n	80130d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80130f2:	2300      	movs	r3, #0
 80130f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2210      	movs	r2, #16
 80130fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	3301      	adds	r3, #1
 8013100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	4a08      	ldr	r2, [pc, #32]	; (8013128 <USB_FlushRxFifo+0x5c>)
 8013106:	4293      	cmp	r3, r2
 8013108:	d901      	bls.n	801310e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801310a:	2303      	movs	r3, #3
 801310c:	e006      	b.n	801311c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	691b      	ldr	r3, [r3, #16]
 8013112:	f003 0310 	and.w	r3, r3, #16
 8013116:	2b10      	cmp	r3, #16
 8013118:	d0f0      	beq.n	80130fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801311a:	2300      	movs	r3, #0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3714      	adds	r7, #20
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr
 8013128:	00030d40 	.word	0x00030d40

0801312c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801312c:	b480      	push	{r7}
 801312e:	b085      	sub	sp, #20
 8013130:	af00      	add	r7, sp, #0
 8013132:	6078      	str	r0, [r7, #4]
 8013134:	460b      	mov	r3, r1
 8013136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	78fb      	ldrb	r3, [r7, #3]
 8013146:	68f9      	ldr	r1, [r7, #12]
 8013148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801314c:	4313      	orrs	r3, r2
 801314e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013150:	2300      	movs	r3, #0
}
 8013152:	4618      	mov	r0, r3
 8013154:	3714      	adds	r7, #20
 8013156:	46bd      	mov	sp, r7
 8013158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315c:	4770      	bx	lr

0801315e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801315e:	b480      	push	{r7}
 8013160:	b087      	sub	sp, #28
 8013162:	af00      	add	r7, sp, #0
 8013164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013170:	689b      	ldr	r3, [r3, #8]
 8013172:	f003 0306 	and.w	r3, r3, #6
 8013176:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d102      	bne.n	8013184 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801317e:	2300      	movs	r3, #0
 8013180:	75fb      	strb	r3, [r7, #23]
 8013182:	e00a      	b.n	801319a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b02      	cmp	r3, #2
 8013188:	d002      	beq.n	8013190 <USB_GetDevSpeed+0x32>
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2b06      	cmp	r3, #6
 801318e:	d102      	bne.n	8013196 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013190:	2302      	movs	r3, #2
 8013192:	75fb      	strb	r3, [r7, #23]
 8013194:	e001      	b.n	801319a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013196:	230f      	movs	r3, #15
 8013198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801319a:	7dfb      	ldrb	r3, [r7, #23]
}
 801319c:	4618      	mov	r0, r3
 801319e:	371c      	adds	r7, #28
 80131a0:	46bd      	mov	sp, r7
 80131a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a6:	4770      	bx	lr

080131a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b085      	sub	sp, #20
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
 80131b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80131b6:	683b      	ldr	r3, [r7, #0]
 80131b8:	781b      	ldrb	r3, [r3, #0]
 80131ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	785b      	ldrb	r3, [r3, #1]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	d139      	bne.n	8013238 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ca:	69da      	ldr	r2, [r3, #28]
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	781b      	ldrb	r3, [r3, #0]
 80131d0:	f003 030f 	and.w	r3, r3, #15
 80131d4:	2101      	movs	r1, #1
 80131d6:	fa01 f303 	lsl.w	r3, r1, r3
 80131da:	b29b      	uxth	r3, r3
 80131dc:	68f9      	ldr	r1, [r7, #12]
 80131de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131e2:	4313      	orrs	r3, r2
 80131e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	015a      	lsls	r2, r3, #5
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	4413      	add	r3, r2
 80131ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d153      	bne.n	80132a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	015a      	lsls	r2, r3, #5
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	4413      	add	r3, r2
 8013204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	689b      	ldr	r3, [r3, #8]
 801320e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	791b      	ldrb	r3, [r3, #4]
 8013216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	059b      	lsls	r3, r3, #22
 801321e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013220:	431a      	orrs	r2, r3
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	0159      	lsls	r1, r3, #5
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	440b      	add	r3, r1
 801322a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801322e:	4619      	mov	r1, r3
 8013230:	4b20      	ldr	r3, [pc, #128]	; (80132b4 <USB_ActivateEndpoint+0x10c>)
 8013232:	4313      	orrs	r3, r2
 8013234:	600b      	str	r3, [r1, #0]
 8013236:	e035      	b.n	80132a4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801323e:	69da      	ldr	r2, [r3, #28]
 8013240:	683b      	ldr	r3, [r7, #0]
 8013242:	781b      	ldrb	r3, [r3, #0]
 8013244:	f003 030f 	and.w	r3, r3, #15
 8013248:	2101      	movs	r1, #1
 801324a:	fa01 f303 	lsl.w	r3, r1, r3
 801324e:	041b      	lsls	r3, r3, #16
 8013250:	68f9      	ldr	r1, [r7, #12]
 8013252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013256:	4313      	orrs	r3, r2
 8013258:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	015a      	lsls	r2, r3, #5
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801326c:	2b00      	cmp	r3, #0
 801326e:	d119      	bne.n	80132a4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013270:	68bb      	ldr	r3, [r7, #8]
 8013272:	015a      	lsls	r2, r3, #5
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	4413      	add	r3, r2
 8013278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801327c:	681a      	ldr	r2, [r3, #0]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	689b      	ldr	r3, [r3, #8]
 8013282:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	791b      	ldrb	r3, [r3, #4]
 801328a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801328c:	430b      	orrs	r3, r1
 801328e:	431a      	orrs	r2, r3
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	0159      	lsls	r1, r3, #5
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	440b      	add	r3, r1
 8013298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801329c:	4619      	mov	r1, r3
 801329e:	4b05      	ldr	r3, [pc, #20]	; (80132b4 <USB_ActivateEndpoint+0x10c>)
 80132a0:	4313      	orrs	r3, r2
 80132a2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80132a4:	2300      	movs	r3, #0
}
 80132a6:	4618      	mov	r0, r3
 80132a8:	3714      	adds	r7, #20
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	10008000 	.word	0x10008000

080132b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
 80132c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	781b      	ldrb	r3, [r3, #0]
 80132ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	785b      	ldrb	r3, [r3, #1]
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d161      	bne.n	8013398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	015a      	lsls	r2, r3, #5
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	4413      	add	r3, r2
 80132dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132ea:	d11f      	bne.n	801332c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	015a      	lsls	r2, r3, #5
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	4413      	add	r3, r2
 80132f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	68ba      	ldr	r2, [r7, #8]
 80132fc:	0151      	lsls	r1, r2, #5
 80132fe:	68fa      	ldr	r2, [r7, #12]
 8013300:	440a      	add	r2, r1
 8013302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801330a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	015a      	lsls	r2, r3, #5
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	4413      	add	r3, r2
 8013314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	68ba      	ldr	r2, [r7, #8]
 801331c:	0151      	lsls	r1, r2, #5
 801331e:	68fa      	ldr	r2, [r7, #12]
 8013320:	440a      	add	r2, r1
 8013322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801332a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013334:	683b      	ldr	r3, [r7, #0]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 030f 	and.w	r3, r3, #15
 801333c:	2101      	movs	r1, #1
 801333e:	fa01 f303 	lsl.w	r3, r1, r3
 8013342:	b29b      	uxth	r3, r3
 8013344:	43db      	mvns	r3, r3
 8013346:	68f9      	ldr	r1, [r7, #12]
 8013348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801334c:	4013      	ands	r3, r2
 801334e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013356:	69da      	ldr	r2, [r3, #28]
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	f003 030f 	and.w	r3, r3, #15
 8013360:	2101      	movs	r1, #1
 8013362:	fa01 f303 	lsl.w	r3, r1, r3
 8013366:	b29b      	uxth	r3, r3
 8013368:	43db      	mvns	r3, r3
 801336a:	68f9      	ldr	r1, [r7, #12]
 801336c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013370:	4013      	ands	r3, r2
 8013372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013374:	68bb      	ldr	r3, [r7, #8]
 8013376:	015a      	lsls	r2, r3, #5
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	4413      	add	r3, r2
 801337c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013380:	681a      	ldr	r2, [r3, #0]
 8013382:	68bb      	ldr	r3, [r7, #8]
 8013384:	0159      	lsls	r1, r3, #5
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	440b      	add	r3, r1
 801338a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801338e:	4619      	mov	r1, r3
 8013390:	4b35      	ldr	r3, [pc, #212]	; (8013468 <USB_DeactivateEndpoint+0x1b0>)
 8013392:	4013      	ands	r3, r2
 8013394:	600b      	str	r3, [r1, #0]
 8013396:	e060      	b.n	801345a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	015a      	lsls	r2, r3, #5
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	4413      	add	r3, r2
 80133a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133ae:	d11f      	bne.n	80133f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80133b0:	68bb      	ldr	r3, [r7, #8]
 80133b2:	015a      	lsls	r2, r3, #5
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4413      	add	r3, r2
 80133b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	68ba      	ldr	r2, [r7, #8]
 80133c0:	0151      	lsls	r1, r2, #5
 80133c2:	68fa      	ldr	r2, [r7, #12]
 80133c4:	440a      	add	r2, r1
 80133c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	015a      	lsls	r2, r3, #5
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	4413      	add	r3, r2
 80133d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	0151      	lsls	r1, r2, #5
 80133e2:	68fa      	ldr	r2, [r7, #12]
 80133e4:	440a      	add	r2, r1
 80133e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	781b      	ldrb	r3, [r3, #0]
 80133fc:	f003 030f 	and.w	r3, r3, #15
 8013400:	2101      	movs	r1, #1
 8013402:	fa01 f303 	lsl.w	r3, r1, r3
 8013406:	041b      	lsls	r3, r3, #16
 8013408:	43db      	mvns	r3, r3
 801340a:	68f9      	ldr	r1, [r7, #12]
 801340c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013410:	4013      	ands	r3, r2
 8013412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801341a:	69da      	ldr	r2, [r3, #28]
 801341c:	683b      	ldr	r3, [r7, #0]
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	f003 030f 	and.w	r3, r3, #15
 8013424:	2101      	movs	r1, #1
 8013426:	fa01 f303 	lsl.w	r3, r1, r3
 801342a:	041b      	lsls	r3, r3, #16
 801342c:	43db      	mvns	r3, r3
 801342e:	68f9      	ldr	r1, [r7, #12]
 8013430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013434:	4013      	ands	r3, r2
 8013436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013438:	68bb      	ldr	r3, [r7, #8]
 801343a:	015a      	lsls	r2, r3, #5
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	4413      	add	r3, r2
 8013440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013444:	681a      	ldr	r2, [r3, #0]
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	0159      	lsls	r1, r3, #5
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	440b      	add	r3, r1
 801344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013452:	4619      	mov	r1, r3
 8013454:	4b05      	ldr	r3, [pc, #20]	; (801346c <USB_DeactivateEndpoint+0x1b4>)
 8013456:	4013      	ands	r3, r2
 8013458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801345a:	2300      	movs	r3, #0
}
 801345c:	4618      	mov	r0, r3
 801345e:	3714      	adds	r7, #20
 8013460:	46bd      	mov	sp, r7
 8013462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013466:	4770      	bx	lr
 8013468:	ec337800 	.word	0xec337800
 801346c:	eff37800 	.word	0xeff37800

08013470 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b08a      	sub	sp, #40	; 0x28
 8013474:	af02      	add	r7, sp, #8
 8013476:	60f8      	str	r0, [r7, #12]
 8013478:	60b9      	str	r1, [r7, #8]
 801347a:	4613      	mov	r3, r2
 801347c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	785b      	ldrb	r3, [r3, #1]
 801348c:	2b01      	cmp	r3, #1
 801348e:	f040 8181 	bne.w	8013794 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d132      	bne.n	8013500 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	015a      	lsls	r2, r3, #5
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	4413      	add	r3, r2
 80134a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a6:	691a      	ldr	r2, [r3, #16]
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	0159      	lsls	r1, r3, #5
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	440b      	add	r3, r1
 80134b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134b4:	4619      	mov	r1, r3
 80134b6:	4ba5      	ldr	r3, [pc, #660]	; (801374c <USB_EPStartXfer+0x2dc>)
 80134b8:	4013      	ands	r3, r2
 80134ba:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	015a      	lsls	r2, r3, #5
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	4413      	add	r3, r2
 80134c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c8:	691b      	ldr	r3, [r3, #16]
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	0151      	lsls	r1, r2, #5
 80134ce:	69fa      	ldr	r2, [r7, #28]
 80134d0:	440a      	add	r2, r1
 80134d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134dc:	69bb      	ldr	r3, [r7, #24]
 80134de:	015a      	lsls	r2, r3, #5
 80134e0:	69fb      	ldr	r3, [r7, #28]
 80134e2:	4413      	add	r3, r2
 80134e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e8:	691a      	ldr	r2, [r3, #16]
 80134ea:	69bb      	ldr	r3, [r7, #24]
 80134ec:	0159      	lsls	r1, r3, #5
 80134ee:	69fb      	ldr	r3, [r7, #28]
 80134f0:	440b      	add	r3, r1
 80134f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f6:	4619      	mov	r1, r3
 80134f8:	4b95      	ldr	r3, [pc, #596]	; (8013750 <USB_EPStartXfer+0x2e0>)
 80134fa:	4013      	ands	r3, r2
 80134fc:	610b      	str	r3, [r1, #16]
 80134fe:	e092      	b.n	8013626 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	015a      	lsls	r2, r3, #5
 8013504:	69fb      	ldr	r3, [r7, #28]
 8013506:	4413      	add	r3, r2
 8013508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801350c:	691a      	ldr	r2, [r3, #16]
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	0159      	lsls	r1, r3, #5
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	440b      	add	r3, r1
 8013516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801351a:	4619      	mov	r1, r3
 801351c:	4b8c      	ldr	r3, [pc, #560]	; (8013750 <USB_EPStartXfer+0x2e0>)
 801351e:	4013      	ands	r3, r2
 8013520:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013522:	69bb      	ldr	r3, [r7, #24]
 8013524:	015a      	lsls	r2, r3, #5
 8013526:	69fb      	ldr	r3, [r7, #28]
 8013528:	4413      	add	r3, r2
 801352a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801352e:	691a      	ldr	r2, [r3, #16]
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	0159      	lsls	r1, r3, #5
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	440b      	add	r3, r1
 8013538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801353c:	4619      	mov	r1, r3
 801353e:	4b83      	ldr	r3, [pc, #524]	; (801374c <USB_EPStartXfer+0x2dc>)
 8013540:	4013      	ands	r3, r2
 8013542:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d11a      	bne.n	8013580 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	691a      	ldr	r2, [r3, #16]
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	689b      	ldr	r3, [r3, #8]
 8013552:	429a      	cmp	r2, r3
 8013554:	d903      	bls.n	801355e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	689a      	ldr	r2, [r3, #8]
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801355e:	69bb      	ldr	r3, [r7, #24]
 8013560:	015a      	lsls	r2, r3, #5
 8013562:	69fb      	ldr	r3, [r7, #28]
 8013564:	4413      	add	r3, r2
 8013566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	69ba      	ldr	r2, [r7, #24]
 801356e:	0151      	lsls	r1, r2, #5
 8013570:	69fa      	ldr	r2, [r7, #28]
 8013572:	440a      	add	r2, r1
 8013574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801357c:	6113      	str	r3, [r2, #16]
 801357e:	e01b      	b.n	80135b8 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013580:	69bb      	ldr	r3, [r7, #24]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801358c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	6919      	ldr	r1, [r3, #16]
 8013592:	68bb      	ldr	r3, [r7, #8]
 8013594:	689b      	ldr	r3, [r3, #8]
 8013596:	440b      	add	r3, r1
 8013598:	1e59      	subs	r1, r3, #1
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	689b      	ldr	r3, [r3, #8]
 801359e:	fbb1 f3f3 	udiv	r3, r1, r3
 80135a2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80135a4:	4b6b      	ldr	r3, [pc, #428]	; (8013754 <USB_EPStartXfer+0x2e4>)
 80135a6:	400b      	ands	r3, r1
 80135a8:	69b9      	ldr	r1, [r7, #24]
 80135aa:	0148      	lsls	r0, r1, #5
 80135ac:	69f9      	ldr	r1, [r7, #28]
 80135ae:	4401      	add	r1, r0
 80135b0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135b4:	4313      	orrs	r3, r2
 80135b6:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80135b8:	69bb      	ldr	r3, [r7, #24]
 80135ba:	015a      	lsls	r2, r3, #5
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	4413      	add	r3, r2
 80135c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c4:	691a      	ldr	r2, [r3, #16]
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	691b      	ldr	r3, [r3, #16]
 80135ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135ce:	69b9      	ldr	r1, [r7, #24]
 80135d0:	0148      	lsls	r0, r1, #5
 80135d2:	69f9      	ldr	r1, [r7, #28]
 80135d4:	4401      	add	r1, r0
 80135d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135da:	4313      	orrs	r3, r2
 80135dc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	791b      	ldrb	r3, [r3, #4]
 80135e2:	2b01      	cmp	r3, #1
 80135e4:	d11f      	bne.n	8013626 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135e6:	69bb      	ldr	r3, [r7, #24]
 80135e8:	015a      	lsls	r2, r3, #5
 80135ea:	69fb      	ldr	r3, [r7, #28]
 80135ec:	4413      	add	r3, r2
 80135ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135f2:	691b      	ldr	r3, [r3, #16]
 80135f4:	69ba      	ldr	r2, [r7, #24]
 80135f6:	0151      	lsls	r1, r2, #5
 80135f8:	69fa      	ldr	r2, [r7, #28]
 80135fa:	440a      	add	r2, r1
 80135fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013600:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013604:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	015a      	lsls	r2, r3, #5
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	4413      	add	r3, r2
 801360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013612:	691b      	ldr	r3, [r3, #16]
 8013614:	69ba      	ldr	r2, [r7, #24]
 8013616:	0151      	lsls	r1, r2, #5
 8013618:	69fa      	ldr	r2, [r7, #28]
 801361a:	440a      	add	r2, r1
 801361c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013620:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013624:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013626:	79fb      	ldrb	r3, [r7, #7]
 8013628:	2b01      	cmp	r3, #1
 801362a:	d14b      	bne.n	80136c4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801362c:	68bb      	ldr	r3, [r7, #8]
 801362e:	69db      	ldr	r3, [r3, #28]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d009      	beq.n	8013648 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	015a      	lsls	r2, r3, #5
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	4413      	add	r3, r2
 801363c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013640:	461a      	mov	r2, r3
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	69db      	ldr	r3, [r3, #28]
 8013646:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	791b      	ldrb	r3, [r3, #4]
 801364c:	2b01      	cmp	r3, #1
 801364e:	d128      	bne.n	80136a2 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801365c:	2b00      	cmp	r3, #0
 801365e:	d110      	bne.n	8013682 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	015a      	lsls	r2, r3, #5
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	4413      	add	r3, r2
 8013668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	69ba      	ldr	r2, [r7, #24]
 8013670:	0151      	lsls	r1, r2, #5
 8013672:	69fa      	ldr	r2, [r7, #28]
 8013674:	440a      	add	r2, r1
 8013676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801367a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801367e:	6013      	str	r3, [r2, #0]
 8013680:	e00f      	b.n	80136a2 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013682:	69bb      	ldr	r3, [r7, #24]
 8013684:	015a      	lsls	r2, r3, #5
 8013686:	69fb      	ldr	r3, [r7, #28]
 8013688:	4413      	add	r3, r2
 801368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	69ba      	ldr	r2, [r7, #24]
 8013692:	0151      	lsls	r1, r2, #5
 8013694:	69fa      	ldr	r2, [r7, #28]
 8013696:	440a      	add	r2, r1
 8013698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801369c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136a0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	015a      	lsls	r2, r3, #5
 80136a6:	69fb      	ldr	r3, [r7, #28]
 80136a8:	4413      	add	r3, r2
 80136aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	69ba      	ldr	r2, [r7, #24]
 80136b2:	0151      	lsls	r1, r2, #5
 80136b4:	69fa      	ldr	r2, [r7, #28]
 80136b6:	440a      	add	r2, r1
 80136b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136c0:	6013      	str	r3, [r2, #0]
 80136c2:	e16a      	b.n	801399a <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136c4:	69bb      	ldr	r3, [r7, #24]
 80136c6:	015a      	lsls	r2, r3, #5
 80136c8:	69fb      	ldr	r3, [r7, #28]
 80136ca:	4413      	add	r3, r2
 80136cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	69ba      	ldr	r2, [r7, #24]
 80136d4:	0151      	lsls	r1, r2, #5
 80136d6:	69fa      	ldr	r2, [r7, #28]
 80136d8:	440a      	add	r2, r1
 80136da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136e2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136e4:	68bb      	ldr	r3, [r7, #8]
 80136e6:	791b      	ldrb	r3, [r3, #4]
 80136e8:	2b01      	cmp	r3, #1
 80136ea:	d015      	beq.n	8013718 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	691b      	ldr	r3, [r3, #16]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	f000 8152 	beq.w	801399a <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	781b      	ldrb	r3, [r3, #0]
 8013702:	f003 030f 	and.w	r3, r3, #15
 8013706:	2101      	movs	r1, #1
 8013708:	fa01 f303 	lsl.w	r3, r1, r3
 801370c:	69f9      	ldr	r1, [r7, #28]
 801370e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013712:	4313      	orrs	r3, r2
 8013714:	634b      	str	r3, [r1, #52]	; 0x34
 8013716:	e140      	b.n	801399a <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801371e:	689b      	ldr	r3, [r3, #8]
 8013720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013724:	2b00      	cmp	r3, #0
 8013726:	d117      	bne.n	8013758 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013728:	69bb      	ldr	r3, [r7, #24]
 801372a:	015a      	lsls	r2, r3, #5
 801372c:	69fb      	ldr	r3, [r7, #28]
 801372e:	4413      	add	r3, r2
 8013730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	69ba      	ldr	r2, [r7, #24]
 8013738:	0151      	lsls	r1, r2, #5
 801373a:	69fa      	ldr	r2, [r7, #28]
 801373c:	440a      	add	r2, r1
 801373e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013742:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	e016      	b.n	8013778 <USB_EPStartXfer+0x308>
 801374a:	bf00      	nop
 801374c:	e007ffff 	.word	0xe007ffff
 8013750:	fff80000 	.word	0xfff80000
 8013754:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013758:	69bb      	ldr	r3, [r7, #24]
 801375a:	015a      	lsls	r2, r3, #5
 801375c:	69fb      	ldr	r3, [r7, #28]
 801375e:	4413      	add	r3, r2
 8013760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	69ba      	ldr	r2, [r7, #24]
 8013768:	0151      	lsls	r1, r2, #5
 801376a:	69fa      	ldr	r2, [r7, #28]
 801376c:	440a      	add	r2, r1
 801376e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013776:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	68d9      	ldr	r1, [r3, #12]
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	781a      	ldrb	r2, [r3, #0]
 8013780:	68bb      	ldr	r3, [r7, #8]
 8013782:	691b      	ldr	r3, [r3, #16]
 8013784:	b298      	uxth	r0, r3
 8013786:	79fb      	ldrb	r3, [r7, #7]
 8013788:	9300      	str	r3, [sp, #0]
 801378a:	4603      	mov	r3, r0
 801378c:	68f8      	ldr	r0, [r7, #12]
 801378e:	f000 f9b9 	bl	8013b04 <USB_WritePacket>
 8013792:	e102      	b.n	801399a <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	015a      	lsls	r2, r3, #5
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	4413      	add	r3, r2
 801379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a0:	691a      	ldr	r2, [r3, #16]
 80137a2:	69bb      	ldr	r3, [r7, #24]
 80137a4:	0159      	lsls	r1, r3, #5
 80137a6:	69fb      	ldr	r3, [r7, #28]
 80137a8:	440b      	add	r3, r1
 80137aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ae:	4619      	mov	r1, r3
 80137b0:	4b7c      	ldr	r3, [pc, #496]	; (80139a4 <USB_EPStartXfer+0x534>)
 80137b2:	4013      	ands	r3, r2
 80137b4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80137b6:	69bb      	ldr	r3, [r7, #24]
 80137b8:	015a      	lsls	r2, r3, #5
 80137ba:	69fb      	ldr	r3, [r7, #28]
 80137bc:	4413      	add	r3, r2
 80137be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137c2:	691a      	ldr	r2, [r3, #16]
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	0159      	lsls	r1, r3, #5
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	440b      	add	r3, r1
 80137cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d0:	4619      	mov	r1, r3
 80137d2:	4b75      	ldr	r3, [pc, #468]	; (80139a8 <USB_EPStartXfer+0x538>)
 80137d4:	4013      	ands	r3, r2
 80137d6:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d12f      	bne.n	801383e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	691b      	ldr	r3, [r3, #16]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d003      	beq.n	80137ee <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137e6:	68bb      	ldr	r3, [r7, #8]
 80137e8:	689a      	ldr	r2, [r3, #8]
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	689a      	ldr	r2, [r3, #8]
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	015a      	lsls	r2, r3, #5
 80137fa:	69fb      	ldr	r3, [r7, #28]
 80137fc:	4413      	add	r3, r2
 80137fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013802:	691a      	ldr	r2, [r3, #16]
 8013804:	68bb      	ldr	r3, [r7, #8]
 8013806:	6a1b      	ldr	r3, [r3, #32]
 8013808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801380c:	69b9      	ldr	r1, [r7, #24]
 801380e:	0148      	lsls	r0, r1, #5
 8013810:	69f9      	ldr	r1, [r7, #28]
 8013812:	4401      	add	r1, r0
 8013814:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013818:	4313      	orrs	r3, r2
 801381a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	015a      	lsls	r2, r3, #5
 8013820:	69fb      	ldr	r3, [r7, #28]
 8013822:	4413      	add	r3, r2
 8013824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013828:	691b      	ldr	r3, [r3, #16]
 801382a:	69ba      	ldr	r2, [r7, #24]
 801382c:	0151      	lsls	r1, r2, #5
 801382e:	69fa      	ldr	r2, [r7, #28]
 8013830:	440a      	add	r2, r1
 8013832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013836:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801383a:	6113      	str	r3, [r2, #16]
 801383c:	e05f      	b.n	80138fe <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801383e:	68bb      	ldr	r3, [r7, #8]
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d123      	bne.n	801388e <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	015a      	lsls	r2, r3, #5
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	4413      	add	r3, r2
 801384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013852:	691a      	ldr	r2, [r3, #16]
 8013854:	68bb      	ldr	r3, [r7, #8]
 8013856:	689b      	ldr	r3, [r3, #8]
 8013858:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801385c:	69b9      	ldr	r1, [r7, #24]
 801385e:	0148      	lsls	r0, r1, #5
 8013860:	69f9      	ldr	r1, [r7, #28]
 8013862:	4401      	add	r1, r0
 8013864:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013868:	4313      	orrs	r3, r2
 801386a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	015a      	lsls	r2, r3, #5
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	4413      	add	r3, r2
 8013874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013878:	691b      	ldr	r3, [r3, #16]
 801387a:	69ba      	ldr	r2, [r7, #24]
 801387c:	0151      	lsls	r1, r2, #5
 801387e:	69fa      	ldr	r2, [r7, #28]
 8013880:	440a      	add	r2, r1
 8013882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801388a:	6113      	str	r3, [r2, #16]
 801388c:	e037      	b.n	80138fe <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801388e:	68bb      	ldr	r3, [r7, #8]
 8013890:	691a      	ldr	r2, [r3, #16]
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	689b      	ldr	r3, [r3, #8]
 8013896:	4413      	add	r3, r2
 8013898:	1e5a      	subs	r2, r3, #1
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80138a2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	689b      	ldr	r3, [r3, #8]
 80138a8:	8afa      	ldrh	r2, [r7, #22]
 80138aa:	fb03 f202 	mul.w	r2, r3, r2
 80138ae:	68bb      	ldr	r3, [r7, #8]
 80138b0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	015a      	lsls	r2, r3, #5
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	4413      	add	r3, r2
 80138ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138be:	691a      	ldr	r2, [r3, #16]
 80138c0:	8afb      	ldrh	r3, [r7, #22]
 80138c2:	04d9      	lsls	r1, r3, #19
 80138c4:	4b39      	ldr	r3, [pc, #228]	; (80139ac <USB_EPStartXfer+0x53c>)
 80138c6:	400b      	ands	r3, r1
 80138c8:	69b9      	ldr	r1, [r7, #24]
 80138ca:	0148      	lsls	r0, r1, #5
 80138cc:	69f9      	ldr	r1, [r7, #28]
 80138ce:	4401      	add	r1, r0
 80138d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138d4:	4313      	orrs	r3, r2
 80138d6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138d8:	69bb      	ldr	r3, [r7, #24]
 80138da:	015a      	lsls	r2, r3, #5
 80138dc:	69fb      	ldr	r3, [r7, #28]
 80138de:	4413      	add	r3, r2
 80138e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138e4:	691a      	ldr	r2, [r3, #16]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	6a1b      	ldr	r3, [r3, #32]
 80138ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138ee:	69b9      	ldr	r1, [r7, #24]
 80138f0:	0148      	lsls	r0, r1, #5
 80138f2:	69f9      	ldr	r1, [r7, #28]
 80138f4:	4401      	add	r1, r0
 80138f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138fa:	4313      	orrs	r3, r2
 80138fc:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80138fe:	79fb      	ldrb	r3, [r7, #7]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d10d      	bne.n	8013920 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d009      	beq.n	8013920 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	68d9      	ldr	r1, [r3, #12]
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801391c:	460a      	mov	r2, r1
 801391e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	791b      	ldrb	r3, [r3, #4]
 8013924:	2b01      	cmp	r3, #1
 8013926:	d128      	bne.n	801397a <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801392e:	689b      	ldr	r3, [r3, #8]
 8013930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013934:	2b00      	cmp	r3, #0
 8013936:	d110      	bne.n	801395a <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013938:	69bb      	ldr	r3, [r7, #24]
 801393a:	015a      	lsls	r2, r3, #5
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	4413      	add	r3, r2
 8013940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	69ba      	ldr	r2, [r7, #24]
 8013948:	0151      	lsls	r1, r2, #5
 801394a:	69fa      	ldr	r2, [r7, #28]
 801394c:	440a      	add	r2, r1
 801394e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013952:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013956:	6013      	str	r3, [r2, #0]
 8013958:	e00f      	b.n	801397a <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801395a:	69bb      	ldr	r3, [r7, #24]
 801395c:	015a      	lsls	r2, r3, #5
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	4413      	add	r3, r2
 8013962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	69ba      	ldr	r2, [r7, #24]
 801396a:	0151      	lsls	r1, r2, #5
 801396c:	69fa      	ldr	r2, [r7, #28]
 801396e:	440a      	add	r2, r1
 8013970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013978:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801397a:	69bb      	ldr	r3, [r7, #24]
 801397c:	015a      	lsls	r2, r3, #5
 801397e:	69fb      	ldr	r3, [r7, #28]
 8013980:	4413      	add	r3, r2
 8013982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	69ba      	ldr	r2, [r7, #24]
 801398a:	0151      	lsls	r1, r2, #5
 801398c:	69fa      	ldr	r2, [r7, #28]
 801398e:	440a      	add	r2, r1
 8013990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013994:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013998:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	3720      	adds	r7, #32
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	fff80000 	.word	0xfff80000
 80139a8:	e007ffff 	.word	0xe007ffff
 80139ac:	1ff80000 	.word	0x1ff80000

080139b0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b087      	sub	sp, #28
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
 80139b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80139ba:	2300      	movs	r3, #0
 80139bc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80139be:	2300      	movs	r3, #0
 80139c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	785b      	ldrb	r3, [r3, #1]
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d14a      	bne.n	8013a64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139ce:	683b      	ldr	r3, [r7, #0]
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	015a      	lsls	r2, r3, #5
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	4413      	add	r3, r2
 80139d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139e6:	f040 8086 	bne.w	8013af6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139ea:	683b      	ldr	r3, [r7, #0]
 80139ec:	781b      	ldrb	r3, [r3, #0]
 80139ee:	015a      	lsls	r2, r3, #5
 80139f0:	693b      	ldr	r3, [r7, #16]
 80139f2:	4413      	add	r3, r2
 80139f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	683a      	ldr	r2, [r7, #0]
 80139fc:	7812      	ldrb	r2, [r2, #0]
 80139fe:	0151      	lsls	r1, r2, #5
 8013a00:	693a      	ldr	r2, [r7, #16]
 8013a02:	440a      	add	r2, r1
 8013a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013a0e:	683b      	ldr	r3, [r7, #0]
 8013a10:	781b      	ldrb	r3, [r3, #0]
 8013a12:	015a      	lsls	r2, r3, #5
 8013a14:	693b      	ldr	r3, [r7, #16]
 8013a16:	4413      	add	r3, r2
 8013a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	683a      	ldr	r2, [r7, #0]
 8013a20:	7812      	ldrb	r2, [r2, #0]
 8013a22:	0151      	lsls	r1, r2, #5
 8013a24:	693a      	ldr	r2, [r7, #16]
 8013a26:	440a      	add	r2, r1
 8013a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	3301      	adds	r3, #1
 8013a36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a3e:	4293      	cmp	r3, r2
 8013a40:	d902      	bls.n	8013a48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a42:	2301      	movs	r3, #1
 8013a44:	75fb      	strb	r3, [r7, #23]
          break;
 8013a46:	e056      	b.n	8013af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	781b      	ldrb	r3, [r3, #0]
 8013a4c:	015a      	lsls	r2, r3, #5
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	4413      	add	r3, r2
 8013a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a60:	d0e7      	beq.n	8013a32 <USB_EPStopXfer+0x82>
 8013a62:	e048      	b.n	8013af6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	015a      	lsls	r2, r3, #5
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a7c:	d13b      	bne.n	8013af6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	015a      	lsls	r2, r3, #5
 8013a84:	693b      	ldr	r3, [r7, #16]
 8013a86:	4413      	add	r3, r2
 8013a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	683a      	ldr	r2, [r7, #0]
 8013a90:	7812      	ldrb	r2, [r2, #0]
 8013a92:	0151      	lsls	r1, r2, #5
 8013a94:	693a      	ldr	r2, [r7, #16]
 8013a96:	440a      	add	r2, r1
 8013a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013aa0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	015a      	lsls	r2, r3, #5
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	4413      	add	r3, r2
 8013aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	683a      	ldr	r2, [r7, #0]
 8013ab4:	7812      	ldrb	r2, [r2, #0]
 8013ab6:	0151      	lsls	r1, r2, #5
 8013ab8:	693a      	ldr	r2, [r7, #16]
 8013aba:	440a      	add	r2, r1
 8013abc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ac0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ac4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	3301      	adds	r3, #1
 8013aca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f242 7210 	movw	r2, #10000	; 0x2710
 8013ad2:	4293      	cmp	r3, r2
 8013ad4:	d902      	bls.n	8013adc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	75fb      	strb	r3, [r7, #23]
          break;
 8013ada:	e00c      	b.n	8013af6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013adc:	683b      	ldr	r3, [r7, #0]
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	015a      	lsls	r2, r3, #5
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013af0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013af4:	d0e7      	beq.n	8013ac6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	371c      	adds	r7, #28
 8013afc:	46bd      	mov	sp, r7
 8013afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b02:	4770      	bx	lr

08013b04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b089      	sub	sp, #36	; 0x24
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	60f8      	str	r0, [r7, #12]
 8013b0c:	60b9      	str	r1, [r7, #8]
 8013b0e:	4611      	mov	r1, r2
 8013b10:	461a      	mov	r2, r3
 8013b12:	460b      	mov	r3, r1
 8013b14:	71fb      	strb	r3, [r7, #7]
 8013b16:	4613      	mov	r3, r2
 8013b18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013b1e:	68bb      	ldr	r3, [r7, #8]
 8013b20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013b22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d123      	bne.n	8013b72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b2a:	88bb      	ldrh	r3, [r7, #4]
 8013b2c:	3303      	adds	r3, #3
 8013b2e:	089b      	lsrs	r3, r3, #2
 8013b30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b32:	2300      	movs	r3, #0
 8013b34:	61bb      	str	r3, [r7, #24]
 8013b36:	e018      	b.n	8013b6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b38:	79fb      	ldrb	r3, [r7, #7]
 8013b3a:	031a      	lsls	r2, r3, #12
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	4413      	add	r3, r2
 8013b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b44:	461a      	mov	r2, r3
 8013b46:	69fb      	ldr	r3, [r7, #28]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b4c:	69fb      	ldr	r3, [r7, #28]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	3301      	adds	r3, #1
 8013b56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	3301      	adds	r3, #1
 8013b62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	3301      	adds	r3, #1
 8013b68:	61bb      	str	r3, [r7, #24]
 8013b6a:	69ba      	ldr	r2, [r7, #24]
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	429a      	cmp	r2, r3
 8013b70:	d3e2      	bcc.n	8013b38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b72:	2300      	movs	r3, #0
}
 8013b74:	4618      	mov	r0, r3
 8013b76:	3724      	adds	r7, #36	; 0x24
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr

08013b80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b80:	b480      	push	{r7}
 8013b82:	b08b      	sub	sp, #44	; 0x2c
 8013b84:	af00      	add	r7, sp, #0
 8013b86:	60f8      	str	r0, [r7, #12]
 8013b88:	60b9      	str	r1, [r7, #8]
 8013b8a:	4613      	mov	r3, r2
 8013b8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013b96:	88fb      	ldrh	r3, [r7, #6]
 8013b98:	089b      	lsrs	r3, r3, #2
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b9e:	88fb      	ldrh	r3, [r7, #6]
 8013ba0:	f003 0303 	and.w	r3, r3, #3
 8013ba4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	623b      	str	r3, [r7, #32]
 8013baa:	e014      	b.n	8013bd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013bac:	69bb      	ldr	r3, [r7, #24]
 8013bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bb2:	681a      	ldr	r2, [r3, #0]
 8013bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8013bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bba:	3301      	adds	r3, #1
 8013bbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc0:	3301      	adds	r3, #1
 8013bc2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bcc:	3301      	adds	r3, #1
 8013bce:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013bd0:	6a3b      	ldr	r3, [r7, #32]
 8013bd2:	3301      	adds	r3, #1
 8013bd4:	623b      	str	r3, [r7, #32]
 8013bd6:	6a3a      	ldr	r2, [r7, #32]
 8013bd8:	697b      	ldr	r3, [r7, #20]
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d3e6      	bcc.n	8013bac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bde:	8bfb      	ldrh	r3, [r7, #30]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d01e      	beq.n	8013c22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013be4:	2300      	movs	r3, #0
 8013be6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013be8:	69bb      	ldr	r3, [r7, #24]
 8013bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bee:	461a      	mov	r2, r3
 8013bf0:	f107 0310 	add.w	r3, r7, #16
 8013bf4:	6812      	ldr	r2, [r2, #0]
 8013bf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013bf8:	693a      	ldr	r2, [r7, #16]
 8013bfa:	6a3b      	ldr	r3, [r7, #32]
 8013bfc:	b2db      	uxtb	r3, r3
 8013bfe:	00db      	lsls	r3, r3, #3
 8013c00:	fa22 f303 	lsr.w	r3, r2, r3
 8013c04:	b2da      	uxtb	r2, r3
 8013c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c08:	701a      	strb	r2, [r3, #0]
      i++;
 8013c0a:	6a3b      	ldr	r3, [r7, #32]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8013c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c12:	3301      	adds	r3, #1
 8013c14:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013c16:	8bfb      	ldrh	r3, [r7, #30]
 8013c18:	3b01      	subs	r3, #1
 8013c1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013c1c:	8bfb      	ldrh	r3, [r7, #30]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d1ea      	bne.n	8013bf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	372c      	adds	r7, #44	; 0x2c
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c2e:	4770      	bx	lr

08013c30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c30:	b480      	push	{r7}
 8013c32:	b085      	sub	sp, #20
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c3e:	683b      	ldr	r3, [r7, #0]
 8013c40:	781b      	ldrb	r3, [r3, #0]
 8013c42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	785b      	ldrb	r3, [r3, #1]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d12c      	bne.n	8013ca6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c4c:	68bb      	ldr	r3, [r7, #8]
 8013c4e:	015a      	lsls	r2, r3, #5
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4413      	add	r3, r2
 8013c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	db12      	blt.n	8013c84 <USB_EPSetStall+0x54>
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d00f      	beq.n	8013c84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	015a      	lsls	r2, r3, #5
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c70:	681b      	ldr	r3, [r3, #0]
 8013c72:	68ba      	ldr	r2, [r7, #8]
 8013c74:	0151      	lsls	r1, r2, #5
 8013c76:	68fa      	ldr	r2, [r7, #12]
 8013c78:	440a      	add	r2, r1
 8013c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c84:	68bb      	ldr	r3, [r7, #8]
 8013c86:	015a      	lsls	r2, r3, #5
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	4413      	add	r3, r2
 8013c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	68ba      	ldr	r2, [r7, #8]
 8013c94:	0151      	lsls	r1, r2, #5
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	440a      	add	r2, r1
 8013c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ca2:	6013      	str	r3, [r2, #0]
 8013ca4:	e02b      	b.n	8013cfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	015a      	lsls	r2, r3, #5
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	4413      	add	r3, r2
 8013cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	db12      	blt.n	8013cde <USB_EPSetStall+0xae>
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d00f      	beq.n	8013cde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	015a      	lsls	r2, r3, #5
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	68ba      	ldr	r2, [r7, #8]
 8013cce:	0151      	lsls	r1, r2, #5
 8013cd0:	68fa      	ldr	r2, [r7, #12]
 8013cd2:	440a      	add	r2, r1
 8013cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cdc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	015a      	lsls	r2, r3, #5
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	4413      	add	r3, r2
 8013ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	68ba      	ldr	r2, [r7, #8]
 8013cee:	0151      	lsls	r1, r2, #5
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	440a      	add	r2, r1
 8013cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013d1a:	683b      	ldr	r3, [r7, #0]
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	785b      	ldrb	r3, [r3, #1]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d128      	bne.n	8013d7a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	015a      	lsls	r2, r3, #5
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	4413      	add	r3, r2
 8013d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	68ba      	ldr	r2, [r7, #8]
 8013d38:	0151      	lsls	r1, r2, #5
 8013d3a:	68fa      	ldr	r2, [r7, #12]
 8013d3c:	440a      	add	r2, r1
 8013d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d46:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	791b      	ldrb	r3, [r3, #4]
 8013d4c:	2b03      	cmp	r3, #3
 8013d4e:	d003      	beq.n	8013d58 <USB_EPClearStall+0x4c>
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	791b      	ldrb	r3, [r3, #4]
 8013d54:	2b02      	cmp	r3, #2
 8013d56:	d138      	bne.n	8013dca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	015a      	lsls	r2, r3, #5
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	4413      	add	r3, r2
 8013d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	68ba      	ldr	r2, [r7, #8]
 8013d68:	0151      	lsls	r1, r2, #5
 8013d6a:	68fa      	ldr	r2, [r7, #12]
 8013d6c:	440a      	add	r2, r1
 8013d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d76:	6013      	str	r3, [r2, #0]
 8013d78:	e027      	b.n	8013dca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	015a      	lsls	r2, r3, #5
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	4413      	add	r3, r2
 8013d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d86:	681b      	ldr	r3, [r3, #0]
 8013d88:	68ba      	ldr	r2, [r7, #8]
 8013d8a:	0151      	lsls	r1, r2, #5
 8013d8c:	68fa      	ldr	r2, [r7, #12]
 8013d8e:	440a      	add	r2, r1
 8013d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d98:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	791b      	ldrb	r3, [r3, #4]
 8013d9e:	2b03      	cmp	r3, #3
 8013da0:	d003      	beq.n	8013daa <USB_EPClearStall+0x9e>
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	791b      	ldrb	r3, [r3, #4]
 8013da6:	2b02      	cmp	r3, #2
 8013da8:	d10f      	bne.n	8013dca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	015a      	lsls	r2, r3, #5
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4413      	add	r3, r2
 8013db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	68ba      	ldr	r2, [r7, #8]
 8013dba:	0151      	lsls	r1, r2, #5
 8013dbc:	68fa      	ldr	r2, [r7, #12]
 8013dbe:	440a      	add	r2, r1
 8013dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013dc8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013dca:	2300      	movs	r3, #0
}
 8013dcc:	4618      	mov	r0, r3
 8013dce:	3714      	adds	r7, #20
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd6:	4770      	bx	lr

08013dd8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b085      	sub	sp, #20
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	460b      	mov	r3, r1
 8013de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	68fa      	ldr	r2, [r7, #12]
 8013df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013df6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013dfa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e02:	681a      	ldr	r2, [r3, #0]
 8013e04:	78fb      	ldrb	r3, [r7, #3]
 8013e06:	011b      	lsls	r3, r3, #4
 8013e08:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013e0c:	68f9      	ldr	r1, [r7, #12]
 8013e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e12:	4313      	orrs	r3, r2
 8013e14:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3714      	adds	r7, #20
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr

08013e24 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b085      	sub	sp, #20
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	68fa      	ldr	r2, [r7, #12]
 8013e3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e3e:	f023 0303 	bic.w	r3, r3, #3
 8013e42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e4a:	685b      	ldr	r3, [r3, #4]
 8013e4c:	68fa      	ldr	r2, [r7, #12]
 8013e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e52:	f023 0302 	bic.w	r3, r3, #2
 8013e56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e58:	2300      	movs	r3, #0
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3714      	adds	r7, #20
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e66:	b480      	push	{r7}
 8013e68:	b085      	sub	sp, #20
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e80:	f023 0303 	bic.w	r3, r3, #3
 8013e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8c:	685b      	ldr	r3, [r3, #4]
 8013e8e:	68fa      	ldr	r2, [r7, #12]
 8013e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e94:	f043 0302 	orr.w	r3, r3, #2
 8013e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e9a:	2300      	movs	r3, #0
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3714      	adds	r7, #20
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea6:	4770      	bx	lr

08013ea8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013ea8:	b480      	push	{r7}
 8013eaa:	b085      	sub	sp, #20
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	695b      	ldr	r3, [r3, #20]
 8013eb4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	699b      	ldr	r3, [r3, #24]
 8013eba:	68fa      	ldr	r2, [r7, #12]
 8013ebc:	4013      	ands	r3, r2
 8013ebe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013ec0:	68fb      	ldr	r3, [r7, #12]
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3714      	adds	r7, #20
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr

08013ece <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ece:	b480      	push	{r7}
 8013ed0:	b085      	sub	sp, #20
 8013ed2:	af00      	add	r7, sp, #0
 8013ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ee0:	699b      	ldr	r3, [r3, #24]
 8013ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eea:	69db      	ldr	r3, [r3, #28]
 8013eec:	68ba      	ldr	r2, [r7, #8]
 8013eee:	4013      	ands	r3, r2
 8013ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	0c1b      	lsrs	r3, r3, #16
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3714      	adds	r7, #20
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr

08013f02 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013f02:	b480      	push	{r7}
 8013f04:	b085      	sub	sp, #20
 8013f06:	af00      	add	r7, sp, #0
 8013f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f14:	699b      	ldr	r3, [r3, #24]
 8013f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f1e:	69db      	ldr	r3, [r3, #28]
 8013f20:	68ba      	ldr	r2, [r7, #8]
 8013f22:	4013      	ands	r3, r2
 8013f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	b29b      	uxth	r3, r3
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3714      	adds	r7, #20
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f34:	4770      	bx	lr

08013f36 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f36:	b480      	push	{r7}
 8013f38:	b085      	sub	sp, #20
 8013f3a:	af00      	add	r7, sp, #0
 8013f3c:	6078      	str	r0, [r7, #4]
 8013f3e:	460b      	mov	r3, r1
 8013f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f46:	78fb      	ldrb	r3, [r7, #3]
 8013f48:	015a      	lsls	r2, r3, #5
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	4413      	add	r3, r2
 8013f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f52:	689b      	ldr	r3, [r3, #8]
 8013f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f5c:	695b      	ldr	r3, [r3, #20]
 8013f5e:	68ba      	ldr	r2, [r7, #8]
 8013f60:	4013      	ands	r3, r2
 8013f62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f64:	68bb      	ldr	r3, [r7, #8]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3714      	adds	r7, #20
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr

08013f72 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f72:	b480      	push	{r7}
 8013f74:	b087      	sub	sp, #28
 8013f76:	af00      	add	r7, sp, #0
 8013f78:	6078      	str	r0, [r7, #4]
 8013f7a:	460b      	mov	r3, r1
 8013f7c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f88:	691b      	ldr	r3, [r3, #16]
 8013f8a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f94:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013f96:	78fb      	ldrb	r3, [r7, #3]
 8013f98:	f003 030f 	and.w	r3, r3, #15
 8013f9c:	68fa      	ldr	r2, [r7, #12]
 8013f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8013fa2:	01db      	lsls	r3, r3, #7
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	693a      	ldr	r2, [r7, #16]
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013fac:	78fb      	ldrb	r3, [r7, #3]
 8013fae:	015a      	lsls	r2, r3, #5
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	4413      	add	r3, r2
 8013fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb8:	689b      	ldr	r3, [r3, #8]
 8013fba:	693a      	ldr	r2, [r7, #16]
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013fc0:	68bb      	ldr	r3, [r7, #8]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	371c      	adds	r7, #28
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fcc:	4770      	bx	lr

08013fce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fce:	b480      	push	{r7}
 8013fd0:	b083      	sub	sp, #12
 8013fd2:	af00      	add	r7, sp, #0
 8013fd4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	695b      	ldr	r3, [r3, #20]
 8013fda:	f003 0301 	and.w	r3, r3, #1
}
 8013fde:	4618      	mov	r0, r3
 8013fe0:	370c      	adds	r7, #12
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe8:	4770      	bx	lr
	...

08013fec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b085      	sub	sp, #20
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffe:	681a      	ldr	r2, [r3, #0]
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014006:	4619      	mov	r1, r3
 8014008:	4b09      	ldr	r3, [pc, #36]	; (8014030 <USB_ActivateSetup+0x44>)
 801400a:	4013      	ands	r3, r2
 801400c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014014:	685b      	ldr	r3, [r3, #4]
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801401c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014020:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014022:	2300      	movs	r3, #0
}
 8014024:	4618      	mov	r0, r3
 8014026:	3714      	adds	r7, #20
 8014028:	46bd      	mov	sp, r7
 801402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402e:	4770      	bx	lr
 8014030:	fffff800 	.word	0xfffff800

08014034 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014034:	b480      	push	{r7}
 8014036:	b087      	sub	sp, #28
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	460b      	mov	r3, r1
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	333c      	adds	r3, #60	; 0x3c
 801404a:	3304      	adds	r3, #4
 801404c:	681b      	ldr	r3, [r3, #0]
 801404e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	4a26      	ldr	r2, [pc, #152]	; (80140ec <USB_EP0_OutStart+0xb8>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d90a      	bls.n	801406e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014058:	697b      	ldr	r3, [r7, #20]
 801405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014068:	d101      	bne.n	801406e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801406a:	2300      	movs	r3, #0
 801406c:	e037      	b.n	80140de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014074:	461a      	mov	r2, r3
 8014076:	2300      	movs	r3, #0
 8014078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014080:	691b      	ldr	r3, [r3, #16]
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801408c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801408e:	697b      	ldr	r3, [r7, #20]
 8014090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014094:	691b      	ldr	r3, [r3, #16]
 8014096:	697a      	ldr	r2, [r7, #20]
 8014098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801409c:	f043 0318 	orr.w	r3, r3, #24
 80140a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a8:	691b      	ldr	r3, [r3, #16]
 80140aa:	697a      	ldr	r2, [r7, #20]
 80140ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80140b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80140b6:	7afb      	ldrb	r3, [r7, #11]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d10f      	bne.n	80140dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140c2:	461a      	mov	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	697a      	ldr	r2, [r7, #20]
 80140d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	371c      	adds	r7, #28
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	4f54300a 	.word	0x4f54300a

080140f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b085      	sub	sp, #20
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80140f8:	2300      	movs	r3, #0
 80140fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	3301      	adds	r3, #1
 8014100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	4a13      	ldr	r2, [pc, #76]	; (8014154 <USB_CoreReset+0x64>)
 8014106:	4293      	cmp	r3, r2
 8014108:	d901      	bls.n	801410e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801410a:	2303      	movs	r3, #3
 801410c:	e01b      	b.n	8014146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	691b      	ldr	r3, [r3, #16]
 8014112:	2b00      	cmp	r3, #0
 8014114:	daf2      	bge.n	80140fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014116:	2300      	movs	r3, #0
 8014118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	691b      	ldr	r3, [r3, #16]
 801411e:	f043 0201 	orr.w	r2, r3, #1
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	3301      	adds	r3, #1
 801412a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	4a09      	ldr	r2, [pc, #36]	; (8014154 <USB_CoreReset+0x64>)
 8014130:	4293      	cmp	r3, r2
 8014132:	d901      	bls.n	8014138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014134:	2303      	movs	r3, #3
 8014136:	e006      	b.n	8014146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	691b      	ldr	r3, [r3, #16]
 801413c:	f003 0301 	and.w	r3, r3, #1
 8014140:	2b01      	cmp	r3, #1
 8014142:	d0f0      	beq.n	8014126 <USB_CoreReset+0x36>

  return HAL_OK;
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3714      	adds	r7, #20
 801414a:	46bd      	mov	sp, r7
 801414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop
 8014154:	00030d40 	.word	0x00030d40

08014158 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801415c:	4904      	ldr	r1, [pc, #16]	; (8014170 <MX_FATFS_Init+0x18>)
 801415e:	4805      	ldr	r0, [pc, #20]	; (8014174 <MX_FATFS_Init+0x1c>)
 8014160:	f002 fa56 	bl	8016610 <FATFS_LinkDriver>
 8014164:	4603      	mov	r3, r0
 8014166:	461a      	mov	r2, r3
 8014168:	4b03      	ldr	r3, [pc, #12]	; (8014178 <MX_FATFS_Init+0x20>)
 801416a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801416c:	bf00      	nop
 801416e:	bd80      	pop	{r7, pc}
 8014170:	240015d8 	.word	0x240015d8
 8014174:	080185cc 	.word	0x080185cc
 8014178:	240015d4 	.word	0x240015d4

0801417c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b082      	sub	sp, #8
 8014180:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014182:	2300      	movs	r3, #0
 8014184:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014186:	f000 f885 	bl	8014294 <BSP_SD_IsDetected>
 801418a:	4603      	mov	r3, r0
 801418c:	2b01      	cmp	r3, #1
 801418e:	d001      	beq.n	8014194 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014190:	2302      	movs	r3, #2
 8014192:	e012      	b.n	80141ba <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014194:	480b      	ldr	r0, [pc, #44]	; (80141c4 <BSP_SD_Init+0x48>)
 8014196:	f7f8 ff41 	bl	800d01c <HAL_SD_Init>
 801419a:	4603      	mov	r3, r0
 801419c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801419e:	79fb      	ldrb	r3, [r7, #7]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d109      	bne.n	80141b8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80141a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80141a8:	4806      	ldr	r0, [pc, #24]	; (80141c4 <BSP_SD_Init+0x48>)
 80141aa:	f7f9 fdf7 	bl	800dd9c <HAL_SD_ConfigWideBusOperation>
 80141ae:	4603      	mov	r3, r0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d001      	beq.n	80141b8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80141b4:	2301      	movs	r3, #1
 80141b6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80141b8:	79fb      	ldrb	r3, [r7, #7]
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3708      	adds	r7, #8
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	24000ebc 	.word	0x24000ebc

080141c8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b086      	sub	sp, #24
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141d4:	2300      	movs	r3, #0
 80141d6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	68ba      	ldr	r2, [r7, #8]
 80141dc:	68f9      	ldr	r1, [r7, #12]
 80141de:	4806      	ldr	r0, [pc, #24]	; (80141f8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141e0:	f7f9 f83c 	bl	800d25c <HAL_SD_ReadBlocks_DMA>
 80141e4:	4603      	mov	r3, r0
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d001      	beq.n	80141ee <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141ea:	2301      	movs	r3, #1
 80141ec:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3718      	adds	r7, #24
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	24000ebc 	.word	0x24000ebc

080141fc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80141fc:	b580      	push	{r7, lr}
 80141fe:	b086      	sub	sp, #24
 8014200:	af00      	add	r7, sp, #0
 8014202:	60f8      	str	r0, [r7, #12]
 8014204:	60b9      	str	r1, [r7, #8]
 8014206:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014208:	2300      	movs	r3, #0
 801420a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	68ba      	ldr	r2, [r7, #8]
 8014210:	68f9      	ldr	r1, [r7, #12]
 8014212:	4806      	ldr	r0, [pc, #24]	; (801422c <BSP_SD_WriteBlocks_DMA+0x30>)
 8014214:	f7f9 f8ca 	bl	800d3ac <HAL_SD_WriteBlocks_DMA>
 8014218:	4603      	mov	r3, r0
 801421a:	2b00      	cmp	r3, #0
 801421c:	d001      	beq.n	8014222 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801421e:	2301      	movs	r3, #1
 8014220:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014222:	7dfb      	ldrb	r3, [r7, #23]
}
 8014224:	4618      	mov	r0, r3
 8014226:	3718      	adds	r7, #24
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	24000ebc 	.word	0x24000ebc

08014230 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014234:	4805      	ldr	r0, [pc, #20]	; (801424c <BSP_SD_GetCardState+0x1c>)
 8014236:	f7f9 fec3 	bl	800dfc0 <HAL_SD_GetCardState>
 801423a:	4603      	mov	r3, r0
 801423c:	2b04      	cmp	r3, #4
 801423e:	bf14      	ite	ne
 8014240:	2301      	movne	r3, #1
 8014242:	2300      	moveq	r3, #0
 8014244:	b2db      	uxtb	r3, r3
}
 8014246:	4618      	mov	r0, r3
 8014248:	bd80      	pop	{r7, pc}
 801424a:	bf00      	nop
 801424c:	24000ebc 	.word	0x24000ebc

08014250 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014258:	6879      	ldr	r1, [r7, #4]
 801425a:	4803      	ldr	r0, [pc, #12]	; (8014268 <BSP_SD_GetCardInfo+0x18>)
 801425c:	f7f9 fd72 	bl	800dd44 <HAL_SD_GetCardInfo>
}
 8014260:	bf00      	nop
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	24000ebc 	.word	0x24000ebc

0801426c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014274:	f000 f9a0 	bl	80145b8 <BSP_SD_WriteCpltCallback>
}
 8014278:	bf00      	nop
 801427a:	3708      	adds	r7, #8
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}

08014280 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014280:	b580      	push	{r7, lr}
 8014282:	b082      	sub	sp, #8
 8014284:	af00      	add	r7, sp, #0
 8014286:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014288:	f000 f9a2 	bl	80145d0 <BSP_SD_ReadCpltCallback>
}
 801428c:	bf00      	nop
 801428e:	3708      	adds	r7, #8
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}

08014294 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801429a:	2301      	movs	r3, #1
 801429c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801429e:	f000 f80b 	bl	80142b8 <BSP_PlatformIsDetected>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d101      	bne.n	80142ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80142a8:	2300      	movs	r3, #0
 80142aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80142ac:	79fb      	ldrb	r3, [r7, #7]
 80142ae:	b2db      	uxtb	r3, r3
}
 80142b0:	4618      	mov	r0, r3
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}

080142b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80142b8:	b580      	push	{r7, lr}
 80142ba:	b082      	sub	sp, #8
 80142bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80142be:	2301      	movs	r3, #1
 80142c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80142c2:	2104      	movs	r1, #4
 80142c4:	4806      	ldr	r0, [pc, #24]	; (80142e0 <BSP_PlatformIsDetected+0x28>)
 80142c6:	f7f3 fe7d 	bl	8007fc4 <HAL_GPIO_ReadPin>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d001      	beq.n	80142d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142d0:	2300      	movs	r3, #0
 80142d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142d4:	79fb      	ldrb	r3, [r7, #7]
}
 80142d6:	4618      	mov	r0, r3
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	58020400 	.word	0x58020400

080142e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80142ec:	f7ef fbc4 	bl	8003a78 <HAL_GetTick>
 80142f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80142f2:	e006      	b.n	8014302 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142f4:	f7ff ff9c 	bl	8014230 <BSP_SD_GetCardState>
 80142f8:	4603      	mov	r3, r0
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d101      	bne.n	8014302 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80142fe:	2300      	movs	r3, #0
 8014300:	e009      	b.n	8014316 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014302:	f7ef fbb9 	bl	8003a78 <HAL_GetTick>
 8014306:	4602      	mov	r2, r0
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	1ad3      	subs	r3, r2, r3
 801430c:	687a      	ldr	r2, [r7, #4]
 801430e:	429a      	cmp	r2, r3
 8014310:	d8f0      	bhi.n	80142f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014316:	4618      	mov	r0, r3
 8014318:	3710      	adds	r7, #16
 801431a:	46bd      	mov	sp, r7
 801431c:	bd80      	pop	{r7, pc}
	...

08014320 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014320:	b580      	push	{r7, lr}
 8014322:	b082      	sub	sp, #8
 8014324:	af00      	add	r7, sp, #0
 8014326:	4603      	mov	r3, r0
 8014328:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801432a:	4b0b      	ldr	r3, [pc, #44]	; (8014358 <SD_CheckStatus+0x38>)
 801432c:	2201      	movs	r2, #1
 801432e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014330:	f7ff ff7e 	bl	8014230 <BSP_SD_GetCardState>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d107      	bne.n	801434a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801433a:	4b07      	ldr	r3, [pc, #28]	; (8014358 <SD_CheckStatus+0x38>)
 801433c:	781b      	ldrb	r3, [r3, #0]
 801433e:	b2db      	uxtb	r3, r3
 8014340:	f023 0301 	bic.w	r3, r3, #1
 8014344:	b2da      	uxtb	r2, r3
 8014346:	4b04      	ldr	r3, [pc, #16]	; (8014358 <SD_CheckStatus+0x38>)
 8014348:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801434a:	4b03      	ldr	r3, [pc, #12]	; (8014358 <SD_CheckStatus+0x38>)
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	b2db      	uxtb	r3, r3
}
 8014350:	4618      	mov	r0, r3
 8014352:	3708      	adds	r7, #8
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	2400000d 	.word	0x2400000d

0801435c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	4603      	mov	r3, r0
 8014364:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8014366:	f7ff ff09 	bl	801417c <BSP_SD_Init>
 801436a:	4603      	mov	r3, r0
 801436c:	2b00      	cmp	r3, #0
 801436e:	d107      	bne.n	8014380 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014370:	79fb      	ldrb	r3, [r7, #7]
 8014372:	4618      	mov	r0, r3
 8014374:	f7ff ffd4 	bl	8014320 <SD_CheckStatus>
 8014378:	4603      	mov	r3, r0
 801437a:	461a      	mov	r2, r3
 801437c:	4b04      	ldr	r3, [pc, #16]	; (8014390 <SD_initialize+0x34>)
 801437e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014380:	4b03      	ldr	r3, [pc, #12]	; (8014390 <SD_initialize+0x34>)
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	b2db      	uxtb	r3, r3
}
 8014386:	4618      	mov	r0, r3
 8014388:	3708      	adds	r7, #8
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}
 801438e:	bf00      	nop
 8014390:	2400000d 	.word	0x2400000d

08014394 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	4603      	mov	r3, r0
 801439c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7ff ffbd 	bl	8014320 <SD_CheckStatus>
 80143a6:	4603      	mov	r3, r0
}
 80143a8:	4618      	mov	r0, r3
 80143aa:	3708      	adds	r7, #8
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b086      	sub	sp, #24
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	60b9      	str	r1, [r7, #8]
 80143b8:	607a      	str	r2, [r7, #4]
 80143ba:	603b      	str	r3, [r7, #0]
 80143bc:	4603      	mov	r3, r0
 80143be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80143c0:	2301      	movs	r3, #1
 80143c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80143c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80143c8:	f7ff ff8c 	bl	80142e4 <SD_CheckStatusWithTimeout>
 80143cc:	4603      	mov	r3, r0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	da01      	bge.n	80143d6 <SD_read+0x26>
  {
    return res;
 80143d2:	7dfb      	ldrb	r3, [r7, #23]
 80143d4:	e03b      	b.n	801444e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143d6:	683a      	ldr	r2, [r7, #0]
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	68b8      	ldr	r0, [r7, #8]
 80143dc:	f7ff fef4 	bl	80141c8 <BSP_SD_ReadBlocks_DMA>
 80143e0:	4603      	mov	r3, r0
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d132      	bne.n	801444c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143e6:	4b1c      	ldr	r3, [pc, #112]	; (8014458 <SD_read+0xa8>)
 80143e8:	2200      	movs	r2, #0
 80143ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80143ec:	f7ef fb44 	bl	8003a78 <HAL_GetTick>
 80143f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143f2:	bf00      	nop
 80143f4:	4b18      	ldr	r3, [pc, #96]	; (8014458 <SD_read+0xa8>)
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d108      	bne.n	801440e <SD_read+0x5e>
 80143fc:	f7ef fb3c 	bl	8003a78 <HAL_GetTick>
 8014400:	4602      	mov	r2, r0
 8014402:	693b      	ldr	r3, [r7, #16]
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	f247 522f 	movw	r2, #29999	; 0x752f
 801440a:	4293      	cmp	r3, r2
 801440c:	d9f2      	bls.n	80143f4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801440e:	4b12      	ldr	r3, [pc, #72]	; (8014458 <SD_read+0xa8>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d102      	bne.n	801441c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014416:	2301      	movs	r3, #1
 8014418:	75fb      	strb	r3, [r7, #23]
 801441a:	e017      	b.n	801444c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801441c:	4b0e      	ldr	r3, [pc, #56]	; (8014458 <SD_read+0xa8>)
 801441e:	2200      	movs	r2, #0
 8014420:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014422:	f7ef fb29 	bl	8003a78 <HAL_GetTick>
 8014426:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014428:	e007      	b.n	801443a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801442a:	f7ff ff01 	bl	8014230 <BSP_SD_GetCardState>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d102      	bne.n	801443a <SD_read+0x8a>
          {
            res = RES_OK;
 8014434:	2300      	movs	r3, #0
 8014436:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014438:	e008      	b.n	801444c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801443a:	f7ef fb1d 	bl	8003a78 <HAL_GetTick>
 801443e:	4602      	mov	r2, r0
 8014440:	693b      	ldr	r3, [r7, #16]
 8014442:	1ad3      	subs	r3, r2, r3
 8014444:	f247 522f 	movw	r2, #29999	; 0x752f
 8014448:	4293      	cmp	r3, r2
 801444a:	d9ee      	bls.n	801442a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801444c:	7dfb      	ldrb	r3, [r7, #23]
}
 801444e:	4618      	mov	r0, r3
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	240015e0 	.word	0x240015e0

0801445c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b086      	sub	sp, #24
 8014460:	af00      	add	r7, sp, #0
 8014462:	60b9      	str	r1, [r7, #8]
 8014464:	607a      	str	r2, [r7, #4]
 8014466:	603b      	str	r3, [r7, #0]
 8014468:	4603      	mov	r3, r0
 801446a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801446c:	2301      	movs	r3, #1
 801446e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014470:	4b24      	ldr	r3, [pc, #144]	; (8014504 <SD_write+0xa8>)
 8014472:	2200      	movs	r2, #0
 8014474:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014476:	f247 5030 	movw	r0, #30000	; 0x7530
 801447a:	f7ff ff33 	bl	80142e4 <SD_CheckStatusWithTimeout>
 801447e:	4603      	mov	r3, r0
 8014480:	2b00      	cmp	r3, #0
 8014482:	da01      	bge.n	8014488 <SD_write+0x2c>
  {
    return res;
 8014484:	7dfb      	ldrb	r3, [r7, #23]
 8014486:	e038      	b.n	80144fa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014488:	683a      	ldr	r2, [r7, #0]
 801448a:	6879      	ldr	r1, [r7, #4]
 801448c:	68b8      	ldr	r0, [r7, #8]
 801448e:	f7ff feb5 	bl	80141fc <BSP_SD_WriteBlocks_DMA>
 8014492:	4603      	mov	r3, r0
 8014494:	2b00      	cmp	r3, #0
 8014496:	d12f      	bne.n	80144f8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014498:	f7ef faee 	bl	8003a78 <HAL_GetTick>
 801449c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801449e:	bf00      	nop
 80144a0:	4b18      	ldr	r3, [pc, #96]	; (8014504 <SD_write+0xa8>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d108      	bne.n	80144ba <SD_write+0x5e>
 80144a8:	f7ef fae6 	bl	8003a78 <HAL_GetTick>
 80144ac:	4602      	mov	r2, r0
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	1ad3      	subs	r3, r2, r3
 80144b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80144b6:	4293      	cmp	r3, r2
 80144b8:	d9f2      	bls.n	80144a0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80144ba:	4b12      	ldr	r3, [pc, #72]	; (8014504 <SD_write+0xa8>)
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d102      	bne.n	80144c8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80144c2:	2301      	movs	r3, #1
 80144c4:	75fb      	strb	r3, [r7, #23]
 80144c6:	e017      	b.n	80144f8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144c8:	4b0e      	ldr	r3, [pc, #56]	; (8014504 <SD_write+0xa8>)
 80144ca:	2200      	movs	r2, #0
 80144cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144ce:	f7ef fad3 	bl	8003a78 <HAL_GetTick>
 80144d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144d4:	e007      	b.n	80144e6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144d6:	f7ff feab 	bl	8014230 <BSP_SD_GetCardState>
 80144da:	4603      	mov	r3, r0
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d102      	bne.n	80144e6 <SD_write+0x8a>
          {
            res = RES_OK;
 80144e0:	2300      	movs	r3, #0
 80144e2:	75fb      	strb	r3, [r7, #23]
            break;
 80144e4:	e008      	b.n	80144f8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144e6:	f7ef fac7 	bl	8003a78 <HAL_GetTick>
 80144ea:	4602      	mov	r2, r0
 80144ec:	693b      	ldr	r3, [r7, #16]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80144f4:	4293      	cmp	r3, r2
 80144f6:	d9ee      	bls.n	80144d6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80144f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3718      	adds	r7, #24
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	240015dc 	.word	0x240015dc

08014508 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b08c      	sub	sp, #48	; 0x30
 801450c:	af00      	add	r7, sp, #0
 801450e:	4603      	mov	r3, r0
 8014510:	603a      	str	r2, [r7, #0]
 8014512:	71fb      	strb	r3, [r7, #7]
 8014514:	460b      	mov	r3, r1
 8014516:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014518:	2301      	movs	r3, #1
 801451a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801451e:	4b25      	ldr	r3, [pc, #148]	; (80145b4 <SD_ioctl+0xac>)
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	b2db      	uxtb	r3, r3
 8014524:	f003 0301 	and.w	r3, r3, #1
 8014528:	2b00      	cmp	r3, #0
 801452a:	d001      	beq.n	8014530 <SD_ioctl+0x28>
 801452c:	2303      	movs	r3, #3
 801452e:	e03c      	b.n	80145aa <SD_ioctl+0xa2>

  switch (cmd)
 8014530:	79bb      	ldrb	r3, [r7, #6]
 8014532:	2b03      	cmp	r3, #3
 8014534:	d834      	bhi.n	80145a0 <SD_ioctl+0x98>
 8014536:	a201      	add	r2, pc, #4	; (adr r2, 801453c <SD_ioctl+0x34>)
 8014538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453c:	0801454d 	.word	0x0801454d
 8014540:	08014555 	.word	0x08014555
 8014544:	0801456d 	.word	0x0801456d
 8014548:	08014587 	.word	0x08014587
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801454c:	2300      	movs	r3, #0
 801454e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014552:	e028      	b.n	80145a6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014554:	f107 0308 	add.w	r3, r7, #8
 8014558:	4618      	mov	r0, r3
 801455a:	f7ff fe79 	bl	8014250 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801455e:	6a3a      	ldr	r2, [r7, #32]
 8014560:	683b      	ldr	r3, [r7, #0]
 8014562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014564:	2300      	movs	r3, #0
 8014566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801456a:	e01c      	b.n	80145a6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801456c:	f107 0308 	add.w	r3, r7, #8
 8014570:	4618      	mov	r0, r3
 8014572:	f7ff fe6d 	bl	8014250 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014578:	b29a      	uxth	r2, r3
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801457e:	2300      	movs	r3, #0
 8014580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014584:	e00f      	b.n	80145a6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014586:	f107 0308 	add.w	r3, r7, #8
 801458a:	4618      	mov	r0, r3
 801458c:	f7ff fe60 	bl	8014250 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014592:	0a5a      	lsrs	r2, r3, #9
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014598:	2300      	movs	r3, #0
 801459a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801459e:	e002      	b.n	80145a6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80145a0:	2304      	movs	r3, #4
 80145a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80145a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80145aa:	4618      	mov	r0, r3
 80145ac:	3730      	adds	r7, #48	; 0x30
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	2400000d 	.word	0x2400000d

080145b8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80145b8:	b480      	push	{r7}
 80145ba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80145bc:	4b03      	ldr	r3, [pc, #12]	; (80145cc <BSP_SD_WriteCpltCallback+0x14>)
 80145be:	2201      	movs	r2, #1
 80145c0:	601a      	str	r2, [r3, #0]
}
 80145c2:	bf00      	nop
 80145c4:	46bd      	mov	sp, r7
 80145c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ca:	4770      	bx	lr
 80145cc:	240015dc 	.word	0x240015dc

080145d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145d0:	b480      	push	{r7}
 80145d2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145d4:	4b03      	ldr	r3, [pc, #12]	; (80145e4 <BSP_SD_ReadCpltCallback+0x14>)
 80145d6:	2201      	movs	r2, #1
 80145d8:	601a      	str	r2, [r3, #0]
}
 80145da:	bf00      	nop
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr
 80145e4:	240015e0 	.word	0x240015e0

080145e8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145e8:	b580      	push	{r7, lr}
 80145ea:	b084      	sub	sp, #16
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
 80145f0:	460b      	mov	r3, r1
 80145f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80145f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80145f8:	f002 fd00 	bl	8016ffc <USBD_static_malloc>
 80145fc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d109      	bne.n	8014618 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	32b0      	adds	r2, #176	; 0xb0
 801460e:	2100      	movs	r1, #0
 8014610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014614:	2302      	movs	r3, #2
 8014616:	e0d4      	b.n	80147c2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014618:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801461c:	2100      	movs	r1, #0
 801461e:	68f8      	ldr	r0, [r7, #12]
 8014620:	f002 fd7e 	bl	8017120 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	32b0      	adds	r2, #176	; 0xb0
 801462e:	68f9      	ldr	r1, [r7, #12]
 8014630:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	32b0      	adds	r2, #176	; 0xb0
 801463e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	7c1b      	ldrb	r3, [r3, #16]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d138      	bne.n	80146c2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014650:	4b5e      	ldr	r3, [pc, #376]	; (80147cc <USBD_CDC_Init+0x1e4>)
 8014652:	7819      	ldrb	r1, [r3, #0]
 8014654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014658:	2202      	movs	r2, #2
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f002 fbab 	bl	8016db6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014660:	4b5a      	ldr	r3, [pc, #360]	; (80147cc <USBD_CDC_Init+0x1e4>)
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	f003 020f 	and.w	r2, r3, #15
 8014668:	6879      	ldr	r1, [r7, #4]
 801466a:	4613      	mov	r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	4413      	add	r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	440b      	add	r3, r1
 8014674:	3324      	adds	r3, #36	; 0x24
 8014676:	2201      	movs	r2, #1
 8014678:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801467a:	4b55      	ldr	r3, [pc, #340]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 801467c:	7819      	ldrb	r1, [r3, #0]
 801467e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014682:	2202      	movs	r2, #2
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f002 fb96 	bl	8016db6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801468a:	4b51      	ldr	r3, [pc, #324]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	f003 020f 	and.w	r2, r3, #15
 8014692:	6879      	ldr	r1, [r7, #4]
 8014694:	4613      	mov	r3, r2
 8014696:	009b      	lsls	r3, r3, #2
 8014698:	4413      	add	r3, r2
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	440b      	add	r3, r1
 801469e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146a2:	2201      	movs	r2, #1
 80146a4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80146a6:	4b4b      	ldr	r3, [pc, #300]	; (80147d4 <USBD_CDC_Init+0x1ec>)
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	f003 020f 	and.w	r2, r3, #15
 80146ae:	6879      	ldr	r1, [r7, #4]
 80146b0:	4613      	mov	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	4413      	add	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	440b      	add	r3, r1
 80146ba:	3326      	adds	r3, #38	; 0x26
 80146bc:	2210      	movs	r2, #16
 80146be:	801a      	strh	r2, [r3, #0]
 80146c0:	e035      	b.n	801472e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80146c2:	4b42      	ldr	r3, [pc, #264]	; (80147cc <USBD_CDC_Init+0x1e4>)
 80146c4:	7819      	ldrb	r1, [r3, #0]
 80146c6:	2340      	movs	r3, #64	; 0x40
 80146c8:	2202      	movs	r2, #2
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f002 fb73 	bl	8016db6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146d0:	4b3e      	ldr	r3, [pc, #248]	; (80147cc <USBD_CDC_Init+0x1e4>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 020f 	and.w	r2, r3, #15
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	4613      	mov	r3, r2
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	4413      	add	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	440b      	add	r3, r1
 80146e4:	3324      	adds	r3, #36	; 0x24
 80146e6:	2201      	movs	r2, #1
 80146e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146ea:	4b39      	ldr	r3, [pc, #228]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 80146ec:	7819      	ldrb	r1, [r3, #0]
 80146ee:	2340      	movs	r3, #64	; 0x40
 80146f0:	2202      	movs	r2, #2
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f002 fb5f 	bl	8016db6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146f8:	4b35      	ldr	r3, [pc, #212]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 80146fa:	781b      	ldrb	r3, [r3, #0]
 80146fc:	f003 020f 	and.w	r2, r3, #15
 8014700:	6879      	ldr	r1, [r7, #4]
 8014702:	4613      	mov	r3, r2
 8014704:	009b      	lsls	r3, r3, #2
 8014706:	4413      	add	r3, r2
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	440b      	add	r3, r1
 801470c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014710:	2201      	movs	r2, #1
 8014712:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014714:	4b2f      	ldr	r3, [pc, #188]	; (80147d4 <USBD_CDC_Init+0x1ec>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	f003 020f 	and.w	r2, r3, #15
 801471c:	6879      	ldr	r1, [r7, #4]
 801471e:	4613      	mov	r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	4413      	add	r3, r2
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	440b      	add	r3, r1
 8014728:	3326      	adds	r3, #38	; 0x26
 801472a:	2210      	movs	r2, #16
 801472c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801472e:	4b29      	ldr	r3, [pc, #164]	; (80147d4 <USBD_CDC_Init+0x1ec>)
 8014730:	7819      	ldrb	r1, [r3, #0]
 8014732:	2308      	movs	r3, #8
 8014734:	2203      	movs	r2, #3
 8014736:	6878      	ldr	r0, [r7, #4]
 8014738:	f002 fb3d 	bl	8016db6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801473c:	4b25      	ldr	r3, [pc, #148]	; (80147d4 <USBD_CDC_Init+0x1ec>)
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	f003 020f 	and.w	r2, r3, #15
 8014744:	6879      	ldr	r1, [r7, #4]
 8014746:	4613      	mov	r3, r2
 8014748:	009b      	lsls	r3, r3, #2
 801474a:	4413      	add	r3, r2
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	440b      	add	r3, r1
 8014750:	3324      	adds	r3, #36	; 0x24
 8014752:	2201      	movs	r2, #1
 8014754:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	2200      	movs	r2, #0
 801475a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014764:	687a      	ldr	r2, [r7, #4]
 8014766:	33b0      	adds	r3, #176	; 0xb0
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	4413      	add	r3, r2
 801476c:	685b      	ldr	r3, [r3, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2200      	movs	r2, #0
 8014776:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2200      	movs	r2, #0
 801477e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014788:	2b00      	cmp	r3, #0
 801478a:	d101      	bne.n	8014790 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801478c:	2302      	movs	r3, #2
 801478e:	e018      	b.n	80147c2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	7c1b      	ldrb	r3, [r3, #16]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d10a      	bne.n	80147ae <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014798:	4b0d      	ldr	r3, [pc, #52]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 801479a:	7819      	ldrb	r1, [r3, #0]
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f002 fbf4 	bl	8016f94 <USBD_LL_PrepareReceive>
 80147ac:	e008      	b.n	80147c0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80147ae:	4b08      	ldr	r3, [pc, #32]	; (80147d0 <USBD_CDC_Init+0x1e8>)
 80147b0:	7819      	ldrb	r1, [r3, #0]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80147b8:	2340      	movs	r3, #64	; 0x40
 80147ba:	6878      	ldr	r0, [r7, #4]
 80147bc:	f002 fbea 	bl	8016f94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80147c0:	2300      	movs	r3, #0
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	24000097 	.word	0x24000097
 80147d0:	24000098 	.word	0x24000098
 80147d4:	24000099 	.word	0x24000099

080147d8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b082      	sub	sp, #8
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	460b      	mov	r3, r1
 80147e2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147e4:	4b3a      	ldr	r3, [pc, #232]	; (80148d0 <USBD_CDC_DeInit+0xf8>)
 80147e6:	781b      	ldrb	r3, [r3, #0]
 80147e8:	4619      	mov	r1, r3
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f002 fb09 	bl	8016e02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80147f0:	4b37      	ldr	r3, [pc, #220]	; (80148d0 <USBD_CDC_DeInit+0xf8>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	f003 020f 	and.w	r2, r3, #15
 80147f8:	6879      	ldr	r1, [r7, #4]
 80147fa:	4613      	mov	r3, r2
 80147fc:	009b      	lsls	r3, r3, #2
 80147fe:	4413      	add	r3, r2
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	440b      	add	r3, r1
 8014804:	3324      	adds	r3, #36	; 0x24
 8014806:	2200      	movs	r2, #0
 8014808:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801480a:	4b32      	ldr	r3, [pc, #200]	; (80148d4 <USBD_CDC_DeInit+0xfc>)
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	4619      	mov	r1, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f002 faf6 	bl	8016e02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014816:	4b2f      	ldr	r3, [pc, #188]	; (80148d4 <USBD_CDC_DeInit+0xfc>)
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f003 020f 	and.w	r2, r3, #15
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	4613      	mov	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	4413      	add	r3, r2
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	440b      	add	r3, r1
 801482a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801482e:	2200      	movs	r2, #0
 8014830:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014832:	4b29      	ldr	r3, [pc, #164]	; (80148d8 <USBD_CDC_DeInit+0x100>)
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	4619      	mov	r1, r3
 8014838:	6878      	ldr	r0, [r7, #4]
 801483a:	f002 fae2 	bl	8016e02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801483e:	4b26      	ldr	r3, [pc, #152]	; (80148d8 <USBD_CDC_DeInit+0x100>)
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	f003 020f 	and.w	r2, r3, #15
 8014846:	6879      	ldr	r1, [r7, #4]
 8014848:	4613      	mov	r3, r2
 801484a:	009b      	lsls	r3, r3, #2
 801484c:	4413      	add	r3, r2
 801484e:	009b      	lsls	r3, r3, #2
 8014850:	440b      	add	r3, r1
 8014852:	3324      	adds	r3, #36	; 0x24
 8014854:	2200      	movs	r2, #0
 8014856:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014858:	4b1f      	ldr	r3, [pc, #124]	; (80148d8 <USBD_CDC_DeInit+0x100>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	f003 020f 	and.w	r2, r3, #15
 8014860:	6879      	ldr	r1, [r7, #4]
 8014862:	4613      	mov	r3, r2
 8014864:	009b      	lsls	r3, r3, #2
 8014866:	4413      	add	r3, r2
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	440b      	add	r3, r1
 801486c:	3326      	adds	r3, #38	; 0x26
 801486e:	2200      	movs	r2, #0
 8014870:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	32b0      	adds	r2, #176	; 0xb0
 801487c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d01f      	beq.n	80148c4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	33b0      	adds	r3, #176	; 0xb0
 801488e:	009b      	lsls	r3, r3, #2
 8014890:	4413      	add	r3, r2
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	32b0      	adds	r2, #176	; 0xb0
 80148a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148a6:	4618      	mov	r0, r3
 80148a8:	f002 fbb6 	bl	8017018 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	32b0      	adds	r2, #176	; 0xb0
 80148b6:	2100      	movs	r1, #0
 80148b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2200      	movs	r2, #0
 80148c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80148c4:	2300      	movs	r3, #0
}
 80148c6:	4618      	mov	r0, r3
 80148c8:	3708      	adds	r7, #8
 80148ca:	46bd      	mov	sp, r7
 80148cc:	bd80      	pop	{r7, pc}
 80148ce:	bf00      	nop
 80148d0:	24000097 	.word	0x24000097
 80148d4:	24000098 	.word	0x24000098
 80148d8:	24000099 	.word	0x24000099

080148dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148dc:	b580      	push	{r7, lr}
 80148de:	b086      	sub	sp, #24
 80148e0:	af00      	add	r7, sp, #0
 80148e2:	6078      	str	r0, [r7, #4]
 80148e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	32b0      	adds	r2, #176	; 0xb0
 80148f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80148f6:	2300      	movs	r3, #0
 80148f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80148fa:	2300      	movs	r3, #0
 80148fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80148fe:	2300      	movs	r3, #0
 8014900:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d101      	bne.n	801490c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014908:	2303      	movs	r3, #3
 801490a:	e0bf      	b.n	8014a8c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014914:	2b00      	cmp	r3, #0
 8014916:	d050      	beq.n	80149ba <USBD_CDC_Setup+0xde>
 8014918:	2b20      	cmp	r3, #32
 801491a:	f040 80af 	bne.w	8014a7c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	88db      	ldrh	r3, [r3, #6]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d03a      	beq.n	801499c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	b25b      	sxtb	r3, r3
 801492c:	2b00      	cmp	r3, #0
 801492e:	da1b      	bge.n	8014968 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014936:	687a      	ldr	r2, [r7, #4]
 8014938:	33b0      	adds	r3, #176	; 0xb0
 801493a:	009b      	lsls	r3, r3, #2
 801493c:	4413      	add	r3, r2
 801493e:	685b      	ldr	r3, [r3, #4]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	683a      	ldr	r2, [r7, #0]
 8014944:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014946:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	88d2      	ldrh	r2, [r2, #6]
 801494c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	88db      	ldrh	r3, [r3, #6]
 8014952:	2b07      	cmp	r3, #7
 8014954:	bf28      	it	cs
 8014956:	2307      	movcs	r3, #7
 8014958:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	89fa      	ldrh	r2, [r7, #14]
 801495e:	4619      	mov	r1, r3
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f001 fd89 	bl	8016478 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014966:	e090      	b.n	8014a8a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	785a      	ldrb	r2, [r3, #1]
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	88db      	ldrh	r3, [r3, #6]
 8014976:	2b3f      	cmp	r3, #63	; 0x3f
 8014978:	d803      	bhi.n	8014982 <USBD_CDC_Setup+0xa6>
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	88db      	ldrh	r3, [r3, #6]
 801497e:	b2da      	uxtb	r2, r3
 8014980:	e000      	b.n	8014984 <USBD_CDC_Setup+0xa8>
 8014982:	2240      	movs	r2, #64	; 0x40
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801498a:	6939      	ldr	r1, [r7, #16]
 801498c:	693b      	ldr	r3, [r7, #16]
 801498e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014992:	461a      	mov	r2, r3
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f001 fd9b 	bl	80164d0 <USBD_CtlPrepareRx>
      break;
 801499a:	e076      	b.n	8014a8a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149a2:	687a      	ldr	r2, [r7, #4]
 80149a4:	33b0      	adds	r3, #176	; 0xb0
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	4413      	add	r3, r2
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	689b      	ldr	r3, [r3, #8]
 80149ae:	683a      	ldr	r2, [r7, #0]
 80149b0:	7850      	ldrb	r0, [r2, #1]
 80149b2:	2200      	movs	r2, #0
 80149b4:	6839      	ldr	r1, [r7, #0]
 80149b6:	4798      	blx	r3
      break;
 80149b8:	e067      	b.n	8014a8a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	785b      	ldrb	r3, [r3, #1]
 80149be:	2b0b      	cmp	r3, #11
 80149c0:	d851      	bhi.n	8014a66 <USBD_CDC_Setup+0x18a>
 80149c2:	a201      	add	r2, pc, #4	; (adr r2, 80149c8 <USBD_CDC_Setup+0xec>)
 80149c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149c8:	080149f9 	.word	0x080149f9
 80149cc:	08014a75 	.word	0x08014a75
 80149d0:	08014a67 	.word	0x08014a67
 80149d4:	08014a67 	.word	0x08014a67
 80149d8:	08014a67 	.word	0x08014a67
 80149dc:	08014a67 	.word	0x08014a67
 80149e0:	08014a67 	.word	0x08014a67
 80149e4:	08014a67 	.word	0x08014a67
 80149e8:	08014a67 	.word	0x08014a67
 80149ec:	08014a67 	.word	0x08014a67
 80149f0:	08014a23 	.word	0x08014a23
 80149f4:	08014a4d 	.word	0x08014a4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	2b03      	cmp	r3, #3
 8014a02:	d107      	bne.n	8014a14 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014a04:	f107 030a 	add.w	r3, r7, #10
 8014a08:	2202      	movs	r2, #2
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f001 fd33 	bl	8016478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a12:	e032      	b.n	8014a7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a14:	6839      	ldr	r1, [r7, #0]
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f001 fcbd 	bl	8016396 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a1c:	2303      	movs	r3, #3
 8014a1e:	75fb      	strb	r3, [r7, #23]
          break;
 8014a20:	e02b      	b.n	8014a7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	2b03      	cmp	r3, #3
 8014a2c:	d107      	bne.n	8014a3e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a2e:	f107 030d 	add.w	r3, r7, #13
 8014a32:	2201      	movs	r2, #1
 8014a34:	4619      	mov	r1, r3
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f001 fd1e 	bl	8016478 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a3c:	e01d      	b.n	8014a7a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a3e:	6839      	ldr	r1, [r7, #0]
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f001 fca8 	bl	8016396 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a46:	2303      	movs	r3, #3
 8014a48:	75fb      	strb	r3, [r7, #23]
          break;
 8014a4a:	e016      	b.n	8014a7a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a52:	b2db      	uxtb	r3, r3
 8014a54:	2b03      	cmp	r3, #3
 8014a56:	d00f      	beq.n	8014a78 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a58:	6839      	ldr	r1, [r7, #0]
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f001 fc9b 	bl	8016396 <USBD_CtlError>
            ret = USBD_FAIL;
 8014a60:	2303      	movs	r3, #3
 8014a62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a64:	e008      	b.n	8014a78 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a66:	6839      	ldr	r1, [r7, #0]
 8014a68:	6878      	ldr	r0, [r7, #4]
 8014a6a:	f001 fc94 	bl	8016396 <USBD_CtlError>
          ret = USBD_FAIL;
 8014a6e:	2303      	movs	r3, #3
 8014a70:	75fb      	strb	r3, [r7, #23]
          break;
 8014a72:	e002      	b.n	8014a7a <USBD_CDC_Setup+0x19e>
          break;
 8014a74:	bf00      	nop
 8014a76:	e008      	b.n	8014a8a <USBD_CDC_Setup+0x1ae>
          break;
 8014a78:	bf00      	nop
      }
      break;
 8014a7a:	e006      	b.n	8014a8a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a7c:	6839      	ldr	r1, [r7, #0]
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f001 fc89 	bl	8016396 <USBD_CtlError>
      ret = USBD_FAIL;
 8014a84:	2303      	movs	r3, #3
 8014a86:	75fb      	strb	r3, [r7, #23]
      break;
 8014a88:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	3718      	adds	r7, #24
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd80      	pop	{r7, pc}

08014a94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a94:	b580      	push	{r7, lr}
 8014a96:	b084      	sub	sp, #16
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	6078      	str	r0, [r7, #4]
 8014a9c:	460b      	mov	r3, r1
 8014a9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014aa6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	32b0      	adds	r2, #176	; 0xb0
 8014ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d101      	bne.n	8014abe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014aba:	2303      	movs	r3, #3
 8014abc:	e065      	b.n	8014b8a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	32b0      	adds	r2, #176	; 0xb0
 8014ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014acc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014ace:	78fb      	ldrb	r3, [r7, #3]
 8014ad0:	f003 020f 	and.w	r2, r3, #15
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	4613      	mov	r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4413      	add	r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	440b      	add	r3, r1
 8014ae0:	3318      	adds	r3, #24
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d02f      	beq.n	8014b48 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014ae8:	78fb      	ldrb	r3, [r7, #3]
 8014aea:	f003 020f 	and.w	r2, r3, #15
 8014aee:	6879      	ldr	r1, [r7, #4]
 8014af0:	4613      	mov	r3, r2
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	4413      	add	r3, r2
 8014af6:	009b      	lsls	r3, r3, #2
 8014af8:	440b      	add	r3, r1
 8014afa:	3318      	adds	r3, #24
 8014afc:	681a      	ldr	r2, [r3, #0]
 8014afe:	78fb      	ldrb	r3, [r7, #3]
 8014b00:	f003 010f 	and.w	r1, r3, #15
 8014b04:	68f8      	ldr	r0, [r7, #12]
 8014b06:	460b      	mov	r3, r1
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	009b      	lsls	r3, r3, #2
 8014b0e:	4403      	add	r3, r0
 8014b10:	3344      	adds	r3, #68	; 0x44
 8014b12:	681b      	ldr	r3, [r3, #0]
 8014b14:	fbb2 f1f3 	udiv	r1, r2, r3
 8014b18:	fb01 f303 	mul.w	r3, r1, r3
 8014b1c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d112      	bne.n	8014b48 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014b22:	78fb      	ldrb	r3, [r7, #3]
 8014b24:	f003 020f 	and.w	r2, r3, #15
 8014b28:	6879      	ldr	r1, [r7, #4]
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4413      	add	r3, r2
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	440b      	add	r3, r1
 8014b34:	3318      	adds	r3, #24
 8014b36:	2200      	movs	r2, #0
 8014b38:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b3a:	78f9      	ldrb	r1, [r7, #3]
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	2200      	movs	r2, #0
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f002 fa06 	bl	8016f52 <USBD_LL_Transmit>
 8014b46:	e01f      	b.n	8014b88 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b56:	687a      	ldr	r2, [r7, #4]
 8014b58:	33b0      	adds	r3, #176	; 0xb0
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	4413      	add	r3, r2
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	691b      	ldr	r3, [r3, #16]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d010      	beq.n	8014b88 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b6c:	687a      	ldr	r2, [r7, #4]
 8014b6e:	33b0      	adds	r3, #176	; 0xb0
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	4413      	add	r3, r2
 8014b74:	685b      	ldr	r3, [r3, #4]
 8014b76:	691b      	ldr	r3, [r3, #16]
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b7e:	68ba      	ldr	r2, [r7, #8]
 8014b80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b84:	78fa      	ldrb	r2, [r7, #3]
 8014b86:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	32b0      	adds	r2, #176	; 0xb0
 8014ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	32b0      	adds	r2, #176	; 0xb0
 8014bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d101      	bne.n	8014bc4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014bc0:	2303      	movs	r3, #3
 8014bc2:	e01a      	b.n	8014bfa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014bc4:	78fb      	ldrb	r3, [r7, #3]
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	6878      	ldr	r0, [r7, #4]
 8014bca:	f002 fa04 	bl	8016fd6 <USBD_LL_GetRxDataSize>
 8014bce:	4602      	mov	r2, r0
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bdc:	687a      	ldr	r2, [r7, #4]
 8014bde:	33b0      	adds	r3, #176	; 0xb0
 8014be0:	009b      	lsls	r3, r3, #2
 8014be2:	4413      	add	r3, r2
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	68fa      	ldr	r2, [r7, #12]
 8014bea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014bee:	68fa      	ldr	r2, [r7, #12]
 8014bf0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014bf4:	4611      	mov	r1, r2
 8014bf6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014bf8:	2300      	movs	r3, #0
}
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}

08014c02 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014c02:	b580      	push	{r7, lr}
 8014c04:	b084      	sub	sp, #16
 8014c06:	af00      	add	r7, sp, #0
 8014c08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	32b0      	adds	r2, #176	; 0xb0
 8014c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c18:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d101      	bne.n	8014c24 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014c20:	2303      	movs	r3, #3
 8014c22:	e025      	b.n	8014c70 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c2a:	687a      	ldr	r2, [r7, #4]
 8014c2c:	33b0      	adds	r3, #176	; 0xb0
 8014c2e:	009b      	lsls	r3, r3, #2
 8014c30:	4413      	add	r3, r2
 8014c32:	685b      	ldr	r3, [r3, #4]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d01a      	beq.n	8014c6e <USBD_CDC_EP0_RxReady+0x6c>
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c3e:	2bff      	cmp	r3, #255	; 0xff
 8014c40:	d015      	beq.n	8014c6e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c48:	687a      	ldr	r2, [r7, #4]
 8014c4a:	33b0      	adds	r3, #176	; 0xb0
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	4413      	add	r3, r2
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	689b      	ldr	r3, [r3, #8]
 8014c54:	68fa      	ldr	r2, [r7, #12]
 8014c56:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c5a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c5c:	68fa      	ldr	r2, [r7, #12]
 8014c5e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c62:	b292      	uxth	r2, r2
 8014c64:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	22ff      	movs	r2, #255	; 0xff
 8014c6a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c6e:	2300      	movs	r3, #0
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3710      	adds	r7, #16
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}

08014c78 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b086      	sub	sp, #24
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c80:	2182      	movs	r1, #130	; 0x82
 8014c82:	4818      	ldr	r0, [pc, #96]	; (8014ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c84:	f000 fd4f 	bl	8015726 <USBD_GetEpDesc>
 8014c88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c8a:	2101      	movs	r1, #1
 8014c8c:	4815      	ldr	r0, [pc, #84]	; (8014ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c8e:	f000 fd4a 	bl	8015726 <USBD_GetEpDesc>
 8014c92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c94:	2181      	movs	r1, #129	; 0x81
 8014c96:	4813      	ldr	r0, [pc, #76]	; (8014ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c98:	f000 fd45 	bl	8015726 <USBD_GetEpDesc>
 8014c9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d002      	beq.n	8014caa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014ca4:	697b      	ldr	r3, [r7, #20]
 8014ca6:	2210      	movs	r2, #16
 8014ca8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d006      	beq.n	8014cbe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014cb8:	711a      	strb	r2, [r3, #4]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d006      	beq.n	8014cd2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ccc:	711a      	strb	r2, [r3, #4]
 8014cce:	2200      	movs	r2, #0
 8014cd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	2243      	movs	r2, #67	; 0x43
 8014cd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cd8:	4b02      	ldr	r3, [pc, #8]	; (8014ce4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014cda:	4618      	mov	r0, r3
 8014cdc:	3718      	adds	r7, #24
 8014cde:	46bd      	mov	sp, r7
 8014ce0:	bd80      	pop	{r7, pc}
 8014ce2:	bf00      	nop
 8014ce4:	24000054 	.word	0x24000054

08014ce8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b086      	sub	sp, #24
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cf0:	2182      	movs	r1, #130	; 0x82
 8014cf2:	4818      	ldr	r0, [pc, #96]	; (8014d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cf4:	f000 fd17 	bl	8015726 <USBD_GetEpDesc>
 8014cf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014cfa:	2101      	movs	r1, #1
 8014cfc:	4815      	ldr	r0, [pc, #84]	; (8014d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cfe:	f000 fd12 	bl	8015726 <USBD_GetEpDesc>
 8014d02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d04:	2181      	movs	r1, #129	; 0x81
 8014d06:	4813      	ldr	r0, [pc, #76]	; (8014d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014d08:	f000 fd0d 	bl	8015726 <USBD_GetEpDesc>
 8014d0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d0e:	697b      	ldr	r3, [r7, #20]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d002      	beq.n	8014d1a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	2210      	movs	r2, #16
 8014d18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d006      	beq.n	8014d2e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	2200      	movs	r2, #0
 8014d24:	711a      	strb	r2, [r3, #4]
 8014d26:	2200      	movs	r2, #0
 8014d28:	f042 0202 	orr.w	r2, r2, #2
 8014d2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d006      	beq.n	8014d42 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	2200      	movs	r2, #0
 8014d38:	711a      	strb	r2, [r3, #4]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f042 0202 	orr.w	r2, r2, #2
 8014d40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	2243      	movs	r2, #67	; 0x43
 8014d46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d48:	4b02      	ldr	r3, [pc, #8]	; (8014d54 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3718      	adds	r7, #24
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}
 8014d52:	bf00      	nop
 8014d54:	24000054 	.word	0x24000054

08014d58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b086      	sub	sp, #24
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d60:	2182      	movs	r1, #130	; 0x82
 8014d62:	4818      	ldr	r0, [pc, #96]	; (8014dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d64:	f000 fcdf 	bl	8015726 <USBD_GetEpDesc>
 8014d68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d6a:	2101      	movs	r1, #1
 8014d6c:	4815      	ldr	r0, [pc, #84]	; (8014dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d6e:	f000 fcda 	bl	8015726 <USBD_GetEpDesc>
 8014d72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d74:	2181      	movs	r1, #129	; 0x81
 8014d76:	4813      	ldr	r0, [pc, #76]	; (8014dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d78:	f000 fcd5 	bl	8015726 <USBD_GetEpDesc>
 8014d7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d002      	beq.n	8014d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d84:	697b      	ldr	r3, [r7, #20]
 8014d86:	2210      	movs	r2, #16
 8014d88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d8a:	693b      	ldr	r3, [r7, #16]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d006      	beq.n	8014d9e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d90:	693b      	ldr	r3, [r7, #16]
 8014d92:	2200      	movs	r2, #0
 8014d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d98:	711a      	strb	r2, [r3, #4]
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d006      	beq.n	8014db2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	2200      	movs	r2, #0
 8014da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014dac:	711a      	strb	r2, [r3, #4]
 8014dae:	2200      	movs	r2, #0
 8014db0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2243      	movs	r2, #67	; 0x43
 8014db6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014db8:	4b02      	ldr	r3, [pc, #8]	; (8014dc4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3718      	adds	r7, #24
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	24000054 	.word	0x24000054

08014dc8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	b083      	sub	sp, #12
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	220a      	movs	r2, #10
 8014dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014dd6:	4b03      	ldr	r3, [pc, #12]	; (8014de4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014dd8:	4618      	mov	r0, r3
 8014dda:	370c      	adds	r7, #12
 8014ddc:	46bd      	mov	sp, r7
 8014dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de2:	4770      	bx	lr
 8014de4:	24000010 	.word	0x24000010

08014de8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014de8:	b480      	push	{r7}
 8014dea:	b083      	sub	sp, #12
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	6078      	str	r0, [r7, #4]
 8014df0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d101      	bne.n	8014dfc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014df8:	2303      	movs	r3, #3
 8014dfa:	e009      	b.n	8014e10 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	33b0      	adds	r3, #176	; 0xb0
 8014e06:	009b      	lsls	r3, r3, #2
 8014e08:	4413      	add	r3, r2
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014e0e:	2300      	movs	r3, #0
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr

08014e1c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014e1c:	b480      	push	{r7}
 8014e1e:	b087      	sub	sp, #28
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	60f8      	str	r0, [r7, #12]
 8014e24:	60b9      	str	r1, [r7, #8]
 8014e26:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	32b0      	adds	r2, #176	; 0xb0
 8014e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e36:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d101      	bne.n	8014e42 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e3e:	2303      	movs	r3, #3
 8014e40:	e008      	b.n	8014e54 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e42:	697b      	ldr	r3, [r7, #20]
 8014e44:	68ba      	ldr	r2, [r7, #8]
 8014e46:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	687a      	ldr	r2, [r7, #4]
 8014e4e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e52:	2300      	movs	r3, #0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	371c      	adds	r7, #28
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5e:	4770      	bx	lr

08014e60 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b085      	sub	sp, #20
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	32b0      	adds	r2, #176	; 0xb0
 8014e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d101      	bne.n	8014e84 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e80:	2303      	movs	r3, #3
 8014e82:	e004      	b.n	8014e8e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	683a      	ldr	r2, [r7, #0]
 8014e88:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e8c:	2300      	movs	r3, #0
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3714      	adds	r7, #20
 8014e92:	46bd      	mov	sp, r7
 8014e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e98:	4770      	bx	lr
	...

08014e9c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	32b0      	adds	r2, #176	; 0xb0
 8014eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014eb2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d101      	bne.n	8014ec2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ebe:	2303      	movs	r3, #3
 8014ec0:	e025      	b.n	8014f0e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d11f      	bne.n	8014f0c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	2201      	movs	r2, #1
 8014ed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014ed4:	4b10      	ldr	r3, [pc, #64]	; (8014f18 <USBD_CDC_TransmitPacket+0x7c>)
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	f003 020f 	and.w	r2, r3, #15
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014ee2:	6878      	ldr	r0, [r7, #4]
 8014ee4:	4613      	mov	r3, r2
 8014ee6:	009b      	lsls	r3, r3, #2
 8014ee8:	4413      	add	r3, r2
 8014eea:	009b      	lsls	r3, r3, #2
 8014eec:	4403      	add	r3, r0
 8014eee:	3318      	adds	r3, #24
 8014ef0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014ef2:	4b09      	ldr	r3, [pc, #36]	; (8014f18 <USBD_CDC_TransmitPacket+0x7c>)
 8014ef4:	7819      	ldrb	r1, [r3, #0]
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014efc:	68bb      	ldr	r3, [r7, #8]
 8014efe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f002 f825 	bl	8016f52 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014f08:	2300      	movs	r3, #0
 8014f0a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	3710      	adds	r7, #16
 8014f12:	46bd      	mov	sp, r7
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	24000097 	.word	0x24000097

08014f1c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b084      	sub	sp, #16
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	32b0      	adds	r2, #176	; 0xb0
 8014f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f32:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	32b0      	adds	r2, #176	; 0xb0
 8014f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d101      	bne.n	8014f4a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f46:	2303      	movs	r3, #3
 8014f48:	e018      	b.n	8014f7c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	7c1b      	ldrb	r3, [r3, #16]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d10a      	bne.n	8014f68 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f52:	4b0c      	ldr	r3, [pc, #48]	; (8014f84 <USBD_CDC_ReceivePacket+0x68>)
 8014f54:	7819      	ldrb	r1, [r3, #0]
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f002 f817 	bl	8016f94 <USBD_LL_PrepareReceive>
 8014f66:	e008      	b.n	8014f7a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f68:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <USBD_CDC_ReceivePacket+0x68>)
 8014f6a:	7819      	ldrb	r1, [r3, #0]
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f72:	2340      	movs	r3, #64	; 0x40
 8014f74:	6878      	ldr	r0, [r7, #4]
 8014f76:	f002 f80d 	bl	8016f94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f7a:	2300      	movs	r3, #0
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	24000098 	.word	0x24000098

08014f88 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b086      	sub	sp, #24
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	4613      	mov	r3, r2
 8014f94:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d101      	bne.n	8014fa0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f9c:	2303      	movs	r3, #3
 8014f9e:	e01f      	b.n	8014fe0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2200      	movs	r2, #0
 8014fac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d003      	beq.n	8014fc6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	68ba      	ldr	r2, [r7, #8]
 8014fc2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2201      	movs	r2, #1
 8014fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	79fa      	ldrb	r2, [r7, #7]
 8014fd2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f001 fe81 	bl	8016cdc <USBD_LL_Init>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	3718      	adds	r7, #24
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}

08014fe8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b084      	sub	sp, #16
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	6078      	str	r0, [r7, #4]
 8014ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014ff6:	683b      	ldr	r3, [r7, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d101      	bne.n	8015000 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	e025      	b.n	801504c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	32ae      	adds	r2, #174	; 0xae
 8015012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00f      	beq.n	801503c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	32ae      	adds	r2, #174	; 0xae
 8015026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801502c:	f107 020e 	add.w	r2, r7, #14
 8015030:	4610      	mov	r0, r2
 8015032:	4798      	blx	r3
 8015034:	4602      	mov	r2, r0
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015042:	1c5a      	adds	r2, r3, #1
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801504a:	2300      	movs	r3, #0
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f001 fe8f 	bl	8016d80 <USBD_LL_Start>
 8015062:	4603      	mov	r3, r0
}
 8015064:	4618      	mov	r0, r3
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}

0801506c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801506c:	b480      	push	{r7}
 801506e:	b083      	sub	sp, #12
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015074:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015076:	4618      	mov	r0, r3
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015080:	4770      	bx	lr

08015082 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015082:	b580      	push	{r7, lr}
 8015084:	b084      	sub	sp, #16
 8015086:	af00      	add	r7, sp, #0
 8015088:	6078      	str	r0, [r7, #4]
 801508a:	460b      	mov	r3, r1
 801508c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801508e:	2300      	movs	r3, #0
 8015090:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015098:	2b00      	cmp	r3, #0
 801509a:	d009      	beq.n	80150b0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	78fa      	ldrb	r2, [r7, #3]
 80150a6:	4611      	mov	r1, r2
 80150a8:	6878      	ldr	r0, [r7, #4]
 80150aa:	4798      	blx	r3
 80150ac:	4603      	mov	r3, r0
 80150ae:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}

080150ba <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80150ba:	b580      	push	{r7, lr}
 80150bc:	b084      	sub	sp, #16
 80150be:	af00      	add	r7, sp, #0
 80150c0:	6078      	str	r0, [r7, #4]
 80150c2:	460b      	mov	r3, r1
 80150c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	78fa      	ldrb	r2, [r7, #3]
 80150d4:	4611      	mov	r1, r2
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	4798      	blx	r3
 80150da:	4603      	mov	r3, r0
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d001      	beq.n	80150e4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150e0:	2303      	movs	r3, #3
 80150e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80150e6:	4618      	mov	r0, r3
 80150e8:	3710      	adds	r7, #16
 80150ea:	46bd      	mov	sp, r7
 80150ec:	bd80      	pop	{r7, pc}

080150ee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150ee:	b580      	push	{r7, lr}
 80150f0:	b084      	sub	sp, #16
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150fe:	6839      	ldr	r1, [r7, #0]
 8015100:	4618      	mov	r0, r3
 8015102:	f001 f90e 	bl	8016322 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2201      	movs	r2, #1
 801510a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015114:	461a      	mov	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015122:	f003 031f 	and.w	r3, r3, #31
 8015126:	2b02      	cmp	r3, #2
 8015128:	d01a      	beq.n	8015160 <USBD_LL_SetupStage+0x72>
 801512a:	2b02      	cmp	r3, #2
 801512c:	d822      	bhi.n	8015174 <USBD_LL_SetupStage+0x86>
 801512e:	2b00      	cmp	r3, #0
 8015130:	d002      	beq.n	8015138 <USBD_LL_SetupStage+0x4a>
 8015132:	2b01      	cmp	r3, #1
 8015134:	d00a      	beq.n	801514c <USBD_LL_SetupStage+0x5e>
 8015136:	e01d      	b.n	8015174 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801513e:	4619      	mov	r1, r3
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f000 fb65 	bl	8015810 <USBD_StdDevReq>
 8015146:	4603      	mov	r3, r0
 8015148:	73fb      	strb	r3, [r7, #15]
      break;
 801514a:	e020      	b.n	801518e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015152:	4619      	mov	r1, r3
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f000 fbcd 	bl	80158f4 <USBD_StdItfReq>
 801515a:	4603      	mov	r3, r0
 801515c:	73fb      	strb	r3, [r7, #15]
      break;
 801515e:	e016      	b.n	801518e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015166:	4619      	mov	r1, r3
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 fc2f 	bl	80159cc <USBD_StdEPReq>
 801516e:	4603      	mov	r3, r0
 8015170:	73fb      	strb	r3, [r7, #15]
      break;
 8015172:	e00c      	b.n	801518e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801517a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801517e:	b2db      	uxtb	r3, r3
 8015180:	4619      	mov	r1, r3
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f001 fe5c 	bl	8016e40 <USBD_LL_StallEP>
 8015188:	4603      	mov	r3, r0
 801518a:	73fb      	strb	r3, [r7, #15]
      break;
 801518c:	bf00      	nop
  }

  return ret;
 801518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015190:	4618      	mov	r0, r3
 8015192:	3710      	adds	r7, #16
 8015194:	46bd      	mov	sp, r7
 8015196:	bd80      	pop	{r7, pc}

08015198 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015198:	b580      	push	{r7, lr}
 801519a:	b086      	sub	sp, #24
 801519c:	af00      	add	r7, sp, #0
 801519e:	60f8      	str	r0, [r7, #12]
 80151a0:	460b      	mov	r3, r1
 80151a2:	607a      	str	r2, [r7, #4]
 80151a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80151a6:	2300      	movs	r3, #0
 80151a8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80151aa:	7afb      	ldrb	r3, [r7, #11]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d16e      	bne.n	801528e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80151b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80151be:	2b03      	cmp	r3, #3
 80151c0:	f040 8098 	bne.w	80152f4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80151c4:	693b      	ldr	r3, [r7, #16]
 80151c6:	689a      	ldr	r2, [r3, #8]
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	68db      	ldr	r3, [r3, #12]
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d913      	bls.n	80151f8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151d0:	693b      	ldr	r3, [r7, #16]
 80151d2:	689a      	ldr	r2, [r3, #8]
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	1ad2      	subs	r2, r2, r3
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	68da      	ldr	r2, [r3, #12]
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	689b      	ldr	r3, [r3, #8]
 80151e6:	4293      	cmp	r3, r2
 80151e8:	bf28      	it	cs
 80151ea:	4613      	movcs	r3, r2
 80151ec:	461a      	mov	r2, r3
 80151ee:	6879      	ldr	r1, [r7, #4]
 80151f0:	68f8      	ldr	r0, [r7, #12]
 80151f2:	f001 f98a 	bl	801650a <USBD_CtlContinueRx>
 80151f6:	e07d      	b.n	80152f4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151fe:	f003 031f 	and.w	r3, r3, #31
 8015202:	2b02      	cmp	r3, #2
 8015204:	d014      	beq.n	8015230 <USBD_LL_DataOutStage+0x98>
 8015206:	2b02      	cmp	r3, #2
 8015208:	d81d      	bhi.n	8015246 <USBD_LL_DataOutStage+0xae>
 801520a:	2b00      	cmp	r3, #0
 801520c:	d002      	beq.n	8015214 <USBD_LL_DataOutStage+0x7c>
 801520e:	2b01      	cmp	r3, #1
 8015210:	d003      	beq.n	801521a <USBD_LL_DataOutStage+0x82>
 8015212:	e018      	b.n	8015246 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015214:	2300      	movs	r3, #0
 8015216:	75bb      	strb	r3, [r7, #22]
            break;
 8015218:	e018      	b.n	801524c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015220:	b2db      	uxtb	r3, r3
 8015222:	4619      	mov	r1, r3
 8015224:	68f8      	ldr	r0, [r7, #12]
 8015226:	f000 fa64 	bl	80156f2 <USBD_CoreFindIF>
 801522a:	4603      	mov	r3, r0
 801522c:	75bb      	strb	r3, [r7, #22]
            break;
 801522e:	e00d      	b.n	801524c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015236:	b2db      	uxtb	r3, r3
 8015238:	4619      	mov	r1, r3
 801523a:	68f8      	ldr	r0, [r7, #12]
 801523c:	f000 fa66 	bl	801570c <USBD_CoreFindEP>
 8015240:	4603      	mov	r3, r0
 8015242:	75bb      	strb	r3, [r7, #22]
            break;
 8015244:	e002      	b.n	801524c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015246:	2300      	movs	r3, #0
 8015248:	75bb      	strb	r3, [r7, #22]
            break;
 801524a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801524c:	7dbb      	ldrb	r3, [r7, #22]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d119      	bne.n	8015286 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015258:	b2db      	uxtb	r3, r3
 801525a:	2b03      	cmp	r3, #3
 801525c:	d113      	bne.n	8015286 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801525e:	7dba      	ldrb	r2, [r7, #22]
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	32ae      	adds	r2, #174	; 0xae
 8015264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015268:	691b      	ldr	r3, [r3, #16]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d00b      	beq.n	8015286 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801526e:	7dba      	ldrb	r2, [r7, #22]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8015276:	7dba      	ldrb	r2, [r7, #22]
 8015278:	68fb      	ldr	r3, [r7, #12]
 801527a:	32ae      	adds	r2, #174	; 0xae
 801527c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015280:	691b      	ldr	r3, [r3, #16]
 8015282:	68f8      	ldr	r0, [r7, #12]
 8015284:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f001 f950 	bl	801652c <USBD_CtlSendStatus>
 801528c:	e032      	b.n	80152f4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801528e:	7afb      	ldrb	r3, [r7, #11]
 8015290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015294:	b2db      	uxtb	r3, r3
 8015296:	4619      	mov	r1, r3
 8015298:	68f8      	ldr	r0, [r7, #12]
 801529a:	f000 fa37 	bl	801570c <USBD_CoreFindEP>
 801529e:	4603      	mov	r3, r0
 80152a0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80152a2:	7dbb      	ldrb	r3, [r7, #22]
 80152a4:	2bff      	cmp	r3, #255	; 0xff
 80152a6:	d025      	beq.n	80152f4 <USBD_LL_DataOutStage+0x15c>
 80152a8:	7dbb      	ldrb	r3, [r7, #22]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d122      	bne.n	80152f4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152b4:	b2db      	uxtb	r3, r3
 80152b6:	2b03      	cmp	r3, #3
 80152b8:	d117      	bne.n	80152ea <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80152ba:	7dba      	ldrb	r2, [r7, #22]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	32ae      	adds	r2, #174	; 0xae
 80152c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c4:	699b      	ldr	r3, [r3, #24]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00f      	beq.n	80152ea <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152ca:	7dba      	ldrb	r2, [r7, #22]
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152d2:	7dba      	ldrb	r2, [r7, #22]
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	32ae      	adds	r2, #174	; 0xae
 80152d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152dc:	699b      	ldr	r3, [r3, #24]
 80152de:	7afa      	ldrb	r2, [r7, #11]
 80152e0:	4611      	mov	r1, r2
 80152e2:	68f8      	ldr	r0, [r7, #12]
 80152e4:	4798      	blx	r3
 80152e6:	4603      	mov	r3, r0
 80152e8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152ea:	7dfb      	ldrb	r3, [r7, #23]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d001      	beq.n	80152f4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152f0:	7dfb      	ldrb	r3, [r7, #23]
 80152f2:	e000      	b.n	80152f6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80152f4:	2300      	movs	r3, #0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3718      	adds	r7, #24
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b086      	sub	sp, #24
 8015302:	af00      	add	r7, sp, #0
 8015304:	60f8      	str	r0, [r7, #12]
 8015306:	460b      	mov	r3, r1
 8015308:	607a      	str	r2, [r7, #4]
 801530a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801530c:	7afb      	ldrb	r3, [r7, #11]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d16f      	bne.n	80153f2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	3314      	adds	r3, #20
 8015316:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801531e:	2b02      	cmp	r3, #2
 8015320:	d15a      	bne.n	80153d8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	689a      	ldr	r2, [r3, #8]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	68db      	ldr	r3, [r3, #12]
 801532a:	429a      	cmp	r2, r3
 801532c:	d914      	bls.n	8015358 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	689a      	ldr	r2, [r3, #8]
 8015332:	693b      	ldr	r3, [r7, #16]
 8015334:	68db      	ldr	r3, [r3, #12]
 8015336:	1ad2      	subs	r2, r2, r3
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	689b      	ldr	r3, [r3, #8]
 8015340:	461a      	mov	r2, r3
 8015342:	6879      	ldr	r1, [r7, #4]
 8015344:	68f8      	ldr	r0, [r7, #12]
 8015346:	f001 f8b2 	bl	80164ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801534a:	2300      	movs	r3, #0
 801534c:	2200      	movs	r2, #0
 801534e:	2100      	movs	r1, #0
 8015350:	68f8      	ldr	r0, [r7, #12]
 8015352:	f001 fe1f 	bl	8016f94 <USBD_LL_PrepareReceive>
 8015356:	e03f      	b.n	80153d8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015358:	693b      	ldr	r3, [r7, #16]
 801535a:	68da      	ldr	r2, [r3, #12]
 801535c:	693b      	ldr	r3, [r7, #16]
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	429a      	cmp	r2, r3
 8015362:	d11c      	bne.n	801539e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015364:	693b      	ldr	r3, [r7, #16]
 8015366:	685a      	ldr	r2, [r3, #4]
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801536c:	429a      	cmp	r2, r3
 801536e:	d316      	bcc.n	801539e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	685a      	ldr	r2, [r3, #4]
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801537a:	429a      	cmp	r2, r3
 801537c:	d20f      	bcs.n	801539e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801537e:	2200      	movs	r2, #0
 8015380:	2100      	movs	r1, #0
 8015382:	68f8      	ldr	r0, [r7, #12]
 8015384:	f001 f893 	bl	80164ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	2200      	movs	r2, #0
 801538c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015390:	2300      	movs	r3, #0
 8015392:	2200      	movs	r2, #0
 8015394:	2100      	movs	r1, #0
 8015396:	68f8      	ldr	r0, [r7, #12]
 8015398:	f001 fdfc 	bl	8016f94 <USBD_LL_PrepareReceive>
 801539c:	e01c      	b.n	80153d8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153a4:	b2db      	uxtb	r3, r3
 80153a6:	2b03      	cmp	r3, #3
 80153a8:	d10f      	bne.n	80153ca <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d009      	beq.n	80153ca <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	2200      	movs	r2, #0
 80153ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80153c4:	68db      	ldr	r3, [r3, #12]
 80153c6:	68f8      	ldr	r0, [r7, #12]
 80153c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153ca:	2180      	movs	r1, #128	; 0x80
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f001 fd37 	bl	8016e40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153d2:	68f8      	ldr	r0, [r7, #12]
 80153d4:	f001 f8bd 	bl	8016552 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d03a      	beq.n	8015458 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f7ff fe42 	bl	801506c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80153f0:	e032      	b.n	8015458 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153f2:	7afb      	ldrb	r3, [r7, #11]
 80153f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	4619      	mov	r1, r3
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f000 f985 	bl	801570c <USBD_CoreFindEP>
 8015402:	4603      	mov	r3, r0
 8015404:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015406:	7dfb      	ldrb	r3, [r7, #23]
 8015408:	2bff      	cmp	r3, #255	; 0xff
 801540a:	d025      	beq.n	8015458 <USBD_LL_DataInStage+0x15a>
 801540c:	7dfb      	ldrb	r3, [r7, #23]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d122      	bne.n	8015458 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015412:	68fb      	ldr	r3, [r7, #12]
 8015414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015418:	b2db      	uxtb	r3, r3
 801541a:	2b03      	cmp	r3, #3
 801541c:	d11c      	bne.n	8015458 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801541e:	7dfa      	ldrb	r2, [r7, #23]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	32ae      	adds	r2, #174	; 0xae
 8015424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015428:	695b      	ldr	r3, [r3, #20]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d014      	beq.n	8015458 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801542e:	7dfa      	ldrb	r2, [r7, #23]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015436:	7dfa      	ldrb	r2, [r7, #23]
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	32ae      	adds	r2, #174	; 0xae
 801543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015440:	695b      	ldr	r3, [r3, #20]
 8015442:	7afa      	ldrb	r2, [r7, #11]
 8015444:	4611      	mov	r1, r2
 8015446:	68f8      	ldr	r0, [r7, #12]
 8015448:	4798      	blx	r3
 801544a:	4603      	mov	r3, r0
 801544c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801544e:	7dbb      	ldrb	r3, [r7, #22]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d001      	beq.n	8015458 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015454:	7dbb      	ldrb	r3, [r7, #22]
 8015456:	e000      	b.n	801545a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015458:	2300      	movs	r3, #0
}
 801545a:	4618      	mov	r0, r3
 801545c:	3718      	adds	r7, #24
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}

08015462 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015462:	b580      	push	{r7, lr}
 8015464:	b084      	sub	sp, #16
 8015466:	af00      	add	r7, sp, #0
 8015468:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801546a:	2300      	movs	r3, #0
 801546c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2201      	movs	r2, #1
 8015472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	2200      	movs	r2, #0
 801547a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2200      	movs	r2, #0
 8015482:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2200      	movs	r2, #0
 8015488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	2200      	movs	r2, #0
 8015490:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801549a:	2b00      	cmp	r3, #0
 801549c:	d014      	beq.n	80154c8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d00e      	beq.n	80154c8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b0:	685b      	ldr	r3, [r3, #4]
 80154b2:	687a      	ldr	r2, [r7, #4]
 80154b4:	6852      	ldr	r2, [r2, #4]
 80154b6:	b2d2      	uxtb	r2, r2
 80154b8:	4611      	mov	r1, r2
 80154ba:	6878      	ldr	r0, [r7, #4]
 80154bc:	4798      	blx	r3
 80154be:	4603      	mov	r3, r0
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d001      	beq.n	80154c8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80154c4:	2303      	movs	r3, #3
 80154c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154c8:	2340      	movs	r3, #64	; 0x40
 80154ca:	2200      	movs	r2, #0
 80154cc:	2100      	movs	r1, #0
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f001 fc71 	bl	8016db6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	2201      	movs	r2, #1
 80154d8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2240      	movs	r2, #64	; 0x40
 80154e0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154e4:	2340      	movs	r3, #64	; 0x40
 80154e6:	2200      	movs	r2, #0
 80154e8:	2180      	movs	r1, #128	; 0x80
 80154ea:	6878      	ldr	r0, [r7, #4]
 80154ec:	f001 fc63 	bl	8016db6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2201      	movs	r2, #1
 80154f4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2240      	movs	r2, #64	; 0x40
 80154fa:	621a      	str	r2, [r3, #32]

  return ret;
 80154fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80154fe:	4618      	mov	r0, r3
 8015500:	3710      	adds	r7, #16
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}

08015506 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015506:	b480      	push	{r7}
 8015508:	b083      	sub	sp, #12
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
 801550e:	460b      	mov	r3, r1
 8015510:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	78fa      	ldrb	r2, [r7, #3]
 8015516:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015518:	2300      	movs	r3, #0
}
 801551a:	4618      	mov	r0, r3
 801551c:	370c      	adds	r7, #12
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr

08015526 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015526:	b480      	push	{r7}
 8015528:	b083      	sub	sp, #12
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015534:	b2db      	uxtb	r3, r3
 8015536:	2b04      	cmp	r3, #4
 8015538:	d006      	beq.n	8015548 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015540:	b2da      	uxtb	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2204      	movs	r2, #4
 801554c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015550:	2300      	movs	r3, #0
}
 8015552:	4618      	mov	r0, r3
 8015554:	370c      	adds	r7, #12
 8015556:	46bd      	mov	sp, r7
 8015558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555c:	4770      	bx	lr

0801555e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801555e:	b480      	push	{r7}
 8015560:	b083      	sub	sp, #12
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801556c:	b2db      	uxtb	r3, r3
 801556e:	2b04      	cmp	r3, #4
 8015570:	d106      	bne.n	8015580 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015578:	b2da      	uxtb	r2, r3
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015580:	2300      	movs	r3, #0
}
 8015582:	4618      	mov	r0, r3
 8015584:	370c      	adds	r7, #12
 8015586:	46bd      	mov	sp, r7
 8015588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558c:	4770      	bx	lr

0801558e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b082      	sub	sp, #8
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801559c:	b2db      	uxtb	r3, r3
 801559e:	2b03      	cmp	r3, #3
 80155a0:	d110      	bne.n	80155c4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d00b      	beq.n	80155c4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155b2:	69db      	ldr	r3, [r3, #28]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d005      	beq.n	80155c4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155be:	69db      	ldr	r3, [r3, #28]
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80155c4:	2300      	movs	r3, #0
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	3708      	adds	r7, #8
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155ce:	b580      	push	{r7, lr}
 80155d0:	b082      	sub	sp, #8
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
 80155d6:	460b      	mov	r3, r1
 80155d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	32ae      	adds	r2, #174	; 0xae
 80155e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d101      	bne.n	80155f0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155ec:	2303      	movs	r3, #3
 80155ee:	e01c      	b.n	801562a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155f6:	b2db      	uxtb	r3, r3
 80155f8:	2b03      	cmp	r3, #3
 80155fa:	d115      	bne.n	8015628 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	32ae      	adds	r2, #174	; 0xae
 8015606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801560a:	6a1b      	ldr	r3, [r3, #32]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00b      	beq.n	8015628 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	32ae      	adds	r2, #174	; 0xae
 801561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561e:	6a1b      	ldr	r3, [r3, #32]
 8015620:	78fa      	ldrb	r2, [r7, #3]
 8015622:	4611      	mov	r1, r2
 8015624:	6878      	ldr	r0, [r7, #4]
 8015626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015628:	2300      	movs	r3, #0
}
 801562a:	4618      	mov	r0, r3
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}

08015632 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015632:	b580      	push	{r7, lr}
 8015634:	b082      	sub	sp, #8
 8015636:	af00      	add	r7, sp, #0
 8015638:	6078      	str	r0, [r7, #4]
 801563a:	460b      	mov	r3, r1
 801563c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	32ae      	adds	r2, #174	; 0xae
 8015648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d101      	bne.n	8015654 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015650:	2303      	movs	r3, #3
 8015652:	e01c      	b.n	801568e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801565a:	b2db      	uxtb	r3, r3
 801565c:	2b03      	cmp	r3, #3
 801565e:	d115      	bne.n	801568c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	32ae      	adds	r2, #174	; 0xae
 801566a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015670:	2b00      	cmp	r3, #0
 8015672:	d00b      	beq.n	801568c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	32ae      	adds	r2, #174	; 0xae
 801567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015684:	78fa      	ldrb	r2, [r7, #3]
 8015686:	4611      	mov	r1, r2
 8015688:	6878      	ldr	r0, [r7, #4]
 801568a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801568c:	2300      	movs	r3, #0
}
 801568e:	4618      	mov	r0, r3
 8015690:	3708      	adds	r7, #8
 8015692:	46bd      	mov	sp, r7
 8015694:	bd80      	pop	{r7, pc}

08015696 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015696:	b480      	push	{r7}
 8015698:	b083      	sub	sp, #12
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801569e:	2300      	movs	r3, #0
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr

080156ac <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80156b4:	2300      	movs	r3, #0
 80156b6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2201      	movs	r2, #1
 80156bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d00e      	beq.n	80156e8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	687a      	ldr	r2, [r7, #4]
 80156d4:	6852      	ldr	r2, [r2, #4]
 80156d6:	b2d2      	uxtb	r2, r2
 80156d8:	4611      	mov	r1, r2
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	4798      	blx	r3
 80156de:	4603      	mov	r3, r0
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d001      	beq.n	80156e8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156e4:	2303      	movs	r3, #3
 80156e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3710      	adds	r7, #16
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}

080156f2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156f2:	b480      	push	{r7}
 80156f4:	b083      	sub	sp, #12
 80156f6:	af00      	add	r7, sp, #0
 80156f8:	6078      	str	r0, [r7, #4]
 80156fa:	460b      	mov	r3, r1
 80156fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015700:	4618      	mov	r0, r3
 8015702:	370c      	adds	r7, #12
 8015704:	46bd      	mov	sp, r7
 8015706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570a:	4770      	bx	lr

0801570c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801570c:	b480      	push	{r7}
 801570e:	b083      	sub	sp, #12
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015718:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801571a:	4618      	mov	r0, r3
 801571c:	370c      	adds	r7, #12
 801571e:	46bd      	mov	sp, r7
 8015720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015724:	4770      	bx	lr

08015726 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015726:	b580      	push	{r7, lr}
 8015728:	b086      	sub	sp, #24
 801572a:	af00      	add	r7, sp, #0
 801572c:	6078      	str	r0, [r7, #4]
 801572e:	460b      	mov	r3, r1
 8015730:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801573a:	2300      	movs	r3, #0
 801573c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	885b      	ldrh	r3, [r3, #2]
 8015742:	b29a      	uxth	r2, r3
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	781b      	ldrb	r3, [r3, #0]
 8015748:	b29b      	uxth	r3, r3
 801574a:	429a      	cmp	r2, r3
 801574c:	d920      	bls.n	8015790 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	781b      	ldrb	r3, [r3, #0]
 8015752:	b29b      	uxth	r3, r3
 8015754:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015756:	e013      	b.n	8015780 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015758:	f107 030a 	add.w	r3, r7, #10
 801575c:	4619      	mov	r1, r3
 801575e:	6978      	ldr	r0, [r7, #20]
 8015760:	f000 f81b 	bl	801579a <USBD_GetNextDesc>
 8015764:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015766:	697b      	ldr	r3, [r7, #20]
 8015768:	785b      	ldrb	r3, [r3, #1]
 801576a:	2b05      	cmp	r3, #5
 801576c:	d108      	bne.n	8015780 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801576e:	697b      	ldr	r3, [r7, #20]
 8015770:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015772:	693b      	ldr	r3, [r7, #16]
 8015774:	789b      	ldrb	r3, [r3, #2]
 8015776:	78fa      	ldrb	r2, [r7, #3]
 8015778:	429a      	cmp	r2, r3
 801577a:	d008      	beq.n	801578e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801577c:	2300      	movs	r3, #0
 801577e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015780:	68fb      	ldr	r3, [r7, #12]
 8015782:	885b      	ldrh	r3, [r3, #2]
 8015784:	b29a      	uxth	r2, r3
 8015786:	897b      	ldrh	r3, [r7, #10]
 8015788:	429a      	cmp	r2, r3
 801578a:	d8e5      	bhi.n	8015758 <USBD_GetEpDesc+0x32>
 801578c:	e000      	b.n	8015790 <USBD_GetEpDesc+0x6a>
          break;
 801578e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015790:	693b      	ldr	r3, [r7, #16]
}
 8015792:	4618      	mov	r0, r3
 8015794:	3718      	adds	r7, #24
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}

0801579a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801579a:	b480      	push	{r7}
 801579c:	b085      	sub	sp, #20
 801579e:	af00      	add	r7, sp, #0
 80157a0:	6078      	str	r0, [r7, #4]
 80157a2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	881a      	ldrh	r2, [r3, #0]
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	4413      	add	r3, r2
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	461a      	mov	r2, r3
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	4413      	add	r3, r2
 80157c4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80157c6:	68fb      	ldr	r3, [r7, #12]
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	3714      	adds	r7, #20
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b087      	sub	sp, #28
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	781b      	ldrb	r3, [r3, #0]
 80157e4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157e6:	697b      	ldr	r3, [r7, #20]
 80157e8:	3301      	adds	r3, #1
 80157ea:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157ec:	697b      	ldr	r3, [r7, #20]
 80157ee:	781b      	ldrb	r3, [r3, #0]
 80157f0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157f2:	8a3b      	ldrh	r3, [r7, #16]
 80157f4:	021b      	lsls	r3, r3, #8
 80157f6:	b21a      	sxth	r2, r3
 80157f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157fc:	4313      	orrs	r3, r2
 80157fe:	b21b      	sxth	r3, r3
 8015800:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015802:	89fb      	ldrh	r3, [r7, #14]
}
 8015804:	4618      	mov	r0, r3
 8015806:	371c      	adds	r7, #28
 8015808:	46bd      	mov	sp, r7
 801580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580e:	4770      	bx	lr

08015810 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b084      	sub	sp, #16
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801581a:	2300      	movs	r3, #0
 801581c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801581e:	683b      	ldr	r3, [r7, #0]
 8015820:	781b      	ldrb	r3, [r3, #0]
 8015822:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015826:	2b40      	cmp	r3, #64	; 0x40
 8015828:	d005      	beq.n	8015836 <USBD_StdDevReq+0x26>
 801582a:	2b40      	cmp	r3, #64	; 0x40
 801582c:	d857      	bhi.n	80158de <USBD_StdDevReq+0xce>
 801582e:	2b00      	cmp	r3, #0
 8015830:	d00f      	beq.n	8015852 <USBD_StdDevReq+0x42>
 8015832:	2b20      	cmp	r3, #32
 8015834:	d153      	bne.n	80158de <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	32ae      	adds	r2, #174	; 0xae
 8015840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	6839      	ldr	r1, [r7, #0]
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	4798      	blx	r3
 801584c:	4603      	mov	r3, r0
 801584e:	73fb      	strb	r3, [r7, #15]
      break;
 8015850:	e04a      	b.n	80158e8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015852:	683b      	ldr	r3, [r7, #0]
 8015854:	785b      	ldrb	r3, [r3, #1]
 8015856:	2b09      	cmp	r3, #9
 8015858:	d83b      	bhi.n	80158d2 <USBD_StdDevReq+0xc2>
 801585a:	a201      	add	r2, pc, #4	; (adr r2, 8015860 <USBD_StdDevReq+0x50>)
 801585c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015860:	080158b5 	.word	0x080158b5
 8015864:	080158c9 	.word	0x080158c9
 8015868:	080158d3 	.word	0x080158d3
 801586c:	080158bf 	.word	0x080158bf
 8015870:	080158d3 	.word	0x080158d3
 8015874:	08015893 	.word	0x08015893
 8015878:	08015889 	.word	0x08015889
 801587c:	080158d3 	.word	0x080158d3
 8015880:	080158ab 	.word	0x080158ab
 8015884:	0801589d 	.word	0x0801589d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015888:	6839      	ldr	r1, [r7, #0]
 801588a:	6878      	ldr	r0, [r7, #4]
 801588c:	f000 fa3c 	bl	8015d08 <USBD_GetDescriptor>
          break;
 8015890:	e024      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015892:	6839      	ldr	r1, [r7, #0]
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 fba1 	bl	8015fdc <USBD_SetAddress>
          break;
 801589a:	e01f      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801589c:	6839      	ldr	r1, [r7, #0]
 801589e:	6878      	ldr	r0, [r7, #4]
 80158a0:	f000 fbe0 	bl	8016064 <USBD_SetConfig>
 80158a4:	4603      	mov	r3, r0
 80158a6:	73fb      	strb	r3, [r7, #15]
          break;
 80158a8:	e018      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80158aa:	6839      	ldr	r1, [r7, #0]
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f000 fc83 	bl	80161b8 <USBD_GetConfig>
          break;
 80158b2:	e013      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80158b4:	6839      	ldr	r1, [r7, #0]
 80158b6:	6878      	ldr	r0, [r7, #4]
 80158b8:	f000 fcb4 	bl	8016224 <USBD_GetStatus>
          break;
 80158bc:	e00e      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 fce3 	bl	801628c <USBD_SetFeature>
          break;
 80158c6:	e009      	b.n	80158dc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158c8:	6839      	ldr	r1, [r7, #0]
 80158ca:	6878      	ldr	r0, [r7, #4]
 80158cc:	f000 fd07 	bl	80162de <USBD_ClrFeature>
          break;
 80158d0:	e004      	b.n	80158dc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158d2:	6839      	ldr	r1, [r7, #0]
 80158d4:	6878      	ldr	r0, [r7, #4]
 80158d6:	f000 fd5e 	bl	8016396 <USBD_CtlError>
          break;
 80158da:	bf00      	nop
      }
      break;
 80158dc:	e004      	b.n	80158e8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158de:	6839      	ldr	r1, [r7, #0]
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f000 fd58 	bl	8016396 <USBD_CtlError>
      break;
 80158e6:	bf00      	nop
  }

  return ret;
 80158e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3710      	adds	r7, #16
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop

080158f4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b084      	sub	sp, #16
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	6078      	str	r0, [r7, #4]
 80158fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158fe:	2300      	movs	r3, #0
 8015900:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015902:	683b      	ldr	r3, [r7, #0]
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801590a:	2b40      	cmp	r3, #64	; 0x40
 801590c:	d005      	beq.n	801591a <USBD_StdItfReq+0x26>
 801590e:	2b40      	cmp	r3, #64	; 0x40
 8015910:	d852      	bhi.n	80159b8 <USBD_StdItfReq+0xc4>
 8015912:	2b00      	cmp	r3, #0
 8015914:	d001      	beq.n	801591a <USBD_StdItfReq+0x26>
 8015916:	2b20      	cmp	r3, #32
 8015918:	d14e      	bne.n	80159b8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015920:	b2db      	uxtb	r3, r3
 8015922:	3b01      	subs	r3, #1
 8015924:	2b02      	cmp	r3, #2
 8015926:	d840      	bhi.n	80159aa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	889b      	ldrh	r3, [r3, #4]
 801592c:	b2db      	uxtb	r3, r3
 801592e:	2b01      	cmp	r3, #1
 8015930:	d836      	bhi.n	80159a0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015932:	683b      	ldr	r3, [r7, #0]
 8015934:	889b      	ldrh	r3, [r3, #4]
 8015936:	b2db      	uxtb	r3, r3
 8015938:	4619      	mov	r1, r3
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7ff fed9 	bl	80156f2 <USBD_CoreFindIF>
 8015940:	4603      	mov	r3, r0
 8015942:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015944:	7bbb      	ldrb	r3, [r7, #14]
 8015946:	2bff      	cmp	r3, #255	; 0xff
 8015948:	d01d      	beq.n	8015986 <USBD_StdItfReq+0x92>
 801594a:	7bbb      	ldrb	r3, [r7, #14]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d11a      	bne.n	8015986 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015950:	7bba      	ldrb	r2, [r7, #14]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	32ae      	adds	r2, #174	; 0xae
 8015956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595a:	689b      	ldr	r3, [r3, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d00f      	beq.n	8015980 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015960:	7bba      	ldrb	r2, [r7, #14]
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015968:	7bba      	ldrb	r2, [r7, #14]
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	32ae      	adds	r2, #174	; 0xae
 801596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015972:	689b      	ldr	r3, [r3, #8]
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	4798      	blx	r3
 801597a:	4603      	mov	r3, r0
 801597c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801597e:	e004      	b.n	801598a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015980:	2303      	movs	r3, #3
 8015982:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015984:	e001      	b.n	801598a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015986:	2303      	movs	r3, #3
 8015988:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	88db      	ldrh	r3, [r3, #6]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d110      	bne.n	80159b4 <USBD_StdItfReq+0xc0>
 8015992:	7bfb      	ldrb	r3, [r7, #15]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d10d      	bne.n	80159b4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015998:	6878      	ldr	r0, [r7, #4]
 801599a:	f000 fdc7 	bl	801652c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801599e:	e009      	b.n	80159b4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80159a0:	6839      	ldr	r1, [r7, #0]
 80159a2:	6878      	ldr	r0, [r7, #4]
 80159a4:	f000 fcf7 	bl	8016396 <USBD_CtlError>
          break;
 80159a8:	e004      	b.n	80159b4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80159aa:	6839      	ldr	r1, [r7, #0]
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f000 fcf2 	bl	8016396 <USBD_CtlError>
          break;
 80159b2:	e000      	b.n	80159b6 <USBD_StdItfReq+0xc2>
          break;
 80159b4:	bf00      	nop
      }
      break;
 80159b6:	e004      	b.n	80159c2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80159b8:	6839      	ldr	r1, [r7, #0]
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f000 fceb 	bl	8016396 <USBD_CtlError>
      break;
 80159c0:	bf00      	nop
  }

  return ret;
 80159c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	3710      	adds	r7, #16
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b084      	sub	sp, #16
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159d6:	2300      	movs	r3, #0
 80159d8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	889b      	ldrh	r3, [r3, #4]
 80159de:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159e8:	2b40      	cmp	r3, #64	; 0x40
 80159ea:	d007      	beq.n	80159fc <USBD_StdEPReq+0x30>
 80159ec:	2b40      	cmp	r3, #64	; 0x40
 80159ee:	f200 817f 	bhi.w	8015cf0 <USBD_StdEPReq+0x324>
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d02a      	beq.n	8015a4c <USBD_StdEPReq+0x80>
 80159f6:	2b20      	cmp	r3, #32
 80159f8:	f040 817a 	bne.w	8015cf0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80159fc:	7bbb      	ldrb	r3, [r7, #14]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f7ff fe83 	bl	801570c <USBD_CoreFindEP>
 8015a06:	4603      	mov	r3, r0
 8015a08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a0a:	7b7b      	ldrb	r3, [r7, #13]
 8015a0c:	2bff      	cmp	r3, #255	; 0xff
 8015a0e:	f000 8174 	beq.w	8015cfa <USBD_StdEPReq+0x32e>
 8015a12:	7b7b      	ldrb	r3, [r7, #13]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f040 8170 	bne.w	8015cfa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015a1a:	7b7a      	ldrb	r2, [r7, #13]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015a22:	7b7a      	ldrb	r2, [r7, #13]
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	32ae      	adds	r2, #174	; 0xae
 8015a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a2c:	689b      	ldr	r3, [r3, #8]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	f000 8163 	beq.w	8015cfa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a34:	7b7a      	ldrb	r2, [r7, #13]
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	32ae      	adds	r2, #174	; 0xae
 8015a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a3e:	689b      	ldr	r3, [r3, #8]
 8015a40:	6839      	ldr	r1, [r7, #0]
 8015a42:	6878      	ldr	r0, [r7, #4]
 8015a44:	4798      	blx	r3
 8015a46:	4603      	mov	r3, r0
 8015a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a4a:	e156      	b.n	8015cfa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a4c:	683b      	ldr	r3, [r7, #0]
 8015a4e:	785b      	ldrb	r3, [r3, #1]
 8015a50:	2b03      	cmp	r3, #3
 8015a52:	d008      	beq.n	8015a66 <USBD_StdEPReq+0x9a>
 8015a54:	2b03      	cmp	r3, #3
 8015a56:	f300 8145 	bgt.w	8015ce4 <USBD_StdEPReq+0x318>
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f000 809b 	beq.w	8015b96 <USBD_StdEPReq+0x1ca>
 8015a60:	2b01      	cmp	r3, #1
 8015a62:	d03c      	beq.n	8015ade <USBD_StdEPReq+0x112>
 8015a64:	e13e      	b.n	8015ce4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	2b02      	cmp	r3, #2
 8015a70:	d002      	beq.n	8015a78 <USBD_StdEPReq+0xac>
 8015a72:	2b03      	cmp	r3, #3
 8015a74:	d016      	beq.n	8015aa4 <USBD_StdEPReq+0xd8>
 8015a76:	e02c      	b.n	8015ad2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d00d      	beq.n	8015a9a <USBD_StdEPReq+0xce>
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
 8015a80:	2b80      	cmp	r3, #128	; 0x80
 8015a82:	d00a      	beq.n	8015a9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
 8015a86:	4619      	mov	r1, r3
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f001 f9d9 	bl	8016e40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a8e:	2180      	movs	r1, #128	; 0x80
 8015a90:	6878      	ldr	r0, [r7, #4]
 8015a92:	f001 f9d5 	bl	8016e40 <USBD_LL_StallEP>
 8015a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a98:	e020      	b.n	8015adc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a9a:	6839      	ldr	r1, [r7, #0]
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f000 fc7a 	bl	8016396 <USBD_CtlError>
              break;
 8015aa2:	e01b      	b.n	8015adc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	885b      	ldrh	r3, [r3, #2]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d10e      	bne.n	8015aca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015aac:	7bbb      	ldrb	r3, [r7, #14]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d00b      	beq.n	8015aca <USBD_StdEPReq+0xfe>
 8015ab2:	7bbb      	ldrb	r3, [r7, #14]
 8015ab4:	2b80      	cmp	r3, #128	; 0x80
 8015ab6:	d008      	beq.n	8015aca <USBD_StdEPReq+0xfe>
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	88db      	ldrh	r3, [r3, #6]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d104      	bne.n	8015aca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f001 f9bb 	bl	8016e40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f000 fd2e 	bl	801652c <USBD_CtlSendStatus>

              break;
 8015ad0:	e004      	b.n	8015adc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f000 fc5e 	bl	8016396 <USBD_CtlError>
              break;
 8015ada:	bf00      	nop
          }
          break;
 8015adc:	e107      	b.n	8015cee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	d002      	beq.n	8015af0 <USBD_StdEPReq+0x124>
 8015aea:	2b03      	cmp	r3, #3
 8015aec:	d016      	beq.n	8015b1c <USBD_StdEPReq+0x150>
 8015aee:	e04b      	b.n	8015b88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015af0:	7bbb      	ldrb	r3, [r7, #14]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d00d      	beq.n	8015b12 <USBD_StdEPReq+0x146>
 8015af6:	7bbb      	ldrb	r3, [r7, #14]
 8015af8:	2b80      	cmp	r3, #128	; 0x80
 8015afa:	d00a      	beq.n	8015b12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	4619      	mov	r1, r3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f001 f99d 	bl	8016e40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b06:	2180      	movs	r1, #128	; 0x80
 8015b08:	6878      	ldr	r0, [r7, #4]
 8015b0a:	f001 f999 	bl	8016e40 <USBD_LL_StallEP>
 8015b0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015b10:	e040      	b.n	8015b94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015b12:	6839      	ldr	r1, [r7, #0]
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f000 fc3e 	bl	8016396 <USBD_CtlError>
              break;
 8015b1a:	e03b      	b.n	8015b94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	885b      	ldrh	r3, [r3, #2]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d136      	bne.n	8015b92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015b24:	7bbb      	ldrb	r3, [r7, #14]
 8015b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d004      	beq.n	8015b38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b2e:	7bbb      	ldrb	r3, [r7, #14]
 8015b30:	4619      	mov	r1, r3
 8015b32:	6878      	ldr	r0, [r7, #4]
 8015b34:	f001 f9a3 	bl	8016e7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b38:	6878      	ldr	r0, [r7, #4]
 8015b3a:	f000 fcf7 	bl	801652c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b3e:	7bbb      	ldrb	r3, [r7, #14]
 8015b40:	4619      	mov	r1, r3
 8015b42:	6878      	ldr	r0, [r7, #4]
 8015b44:	f7ff fde2 	bl	801570c <USBD_CoreFindEP>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b4c:	7b7b      	ldrb	r3, [r7, #13]
 8015b4e:	2bff      	cmp	r3, #255	; 0xff
 8015b50:	d01f      	beq.n	8015b92 <USBD_StdEPReq+0x1c6>
 8015b52:	7b7b      	ldrb	r3, [r7, #13]
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d11c      	bne.n	8015b92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b58:	7b7a      	ldrb	r2, [r7, #13]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b60:	7b7a      	ldrb	r2, [r7, #13]
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	32ae      	adds	r2, #174	; 0xae
 8015b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b6a:	689b      	ldr	r3, [r3, #8]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d010      	beq.n	8015b92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b70:	7b7a      	ldrb	r2, [r7, #13]
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	32ae      	adds	r2, #174	; 0xae
 8015b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b7a:	689b      	ldr	r3, [r3, #8]
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	4798      	blx	r3
 8015b82:	4603      	mov	r3, r0
 8015b84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b86:	e004      	b.n	8015b92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b88:	6839      	ldr	r1, [r7, #0]
 8015b8a:	6878      	ldr	r0, [r7, #4]
 8015b8c:	f000 fc03 	bl	8016396 <USBD_CtlError>
              break;
 8015b90:	e000      	b.n	8015b94 <USBD_StdEPReq+0x1c8>
              break;
 8015b92:	bf00      	nop
          }
          break;
 8015b94:	e0ab      	b.n	8015cee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	2b02      	cmp	r3, #2
 8015ba0:	d002      	beq.n	8015ba8 <USBD_StdEPReq+0x1dc>
 8015ba2:	2b03      	cmp	r3, #3
 8015ba4:	d032      	beq.n	8015c0c <USBD_StdEPReq+0x240>
 8015ba6:	e097      	b.n	8015cd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ba8:	7bbb      	ldrb	r3, [r7, #14]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d007      	beq.n	8015bbe <USBD_StdEPReq+0x1f2>
 8015bae:	7bbb      	ldrb	r3, [r7, #14]
 8015bb0:	2b80      	cmp	r3, #128	; 0x80
 8015bb2:	d004      	beq.n	8015bbe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015bb4:	6839      	ldr	r1, [r7, #0]
 8015bb6:	6878      	ldr	r0, [r7, #4]
 8015bb8:	f000 fbed 	bl	8016396 <USBD_CtlError>
                break;
 8015bbc:	e091      	b.n	8015ce2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	da0b      	bge.n	8015bde <USBD_StdEPReq+0x212>
 8015bc6:	7bbb      	ldrb	r3, [r7, #14]
 8015bc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015bcc:	4613      	mov	r3, r2
 8015bce:	009b      	lsls	r3, r3, #2
 8015bd0:	4413      	add	r3, r2
 8015bd2:	009b      	lsls	r3, r3, #2
 8015bd4:	3310      	adds	r3, #16
 8015bd6:	687a      	ldr	r2, [r7, #4]
 8015bd8:	4413      	add	r3, r2
 8015bda:	3304      	adds	r3, #4
 8015bdc:	e00b      	b.n	8015bf6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bde:	7bbb      	ldrb	r3, [r7, #14]
 8015be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015be4:	4613      	mov	r3, r2
 8015be6:	009b      	lsls	r3, r3, #2
 8015be8:	4413      	add	r3, r2
 8015bea:	009b      	lsls	r3, r3, #2
 8015bec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bf0:	687a      	ldr	r2, [r7, #4]
 8015bf2:	4413      	add	r3, r2
 8015bf4:	3304      	adds	r3, #4
 8015bf6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bfe:	68bb      	ldr	r3, [r7, #8]
 8015c00:	2202      	movs	r2, #2
 8015c02:	4619      	mov	r1, r3
 8015c04:	6878      	ldr	r0, [r7, #4]
 8015c06:	f000 fc37 	bl	8016478 <USBD_CtlSendData>
              break;
 8015c0a:	e06a      	b.n	8015ce2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015c0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	da11      	bge.n	8015c38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015c14:	7bbb      	ldrb	r3, [r7, #14]
 8015c16:	f003 020f 	and.w	r2, r3, #15
 8015c1a:	6879      	ldr	r1, [r7, #4]
 8015c1c:	4613      	mov	r3, r2
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	4413      	add	r3, r2
 8015c22:	009b      	lsls	r3, r3, #2
 8015c24:	440b      	add	r3, r1
 8015c26:	3324      	adds	r3, #36	; 0x24
 8015c28:	881b      	ldrh	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d117      	bne.n	8015c5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c2e:	6839      	ldr	r1, [r7, #0]
 8015c30:	6878      	ldr	r0, [r7, #4]
 8015c32:	f000 fbb0 	bl	8016396 <USBD_CtlError>
                  break;
 8015c36:	e054      	b.n	8015ce2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c38:	7bbb      	ldrb	r3, [r7, #14]
 8015c3a:	f003 020f 	and.w	r2, r3, #15
 8015c3e:	6879      	ldr	r1, [r7, #4]
 8015c40:	4613      	mov	r3, r2
 8015c42:	009b      	lsls	r3, r3, #2
 8015c44:	4413      	add	r3, r2
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	440b      	add	r3, r1
 8015c4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c4e:	881b      	ldrh	r3, [r3, #0]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d104      	bne.n	8015c5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c54:	6839      	ldr	r1, [r7, #0]
 8015c56:	6878      	ldr	r0, [r7, #4]
 8015c58:	f000 fb9d 	bl	8016396 <USBD_CtlError>
                  break;
 8015c5c:	e041      	b.n	8015ce2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	da0b      	bge.n	8015c7e <USBD_StdEPReq+0x2b2>
 8015c66:	7bbb      	ldrb	r3, [r7, #14]
 8015c68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c6c:	4613      	mov	r3, r2
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	4413      	add	r3, r2
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	3310      	adds	r3, #16
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	4413      	add	r3, r2
 8015c7a:	3304      	adds	r3, #4
 8015c7c:	e00b      	b.n	8015c96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c7e:	7bbb      	ldrb	r3, [r7, #14]
 8015c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c84:	4613      	mov	r3, r2
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	4413      	add	r3, r2
 8015c8a:	009b      	lsls	r3, r3, #2
 8015c8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c90:	687a      	ldr	r2, [r7, #4]
 8015c92:	4413      	add	r3, r2
 8015c94:	3304      	adds	r3, #4
 8015c96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c98:	7bbb      	ldrb	r3, [r7, #14]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d002      	beq.n	8015ca4 <USBD_StdEPReq+0x2d8>
 8015c9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ca0:	2b80      	cmp	r3, #128	; 0x80
 8015ca2:	d103      	bne.n	8015cac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	2200      	movs	r2, #0
 8015ca8:	601a      	str	r2, [r3, #0]
 8015caa:	e00e      	b.n	8015cca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015cac:	7bbb      	ldrb	r3, [r7, #14]
 8015cae:	4619      	mov	r1, r3
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	f001 f903 	bl	8016ebc <USBD_LL_IsStallEP>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d003      	beq.n	8015cc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	2201      	movs	r2, #1
 8015cc0:	601a      	str	r2, [r3, #0]
 8015cc2:	e002      	b.n	8015cca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015cca:	68bb      	ldr	r3, [r7, #8]
 8015ccc:	2202      	movs	r2, #2
 8015cce:	4619      	mov	r1, r3
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f000 fbd1 	bl	8016478 <USBD_CtlSendData>
              break;
 8015cd6:	e004      	b.n	8015ce2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fb5b 	bl	8016396 <USBD_CtlError>
              break;
 8015ce0:	bf00      	nop
          }
          break;
 8015ce2:	e004      	b.n	8015cee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015ce4:	6839      	ldr	r1, [r7, #0]
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f000 fb55 	bl	8016396 <USBD_CtlError>
          break;
 8015cec:	bf00      	nop
      }
      break;
 8015cee:	e005      	b.n	8015cfc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fb4f 	bl	8016396 <USBD_CtlError>
      break;
 8015cf8:	e000      	b.n	8015cfc <USBD_StdEPReq+0x330>
      break;
 8015cfa:	bf00      	nop
  }

  return ret;
 8015cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cfe:	4618      	mov	r0, r3
 8015d00:	3710      	adds	r7, #16
 8015d02:	46bd      	mov	sp, r7
 8015d04:	bd80      	pop	{r7, pc}
	...

08015d08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015d12:	2300      	movs	r3, #0
 8015d14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015d16:	2300      	movs	r3, #0
 8015d18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	885b      	ldrh	r3, [r3, #2]
 8015d22:	0a1b      	lsrs	r3, r3, #8
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	3b01      	subs	r3, #1
 8015d28:	2b06      	cmp	r3, #6
 8015d2a:	f200 8128 	bhi.w	8015f7e <USBD_GetDescriptor+0x276>
 8015d2e:	a201      	add	r2, pc, #4	; (adr r2, 8015d34 <USBD_GetDescriptor+0x2c>)
 8015d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d34:	08015d51 	.word	0x08015d51
 8015d38:	08015d69 	.word	0x08015d69
 8015d3c:	08015da9 	.word	0x08015da9
 8015d40:	08015f7f 	.word	0x08015f7f
 8015d44:	08015f7f 	.word	0x08015f7f
 8015d48:	08015f1f 	.word	0x08015f1f
 8015d4c:	08015f4b 	.word	0x08015f4b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	687a      	ldr	r2, [r7, #4]
 8015d5a:	7c12      	ldrb	r2, [r2, #16]
 8015d5c:	f107 0108 	add.w	r1, r7, #8
 8015d60:	4610      	mov	r0, r2
 8015d62:	4798      	blx	r3
 8015d64:	60f8      	str	r0, [r7, #12]
      break;
 8015d66:	e112      	b.n	8015f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	7c1b      	ldrb	r3, [r3, #16]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d10d      	bne.n	8015d8c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d78:	f107 0208 	add.w	r2, r7, #8
 8015d7c:	4610      	mov	r0, r2
 8015d7e:	4798      	blx	r3
 8015d80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	3301      	adds	r3, #1
 8015d86:	2202      	movs	r2, #2
 8015d88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d8a:	e100      	b.n	8015f8e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d94:	f107 0208 	add.w	r2, r7, #8
 8015d98:	4610      	mov	r0, r2
 8015d9a:	4798      	blx	r3
 8015d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	3301      	adds	r3, #1
 8015da2:	2202      	movs	r2, #2
 8015da4:	701a      	strb	r2, [r3, #0]
      break;
 8015da6:	e0f2      	b.n	8015f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	885b      	ldrh	r3, [r3, #2]
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b05      	cmp	r3, #5
 8015db0:	f200 80ac 	bhi.w	8015f0c <USBD_GetDescriptor+0x204>
 8015db4:	a201      	add	r2, pc, #4	; (adr r2, 8015dbc <USBD_GetDescriptor+0xb4>)
 8015db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dba:	bf00      	nop
 8015dbc:	08015dd5 	.word	0x08015dd5
 8015dc0:	08015e09 	.word	0x08015e09
 8015dc4:	08015e3d 	.word	0x08015e3d
 8015dc8:	08015e71 	.word	0x08015e71
 8015dcc:	08015ea5 	.word	0x08015ea5
 8015dd0:	08015ed9 	.word	0x08015ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d00b      	beq.n	8015df8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de6:	685b      	ldr	r3, [r3, #4]
 8015de8:	687a      	ldr	r2, [r7, #4]
 8015dea:	7c12      	ldrb	r2, [r2, #16]
 8015dec:	f107 0108 	add.w	r1, r7, #8
 8015df0:	4610      	mov	r0, r2
 8015df2:	4798      	blx	r3
 8015df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015df6:	e091      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015df8:	6839      	ldr	r1, [r7, #0]
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f000 facb 	bl	8016396 <USBD_CtlError>
            err++;
 8015e00:	7afb      	ldrb	r3, [r7, #11]
 8015e02:	3301      	adds	r3, #1
 8015e04:	72fb      	strb	r3, [r7, #11]
          break;
 8015e06:	e089      	b.n	8015f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e0e:	689b      	ldr	r3, [r3, #8]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d00b      	beq.n	8015e2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1a:	689b      	ldr	r3, [r3, #8]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	7c12      	ldrb	r2, [r2, #16]
 8015e20:	f107 0108 	add.w	r1, r7, #8
 8015e24:	4610      	mov	r0, r2
 8015e26:	4798      	blx	r3
 8015e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e2a:	e077      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e2c:	6839      	ldr	r1, [r7, #0]
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 fab1 	bl	8016396 <USBD_CtlError>
            err++;
 8015e34:	7afb      	ldrb	r3, [r7, #11]
 8015e36:	3301      	adds	r3, #1
 8015e38:	72fb      	strb	r3, [r7, #11]
          break;
 8015e3a:	e06f      	b.n	8015f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e42:	68db      	ldr	r3, [r3, #12]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d00b      	beq.n	8015e60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e4e:	68db      	ldr	r3, [r3, #12]
 8015e50:	687a      	ldr	r2, [r7, #4]
 8015e52:	7c12      	ldrb	r2, [r2, #16]
 8015e54:	f107 0108 	add.w	r1, r7, #8
 8015e58:	4610      	mov	r0, r2
 8015e5a:	4798      	blx	r3
 8015e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e5e:	e05d      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e60:	6839      	ldr	r1, [r7, #0]
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f000 fa97 	bl	8016396 <USBD_CtlError>
            err++;
 8015e68:	7afb      	ldrb	r3, [r7, #11]
 8015e6a:	3301      	adds	r3, #1
 8015e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015e6e:	e055      	b.n	8015f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e76:	691b      	ldr	r3, [r3, #16]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d00b      	beq.n	8015e94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e82:	691b      	ldr	r3, [r3, #16]
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	7c12      	ldrb	r2, [r2, #16]
 8015e88:	f107 0108 	add.w	r1, r7, #8
 8015e8c:	4610      	mov	r0, r2
 8015e8e:	4798      	blx	r3
 8015e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e92:	e043      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e94:	6839      	ldr	r1, [r7, #0]
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f000 fa7d 	bl	8016396 <USBD_CtlError>
            err++;
 8015e9c:	7afb      	ldrb	r3, [r7, #11]
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ea2:	e03b      	b.n	8015f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eaa:	695b      	ldr	r3, [r3, #20]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d00b      	beq.n	8015ec8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eb6:	695b      	ldr	r3, [r3, #20]
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	7c12      	ldrb	r2, [r2, #16]
 8015ebc:	f107 0108 	add.w	r1, r7, #8
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4798      	blx	r3
 8015ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ec6:	e029      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ec8:	6839      	ldr	r1, [r7, #0]
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 fa63 	bl	8016396 <USBD_CtlError>
            err++;
 8015ed0:	7afb      	ldrb	r3, [r7, #11]
 8015ed2:	3301      	adds	r3, #1
 8015ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8015ed6:	e021      	b.n	8015f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ede:	699b      	ldr	r3, [r3, #24]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d00b      	beq.n	8015efc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eea:	699b      	ldr	r3, [r3, #24]
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	7c12      	ldrb	r2, [r2, #16]
 8015ef0:	f107 0108 	add.w	r1, r7, #8
 8015ef4:	4610      	mov	r0, r2
 8015ef6:	4798      	blx	r3
 8015ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015efa:	e00f      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015efc:	6839      	ldr	r1, [r7, #0]
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	f000 fa49 	bl	8016396 <USBD_CtlError>
            err++;
 8015f04:	7afb      	ldrb	r3, [r7, #11]
 8015f06:	3301      	adds	r3, #1
 8015f08:	72fb      	strb	r3, [r7, #11]
          break;
 8015f0a:	e007      	b.n	8015f1c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015f0c:	6839      	ldr	r1, [r7, #0]
 8015f0e:	6878      	ldr	r0, [r7, #4]
 8015f10:	f000 fa41 	bl	8016396 <USBD_CtlError>
          err++;
 8015f14:	7afb      	ldrb	r3, [r7, #11]
 8015f16:	3301      	adds	r3, #1
 8015f18:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015f1a:	bf00      	nop
      }
      break;
 8015f1c:	e037      	b.n	8015f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	7c1b      	ldrb	r3, [r3, #16]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d109      	bne.n	8015f3a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f2e:	f107 0208 	add.w	r2, r7, #8
 8015f32:	4610      	mov	r0, r2
 8015f34:	4798      	blx	r3
 8015f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f38:	e029      	b.n	8015f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f3a:	6839      	ldr	r1, [r7, #0]
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f000 fa2a 	bl	8016396 <USBD_CtlError>
        err++;
 8015f42:	7afb      	ldrb	r3, [r7, #11]
 8015f44:	3301      	adds	r3, #1
 8015f46:	72fb      	strb	r3, [r7, #11]
      break;
 8015f48:	e021      	b.n	8015f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	7c1b      	ldrb	r3, [r3, #16]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d10d      	bne.n	8015f6e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f5a:	f107 0208 	add.w	r2, r7, #8
 8015f5e:	4610      	mov	r0, r2
 8015f60:	4798      	blx	r3
 8015f62:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	3301      	adds	r3, #1
 8015f68:	2207      	movs	r2, #7
 8015f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f6c:	e00f      	b.n	8015f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f6e:	6839      	ldr	r1, [r7, #0]
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f000 fa10 	bl	8016396 <USBD_CtlError>
        err++;
 8015f76:	7afb      	ldrb	r3, [r7, #11]
 8015f78:	3301      	adds	r3, #1
 8015f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f7c:	e007      	b.n	8015f8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f7e:	6839      	ldr	r1, [r7, #0]
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 fa08 	bl	8016396 <USBD_CtlError>
      err++;
 8015f86:	7afb      	ldrb	r3, [r7, #11]
 8015f88:	3301      	adds	r3, #1
 8015f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8015f8c:	bf00      	nop
  }

  if (err != 0U)
 8015f8e:	7afb      	ldrb	r3, [r7, #11]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d11e      	bne.n	8015fd2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	88db      	ldrh	r3, [r3, #6]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d016      	beq.n	8015fca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f9c:	893b      	ldrh	r3, [r7, #8]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d00e      	beq.n	8015fc0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	88da      	ldrh	r2, [r3, #6]
 8015fa6:	893b      	ldrh	r3, [r7, #8]
 8015fa8:	4293      	cmp	r3, r2
 8015faa:	bf28      	it	cs
 8015fac:	4613      	movcs	r3, r2
 8015fae:	b29b      	uxth	r3, r3
 8015fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015fb2:	893b      	ldrh	r3, [r7, #8]
 8015fb4:	461a      	mov	r2, r3
 8015fb6:	68f9      	ldr	r1, [r7, #12]
 8015fb8:	6878      	ldr	r0, [r7, #4]
 8015fba:	f000 fa5d 	bl	8016478 <USBD_CtlSendData>
 8015fbe:	e009      	b.n	8015fd4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015fc0:	6839      	ldr	r1, [r7, #0]
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f000 f9e7 	bl	8016396 <USBD_CtlError>
 8015fc8:	e004      	b.n	8015fd4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fca:	6878      	ldr	r0, [r7, #4]
 8015fcc:	f000 faae 	bl	801652c <USBD_CtlSendStatus>
 8015fd0:	e000      	b.n	8015fd4 <USBD_GetDescriptor+0x2cc>
    return;
 8015fd2:	bf00      	nop
  }
}
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop

08015fdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	889b      	ldrh	r3, [r3, #4]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d131      	bne.n	8016052 <USBD_SetAddress+0x76>
 8015fee:	683b      	ldr	r3, [r7, #0]
 8015ff0:	88db      	ldrh	r3, [r3, #6]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d12d      	bne.n	8016052 <USBD_SetAddress+0x76>
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	885b      	ldrh	r3, [r3, #2]
 8015ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8015ffc:	d829      	bhi.n	8016052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	885b      	ldrh	r3, [r3, #2]
 8016002:	b2db      	uxtb	r3, r3
 8016004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016010:	b2db      	uxtb	r3, r3
 8016012:	2b03      	cmp	r3, #3
 8016014:	d104      	bne.n	8016020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016016:	6839      	ldr	r1, [r7, #0]
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f000 f9bc 	bl	8016396 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801601e:	e01d      	b.n	801605c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	7bfa      	ldrb	r2, [r7, #15]
 8016024:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016028:	7bfb      	ldrb	r3, [r7, #15]
 801602a:	4619      	mov	r1, r3
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 ff71 	bl	8016f14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 fa7a 	bl	801652c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016038:	7bfb      	ldrb	r3, [r7, #15]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d004      	beq.n	8016048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2202      	movs	r2, #2
 8016042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016046:	e009      	b.n	801605c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2201      	movs	r2, #1
 801604c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016050:	e004      	b.n	801605c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 f99e 	bl	8016396 <USBD_CtlError>
  }
}
 801605a:	bf00      	nop
 801605c:	bf00      	nop
 801605e:	3710      	adds	r7, #16
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}

08016064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b084      	sub	sp, #16
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801606e:	2300      	movs	r3, #0
 8016070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	885b      	ldrh	r3, [r3, #2]
 8016076:	b2da      	uxtb	r2, r3
 8016078:	4b4e      	ldr	r3, [pc, #312]	; (80161b4 <USBD_SetConfig+0x150>)
 801607a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801607c:	4b4d      	ldr	r3, [pc, #308]	; (80161b4 <USBD_SetConfig+0x150>)
 801607e:	781b      	ldrb	r3, [r3, #0]
 8016080:	2b01      	cmp	r3, #1
 8016082:	d905      	bls.n	8016090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016084:	6839      	ldr	r1, [r7, #0]
 8016086:	6878      	ldr	r0, [r7, #4]
 8016088:	f000 f985 	bl	8016396 <USBD_CtlError>
    return USBD_FAIL;
 801608c:	2303      	movs	r3, #3
 801608e:	e08c      	b.n	80161aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016096:	b2db      	uxtb	r3, r3
 8016098:	2b02      	cmp	r3, #2
 801609a:	d002      	beq.n	80160a2 <USBD_SetConfig+0x3e>
 801609c:	2b03      	cmp	r3, #3
 801609e:	d029      	beq.n	80160f4 <USBD_SetConfig+0x90>
 80160a0:	e075      	b.n	801618e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80160a2:	4b44      	ldr	r3, [pc, #272]	; (80161b4 <USBD_SetConfig+0x150>)
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d020      	beq.n	80160ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80160aa:	4b42      	ldr	r3, [pc, #264]	; (80161b4 <USBD_SetConfig+0x150>)
 80160ac:	781b      	ldrb	r3, [r3, #0]
 80160ae:	461a      	mov	r2, r3
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80160b4:	4b3f      	ldr	r3, [pc, #252]	; (80161b4 <USBD_SetConfig+0x150>)
 80160b6:	781b      	ldrb	r3, [r3, #0]
 80160b8:	4619      	mov	r1, r3
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7fe ffe1 	bl	8015082 <USBD_SetClassConfig>
 80160c0:	4603      	mov	r3, r0
 80160c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80160c4:	7bfb      	ldrb	r3, [r7, #15]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d008      	beq.n	80160dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160ca:	6839      	ldr	r1, [r7, #0]
 80160cc:	6878      	ldr	r0, [r7, #4]
 80160ce:	f000 f962 	bl	8016396 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2202      	movs	r2, #2
 80160d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160da:	e065      	b.n	80161a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 fa25 	bl	801652c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	2203      	movs	r2, #3
 80160e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160ea:	e05d      	b.n	80161a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f000 fa1d 	bl	801652c <USBD_CtlSendStatus>
      break;
 80160f2:	e059      	b.n	80161a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160f4:	4b2f      	ldr	r3, [pc, #188]	; (80161b4 <USBD_SetConfig+0x150>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d112      	bne.n	8016122 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	2202      	movs	r2, #2
 8016100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016104:	4b2b      	ldr	r3, [pc, #172]	; (80161b4 <USBD_SetConfig+0x150>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	461a      	mov	r2, r3
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801610e:	4b29      	ldr	r3, [pc, #164]	; (80161b4 <USBD_SetConfig+0x150>)
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	4619      	mov	r1, r3
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7fe ffd0 	bl	80150ba <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	f000 fa06 	bl	801652c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016120:	e042      	b.n	80161a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016122:	4b24      	ldr	r3, [pc, #144]	; (80161b4 <USBD_SetConfig+0x150>)
 8016124:	781b      	ldrb	r3, [r3, #0]
 8016126:	461a      	mov	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	429a      	cmp	r2, r3
 801612e:	d02a      	beq.n	8016186 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	b2db      	uxtb	r3, r3
 8016136:	4619      	mov	r1, r3
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f7fe ffbe 	bl	80150ba <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801613e:	4b1d      	ldr	r3, [pc, #116]	; (80161b4 <USBD_SetConfig+0x150>)
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	461a      	mov	r2, r3
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016148:	4b1a      	ldr	r3, [pc, #104]	; (80161b4 <USBD_SetConfig+0x150>)
 801614a:	781b      	ldrb	r3, [r3, #0]
 801614c:	4619      	mov	r1, r3
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7fe ff97 	bl	8015082 <USBD_SetClassConfig>
 8016154:	4603      	mov	r3, r0
 8016156:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016158:	7bfb      	ldrb	r3, [r7, #15]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d00f      	beq.n	801617e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801615e:	6839      	ldr	r1, [r7, #0]
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 f918 	bl	8016396 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	b2db      	uxtb	r3, r3
 801616c:	4619      	mov	r1, r3
 801616e:	6878      	ldr	r0, [r7, #4]
 8016170:	f7fe ffa3 	bl	80150ba <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2202      	movs	r2, #2
 8016178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801617c:	e014      	b.n	80161a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 f9d4 	bl	801652c <USBD_CtlSendStatus>
      break;
 8016184:	e010      	b.n	80161a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	f000 f9d0 	bl	801652c <USBD_CtlSendStatus>
      break;
 801618c:	e00c      	b.n	80161a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801618e:	6839      	ldr	r1, [r7, #0]
 8016190:	6878      	ldr	r0, [r7, #4]
 8016192:	f000 f900 	bl	8016396 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016196:	4b07      	ldr	r3, [pc, #28]	; (80161b4 <USBD_SetConfig+0x150>)
 8016198:	781b      	ldrb	r3, [r3, #0]
 801619a:	4619      	mov	r1, r3
 801619c:	6878      	ldr	r0, [r7, #4]
 801619e:	f7fe ff8c 	bl	80150ba <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80161a2:	2303      	movs	r3, #3
 80161a4:	73fb      	strb	r3, [r7, #15]
      break;
 80161a6:	bf00      	nop
  }

  return ret;
 80161a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3710      	adds	r7, #16
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
 80161b2:	bf00      	nop
 80161b4:	240015e4 	.word	0x240015e4

080161b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b082      	sub	sp, #8
 80161bc:	af00      	add	r7, sp, #0
 80161be:	6078      	str	r0, [r7, #4]
 80161c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	88db      	ldrh	r3, [r3, #6]
 80161c6:	2b01      	cmp	r3, #1
 80161c8:	d004      	beq.n	80161d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161ca:	6839      	ldr	r1, [r7, #0]
 80161cc:	6878      	ldr	r0, [r7, #4]
 80161ce:	f000 f8e2 	bl	8016396 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161d2:	e023      	b.n	801621c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	2b02      	cmp	r3, #2
 80161de:	dc02      	bgt.n	80161e6 <USBD_GetConfig+0x2e>
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	dc03      	bgt.n	80161ec <USBD_GetConfig+0x34>
 80161e4:	e015      	b.n	8016212 <USBD_GetConfig+0x5a>
 80161e6:	2b03      	cmp	r3, #3
 80161e8:	d00b      	beq.n	8016202 <USBD_GetConfig+0x4a>
 80161ea:	e012      	b.n	8016212 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2200      	movs	r2, #0
 80161f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	3308      	adds	r3, #8
 80161f6:	2201      	movs	r2, #1
 80161f8:	4619      	mov	r1, r3
 80161fa:	6878      	ldr	r0, [r7, #4]
 80161fc:	f000 f93c 	bl	8016478 <USBD_CtlSendData>
        break;
 8016200:	e00c      	b.n	801621c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	3304      	adds	r3, #4
 8016206:	2201      	movs	r2, #1
 8016208:	4619      	mov	r1, r3
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f000 f934 	bl	8016478 <USBD_CtlSendData>
        break;
 8016210:	e004      	b.n	801621c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016212:	6839      	ldr	r1, [r7, #0]
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f000 f8be 	bl	8016396 <USBD_CtlError>
        break;
 801621a:	bf00      	nop
}
 801621c:	bf00      	nop
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b082      	sub	sp, #8
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016234:	b2db      	uxtb	r3, r3
 8016236:	3b01      	subs	r3, #1
 8016238:	2b02      	cmp	r3, #2
 801623a:	d81e      	bhi.n	801627a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	88db      	ldrh	r3, [r3, #6]
 8016240:	2b02      	cmp	r3, #2
 8016242:	d004      	beq.n	801624e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016244:	6839      	ldr	r1, [r7, #0]
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f000 f8a5 	bl	8016396 <USBD_CtlError>
        break;
 801624c:	e01a      	b.n	8016284 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2201      	movs	r2, #1
 8016252:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801625a:	2b00      	cmp	r3, #0
 801625c:	d005      	beq.n	801626a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	f043 0202 	orr.w	r2, r3, #2
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	330c      	adds	r3, #12
 801626e:	2202      	movs	r2, #2
 8016270:	4619      	mov	r1, r3
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f000 f900 	bl	8016478 <USBD_CtlSendData>
      break;
 8016278:	e004      	b.n	8016284 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801627a:	6839      	ldr	r1, [r7, #0]
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f000 f88a 	bl	8016396 <USBD_CtlError>
      break;
 8016282:	bf00      	nop
  }
}
 8016284:	bf00      	nop
 8016286:	3708      	adds	r7, #8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}

0801628c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	6078      	str	r0, [r7, #4]
 8016294:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	885b      	ldrh	r3, [r3, #2]
 801629a:	2b01      	cmp	r3, #1
 801629c:	d107      	bne.n	80162ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	2201      	movs	r2, #1
 80162a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80162a6:	6878      	ldr	r0, [r7, #4]
 80162a8:	f000 f940 	bl	801652c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80162ac:	e013      	b.n	80162d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80162ae:	683b      	ldr	r3, [r7, #0]
 80162b0:	885b      	ldrh	r3, [r3, #2]
 80162b2:	2b02      	cmp	r3, #2
 80162b4:	d10b      	bne.n	80162ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	889b      	ldrh	r3, [r3, #4]
 80162ba:	0a1b      	lsrs	r3, r3, #8
 80162bc:	b29b      	uxth	r3, r3
 80162be:	b2da      	uxtb	r2, r3
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	f000 f930 	bl	801652c <USBD_CtlSendStatus>
}
 80162cc:	e003      	b.n	80162d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162ce:	6839      	ldr	r1, [r7, #0]
 80162d0:	6878      	ldr	r0, [r7, #4]
 80162d2:	f000 f860 	bl	8016396 <USBD_CtlError>
}
 80162d6:	bf00      	nop
 80162d8:	3708      	adds	r7, #8
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}

080162de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162de:	b580      	push	{r7, lr}
 80162e0:	b082      	sub	sp, #8
 80162e2:	af00      	add	r7, sp, #0
 80162e4:	6078      	str	r0, [r7, #4]
 80162e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162ee:	b2db      	uxtb	r3, r3
 80162f0:	3b01      	subs	r3, #1
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	d80b      	bhi.n	801630e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	885b      	ldrh	r3, [r3, #2]
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d10c      	bne.n	8016318 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	2200      	movs	r2, #0
 8016302:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 f910 	bl	801652c <USBD_CtlSendStatus>
      }
      break;
 801630c:	e004      	b.n	8016318 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801630e:	6839      	ldr	r1, [r7, #0]
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f000 f840 	bl	8016396 <USBD_CtlError>
      break;
 8016316:	e000      	b.n	801631a <USBD_ClrFeature+0x3c>
      break;
 8016318:	bf00      	nop
  }
}
 801631a:	bf00      	nop
 801631c:	3708      	adds	r7, #8
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}

08016322 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016322:	b580      	push	{r7, lr}
 8016324:	b084      	sub	sp, #16
 8016326:	af00      	add	r7, sp, #0
 8016328:	6078      	str	r0, [r7, #4]
 801632a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	781a      	ldrb	r2, [r3, #0]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	3301      	adds	r3, #1
 801633c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	781a      	ldrb	r2, [r3, #0]
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	3301      	adds	r3, #1
 801634a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801634c:	68f8      	ldr	r0, [r7, #12]
 801634e:	f7ff fa41 	bl	80157d4 <SWAPBYTE>
 8016352:	4603      	mov	r3, r0
 8016354:	461a      	mov	r2, r3
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	3301      	adds	r3, #1
 801635e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	3301      	adds	r3, #1
 8016364:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016366:	68f8      	ldr	r0, [r7, #12]
 8016368:	f7ff fa34 	bl	80157d4 <SWAPBYTE>
 801636c:	4603      	mov	r3, r0
 801636e:	461a      	mov	r2, r3
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	3301      	adds	r3, #1
 8016378:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	3301      	adds	r3, #1
 801637e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016380:	68f8      	ldr	r0, [r7, #12]
 8016382:	f7ff fa27 	bl	80157d4 <SWAPBYTE>
 8016386:	4603      	mov	r3, r0
 8016388:	461a      	mov	r2, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	80da      	strh	r2, [r3, #6]
}
 801638e:	bf00      	nop
 8016390:	3710      	adds	r7, #16
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}

08016396 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016396:	b580      	push	{r7, lr}
 8016398:	b082      	sub	sp, #8
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
 801639e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80163a0:	2180      	movs	r1, #128	; 0x80
 80163a2:	6878      	ldr	r0, [r7, #4]
 80163a4:	f000 fd4c 	bl	8016e40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80163a8:	2100      	movs	r1, #0
 80163aa:	6878      	ldr	r0, [r7, #4]
 80163ac:	f000 fd48 	bl	8016e40 <USBD_LL_StallEP>
}
 80163b0:	bf00      	nop
 80163b2:	3708      	adds	r7, #8
 80163b4:	46bd      	mov	sp, r7
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b086      	sub	sp, #24
 80163bc:	af00      	add	r7, sp, #0
 80163be:	60f8      	str	r0, [r7, #12]
 80163c0:	60b9      	str	r1, [r7, #8]
 80163c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80163c4:	2300      	movs	r3, #0
 80163c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d036      	beq.n	801643c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163d2:	6938      	ldr	r0, [r7, #16]
 80163d4:	f000 f836 	bl	8016444 <USBD_GetLen>
 80163d8:	4603      	mov	r3, r0
 80163da:	3301      	adds	r3, #1
 80163dc:	b29b      	uxth	r3, r3
 80163de:	005b      	lsls	r3, r3, #1
 80163e0:	b29a      	uxth	r2, r3
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163e6:	7dfb      	ldrb	r3, [r7, #23]
 80163e8:	68ba      	ldr	r2, [r7, #8]
 80163ea:	4413      	add	r3, r2
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	7812      	ldrb	r2, [r2, #0]
 80163f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80163f2:	7dfb      	ldrb	r3, [r7, #23]
 80163f4:	3301      	adds	r3, #1
 80163f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163f8:	7dfb      	ldrb	r3, [r7, #23]
 80163fa:	68ba      	ldr	r2, [r7, #8]
 80163fc:	4413      	add	r3, r2
 80163fe:	2203      	movs	r2, #3
 8016400:	701a      	strb	r2, [r3, #0]
  idx++;
 8016402:	7dfb      	ldrb	r3, [r7, #23]
 8016404:	3301      	adds	r3, #1
 8016406:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016408:	e013      	b.n	8016432 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801640a:	7dfb      	ldrb	r3, [r7, #23]
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	4413      	add	r3, r2
 8016410:	693a      	ldr	r2, [r7, #16]
 8016412:	7812      	ldrb	r2, [r2, #0]
 8016414:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	3301      	adds	r3, #1
 801641a:	613b      	str	r3, [r7, #16]
    idx++;
 801641c:	7dfb      	ldrb	r3, [r7, #23]
 801641e:	3301      	adds	r3, #1
 8016420:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016422:	7dfb      	ldrb	r3, [r7, #23]
 8016424:	68ba      	ldr	r2, [r7, #8]
 8016426:	4413      	add	r3, r2
 8016428:	2200      	movs	r2, #0
 801642a:	701a      	strb	r2, [r3, #0]
    idx++;
 801642c:	7dfb      	ldrb	r3, [r7, #23]
 801642e:	3301      	adds	r3, #1
 8016430:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016432:	693b      	ldr	r3, [r7, #16]
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1e7      	bne.n	801640a <USBD_GetString+0x52>
 801643a:	e000      	b.n	801643e <USBD_GetString+0x86>
    return;
 801643c:	bf00      	nop
  }
}
 801643e:	3718      	adds	r7, #24
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016444:	b480      	push	{r7}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801644c:	2300      	movs	r3, #0
 801644e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016454:	e005      	b.n	8016462 <USBD_GetLen+0x1e>
  {
    len++;
 8016456:	7bfb      	ldrb	r3, [r7, #15]
 8016458:	3301      	adds	r3, #1
 801645a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801645c:	68bb      	ldr	r3, [r7, #8]
 801645e:	3301      	adds	r3, #1
 8016460:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	781b      	ldrb	r3, [r3, #0]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1f5      	bne.n	8016456 <USBD_GetLen+0x12>
  }

  return len;
 801646a:	7bfb      	ldrb	r3, [r7, #15]
}
 801646c:	4618      	mov	r0, r3
 801646e:	3714      	adds	r7, #20
 8016470:	46bd      	mov	sp, r7
 8016472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016476:	4770      	bx	lr

08016478 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b084      	sub	sp, #16
 801647c:	af00      	add	r7, sp, #0
 801647e:	60f8      	str	r0, [r7, #12]
 8016480:	60b9      	str	r1, [r7, #8]
 8016482:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	2202      	movs	r2, #2
 8016488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	68ba      	ldr	r2, [r7, #8]
 801649c:	2100      	movs	r1, #0
 801649e:	68f8      	ldr	r0, [r7, #12]
 80164a0:	f000 fd57 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 80164a4:	2300      	movs	r3, #0
}
 80164a6:	4618      	mov	r0, r3
 80164a8:	3710      	adds	r7, #16
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}

080164ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80164ae:	b580      	push	{r7, lr}
 80164b0:	b084      	sub	sp, #16
 80164b2:	af00      	add	r7, sp, #0
 80164b4:	60f8      	str	r0, [r7, #12]
 80164b6:	60b9      	str	r1, [r7, #8]
 80164b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	68ba      	ldr	r2, [r7, #8]
 80164be:	2100      	movs	r1, #0
 80164c0:	68f8      	ldr	r0, [r7, #12]
 80164c2:	f000 fd46 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 80164c6:	2300      	movs	r3, #0
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	3710      	adds	r7, #16
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}

080164d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b084      	sub	sp, #16
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	60f8      	str	r0, [r7, #12]
 80164d8:	60b9      	str	r1, [r7, #8]
 80164da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	2203      	movs	r2, #3
 80164e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	687a      	ldr	r2, [r7, #4]
 80164e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	687a      	ldr	r2, [r7, #4]
 80164f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	68ba      	ldr	r2, [r7, #8]
 80164f8:	2100      	movs	r1, #0
 80164fa:	68f8      	ldr	r0, [r7, #12]
 80164fc:	f000 fd4a 	bl	8016f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016500:	2300      	movs	r3, #0
}
 8016502:	4618      	mov	r0, r3
 8016504:	3710      	adds	r7, #16
 8016506:	46bd      	mov	sp, r7
 8016508:	bd80      	pop	{r7, pc}

0801650a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801650a:	b580      	push	{r7, lr}
 801650c:	b084      	sub	sp, #16
 801650e:	af00      	add	r7, sp, #0
 8016510:	60f8      	str	r0, [r7, #12]
 8016512:	60b9      	str	r1, [r7, #8]
 8016514:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	68ba      	ldr	r2, [r7, #8]
 801651a:	2100      	movs	r1, #0
 801651c:	68f8      	ldr	r0, [r7, #12]
 801651e:	f000 fd39 	bl	8016f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016522:	2300      	movs	r3, #0
}
 8016524:	4618      	mov	r0, r3
 8016526:	3710      	adds	r7, #16
 8016528:	46bd      	mov	sp, r7
 801652a:	bd80      	pop	{r7, pc}

0801652c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b082      	sub	sp, #8
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	2204      	movs	r2, #4
 8016538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801653c:	2300      	movs	r3, #0
 801653e:	2200      	movs	r2, #0
 8016540:	2100      	movs	r1, #0
 8016542:	6878      	ldr	r0, [r7, #4]
 8016544:	f000 fd05 	bl	8016f52 <USBD_LL_Transmit>

  return USBD_OK;
 8016548:	2300      	movs	r3, #0
}
 801654a:	4618      	mov	r0, r3
 801654c:	3708      	adds	r7, #8
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016552:	b580      	push	{r7, lr}
 8016554:	b082      	sub	sp, #8
 8016556:	af00      	add	r7, sp, #0
 8016558:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	2205      	movs	r2, #5
 801655e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016562:	2300      	movs	r3, #0
 8016564:	2200      	movs	r2, #0
 8016566:	2100      	movs	r1, #0
 8016568:	6878      	ldr	r0, [r7, #4]
 801656a:	f000 fd13 	bl	8016f94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801656e:	2300      	movs	r3, #0
}
 8016570:	4618      	mov	r0, r3
 8016572:	3708      	adds	r7, #8
 8016574:	46bd      	mov	sp, r7
 8016576:	bd80      	pop	{r7, pc}

08016578 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016578:	b480      	push	{r7}
 801657a:	b087      	sub	sp, #28
 801657c:	af00      	add	r7, sp, #0
 801657e:	60f8      	str	r0, [r7, #12]
 8016580:	60b9      	str	r1, [r7, #8]
 8016582:	4613      	mov	r3, r2
 8016584:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016586:	2301      	movs	r3, #1
 8016588:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801658a:	2300      	movs	r3, #0
 801658c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801658e:	4b1f      	ldr	r3, [pc, #124]	; (801660c <FATFS_LinkDriverEx+0x94>)
 8016590:	7a5b      	ldrb	r3, [r3, #9]
 8016592:	b2db      	uxtb	r3, r3
 8016594:	2b00      	cmp	r3, #0
 8016596:	d131      	bne.n	80165fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016598:	4b1c      	ldr	r3, [pc, #112]	; (801660c <FATFS_LinkDriverEx+0x94>)
 801659a:	7a5b      	ldrb	r3, [r3, #9]
 801659c:	b2db      	uxtb	r3, r3
 801659e:	461a      	mov	r2, r3
 80165a0:	4b1a      	ldr	r3, [pc, #104]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165a2:	2100      	movs	r1, #0
 80165a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80165a6:	4b19      	ldr	r3, [pc, #100]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165a8:	7a5b      	ldrb	r3, [r3, #9]
 80165aa:	b2db      	uxtb	r3, r3
 80165ac:	4a17      	ldr	r2, [pc, #92]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	4413      	add	r3, r2
 80165b2:	68fa      	ldr	r2, [r7, #12]
 80165b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80165b6:	4b15      	ldr	r3, [pc, #84]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165b8:	7a5b      	ldrb	r3, [r3, #9]
 80165ba:	b2db      	uxtb	r3, r3
 80165bc:	461a      	mov	r2, r3
 80165be:	4b13      	ldr	r3, [pc, #76]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165c0:	4413      	add	r3, r2
 80165c2:	79fa      	ldrb	r2, [r7, #7]
 80165c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80165c6:	4b11      	ldr	r3, [pc, #68]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165c8:	7a5b      	ldrb	r3, [r3, #9]
 80165ca:	b2db      	uxtb	r3, r3
 80165cc:	1c5a      	adds	r2, r3, #1
 80165ce:	b2d1      	uxtb	r1, r2
 80165d0:	4a0e      	ldr	r2, [pc, #56]	; (801660c <FATFS_LinkDriverEx+0x94>)
 80165d2:	7251      	strb	r1, [r2, #9]
 80165d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165d6:	7dbb      	ldrb	r3, [r7, #22]
 80165d8:	3330      	adds	r3, #48	; 0x30
 80165da:	b2da      	uxtb	r2, r3
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165e0:	68bb      	ldr	r3, [r7, #8]
 80165e2:	3301      	adds	r3, #1
 80165e4:	223a      	movs	r2, #58	; 0x3a
 80165e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165e8:	68bb      	ldr	r3, [r7, #8]
 80165ea:	3302      	adds	r3, #2
 80165ec:	222f      	movs	r2, #47	; 0x2f
 80165ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165f0:	68bb      	ldr	r3, [r7, #8]
 80165f2:	3303      	adds	r3, #3
 80165f4:	2200      	movs	r2, #0
 80165f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80165f8:	2300      	movs	r3, #0
 80165fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80165fe:	4618      	mov	r0, r3
 8016600:	371c      	adds	r7, #28
 8016602:	46bd      	mov	sp, r7
 8016604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016608:	4770      	bx	lr
 801660a:	bf00      	nop
 801660c:	240015e8 	.word	0x240015e8

08016610 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b082      	sub	sp, #8
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801661a:	2200      	movs	r2, #0
 801661c:	6839      	ldr	r1, [r7, #0]
 801661e:	6878      	ldr	r0, [r7, #4]
 8016620:	f7ff ffaa 	bl	8016578 <FATFS_LinkDriverEx>
 8016624:	4603      	mov	r3, r0
}
 8016626:	4618      	mov	r0, r3
 8016628:	3708      	adds	r7, #8
 801662a:	46bd      	mov	sp, r7
 801662c:	bd80      	pop	{r7, pc}
	...

08016630 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016630:	b580      	push	{r7, lr}
 8016632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016634:	2201      	movs	r2, #1
 8016636:	4913      	ldr	r1, [pc, #76]	; (8016684 <MX_USB_DEVICE_Init+0x54>)
 8016638:	4813      	ldr	r0, [pc, #76]	; (8016688 <MX_USB_DEVICE_Init+0x58>)
 801663a:	f7fe fca5 	bl	8014f88 <USBD_Init>
 801663e:	4603      	mov	r3, r0
 8016640:	2b00      	cmp	r3, #0
 8016642:	d001      	beq.n	8016648 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016644:	f7ec f986 	bl	8002954 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016648:	4910      	ldr	r1, [pc, #64]	; (801668c <MX_USB_DEVICE_Init+0x5c>)
 801664a:	480f      	ldr	r0, [pc, #60]	; (8016688 <MX_USB_DEVICE_Init+0x58>)
 801664c:	f7fe fccc 	bl	8014fe8 <USBD_RegisterClass>
 8016650:	4603      	mov	r3, r0
 8016652:	2b00      	cmp	r3, #0
 8016654:	d001      	beq.n	801665a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016656:	f7ec f97d 	bl	8002954 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801665a:	490d      	ldr	r1, [pc, #52]	; (8016690 <MX_USB_DEVICE_Init+0x60>)
 801665c:	480a      	ldr	r0, [pc, #40]	; (8016688 <MX_USB_DEVICE_Init+0x58>)
 801665e:	f7fe fbc3 	bl	8014de8 <USBD_CDC_RegisterInterface>
 8016662:	4603      	mov	r3, r0
 8016664:	2b00      	cmp	r3, #0
 8016666:	d001      	beq.n	801666c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016668:	f7ec f974 	bl	8002954 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801666c:	4806      	ldr	r0, [pc, #24]	; (8016688 <MX_USB_DEVICE_Init+0x58>)
 801666e:	f7fe fcf1 	bl	8015054 <USBD_Start>
 8016672:	4603      	mov	r3, r0
 8016674:	2b00      	cmp	r3, #0
 8016676:	d001      	beq.n	801667c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016678:	f7ec f96c 	bl	8002954 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801667c:	f7f3 f908 	bl	8009890 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016680:	bf00      	nop
 8016682:	bd80      	pop	{r7, pc}
 8016684:	240000b0 	.word	0x240000b0
 8016688:	240015f4 	.word	0x240015f4
 801668c:	2400001c 	.word	0x2400001c
 8016690:	2400009c 	.word	0x2400009c

08016694 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016694:	b580      	push	{r7, lr}
 8016696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016698:	2200      	movs	r2, #0
 801669a:	4905      	ldr	r1, [pc, #20]	; (80166b0 <CDC_Init_HS+0x1c>)
 801669c:	4805      	ldr	r0, [pc, #20]	; (80166b4 <CDC_Init_HS+0x20>)
 801669e:	f7fe fbbd 	bl	8014e1c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80166a2:	4905      	ldr	r1, [pc, #20]	; (80166b8 <CDC_Init_HS+0x24>)
 80166a4:	4803      	ldr	r0, [pc, #12]	; (80166b4 <CDC_Init_HS+0x20>)
 80166a6:	f7fe fbdb 	bl	8014e60 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80166aa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80166ac:	4618      	mov	r0, r3
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	240020d0 	.word	0x240020d0
 80166b4:	240015f4 	.word	0x240015f4
 80166b8:	240018d0 	.word	0x240018d0

080166bc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80166bc:	b480      	push	{r7}
 80166be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80166c0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80166c2:	4618      	mov	r0, r3
 80166c4:	46bd      	mov	sp, r7
 80166c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ca:	4770      	bx	lr

080166cc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166cc:	b480      	push	{r7}
 80166ce:	b083      	sub	sp, #12
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	4603      	mov	r3, r0
 80166d4:	6039      	str	r1, [r7, #0]
 80166d6:	71fb      	strb	r3, [r7, #7]
 80166d8:	4613      	mov	r3, r2
 80166da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166dc:	79fb      	ldrb	r3, [r7, #7]
 80166de:	2b23      	cmp	r3, #35	; 0x23
 80166e0:	d84a      	bhi.n	8016778 <CDC_Control_HS+0xac>
 80166e2:	a201      	add	r2, pc, #4	; (adr r2, 80166e8 <CDC_Control_HS+0x1c>)
 80166e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166e8:	08016779 	.word	0x08016779
 80166ec:	08016779 	.word	0x08016779
 80166f0:	08016779 	.word	0x08016779
 80166f4:	08016779 	.word	0x08016779
 80166f8:	08016779 	.word	0x08016779
 80166fc:	08016779 	.word	0x08016779
 8016700:	08016779 	.word	0x08016779
 8016704:	08016779 	.word	0x08016779
 8016708:	08016779 	.word	0x08016779
 801670c:	08016779 	.word	0x08016779
 8016710:	08016779 	.word	0x08016779
 8016714:	08016779 	.word	0x08016779
 8016718:	08016779 	.word	0x08016779
 801671c:	08016779 	.word	0x08016779
 8016720:	08016779 	.word	0x08016779
 8016724:	08016779 	.word	0x08016779
 8016728:	08016779 	.word	0x08016779
 801672c:	08016779 	.word	0x08016779
 8016730:	08016779 	.word	0x08016779
 8016734:	08016779 	.word	0x08016779
 8016738:	08016779 	.word	0x08016779
 801673c:	08016779 	.word	0x08016779
 8016740:	08016779 	.word	0x08016779
 8016744:	08016779 	.word	0x08016779
 8016748:	08016779 	.word	0x08016779
 801674c:	08016779 	.word	0x08016779
 8016750:	08016779 	.word	0x08016779
 8016754:	08016779 	.word	0x08016779
 8016758:	08016779 	.word	0x08016779
 801675c:	08016779 	.word	0x08016779
 8016760:	08016779 	.word	0x08016779
 8016764:	08016779 	.word	0x08016779
 8016768:	08016779 	.word	0x08016779
 801676c:	08016779 	.word	0x08016779
 8016770:	08016779 	.word	0x08016779
 8016774:	08016779 	.word	0x08016779
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016778:	bf00      	nop
  }

  return (USBD_OK);
 801677a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801677c:	4618      	mov	r0, r3
 801677e:	370c      	adds	r7, #12
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b084      	sub	sp, #16
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
 8016790:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016792:	6879      	ldr	r1, [r7, #4]
 8016794:	480e      	ldr	r0, [pc, #56]	; (80167d0 <CDC_Receive_HS+0x48>)
 8016796:	f7fe fb63 	bl	8014e60 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801679a:	480d      	ldr	r0, [pc, #52]	; (80167d0 <CDC_Receive_HS+0x48>)
 801679c:	f7fe fbbe 	bl	8014f1c <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 80167a6:	4b0b      	ldr	r3, [pc, #44]	; (80167d4 <CDC_Receive_HS+0x4c>)
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	4a0b      	ldr	r2, [pc, #44]	; (80167d8 <CDC_Receive_HS+0x50>)
 80167ac:	4413      	add	r3, r2
 80167ae:	68fa      	ldr	r2, [r7, #12]
 80167b0:	6879      	ldr	r1, [r7, #4]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f000 fcf0 	bl	8017198 <memcpy>
  usbBytesReady += cpyLen;
 80167b8:	4b06      	ldr	r3, [pc, #24]	; (80167d4 <CDC_Receive_HS+0x4c>)
 80167ba:	681a      	ldr	r2, [r3, #0]
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	4413      	add	r3, r2
 80167c0:	4a04      	ldr	r2, [pc, #16]	; (80167d4 <CDC_Receive_HS+0x4c>)
 80167c2:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 80167c4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80167c6:	4618      	mov	r0, r3
 80167c8:	3710      	adds	r7, #16
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	240015f4 	.word	0x240015f4
 80167d4:	2400026c 	.word	0x2400026c
 80167d8:	2400016c 	.word	0x2400016c

080167dc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	460b      	mov	r3, r1
 80167e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167e8:	2300      	movs	r3, #0
 80167ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80167ec:	4b0d      	ldr	r3, [pc, #52]	; (8016824 <CDC_Transmit_HS+0x48>)
 80167ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d001      	beq.n	8016802 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80167fe:	2301      	movs	r3, #1
 8016800:	e00b      	b.n	801681a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016802:	887b      	ldrh	r3, [r7, #2]
 8016804:	461a      	mov	r2, r3
 8016806:	6879      	ldr	r1, [r7, #4]
 8016808:	4806      	ldr	r0, [pc, #24]	; (8016824 <CDC_Transmit_HS+0x48>)
 801680a:	f7fe fb07 	bl	8014e1c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801680e:	4805      	ldr	r0, [pc, #20]	; (8016824 <CDC_Transmit_HS+0x48>)
 8016810:	f7fe fb44 	bl	8014e9c <USBD_CDC_TransmitPacket>
 8016814:	4603      	mov	r3, r0
 8016816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016818:	7bfb      	ldrb	r3, [r7, #15]
}
 801681a:	4618      	mov	r0, r3
 801681c:	3710      	adds	r7, #16
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	240015f4 	.word	0x240015f4

08016828 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016828:	b480      	push	{r7}
 801682a:	b087      	sub	sp, #28
 801682c:	af00      	add	r7, sp, #0
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	4613      	mov	r3, r2
 8016834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016836:	2300      	movs	r3, #0
 8016838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801683a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801683e:	4618      	mov	r0, r3
 8016840:	371c      	adds	r7, #28
 8016842:	46bd      	mov	sp, r7
 8016844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016848:	4770      	bx	lr
	...

0801684c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	4603      	mov	r3, r0
 8016854:	6039      	str	r1, [r7, #0]
 8016856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	2212      	movs	r2, #18
 801685c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801685e:	4b03      	ldr	r3, [pc, #12]	; (801686c <USBD_HS_DeviceDescriptor+0x20>)
}
 8016860:	4618      	mov	r0, r3
 8016862:	370c      	adds	r7, #12
 8016864:	46bd      	mov	sp, r7
 8016866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686a:	4770      	bx	lr
 801686c:	240000cc 	.word	0x240000cc

08016870 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0
 8016876:	4603      	mov	r3, r0
 8016878:	6039      	str	r1, [r7, #0]
 801687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801687c:	683b      	ldr	r3, [r7, #0]
 801687e:	2204      	movs	r2, #4
 8016880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016882:	4b03      	ldr	r3, [pc, #12]	; (8016890 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016884:	4618      	mov	r0, r3
 8016886:	370c      	adds	r7, #12
 8016888:	46bd      	mov	sp, r7
 801688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688e:	4770      	bx	lr
 8016890:	240000e0 	.word	0x240000e0

08016894 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b082      	sub	sp, #8
 8016898:	af00      	add	r7, sp, #0
 801689a:	4603      	mov	r3, r0
 801689c:	6039      	str	r1, [r7, #0]
 801689e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80168a0:	79fb      	ldrb	r3, [r7, #7]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d105      	bne.n	80168b2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168a6:	683a      	ldr	r2, [r7, #0]
 80168a8:	4907      	ldr	r1, [pc, #28]	; (80168c8 <USBD_HS_ProductStrDescriptor+0x34>)
 80168aa:	4808      	ldr	r0, [pc, #32]	; (80168cc <USBD_HS_ProductStrDescriptor+0x38>)
 80168ac:	f7ff fd84 	bl	80163b8 <USBD_GetString>
 80168b0:	e004      	b.n	80168bc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	4904      	ldr	r1, [pc, #16]	; (80168c8 <USBD_HS_ProductStrDescriptor+0x34>)
 80168b6:	4805      	ldr	r0, [pc, #20]	; (80168cc <USBD_HS_ProductStrDescriptor+0x38>)
 80168b8:	f7ff fd7e 	bl	80163b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80168bc:	4b02      	ldr	r3, [pc, #8]	; (80168c8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80168be:	4618      	mov	r0, r3
 80168c0:	3708      	adds	r7, #8
 80168c2:	46bd      	mov	sp, r7
 80168c4:	bd80      	pop	{r7, pc}
 80168c6:	bf00      	nop
 80168c8:	240028d0 	.word	0x240028d0
 80168cc:	080184d4 	.word	0x080184d4

080168d0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	6039      	str	r1, [r7, #0]
 80168da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168dc:	683a      	ldr	r2, [r7, #0]
 80168de:	4904      	ldr	r1, [pc, #16]	; (80168f0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168e0:	4804      	ldr	r0, [pc, #16]	; (80168f4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168e2:	f7ff fd69 	bl	80163b8 <USBD_GetString>
  return USBD_StrDesc;
 80168e6:	4b02      	ldr	r3, [pc, #8]	; (80168f0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	240028d0 	.word	0x240028d0
 80168f4:	080184f0 	.word	0x080184f0

080168f8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	4603      	mov	r3, r0
 8016900:	6039      	str	r1, [r7, #0]
 8016902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	221a      	movs	r2, #26
 8016908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801690a:	f000 f843 	bl	8016994 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801690e:	4b02      	ldr	r3, [pc, #8]	; (8016918 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016910:	4618      	mov	r0, r3
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	240000e4 	.word	0x240000e4

0801691c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b082      	sub	sp, #8
 8016920:	af00      	add	r7, sp, #0
 8016922:	4603      	mov	r3, r0
 8016924:	6039      	str	r1, [r7, #0]
 8016926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016928:	79fb      	ldrb	r3, [r7, #7]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d105      	bne.n	801693a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801692e:	683a      	ldr	r2, [r7, #0]
 8016930:	4907      	ldr	r1, [pc, #28]	; (8016950 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016932:	4808      	ldr	r0, [pc, #32]	; (8016954 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016934:	f7ff fd40 	bl	80163b8 <USBD_GetString>
 8016938:	e004      	b.n	8016944 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	4904      	ldr	r1, [pc, #16]	; (8016950 <USBD_HS_ConfigStrDescriptor+0x34>)
 801693e:	4805      	ldr	r0, [pc, #20]	; (8016954 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016940:	f7ff fd3a 	bl	80163b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016944:	4b02      	ldr	r3, [pc, #8]	; (8016950 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016946:	4618      	mov	r0, r3
 8016948:	3708      	adds	r7, #8
 801694a:	46bd      	mov	sp, r7
 801694c:	bd80      	pop	{r7, pc}
 801694e:	bf00      	nop
 8016950:	240028d0 	.word	0x240028d0
 8016954:	080184f4 	.word	0x080184f4

08016958 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	4603      	mov	r3, r0
 8016960:	6039      	str	r1, [r7, #0]
 8016962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016964:	79fb      	ldrb	r3, [r7, #7]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d105      	bne.n	8016976 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801696a:	683a      	ldr	r2, [r7, #0]
 801696c:	4907      	ldr	r1, [pc, #28]	; (801698c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801696e:	4808      	ldr	r0, [pc, #32]	; (8016990 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016970:	f7ff fd22 	bl	80163b8 <USBD_GetString>
 8016974:	e004      	b.n	8016980 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016976:	683a      	ldr	r2, [r7, #0]
 8016978:	4904      	ldr	r1, [pc, #16]	; (801698c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801697a:	4805      	ldr	r0, [pc, #20]	; (8016990 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801697c:	f7ff fd1c 	bl	80163b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016980:	4b02      	ldr	r3, [pc, #8]	; (801698c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016982:	4618      	mov	r0, r3
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}
 801698a:	bf00      	nop
 801698c:	240028d0 	.word	0x240028d0
 8016990:	08018500 	.word	0x08018500

08016994 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b084      	sub	sp, #16
 8016998:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801699a:	4b0f      	ldr	r3, [pc, #60]	; (80169d8 <Get_SerialNum+0x44>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80169a0:	4b0e      	ldr	r3, [pc, #56]	; (80169dc <Get_SerialNum+0x48>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80169a6:	4b0e      	ldr	r3, [pc, #56]	; (80169e0 <Get_SerialNum+0x4c>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	4413      	add	r3, r2
 80169b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d009      	beq.n	80169ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80169ba:	2208      	movs	r2, #8
 80169bc:	4909      	ldr	r1, [pc, #36]	; (80169e4 <Get_SerialNum+0x50>)
 80169be:	68f8      	ldr	r0, [r7, #12]
 80169c0:	f000 f814 	bl	80169ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80169c4:	2204      	movs	r2, #4
 80169c6:	4908      	ldr	r1, [pc, #32]	; (80169e8 <Get_SerialNum+0x54>)
 80169c8:	68b8      	ldr	r0, [r7, #8]
 80169ca:	f000 f80f 	bl	80169ec <IntToUnicode>
  }
}
 80169ce:	bf00      	nop
 80169d0:	3710      	adds	r7, #16
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bd80      	pop	{r7, pc}
 80169d6:	bf00      	nop
 80169d8:	1ff1e800 	.word	0x1ff1e800
 80169dc:	1ff1e804 	.word	0x1ff1e804
 80169e0:	1ff1e808 	.word	0x1ff1e808
 80169e4:	240000e6 	.word	0x240000e6
 80169e8:	240000f6 	.word	0x240000f6

080169ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169ec:	b480      	push	{r7}
 80169ee:	b087      	sub	sp, #28
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60f8      	str	r0, [r7, #12]
 80169f4:	60b9      	str	r1, [r7, #8]
 80169f6:	4613      	mov	r3, r2
 80169f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169fa:	2300      	movs	r3, #0
 80169fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169fe:	2300      	movs	r3, #0
 8016a00:	75fb      	strb	r3, [r7, #23]
 8016a02:	e027      	b.n	8016a54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	0f1b      	lsrs	r3, r3, #28
 8016a08:	2b09      	cmp	r3, #9
 8016a0a:	d80b      	bhi.n	8016a24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	0f1b      	lsrs	r3, r3, #28
 8016a10:	b2da      	uxtb	r2, r3
 8016a12:	7dfb      	ldrb	r3, [r7, #23]
 8016a14:	005b      	lsls	r3, r3, #1
 8016a16:	4619      	mov	r1, r3
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	440b      	add	r3, r1
 8016a1c:	3230      	adds	r2, #48	; 0x30
 8016a1e:	b2d2      	uxtb	r2, r2
 8016a20:	701a      	strb	r2, [r3, #0]
 8016a22:	e00a      	b.n	8016a3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	0f1b      	lsrs	r3, r3, #28
 8016a28:	b2da      	uxtb	r2, r3
 8016a2a:	7dfb      	ldrb	r3, [r7, #23]
 8016a2c:	005b      	lsls	r3, r3, #1
 8016a2e:	4619      	mov	r1, r3
 8016a30:	68bb      	ldr	r3, [r7, #8]
 8016a32:	440b      	add	r3, r1
 8016a34:	3237      	adds	r2, #55	; 0x37
 8016a36:	b2d2      	uxtb	r2, r2
 8016a38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	011b      	lsls	r3, r3, #4
 8016a3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a40:	7dfb      	ldrb	r3, [r7, #23]
 8016a42:	005b      	lsls	r3, r3, #1
 8016a44:	3301      	adds	r3, #1
 8016a46:	68ba      	ldr	r2, [r7, #8]
 8016a48:	4413      	add	r3, r2
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a4e:	7dfb      	ldrb	r3, [r7, #23]
 8016a50:	3301      	adds	r3, #1
 8016a52:	75fb      	strb	r3, [r7, #23]
 8016a54:	7dfa      	ldrb	r2, [r7, #23]
 8016a56:	79fb      	ldrb	r3, [r7, #7]
 8016a58:	429a      	cmp	r2, r3
 8016a5a:	d3d3      	bcc.n	8016a04 <IntToUnicode+0x18>
  }
}
 8016a5c:	bf00      	nop
 8016a5e:	bf00      	nop
 8016a60:	371c      	adds	r7, #28
 8016a62:	46bd      	mov	sp, r7
 8016a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a68:	4770      	bx	lr
	...

08016a6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	b0b2      	sub	sp, #200	; 0xc8
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a74:	f107 0310 	add.w	r3, r7, #16
 8016a78:	22b8      	movs	r2, #184	; 0xb8
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f000 fb4f 	bl	8017120 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	4a1a      	ldr	r2, [pc, #104]	; (8016af0 <HAL_PCD_MspInit+0x84>)
 8016a88:	4293      	cmp	r3, r2
 8016a8a:	d12c      	bne.n	8016ae6 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a90:	f04f 0300 	mov.w	r3, #0
 8016a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a98:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016aa0:	f107 0310 	add.w	r3, r7, #16
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7f3 fed3 	bl	800a850 <HAL_RCCEx_PeriphCLKConfig>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d001      	beq.n	8016ab4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016ab0:	f7eb ff50 	bl	8002954 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016ab4:	f7f2 feec 	bl	8009890 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016ab8:	4b0e      	ldr	r3, [pc, #56]	; (8016af4 <HAL_PCD_MspInit+0x88>)
 8016aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016abe:	4a0d      	ldr	r2, [pc, #52]	; (8016af4 <HAL_PCD_MspInit+0x88>)
 8016ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016ac4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016ac8:	4b0a      	ldr	r3, [pc, #40]	; (8016af4 <HAL_PCD_MspInit+0x88>)
 8016aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016ad2:	60fb      	str	r3, [r7, #12]
 8016ad4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	2100      	movs	r1, #0
 8016ada:	204d      	movs	r0, #77	; 0x4d
 8016adc:	f7ee fc5d 	bl	800539a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016ae0:	204d      	movs	r0, #77	; 0x4d
 8016ae2:	f7ee fc74 	bl	80053ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016ae6:	bf00      	nop
 8016ae8:	37c8      	adds	r7, #200	; 0xc8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	40040000 	.word	0x40040000
 8016af4:	58024400 	.word	0x58024400

08016af8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016b0c:	4619      	mov	r1, r3
 8016b0e:	4610      	mov	r0, r2
 8016b10:	f7fe faed 	bl	80150ee <USBD_LL_SetupStage>
}
 8016b14:	bf00      	nop
 8016b16:	3708      	adds	r7, #8
 8016b18:	46bd      	mov	sp, r7
 8016b1a:	bd80      	pop	{r7, pc}

08016b1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	b082      	sub	sp, #8
 8016b20:	af00      	add	r7, sp, #0
 8016b22:	6078      	str	r0, [r7, #4]
 8016b24:	460b      	mov	r3, r1
 8016b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b2e:	78fa      	ldrb	r2, [r7, #3]
 8016b30:	6879      	ldr	r1, [r7, #4]
 8016b32:	4613      	mov	r3, r2
 8016b34:	00db      	lsls	r3, r3, #3
 8016b36:	4413      	add	r3, r2
 8016b38:	009b      	lsls	r3, r3, #2
 8016b3a:	440b      	add	r3, r1
 8016b3c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b40:	681a      	ldr	r2, [r3, #0]
 8016b42:	78fb      	ldrb	r3, [r7, #3]
 8016b44:	4619      	mov	r1, r3
 8016b46:	f7fe fb27 	bl	8015198 <USBD_LL_DataOutStage>
}
 8016b4a:	bf00      	nop
 8016b4c:	3708      	adds	r7, #8
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}

08016b52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b52:	b580      	push	{r7, lr}
 8016b54:	b082      	sub	sp, #8
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	6078      	str	r0, [r7, #4]
 8016b5a:	460b      	mov	r3, r1
 8016b5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b64:	78fa      	ldrb	r2, [r7, #3]
 8016b66:	6879      	ldr	r1, [r7, #4]
 8016b68:	4613      	mov	r3, r2
 8016b6a:	00db      	lsls	r3, r3, #3
 8016b6c:	4413      	add	r3, r2
 8016b6e:	009b      	lsls	r3, r3, #2
 8016b70:	440b      	add	r3, r1
 8016b72:	3348      	adds	r3, #72	; 0x48
 8016b74:	681a      	ldr	r2, [r3, #0]
 8016b76:	78fb      	ldrb	r3, [r7, #3]
 8016b78:	4619      	mov	r1, r3
 8016b7a:	f7fe fbc0 	bl	80152fe <USBD_LL_DataInStage>
}
 8016b7e:	bf00      	nop
 8016b80:	3708      	adds	r7, #8
 8016b82:	46bd      	mov	sp, r7
 8016b84:	bd80      	pop	{r7, pc}

08016b86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b86:	b580      	push	{r7, lr}
 8016b88:	b082      	sub	sp, #8
 8016b8a:	af00      	add	r7, sp, #0
 8016b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7fe fcfa 	bl	801558e <USBD_LL_SOF>
}
 8016b9a:	bf00      	nop
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	46bd      	mov	sp, r7
 8016ba0:	bd80      	pop	{r7, pc}

08016ba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016baa:	2301      	movs	r3, #1
 8016bac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	691b      	ldr	r3, [r3, #16]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d102      	bne.n	8016bbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	73fb      	strb	r3, [r7, #15]
 8016bba:	e008      	b.n	8016bce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	691b      	ldr	r3, [r3, #16]
 8016bc0:	2b02      	cmp	r3, #2
 8016bc2:	d102      	bne.n	8016bca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016bc4:	2301      	movs	r3, #1
 8016bc6:	73fb      	strb	r3, [r7, #15]
 8016bc8:	e001      	b.n	8016bce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016bca:	f7eb fec3 	bl	8002954 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bd4:	7bfa      	ldrb	r2, [r7, #15]
 8016bd6:	4611      	mov	r1, r2
 8016bd8:	4618      	mov	r0, r3
 8016bda:	f7fe fc94 	bl	8015506 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7fe fc3c 	bl	8015462 <USBD_LL_Reset>
}
 8016bea:	bf00      	nop
 8016bec:	3710      	adds	r7, #16
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
	...

08016bf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c02:	4618      	mov	r0, r3
 8016c04:	f7fe fc8f 	bl	8015526 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	687a      	ldr	r2, [r7, #4]
 8016c14:	6812      	ldr	r2, [r2, #0]
 8016c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016c1a:	f043 0301 	orr.w	r3, r3, #1
 8016c1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6a1b      	ldr	r3, [r3, #32]
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d005      	beq.n	8016c34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c28:	4b04      	ldr	r3, [pc, #16]	; (8016c3c <HAL_PCD_SuspendCallback+0x48>)
 8016c2a:	691b      	ldr	r3, [r3, #16]
 8016c2c:	4a03      	ldr	r2, [pc, #12]	; (8016c3c <HAL_PCD_SuspendCallback+0x48>)
 8016c2e:	f043 0306 	orr.w	r3, r3, #6
 8016c32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c34:	bf00      	nop
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}
 8016c3c:	e000ed00 	.word	0xe000ed00

08016c40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c40:	b580      	push	{r7, lr}
 8016c42:	b082      	sub	sp, #8
 8016c44:	af00      	add	r7, sp, #0
 8016c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7fe fc85 	bl	801555e <USBD_LL_Resume>
}
 8016c54:	bf00      	nop
 8016c56:	3708      	adds	r7, #8
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}

08016c5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b082      	sub	sp, #8
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
 8016c64:	460b      	mov	r3, r1
 8016c66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c6e:	78fa      	ldrb	r2, [r7, #3]
 8016c70:	4611      	mov	r1, r2
 8016c72:	4618      	mov	r0, r3
 8016c74:	f7fe fcdd 	bl	8015632 <USBD_LL_IsoOUTIncomplete>
}
 8016c78:	bf00      	nop
 8016c7a:	3708      	adds	r7, #8
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd80      	pop	{r7, pc}

08016c80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	460b      	mov	r3, r1
 8016c8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c92:	78fa      	ldrb	r2, [r7, #3]
 8016c94:	4611      	mov	r1, r2
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7fe fc99 	bl	80155ce <USBD_LL_IsoINIncomplete>
}
 8016c9c:	bf00      	nop
 8016c9e:	3708      	adds	r7, #8
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	bd80      	pop	{r7, pc}

08016ca4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7fe fcef 	bl	8015696 <USBD_LL_DevConnected>
}
 8016cb8:	bf00      	nop
 8016cba:	3708      	adds	r7, #8
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}

08016cc0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f7fe fcec 	bl	80156ac <USBD_LL_DevDisconnected>
}
 8016cd4:	bf00      	nop
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	2b01      	cmp	r3, #1
 8016cea:	d140      	bne.n	8016d6e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016cec:	4a22      	ldr	r2, [pc, #136]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	4a20      	ldr	r2, [pc, #128]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016cf8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016cfc:	4b1e      	ldr	r3, [pc, #120]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016cfe:	4a1f      	ldr	r2, [pc, #124]	; (8016d7c <USBD_LL_Init+0xa0>)
 8016d00:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016d02:	4b1d      	ldr	r3, [pc, #116]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d04:	2209      	movs	r2, #9
 8016d06:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016d08:	4b1b      	ldr	r3, [pc, #108]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d0a:	2202      	movs	r2, #2
 8016d0c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016d0e:	4b1a      	ldr	r3, [pc, #104]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d10:	2200      	movs	r2, #0
 8016d12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016d14:	4b18      	ldr	r3, [pc, #96]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d16:	2202      	movs	r2, #2
 8016d18:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016d1a:	4b17      	ldr	r3, [pc, #92]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016d20:	4b15      	ldr	r3, [pc, #84]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d22:	2200      	movs	r2, #0
 8016d24:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016d26:	4b14      	ldr	r3, [pc, #80]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d28:	2200      	movs	r2, #0
 8016d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d2c:	4b12      	ldr	r3, [pc, #72]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d2e:	2200      	movs	r2, #0
 8016d30:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d32:	4b11      	ldr	r3, [pc, #68]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d34:	2200      	movs	r2, #0
 8016d36:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d38:	4b0f      	ldr	r3, [pc, #60]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d3a:	2200      	movs	r2, #0
 8016d3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d3e:	480e      	ldr	r0, [pc, #56]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d40:	f7f1 fab3 	bl	80082aa <HAL_PCD_Init>
 8016d44:	4603      	mov	r3, r0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d001      	beq.n	8016d4e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d4a:	f7eb fe03 	bl	8002954 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d52:	4809      	ldr	r0, [pc, #36]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d54:	f7f2 fd21 	bl	800979a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d58:	2280      	movs	r2, #128	; 0x80
 8016d5a:	2100      	movs	r1, #0
 8016d5c:	4806      	ldr	r0, [pc, #24]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d5e:	f7f2 fcd5 	bl	800970c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d62:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d66:	2101      	movs	r1, #1
 8016d68:	4803      	ldr	r0, [pc, #12]	; (8016d78 <USBD_LL_Init+0x9c>)
 8016d6a:	f7f2 fccf 	bl	800970c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d6e:	2300      	movs	r3, #0
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	3708      	adds	r7, #8
 8016d74:	46bd      	mov	sp, r7
 8016d76:	bd80      	pop	{r7, pc}
 8016d78:	24002ad0 	.word	0x24002ad0
 8016d7c:	40040000 	.word	0x40040000

08016d80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b084      	sub	sp, #16
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d88:	2300      	movs	r3, #0
 8016d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d96:	4618      	mov	r0, r3
 8016d98:	f7f1 fbab 	bl	80084f2 <HAL_PCD_Start>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016da0:	7bfb      	ldrb	r3, [r7, #15]
 8016da2:	4618      	mov	r0, r3
 8016da4:	f000 f942 	bl	801702c <USBD_Get_USB_Status>
 8016da8:	4603      	mov	r3, r0
 8016daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	3710      	adds	r7, #16
 8016db2:	46bd      	mov	sp, r7
 8016db4:	bd80      	pop	{r7, pc}

08016db6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016db6:	b580      	push	{r7, lr}
 8016db8:	b084      	sub	sp, #16
 8016dba:	af00      	add	r7, sp, #0
 8016dbc:	6078      	str	r0, [r7, #4]
 8016dbe:	4608      	mov	r0, r1
 8016dc0:	4611      	mov	r1, r2
 8016dc2:	461a      	mov	r2, r3
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	70fb      	strb	r3, [r7, #3]
 8016dc8:	460b      	mov	r3, r1
 8016dca:	70bb      	strb	r3, [r7, #2]
 8016dcc:	4613      	mov	r3, r2
 8016dce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dde:	78bb      	ldrb	r3, [r7, #2]
 8016de0:	883a      	ldrh	r2, [r7, #0]
 8016de2:	78f9      	ldrb	r1, [r7, #3]
 8016de4:	f7f2 f8ab 	bl	8008f3e <HAL_PCD_EP_Open>
 8016de8:	4603      	mov	r3, r0
 8016dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dec:	7bfb      	ldrb	r3, [r7, #15]
 8016dee:	4618      	mov	r0, r3
 8016df0:	f000 f91c 	bl	801702c <USBD_Get_USB_Status>
 8016df4:	4603      	mov	r3, r0
 8016df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3710      	adds	r7, #16
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}

08016e02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e02:	b580      	push	{r7, lr}
 8016e04:	b084      	sub	sp, #16
 8016e06:	af00      	add	r7, sp, #0
 8016e08:	6078      	str	r0, [r7, #4]
 8016e0a:	460b      	mov	r3, r1
 8016e0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e12:	2300      	movs	r3, #0
 8016e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e1c:	78fa      	ldrb	r2, [r7, #3]
 8016e1e:	4611      	mov	r1, r2
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f2 f8f4 	bl	800900e <HAL_PCD_EP_Close>
 8016e26:	4603      	mov	r3, r0
 8016e28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e2a:	7bfb      	ldrb	r3, [r7, #15]
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f000 f8fd 	bl	801702c <USBD_Get_USB_Status>
 8016e32:	4603      	mov	r3, r0
 8016e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3710      	adds	r7, #16
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}

08016e40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b084      	sub	sp, #16
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
 8016e48:	460b      	mov	r3, r1
 8016e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e50:	2300      	movs	r3, #0
 8016e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e5a:	78fa      	ldrb	r2, [r7, #3]
 8016e5c:	4611      	mov	r1, r2
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7f2 f9ae 	bl	80091c0 <HAL_PCD_EP_SetStall>
 8016e64:	4603      	mov	r3, r0
 8016e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e68:	7bfb      	ldrb	r3, [r7, #15]
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f000 f8de 	bl	801702c <USBD_Get_USB_Status>
 8016e70:	4603      	mov	r3, r0
 8016e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	3710      	adds	r7, #16
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	bd80      	pop	{r7, pc}

08016e7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e7e:	b580      	push	{r7, lr}
 8016e80:	b084      	sub	sp, #16
 8016e82:	af00      	add	r7, sp, #0
 8016e84:	6078      	str	r0, [r7, #4]
 8016e86:	460b      	mov	r3, r1
 8016e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e98:	78fa      	ldrb	r2, [r7, #3]
 8016e9a:	4611      	mov	r1, r2
 8016e9c:	4618      	mov	r0, r3
 8016e9e:	f7f2 f9f3 	bl	8009288 <HAL_PCD_EP_ClrStall>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ea6:	7bfb      	ldrb	r3, [r7, #15]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f000 f8bf 	bl	801702c <USBD_Get_USB_Status>
 8016eae:	4603      	mov	r3, r0
 8016eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8016eb4:	4618      	mov	r0, r3
 8016eb6:	3710      	adds	r7, #16
 8016eb8:	46bd      	mov	sp, r7
 8016eba:	bd80      	pop	{r7, pc}

08016ebc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ebc:	b480      	push	{r7}
 8016ebe:	b085      	sub	sp, #20
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	6078      	str	r0, [r7, #4]
 8016ec4:	460b      	mov	r3, r1
 8016ec6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ece:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	da0b      	bge.n	8016ef0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016ed8:	78fb      	ldrb	r3, [r7, #3]
 8016eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ede:	68f9      	ldr	r1, [r7, #12]
 8016ee0:	4613      	mov	r3, r2
 8016ee2:	00db      	lsls	r3, r3, #3
 8016ee4:	4413      	add	r3, r2
 8016ee6:	009b      	lsls	r3, r3, #2
 8016ee8:	440b      	add	r3, r1
 8016eea:	333e      	adds	r3, #62	; 0x3e
 8016eec:	781b      	ldrb	r3, [r3, #0]
 8016eee:	e00b      	b.n	8016f08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ef0:	78fb      	ldrb	r3, [r7, #3]
 8016ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ef6:	68f9      	ldr	r1, [r7, #12]
 8016ef8:	4613      	mov	r3, r2
 8016efa:	00db      	lsls	r3, r3, #3
 8016efc:	4413      	add	r3, r2
 8016efe:	009b      	lsls	r3, r3, #2
 8016f00:	440b      	add	r3, r1
 8016f02:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016f06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016f08:	4618      	mov	r0, r3
 8016f0a:	3714      	adds	r7, #20
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr

08016f14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b084      	sub	sp, #16
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	460b      	mov	r3, r1
 8016f1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f20:	2300      	movs	r3, #0
 8016f22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f24:	2300      	movs	r3, #0
 8016f26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f2e:	78fa      	ldrb	r2, [r7, #3]
 8016f30:	4611      	mov	r1, r2
 8016f32:	4618      	mov	r0, r3
 8016f34:	f7f1 ffde 	bl	8008ef4 <HAL_PCD_SetAddress>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f3c:	7bfb      	ldrb	r3, [r7, #15]
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f000 f874 	bl	801702c <USBD_Get_USB_Status>
 8016f44:	4603      	mov	r3, r0
 8016f46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f48:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b086      	sub	sp, #24
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	60f8      	str	r0, [r7, #12]
 8016f5a:	607a      	str	r2, [r7, #4]
 8016f5c:	603b      	str	r3, [r7, #0]
 8016f5e:	460b      	mov	r3, r1
 8016f60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f62:	2300      	movs	r3, #0
 8016f64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f66:	2300      	movs	r3, #0
 8016f68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f70:	7af9      	ldrb	r1, [r7, #11]
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	687a      	ldr	r2, [r7, #4]
 8016f76:	f7f2 f8e8 	bl	800914a <HAL_PCD_EP_Transmit>
 8016f7a:	4603      	mov	r3, r0
 8016f7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f7e:	7dfb      	ldrb	r3, [r7, #23]
 8016f80:	4618      	mov	r0, r3
 8016f82:	f000 f853 	bl	801702c <USBD_Get_USB_Status>
 8016f86:	4603      	mov	r3, r0
 8016f88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f8c:	4618      	mov	r0, r3
 8016f8e:	3718      	adds	r7, #24
 8016f90:	46bd      	mov	sp, r7
 8016f92:	bd80      	pop	{r7, pc}

08016f94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	b086      	sub	sp, #24
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	60f8      	str	r0, [r7, #12]
 8016f9c:	607a      	str	r2, [r7, #4]
 8016f9e:	603b      	str	r3, [r7, #0]
 8016fa0:	460b      	mov	r3, r1
 8016fa2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016fb2:	7af9      	ldrb	r1, [r7, #11]
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	687a      	ldr	r2, [r7, #4]
 8016fb8:	f7f2 f873 	bl	80090a2 <HAL_PCD_EP_Receive>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016fc0:	7dfb      	ldrb	r3, [r7, #23]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f000 f832 	bl	801702c <USBD_Get_USB_Status>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3718      	adds	r7, #24
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd80      	pop	{r7, pc}

08016fd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fd6:	b580      	push	{r7, lr}
 8016fd8:	b082      	sub	sp, #8
 8016fda:	af00      	add	r7, sp, #0
 8016fdc:	6078      	str	r0, [r7, #4]
 8016fde:	460b      	mov	r3, r1
 8016fe0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fe8:	78fa      	ldrb	r2, [r7, #3]
 8016fea:	4611      	mov	r1, r2
 8016fec:	4618      	mov	r0, r3
 8016fee:	f7f2 f894 	bl	800911a <HAL_PCD_EP_GetRxCount>
 8016ff2:	4603      	mov	r3, r0
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3708      	adds	r7, #8
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017004:	4b03      	ldr	r3, [pc, #12]	; (8017014 <USBD_static_malloc+0x18>)
}
 8017006:	4618      	mov	r0, r3
 8017008:	370c      	adds	r7, #12
 801700a:	46bd      	mov	sp, r7
 801700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017010:	4770      	bx	lr
 8017012:	bf00      	nop
 8017014:	24002fdc 	.word	0x24002fdc

08017018 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017018:	b480      	push	{r7}
 801701a:	b083      	sub	sp, #12
 801701c:	af00      	add	r7, sp, #0
 801701e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017020:	bf00      	nop
 8017022:	370c      	adds	r7, #12
 8017024:	46bd      	mov	sp, r7
 8017026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702a:	4770      	bx	lr

0801702c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801702c:	b480      	push	{r7}
 801702e:	b085      	sub	sp, #20
 8017030:	af00      	add	r7, sp, #0
 8017032:	4603      	mov	r3, r0
 8017034:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017036:	2300      	movs	r3, #0
 8017038:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801703a:	79fb      	ldrb	r3, [r7, #7]
 801703c:	2b03      	cmp	r3, #3
 801703e:	d817      	bhi.n	8017070 <USBD_Get_USB_Status+0x44>
 8017040:	a201      	add	r2, pc, #4	; (adr r2, 8017048 <USBD_Get_USB_Status+0x1c>)
 8017042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017046:	bf00      	nop
 8017048:	08017059 	.word	0x08017059
 801704c:	0801705f 	.word	0x0801705f
 8017050:	08017065 	.word	0x08017065
 8017054:	0801706b 	.word	0x0801706b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017058:	2300      	movs	r3, #0
 801705a:	73fb      	strb	r3, [r7, #15]
    break;
 801705c:	e00b      	b.n	8017076 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801705e:	2303      	movs	r3, #3
 8017060:	73fb      	strb	r3, [r7, #15]
    break;
 8017062:	e008      	b.n	8017076 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017064:	2301      	movs	r3, #1
 8017066:	73fb      	strb	r3, [r7, #15]
    break;
 8017068:	e005      	b.n	8017076 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801706a:	2303      	movs	r3, #3
 801706c:	73fb      	strb	r3, [r7, #15]
    break;
 801706e:	e002      	b.n	8017076 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017070:	2303      	movs	r3, #3
 8017072:	73fb      	strb	r3, [r7, #15]
    break;
 8017074:	bf00      	nop
  }
  return usb_status;
 8017076:	7bfb      	ldrb	r3, [r7, #15]
}
 8017078:	4618      	mov	r0, r3
 801707a:	3714      	adds	r7, #20
 801707c:	46bd      	mov	sp, r7
 801707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017082:	4770      	bx	lr

08017084 <siprintf>:
 8017084:	b40e      	push	{r1, r2, r3}
 8017086:	b500      	push	{lr}
 8017088:	b09c      	sub	sp, #112	; 0x70
 801708a:	ab1d      	add	r3, sp, #116	; 0x74
 801708c:	9002      	str	r0, [sp, #8]
 801708e:	9006      	str	r0, [sp, #24]
 8017090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017094:	4809      	ldr	r0, [pc, #36]	; (80170bc <siprintf+0x38>)
 8017096:	9107      	str	r1, [sp, #28]
 8017098:	9104      	str	r1, [sp, #16]
 801709a:	4909      	ldr	r1, [pc, #36]	; (80170c0 <siprintf+0x3c>)
 801709c:	f853 2b04 	ldr.w	r2, [r3], #4
 80170a0:	9105      	str	r1, [sp, #20]
 80170a2:	6800      	ldr	r0, [r0, #0]
 80170a4:	9301      	str	r3, [sp, #4]
 80170a6:	a902      	add	r1, sp, #8
 80170a8:	f000 f9d6 	bl	8017458 <_svfiprintf_r>
 80170ac:	9b02      	ldr	r3, [sp, #8]
 80170ae:	2200      	movs	r2, #0
 80170b0:	701a      	strb	r2, [r3, #0]
 80170b2:	b01c      	add	sp, #112	; 0x70
 80170b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80170b8:	b003      	add	sp, #12
 80170ba:	4770      	bx	lr
 80170bc:	2400014c 	.word	0x2400014c
 80170c0:	ffff0208 	.word	0xffff0208

080170c4 <siscanf>:
 80170c4:	b40e      	push	{r1, r2, r3}
 80170c6:	b510      	push	{r4, lr}
 80170c8:	b09f      	sub	sp, #124	; 0x7c
 80170ca:	ac21      	add	r4, sp, #132	; 0x84
 80170cc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80170d0:	f854 2b04 	ldr.w	r2, [r4], #4
 80170d4:	9201      	str	r2, [sp, #4]
 80170d6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80170da:	9004      	str	r0, [sp, #16]
 80170dc:	9008      	str	r0, [sp, #32]
 80170de:	f7e9 f921 	bl	8000324 <strlen>
 80170e2:	4b0c      	ldr	r3, [pc, #48]	; (8017114 <siscanf+0x50>)
 80170e4:	9005      	str	r0, [sp, #20]
 80170e6:	9009      	str	r0, [sp, #36]	; 0x24
 80170e8:	930d      	str	r3, [sp, #52]	; 0x34
 80170ea:	480b      	ldr	r0, [pc, #44]	; (8017118 <siscanf+0x54>)
 80170ec:	9a01      	ldr	r2, [sp, #4]
 80170ee:	6800      	ldr	r0, [r0, #0]
 80170f0:	9403      	str	r4, [sp, #12]
 80170f2:	2300      	movs	r3, #0
 80170f4:	9311      	str	r3, [sp, #68]	; 0x44
 80170f6:	9316      	str	r3, [sp, #88]	; 0x58
 80170f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170fc:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017100:	a904      	add	r1, sp, #16
 8017102:	4623      	mov	r3, r4
 8017104:	f000 fb00 	bl	8017708 <__ssvfiscanf_r>
 8017108:	b01f      	add	sp, #124	; 0x7c
 801710a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801710e:	b003      	add	sp, #12
 8017110:	4770      	bx	lr
 8017112:	bf00      	nop
 8017114:	0801711d 	.word	0x0801711d
 8017118:	2400014c 	.word	0x2400014c

0801711c <__seofread>:
 801711c:	2000      	movs	r0, #0
 801711e:	4770      	bx	lr

08017120 <memset>:
 8017120:	4402      	add	r2, r0
 8017122:	4603      	mov	r3, r0
 8017124:	4293      	cmp	r3, r2
 8017126:	d100      	bne.n	801712a <memset+0xa>
 8017128:	4770      	bx	lr
 801712a:	f803 1b01 	strb.w	r1, [r3], #1
 801712e:	e7f9      	b.n	8017124 <memset+0x4>

08017130 <__errno>:
 8017130:	4b01      	ldr	r3, [pc, #4]	; (8017138 <__errno+0x8>)
 8017132:	6818      	ldr	r0, [r3, #0]
 8017134:	4770      	bx	lr
 8017136:	bf00      	nop
 8017138:	2400014c 	.word	0x2400014c

0801713c <__libc_init_array>:
 801713c:	b570      	push	{r4, r5, r6, lr}
 801713e:	4d0d      	ldr	r5, [pc, #52]	; (8017174 <__libc_init_array+0x38>)
 8017140:	4c0d      	ldr	r4, [pc, #52]	; (8017178 <__libc_init_array+0x3c>)
 8017142:	1b64      	subs	r4, r4, r5
 8017144:	10a4      	asrs	r4, r4, #2
 8017146:	2600      	movs	r6, #0
 8017148:	42a6      	cmp	r6, r4
 801714a:	d109      	bne.n	8017160 <__libc_init_array+0x24>
 801714c:	4d0b      	ldr	r5, [pc, #44]	; (801717c <__libc_init_array+0x40>)
 801714e:	4c0c      	ldr	r4, [pc, #48]	; (8017180 <__libc_init_array+0x44>)
 8017150:	f001 f8fe 	bl	8018350 <_init>
 8017154:	1b64      	subs	r4, r4, r5
 8017156:	10a4      	asrs	r4, r4, #2
 8017158:	2600      	movs	r6, #0
 801715a:	42a6      	cmp	r6, r4
 801715c:	d105      	bne.n	801716a <__libc_init_array+0x2e>
 801715e:	bd70      	pop	{r4, r5, r6, pc}
 8017160:	f855 3b04 	ldr.w	r3, [r5], #4
 8017164:	4798      	blx	r3
 8017166:	3601      	adds	r6, #1
 8017168:	e7ee      	b.n	8017148 <__libc_init_array+0xc>
 801716a:	f855 3b04 	ldr.w	r3, [r5], #4
 801716e:	4798      	blx	r3
 8017170:	3601      	adds	r6, #1
 8017172:	e7f2      	b.n	801715a <__libc_init_array+0x1e>
 8017174:	08018738 	.word	0x08018738
 8017178:	08018738 	.word	0x08018738
 801717c:	08018738 	.word	0x08018738
 8017180:	0801873c 	.word	0x0801873c

08017184 <__retarget_lock_acquire_recursive>:
 8017184:	4770      	bx	lr

08017186 <__retarget_lock_release_recursive>:
 8017186:	4770      	bx	lr

08017188 <strcpy>:
 8017188:	4603      	mov	r3, r0
 801718a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801718e:	f803 2b01 	strb.w	r2, [r3], #1
 8017192:	2a00      	cmp	r2, #0
 8017194:	d1f9      	bne.n	801718a <strcpy+0x2>
 8017196:	4770      	bx	lr

08017198 <memcpy>:
 8017198:	440a      	add	r2, r1
 801719a:	4291      	cmp	r1, r2
 801719c:	f100 33ff 	add.w	r3, r0, #4294967295
 80171a0:	d100      	bne.n	80171a4 <memcpy+0xc>
 80171a2:	4770      	bx	lr
 80171a4:	b510      	push	{r4, lr}
 80171a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171ae:	4291      	cmp	r1, r2
 80171b0:	d1f9      	bne.n	80171a6 <memcpy+0xe>
 80171b2:	bd10      	pop	{r4, pc}

080171b4 <_free_r>:
 80171b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80171b6:	2900      	cmp	r1, #0
 80171b8:	d044      	beq.n	8017244 <_free_r+0x90>
 80171ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171be:	9001      	str	r0, [sp, #4]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	f1a1 0404 	sub.w	r4, r1, #4
 80171c6:	bfb8      	it	lt
 80171c8:	18e4      	addlt	r4, r4, r3
 80171ca:	f000 f8df 	bl	801738c <__malloc_lock>
 80171ce:	4a1e      	ldr	r2, [pc, #120]	; (8017248 <_free_r+0x94>)
 80171d0:	9801      	ldr	r0, [sp, #4]
 80171d2:	6813      	ldr	r3, [r2, #0]
 80171d4:	b933      	cbnz	r3, 80171e4 <_free_r+0x30>
 80171d6:	6063      	str	r3, [r4, #4]
 80171d8:	6014      	str	r4, [r2, #0]
 80171da:	b003      	add	sp, #12
 80171dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171e0:	f000 b8da 	b.w	8017398 <__malloc_unlock>
 80171e4:	42a3      	cmp	r3, r4
 80171e6:	d908      	bls.n	80171fa <_free_r+0x46>
 80171e8:	6825      	ldr	r5, [r4, #0]
 80171ea:	1961      	adds	r1, r4, r5
 80171ec:	428b      	cmp	r3, r1
 80171ee:	bf01      	itttt	eq
 80171f0:	6819      	ldreq	r1, [r3, #0]
 80171f2:	685b      	ldreq	r3, [r3, #4]
 80171f4:	1949      	addeq	r1, r1, r5
 80171f6:	6021      	streq	r1, [r4, #0]
 80171f8:	e7ed      	b.n	80171d6 <_free_r+0x22>
 80171fa:	461a      	mov	r2, r3
 80171fc:	685b      	ldr	r3, [r3, #4]
 80171fe:	b10b      	cbz	r3, 8017204 <_free_r+0x50>
 8017200:	42a3      	cmp	r3, r4
 8017202:	d9fa      	bls.n	80171fa <_free_r+0x46>
 8017204:	6811      	ldr	r1, [r2, #0]
 8017206:	1855      	adds	r5, r2, r1
 8017208:	42a5      	cmp	r5, r4
 801720a:	d10b      	bne.n	8017224 <_free_r+0x70>
 801720c:	6824      	ldr	r4, [r4, #0]
 801720e:	4421      	add	r1, r4
 8017210:	1854      	adds	r4, r2, r1
 8017212:	42a3      	cmp	r3, r4
 8017214:	6011      	str	r1, [r2, #0]
 8017216:	d1e0      	bne.n	80171da <_free_r+0x26>
 8017218:	681c      	ldr	r4, [r3, #0]
 801721a:	685b      	ldr	r3, [r3, #4]
 801721c:	6053      	str	r3, [r2, #4]
 801721e:	440c      	add	r4, r1
 8017220:	6014      	str	r4, [r2, #0]
 8017222:	e7da      	b.n	80171da <_free_r+0x26>
 8017224:	d902      	bls.n	801722c <_free_r+0x78>
 8017226:	230c      	movs	r3, #12
 8017228:	6003      	str	r3, [r0, #0]
 801722a:	e7d6      	b.n	80171da <_free_r+0x26>
 801722c:	6825      	ldr	r5, [r4, #0]
 801722e:	1961      	adds	r1, r4, r5
 8017230:	428b      	cmp	r3, r1
 8017232:	bf04      	itt	eq
 8017234:	6819      	ldreq	r1, [r3, #0]
 8017236:	685b      	ldreq	r3, [r3, #4]
 8017238:	6063      	str	r3, [r4, #4]
 801723a:	bf04      	itt	eq
 801723c:	1949      	addeq	r1, r1, r5
 801723e:	6021      	streq	r1, [r4, #0]
 8017240:	6054      	str	r4, [r2, #4]
 8017242:	e7ca      	b.n	80171da <_free_r+0x26>
 8017244:	b003      	add	sp, #12
 8017246:	bd30      	pop	{r4, r5, pc}
 8017248:	2400333c 	.word	0x2400333c

0801724c <sbrk_aligned>:
 801724c:	b570      	push	{r4, r5, r6, lr}
 801724e:	4e0e      	ldr	r6, [pc, #56]	; (8017288 <sbrk_aligned+0x3c>)
 8017250:	460c      	mov	r4, r1
 8017252:	6831      	ldr	r1, [r6, #0]
 8017254:	4605      	mov	r5, r0
 8017256:	b911      	cbnz	r1, 801725e <sbrk_aligned+0x12>
 8017258:	f000 ff3a 	bl	80180d0 <_sbrk_r>
 801725c:	6030      	str	r0, [r6, #0]
 801725e:	4621      	mov	r1, r4
 8017260:	4628      	mov	r0, r5
 8017262:	f000 ff35 	bl	80180d0 <_sbrk_r>
 8017266:	1c43      	adds	r3, r0, #1
 8017268:	d00a      	beq.n	8017280 <sbrk_aligned+0x34>
 801726a:	1cc4      	adds	r4, r0, #3
 801726c:	f024 0403 	bic.w	r4, r4, #3
 8017270:	42a0      	cmp	r0, r4
 8017272:	d007      	beq.n	8017284 <sbrk_aligned+0x38>
 8017274:	1a21      	subs	r1, r4, r0
 8017276:	4628      	mov	r0, r5
 8017278:	f000 ff2a 	bl	80180d0 <_sbrk_r>
 801727c:	3001      	adds	r0, #1
 801727e:	d101      	bne.n	8017284 <sbrk_aligned+0x38>
 8017280:	f04f 34ff 	mov.w	r4, #4294967295
 8017284:	4620      	mov	r0, r4
 8017286:	bd70      	pop	{r4, r5, r6, pc}
 8017288:	24003340 	.word	0x24003340

0801728c <_malloc_r>:
 801728c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017290:	1ccd      	adds	r5, r1, #3
 8017292:	f025 0503 	bic.w	r5, r5, #3
 8017296:	3508      	adds	r5, #8
 8017298:	2d0c      	cmp	r5, #12
 801729a:	bf38      	it	cc
 801729c:	250c      	movcc	r5, #12
 801729e:	2d00      	cmp	r5, #0
 80172a0:	4607      	mov	r7, r0
 80172a2:	db01      	blt.n	80172a8 <_malloc_r+0x1c>
 80172a4:	42a9      	cmp	r1, r5
 80172a6:	d905      	bls.n	80172b4 <_malloc_r+0x28>
 80172a8:	230c      	movs	r3, #12
 80172aa:	603b      	str	r3, [r7, #0]
 80172ac:	2600      	movs	r6, #0
 80172ae:	4630      	mov	r0, r6
 80172b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017388 <_malloc_r+0xfc>
 80172b8:	f000 f868 	bl	801738c <__malloc_lock>
 80172bc:	f8d8 3000 	ldr.w	r3, [r8]
 80172c0:	461c      	mov	r4, r3
 80172c2:	bb5c      	cbnz	r4, 801731c <_malloc_r+0x90>
 80172c4:	4629      	mov	r1, r5
 80172c6:	4638      	mov	r0, r7
 80172c8:	f7ff ffc0 	bl	801724c <sbrk_aligned>
 80172cc:	1c43      	adds	r3, r0, #1
 80172ce:	4604      	mov	r4, r0
 80172d0:	d155      	bne.n	801737e <_malloc_r+0xf2>
 80172d2:	f8d8 4000 	ldr.w	r4, [r8]
 80172d6:	4626      	mov	r6, r4
 80172d8:	2e00      	cmp	r6, #0
 80172da:	d145      	bne.n	8017368 <_malloc_r+0xdc>
 80172dc:	2c00      	cmp	r4, #0
 80172de:	d048      	beq.n	8017372 <_malloc_r+0xe6>
 80172e0:	6823      	ldr	r3, [r4, #0]
 80172e2:	4631      	mov	r1, r6
 80172e4:	4638      	mov	r0, r7
 80172e6:	eb04 0903 	add.w	r9, r4, r3
 80172ea:	f000 fef1 	bl	80180d0 <_sbrk_r>
 80172ee:	4581      	cmp	r9, r0
 80172f0:	d13f      	bne.n	8017372 <_malloc_r+0xe6>
 80172f2:	6821      	ldr	r1, [r4, #0]
 80172f4:	1a6d      	subs	r5, r5, r1
 80172f6:	4629      	mov	r1, r5
 80172f8:	4638      	mov	r0, r7
 80172fa:	f7ff ffa7 	bl	801724c <sbrk_aligned>
 80172fe:	3001      	adds	r0, #1
 8017300:	d037      	beq.n	8017372 <_malloc_r+0xe6>
 8017302:	6823      	ldr	r3, [r4, #0]
 8017304:	442b      	add	r3, r5
 8017306:	6023      	str	r3, [r4, #0]
 8017308:	f8d8 3000 	ldr.w	r3, [r8]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d038      	beq.n	8017382 <_malloc_r+0xf6>
 8017310:	685a      	ldr	r2, [r3, #4]
 8017312:	42a2      	cmp	r2, r4
 8017314:	d12b      	bne.n	801736e <_malloc_r+0xe2>
 8017316:	2200      	movs	r2, #0
 8017318:	605a      	str	r2, [r3, #4]
 801731a:	e00f      	b.n	801733c <_malloc_r+0xb0>
 801731c:	6822      	ldr	r2, [r4, #0]
 801731e:	1b52      	subs	r2, r2, r5
 8017320:	d41f      	bmi.n	8017362 <_malloc_r+0xd6>
 8017322:	2a0b      	cmp	r2, #11
 8017324:	d917      	bls.n	8017356 <_malloc_r+0xca>
 8017326:	1961      	adds	r1, r4, r5
 8017328:	42a3      	cmp	r3, r4
 801732a:	6025      	str	r5, [r4, #0]
 801732c:	bf18      	it	ne
 801732e:	6059      	strne	r1, [r3, #4]
 8017330:	6863      	ldr	r3, [r4, #4]
 8017332:	bf08      	it	eq
 8017334:	f8c8 1000 	streq.w	r1, [r8]
 8017338:	5162      	str	r2, [r4, r5]
 801733a:	604b      	str	r3, [r1, #4]
 801733c:	4638      	mov	r0, r7
 801733e:	f104 060b 	add.w	r6, r4, #11
 8017342:	f000 f829 	bl	8017398 <__malloc_unlock>
 8017346:	f026 0607 	bic.w	r6, r6, #7
 801734a:	1d23      	adds	r3, r4, #4
 801734c:	1af2      	subs	r2, r6, r3
 801734e:	d0ae      	beq.n	80172ae <_malloc_r+0x22>
 8017350:	1b9b      	subs	r3, r3, r6
 8017352:	50a3      	str	r3, [r4, r2]
 8017354:	e7ab      	b.n	80172ae <_malloc_r+0x22>
 8017356:	42a3      	cmp	r3, r4
 8017358:	6862      	ldr	r2, [r4, #4]
 801735a:	d1dd      	bne.n	8017318 <_malloc_r+0x8c>
 801735c:	f8c8 2000 	str.w	r2, [r8]
 8017360:	e7ec      	b.n	801733c <_malloc_r+0xb0>
 8017362:	4623      	mov	r3, r4
 8017364:	6864      	ldr	r4, [r4, #4]
 8017366:	e7ac      	b.n	80172c2 <_malloc_r+0x36>
 8017368:	4634      	mov	r4, r6
 801736a:	6876      	ldr	r6, [r6, #4]
 801736c:	e7b4      	b.n	80172d8 <_malloc_r+0x4c>
 801736e:	4613      	mov	r3, r2
 8017370:	e7cc      	b.n	801730c <_malloc_r+0x80>
 8017372:	230c      	movs	r3, #12
 8017374:	603b      	str	r3, [r7, #0]
 8017376:	4638      	mov	r0, r7
 8017378:	f000 f80e 	bl	8017398 <__malloc_unlock>
 801737c:	e797      	b.n	80172ae <_malloc_r+0x22>
 801737e:	6025      	str	r5, [r4, #0]
 8017380:	e7dc      	b.n	801733c <_malloc_r+0xb0>
 8017382:	605b      	str	r3, [r3, #4]
 8017384:	deff      	udf	#255	; 0xff
 8017386:	bf00      	nop
 8017388:	2400333c 	.word	0x2400333c

0801738c <__malloc_lock>:
 801738c:	4801      	ldr	r0, [pc, #4]	; (8017394 <__malloc_lock+0x8>)
 801738e:	f7ff bef9 	b.w	8017184 <__retarget_lock_acquire_recursive>
 8017392:	bf00      	nop
 8017394:	24003338 	.word	0x24003338

08017398 <__malloc_unlock>:
 8017398:	4801      	ldr	r0, [pc, #4]	; (80173a0 <__malloc_unlock+0x8>)
 801739a:	f7ff bef4 	b.w	8017186 <__retarget_lock_release_recursive>
 801739e:	bf00      	nop
 80173a0:	24003338 	.word	0x24003338

080173a4 <__ssputs_r>:
 80173a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173a8:	688e      	ldr	r6, [r1, #8]
 80173aa:	461f      	mov	r7, r3
 80173ac:	42be      	cmp	r6, r7
 80173ae:	680b      	ldr	r3, [r1, #0]
 80173b0:	4682      	mov	sl, r0
 80173b2:	460c      	mov	r4, r1
 80173b4:	4690      	mov	r8, r2
 80173b6:	d82c      	bhi.n	8017412 <__ssputs_r+0x6e>
 80173b8:	898a      	ldrh	r2, [r1, #12]
 80173ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173be:	d026      	beq.n	801740e <__ssputs_r+0x6a>
 80173c0:	6965      	ldr	r5, [r4, #20]
 80173c2:	6909      	ldr	r1, [r1, #16]
 80173c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173c8:	eba3 0901 	sub.w	r9, r3, r1
 80173cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173d0:	1c7b      	adds	r3, r7, #1
 80173d2:	444b      	add	r3, r9
 80173d4:	106d      	asrs	r5, r5, #1
 80173d6:	429d      	cmp	r5, r3
 80173d8:	bf38      	it	cc
 80173da:	461d      	movcc	r5, r3
 80173dc:	0553      	lsls	r3, r2, #21
 80173de:	d527      	bpl.n	8017430 <__ssputs_r+0x8c>
 80173e0:	4629      	mov	r1, r5
 80173e2:	f7ff ff53 	bl	801728c <_malloc_r>
 80173e6:	4606      	mov	r6, r0
 80173e8:	b360      	cbz	r0, 8017444 <__ssputs_r+0xa0>
 80173ea:	6921      	ldr	r1, [r4, #16]
 80173ec:	464a      	mov	r2, r9
 80173ee:	f7ff fed3 	bl	8017198 <memcpy>
 80173f2:	89a3      	ldrh	r3, [r4, #12]
 80173f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173fc:	81a3      	strh	r3, [r4, #12]
 80173fe:	6126      	str	r6, [r4, #16]
 8017400:	6165      	str	r5, [r4, #20]
 8017402:	444e      	add	r6, r9
 8017404:	eba5 0509 	sub.w	r5, r5, r9
 8017408:	6026      	str	r6, [r4, #0]
 801740a:	60a5      	str	r5, [r4, #8]
 801740c:	463e      	mov	r6, r7
 801740e:	42be      	cmp	r6, r7
 8017410:	d900      	bls.n	8017414 <__ssputs_r+0x70>
 8017412:	463e      	mov	r6, r7
 8017414:	6820      	ldr	r0, [r4, #0]
 8017416:	4632      	mov	r2, r6
 8017418:	4641      	mov	r1, r8
 801741a:	f000 fe3e 	bl	801809a <memmove>
 801741e:	68a3      	ldr	r3, [r4, #8]
 8017420:	1b9b      	subs	r3, r3, r6
 8017422:	60a3      	str	r3, [r4, #8]
 8017424:	6823      	ldr	r3, [r4, #0]
 8017426:	4433      	add	r3, r6
 8017428:	6023      	str	r3, [r4, #0]
 801742a:	2000      	movs	r0, #0
 801742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017430:	462a      	mov	r2, r5
 8017432:	f000 fe5d 	bl	80180f0 <_realloc_r>
 8017436:	4606      	mov	r6, r0
 8017438:	2800      	cmp	r0, #0
 801743a:	d1e0      	bne.n	80173fe <__ssputs_r+0x5a>
 801743c:	6921      	ldr	r1, [r4, #16]
 801743e:	4650      	mov	r0, sl
 8017440:	f7ff feb8 	bl	80171b4 <_free_r>
 8017444:	230c      	movs	r3, #12
 8017446:	f8ca 3000 	str.w	r3, [sl]
 801744a:	89a3      	ldrh	r3, [r4, #12]
 801744c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017450:	81a3      	strh	r3, [r4, #12]
 8017452:	f04f 30ff 	mov.w	r0, #4294967295
 8017456:	e7e9      	b.n	801742c <__ssputs_r+0x88>

08017458 <_svfiprintf_r>:
 8017458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801745c:	4698      	mov	r8, r3
 801745e:	898b      	ldrh	r3, [r1, #12]
 8017460:	061b      	lsls	r3, r3, #24
 8017462:	b09d      	sub	sp, #116	; 0x74
 8017464:	4607      	mov	r7, r0
 8017466:	460d      	mov	r5, r1
 8017468:	4614      	mov	r4, r2
 801746a:	d50e      	bpl.n	801748a <_svfiprintf_r+0x32>
 801746c:	690b      	ldr	r3, [r1, #16]
 801746e:	b963      	cbnz	r3, 801748a <_svfiprintf_r+0x32>
 8017470:	2140      	movs	r1, #64	; 0x40
 8017472:	f7ff ff0b 	bl	801728c <_malloc_r>
 8017476:	6028      	str	r0, [r5, #0]
 8017478:	6128      	str	r0, [r5, #16]
 801747a:	b920      	cbnz	r0, 8017486 <_svfiprintf_r+0x2e>
 801747c:	230c      	movs	r3, #12
 801747e:	603b      	str	r3, [r7, #0]
 8017480:	f04f 30ff 	mov.w	r0, #4294967295
 8017484:	e0d0      	b.n	8017628 <_svfiprintf_r+0x1d0>
 8017486:	2340      	movs	r3, #64	; 0x40
 8017488:	616b      	str	r3, [r5, #20]
 801748a:	2300      	movs	r3, #0
 801748c:	9309      	str	r3, [sp, #36]	; 0x24
 801748e:	2320      	movs	r3, #32
 8017490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017494:	f8cd 800c 	str.w	r8, [sp, #12]
 8017498:	2330      	movs	r3, #48	; 0x30
 801749a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017640 <_svfiprintf_r+0x1e8>
 801749e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174a2:	f04f 0901 	mov.w	r9, #1
 80174a6:	4623      	mov	r3, r4
 80174a8:	469a      	mov	sl, r3
 80174aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174ae:	b10a      	cbz	r2, 80174b4 <_svfiprintf_r+0x5c>
 80174b0:	2a25      	cmp	r2, #37	; 0x25
 80174b2:	d1f9      	bne.n	80174a8 <_svfiprintf_r+0x50>
 80174b4:	ebba 0b04 	subs.w	fp, sl, r4
 80174b8:	d00b      	beq.n	80174d2 <_svfiprintf_r+0x7a>
 80174ba:	465b      	mov	r3, fp
 80174bc:	4622      	mov	r2, r4
 80174be:	4629      	mov	r1, r5
 80174c0:	4638      	mov	r0, r7
 80174c2:	f7ff ff6f 	bl	80173a4 <__ssputs_r>
 80174c6:	3001      	adds	r0, #1
 80174c8:	f000 80a9 	beq.w	801761e <_svfiprintf_r+0x1c6>
 80174cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174ce:	445a      	add	r2, fp
 80174d0:	9209      	str	r2, [sp, #36]	; 0x24
 80174d2:	f89a 3000 	ldrb.w	r3, [sl]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	f000 80a1 	beq.w	801761e <_svfiprintf_r+0x1c6>
 80174dc:	2300      	movs	r3, #0
 80174de:	f04f 32ff 	mov.w	r2, #4294967295
 80174e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174e6:	f10a 0a01 	add.w	sl, sl, #1
 80174ea:	9304      	str	r3, [sp, #16]
 80174ec:	9307      	str	r3, [sp, #28]
 80174ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174f2:	931a      	str	r3, [sp, #104]	; 0x68
 80174f4:	4654      	mov	r4, sl
 80174f6:	2205      	movs	r2, #5
 80174f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174fc:	4850      	ldr	r0, [pc, #320]	; (8017640 <_svfiprintf_r+0x1e8>)
 80174fe:	f7e8 ff1f 	bl	8000340 <memchr>
 8017502:	9a04      	ldr	r2, [sp, #16]
 8017504:	b9d8      	cbnz	r0, 801753e <_svfiprintf_r+0xe6>
 8017506:	06d0      	lsls	r0, r2, #27
 8017508:	bf44      	itt	mi
 801750a:	2320      	movmi	r3, #32
 801750c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017510:	0711      	lsls	r1, r2, #28
 8017512:	bf44      	itt	mi
 8017514:	232b      	movmi	r3, #43	; 0x2b
 8017516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801751a:	f89a 3000 	ldrb.w	r3, [sl]
 801751e:	2b2a      	cmp	r3, #42	; 0x2a
 8017520:	d015      	beq.n	801754e <_svfiprintf_r+0xf6>
 8017522:	9a07      	ldr	r2, [sp, #28]
 8017524:	4654      	mov	r4, sl
 8017526:	2000      	movs	r0, #0
 8017528:	f04f 0c0a 	mov.w	ip, #10
 801752c:	4621      	mov	r1, r4
 801752e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017532:	3b30      	subs	r3, #48	; 0x30
 8017534:	2b09      	cmp	r3, #9
 8017536:	d94d      	bls.n	80175d4 <_svfiprintf_r+0x17c>
 8017538:	b1b0      	cbz	r0, 8017568 <_svfiprintf_r+0x110>
 801753a:	9207      	str	r2, [sp, #28]
 801753c:	e014      	b.n	8017568 <_svfiprintf_r+0x110>
 801753e:	eba0 0308 	sub.w	r3, r0, r8
 8017542:	fa09 f303 	lsl.w	r3, r9, r3
 8017546:	4313      	orrs	r3, r2
 8017548:	9304      	str	r3, [sp, #16]
 801754a:	46a2      	mov	sl, r4
 801754c:	e7d2      	b.n	80174f4 <_svfiprintf_r+0x9c>
 801754e:	9b03      	ldr	r3, [sp, #12]
 8017550:	1d19      	adds	r1, r3, #4
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	9103      	str	r1, [sp, #12]
 8017556:	2b00      	cmp	r3, #0
 8017558:	bfbb      	ittet	lt
 801755a:	425b      	neglt	r3, r3
 801755c:	f042 0202 	orrlt.w	r2, r2, #2
 8017560:	9307      	strge	r3, [sp, #28]
 8017562:	9307      	strlt	r3, [sp, #28]
 8017564:	bfb8      	it	lt
 8017566:	9204      	strlt	r2, [sp, #16]
 8017568:	7823      	ldrb	r3, [r4, #0]
 801756a:	2b2e      	cmp	r3, #46	; 0x2e
 801756c:	d10c      	bne.n	8017588 <_svfiprintf_r+0x130>
 801756e:	7863      	ldrb	r3, [r4, #1]
 8017570:	2b2a      	cmp	r3, #42	; 0x2a
 8017572:	d134      	bne.n	80175de <_svfiprintf_r+0x186>
 8017574:	9b03      	ldr	r3, [sp, #12]
 8017576:	1d1a      	adds	r2, r3, #4
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	9203      	str	r2, [sp, #12]
 801757c:	2b00      	cmp	r3, #0
 801757e:	bfb8      	it	lt
 8017580:	f04f 33ff 	movlt.w	r3, #4294967295
 8017584:	3402      	adds	r4, #2
 8017586:	9305      	str	r3, [sp, #20]
 8017588:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017650 <_svfiprintf_r+0x1f8>
 801758c:	7821      	ldrb	r1, [r4, #0]
 801758e:	2203      	movs	r2, #3
 8017590:	4650      	mov	r0, sl
 8017592:	f7e8 fed5 	bl	8000340 <memchr>
 8017596:	b138      	cbz	r0, 80175a8 <_svfiprintf_r+0x150>
 8017598:	9b04      	ldr	r3, [sp, #16]
 801759a:	eba0 000a 	sub.w	r0, r0, sl
 801759e:	2240      	movs	r2, #64	; 0x40
 80175a0:	4082      	lsls	r2, r0
 80175a2:	4313      	orrs	r3, r2
 80175a4:	3401      	adds	r4, #1
 80175a6:	9304      	str	r3, [sp, #16]
 80175a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175ac:	4825      	ldr	r0, [pc, #148]	; (8017644 <_svfiprintf_r+0x1ec>)
 80175ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175b2:	2206      	movs	r2, #6
 80175b4:	f7e8 fec4 	bl	8000340 <memchr>
 80175b8:	2800      	cmp	r0, #0
 80175ba:	d038      	beq.n	801762e <_svfiprintf_r+0x1d6>
 80175bc:	4b22      	ldr	r3, [pc, #136]	; (8017648 <_svfiprintf_r+0x1f0>)
 80175be:	bb1b      	cbnz	r3, 8017608 <_svfiprintf_r+0x1b0>
 80175c0:	9b03      	ldr	r3, [sp, #12]
 80175c2:	3307      	adds	r3, #7
 80175c4:	f023 0307 	bic.w	r3, r3, #7
 80175c8:	3308      	adds	r3, #8
 80175ca:	9303      	str	r3, [sp, #12]
 80175cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175ce:	4433      	add	r3, r6
 80175d0:	9309      	str	r3, [sp, #36]	; 0x24
 80175d2:	e768      	b.n	80174a6 <_svfiprintf_r+0x4e>
 80175d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80175d8:	460c      	mov	r4, r1
 80175da:	2001      	movs	r0, #1
 80175dc:	e7a6      	b.n	801752c <_svfiprintf_r+0xd4>
 80175de:	2300      	movs	r3, #0
 80175e0:	3401      	adds	r4, #1
 80175e2:	9305      	str	r3, [sp, #20]
 80175e4:	4619      	mov	r1, r3
 80175e6:	f04f 0c0a 	mov.w	ip, #10
 80175ea:	4620      	mov	r0, r4
 80175ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175f0:	3a30      	subs	r2, #48	; 0x30
 80175f2:	2a09      	cmp	r2, #9
 80175f4:	d903      	bls.n	80175fe <_svfiprintf_r+0x1a6>
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d0c6      	beq.n	8017588 <_svfiprintf_r+0x130>
 80175fa:	9105      	str	r1, [sp, #20]
 80175fc:	e7c4      	b.n	8017588 <_svfiprintf_r+0x130>
 80175fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8017602:	4604      	mov	r4, r0
 8017604:	2301      	movs	r3, #1
 8017606:	e7f0      	b.n	80175ea <_svfiprintf_r+0x192>
 8017608:	ab03      	add	r3, sp, #12
 801760a:	9300      	str	r3, [sp, #0]
 801760c:	462a      	mov	r2, r5
 801760e:	4b0f      	ldr	r3, [pc, #60]	; (801764c <_svfiprintf_r+0x1f4>)
 8017610:	a904      	add	r1, sp, #16
 8017612:	4638      	mov	r0, r7
 8017614:	f3af 8000 	nop.w
 8017618:	1c42      	adds	r2, r0, #1
 801761a:	4606      	mov	r6, r0
 801761c:	d1d6      	bne.n	80175cc <_svfiprintf_r+0x174>
 801761e:	89ab      	ldrh	r3, [r5, #12]
 8017620:	065b      	lsls	r3, r3, #25
 8017622:	f53f af2d 	bmi.w	8017480 <_svfiprintf_r+0x28>
 8017626:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017628:	b01d      	add	sp, #116	; 0x74
 801762a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801762e:	ab03      	add	r3, sp, #12
 8017630:	9300      	str	r3, [sp, #0]
 8017632:	462a      	mov	r2, r5
 8017634:	4b05      	ldr	r3, [pc, #20]	; (801764c <_svfiprintf_r+0x1f4>)
 8017636:	a904      	add	r1, sp, #16
 8017638:	4638      	mov	r0, r7
 801763a:	f000 fa4b 	bl	8017ad4 <_printf_i>
 801763e:	e7eb      	b.n	8017618 <_svfiprintf_r+0x1c0>
 8017640:	080185e0 	.word	0x080185e0
 8017644:	080185ea 	.word	0x080185ea
 8017648:	00000000 	.word	0x00000000
 801764c:	080173a5 	.word	0x080173a5
 8017650:	080185e6 	.word	0x080185e6

08017654 <_sungetc_r>:
 8017654:	b538      	push	{r3, r4, r5, lr}
 8017656:	1c4b      	adds	r3, r1, #1
 8017658:	4614      	mov	r4, r2
 801765a:	d103      	bne.n	8017664 <_sungetc_r+0x10>
 801765c:	f04f 35ff 	mov.w	r5, #4294967295
 8017660:	4628      	mov	r0, r5
 8017662:	bd38      	pop	{r3, r4, r5, pc}
 8017664:	8993      	ldrh	r3, [r2, #12]
 8017666:	f023 0320 	bic.w	r3, r3, #32
 801766a:	8193      	strh	r3, [r2, #12]
 801766c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801766e:	6852      	ldr	r2, [r2, #4]
 8017670:	b2cd      	uxtb	r5, r1
 8017672:	b18b      	cbz	r3, 8017698 <_sungetc_r+0x44>
 8017674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017676:	4293      	cmp	r3, r2
 8017678:	dd08      	ble.n	801768c <_sungetc_r+0x38>
 801767a:	6823      	ldr	r3, [r4, #0]
 801767c:	1e5a      	subs	r2, r3, #1
 801767e:	6022      	str	r2, [r4, #0]
 8017680:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017684:	6863      	ldr	r3, [r4, #4]
 8017686:	3301      	adds	r3, #1
 8017688:	6063      	str	r3, [r4, #4]
 801768a:	e7e9      	b.n	8017660 <_sungetc_r+0xc>
 801768c:	4621      	mov	r1, r4
 801768e:	f000 fcca 	bl	8018026 <__submore>
 8017692:	2800      	cmp	r0, #0
 8017694:	d0f1      	beq.n	801767a <_sungetc_r+0x26>
 8017696:	e7e1      	b.n	801765c <_sungetc_r+0x8>
 8017698:	6921      	ldr	r1, [r4, #16]
 801769a:	6823      	ldr	r3, [r4, #0]
 801769c:	b151      	cbz	r1, 80176b4 <_sungetc_r+0x60>
 801769e:	4299      	cmp	r1, r3
 80176a0:	d208      	bcs.n	80176b4 <_sungetc_r+0x60>
 80176a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80176a6:	42a9      	cmp	r1, r5
 80176a8:	d104      	bne.n	80176b4 <_sungetc_r+0x60>
 80176aa:	3b01      	subs	r3, #1
 80176ac:	3201      	adds	r2, #1
 80176ae:	6023      	str	r3, [r4, #0]
 80176b0:	6062      	str	r2, [r4, #4]
 80176b2:	e7d5      	b.n	8017660 <_sungetc_r+0xc>
 80176b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80176b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176bc:	6363      	str	r3, [r4, #52]	; 0x34
 80176be:	2303      	movs	r3, #3
 80176c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80176c2:	4623      	mov	r3, r4
 80176c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176c8:	6023      	str	r3, [r4, #0]
 80176ca:	2301      	movs	r3, #1
 80176cc:	e7dc      	b.n	8017688 <_sungetc_r+0x34>

080176ce <__ssrefill_r>:
 80176ce:	b510      	push	{r4, lr}
 80176d0:	460c      	mov	r4, r1
 80176d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176d4:	b169      	cbz	r1, 80176f2 <__ssrefill_r+0x24>
 80176d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176da:	4299      	cmp	r1, r3
 80176dc:	d001      	beq.n	80176e2 <__ssrefill_r+0x14>
 80176de:	f7ff fd69 	bl	80171b4 <_free_r>
 80176e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176e4:	6063      	str	r3, [r4, #4]
 80176e6:	2000      	movs	r0, #0
 80176e8:	6360      	str	r0, [r4, #52]	; 0x34
 80176ea:	b113      	cbz	r3, 80176f2 <__ssrefill_r+0x24>
 80176ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80176ee:	6023      	str	r3, [r4, #0]
 80176f0:	bd10      	pop	{r4, pc}
 80176f2:	6923      	ldr	r3, [r4, #16]
 80176f4:	6023      	str	r3, [r4, #0]
 80176f6:	2300      	movs	r3, #0
 80176f8:	6063      	str	r3, [r4, #4]
 80176fa:	89a3      	ldrh	r3, [r4, #12]
 80176fc:	f043 0320 	orr.w	r3, r3, #32
 8017700:	81a3      	strh	r3, [r4, #12]
 8017702:	f04f 30ff 	mov.w	r0, #4294967295
 8017706:	e7f3      	b.n	80176f0 <__ssrefill_r+0x22>

08017708 <__ssvfiscanf_r>:
 8017708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801770c:	460c      	mov	r4, r1
 801770e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017712:	2100      	movs	r1, #0
 8017714:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017718:	49a6      	ldr	r1, [pc, #664]	; (80179b4 <__ssvfiscanf_r+0x2ac>)
 801771a:	91a0      	str	r1, [sp, #640]	; 0x280
 801771c:	f10d 0804 	add.w	r8, sp, #4
 8017720:	49a5      	ldr	r1, [pc, #660]	; (80179b8 <__ssvfiscanf_r+0x2b0>)
 8017722:	4fa6      	ldr	r7, [pc, #664]	; (80179bc <__ssvfiscanf_r+0x2b4>)
 8017724:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80179c0 <__ssvfiscanf_r+0x2b8>
 8017728:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801772c:	4606      	mov	r6, r0
 801772e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017730:	9300      	str	r3, [sp, #0]
 8017732:	7813      	ldrb	r3, [r2, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	f000 815a 	beq.w	80179ee <__ssvfiscanf_r+0x2e6>
 801773a:	5cf9      	ldrb	r1, [r7, r3]
 801773c:	f011 0108 	ands.w	r1, r1, #8
 8017740:	f102 0501 	add.w	r5, r2, #1
 8017744:	d019      	beq.n	801777a <__ssvfiscanf_r+0x72>
 8017746:	6863      	ldr	r3, [r4, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	dd0f      	ble.n	801776c <__ssvfiscanf_r+0x64>
 801774c:	6823      	ldr	r3, [r4, #0]
 801774e:	781a      	ldrb	r2, [r3, #0]
 8017750:	5cba      	ldrb	r2, [r7, r2]
 8017752:	0712      	lsls	r2, r2, #28
 8017754:	d401      	bmi.n	801775a <__ssvfiscanf_r+0x52>
 8017756:	462a      	mov	r2, r5
 8017758:	e7eb      	b.n	8017732 <__ssvfiscanf_r+0x2a>
 801775a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801775c:	3201      	adds	r2, #1
 801775e:	9245      	str	r2, [sp, #276]	; 0x114
 8017760:	6862      	ldr	r2, [r4, #4]
 8017762:	3301      	adds	r3, #1
 8017764:	3a01      	subs	r2, #1
 8017766:	6062      	str	r2, [r4, #4]
 8017768:	6023      	str	r3, [r4, #0]
 801776a:	e7ec      	b.n	8017746 <__ssvfiscanf_r+0x3e>
 801776c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801776e:	4621      	mov	r1, r4
 8017770:	4630      	mov	r0, r6
 8017772:	4798      	blx	r3
 8017774:	2800      	cmp	r0, #0
 8017776:	d0e9      	beq.n	801774c <__ssvfiscanf_r+0x44>
 8017778:	e7ed      	b.n	8017756 <__ssvfiscanf_r+0x4e>
 801777a:	2b25      	cmp	r3, #37	; 0x25
 801777c:	d012      	beq.n	80177a4 <__ssvfiscanf_r+0x9c>
 801777e:	469a      	mov	sl, r3
 8017780:	6863      	ldr	r3, [r4, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	f340 8091 	ble.w	80178aa <__ssvfiscanf_r+0x1a2>
 8017788:	6822      	ldr	r2, [r4, #0]
 801778a:	7813      	ldrb	r3, [r2, #0]
 801778c:	4553      	cmp	r3, sl
 801778e:	f040 812e 	bne.w	80179ee <__ssvfiscanf_r+0x2e6>
 8017792:	6863      	ldr	r3, [r4, #4]
 8017794:	3b01      	subs	r3, #1
 8017796:	6063      	str	r3, [r4, #4]
 8017798:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801779a:	3201      	adds	r2, #1
 801779c:	3301      	adds	r3, #1
 801779e:	6022      	str	r2, [r4, #0]
 80177a0:	9345      	str	r3, [sp, #276]	; 0x114
 80177a2:	e7d8      	b.n	8017756 <__ssvfiscanf_r+0x4e>
 80177a4:	9141      	str	r1, [sp, #260]	; 0x104
 80177a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80177a8:	7853      	ldrb	r3, [r2, #1]
 80177aa:	2b2a      	cmp	r3, #42	; 0x2a
 80177ac:	bf02      	ittt	eq
 80177ae:	2310      	moveq	r3, #16
 80177b0:	1c95      	addeq	r5, r2, #2
 80177b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80177b4:	220a      	movs	r2, #10
 80177b6:	46aa      	mov	sl, r5
 80177b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80177bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80177c0:	2b09      	cmp	r3, #9
 80177c2:	d91c      	bls.n	80177fe <__ssvfiscanf_r+0xf6>
 80177c4:	487e      	ldr	r0, [pc, #504]	; (80179c0 <__ssvfiscanf_r+0x2b8>)
 80177c6:	2203      	movs	r2, #3
 80177c8:	f7e8 fdba 	bl	8000340 <memchr>
 80177cc:	b138      	cbz	r0, 80177de <__ssvfiscanf_r+0xd6>
 80177ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177d0:	eba0 0009 	sub.w	r0, r0, r9
 80177d4:	2301      	movs	r3, #1
 80177d6:	4083      	lsls	r3, r0
 80177d8:	4313      	orrs	r3, r2
 80177da:	9341      	str	r3, [sp, #260]	; 0x104
 80177dc:	4655      	mov	r5, sl
 80177de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177e2:	2b78      	cmp	r3, #120	; 0x78
 80177e4:	d806      	bhi.n	80177f4 <__ssvfiscanf_r+0xec>
 80177e6:	2b57      	cmp	r3, #87	; 0x57
 80177e8:	d810      	bhi.n	801780c <__ssvfiscanf_r+0x104>
 80177ea:	2b25      	cmp	r3, #37	; 0x25
 80177ec:	d0c7      	beq.n	801777e <__ssvfiscanf_r+0x76>
 80177ee:	d857      	bhi.n	80178a0 <__ssvfiscanf_r+0x198>
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d065      	beq.n	80178c0 <__ssvfiscanf_r+0x1b8>
 80177f4:	2303      	movs	r3, #3
 80177f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80177f8:	230a      	movs	r3, #10
 80177fa:	9342      	str	r3, [sp, #264]	; 0x108
 80177fc:	e076      	b.n	80178ec <__ssvfiscanf_r+0x1e4>
 80177fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017800:	fb02 1103 	mla	r1, r2, r3, r1
 8017804:	3930      	subs	r1, #48	; 0x30
 8017806:	9143      	str	r1, [sp, #268]	; 0x10c
 8017808:	4655      	mov	r5, sl
 801780a:	e7d4      	b.n	80177b6 <__ssvfiscanf_r+0xae>
 801780c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017810:	2a20      	cmp	r2, #32
 8017812:	d8ef      	bhi.n	80177f4 <__ssvfiscanf_r+0xec>
 8017814:	a101      	add	r1, pc, #4	; (adr r1, 801781c <__ssvfiscanf_r+0x114>)
 8017816:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801781a:	bf00      	nop
 801781c:	080178cf 	.word	0x080178cf
 8017820:	080177f5 	.word	0x080177f5
 8017824:	080177f5 	.word	0x080177f5
 8017828:	0801792d 	.word	0x0801792d
 801782c:	080177f5 	.word	0x080177f5
 8017830:	080177f5 	.word	0x080177f5
 8017834:	080177f5 	.word	0x080177f5
 8017838:	080177f5 	.word	0x080177f5
 801783c:	080177f5 	.word	0x080177f5
 8017840:	080177f5 	.word	0x080177f5
 8017844:	080177f5 	.word	0x080177f5
 8017848:	08017943 	.word	0x08017943
 801784c:	08017929 	.word	0x08017929
 8017850:	080178a7 	.word	0x080178a7
 8017854:	080178a7 	.word	0x080178a7
 8017858:	080178a7 	.word	0x080178a7
 801785c:	080177f5 	.word	0x080177f5
 8017860:	080178e5 	.word	0x080178e5
 8017864:	080177f5 	.word	0x080177f5
 8017868:	080177f5 	.word	0x080177f5
 801786c:	080177f5 	.word	0x080177f5
 8017870:	080177f5 	.word	0x080177f5
 8017874:	08017953 	.word	0x08017953
 8017878:	08017921 	.word	0x08017921
 801787c:	080178c7 	.word	0x080178c7
 8017880:	080177f5 	.word	0x080177f5
 8017884:	080177f5 	.word	0x080177f5
 8017888:	0801794f 	.word	0x0801794f
 801788c:	080177f5 	.word	0x080177f5
 8017890:	08017929 	.word	0x08017929
 8017894:	080177f5 	.word	0x080177f5
 8017898:	080177f5 	.word	0x080177f5
 801789c:	080178cf 	.word	0x080178cf
 80178a0:	3b45      	subs	r3, #69	; 0x45
 80178a2:	2b02      	cmp	r3, #2
 80178a4:	d8a6      	bhi.n	80177f4 <__ssvfiscanf_r+0xec>
 80178a6:	2305      	movs	r3, #5
 80178a8:	e01f      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 80178aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80178ac:	4621      	mov	r1, r4
 80178ae:	4630      	mov	r0, r6
 80178b0:	4798      	blx	r3
 80178b2:	2800      	cmp	r0, #0
 80178b4:	f43f af68 	beq.w	8017788 <__ssvfiscanf_r+0x80>
 80178b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80178ba:	2800      	cmp	r0, #0
 80178bc:	f040 808d 	bne.w	80179da <__ssvfiscanf_r+0x2d2>
 80178c0:	f04f 30ff 	mov.w	r0, #4294967295
 80178c4:	e08f      	b.n	80179e6 <__ssvfiscanf_r+0x2de>
 80178c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178c8:	f042 0220 	orr.w	r2, r2, #32
 80178cc:	9241      	str	r2, [sp, #260]	; 0x104
 80178ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178d4:	9241      	str	r2, [sp, #260]	; 0x104
 80178d6:	2210      	movs	r2, #16
 80178d8:	2b6f      	cmp	r3, #111	; 0x6f
 80178da:	9242      	str	r2, [sp, #264]	; 0x108
 80178dc:	bf34      	ite	cc
 80178de:	2303      	movcc	r3, #3
 80178e0:	2304      	movcs	r3, #4
 80178e2:	e002      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 80178e4:	2300      	movs	r3, #0
 80178e6:	9342      	str	r3, [sp, #264]	; 0x108
 80178e8:	2303      	movs	r3, #3
 80178ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80178ec:	6863      	ldr	r3, [r4, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	dd3d      	ble.n	801796e <__ssvfiscanf_r+0x266>
 80178f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178f4:	0659      	lsls	r1, r3, #25
 80178f6:	d404      	bmi.n	8017902 <__ssvfiscanf_r+0x1fa>
 80178f8:	6823      	ldr	r3, [r4, #0]
 80178fa:	781a      	ldrb	r2, [r3, #0]
 80178fc:	5cba      	ldrb	r2, [r7, r2]
 80178fe:	0712      	lsls	r2, r2, #28
 8017900:	d43c      	bmi.n	801797c <__ssvfiscanf_r+0x274>
 8017902:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017904:	2b02      	cmp	r3, #2
 8017906:	dc4b      	bgt.n	80179a0 <__ssvfiscanf_r+0x298>
 8017908:	466b      	mov	r3, sp
 801790a:	4622      	mov	r2, r4
 801790c:	a941      	add	r1, sp, #260	; 0x104
 801790e:	4630      	mov	r0, r6
 8017910:	f000 fa02 	bl	8017d18 <_scanf_chars>
 8017914:	2801      	cmp	r0, #1
 8017916:	d06a      	beq.n	80179ee <__ssvfiscanf_r+0x2e6>
 8017918:	2802      	cmp	r0, #2
 801791a:	f47f af1c 	bne.w	8017756 <__ssvfiscanf_r+0x4e>
 801791e:	e7cb      	b.n	80178b8 <__ssvfiscanf_r+0x1b0>
 8017920:	2308      	movs	r3, #8
 8017922:	9342      	str	r3, [sp, #264]	; 0x108
 8017924:	2304      	movs	r3, #4
 8017926:	e7e0      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 8017928:	220a      	movs	r2, #10
 801792a:	e7d5      	b.n	80178d8 <__ssvfiscanf_r+0x1d0>
 801792c:	4629      	mov	r1, r5
 801792e:	4640      	mov	r0, r8
 8017930:	f000 fb40 	bl	8017fb4 <__sccl>
 8017934:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801793a:	9341      	str	r3, [sp, #260]	; 0x104
 801793c:	4605      	mov	r5, r0
 801793e:	2301      	movs	r3, #1
 8017940:	e7d3      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 8017942:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017948:	9341      	str	r3, [sp, #260]	; 0x104
 801794a:	2300      	movs	r3, #0
 801794c:	e7cd      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 801794e:	2302      	movs	r3, #2
 8017950:	e7cb      	b.n	80178ea <__ssvfiscanf_r+0x1e2>
 8017952:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017954:	06c3      	lsls	r3, r0, #27
 8017956:	f53f aefe 	bmi.w	8017756 <__ssvfiscanf_r+0x4e>
 801795a:	9b00      	ldr	r3, [sp, #0]
 801795c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801795e:	1d19      	adds	r1, r3, #4
 8017960:	9100      	str	r1, [sp, #0]
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	07c0      	lsls	r0, r0, #31
 8017966:	bf4c      	ite	mi
 8017968:	801a      	strhmi	r2, [r3, #0]
 801796a:	601a      	strpl	r2, [r3, #0]
 801796c:	e6f3      	b.n	8017756 <__ssvfiscanf_r+0x4e>
 801796e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017970:	4621      	mov	r1, r4
 8017972:	4630      	mov	r0, r6
 8017974:	4798      	blx	r3
 8017976:	2800      	cmp	r0, #0
 8017978:	d0bb      	beq.n	80178f2 <__ssvfiscanf_r+0x1ea>
 801797a:	e79d      	b.n	80178b8 <__ssvfiscanf_r+0x1b0>
 801797c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801797e:	3201      	adds	r2, #1
 8017980:	9245      	str	r2, [sp, #276]	; 0x114
 8017982:	6862      	ldr	r2, [r4, #4]
 8017984:	3a01      	subs	r2, #1
 8017986:	2a00      	cmp	r2, #0
 8017988:	6062      	str	r2, [r4, #4]
 801798a:	dd02      	ble.n	8017992 <__ssvfiscanf_r+0x28a>
 801798c:	3301      	adds	r3, #1
 801798e:	6023      	str	r3, [r4, #0]
 8017990:	e7b2      	b.n	80178f8 <__ssvfiscanf_r+0x1f0>
 8017992:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017994:	4621      	mov	r1, r4
 8017996:	4630      	mov	r0, r6
 8017998:	4798      	blx	r3
 801799a:	2800      	cmp	r0, #0
 801799c:	d0ac      	beq.n	80178f8 <__ssvfiscanf_r+0x1f0>
 801799e:	e78b      	b.n	80178b8 <__ssvfiscanf_r+0x1b0>
 80179a0:	2b04      	cmp	r3, #4
 80179a2:	dc0f      	bgt.n	80179c4 <__ssvfiscanf_r+0x2bc>
 80179a4:	466b      	mov	r3, sp
 80179a6:	4622      	mov	r2, r4
 80179a8:	a941      	add	r1, sp, #260	; 0x104
 80179aa:	4630      	mov	r0, r6
 80179ac:	f000 fa0e 	bl	8017dcc <_scanf_i>
 80179b0:	e7b0      	b.n	8017914 <__ssvfiscanf_r+0x20c>
 80179b2:	bf00      	nop
 80179b4:	08017655 	.word	0x08017655
 80179b8:	080176cf 	.word	0x080176cf
 80179bc:	0801862f 	.word	0x0801862f
 80179c0:	080185e6 	.word	0x080185e6
 80179c4:	4b0b      	ldr	r3, [pc, #44]	; (80179f4 <__ssvfiscanf_r+0x2ec>)
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	f43f aec5 	beq.w	8017756 <__ssvfiscanf_r+0x4e>
 80179cc:	466b      	mov	r3, sp
 80179ce:	4622      	mov	r2, r4
 80179d0:	a941      	add	r1, sp, #260	; 0x104
 80179d2:	4630      	mov	r0, r6
 80179d4:	f3af 8000 	nop.w
 80179d8:	e79c      	b.n	8017914 <__ssvfiscanf_r+0x20c>
 80179da:	89a3      	ldrh	r3, [r4, #12]
 80179dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179e0:	bf18      	it	ne
 80179e2:	f04f 30ff 	movne.w	r0, #4294967295
 80179e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80179ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179f0:	e7f9      	b.n	80179e6 <__ssvfiscanf_r+0x2de>
 80179f2:	bf00      	nop
 80179f4:	00000000 	.word	0x00000000

080179f8 <_printf_common>:
 80179f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179fc:	4616      	mov	r6, r2
 80179fe:	4699      	mov	r9, r3
 8017a00:	688a      	ldr	r2, [r1, #8]
 8017a02:	690b      	ldr	r3, [r1, #16]
 8017a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a08:	4293      	cmp	r3, r2
 8017a0a:	bfb8      	it	lt
 8017a0c:	4613      	movlt	r3, r2
 8017a0e:	6033      	str	r3, [r6, #0]
 8017a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a14:	4607      	mov	r7, r0
 8017a16:	460c      	mov	r4, r1
 8017a18:	b10a      	cbz	r2, 8017a1e <_printf_common+0x26>
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	6033      	str	r3, [r6, #0]
 8017a1e:	6823      	ldr	r3, [r4, #0]
 8017a20:	0699      	lsls	r1, r3, #26
 8017a22:	bf42      	ittt	mi
 8017a24:	6833      	ldrmi	r3, [r6, #0]
 8017a26:	3302      	addmi	r3, #2
 8017a28:	6033      	strmi	r3, [r6, #0]
 8017a2a:	6825      	ldr	r5, [r4, #0]
 8017a2c:	f015 0506 	ands.w	r5, r5, #6
 8017a30:	d106      	bne.n	8017a40 <_printf_common+0x48>
 8017a32:	f104 0a19 	add.w	sl, r4, #25
 8017a36:	68e3      	ldr	r3, [r4, #12]
 8017a38:	6832      	ldr	r2, [r6, #0]
 8017a3a:	1a9b      	subs	r3, r3, r2
 8017a3c:	42ab      	cmp	r3, r5
 8017a3e:	dc26      	bgt.n	8017a8e <_printf_common+0x96>
 8017a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a44:	1e13      	subs	r3, r2, #0
 8017a46:	6822      	ldr	r2, [r4, #0]
 8017a48:	bf18      	it	ne
 8017a4a:	2301      	movne	r3, #1
 8017a4c:	0692      	lsls	r2, r2, #26
 8017a4e:	d42b      	bmi.n	8017aa8 <_printf_common+0xb0>
 8017a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a54:	4649      	mov	r1, r9
 8017a56:	4638      	mov	r0, r7
 8017a58:	47c0      	blx	r8
 8017a5a:	3001      	adds	r0, #1
 8017a5c:	d01e      	beq.n	8017a9c <_printf_common+0xa4>
 8017a5e:	6823      	ldr	r3, [r4, #0]
 8017a60:	6922      	ldr	r2, [r4, #16]
 8017a62:	f003 0306 	and.w	r3, r3, #6
 8017a66:	2b04      	cmp	r3, #4
 8017a68:	bf02      	ittt	eq
 8017a6a:	68e5      	ldreq	r5, [r4, #12]
 8017a6c:	6833      	ldreq	r3, [r6, #0]
 8017a6e:	1aed      	subeq	r5, r5, r3
 8017a70:	68a3      	ldr	r3, [r4, #8]
 8017a72:	bf0c      	ite	eq
 8017a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a78:	2500      	movne	r5, #0
 8017a7a:	4293      	cmp	r3, r2
 8017a7c:	bfc4      	itt	gt
 8017a7e:	1a9b      	subgt	r3, r3, r2
 8017a80:	18ed      	addgt	r5, r5, r3
 8017a82:	2600      	movs	r6, #0
 8017a84:	341a      	adds	r4, #26
 8017a86:	42b5      	cmp	r5, r6
 8017a88:	d11a      	bne.n	8017ac0 <_printf_common+0xc8>
 8017a8a:	2000      	movs	r0, #0
 8017a8c:	e008      	b.n	8017aa0 <_printf_common+0xa8>
 8017a8e:	2301      	movs	r3, #1
 8017a90:	4652      	mov	r2, sl
 8017a92:	4649      	mov	r1, r9
 8017a94:	4638      	mov	r0, r7
 8017a96:	47c0      	blx	r8
 8017a98:	3001      	adds	r0, #1
 8017a9a:	d103      	bne.n	8017aa4 <_printf_common+0xac>
 8017a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aa4:	3501      	adds	r5, #1
 8017aa6:	e7c6      	b.n	8017a36 <_printf_common+0x3e>
 8017aa8:	18e1      	adds	r1, r4, r3
 8017aaa:	1c5a      	adds	r2, r3, #1
 8017aac:	2030      	movs	r0, #48	; 0x30
 8017aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ab2:	4422      	add	r2, r4
 8017ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017abc:	3302      	adds	r3, #2
 8017abe:	e7c7      	b.n	8017a50 <_printf_common+0x58>
 8017ac0:	2301      	movs	r3, #1
 8017ac2:	4622      	mov	r2, r4
 8017ac4:	4649      	mov	r1, r9
 8017ac6:	4638      	mov	r0, r7
 8017ac8:	47c0      	blx	r8
 8017aca:	3001      	adds	r0, #1
 8017acc:	d0e6      	beq.n	8017a9c <_printf_common+0xa4>
 8017ace:	3601      	adds	r6, #1
 8017ad0:	e7d9      	b.n	8017a86 <_printf_common+0x8e>
	...

08017ad4 <_printf_i>:
 8017ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ad8:	7e0f      	ldrb	r7, [r1, #24]
 8017ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017adc:	2f78      	cmp	r7, #120	; 0x78
 8017ade:	4691      	mov	r9, r2
 8017ae0:	4680      	mov	r8, r0
 8017ae2:	460c      	mov	r4, r1
 8017ae4:	469a      	mov	sl, r3
 8017ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017aea:	d807      	bhi.n	8017afc <_printf_i+0x28>
 8017aec:	2f62      	cmp	r7, #98	; 0x62
 8017aee:	d80a      	bhi.n	8017b06 <_printf_i+0x32>
 8017af0:	2f00      	cmp	r7, #0
 8017af2:	f000 80d4 	beq.w	8017c9e <_printf_i+0x1ca>
 8017af6:	2f58      	cmp	r7, #88	; 0x58
 8017af8:	f000 80c0 	beq.w	8017c7c <_printf_i+0x1a8>
 8017afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b04:	e03a      	b.n	8017b7c <_printf_i+0xa8>
 8017b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b0a:	2b15      	cmp	r3, #21
 8017b0c:	d8f6      	bhi.n	8017afc <_printf_i+0x28>
 8017b0e:	a101      	add	r1, pc, #4	; (adr r1, 8017b14 <_printf_i+0x40>)
 8017b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b14:	08017b6d 	.word	0x08017b6d
 8017b18:	08017b81 	.word	0x08017b81
 8017b1c:	08017afd 	.word	0x08017afd
 8017b20:	08017afd 	.word	0x08017afd
 8017b24:	08017afd 	.word	0x08017afd
 8017b28:	08017afd 	.word	0x08017afd
 8017b2c:	08017b81 	.word	0x08017b81
 8017b30:	08017afd 	.word	0x08017afd
 8017b34:	08017afd 	.word	0x08017afd
 8017b38:	08017afd 	.word	0x08017afd
 8017b3c:	08017afd 	.word	0x08017afd
 8017b40:	08017c85 	.word	0x08017c85
 8017b44:	08017bad 	.word	0x08017bad
 8017b48:	08017c3f 	.word	0x08017c3f
 8017b4c:	08017afd 	.word	0x08017afd
 8017b50:	08017afd 	.word	0x08017afd
 8017b54:	08017ca7 	.word	0x08017ca7
 8017b58:	08017afd 	.word	0x08017afd
 8017b5c:	08017bad 	.word	0x08017bad
 8017b60:	08017afd 	.word	0x08017afd
 8017b64:	08017afd 	.word	0x08017afd
 8017b68:	08017c47 	.word	0x08017c47
 8017b6c:	682b      	ldr	r3, [r5, #0]
 8017b6e:	1d1a      	adds	r2, r3, #4
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	602a      	str	r2, [r5, #0]
 8017b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	e09f      	b.n	8017cc0 <_printf_i+0x1ec>
 8017b80:	6820      	ldr	r0, [r4, #0]
 8017b82:	682b      	ldr	r3, [r5, #0]
 8017b84:	0607      	lsls	r7, r0, #24
 8017b86:	f103 0104 	add.w	r1, r3, #4
 8017b8a:	6029      	str	r1, [r5, #0]
 8017b8c:	d501      	bpl.n	8017b92 <_printf_i+0xbe>
 8017b8e:	681e      	ldr	r6, [r3, #0]
 8017b90:	e003      	b.n	8017b9a <_printf_i+0xc6>
 8017b92:	0646      	lsls	r6, r0, #25
 8017b94:	d5fb      	bpl.n	8017b8e <_printf_i+0xba>
 8017b96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017b9a:	2e00      	cmp	r6, #0
 8017b9c:	da03      	bge.n	8017ba6 <_printf_i+0xd2>
 8017b9e:	232d      	movs	r3, #45	; 0x2d
 8017ba0:	4276      	negs	r6, r6
 8017ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ba6:	485a      	ldr	r0, [pc, #360]	; (8017d10 <_printf_i+0x23c>)
 8017ba8:	230a      	movs	r3, #10
 8017baa:	e012      	b.n	8017bd2 <_printf_i+0xfe>
 8017bac:	682b      	ldr	r3, [r5, #0]
 8017bae:	6820      	ldr	r0, [r4, #0]
 8017bb0:	1d19      	adds	r1, r3, #4
 8017bb2:	6029      	str	r1, [r5, #0]
 8017bb4:	0605      	lsls	r5, r0, #24
 8017bb6:	d501      	bpl.n	8017bbc <_printf_i+0xe8>
 8017bb8:	681e      	ldr	r6, [r3, #0]
 8017bba:	e002      	b.n	8017bc2 <_printf_i+0xee>
 8017bbc:	0641      	lsls	r1, r0, #25
 8017bbe:	d5fb      	bpl.n	8017bb8 <_printf_i+0xe4>
 8017bc0:	881e      	ldrh	r6, [r3, #0]
 8017bc2:	4853      	ldr	r0, [pc, #332]	; (8017d10 <_printf_i+0x23c>)
 8017bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8017bc6:	bf0c      	ite	eq
 8017bc8:	2308      	moveq	r3, #8
 8017bca:	230a      	movne	r3, #10
 8017bcc:	2100      	movs	r1, #0
 8017bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017bd2:	6865      	ldr	r5, [r4, #4]
 8017bd4:	60a5      	str	r5, [r4, #8]
 8017bd6:	2d00      	cmp	r5, #0
 8017bd8:	bfa2      	ittt	ge
 8017bda:	6821      	ldrge	r1, [r4, #0]
 8017bdc:	f021 0104 	bicge.w	r1, r1, #4
 8017be0:	6021      	strge	r1, [r4, #0]
 8017be2:	b90e      	cbnz	r6, 8017be8 <_printf_i+0x114>
 8017be4:	2d00      	cmp	r5, #0
 8017be6:	d04b      	beq.n	8017c80 <_printf_i+0x1ac>
 8017be8:	4615      	mov	r5, r2
 8017bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8017bee:	fb03 6711 	mls	r7, r3, r1, r6
 8017bf2:	5dc7      	ldrb	r7, [r0, r7]
 8017bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017bf8:	4637      	mov	r7, r6
 8017bfa:	42bb      	cmp	r3, r7
 8017bfc:	460e      	mov	r6, r1
 8017bfe:	d9f4      	bls.n	8017bea <_printf_i+0x116>
 8017c00:	2b08      	cmp	r3, #8
 8017c02:	d10b      	bne.n	8017c1c <_printf_i+0x148>
 8017c04:	6823      	ldr	r3, [r4, #0]
 8017c06:	07de      	lsls	r6, r3, #31
 8017c08:	d508      	bpl.n	8017c1c <_printf_i+0x148>
 8017c0a:	6923      	ldr	r3, [r4, #16]
 8017c0c:	6861      	ldr	r1, [r4, #4]
 8017c0e:	4299      	cmp	r1, r3
 8017c10:	bfde      	ittt	le
 8017c12:	2330      	movle	r3, #48	; 0x30
 8017c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c1c:	1b52      	subs	r2, r2, r5
 8017c1e:	6122      	str	r2, [r4, #16]
 8017c20:	f8cd a000 	str.w	sl, [sp]
 8017c24:	464b      	mov	r3, r9
 8017c26:	aa03      	add	r2, sp, #12
 8017c28:	4621      	mov	r1, r4
 8017c2a:	4640      	mov	r0, r8
 8017c2c:	f7ff fee4 	bl	80179f8 <_printf_common>
 8017c30:	3001      	adds	r0, #1
 8017c32:	d14a      	bne.n	8017cca <_printf_i+0x1f6>
 8017c34:	f04f 30ff 	mov.w	r0, #4294967295
 8017c38:	b004      	add	sp, #16
 8017c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c3e:	6823      	ldr	r3, [r4, #0]
 8017c40:	f043 0320 	orr.w	r3, r3, #32
 8017c44:	6023      	str	r3, [r4, #0]
 8017c46:	4833      	ldr	r0, [pc, #204]	; (8017d14 <_printf_i+0x240>)
 8017c48:	2778      	movs	r7, #120	; 0x78
 8017c4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c4e:	6823      	ldr	r3, [r4, #0]
 8017c50:	6829      	ldr	r1, [r5, #0]
 8017c52:	061f      	lsls	r7, r3, #24
 8017c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c58:	d402      	bmi.n	8017c60 <_printf_i+0x18c>
 8017c5a:	065f      	lsls	r7, r3, #25
 8017c5c:	bf48      	it	mi
 8017c5e:	b2b6      	uxthmi	r6, r6
 8017c60:	07df      	lsls	r7, r3, #31
 8017c62:	bf48      	it	mi
 8017c64:	f043 0320 	orrmi.w	r3, r3, #32
 8017c68:	6029      	str	r1, [r5, #0]
 8017c6a:	bf48      	it	mi
 8017c6c:	6023      	strmi	r3, [r4, #0]
 8017c6e:	b91e      	cbnz	r6, 8017c78 <_printf_i+0x1a4>
 8017c70:	6823      	ldr	r3, [r4, #0]
 8017c72:	f023 0320 	bic.w	r3, r3, #32
 8017c76:	6023      	str	r3, [r4, #0]
 8017c78:	2310      	movs	r3, #16
 8017c7a:	e7a7      	b.n	8017bcc <_printf_i+0xf8>
 8017c7c:	4824      	ldr	r0, [pc, #144]	; (8017d10 <_printf_i+0x23c>)
 8017c7e:	e7e4      	b.n	8017c4a <_printf_i+0x176>
 8017c80:	4615      	mov	r5, r2
 8017c82:	e7bd      	b.n	8017c00 <_printf_i+0x12c>
 8017c84:	682b      	ldr	r3, [r5, #0]
 8017c86:	6826      	ldr	r6, [r4, #0]
 8017c88:	6961      	ldr	r1, [r4, #20]
 8017c8a:	1d18      	adds	r0, r3, #4
 8017c8c:	6028      	str	r0, [r5, #0]
 8017c8e:	0635      	lsls	r5, r6, #24
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	d501      	bpl.n	8017c98 <_printf_i+0x1c4>
 8017c94:	6019      	str	r1, [r3, #0]
 8017c96:	e002      	b.n	8017c9e <_printf_i+0x1ca>
 8017c98:	0670      	lsls	r0, r6, #25
 8017c9a:	d5fb      	bpl.n	8017c94 <_printf_i+0x1c0>
 8017c9c:	8019      	strh	r1, [r3, #0]
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	6123      	str	r3, [r4, #16]
 8017ca2:	4615      	mov	r5, r2
 8017ca4:	e7bc      	b.n	8017c20 <_printf_i+0x14c>
 8017ca6:	682b      	ldr	r3, [r5, #0]
 8017ca8:	1d1a      	adds	r2, r3, #4
 8017caa:	602a      	str	r2, [r5, #0]
 8017cac:	681d      	ldr	r5, [r3, #0]
 8017cae:	6862      	ldr	r2, [r4, #4]
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	f7e8 fb44 	bl	8000340 <memchr>
 8017cb8:	b108      	cbz	r0, 8017cbe <_printf_i+0x1ea>
 8017cba:	1b40      	subs	r0, r0, r5
 8017cbc:	6060      	str	r0, [r4, #4]
 8017cbe:	6863      	ldr	r3, [r4, #4]
 8017cc0:	6123      	str	r3, [r4, #16]
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cc8:	e7aa      	b.n	8017c20 <_printf_i+0x14c>
 8017cca:	6923      	ldr	r3, [r4, #16]
 8017ccc:	462a      	mov	r2, r5
 8017cce:	4649      	mov	r1, r9
 8017cd0:	4640      	mov	r0, r8
 8017cd2:	47d0      	blx	sl
 8017cd4:	3001      	adds	r0, #1
 8017cd6:	d0ad      	beq.n	8017c34 <_printf_i+0x160>
 8017cd8:	6823      	ldr	r3, [r4, #0]
 8017cda:	079b      	lsls	r3, r3, #30
 8017cdc:	d413      	bmi.n	8017d06 <_printf_i+0x232>
 8017cde:	68e0      	ldr	r0, [r4, #12]
 8017ce0:	9b03      	ldr	r3, [sp, #12]
 8017ce2:	4298      	cmp	r0, r3
 8017ce4:	bfb8      	it	lt
 8017ce6:	4618      	movlt	r0, r3
 8017ce8:	e7a6      	b.n	8017c38 <_printf_i+0x164>
 8017cea:	2301      	movs	r3, #1
 8017cec:	4632      	mov	r2, r6
 8017cee:	4649      	mov	r1, r9
 8017cf0:	4640      	mov	r0, r8
 8017cf2:	47d0      	blx	sl
 8017cf4:	3001      	adds	r0, #1
 8017cf6:	d09d      	beq.n	8017c34 <_printf_i+0x160>
 8017cf8:	3501      	adds	r5, #1
 8017cfa:	68e3      	ldr	r3, [r4, #12]
 8017cfc:	9903      	ldr	r1, [sp, #12]
 8017cfe:	1a5b      	subs	r3, r3, r1
 8017d00:	42ab      	cmp	r3, r5
 8017d02:	dcf2      	bgt.n	8017cea <_printf_i+0x216>
 8017d04:	e7eb      	b.n	8017cde <_printf_i+0x20a>
 8017d06:	2500      	movs	r5, #0
 8017d08:	f104 0619 	add.w	r6, r4, #25
 8017d0c:	e7f5      	b.n	8017cfa <_printf_i+0x226>
 8017d0e:	bf00      	nop
 8017d10:	080185f1 	.word	0x080185f1
 8017d14:	08018602 	.word	0x08018602

08017d18 <_scanf_chars>:
 8017d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d1c:	4615      	mov	r5, r2
 8017d1e:	688a      	ldr	r2, [r1, #8]
 8017d20:	4680      	mov	r8, r0
 8017d22:	460c      	mov	r4, r1
 8017d24:	b932      	cbnz	r2, 8017d34 <_scanf_chars+0x1c>
 8017d26:	698a      	ldr	r2, [r1, #24]
 8017d28:	2a00      	cmp	r2, #0
 8017d2a:	bf0c      	ite	eq
 8017d2c:	2201      	moveq	r2, #1
 8017d2e:	f04f 32ff 	movne.w	r2, #4294967295
 8017d32:	608a      	str	r2, [r1, #8]
 8017d34:	6822      	ldr	r2, [r4, #0]
 8017d36:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017dc8 <_scanf_chars+0xb0>
 8017d3a:	06d1      	lsls	r1, r2, #27
 8017d3c:	bf5f      	itttt	pl
 8017d3e:	681a      	ldrpl	r2, [r3, #0]
 8017d40:	1d11      	addpl	r1, r2, #4
 8017d42:	6019      	strpl	r1, [r3, #0]
 8017d44:	6816      	ldrpl	r6, [r2, #0]
 8017d46:	2700      	movs	r7, #0
 8017d48:	69a0      	ldr	r0, [r4, #24]
 8017d4a:	b188      	cbz	r0, 8017d70 <_scanf_chars+0x58>
 8017d4c:	2801      	cmp	r0, #1
 8017d4e:	d107      	bne.n	8017d60 <_scanf_chars+0x48>
 8017d50:	682a      	ldr	r2, [r5, #0]
 8017d52:	7811      	ldrb	r1, [r2, #0]
 8017d54:	6962      	ldr	r2, [r4, #20]
 8017d56:	5c52      	ldrb	r2, [r2, r1]
 8017d58:	b952      	cbnz	r2, 8017d70 <_scanf_chars+0x58>
 8017d5a:	2f00      	cmp	r7, #0
 8017d5c:	d031      	beq.n	8017dc2 <_scanf_chars+0xaa>
 8017d5e:	e022      	b.n	8017da6 <_scanf_chars+0x8e>
 8017d60:	2802      	cmp	r0, #2
 8017d62:	d120      	bne.n	8017da6 <_scanf_chars+0x8e>
 8017d64:	682b      	ldr	r3, [r5, #0]
 8017d66:	781b      	ldrb	r3, [r3, #0]
 8017d68:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d6c:	071b      	lsls	r3, r3, #28
 8017d6e:	d41a      	bmi.n	8017da6 <_scanf_chars+0x8e>
 8017d70:	6823      	ldr	r3, [r4, #0]
 8017d72:	06da      	lsls	r2, r3, #27
 8017d74:	bf5e      	ittt	pl
 8017d76:	682b      	ldrpl	r3, [r5, #0]
 8017d78:	781b      	ldrbpl	r3, [r3, #0]
 8017d7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d7e:	682a      	ldr	r2, [r5, #0]
 8017d80:	686b      	ldr	r3, [r5, #4]
 8017d82:	3201      	adds	r2, #1
 8017d84:	602a      	str	r2, [r5, #0]
 8017d86:	68a2      	ldr	r2, [r4, #8]
 8017d88:	3b01      	subs	r3, #1
 8017d8a:	3a01      	subs	r2, #1
 8017d8c:	606b      	str	r3, [r5, #4]
 8017d8e:	3701      	adds	r7, #1
 8017d90:	60a2      	str	r2, [r4, #8]
 8017d92:	b142      	cbz	r2, 8017da6 <_scanf_chars+0x8e>
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	dcd7      	bgt.n	8017d48 <_scanf_chars+0x30>
 8017d98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d9c:	4629      	mov	r1, r5
 8017d9e:	4640      	mov	r0, r8
 8017da0:	4798      	blx	r3
 8017da2:	2800      	cmp	r0, #0
 8017da4:	d0d0      	beq.n	8017d48 <_scanf_chars+0x30>
 8017da6:	6823      	ldr	r3, [r4, #0]
 8017da8:	f013 0310 	ands.w	r3, r3, #16
 8017dac:	d105      	bne.n	8017dba <_scanf_chars+0xa2>
 8017dae:	68e2      	ldr	r2, [r4, #12]
 8017db0:	3201      	adds	r2, #1
 8017db2:	60e2      	str	r2, [r4, #12]
 8017db4:	69a2      	ldr	r2, [r4, #24]
 8017db6:	b102      	cbz	r2, 8017dba <_scanf_chars+0xa2>
 8017db8:	7033      	strb	r3, [r6, #0]
 8017dba:	6923      	ldr	r3, [r4, #16]
 8017dbc:	443b      	add	r3, r7
 8017dbe:	6123      	str	r3, [r4, #16]
 8017dc0:	2000      	movs	r0, #0
 8017dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017dc6:	bf00      	nop
 8017dc8:	0801862f 	.word	0x0801862f

08017dcc <_scanf_i>:
 8017dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dd0:	4698      	mov	r8, r3
 8017dd2:	4b74      	ldr	r3, [pc, #464]	; (8017fa4 <_scanf_i+0x1d8>)
 8017dd4:	460c      	mov	r4, r1
 8017dd6:	4682      	mov	sl, r0
 8017dd8:	4616      	mov	r6, r2
 8017dda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017dde:	b087      	sub	sp, #28
 8017de0:	ab03      	add	r3, sp, #12
 8017de2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017de6:	4b70      	ldr	r3, [pc, #448]	; (8017fa8 <_scanf_i+0x1dc>)
 8017de8:	69a1      	ldr	r1, [r4, #24]
 8017dea:	4a70      	ldr	r2, [pc, #448]	; (8017fac <_scanf_i+0x1e0>)
 8017dec:	2903      	cmp	r1, #3
 8017dee:	bf18      	it	ne
 8017df0:	461a      	movne	r2, r3
 8017df2:	68a3      	ldr	r3, [r4, #8]
 8017df4:	9201      	str	r2, [sp, #4]
 8017df6:	1e5a      	subs	r2, r3, #1
 8017df8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017dfc:	bf88      	it	hi
 8017dfe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017e02:	4627      	mov	r7, r4
 8017e04:	bf82      	ittt	hi
 8017e06:	eb03 0905 	addhi.w	r9, r3, r5
 8017e0a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017e0e:	60a3      	strhi	r3, [r4, #8]
 8017e10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017e14:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017e18:	bf98      	it	ls
 8017e1a:	f04f 0900 	movls.w	r9, #0
 8017e1e:	6023      	str	r3, [r4, #0]
 8017e20:	463d      	mov	r5, r7
 8017e22:	f04f 0b00 	mov.w	fp, #0
 8017e26:	6831      	ldr	r1, [r6, #0]
 8017e28:	ab03      	add	r3, sp, #12
 8017e2a:	7809      	ldrb	r1, [r1, #0]
 8017e2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e30:	2202      	movs	r2, #2
 8017e32:	f7e8 fa85 	bl	8000340 <memchr>
 8017e36:	b328      	cbz	r0, 8017e84 <_scanf_i+0xb8>
 8017e38:	f1bb 0f01 	cmp.w	fp, #1
 8017e3c:	d159      	bne.n	8017ef2 <_scanf_i+0x126>
 8017e3e:	6862      	ldr	r2, [r4, #4]
 8017e40:	b92a      	cbnz	r2, 8017e4e <_scanf_i+0x82>
 8017e42:	6822      	ldr	r2, [r4, #0]
 8017e44:	2308      	movs	r3, #8
 8017e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e4a:	6063      	str	r3, [r4, #4]
 8017e4c:	6022      	str	r2, [r4, #0]
 8017e4e:	6822      	ldr	r2, [r4, #0]
 8017e50:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017e54:	6022      	str	r2, [r4, #0]
 8017e56:	68a2      	ldr	r2, [r4, #8]
 8017e58:	1e51      	subs	r1, r2, #1
 8017e5a:	60a1      	str	r1, [r4, #8]
 8017e5c:	b192      	cbz	r2, 8017e84 <_scanf_i+0xb8>
 8017e5e:	6832      	ldr	r2, [r6, #0]
 8017e60:	1c51      	adds	r1, r2, #1
 8017e62:	6031      	str	r1, [r6, #0]
 8017e64:	7812      	ldrb	r2, [r2, #0]
 8017e66:	f805 2b01 	strb.w	r2, [r5], #1
 8017e6a:	6872      	ldr	r2, [r6, #4]
 8017e6c:	3a01      	subs	r2, #1
 8017e6e:	2a00      	cmp	r2, #0
 8017e70:	6072      	str	r2, [r6, #4]
 8017e72:	dc07      	bgt.n	8017e84 <_scanf_i+0xb8>
 8017e74:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017e78:	4631      	mov	r1, r6
 8017e7a:	4650      	mov	r0, sl
 8017e7c:	4790      	blx	r2
 8017e7e:	2800      	cmp	r0, #0
 8017e80:	f040 8085 	bne.w	8017f8e <_scanf_i+0x1c2>
 8017e84:	f10b 0b01 	add.w	fp, fp, #1
 8017e88:	f1bb 0f03 	cmp.w	fp, #3
 8017e8c:	d1cb      	bne.n	8017e26 <_scanf_i+0x5a>
 8017e8e:	6863      	ldr	r3, [r4, #4]
 8017e90:	b90b      	cbnz	r3, 8017e96 <_scanf_i+0xca>
 8017e92:	230a      	movs	r3, #10
 8017e94:	6063      	str	r3, [r4, #4]
 8017e96:	6863      	ldr	r3, [r4, #4]
 8017e98:	4945      	ldr	r1, [pc, #276]	; (8017fb0 <_scanf_i+0x1e4>)
 8017e9a:	6960      	ldr	r0, [r4, #20]
 8017e9c:	1ac9      	subs	r1, r1, r3
 8017e9e:	f000 f889 	bl	8017fb4 <__sccl>
 8017ea2:	f04f 0b00 	mov.w	fp, #0
 8017ea6:	68a3      	ldr	r3, [r4, #8]
 8017ea8:	6822      	ldr	r2, [r4, #0]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d03d      	beq.n	8017f2a <_scanf_i+0x15e>
 8017eae:	6831      	ldr	r1, [r6, #0]
 8017eb0:	6960      	ldr	r0, [r4, #20]
 8017eb2:	f891 c000 	ldrb.w	ip, [r1]
 8017eb6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017eba:	2800      	cmp	r0, #0
 8017ebc:	d035      	beq.n	8017f2a <_scanf_i+0x15e>
 8017ebe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017ec2:	d124      	bne.n	8017f0e <_scanf_i+0x142>
 8017ec4:	0510      	lsls	r0, r2, #20
 8017ec6:	d522      	bpl.n	8017f0e <_scanf_i+0x142>
 8017ec8:	f10b 0b01 	add.w	fp, fp, #1
 8017ecc:	f1b9 0f00 	cmp.w	r9, #0
 8017ed0:	d003      	beq.n	8017eda <_scanf_i+0x10e>
 8017ed2:	3301      	adds	r3, #1
 8017ed4:	f109 39ff 	add.w	r9, r9, #4294967295
 8017ed8:	60a3      	str	r3, [r4, #8]
 8017eda:	6873      	ldr	r3, [r6, #4]
 8017edc:	3b01      	subs	r3, #1
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	6073      	str	r3, [r6, #4]
 8017ee2:	dd1b      	ble.n	8017f1c <_scanf_i+0x150>
 8017ee4:	6833      	ldr	r3, [r6, #0]
 8017ee6:	3301      	adds	r3, #1
 8017ee8:	6033      	str	r3, [r6, #0]
 8017eea:	68a3      	ldr	r3, [r4, #8]
 8017eec:	3b01      	subs	r3, #1
 8017eee:	60a3      	str	r3, [r4, #8]
 8017ef0:	e7d9      	b.n	8017ea6 <_scanf_i+0xda>
 8017ef2:	f1bb 0f02 	cmp.w	fp, #2
 8017ef6:	d1ae      	bne.n	8017e56 <_scanf_i+0x8a>
 8017ef8:	6822      	ldr	r2, [r4, #0]
 8017efa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017efe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017f02:	d1bf      	bne.n	8017e84 <_scanf_i+0xb8>
 8017f04:	2310      	movs	r3, #16
 8017f06:	6063      	str	r3, [r4, #4]
 8017f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f0c:	e7a2      	b.n	8017e54 <_scanf_i+0x88>
 8017f0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017f12:	6022      	str	r2, [r4, #0]
 8017f14:	780b      	ldrb	r3, [r1, #0]
 8017f16:	f805 3b01 	strb.w	r3, [r5], #1
 8017f1a:	e7de      	b.n	8017eda <_scanf_i+0x10e>
 8017f1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017f20:	4631      	mov	r1, r6
 8017f22:	4650      	mov	r0, sl
 8017f24:	4798      	blx	r3
 8017f26:	2800      	cmp	r0, #0
 8017f28:	d0df      	beq.n	8017eea <_scanf_i+0x11e>
 8017f2a:	6823      	ldr	r3, [r4, #0]
 8017f2c:	05d9      	lsls	r1, r3, #23
 8017f2e:	d50d      	bpl.n	8017f4c <_scanf_i+0x180>
 8017f30:	42bd      	cmp	r5, r7
 8017f32:	d909      	bls.n	8017f48 <_scanf_i+0x17c>
 8017f34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f3c:	4632      	mov	r2, r6
 8017f3e:	4650      	mov	r0, sl
 8017f40:	4798      	blx	r3
 8017f42:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f46:	464d      	mov	r5, r9
 8017f48:	42bd      	cmp	r5, r7
 8017f4a:	d028      	beq.n	8017f9e <_scanf_i+0x1d2>
 8017f4c:	6822      	ldr	r2, [r4, #0]
 8017f4e:	f012 0210 	ands.w	r2, r2, #16
 8017f52:	d113      	bne.n	8017f7c <_scanf_i+0x1b0>
 8017f54:	702a      	strb	r2, [r5, #0]
 8017f56:	6863      	ldr	r3, [r4, #4]
 8017f58:	9e01      	ldr	r6, [sp, #4]
 8017f5a:	4639      	mov	r1, r7
 8017f5c:	4650      	mov	r0, sl
 8017f5e:	47b0      	blx	r6
 8017f60:	f8d8 3000 	ldr.w	r3, [r8]
 8017f64:	6821      	ldr	r1, [r4, #0]
 8017f66:	1d1a      	adds	r2, r3, #4
 8017f68:	f8c8 2000 	str.w	r2, [r8]
 8017f6c:	f011 0f20 	tst.w	r1, #32
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	d00f      	beq.n	8017f94 <_scanf_i+0x1c8>
 8017f74:	6018      	str	r0, [r3, #0]
 8017f76:	68e3      	ldr	r3, [r4, #12]
 8017f78:	3301      	adds	r3, #1
 8017f7a:	60e3      	str	r3, [r4, #12]
 8017f7c:	6923      	ldr	r3, [r4, #16]
 8017f7e:	1bed      	subs	r5, r5, r7
 8017f80:	445d      	add	r5, fp
 8017f82:	442b      	add	r3, r5
 8017f84:	6123      	str	r3, [r4, #16]
 8017f86:	2000      	movs	r0, #0
 8017f88:	b007      	add	sp, #28
 8017f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f8e:	f04f 0b00 	mov.w	fp, #0
 8017f92:	e7ca      	b.n	8017f2a <_scanf_i+0x15e>
 8017f94:	07ca      	lsls	r2, r1, #31
 8017f96:	bf4c      	ite	mi
 8017f98:	8018      	strhmi	r0, [r3, #0]
 8017f9a:	6018      	strpl	r0, [r3, #0]
 8017f9c:	e7eb      	b.n	8017f76 <_scanf_i+0x1aa>
 8017f9e:	2001      	movs	r0, #1
 8017fa0:	e7f2      	b.n	8017f88 <_scanf_i+0x1bc>
 8017fa2:	bf00      	nop
 8017fa4:	08018510 	.word	0x08018510
 8017fa8:	0801833d 	.word	0x0801833d
 8017fac:	08018255 	.word	0x08018255
 8017fb0:	08018623 	.word	0x08018623

08017fb4 <__sccl>:
 8017fb4:	b570      	push	{r4, r5, r6, lr}
 8017fb6:	780b      	ldrb	r3, [r1, #0]
 8017fb8:	4604      	mov	r4, r0
 8017fba:	2b5e      	cmp	r3, #94	; 0x5e
 8017fbc:	bf0b      	itete	eq
 8017fbe:	784b      	ldrbeq	r3, [r1, #1]
 8017fc0:	1c4a      	addne	r2, r1, #1
 8017fc2:	1c8a      	addeq	r2, r1, #2
 8017fc4:	2100      	movne	r1, #0
 8017fc6:	bf08      	it	eq
 8017fc8:	2101      	moveq	r1, #1
 8017fca:	3801      	subs	r0, #1
 8017fcc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017fd0:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fd4:	42a8      	cmp	r0, r5
 8017fd6:	d1fb      	bne.n	8017fd0 <__sccl+0x1c>
 8017fd8:	b90b      	cbnz	r3, 8017fde <__sccl+0x2a>
 8017fda:	1e50      	subs	r0, r2, #1
 8017fdc:	bd70      	pop	{r4, r5, r6, pc}
 8017fde:	f081 0101 	eor.w	r1, r1, #1
 8017fe2:	54e1      	strb	r1, [r4, r3]
 8017fe4:	4610      	mov	r0, r2
 8017fe6:	4602      	mov	r2, r0
 8017fe8:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017fec:	2d2d      	cmp	r5, #45	; 0x2d
 8017fee:	d005      	beq.n	8017ffc <__sccl+0x48>
 8017ff0:	2d5d      	cmp	r5, #93	; 0x5d
 8017ff2:	d016      	beq.n	8018022 <__sccl+0x6e>
 8017ff4:	2d00      	cmp	r5, #0
 8017ff6:	d0f1      	beq.n	8017fdc <__sccl+0x28>
 8017ff8:	462b      	mov	r3, r5
 8017ffa:	e7f2      	b.n	8017fe2 <__sccl+0x2e>
 8017ffc:	7846      	ldrb	r6, [r0, #1]
 8017ffe:	2e5d      	cmp	r6, #93	; 0x5d
 8018000:	d0fa      	beq.n	8017ff8 <__sccl+0x44>
 8018002:	42b3      	cmp	r3, r6
 8018004:	dcf8      	bgt.n	8017ff8 <__sccl+0x44>
 8018006:	3002      	adds	r0, #2
 8018008:	461a      	mov	r2, r3
 801800a:	3201      	adds	r2, #1
 801800c:	4296      	cmp	r6, r2
 801800e:	54a1      	strb	r1, [r4, r2]
 8018010:	dcfb      	bgt.n	801800a <__sccl+0x56>
 8018012:	1af2      	subs	r2, r6, r3
 8018014:	3a01      	subs	r2, #1
 8018016:	1c5d      	adds	r5, r3, #1
 8018018:	42b3      	cmp	r3, r6
 801801a:	bfa8      	it	ge
 801801c:	2200      	movge	r2, #0
 801801e:	18ab      	adds	r3, r5, r2
 8018020:	e7e1      	b.n	8017fe6 <__sccl+0x32>
 8018022:	4610      	mov	r0, r2
 8018024:	e7da      	b.n	8017fdc <__sccl+0x28>

08018026 <__submore>:
 8018026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801802a:	460c      	mov	r4, r1
 801802c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801802e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018032:	4299      	cmp	r1, r3
 8018034:	d11d      	bne.n	8018072 <__submore+0x4c>
 8018036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801803a:	f7ff f927 	bl	801728c <_malloc_r>
 801803e:	b918      	cbnz	r0, 8018048 <__submore+0x22>
 8018040:	f04f 30ff 	mov.w	r0, #4294967295
 8018044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801804c:	63a3      	str	r3, [r4, #56]	; 0x38
 801804e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018052:	6360      	str	r0, [r4, #52]	; 0x34
 8018054:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018058:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801805c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018060:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018064:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018068:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801806c:	6020      	str	r0, [r4, #0]
 801806e:	2000      	movs	r0, #0
 8018070:	e7e8      	b.n	8018044 <__submore+0x1e>
 8018072:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018074:	0077      	lsls	r7, r6, #1
 8018076:	463a      	mov	r2, r7
 8018078:	f000 f83a 	bl	80180f0 <_realloc_r>
 801807c:	4605      	mov	r5, r0
 801807e:	2800      	cmp	r0, #0
 8018080:	d0de      	beq.n	8018040 <__submore+0x1a>
 8018082:	eb00 0806 	add.w	r8, r0, r6
 8018086:	4601      	mov	r1, r0
 8018088:	4632      	mov	r2, r6
 801808a:	4640      	mov	r0, r8
 801808c:	f7ff f884 	bl	8017198 <memcpy>
 8018090:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018094:	f8c4 8000 	str.w	r8, [r4]
 8018098:	e7e9      	b.n	801806e <__submore+0x48>

0801809a <memmove>:
 801809a:	4288      	cmp	r0, r1
 801809c:	b510      	push	{r4, lr}
 801809e:	eb01 0402 	add.w	r4, r1, r2
 80180a2:	d902      	bls.n	80180aa <memmove+0x10>
 80180a4:	4284      	cmp	r4, r0
 80180a6:	4623      	mov	r3, r4
 80180a8:	d807      	bhi.n	80180ba <memmove+0x20>
 80180aa:	1e43      	subs	r3, r0, #1
 80180ac:	42a1      	cmp	r1, r4
 80180ae:	d008      	beq.n	80180c2 <memmove+0x28>
 80180b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80180b4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80180b8:	e7f8      	b.n	80180ac <memmove+0x12>
 80180ba:	4402      	add	r2, r0
 80180bc:	4601      	mov	r1, r0
 80180be:	428a      	cmp	r2, r1
 80180c0:	d100      	bne.n	80180c4 <memmove+0x2a>
 80180c2:	bd10      	pop	{r4, pc}
 80180c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180c8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180cc:	e7f7      	b.n	80180be <memmove+0x24>
	...

080180d0 <_sbrk_r>:
 80180d0:	b538      	push	{r3, r4, r5, lr}
 80180d2:	4d06      	ldr	r5, [pc, #24]	; (80180ec <_sbrk_r+0x1c>)
 80180d4:	2300      	movs	r3, #0
 80180d6:	4604      	mov	r4, r0
 80180d8:	4608      	mov	r0, r1
 80180da:	602b      	str	r3, [r5, #0]
 80180dc:	f7eb fb6e 	bl	80037bc <_sbrk>
 80180e0:	1c43      	adds	r3, r0, #1
 80180e2:	d102      	bne.n	80180ea <_sbrk_r+0x1a>
 80180e4:	682b      	ldr	r3, [r5, #0]
 80180e6:	b103      	cbz	r3, 80180ea <_sbrk_r+0x1a>
 80180e8:	6023      	str	r3, [r4, #0]
 80180ea:	bd38      	pop	{r3, r4, r5, pc}
 80180ec:	24003334 	.word	0x24003334

080180f0 <_realloc_r>:
 80180f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180f4:	4680      	mov	r8, r0
 80180f6:	4614      	mov	r4, r2
 80180f8:	460e      	mov	r6, r1
 80180fa:	b921      	cbnz	r1, 8018106 <_realloc_r+0x16>
 80180fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018100:	4611      	mov	r1, r2
 8018102:	f7ff b8c3 	b.w	801728c <_malloc_r>
 8018106:	b92a      	cbnz	r2, 8018114 <_realloc_r+0x24>
 8018108:	f7ff f854 	bl	80171b4 <_free_r>
 801810c:	4625      	mov	r5, r4
 801810e:	4628      	mov	r0, r5
 8018110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018114:	f000 f914 	bl	8018340 <_malloc_usable_size_r>
 8018118:	4284      	cmp	r4, r0
 801811a:	4607      	mov	r7, r0
 801811c:	d802      	bhi.n	8018124 <_realloc_r+0x34>
 801811e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018122:	d812      	bhi.n	801814a <_realloc_r+0x5a>
 8018124:	4621      	mov	r1, r4
 8018126:	4640      	mov	r0, r8
 8018128:	f7ff f8b0 	bl	801728c <_malloc_r>
 801812c:	4605      	mov	r5, r0
 801812e:	2800      	cmp	r0, #0
 8018130:	d0ed      	beq.n	801810e <_realloc_r+0x1e>
 8018132:	42bc      	cmp	r4, r7
 8018134:	4622      	mov	r2, r4
 8018136:	4631      	mov	r1, r6
 8018138:	bf28      	it	cs
 801813a:	463a      	movcs	r2, r7
 801813c:	f7ff f82c 	bl	8017198 <memcpy>
 8018140:	4631      	mov	r1, r6
 8018142:	4640      	mov	r0, r8
 8018144:	f7ff f836 	bl	80171b4 <_free_r>
 8018148:	e7e1      	b.n	801810e <_realloc_r+0x1e>
 801814a:	4635      	mov	r5, r6
 801814c:	e7df      	b.n	801810e <_realloc_r+0x1e>
	...

08018150 <_strtol_l.constprop.0>:
 8018150:	2b01      	cmp	r3, #1
 8018152:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018156:	d001      	beq.n	801815c <_strtol_l.constprop.0+0xc>
 8018158:	2b24      	cmp	r3, #36	; 0x24
 801815a:	d906      	bls.n	801816a <_strtol_l.constprop.0+0x1a>
 801815c:	f7fe ffe8 	bl	8017130 <__errno>
 8018160:	2316      	movs	r3, #22
 8018162:	6003      	str	r3, [r0, #0]
 8018164:	2000      	movs	r0, #0
 8018166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801816a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018250 <_strtol_l.constprop.0+0x100>
 801816e:	460d      	mov	r5, r1
 8018170:	462e      	mov	r6, r5
 8018172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018176:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801817a:	f017 0708 	ands.w	r7, r7, #8
 801817e:	d1f7      	bne.n	8018170 <_strtol_l.constprop.0+0x20>
 8018180:	2c2d      	cmp	r4, #45	; 0x2d
 8018182:	d132      	bne.n	80181ea <_strtol_l.constprop.0+0x9a>
 8018184:	782c      	ldrb	r4, [r5, #0]
 8018186:	2701      	movs	r7, #1
 8018188:	1cb5      	adds	r5, r6, #2
 801818a:	2b00      	cmp	r3, #0
 801818c:	d05b      	beq.n	8018246 <_strtol_l.constprop.0+0xf6>
 801818e:	2b10      	cmp	r3, #16
 8018190:	d109      	bne.n	80181a6 <_strtol_l.constprop.0+0x56>
 8018192:	2c30      	cmp	r4, #48	; 0x30
 8018194:	d107      	bne.n	80181a6 <_strtol_l.constprop.0+0x56>
 8018196:	782c      	ldrb	r4, [r5, #0]
 8018198:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801819c:	2c58      	cmp	r4, #88	; 0x58
 801819e:	d14d      	bne.n	801823c <_strtol_l.constprop.0+0xec>
 80181a0:	786c      	ldrb	r4, [r5, #1]
 80181a2:	2310      	movs	r3, #16
 80181a4:	3502      	adds	r5, #2
 80181a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80181aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80181ae:	f04f 0e00 	mov.w	lr, #0
 80181b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80181b6:	4676      	mov	r6, lr
 80181b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80181bc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80181c0:	f1bc 0f09 	cmp.w	ip, #9
 80181c4:	d816      	bhi.n	80181f4 <_strtol_l.constprop.0+0xa4>
 80181c6:	4664      	mov	r4, ip
 80181c8:	42a3      	cmp	r3, r4
 80181ca:	dd24      	ble.n	8018216 <_strtol_l.constprop.0+0xc6>
 80181cc:	f1be 3fff 	cmp.w	lr, #4294967295
 80181d0:	d008      	beq.n	80181e4 <_strtol_l.constprop.0+0x94>
 80181d2:	45b1      	cmp	r9, r6
 80181d4:	d31c      	bcc.n	8018210 <_strtol_l.constprop.0+0xc0>
 80181d6:	d101      	bne.n	80181dc <_strtol_l.constprop.0+0x8c>
 80181d8:	45a2      	cmp	sl, r4
 80181da:	db19      	blt.n	8018210 <_strtol_l.constprop.0+0xc0>
 80181dc:	fb06 4603 	mla	r6, r6, r3, r4
 80181e0:	f04f 0e01 	mov.w	lr, #1
 80181e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181e8:	e7e8      	b.n	80181bc <_strtol_l.constprop.0+0x6c>
 80181ea:	2c2b      	cmp	r4, #43	; 0x2b
 80181ec:	bf04      	itt	eq
 80181ee:	782c      	ldrbeq	r4, [r5, #0]
 80181f0:	1cb5      	addeq	r5, r6, #2
 80181f2:	e7ca      	b.n	801818a <_strtol_l.constprop.0+0x3a>
 80181f4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80181f8:	f1bc 0f19 	cmp.w	ip, #25
 80181fc:	d801      	bhi.n	8018202 <_strtol_l.constprop.0+0xb2>
 80181fe:	3c37      	subs	r4, #55	; 0x37
 8018200:	e7e2      	b.n	80181c8 <_strtol_l.constprop.0+0x78>
 8018202:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018206:	f1bc 0f19 	cmp.w	ip, #25
 801820a:	d804      	bhi.n	8018216 <_strtol_l.constprop.0+0xc6>
 801820c:	3c57      	subs	r4, #87	; 0x57
 801820e:	e7db      	b.n	80181c8 <_strtol_l.constprop.0+0x78>
 8018210:	f04f 3eff 	mov.w	lr, #4294967295
 8018214:	e7e6      	b.n	80181e4 <_strtol_l.constprop.0+0x94>
 8018216:	f1be 3fff 	cmp.w	lr, #4294967295
 801821a:	d105      	bne.n	8018228 <_strtol_l.constprop.0+0xd8>
 801821c:	2322      	movs	r3, #34	; 0x22
 801821e:	6003      	str	r3, [r0, #0]
 8018220:	4646      	mov	r6, r8
 8018222:	b942      	cbnz	r2, 8018236 <_strtol_l.constprop.0+0xe6>
 8018224:	4630      	mov	r0, r6
 8018226:	e79e      	b.n	8018166 <_strtol_l.constprop.0+0x16>
 8018228:	b107      	cbz	r7, 801822c <_strtol_l.constprop.0+0xdc>
 801822a:	4276      	negs	r6, r6
 801822c:	2a00      	cmp	r2, #0
 801822e:	d0f9      	beq.n	8018224 <_strtol_l.constprop.0+0xd4>
 8018230:	f1be 0f00 	cmp.w	lr, #0
 8018234:	d000      	beq.n	8018238 <_strtol_l.constprop.0+0xe8>
 8018236:	1e69      	subs	r1, r5, #1
 8018238:	6011      	str	r1, [r2, #0]
 801823a:	e7f3      	b.n	8018224 <_strtol_l.constprop.0+0xd4>
 801823c:	2430      	movs	r4, #48	; 0x30
 801823e:	2b00      	cmp	r3, #0
 8018240:	d1b1      	bne.n	80181a6 <_strtol_l.constprop.0+0x56>
 8018242:	2308      	movs	r3, #8
 8018244:	e7af      	b.n	80181a6 <_strtol_l.constprop.0+0x56>
 8018246:	2c30      	cmp	r4, #48	; 0x30
 8018248:	d0a5      	beq.n	8018196 <_strtol_l.constprop.0+0x46>
 801824a:	230a      	movs	r3, #10
 801824c:	e7ab      	b.n	80181a6 <_strtol_l.constprop.0+0x56>
 801824e:	bf00      	nop
 8018250:	0801862f 	.word	0x0801862f

08018254 <_strtol_r>:
 8018254:	f7ff bf7c 	b.w	8018150 <_strtol_l.constprop.0>

08018258 <_strtoul_l.constprop.0>:
 8018258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801825c:	4f36      	ldr	r7, [pc, #216]	; (8018338 <_strtoul_l.constprop.0+0xe0>)
 801825e:	4686      	mov	lr, r0
 8018260:	460d      	mov	r5, r1
 8018262:	4628      	mov	r0, r5
 8018264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018268:	5d3e      	ldrb	r6, [r7, r4]
 801826a:	f016 0608 	ands.w	r6, r6, #8
 801826e:	d1f8      	bne.n	8018262 <_strtoul_l.constprop.0+0xa>
 8018270:	2c2d      	cmp	r4, #45	; 0x2d
 8018272:	d130      	bne.n	80182d6 <_strtoul_l.constprop.0+0x7e>
 8018274:	782c      	ldrb	r4, [r5, #0]
 8018276:	2601      	movs	r6, #1
 8018278:	1c85      	adds	r5, r0, #2
 801827a:	2b00      	cmp	r3, #0
 801827c:	d057      	beq.n	801832e <_strtoul_l.constprop.0+0xd6>
 801827e:	2b10      	cmp	r3, #16
 8018280:	d109      	bne.n	8018296 <_strtoul_l.constprop.0+0x3e>
 8018282:	2c30      	cmp	r4, #48	; 0x30
 8018284:	d107      	bne.n	8018296 <_strtoul_l.constprop.0+0x3e>
 8018286:	7828      	ldrb	r0, [r5, #0]
 8018288:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801828c:	2858      	cmp	r0, #88	; 0x58
 801828e:	d149      	bne.n	8018324 <_strtoul_l.constprop.0+0xcc>
 8018290:	786c      	ldrb	r4, [r5, #1]
 8018292:	2310      	movs	r3, #16
 8018294:	3502      	adds	r5, #2
 8018296:	f04f 38ff 	mov.w	r8, #4294967295
 801829a:	2700      	movs	r7, #0
 801829c:	fbb8 f8f3 	udiv	r8, r8, r3
 80182a0:	fb03 f908 	mul.w	r9, r3, r8
 80182a4:	ea6f 0909 	mvn.w	r9, r9
 80182a8:	4638      	mov	r0, r7
 80182aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80182ae:	f1bc 0f09 	cmp.w	ip, #9
 80182b2:	d815      	bhi.n	80182e0 <_strtoul_l.constprop.0+0x88>
 80182b4:	4664      	mov	r4, ip
 80182b6:	42a3      	cmp	r3, r4
 80182b8:	dd23      	ble.n	8018302 <_strtoul_l.constprop.0+0xaa>
 80182ba:	f1b7 3fff 	cmp.w	r7, #4294967295
 80182be:	d007      	beq.n	80182d0 <_strtoul_l.constprop.0+0x78>
 80182c0:	4580      	cmp	r8, r0
 80182c2:	d31b      	bcc.n	80182fc <_strtoul_l.constprop.0+0xa4>
 80182c4:	d101      	bne.n	80182ca <_strtoul_l.constprop.0+0x72>
 80182c6:	45a1      	cmp	r9, r4
 80182c8:	db18      	blt.n	80182fc <_strtoul_l.constprop.0+0xa4>
 80182ca:	fb00 4003 	mla	r0, r0, r3, r4
 80182ce:	2701      	movs	r7, #1
 80182d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182d4:	e7e9      	b.n	80182aa <_strtoul_l.constprop.0+0x52>
 80182d6:	2c2b      	cmp	r4, #43	; 0x2b
 80182d8:	bf04      	itt	eq
 80182da:	782c      	ldrbeq	r4, [r5, #0]
 80182dc:	1c85      	addeq	r5, r0, #2
 80182de:	e7cc      	b.n	801827a <_strtoul_l.constprop.0+0x22>
 80182e0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80182e4:	f1bc 0f19 	cmp.w	ip, #25
 80182e8:	d801      	bhi.n	80182ee <_strtoul_l.constprop.0+0x96>
 80182ea:	3c37      	subs	r4, #55	; 0x37
 80182ec:	e7e3      	b.n	80182b6 <_strtoul_l.constprop.0+0x5e>
 80182ee:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80182f2:	f1bc 0f19 	cmp.w	ip, #25
 80182f6:	d804      	bhi.n	8018302 <_strtoul_l.constprop.0+0xaa>
 80182f8:	3c57      	subs	r4, #87	; 0x57
 80182fa:	e7dc      	b.n	80182b6 <_strtoul_l.constprop.0+0x5e>
 80182fc:	f04f 37ff 	mov.w	r7, #4294967295
 8018300:	e7e6      	b.n	80182d0 <_strtoul_l.constprop.0+0x78>
 8018302:	1c7b      	adds	r3, r7, #1
 8018304:	d106      	bne.n	8018314 <_strtoul_l.constprop.0+0xbc>
 8018306:	2322      	movs	r3, #34	; 0x22
 8018308:	f8ce 3000 	str.w	r3, [lr]
 801830c:	4638      	mov	r0, r7
 801830e:	b932      	cbnz	r2, 801831e <_strtoul_l.constprop.0+0xc6>
 8018310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018314:	b106      	cbz	r6, 8018318 <_strtoul_l.constprop.0+0xc0>
 8018316:	4240      	negs	r0, r0
 8018318:	2a00      	cmp	r2, #0
 801831a:	d0f9      	beq.n	8018310 <_strtoul_l.constprop.0+0xb8>
 801831c:	b107      	cbz	r7, 8018320 <_strtoul_l.constprop.0+0xc8>
 801831e:	1e69      	subs	r1, r5, #1
 8018320:	6011      	str	r1, [r2, #0]
 8018322:	e7f5      	b.n	8018310 <_strtoul_l.constprop.0+0xb8>
 8018324:	2430      	movs	r4, #48	; 0x30
 8018326:	2b00      	cmp	r3, #0
 8018328:	d1b5      	bne.n	8018296 <_strtoul_l.constprop.0+0x3e>
 801832a:	2308      	movs	r3, #8
 801832c:	e7b3      	b.n	8018296 <_strtoul_l.constprop.0+0x3e>
 801832e:	2c30      	cmp	r4, #48	; 0x30
 8018330:	d0a9      	beq.n	8018286 <_strtoul_l.constprop.0+0x2e>
 8018332:	230a      	movs	r3, #10
 8018334:	e7af      	b.n	8018296 <_strtoul_l.constprop.0+0x3e>
 8018336:	bf00      	nop
 8018338:	0801862f 	.word	0x0801862f

0801833c <_strtoul_r>:
 801833c:	f7ff bf8c 	b.w	8018258 <_strtoul_l.constprop.0>

08018340 <_malloc_usable_size_r>:
 8018340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018344:	1f18      	subs	r0, r3, #4
 8018346:	2b00      	cmp	r3, #0
 8018348:	bfbc      	itt	lt
 801834a:	580b      	ldrlt	r3, [r1, r0]
 801834c:	18c0      	addlt	r0, r0, r3
 801834e:	4770      	bx	lr

08018350 <_init>:
 8018350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018352:	bf00      	nop
 8018354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018356:	bc08      	pop	{r3}
 8018358:	469e      	mov	lr, r3
 801835a:	4770      	bx	lr

0801835c <_fini>:
 801835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835e:	bf00      	nop
 8018360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018362:	bc08      	pop	{r3}
 8018364:	469e      	mov	lr, r3
 8018366:	4770      	bx	lr
