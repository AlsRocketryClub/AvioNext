
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c030  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  0801c300  0801c300  0002c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c984  0801c984  0002c984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c98c  0801c98c  0002c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c990  0801c990  0002c990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  24000000  0801c994  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f8  240002c8  0801cc5c  000302c8  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  240034c0  0801cc5c  000334c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302c8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000302f6  2**0
                  CONTENTS, READONLY
 11 .debug_info   00035def  00000000  00000000  00030339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000063fb  00000000  00000000  00066128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002b90  00000000  00000000  0006c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000021c3  00000000  00000000  0006f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003e93c  00000000  00000000  0007127b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003b19e  00000000  00000000  000afbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017ef8b  00000000  00000000  000ead55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000d2b8  00000000  00000000  00269ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00276f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002c8 	.word	0x240002c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c2e8 	.word	0x0801c2e8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002cc 	.word	0x240002cc
 800030c:	0801c2e8 	.word	0x0801c2e8

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9a8 	b.w	8000ac0 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9e08      	ldr	r6, [sp, #32]
 80007fe:	460d      	mov	r5, r1
 8000800:	4604      	mov	r4, r0
 8000802:	460f      	mov	r7, r1
 8000804:	2b00      	cmp	r3, #0
 8000806:	d14a      	bne.n	800089e <__udivmoddi4+0xa6>
 8000808:	428a      	cmp	r2, r1
 800080a:	4694      	mov	ip, r2
 800080c:	d965      	bls.n	80008da <__udivmoddi4+0xe2>
 800080e:	fab2 f382 	clz	r3, r2
 8000812:	b143      	cbz	r3, 8000826 <__udivmoddi4+0x2e>
 8000814:	fa02 fc03 	lsl.w	ip, r2, r3
 8000818:	f1c3 0220 	rsb	r2, r3, #32
 800081c:	409f      	lsls	r7, r3
 800081e:	fa20 f202 	lsr.w	r2, r0, r2
 8000822:	4317      	orrs	r7, r2
 8000824:	409c      	lsls	r4, r3
 8000826:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800082a:	fa1f f58c 	uxth.w	r5, ip
 800082e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000832:	0c22      	lsrs	r2, r4, #16
 8000834:	fb0e 7711 	mls	r7, lr, r1, r7
 8000838:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800083c:	fb01 f005 	mul.w	r0, r1, r5
 8000840:	4290      	cmp	r0, r2
 8000842:	d90a      	bls.n	800085a <__udivmoddi4+0x62>
 8000844:	eb1c 0202 	adds.w	r2, ip, r2
 8000848:	f101 37ff 	add.w	r7, r1, #4294967295
 800084c:	f080 811c 	bcs.w	8000a88 <__udivmoddi4+0x290>
 8000850:	4290      	cmp	r0, r2
 8000852:	f240 8119 	bls.w	8000a88 <__udivmoddi4+0x290>
 8000856:	3902      	subs	r1, #2
 8000858:	4462      	add	r2, ip
 800085a:	1a12      	subs	r2, r2, r0
 800085c:	b2a4      	uxth	r4, r4
 800085e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000862:	fb0e 2210 	mls	r2, lr, r0, r2
 8000866:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800086a:	fb00 f505 	mul.w	r5, r0, r5
 800086e:	42a5      	cmp	r5, r4
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x90>
 8000872:	eb1c 0404 	adds.w	r4, ip, r4
 8000876:	f100 32ff 	add.w	r2, r0, #4294967295
 800087a:	f080 8107 	bcs.w	8000a8c <__udivmoddi4+0x294>
 800087e:	42a5      	cmp	r5, r4
 8000880:	f240 8104 	bls.w	8000a8c <__udivmoddi4+0x294>
 8000884:	4464      	add	r4, ip
 8000886:	3802      	subs	r0, #2
 8000888:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800088c:	1b64      	subs	r4, r4, r5
 800088e:	2100      	movs	r1, #0
 8000890:	b11e      	cbz	r6, 800089a <__udivmoddi4+0xa2>
 8000892:	40dc      	lsrs	r4, r3
 8000894:	2300      	movs	r3, #0
 8000896:	e9c6 4300 	strd	r4, r3, [r6]
 800089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089e:	428b      	cmp	r3, r1
 80008a0:	d908      	bls.n	80008b4 <__udivmoddi4+0xbc>
 80008a2:	2e00      	cmp	r6, #0
 80008a4:	f000 80ed 	beq.w	8000a82 <__udivmoddi4+0x28a>
 80008a8:	2100      	movs	r1, #0
 80008aa:	e9c6 0500 	strd	r0, r5, [r6]
 80008ae:	4608      	mov	r0, r1
 80008b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b4:	fab3 f183 	clz	r1, r3
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d149      	bne.n	8000950 <__udivmoddi4+0x158>
 80008bc:	42ab      	cmp	r3, r5
 80008be:	d302      	bcc.n	80008c6 <__udivmoddi4+0xce>
 80008c0:	4282      	cmp	r2, r0
 80008c2:	f200 80f8 	bhi.w	8000ab6 <__udivmoddi4+0x2be>
 80008c6:	1a84      	subs	r4, r0, r2
 80008c8:	eb65 0203 	sbc.w	r2, r5, r3
 80008cc:	2001      	movs	r0, #1
 80008ce:	4617      	mov	r7, r2
 80008d0:	2e00      	cmp	r6, #0
 80008d2:	d0e2      	beq.n	800089a <__udivmoddi4+0xa2>
 80008d4:	e9c6 4700 	strd	r4, r7, [r6]
 80008d8:	e7df      	b.n	800089a <__udivmoddi4+0xa2>
 80008da:	b902      	cbnz	r2, 80008de <__udivmoddi4+0xe6>
 80008dc:	deff      	udf	#255	; 0xff
 80008de:	fab2 f382 	clz	r3, r2
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8090 	bne.w	8000a08 <__udivmoddi4+0x210>
 80008e8:	1a8a      	subs	r2, r1, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f fe8c 	uxth.w	lr, ip
 80008f2:	2101      	movs	r1, #1
 80008f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008f8:	fb07 2015 	mls	r0, r7, r5, r2
 80008fc:	0c22      	lsrs	r2, r4, #16
 80008fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000902:	fb0e f005 	mul.w	r0, lr, r5
 8000906:	4290      	cmp	r0, r2
 8000908:	d908      	bls.n	800091c <__udivmoddi4+0x124>
 800090a:	eb1c 0202 	adds.w	r2, ip, r2
 800090e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000912:	d202      	bcs.n	800091a <__udivmoddi4+0x122>
 8000914:	4290      	cmp	r0, r2
 8000916:	f200 80cb 	bhi.w	8000ab0 <__udivmoddi4+0x2b8>
 800091a:	4645      	mov	r5, r8
 800091c:	1a12      	subs	r2, r2, r0
 800091e:	b2a4      	uxth	r4, r4
 8000920:	fbb2 f0f7 	udiv	r0, r2, r7
 8000924:	fb07 2210 	mls	r2, r7, r0, r2
 8000928:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092c:	fb0e fe00 	mul.w	lr, lr, r0
 8000930:	45a6      	cmp	lr, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x14e>
 8000934:	eb1c 0404 	adds.w	r4, ip, r4
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	d202      	bcs.n	8000944 <__udivmoddi4+0x14c>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f200 80bb 	bhi.w	8000aba <__udivmoddi4+0x2c2>
 8000944:	4610      	mov	r0, r2
 8000946:	eba4 040e 	sub.w	r4, r4, lr
 800094a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800094e:	e79f      	b.n	8000890 <__udivmoddi4+0x98>
 8000950:	f1c1 0720 	rsb	r7, r1, #32
 8000954:	408b      	lsls	r3, r1
 8000956:	fa22 fc07 	lsr.w	ip, r2, r7
 800095a:	ea4c 0c03 	orr.w	ip, ip, r3
 800095e:	fa05 f401 	lsl.w	r4, r5, r1
 8000962:	fa20 f307 	lsr.w	r3, r0, r7
 8000966:	40fd      	lsrs	r5, r7
 8000968:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800096c:	4323      	orrs	r3, r4
 800096e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000972:	fa1f fe8c 	uxth.w	lr, ip
 8000976:	fb09 5518 	mls	r5, r9, r8, r5
 800097a:	0c1c      	lsrs	r4, r3, #16
 800097c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000980:	fb08 f50e 	mul.w	r5, r8, lr
 8000984:	42a5      	cmp	r5, r4
 8000986:	fa02 f201 	lsl.w	r2, r2, r1
 800098a:	fa00 f001 	lsl.w	r0, r0, r1
 800098e:	d90b      	bls.n	80009a8 <__udivmoddi4+0x1b0>
 8000990:	eb1c 0404 	adds.w	r4, ip, r4
 8000994:	f108 3aff 	add.w	sl, r8, #4294967295
 8000998:	f080 8088 	bcs.w	8000aac <__udivmoddi4+0x2b4>
 800099c:	42a5      	cmp	r5, r4
 800099e:	f240 8085 	bls.w	8000aac <__udivmoddi4+0x2b4>
 80009a2:	f1a8 0802 	sub.w	r8, r8, #2
 80009a6:	4464      	add	r4, ip
 80009a8:	1b64      	subs	r4, r4, r5
 80009aa:	b29d      	uxth	r5, r3
 80009ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80009b0:	fb09 4413 	mls	r4, r9, r3, r4
 80009b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80009bc:	45a6      	cmp	lr, r4
 80009be:	d908      	bls.n	80009d2 <__udivmoddi4+0x1da>
 80009c0:	eb1c 0404 	adds.w	r4, ip, r4
 80009c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009c8:	d26c      	bcs.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ca:	45a6      	cmp	lr, r4
 80009cc:	d96a      	bls.n	8000aa4 <__udivmoddi4+0x2ac>
 80009ce:	3b02      	subs	r3, #2
 80009d0:	4464      	add	r4, ip
 80009d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009d6:	fba3 9502 	umull	r9, r5, r3, r2
 80009da:	eba4 040e 	sub.w	r4, r4, lr
 80009de:	42ac      	cmp	r4, r5
 80009e0:	46c8      	mov	r8, r9
 80009e2:	46ae      	mov	lr, r5
 80009e4:	d356      	bcc.n	8000a94 <__udivmoddi4+0x29c>
 80009e6:	d053      	beq.n	8000a90 <__udivmoddi4+0x298>
 80009e8:	b156      	cbz	r6, 8000a00 <__udivmoddi4+0x208>
 80009ea:	ebb0 0208 	subs.w	r2, r0, r8
 80009ee:	eb64 040e 	sbc.w	r4, r4, lr
 80009f2:	fa04 f707 	lsl.w	r7, r4, r7
 80009f6:	40ca      	lsrs	r2, r1
 80009f8:	40cc      	lsrs	r4, r1
 80009fa:	4317      	orrs	r7, r2
 80009fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000a00:	4618      	mov	r0, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	f1c3 0120 	rsb	r1, r3, #32
 8000a0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a10:	fa20 f201 	lsr.w	r2, r0, r1
 8000a14:	fa25 f101 	lsr.w	r1, r5, r1
 8000a18:	409d      	lsls	r5, r3
 8000a1a:	432a      	orrs	r2, r5
 8000a1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a20:	fa1f fe8c 	uxth.w	lr, ip
 8000a24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a28:	fb07 1510 	mls	r5, r7, r0, r1
 8000a2c:	0c11      	lsrs	r1, r2, #16
 8000a2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a32:	fb00 f50e 	mul.w	r5, r0, lr
 8000a36:	428d      	cmp	r5, r1
 8000a38:	fa04 f403 	lsl.w	r4, r4, r3
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x258>
 8000a3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a46:	d22f      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a48:	428d      	cmp	r5, r1
 8000a4a:	d92d      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4461      	add	r1, ip
 8000a50:	1b49      	subs	r1, r1, r5
 8000a52:	b292      	uxth	r2, r2
 8000a54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a58:	fb07 1115 	mls	r1, r7, r5, r1
 8000a5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a60:	fb05 f10e 	mul.w	r1, r5, lr
 8000a64:	4291      	cmp	r1, r2
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x282>
 8000a68:	eb1c 0202 	adds.w	r2, ip, r2
 8000a6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a70:	d216      	bcs.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a72:	4291      	cmp	r1, r2
 8000a74:	d914      	bls.n	8000aa0 <__udivmoddi4+0x2a8>
 8000a76:	3d02      	subs	r5, #2
 8000a78:	4462      	add	r2, ip
 8000a7a:	1a52      	subs	r2, r2, r1
 8000a7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a80:	e738      	b.n	80008f4 <__udivmoddi4+0xfc>
 8000a82:	4631      	mov	r1, r6
 8000a84:	4630      	mov	r0, r6
 8000a86:	e708      	b.n	800089a <__udivmoddi4+0xa2>
 8000a88:	4639      	mov	r1, r7
 8000a8a:	e6e6      	b.n	800085a <__udivmoddi4+0x62>
 8000a8c:	4610      	mov	r0, r2
 8000a8e:	e6fb      	b.n	8000888 <__udivmoddi4+0x90>
 8000a90:	4548      	cmp	r0, r9
 8000a92:	d2a9      	bcs.n	80009e8 <__udivmoddi4+0x1f0>
 8000a94:	ebb9 0802 	subs.w	r8, r9, r2
 8000a98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	e7a3      	b.n	80009e8 <__udivmoddi4+0x1f0>
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	e7ea      	b.n	8000a7a <__udivmoddi4+0x282>
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	e794      	b.n	80009d2 <__udivmoddi4+0x1da>
 8000aa8:	4640      	mov	r0, r8
 8000aaa:	e7d1      	b.n	8000a50 <__udivmoddi4+0x258>
 8000aac:	46d0      	mov	r8, sl
 8000aae:	e77b      	b.n	80009a8 <__udivmoddi4+0x1b0>
 8000ab0:	3d02      	subs	r5, #2
 8000ab2:	4462      	add	r2, ip
 8000ab4:	e732      	b.n	800091c <__udivmoddi4+0x124>
 8000ab6:	4608      	mov	r0, r1
 8000ab8:	e70a      	b.n	80008d0 <__udivmoddi4+0xd8>
 8000aba:	4464      	add	r4, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e742      	b.n	8000946 <__udivmoddi4+0x14e>

08000ac0 <__aeabi_idiv0>:
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	460a      	mov	r2, r1
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	480c      	ldr	r0, [pc, #48]	; (8000b0c <HG2_Write_Register+0x48>)
 8000adc:	f007 fca8 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ae0:	1df9      	adds	r1, r7, #7
 8000ae2:	2364      	movs	r3, #100	; 0x64
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000ae8:	f00e fa3e 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000aec:	1db9      	adds	r1, r7, #6
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	2201      	movs	r2, #1
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <HG2_Write_Register+0x4c>)
 8000af4:	f00e fa38 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <HG2_Write_Register+0x48>)
 8000b00:	f007 fc96 	bl	8008430 <HAL_GPIO_WritePin>

}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58020c00 	.word	0x58020c00
 8000b10:	24001138 	.word	0x24001138

08000b14 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <LG2_Read_Register+0x50>)
 8000b30:	f007 fc7e 	bl	8008430 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b34:	1df9      	adds	r1, r7, #7
 8000b36:	2364      	movs	r3, #100	; 0x64
 8000b38:	2201      	movs	r2, #1
 8000b3a:	480b      	ldr	r0, [pc, #44]	; (8000b68 <LG2_Read_Register+0x54>)
 8000b3c:	f00e fa14 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b40:	f107 010f 	add.w	r1, r7, #15
 8000b44:	2364      	movs	r3, #100	; 0x64
 8000b46:	2201      	movs	r2, #1
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <LG2_Read_Register+0x54>)
 8000b4a:	f00e fc09 	bl	800f360 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b54:	4803      	ldr	r0, [pc, #12]	; (8000b64 <LG2_Read_Register+0x50>)
 8000b56:	f007 fc6b 	bl	8008430 <HAL_GPIO_WritePin>

	return reg_value;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58020c00 	.word	0x58020c00
 8000b68:	24001138 	.word	0x24001138

08000b6c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	460a      	mov	r2, r1
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	4613      	mov	r3, r2
 8000b7a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b82:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LG2_Write_Register+0x48>)
 8000b84:	f007 fc54 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b88:	1df9      	adds	r1, r7, #7
 8000b8a:	2364      	movs	r3, #100	; 0x64
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LG2_Write_Register+0x4c>)
 8000b90:	f00e f9ea 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b94:	1db9      	adds	r1, r7, #6
 8000b96:	2364      	movs	r3, #100	; 0x64
 8000b98:	2201      	movs	r2, #1
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <LG2_Write_Register+0x4c>)
 8000b9c:	f00e f9e4 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba6:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <LG2_Write_Register+0x48>)
 8000ba8:	f007 fc42 	bl	8008430 <HAL_GPIO_WritePin>

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	58020c00 	.word	0x58020c00
 8000bb8:	24001138 	.word	0x24001138

08000bbc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bc2:	2022      	movs	r0, #34	; 0x22
 8000bc4:	f7ff ffa6 	bl	8000b14 <LG2_Read_Register>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bcc:	2023      	movs	r0, #35	; 0x23
 8000bce:	f7ff ffa1 	bl	8000b14 <LG2_Read_Register>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bd6:	79bb      	ldrb	r3, [r7, #6]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000be4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c14 <LG2_Get_Gyro_X+0x58>
 8000bf4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bf8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c18 <LG2_Get_Gyro_X+0x5c>
 8000bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c00:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	ee07 3a90 	vmov	s15, r3
}
 8000c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	46fffe00 	.word	0x46fffe00
 8000c18:	437a0000 	.word	0x437a0000

08000c1c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c22:	2024      	movs	r0, #36	; 0x24
 8000c24:	f7ff ff76 	bl	8000b14 <LG2_Read_Register>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c2c:	2025      	movs	r0, #37	; 0x25
 8000c2e:	f7ff ff71 	bl	8000b14 <LG2_Read_Register>
 8000c32:	4603      	mov	r3, r0
 8000c34:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c36:	79bb      	ldrb	r3, [r7, #6]
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b21a      	sxth	r2, r3
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	b21b      	sxth	r3, r3
 8000c40:	4313      	orrs	r3, r2
 8000c42:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000c44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c48:	ee07 3a90 	vmov	s15, r3
 8000c4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c50:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000c74 <LG2_Get_Gyro_Y+0x58>
 8000c54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c58:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000c78 <LG2_Get_Gyro_Y+0x5c>
 8000c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c60:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	ee07 3a90 	vmov	s15, r3
}
 8000c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	46fffe00 	.word	0x46fffe00
 8000c78:	437a0000 	.word	0x437a0000
 8000c7c:	00000000 	.word	0x00000000

08000c80 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c86:	2026      	movs	r0, #38	; 0x26
 8000c88:	f7ff ff44 	bl	8000b14 <LG2_Read_Register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c90:	2027      	movs	r0, #39	; 0x27
 8000c92:	f7ff ff3f 	bl	8000b14 <LG2_Read_Register>
 8000c96:	4603      	mov	r3, r0
 8000c98:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c9a:	79bb      	ldrb	r3, [r7, #6]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 8000ca8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cac:	ee07 3a90 	vmov	s15, r3
 8000cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cb8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000ce0 <LG2_Get_Gyro_Z+0x60>
 8000cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x68>
 8000cc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ccc:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	ee07 3a90 	vmov	s15, r3
}
 8000cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	40dfffc0 	.word	0x40dfffc0
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	406f4000 	.word	0x406f4000

08000cf0 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000cfc:	ed97 7a00 	vldr	s14, [r7]
 8000d00:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d70 <setServo+0x80>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d74 <setServo+0x84>
 8000d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d10:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d78 <setServo+0x88>
 8000d14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d1c:	ee17 3a90 	vmov	r3, s15
 8000d20:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3b01      	subs	r3, #1
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d81a      	bhi.n	8000d60 <setServo+0x70>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <setServo+0x40>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d49 	.word	0x08000d49
 8000d38:	08000d51 	.word	0x08000d51
 8000d3c:	08000d59 	.word	0x08000d59
		case 1:
			TIM4->CCR4 = timerVal;
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <setServo+0x8c>)
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000d46:	e00c      	b.n	8000d62 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <setServo+0x8c>)
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000d4e:	e008      	b.n	8000d62 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000d50:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <setServo+0x8c>)
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000d56:	e004      	b.n	8000d62 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000d58:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <setServo+0x8c>)
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000d5e:	e000      	b.n	8000d62 <setServo+0x72>

		default:
			break;
 8000d60:	bf00      	nop
	}
}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	43340000 	.word	0x43340000
 8000d74:	457a0000 	.word	0x457a0000
 8000d78:	453b8000 	.word	0x453b8000
 8000d7c:	40000800 	.word	0x40000800

08000d80 <setLEDs>:

void setLEDs(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08e      	sub	sp, #56	; 0x38
 8000d84:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8a:	e181      	b.n	8001090 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000d8c:	4aa1      	ldr	r2, [pc, #644]	; (8001014 <setLEDs+0x294>)
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	f200 8177 	bhi.w	8001088 <setLEDs+0x308>
 8000d9a:	a201      	add	r2, pc, #4	; (adr r2, 8000da0 <setLEDs+0x20>)
 8000d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da0:	08000db1 	.word	0x08000db1
 8000da4:	08000e61 	.word	0x08000e61
 8000da8:	08000f11 	.word	0x08000f11
 8000dac:	08000fc1 	.word	0x08000fc1
		case 0:
			for (int j = 0; j < 3; j++) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
 8000db4:	e042      	b.n	8000e3c <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dba:	e039      	b.n	8000e30 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000dbc:	4996      	ldr	r1, [pc, #600]	; (8001018 <setLEDs+0x298>)
 8000dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4413      	add	r3, r2
 8000dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000dc8:	4413      	add	r3, r2
 8000dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd2:	fa41 f202 	asr.w	r2, r1, r2
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d013      	beq.n	8000e04 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	00da      	lsls	r2, r3, #3
 8000de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de2:	18d1      	adds	r1, r2, r3
 8000de4:	4a8b      	ldr	r2, [pc, #556]	; (8001014 <setLEDs+0x294>)
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	4413      	add	r3, r2
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	440b      	add	r3, r1
 8000df8:	3308      	adds	r3, #8
 8000dfa:	4a88      	ldr	r2, [pc, #544]	; (800101c <setLEDs+0x29c>)
 8000dfc:	213c      	movs	r1, #60	; 0x3c
 8000dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000e02:	e012      	b.n	8000e2a <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	00da      	lsls	r2, r3, #3
 8000e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0a:	18d1      	adds	r1, r2, r3
 8000e0c:	4a81      	ldr	r2, [pc, #516]	; (8001014 <setLEDs+0x294>)
 8000e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	4413      	add	r3, r2
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	440b      	add	r3, r1
 8000e20:	3308      	adds	r3, #8
 8000e22:	4a7e      	ldr	r2, [pc, #504]	; (800101c <setLEDs+0x29c>)
 8000e24:	211e      	movs	r1, #30
 8000e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	ddc2      	ble.n	8000dbc <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	3301      	adds	r3, #1
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	ddb9      	ble.n	8000db6 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e46:	e007      	b.n	8000e58 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000e48:	4a74      	ldr	r2, [pc, #464]	; (800101c <setLEDs+0x29c>)
 8000e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	3301      	adds	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	2bb1      	cmp	r3, #177	; 0xb1
 8000e5c:	ddf4      	ble.n	8000e48 <setLEDs+0xc8>
			}
			break;
 8000e5e:	e114      	b.n	800108a <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
 8000e64:	e042      	b.n	8000eec <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
 8000e6a:	e039      	b.n	8000ee0 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000e6c:	496a      	ldr	r1, [pc, #424]	; (8001018 <setLEDs+0x298>)
 8000e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	4413      	add	r3, r2
 8000e7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e7e:	2180      	movs	r1, #128	; 0x80
 8000e80:	6a3a      	ldr	r2, [r7, #32]
 8000e82:	fa41 f202 	asr.w	r2, r1, r2
 8000e86:	4013      	ands	r3, r2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d013      	beq.n	8000eb4 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	18d1      	adds	r1, r2, r3
 8000e94:	4a5f      	ldr	r2, [pc, #380]	; (8001014 <setLEDs+0x294>)
 8000e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	00db      	lsls	r3, r3, #3
 8000ea6:	440b      	add	r3, r1
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	4a5d      	ldr	r2, [pc, #372]	; (8001020 <setLEDs+0x2a0>)
 8000eac:	213c      	movs	r1, #60	; 0x3c
 8000eae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000eb2:	e012      	b.n	8000eda <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	00da      	lsls	r2, r3, #3
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	18d1      	adds	r1, r2, r3
 8000ebc:	4a55      	ldr	r2, [pc, #340]	; (8001014 <setLEDs+0x294>)
 8000ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	440b      	add	r3, r1
 8000ed0:	3308      	adds	r3, #8
 8000ed2:	4a53      	ldr	r2, [pc, #332]	; (8001020 <setLEDs+0x2a0>)
 8000ed4:	211e      	movs	r1, #30
 8000ed6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000eda:	6a3b      	ldr	r3, [r7, #32]
 8000edc:	3301      	adds	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	2b07      	cmp	r3, #7
 8000ee4:	ddc2      	ble.n	8000e6c <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	3301      	adds	r3, #1
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	ddb9      	ble.n	8000e66 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	61fb      	str	r3, [r7, #28]
 8000ef6:	e007      	b.n	8000f08 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000ef8:	4a49      	ldr	r2, [pc, #292]	; (8001020 <setLEDs+0x2a0>)
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	2100      	movs	r1, #0
 8000efe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2bb1      	cmp	r3, #177	; 0xb1
 8000f0c:	ddf4      	ble.n	8000ef8 <setLEDs+0x178>
			}
			break;
 8000f0e:	e0bc      	b.n	800108a <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	e042      	b.n	8000f9c <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e039      	b.n	8000f90 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000f1c:	493e      	ldr	r1, [pc, #248]	; (8001018 <setLEDs+0x298>)
 8000f1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4413      	add	r3, r2
 8000f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f2e:	2180      	movs	r1, #128	; 0x80
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	fa41 f202 	asr.w	r2, r1, r2
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d013      	beq.n	8000f64 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	18d1      	adds	r1, r2, r3
 8000f44:	4a33      	ldr	r2, [pc, #204]	; (8001014 <setLEDs+0x294>)
 8000f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	4413      	add	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	440b      	add	r3, r1
 8000f58:	3308      	adds	r3, #8
 8000f5a:	4a32      	ldr	r2, [pc, #200]	; (8001024 <setLEDs+0x2a4>)
 8000f5c:	213c      	movs	r1, #60	; 0x3c
 8000f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000f62:	e012      	b.n	8000f8a <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	00da      	lsls	r2, r3, #3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	18d1      	adds	r1, r2, r3
 8000f6c:	4a29      	ldr	r2, [pc, #164]	; (8001014 <setLEDs+0x294>)
 8000f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	3308      	adds	r3, #8
 8000f82:	4a28      	ldr	r2, [pc, #160]	; (8001024 <setLEDs+0x2a4>)
 8000f84:	211e      	movs	r1, #30
 8000f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	ddc2      	ble.n	8000f1c <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	ddb9      	ble.n	8000f16 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fa2:	2338      	movs	r3, #56	; 0x38
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	e007      	b.n	8000fb8 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000fa8:	4a1e      	ldr	r2, [pc, #120]	; (8001024 <setLEDs+0x2a4>)
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2100      	movs	r1, #0
 8000fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b69      	cmp	r3, #105	; 0x69
 8000fbc:	ddf4      	ble.n	8000fa8 <setLEDs+0x228>
			}
			break;
 8000fbe:	e064      	b.n	800108a <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e04e      	b.n	8001064 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	e045      	b.n	8001058 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000fcc:	4912      	ldr	r1, [pc, #72]	; (8001018 <setLEDs+0x298>)
 8000fce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4413      	add	r3, r2
 8000fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	fa41 f202 	asr.w	r2, r1, r2
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d01f      	beq.n	800102c <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	00da      	lsls	r2, r3, #3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	18d1      	adds	r1, r2, r3
 8000ff4:	4a07      	ldr	r2, [pc, #28]	; (8001014 <setLEDs+0x294>)
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	00db      	lsls	r3, r3, #3
 8001006:	440b      	add	r3, r1
 8001008:	3308      	adds	r3, #8
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <setLEDs+0x2a8>)
 800100c:	213c      	movs	r1, #60	; 0x3c
 800100e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001012:	e01e      	b.n	8001052 <setLEDs+0x2d2>
 8001014:	0801c478 	.word	0x0801c478
 8001018:	24000cc8 	.word	0x24000cc8
 800101c:	240003e8 	.word	0x240003e8
 8001020:	240006b0 	.word	0x240006b0
 8001024:	24000978 	.word	0x24000978
 8001028:	24000b20 	.word	0x24000b20
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	00da      	lsls	r2, r3, #3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	18d1      	adds	r1, r2, r3
 8001034:	4a26      	ldr	r2, [pc, #152]	; (80010d0 <setLEDs+0x350>)
 8001036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	4413      	add	r3, r2
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	440b      	add	r3, r1
 8001048:	3308      	adds	r3, #8
 800104a:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <setLEDs+0x354>)
 800104c:	211e      	movs	r1, #30
 800104e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3301      	adds	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b07      	cmp	r3, #7
 800105c:	ddb6      	ble.n	8000fcc <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b02      	cmp	r3, #2
 8001068:	ddad      	ble.n	8000fc6 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800106a:	2338      	movs	r3, #56	; 0x38
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	e007      	b.n	8001080 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <setLEDs+0x354>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2100      	movs	r1, #0
 8001076:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b69      	cmp	r3, #105	; 0x69
 8001084:	ddf4      	ble.n	8001070 <setLEDs+0x2f0>
			}
			break;
 8001086:	e000      	b.n	800108a <setLEDs+0x30a>
		default:
			break;
 8001088:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800108a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800108c:	3301      	adds	r3, #1
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	2b0d      	cmp	r3, #13
 8001094:	f77f ae7a 	ble.w	8000d8c <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8001098:	23b2      	movs	r3, #178	; 0xb2
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <setLEDs+0x358>)
 800109c:	210c      	movs	r1, #12
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <setLEDs+0x35c>)
 80010a0:	f00e fda2 	bl	800fbe8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 80010a4:	23b2      	movs	r3, #178	; 0xb2
 80010a6:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <setLEDs+0x360>)
 80010a8:	2108      	movs	r1, #8
 80010aa:	480e      	ldr	r0, [pc, #56]	; (80010e4 <setLEDs+0x364>)
 80010ac:	f00e fd9c 	bl	800fbe8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 80010b0:	236a      	movs	r3, #106	; 0x6a
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <setLEDs+0x368>)
 80010b4:	2104      	movs	r1, #4
 80010b6:	480d      	ldr	r0, [pc, #52]	; (80010ec <setLEDs+0x36c>)
 80010b8:	f00e fd96 	bl	800fbe8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 80010bc:	236a      	movs	r3, #106	; 0x6a
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <setLEDs+0x354>)
 80010c0:	2100      	movs	r1, #0
 80010c2:	480a      	ldr	r0, [pc, #40]	; (80010ec <setLEDs+0x36c>)
 80010c4:	f00e fd90 	bl	800fbe8 <HAL_TIM_PWM_Start_DMA>

}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	0801c478 	.word	0x0801c478
 80010d4:	24000b20 	.word	0x24000b20
 80010d8:	240003e8 	.word	0x240003e8
 80010dc:	2400132c 	.word	0x2400132c
 80010e0:	240006b0 	.word	0x240006b0
 80010e4:	24001248 	.word	0x24001248
 80010e8:	24000978 	.word	0x24000978
 80010ec:	24001294 	.word	0x24001294

080010f0 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <LoRA_Read_Register+0x48>)
 8001102:	f007 f995 	bl	8008430 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8001106:	1df9      	adds	r1, r7, #7
 8001108:	2364      	movs	r3, #100	; 0x64
 800110a:	2201      	movs	r2, #1
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoRA_Read_Register+0x4c>)
 800110e:	f00d ff2b 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8001112:	f107 010f 	add.w	r1, r7, #15
 8001116:	2364      	movs	r3, #100	; 0x64
 8001118:	2201      	movs	r2, #1
 800111a:	4808      	ldr	r0, [pc, #32]	; (800113c <LoRA_Read_Register+0x4c>)
 800111c:	f00e f920 	bl	800f360 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001126:	4804      	ldr	r0, [pc, #16]	; (8001138 <LoRA_Read_Register+0x48>)
 8001128:	f007 f982 	bl	8008430 <HAL_GPIO_WritePin>

	return reg_value;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58020000 	.word	0x58020000
 800113c:	240011c0 	.word	0x240011c0

08001140 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	460a      	mov	r2, r1
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	4613      	mov	r3, r2
 800114e:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001156:	b2db      	uxtb	r3, r3
 8001158:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <LoRA_Write_Register+0x54>)
 8001162:	f007 f965 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8001166:	1df9      	adds	r1, r7, #7
 8001168:	2364      	movs	r3, #100	; 0x64
 800116a:	2201      	movs	r2, #1
 800116c:	480a      	ldr	r0, [pc, #40]	; (8001198 <LoRA_Write_Register+0x58>)
 800116e:	f00d fefb 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8001172:	1db9      	adds	r1, r7, #6
 8001174:	2364      	movs	r3, #100	; 0x64
 8001176:	2201      	movs	r2, #1
 8001178:	4807      	ldr	r0, [pc, #28]	; (8001198 <LoRA_Write_Register+0x58>)
 800117a:	f00d fef5 	bl	800ef68 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <LoRA_Write_Register+0x54>)
 8001186:	f007 f953 	bl	8008430 <HAL_GPIO_WritePin>

}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	58020000 	.word	0x58020000
 8001198:	240011c0 	.word	0x240011c0

0800119c <LoRA_sleep>:


void LoRA_sleep(void){
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ffcc 	bl	8001140 <LoRA_Write_Register>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80011ac:	b5b0      	push	{r4, r5, r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	17c8      	asrs	r0, r1, #31
 80011b8:	460a      	mov	r2, r1
 80011ba:	4603      	mov	r3, r0
 80011bc:	1355      	asrs	r5, r2, #13
 80011be:	04d4      	lsls	r4, r2, #19
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <LoRA_set_frequency+0x78>)
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	4620      	mov	r0, r4
 80011c8:	4629      	mov	r1, r5
 80011ca:	f7ff fac5 	bl	8000758 <__aeabi_uldivmod>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80011d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	f04f 0300 	mov.w	r3, #0
 80011e2:	0c02      	lsrs	r2, r0, #16
 80011e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011e8:	0c0b      	lsrs	r3, r1, #16
 80011ea:	b2d3      	uxtb	r3, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff ffa6 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 80011f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	0a02      	lsrs	r2, r0, #8
 8001202:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001206:	0a0b      	lsrs	r3, r1, #8
 8001208:	b2d3      	uxtb	r3, r2
 800120a:	4619      	mov	r1, r3
 800120c:	2007      	movs	r0, #7
 800120e:	f7ff ff97 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8001212:	7a3b      	ldrb	r3, [r7, #8]
 8001214:	4619      	mov	r1, r3
 8001216:	2008      	movs	r0, #8
 8001218:	f7ff ff92 	bl	8001140 <LoRA_Write_Register>
}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bdb0      	pop	{r4, r5, r7, pc}
 8001224:	01e84800 	.word	0x01e84800

08001228 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8001232:	231b      	movs	r3, #27
 8001234:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	2b78      	cmp	r3, #120	; 0x78
 800123a:	d809      	bhi.n	8001250 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	3b2d      	subs	r3, #45	; 0x2d
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <LoRA_setOCP+0x60>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	1052      	asrs	r2, r2, #1
 8001248:	17db      	asrs	r3, r3, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e00b      	b.n	8001268 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	2bf0      	cmp	r3, #240	; 0xf0
 8001254:	d808      	bhi.n	8001268 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	331e      	adds	r3, #30
 800125a:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <LoRA_setOCP+0x60>)
 800125c:	fb82 1203 	smull	r1, r2, r2, r3
 8001260:	1092      	asrs	r2, r2, #2
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	b2db      	uxtb	r3, r3
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	200b      	movs	r0, #11
 800127a:	f7ff ff61 	bl	8001140 <LoRA_Write_Register>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	66666667 	.word	0x66666667

0800128c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b11      	cmp	r3, #17
 8001298:	dd0f      	ble.n	80012ba <LoRA_setTxPower+0x2e>
      if (level > 20) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2b14      	cmp	r3, #20
 800129e:	dd01      	ble.n	80012a4 <LoRA_setTxPower+0x18>
        level = 20;
 80012a0:	2314      	movs	r3, #20
 80012a2:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b03      	subs	r3, #3
 80012a8:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 80012aa:	2187      	movs	r1, #135	; 0x87
 80012ac:	204d      	movs	r0, #77	; 0x4d
 80012ae:	f7ff ff47 	bl	8001140 <LoRA_Write_Register>
      LoRA_setOCP(140);
 80012b2:	208c      	movs	r0, #140	; 0x8c
 80012b4:	f7ff ffb8 	bl	8001228 <LoRA_setOCP>
 80012b8:	e00b      	b.n	80012d2 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	dc01      	bgt.n	80012c4 <LoRA_setTxPower+0x38>
        level = 2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 80012c4:	2184      	movs	r1, #132	; 0x84
 80012c6:	204d      	movs	r0, #77	; 0x4d
 80012c8:	f7ff ff3a 	bl	8001140 <LoRA_Write_Register>
      LoRA_setOCP(100);
 80012cc:	2064      	movs	r0, #100	; 0x64
 80012ce:	f7ff ffab 	bl	8001228 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	3b02      	subs	r3, #2
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	2009      	movs	r0, #9
 80012e8:	f7ff ff2a 	bl	8001140 <LoRA_Write_Register>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80012f8:	201d      	movs	r0, #29
 80012fa:	f7ff fef9 	bl	80010f0 <LoRA_Read_Register>
 80012fe:	4603      	mov	r3, r0
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	201d      	movs	r0, #29
 800130a:	f7ff ff19 	bl	8001140 <LoRA_Write_Register>
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <LoRA_begin>:

void LoRA_begin(long frequency){
 8001314:	b580      	push	{r7, lr}
 8001316:	b09c      	sub	sp, #112	; 0x70
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800131c:	2201      	movs	r2, #1
 800131e:	2101      	movs	r1, #1
 8001320:	4822      	ldr	r0, [pc, #136]	; (80013ac <LoRA_begin+0x98>)
 8001322:	f007 f885 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001326:	2201      	movs	r2, #1
 8001328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800132c:	4820      	ldr	r0, [pc, #128]	; (80013b0 <LoRA_begin+0x9c>)
 800132e:	f007 f87f 	bl	8008430 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8001332:	2042      	movs	r0, #66	; 0x42
 8001334:	f7ff fedc 	bl	80010f0 <LoRA_Read_Register>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 800133e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	491b      	ldr	r1, [pc, #108]	; (80013b4 <LoRA_begin+0xa0>)
 8001348:	4618      	mov	r0, r3
 800134a:	f016 ffb9 	bl	80182c0 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f83c 	bl	80003d0 <strlen>
 8001358:	4602      	mov	r2, r0
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f015 fc59 	bl	8016c18 <CDC_Transmit_HS>

	LoRA_sleep();
 8001366:	f7ff ff19 	bl	800119c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800136a:	4813      	ldr	r0, [pc, #76]	; (80013b8 <LoRA_begin+0xa4>)
 800136c:	f7ff ff1e 	bl	80011ac <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001370:	2100      	movs	r1, #0
 8001372:	200f      	movs	r0, #15
 8001374:	f7ff fee4 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8001378:	2100      	movs	r1, #0
 800137a:	200e      	movs	r0, #14
 800137c:	f7ff fee0 	bl	8001140 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001380:	200c      	movs	r0, #12
 8001382:	f7ff feb5 	bl	80010f0 <LoRA_Read_Register>
 8001386:	4603      	mov	r3, r0
 8001388:	f043 0303 	orr.w	r3, r3, #3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	200c      	movs	r0, #12
 8001392:	f7ff fed5 	bl	8001140 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001396:	2104      	movs	r1, #4
 8001398:	2026      	movs	r0, #38	; 0x26
 800139a:	f7ff fed1 	bl	8001140 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 800139e:	2011      	movs	r0, #17
 80013a0:	f7ff ff74 	bl	800128c <LoRA_setTxPower>

}
 80013a4:	bf00      	nop
 80013a6:	3770      	adds	r7, #112	; 0x70
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58020c00 	.word	0x58020c00
 80013b0:	58020000 	.word	0x58020000
 80013b4:	0801c300 	.word	0x0801c300
 80013b8:	33bca100 	.word	0x33bca100

080013bc <LoRA_beginPacket>:


void LoRA_beginPacket(){
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 80013c0:	f7ff ff98 	bl	80012f4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80013c4:	2100      	movs	r1, #0
 80013c6:	200d      	movs	r0, #13
 80013c8:	f7ff feba 	bl	8001140 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 80013cc:	2100      	movs	r1, #0
 80013ce:	2022      	movs	r0, #34	; 0x22
 80013d0:	f7ff feb6 	bl	8001140 <LoRA_Write_Register>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <LoRA_endPacket>:

void LoRA_endPacket(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 80013dc:	2183      	movs	r1, #131	; 0x83
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff feae 	bl	8001140 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 80013e4:	bf00      	nop
 80013e6:	2012      	movs	r0, #18
 80013e8:	f7ff fe82 	bl	80010f0 <LoRA_Read_Register>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f7      	beq.n	80013e6 <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80013f6:	2185      	movs	r1, #133	; 0x85
 80013f8:	2001      	movs	r0, #1
 80013fa:	f7ff fea1 	bl	8001140 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80013fe:	2108      	movs	r1, #8
 8001400:	2012      	movs	r0, #18
 8001402:	f7ff fe9d 	bl	8001140 <LoRA_Write_Register>

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <LoRA_parsePacket>:


int LoRA_parsePacket(){
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001414:	2012      	movs	r0, #18
 8001416:	f7ff fe6b 	bl	80010f0 <LoRA_Read_Register>
 800141a:	4603      	mov	r3, r0
 800141c:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800141e:	f7ff ff69 	bl	80012f4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	2012      	movs	r0, #18
 800142a:	f7ff fe89 	bl	8001140 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	2b00      	cmp	r3, #0
 8001436:	d016      	beq.n	8001466 <LoRA_parsePacket+0x5c>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f003 0320 	and.w	r3, r3, #32
 800143e:	2b00      	cmp	r3, #0
 8001440:	d111      	bne.n	8001466 <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001442:	2013      	movs	r0, #19
 8001444:	f7ff fe54 	bl	80010f0 <LoRA_Read_Register>
 8001448:	4603      	mov	r3, r0
 800144a:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 800144c:	2010      	movs	r0, #16
 800144e:	f7ff fe4f 	bl	80010f0 <LoRA_Read_Register>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	200d      	movs	r0, #13
 8001458:	f7ff fe72 	bl	8001140 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800145c:	2185      	movs	r1, #133	; 0x85
 800145e:	2001      	movs	r0, #1
 8001460:	f7ff fe6e 	bl	8001140 <LoRA_Write_Register>
 8001464:	e00d      	b.n	8001482 <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8001466:	2001      	movs	r0, #1
 8001468:	f7ff fe42 	bl	80010f0 <LoRA_Read_Register>
 800146c:	4603      	mov	r3, r0
 800146e:	2b85      	cmp	r3, #133	; 0x85
 8001470:	d007      	beq.n	8001482 <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	200d      	movs	r0, #13
 8001476:	f7ff fe63 	bl	8001140 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800147a:	2185      	movs	r1, #133	; 0x85
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fe5f 	bl	8001140 <LoRA_Write_Register>
	}
	return packetLenght;
 8001482:	687b      	ldr	r3, [r7, #4]

}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8001494:	f7ff ff92 	bl	80013bc <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	e00a      	b.n	80014b4 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4619      	mov	r1, r3
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fe49 	bl	8001140 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe ff8b 	bl	80003d0 <strlen>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d8ed      	bhi.n	800149e <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7fe ff84 	bl	80003d0 <strlen>
 80014c8:	4603      	mov	r3, r0
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	2022      	movs	r0, #34	; 0x22
 80014d0:	f7ff fe36 	bl	8001140 <LoRA_Write_Register>
    LoRA_endPacket();
 80014d4:	f7ff ff80 	bl	80013d8 <LoRA_endPacket>
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2102      	movs	r1, #2
 80014ec:	4827      	ldr	r0, [pc, #156]	; (800158c <disarm+0xac>)
 80014ee:	f006 ff9f 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2104      	movs	r1, #4
 80014f6:	4825      	ldr	r0, [pc, #148]	; (800158c <disarm+0xac>)
 80014f8:	f006 ff9a 	bl	8008430 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2102      	movs	r1, #2
 8001500:	4823      	ldr	r0, [pc, #140]	; (8001590 <disarm+0xb0>)
 8001502:	f006 ff95 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150c:	4821      	ldr	r0, [pc, #132]	; (8001594 <disarm+0xb4>)
 800150e:	f006 ff8f 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	481e      	ldr	r0, [pc, #120]	; (8001594 <disarm+0xb4>)
 800151a:	f006 ff89 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001524:	481b      	ldr	r0, [pc, #108]	; (8001594 <disarm+0xb4>)
 8001526:	f006 ff83 	bl	8008430 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2102      	movs	r1, #2
 800152e:	481a      	ldr	r0, [pc, #104]	; (8001598 <disarm+0xb8>)
 8001530:	f006 ff7e 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800153a:	4818      	ldr	r0, [pc, #96]	; (800159c <disarm+0xbc>)
 800153c:	f006 ff78 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <disarm+0xbc>)
 8001548:	f006 ff72 	bl	8008430 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001552:	4812      	ldr	r0, [pc, #72]	; (800159c <disarm+0xbc>)
 8001554:	f006 ff6c 	bl	8008430 <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <disarm+0xc0>)
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 800155e:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <disarm+0xc0>)
 8001560:	2200      	movs	r2, #0
 8001562:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <disarm+0xc0>)
 8001566:	2200      	movs	r2, #0
 8001568:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 800156a:	f7ff fc09 	bl	8000d80 <setLEDs>

  strcpy(state,"DISARMED");
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <disarm+0xc4>)
 8001572:	461a      	mov	r2, r3
 8001574:	460b      	mov	r3, r1
 8001576:	cb03      	ldmia	r3!, {r0, r1}
 8001578:	6010      	str	r0, [r2, #0]
 800157a:	6051      	str	r1, [r2, #4]
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	7213      	strb	r3, [r2, #8]
  return 0;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	58020000 	.word	0x58020000
 8001590:	58020400 	.word	0x58020400
 8001594:	58021400 	.word	0x58021400
 8001598:	58021800 	.word	0x58021800
 800159c:	58021000 	.word	0x58021000
 80015a0:	24000cc8 	.word	0x24000cc8
 80015a4:	0801c304 	.word	0x0801c304

080015a8 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 80015b2:	f7ff ff2a 	bl	800140a <LoRA_parsePacket>
 80015b6:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dc01      	bgt.n	80015c4 <recv_packet+0x1c>
  {
    return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e01c      	b.n	80015fe <recv_packet+0x56>
  }
  if(packet_length){
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d018      	beq.n	80015fc <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	e00a      	b.n	80015e6 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	18d4      	adds	r4, r2, r3
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fd8a 	bl	80010f0 <LoRA_Read_Register>
 80015dc:	4603      	mov	r3, r0
 80015de:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf0      	blt.n	80015d0 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4413      	add	r3, r2
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
    return packet_length;
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	e000      	b.n	80015fe <recv_packet+0x56>
  }
  else{
    return 0;
 80015fc:	2300      	movs	r3, #0
  }
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bd90      	pop	{r4, r7, pc}

08001606 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8001606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	466b      	mov	r3, sp
 8001612:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7fe fedb 	bl	80003d0 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	b29b      	uxth	r3, r3
 800161e:	3301      	adds	r3, #1
 8001620:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 8001622:	8a79      	ldrh	r1, [r7, #18]
 8001624:	460b      	mov	r3, r1
 8001626:	3b01      	subs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	b28b      	uxth	r3, r1
 800162c:	2200      	movs	r2, #0
 800162e:	4698      	mov	r8, r3
 8001630:	4691      	mov	r9, r2
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	f04f 0300 	mov.w	r3, #0
 800163a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800163e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001646:	b28b      	uxth	r3, r1
 8001648:	2200      	movs	r2, #0
 800164a:	461c      	mov	r4, r3
 800164c:	4615      	mov	r5, r2
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	00eb      	lsls	r3, r5, #3
 8001658:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800165c:	00e2      	lsls	r2, r4, #3
 800165e:	460b      	mov	r3, r1
 8001660:	3307      	adds	r3, #7
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	ebad 0d03 	sub.w	sp, sp, r3
 800166a:	466b      	mov	r3, sp
 800166c:	3300      	adds	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001670:	f002 fc20 	bl	8003eb4 <HAL_GetTick>
 8001674:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff ff08 	bl	800148c <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800167c:	8a7b      	ldrh	r3, [r7, #18]
 800167e:	4619      	mov	r1, r3
 8001680:	68b8      	ldr	r0, [r7, #8]
 8001682:	f7ff ff91 	bl	80015a8 <recv_packet>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	68b8      	ldr	r0, [r7, #8]
 8001690:	f7fe fe3e 	bl	8000310 <strcmp>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d011      	beq.n	80016be <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fef6 	bl	800148c <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 80016a0:	f002 fc08 	bl	8003eb4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ae:	d9e5      	bls.n	800167c <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff feeb 	bl	800148c <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 80016b6:	f002 fbfd 	bl	8003eb4 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 80016bc:	e7de      	b.n	800167c <reliable_send_packet+0x76>
				break;
 80016be:	bf00      	nop
 80016c0:	46b5      	mov	sp, r6
		}
	}
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080016cc <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <usbReceiveHandle+0x40>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
	if(usbBytesReady > 0){
 80016da:	4b0c      	ldr	r3, [pc, #48]	; (800170c <usbReceiveHandle+0x40>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00f      	beq.n	8001702 <usbReceiveHandle+0x36>
		if(usbBytesReady > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, usbBytesReady);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <usbReceiveHandle+0x40>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	4909      	ldr	r1, [pc, #36]	; (8001710 <usbReceiveHandle+0x44>)
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f016 ff01 	bl	80184f2 <memcpy>
		output[usbBytesReady] = '\0';
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <usbReceiveHandle+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80016fc:	4b03      	ldr	r3, [pc, #12]	; (800170c <usbReceiveHandle+0x40>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	240003e4 	.word	0x240003e4
 8001710:	240002e4 	.word	0x240002e4
 8001714:	00000000 	.word	0x00000000

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001720:	4bd7      	ldr	r3, [pc, #860]	; (8001a80 <main+0x368>)
 8001722:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 8001726:	461d      	mov	r5, r3
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001730:	c403      	stmia	r4!, {r0, r1}
 8001732:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001734:	f002 fb38 	bl	8003da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001738:	f000 fb2e 	bl	8001d98 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800173c:	f000 fba4 	bl	8001e88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f001 f92c 	bl	800299c <MX_GPIO_Init>
  MX_DMA_Init();
 8001744:	f001 f8ca 	bl	80028dc <MX_DMA_Init>
  MX_SPI3_Init();
 8001748:	f000 fe24 	bl	8002394 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 800174c:	f000 fcb4 	bl	80020b8 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001750:	f001 f878 	bl	8002844 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001754:	f000 fbca 	bl	8001eec <MX_ADC1_Init>
  MX_TIM4_Init();
 8001758:	f000 ff2e 	bl	80025b8 <MX_TIM4_Init>
  MX_ADC3_Init();
 800175c:	f000 fc3e 	bl	8001fdc <MX_ADC3_Init>
  MX_SPI2_Init();
 8001760:	f000 fdc2 	bl	80022e8 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001764:	f000 fd0c 	bl	8002180 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001768:	f000 fe6a 	bl	8002440 <MX_TIM2_Init>
  MX_TIM5_Init();
 800176c:	f000 ffa0 	bl	80026b0 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001770:	f000 febe 	bl	80024f0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001774:	f015 f97a 	bl	8016a6c <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001778:	f000 fd60 	bl	800223c <MX_SPI1_Init>
  MX_UART4_Init();
 800177c:	f001 f816 	bl	80027ac <MX_UART4_Init>
  MX_FATFS_Init();
 8001780:	f012 ff08 	bl	8014594 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001784:	f000 fd3c 	bl	8002200 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001788:	f000 ffec 	bl	8002764 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 800178c:	2332      	movs	r3, #50	; 0x32
 800178e:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 8001792:	a3b9      	add	r3, pc, #740	; (adr r3, 8001a78 <main+0x360>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 800179c:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 80017a0:	f04f 0200 	mov.w	r2, #0
 80017a4:	f04f 0300 	mov.w	r3, #0
 80017a8:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 80017ac:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	4bb3      	ldr	r3, [pc, #716]	; (8001a84 <main+0x36c>)
 80017b6:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 80017ba:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017c6:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 80017ca:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80017ce:	213c      	movs	r1, #60	; 0x3c
 80017d0:	2010      	movs	r0, #16
 80017d2:	f7ff f9cb 	bl	8000b6c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80017d6:	2130      	movs	r1, #48	; 0x30
 80017d8:	2011      	movs	r0, #17
 80017da:	f7ff f9c7 	bl	8000b6c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80017de:	2104      	movs	r1, #4
 80017e0:	2013      	movs	r0, #19
 80017e2:	f7ff f9c3 	bl	8000b6c <LG2_Write_Register>

	HAL_Delay(3000);
 80017e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017ea:	f002 fb6f 	bl	8003ecc <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80017ee:	21bf      	movs	r1, #191	; 0xbf
 80017f0:	201c      	movs	r0, #28
 80017f2:	f7ff f967 	bl	8000ac4 <HG2_Write_Register>
	HAL_Delay(2);
 80017f6:	2002      	movs	r0, #2
 80017f8:	f002 fb68 	bl	8003ecc <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80017fc:	2158      	movs	r1, #88	; 0x58
 80017fe:	201b      	movs	r0, #27
 8001800:	f7ff f960 	bl	8000ac4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001804:	21d8      	movs	r1, #216	; 0xd8
 8001806:	201b      	movs	r0, #27
 8001808:	f7ff f95c 	bl	8000ac4 <HG2_Write_Register>

	float rotZ = 0;
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 8001814:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 8001824:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 800182e:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001838:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 800183a:	2300      	movs	r3, #0
 800183c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001840:	e02e      	b.n	80018a0 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 8001842:	f7ff f9bb 	bl	8000bbc <LG2_Get_Gyro_X>
 8001846:	eeb0 7a40 	vmov.f32	s14, s0
 800184a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800184e:	edd3 7a00 	vldr	s15, [r3]
 8001852:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001856:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800185a:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800185e:	f7ff f9dd 	bl	8000c1c <LG2_Get_Gyro_Y>
 8001862:	eeb0 7a40 	vmov.f32	s14, s0
 8001866:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800186a:	edd3 7a00 	vldr	s15, [r3]
 800186e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001872:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001876:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 800187a:	f7ff fa01 	bl	8000c80 <LG2_Get_Gyro_Z>
 800187e:	eeb0 7a40 	vmov.f32	s14, s0
 8001882:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001886:	edd3 7a00 	vldr	s15, [r3]
 800188a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800188e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001892:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001896:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 800189a:	3301      	adds	r3, #1
 800189c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80018a0:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 80018a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018a8:	dbcb      	blt.n	8001842 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80018aa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80018ae:	ed93 7a00 	vldr	s14, [r3]
 80018b2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001a88 <main+0x370>
 80018b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ba:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80018be:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80018c2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80018c6:	ed93 7a00 	vldr	s14, [r3]
 80018ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001a88 <main+0x370>
 80018ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018d2:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 80018d6:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80018da:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001a88 <main+0x370>
 80018e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ea:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80018ee:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2101      	movs	r1, #1
 80018f6:	4865      	ldr	r0, [pc, #404]	; (8001a8c <main+0x374>)
 80018f8:	f006 fd9a 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018fc:	20c8      	movs	r0, #200	; 0xc8
 80018fe:	f002 fae5 	bl	8003ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	4861      	ldr	r0, [pc, #388]	; (8001a8c <main+0x374>)
 8001908:	f006 fd92 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800190c:	20c8      	movs	r0, #200	; 0xc8
 800190e:	f002 fadd 	bl	8003ecc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	2101      	movs	r1, #1
 8001916:	485d      	ldr	r0, [pc, #372]	; (8001a8c <main+0x374>)
 8001918:	f006 fd8a 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800191c:	20c8      	movs	r0, #200	; 0xc8
 800191e:	f002 fad5 	bl	8003ecc <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001922:	2201      	movs	r2, #1
 8001924:	2104      	movs	r1, #4
 8001926:	485a      	ldr	r0, [pc, #360]	; (8001a90 <main+0x378>)
 8001928:	f006 fd82 	bl	8008430 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800192c:	2201      	movs	r2, #1
 800192e:	2108      	movs	r1, #8
 8001930:	4857      	ldr	r0, [pc, #348]	; (8001a90 <main+0x378>)
 8001932:	f006 fd7d 	bl	8008430 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001936:	2100      	movs	r1, #0
 8001938:	4856      	ldr	r0, [pc, #344]	; (8001a94 <main+0x37c>)
 800193a:	f00e f839 	bl	800f9b0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800193e:	2104      	movs	r1, #4
 8001940:	4854      	ldr	r0, [pc, #336]	; (8001a94 <main+0x37c>)
 8001942:	f00e f835 	bl	800f9b0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001946:	2108      	movs	r1, #8
 8001948:	4852      	ldr	r0, [pc, #328]	; (8001a94 <main+0x37c>)
 800194a:	f00e f831 	bl	800f9b0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800194e:	210c      	movs	r1, #12
 8001950:	4850      	ldr	r0, [pc, #320]	; (8001a94 <main+0x37c>)
 8001952:	f00e f82d 	bl	800f9b0 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001956:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001a98 <main+0x380>
 800195a:	2001      	movs	r0, #1
 800195c:	f7ff f9c8 	bl	8000cf0 <setServo>
    setServo(2, 180);
 8001960:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8001a9c <main+0x384>
 8001964:	2002      	movs	r0, #2
 8001966:	f7ff f9c3 	bl	8000cf0 <setServo>
    setServo(3, 0);
 800196a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001aa0 <main+0x388>
 800196e:	2003      	movs	r0, #3
 8001970:	f7ff f9be 	bl	8000cf0 <setServo>
    setServo(4, 45);
 8001974:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001aa4 <main+0x38c>
 8001978:	2004      	movs	r0, #4
 800197a:	f7ff f9b9 	bl	8000cf0 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 800197e:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <main+0x390>)
 8001980:	f7ff fcc8 	bl	8001314 <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 8001996:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800199a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 80019a8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80019ac:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	3304      	adds	r3, #4
 80019b6:	22f6      	movs	r2, #246	; 0xf6
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f016 fd11 	bl	80183e2 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 80019c6:	2332      	movs	r3, #50	; 0x32
 80019c8:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 80019d2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80019d6:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <main+0x394>)
 80019dc:	4634      	mov	r4, r6
 80019de:	461d      	mov	r5, r3
 80019e0:	6828      	ldr	r0, [r5, #0]
 80019e2:	6869      	ldr	r1, [r5, #4]
 80019e4:	68aa      	ldr	r2, [r5, #8]
 80019e6:	68eb      	ldr	r3, [r5, #12]
 80019e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ea:	7c2b      	ldrb	r3, [r5, #16]
 80019ec:	7023      	strb	r3, [r4, #0]
 80019ee:	f106 0311 	add.w	r3, r6, #17
 80019f2:	2221      	movs	r2, #33	; 0x21
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f016 fcf3 	bl	80183e2 <memset>
  uint32_t previousTime = HAL_GetTick();
 80019fc:	f002 fa5a 	bl	8003eb4 <HAL_GetTick>
 8001a00:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 8001a04:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fd69 	bl	80014e0 <disarm>
  LoRA_begin(868000000);
 8001a0e:	4826      	ldr	r0, [pc, #152]	; (8001aa8 <main+0x390>)
 8001a10:	f7ff fc80 	bl	8001314 <LoRA_begin>
		  CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
	  }
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 8001a14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a18:	4925      	ldr	r1, [pc, #148]	; (8001ab0 <main+0x398>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fc78 	bl	8000310 <strcmp>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f040 809c 	bne.w	8001b60 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001a28:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a2c:	21fa      	movs	r1, #250	; 0xfa
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fdba 	bl	80015a8 <recv_packet>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8080 	beq.w	8001b3c <main+0x424>
      {
    	  have_recieved_anything = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 8001a42:	f002 fa37 	bl	8003eb4 <HAL_GetTick>
 8001a46:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001a4a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001a4e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001a52:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <main+0x39c>)
 8001a54:	4618      	mov	r0, r3
 8001a56:	f016 fc53 	bl	8018300 <siscanf>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d12b      	bne.n	8001ab8 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001a60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001a64:	4a11      	ldr	r2, [pc, #68]	; (8001aac <main+0x394>)
 8001a66:	461c      	mov	r4, r3
 8001a68:	4615      	mov	r5, r2
 8001a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	7023      	strb	r3, [r4, #0]
 8001a72:	e166      	b.n	8001d42 <main+0x62a>
 8001a74:	f3af 8000 	nop.w
 8001a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a7c:	3f50624d 	.word	0x3f50624d
 8001a80:	0801c3c4 	.word	0x0801c3c4
 8001a84:	3ff00000 	.word	0x3ff00000
 8001a88:	43fa0000 	.word	0x43fa0000
 8001a8c:	58020c00 	.word	0x58020c00
 8001a90:	58021800 	.word	0x58021800
 8001a94:	240012e0 	.word	0x240012e0
 8001a98:	42b40000 	.word	0x42b40000
 8001a9c:	43340000 	.word	0x43340000
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	42340000 	.word	0x42340000
 8001aa8:	33bca100 	.word	0x33bca100
 8001aac:	0801c36c 	.word	0x0801c36c
 8001ab0:	0801c350 	.word	0x0801c350
 8001ab4:	0801c364 	.word	0x0801c364
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001ab8:	f607 1228 	addw	r2, r7, #2344	; 0x928
 8001abc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001ac0:	49ab      	ldr	r1, [pc, #684]	; (8001d70 <main+0x658>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f016 fc1c 	bl	8018300 <siscanf>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10b      	bne.n	8001ae6 <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 8001ace:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ad2:	4aa8      	ldr	r2, [pc, #672]	; (8001d74 <main+0x65c>)
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ada:	c407      	stmia	r4!, {r0, r1, r2}
 8001adc:	8023      	strh	r3, [r4, #0]
 8001ade:	3402      	adds	r4, #2
 8001ae0:	0c1b      	lsrs	r3, r3, #16
 8001ae2:	7023      	strb	r3, [r4, #0]
 8001ae4:	e12d      	b.n	8001d42 <main+0x62a>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001ae6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8001aea:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fc0d 	bl	8000310 <strcmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 8001afc:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fcc3 	bl	800148c <LoRA_sendPacket>
 8001b06:	e11c      	b.n	8001d42 <main+0x62a>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 8001b08:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8001b0c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f016 fce5 	bl	80184e2 <strcpy>
          LoRA_sendPacket(recieved_packet);
 8001b18:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fcb5 	bl	800148c <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001b22:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fc52 	bl	80003d0 <strlen>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f015 f86f 	bl	8016c18 <CDC_Transmit_HS>
 8001b3a:	e102      	b.n	8001d42 <main+0x62a>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 8001b3c:	f002 f9ba 	bl	8003eb4 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b4c:	f240 80f9 	bls.w	8001d42 <main+0x62a>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001b50:	f002 f9b0 	bl	8003eb4 <HAL_GetTick>
 8001b54:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        LoRA_sendPacket("$");
 8001b58:	4887      	ldr	r0, [pc, #540]	; (8001d78 <main+0x660>)
 8001b5a:	f7ff fc97 	bl	800148c <LoRA_sendPacket>
 8001b5e:	e0f0      	b.n	8001d42 <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001b60:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001b64:	4985      	ldr	r1, [pc, #532]	; (8001d7c <main+0x664>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fbd2 	bl	8000310 <strcmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d14a      	bne.n	8001c08 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001b72:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b76:	21fa      	movs	r1, #250	; 0xfa
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fd15 	bl	80015a8 <recv_packet>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d025      	beq.n	8001bd0 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 8001b84:	f002 f996 	bl	8003eb4 <HAL_GetTick>
 8001b88:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 8001b8c:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001b90:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001b94:	497a      	ldr	r1, [pc, #488]	; (8001d80 <main+0x668>)
 8001b96:	4618      	mov	r0, r3
 8001b98:	f016 fbb2 	bl	8018300 <siscanf>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d109      	bne.n	8001bb6 <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001ba2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001ba6:	4a77      	ldr	r2, [pc, #476]	; (8001d84 <main+0x66c>)
 8001ba8:	461c      	mov	r4, r3
 8001baa:	4615      	mov	r5, r2
 8001bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bb0:	682b      	ldr	r3, [r5, #0]
 8001bb2:	7023      	strb	r3, [r4, #0]
 8001bb4:	e0c5      	b.n	8001d42 <main+0x62a>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001bb6:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc08 	bl	80003d0 <strlen>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f015 f825 	bl	8016c18 <CDC_Transmit_HS>
 8001bce:	e0b8      	b.n	8001d42 <main+0x62a>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001bd0:	f002 f970 	bl	8003eb4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001be0:	f240 80af 	bls.w	8001d42 <main+0x62a>
      {
        previousTime = HAL_GetTick();
 8001be4:	f002 f966 	bl	8003eb4 <HAL_GetTick>
 8001be8:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 8001bec:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001bf0:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001bf4:	495e      	ldr	r1, [pc, #376]	; (8001d70 <main+0x658>)
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f016 fb62 	bl	80182c0 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001bfc:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc43 	bl	800148c <LoRA_sendPacket>
 8001c06:	e09c      	b.n	8001d42 <main+0x62a>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 8001c08:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c0c:	4959      	ldr	r1, [pc, #356]	; (8001d74 <main+0x65c>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fb7e 	bl	8000310 <strcmp>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d126      	bne.n	8001c68 <main+0x550>
    {
      if(max_packet_count == 0)
 8001c1a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001c1e:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d113      	bne.n	8001c50 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001c28:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <main+0x670>)
 8001c2e:	461c      	mov	r4, r3
 8001c30:	4615      	mov	r5, r2
 8001c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c36:	682b      	ldr	r3, [r5, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	8022      	strh	r2, [r4, #0]
 8001c3c:	3402      	adds	r4, #2
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 8001c48:	484b      	ldr	r0, [pc, #300]	; (8001d78 <main+0x660>)
 8001c4a:	f7ff fc1f 	bl	800148c <LoRA_sendPacket>
 8001c4e:	e078      	b.n	8001d42 <main+0x62a>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001c50:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001c54:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	1e5a      	subs	r2, r3, #1
 8001c5c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001c60:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	e06c      	b.n	8001d42 <main+0x62a>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001c68:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001c6c:	4945      	ldr	r1, [pc, #276]	; (8001d84 <main+0x66c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fb4e 	bl	8000310 <strcmp>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d163      	bne.n	8001d42 <main+0x62a>
    {
	  	 CDC_Transmit_HS(state, strlen(state));
 8001c7a:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fba6 	bl	80003d0 <strlen>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f014 ffc3 	bl	8016c18 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	usbReceiveHandle(input);
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fd19 	bl	80016cc <usbReceiveHandle>

    	while(!usbReceiveHandle(input))
 8001c9a:	bf00      	nop
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fd14 	bl	80016cc <usbReceiveHandle>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f8      	beq.n	8001c9c <main+0x584>
    	{}

      reliable_send_packet(input);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fcaa 	bl	8001606 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "Debug: %s\n", input);
 8001cb2:	1d3a      	adds	r2, r7, #4
 8001cb4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cb8:	4934      	ldr	r1, [pc, #208]	; (8001d8c <main+0x674>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f016 fb00 	bl	80182c0 <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001cc0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fb83 	bl	80003d0 <strlen>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f014 ffa0 	bl	8016c18 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	492d      	ldr	r1, [pc, #180]	; (8001d90 <main+0x678>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fb17 	bl	8000310 <strcmp>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d116      	bne.n	8001d16 <main+0x5fe>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 8001ce8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001cec:	4a23      	ldr	r2, [pc, #140]	; (8001d7c <main+0x664>)
 8001cee:	461c      	mov	r4, r3
 8001cf0:	4615      	mov	r5, r2
 8001cf2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 8001cfa:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001cfe:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 8001d02:	491b      	ldr	r1, [pc, #108]	; (8001d70 <main+0x658>)
 8001d04:	4618      	mov	r0, r3
 8001d06:	f016 fadb 	bl	80182c0 <siprintf>
        LoRA_sendPacket(sendMessage);
 8001d0a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fbbc 	bl	800148c <LoRA_sendPacket>
 8001d14:	e015      	b.n	8001d42 <main+0x62a>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 8001d16:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001d1a:	4a1b      	ldr	r2, [pc, #108]	; (8001d88 <main+0x670>)
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4615      	mov	r5, r2
 8001d20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d24:	682b      	ldr	r3, [r5, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	8022      	strh	r2, [r4, #0]
 8001d2a:	3402      	adds	r4, #2
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 8001d36:	2064      	movs	r0, #100	; 0x64
 8001d38:	f002 f8c8 	bl	8003ecc <HAL_Delay>
        LoRA_sendPacket("$");
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <main+0x660>)
 8001d3e:	f7ff fba5 	bl	800148c <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001d42:	f002 f8b7 	bl	8003eb4 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d56:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001d94 <main+0x67c>
 8001d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d5e:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001d62:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001d66:	f002 f8a5 	bl	8003eb4 <HAL_GetTick>
 8001d6a:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001d6e:	e651      	b.n	8001a14 <main+0x2fc>
 8001d70:	0801c380 	.word	0x0801c380
 8001d74:	0801c388 	.word	0x0801c388
 8001d78:	0801c398 	.word	0x0801c398
 8001d7c:	0801c39c 	.word	0x0801c39c
 8001d80:	0801c364 	.word	0x0801c364
 8001d84:	0801c36c 	.word	0x0801c36c
 8001d88:	0801c350 	.word	0x0801c350
 8001d8c:	0801c3b0 	.word	0x0801c3b0
 8001d90:	0801c3bc 	.word	0x0801c3bc
 8001d94:	447a0000 	.word	0x447a0000

08001d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b09c      	sub	sp, #112	; 0x70
 8001d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	224c      	movs	r2, #76	; 0x4c
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f016 fb1b 	bl	80183e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2220      	movs	r2, #32
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f016 fb15 	bl	80183e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001db8:	2002      	movs	r0, #2
 8001dba:	f007 ff4d 	bl	8009c58 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	603b      	str	r3, [r7, #0]
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <SystemClock_Config+0xec>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001dca:	4a2e      	ldr	r2, [pc, #184]	; (8001e84 <SystemClock_Config+0xec>)
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd0:	6193      	str	r3, [r2, #24]
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <SystemClock_Config+0xec>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dda:	603b      	str	r3, [r7, #0]
 8001ddc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dde:	bf00      	nop
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemClock_Config+0xec>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dec:	d1f8      	bne.n	8001de0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001dee:	2322      	movs	r3, #34	; 0x22
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001df2:	2301      	movs	r3, #1
 8001df4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001df6:	2340      	movs	r3, #64	; 0x40
 8001df8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e02:	2300      	movs	r3, #0
 8001e04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001e12:	230c      	movs	r3, #12
 8001e14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e1a:	230c      	movs	r3, #12
 8001e1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f007 ff5e 	bl	8009cec <HAL_RCC_OscConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001e36:	f000 ff1b 	bl	8002c70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3a:	233f      	movs	r3, #63	; 0x3f
 8001e3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e46:	2308      	movs	r3, #8
 8001e48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e4a:	2340      	movs	r3, #64	; 0x40
 8001e4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e4e:	2340      	movs	r3, #64	; 0x40
 8001e50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e56:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e58:	2340      	movs	r3, #64	; 0x40
 8001e5a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f008 fb1d 	bl	800a4a0 <HAL_RCC_ClockConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001e6c:	f000 ff00 	bl	8002c70 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001e70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001e74:	2100      	movs	r1, #0
 8001e76:	2000      	movs	r0, #0
 8001e78:	f008 fcc8 	bl	800a80c <HAL_RCC_MCOConfig>
}
 8001e7c:	bf00      	nop
 8001e7e:	3770      	adds	r7, #112	; 0x70
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024800 	.word	0x58024800

08001e88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ae      	sub	sp, #184	; 0xb8
 8001e8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8e:	463b      	mov	r3, r7
 8001e90:	22b8      	movs	r2, #184	; 0xb8
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f016 faa4 	bl	80183e2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001e9a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001eaa:	230c      	movs	r3, #12
 8001eac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001eae:	2304      	movs	r3, #4
 8001eb0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f008 fed9 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001ee0:	f000 fec6 	bl	8002c70 <Error_Handler>
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	37b8      	adds	r7, #184	; 0xb8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001efe:	463b      	mov	r3, r7
 8001f00:	2224      	movs	r2, #36	; 0x24
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f016 fa6c 	bl	80183e2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f0c:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <MX_ADC1_Init+0xe8>)
 8001f0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f12:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001f16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f24:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f26:	2204      	movs	r2, #4
 8001f28:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f44:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f4a:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f6a:	4819      	ldr	r0, [pc, #100]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f6c:	f002 fa2e 	bl	80043cc <HAL_ADC_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001f76:	f000 fe7b 	bl	8002c70 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f82:	4619      	mov	r1, r3
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001f86:	f003 fa69 	bl	800545c <HAL_ADCEx_MultiModeConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001f90:	f000 fe6e 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_ADC1_Init+0xec>)
 8001f96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f98:	2306      	movs	r3, #6
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fa0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001fa4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001fa6:	2304      	movs	r3, #4
 8001fa8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fb4:	463b      	mov	r3, r7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <MX_ADC1_Init+0xe4>)
 8001fba:	f002 fc0f 	bl	80047dc <HAL_ADC_ConfigChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001fc4:	f000 fe54 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fc8:	bf00      	nop
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	24000d70 	.word	0x24000d70
 8001fd4:	40022000 	.word	0x40022000
 8001fd8:	2a000400 	.word	0x2a000400

08001fdc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b08a      	sub	sp, #40	; 0x28
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2224      	movs	r2, #36	; 0x24
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f016 f9fa 	bl	80183e2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001fee:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <MX_ADC3_Init+0xd0>)
 8001ff0:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <MX_ADC3_Init+0xd4>)
 8001ff2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <MX_ADC3_Init+0xd0>)
 8001ff6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001ffa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MX_ADC3_Init+0xd0>)
 8001ffe:	2208      	movs	r2, #8
 8002000:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002008:	4b28      	ldr	r3, [pc, #160]	; (80020ac <MX_ADC3_Init+0xd0>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002010:	2204      	movs	r2, #4
 8002012:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002014:	4b25      	ldr	r3, [pc, #148]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002016:	2200      	movs	r2, #0
 8002018:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <MX_ADC3_Init+0xd0>)
 800201c:	2200      	movs	r2, #0
 800201e:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8002020:	4b22      	ldr	r3, [pc, #136]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002022:	2201      	movs	r2, #1
 8002024:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800202e:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <MX_ADC3_Init+0xd0>)
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002042:	4b1a      	ldr	r3, [pc, #104]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002044:	2200      	movs	r2, #0
 8002046:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <MX_ADC3_Init+0xd0>)
 800204a:	2200      	movs	r2, #0
 800204c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002050:	2200      	movs	r2, #0
 8002052:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002054:	4b15      	ldr	r3, [pc, #84]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <MX_ADC3_Init+0xd0>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002062:	4812      	ldr	r0, [pc, #72]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002064:	f002 f9b2 	bl	80043cc <HAL_ADC_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800206e:	f000 fdff 	bl	8002c70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <MX_ADC3_Init+0xd8>)
 8002074:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002076:	2306      	movs	r3, #6
 8002078:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800207e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002082:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002084:	2304      	movs	r3, #4
 8002086:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_ADC3_Init+0xd0>)
 8002096:	f002 fba1 	bl	80047dc <HAL_ADC_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80020a0:	f000 fde6 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3728      	adds	r7, #40	; 0x28
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	24000de0 	.word	0x24000de0
 80020b0:	58026000 	.word	0x58026000
 80020b4:	04300002 	.word	0x04300002

080020b8 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020be:	4a2f      	ldr	r2, [pc, #188]	; (800217c <MX_FDCAN3_Init+0xc4>)
 80020c0:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020dc:	2200      	movs	r2, #0
 80020de:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 80020e0:	4b25      	ldr	r3, [pc, #148]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020e2:	2210      	movs	r2, #16
 80020e4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80020ec:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020ee:	2202      	movs	r2, #2
 80020f0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80020f2:	4b21      	ldr	r3, [pc, #132]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020f4:	2202      	movs	r2, #2
 80020f6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002100:	2201      	movs	r2, #1
 8002102:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002106:	2201      	movs	r2, #1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800210c:	2201      	movs	r2, #1
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002112:	2200      	movs	r2, #0
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002118:	2200      	movs	r2, #0
 800211a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800211e:	2200      	movs	r2, #0
 8002120:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800212a:	2204      	movs	r2, #4
 800212c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002130:	2200      	movs	r2, #0
 8002132:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002136:	2204      	movs	r2, #4
 8002138:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800213c:	2200      	movs	r2, #0
 800213e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002142:	2204      	movs	r2, #4
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002148:	2200      	movs	r2, #0
 800214a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800214e:	2200      	movs	r2, #0
 8002150:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002154:	2200      	movs	r2, #0
 8002156:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002158:	4b07      	ldr	r3, [pc, #28]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 800215a:	2200      	movs	r2, #0
 800215c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002160:	2204      	movs	r2, #4
 8002162:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <MX_FDCAN3_Init+0xc0>)
 8002166:	f005 fc3f 	bl	80079e8 <HAL_FDCAN_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8002170:	f000 fd7e 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	24000f40 	.word	0x24000f40
 800217c:	4000d400 	.word	0x4000d400

08002180 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002184:	4b1b      	ldr	r3, [pc, #108]	; (80021f4 <MX_I2C2_Init+0x74>)
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <MX_I2C2_Init+0x78>)
 8002188:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <MX_I2C2_Init+0x74>)
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <MX_I2C2_Init+0x7c>)
 800218e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002190:	4b18      	ldr	r3, [pc, #96]	; (80021f4 <MX_I2C2_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <MX_I2C2_Init+0x74>)
 8002198:	2201      	movs	r2, #1
 800219a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <MX_I2C2_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021a2:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021ba:	480e      	ldr	r0, [pc, #56]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021bc:	f006 f952 	bl	8008464 <HAL_I2C_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80021c6:	f000 fd53 	bl	8002c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ca:	2100      	movs	r1, #0
 80021cc:	4809      	ldr	r0, [pc, #36]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021ce:	f006 f9f3 	bl	80085b8 <HAL_I2CEx_ConfigAnalogFilter>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80021d8:	f000 fd4a 	bl	8002c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80021dc:	2100      	movs	r1, #0
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_I2C2_Init+0x74>)
 80021e0:	f006 fa35 	bl	800864e <HAL_I2CEx_ConfigDigitalFilter>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f000 fd41 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	24000fe0 	.word	0x24000fe0
 80021f8:	40005800 	.word	0x40005800
 80021fc:	20303e5d 	.word	0x20303e5d

08002200 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <MX_SDMMC2_SD_Init+0x38>)
 8002208:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 8002218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800221c:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002224:	4b03      	ldr	r3, [pc, #12]	; (8002234 <MX_SDMMC2_SD_Init+0x34>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	24001034 	.word	0x24001034
 8002238:	48022400 	.word	0x48022400

0800223c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <MX_SPI1_Init+0xa8>)
 8002244:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002246:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002248:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800224c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002254:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002256:	2207      	movs	r2, #7
 8002258:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800225a:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <MX_SPI1_Init+0xa4>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002260:	4b1f      	ldr	r3, [pc, #124]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002266:	4b1e      	ldr	r3, [pc, #120]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002268:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800226c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002270:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002274:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002278:	2200      	movs	r2, #0
 800227a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800227c:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_SPI1_Init+0xa4>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002282:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002284:	2200      	movs	r2, #0
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <MX_SPI1_Init+0xa4>)
 800228a:	2200      	movs	r2, #0
 800228c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800228e:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002290:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <MX_SPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800229c:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <MX_SPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022a8:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022ae:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022b4:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022ba:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022c0:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022cc:	4804      	ldr	r0, [pc, #16]	; (80022e0 <MX_SPI1_Init+0xa4>)
 80022ce:	f00c fd27 	bl	800ed20 <HAL_SPI_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80022d8:	f000 fcca 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	240010b0 	.word	0x240010b0
 80022e4:	40013000 	.word	0x40013000

080022e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <MX_SPI2_Init+0xa4>)
 80022ee:	4a28      	ldr	r2, [pc, #160]	; (8002390 <MX_SPI2_Init+0xa8>)
 80022f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <MX_SPI2_Init+0xa4>)
 80022f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80022f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022fa:	4b24      	ldr	r3, [pc, #144]	; (800238c <MX_SPI2_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <MX_SPI2_Init+0xa4>)
 8002302:	2207      	movs	r2, #7
 8002304:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <MX_SPI2_Init+0xa4>)
 8002308:	2200      	movs	r2, #0
 800230a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800230c:	4b1f      	ldr	r3, [pc, #124]	; (800238c <MX_SPI2_Init+0xa4>)
 800230e:	2200      	movs	r2, #0
 8002310:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002312:	4b1e      	ldr	r3, [pc, #120]	; (800238c <MX_SPI2_Init+0xa4>)
 8002314:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002318:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <MX_SPI2_Init+0xa4>)
 800231c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002320:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <MX_SPI2_Init+0xa4>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002328:	4b18      	ldr	r3, [pc, #96]	; (800238c <MX_SPI2_Init+0xa4>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232e:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_SPI2_Init+0xa4>)
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002334:	4b15      	ldr	r3, [pc, #84]	; (800238c <MX_SPI2_Init+0xa4>)
 8002336:	2200      	movs	r2, #0
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_SPI2_Init+0xa4>)
 800233c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002340:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002342:	4b12      	ldr	r3, [pc, #72]	; (800238c <MX_SPI2_Init+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <MX_SPI2_Init+0xa4>)
 800234a:	2200      	movs	r2, #0
 800234c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800234e:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_SPI2_Init+0xa4>)
 8002350:	2200      	movs	r2, #0
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <MX_SPI2_Init+0xa4>)
 8002356:	2200      	movs	r2, #0
 8002358:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_SPI2_Init+0xa4>)
 800235c:	2200      	movs	r2, #0
 800235e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <MX_SPI2_Init+0xa4>)
 8002362:	2200      	movs	r2, #0
 8002364:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_SPI2_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800236c:	4b07      	ldr	r3, [pc, #28]	; (800238c <MX_SPI2_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002372:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_SPI2_Init+0xa4>)
 8002374:	2200      	movs	r2, #0
 8002376:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002378:	4804      	ldr	r0, [pc, #16]	; (800238c <MX_SPI2_Init+0xa4>)
 800237a:	f00c fcd1 	bl	800ed20 <HAL_SPI_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002384:	f000 fc74 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}
 800238c:	24001138 	.word	0x24001138
 8002390:	40003800 	.word	0x40003800

08002394 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <MX_SPI3_Init+0xa4>)
 800239a:	4a28      	ldr	r2, [pc, #160]	; (800243c <MX_SPI3_Init+0xa8>)
 800239c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800239e:	4b26      	ldr	r3, [pc, #152]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ac:	4b22      	ldr	r3, [pc, #136]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023ae:	2207      	movs	r2, #7
 80023b0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023c0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023c4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023c8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80023cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023da:	4b17      	ldr	r3, [pc, #92]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023ec:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80023ee:	4b12      	ldr	r3, [pc, #72]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80023fa:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_SPI3_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <MX_SPI3_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_SPI3_Init+0xa4>)
 8002408:	2200      	movs	r2, #0
 800240a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <MX_SPI3_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_SPI3_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <MX_SPI3_Init+0xa4>)
 800241a:	2200      	movs	r2, #0
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_SPI3_Init+0xa4>)
 8002420:	2200      	movs	r2, #0
 8002422:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002424:	4804      	ldr	r0, [pc, #16]	; (8002438 <MX_SPI3_Init+0xa4>)
 8002426:	f00c fc7b 	bl	800ed20 <HAL_SPI_Init>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002430:	f000 fc1e 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	240011c0 	.word	0x240011c0
 800243c:	40003c00 	.word	0x40003c00

08002440 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	; 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	f107 031c 	add.w	r3, r7, #28
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002452:	463b      	mov	r3, r7
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
 8002460:	615a      	str	r2, [r3, #20]
 8002462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <MX_TIM2_Init+0xac>)
 8002466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800246a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800246c:	4b1f      	ldr	r3, [pc, #124]	; (80024ec <MX_TIM2_Init+0xac>)
 800246e:	2200      	movs	r2, #0
 8002470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002472:	4b1e      	ldr	r3, [pc, #120]	; (80024ec <MX_TIM2_Init+0xac>)
 8002474:	2200      	movs	r2, #0
 8002476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002478:	4b1c      	ldr	r3, [pc, #112]	; (80024ec <MX_TIM2_Init+0xac>)
 800247a:	225a      	movs	r2, #90	; 0x5a
 800247c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM2_Init+0xac>)
 8002480:	2200      	movs	r2, #0
 8002482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <MX_TIM2_Init+0xac>)
 8002486:	2200      	movs	r2, #0
 8002488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800248a:	4818      	ldr	r0, [pc, #96]	; (80024ec <MX_TIM2_Init+0xac>)
 800248c:	f00d fa38 	bl	800f900 <HAL_TIM_PWM_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002496:	f000 fbeb 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4810      	ldr	r0, [pc, #64]	; (80024ec <MX_TIM2_Init+0xac>)
 80024aa:	f00e fcbf 	bl	8010e2c <HAL_TIMEx_MasterConfigSynchronization>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80024b4:	f000 fbdc 	bl	8002c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024b8:	2360      	movs	r3, #96	; 0x60
 80024ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80024bc:	2300      	movs	r3, #0
 80024be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	2208      	movs	r2, #8
 80024cc:	4619      	mov	r1, r3
 80024ce:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM2_Init+0xac>)
 80024d0:	f00d fede 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80024da:	f000 fbc9 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM2_Init+0xac>)
 80024e0:	f001 f8e4 	bl	80036ac <HAL_TIM_MspPostInit>

}
 80024e4:	bf00      	nop
 80024e6:	3728      	adds	r7, #40	; 0x28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	24001248 	.word	0x24001248

080024f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f6:	f107 031c 	add.w	r3, r7, #28
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002502:	463b      	mov	r3, r7
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
 8002510:	615a      	str	r2, [r3, #20]
 8002512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002516:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <MX_TIM3_Init+0xc4>)
 8002518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <MX_TIM3_Init+0xc0>)
 800251c:	2200      	movs	r2, #0
 800251e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002520:	4b23      	ldr	r3, [pc, #140]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002528:	225a      	movs	r2, #90	; 0x5a
 800252a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800252c:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <MX_TIM3_Init+0xc0>)
 800252e:	2200      	movs	r2, #0
 8002530:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002532:	4b1f      	ldr	r3, [pc, #124]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002538:	481d      	ldr	r0, [pc, #116]	; (80025b0 <MX_TIM3_Init+0xc0>)
 800253a:	f00d f9e1 	bl	800f900 <HAL_TIM_PWM_Init>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002544:	f000 fb94 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	4816      	ldr	r0, [pc, #88]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002558:	f00e fc68 	bl	8010e2c <HAL_TIMEx_MasterConfigSynchronization>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002562:	f000 fb85 	bl	8002c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002566:	2360      	movs	r3, #96	; 0x60
 8002568:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	2200      	movs	r2, #0
 800257a:	4619      	mov	r1, r3
 800257c:	480c      	ldr	r0, [pc, #48]	; (80025b0 <MX_TIM3_Init+0xc0>)
 800257e:	f00d fe87 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002588:	f000 fb72 	bl	8002c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800258c:	463b      	mov	r3, r7
 800258e:	2204      	movs	r2, #4
 8002590:	4619      	mov	r1, r3
 8002592:	4807      	ldr	r0, [pc, #28]	; (80025b0 <MX_TIM3_Init+0xc0>)
 8002594:	f00d fe7c 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800259e:	f000 fb67 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <MX_TIM3_Init+0xc0>)
 80025a4:	f001 f882 	bl	80036ac <HAL_TIM_MspPostInit>

}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	; 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	24001294 	.word	0x24001294
 80025b4:	40000400 	.word	0x40000400

080025b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	; 0x28
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ca:	463b      	mov	r3, r7
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
 80025d8:	615a      	str	r2, [r3, #20]
 80025da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80025dc:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025de:	4a33      	ldr	r2, [pc, #204]	; (80026ac <MX_TIM4_Init+0xf4>)
 80025e0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025e4:	221c      	movs	r2, #28
 80025e6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e8:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80025ee:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80025f4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f6:	4b2c      	ldr	r3, [pc, #176]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <MX_TIM4_Init+0xf0>)
 80025fe:	2200      	movs	r2, #0
 8002600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002602:	4829      	ldr	r0, [pc, #164]	; (80026a8 <MX_TIM4_Init+0xf0>)
 8002604:	f00d f97c 	bl	800f900 <HAL_TIM_PWM_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800260e:	f000 fb2f 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002616:	2300      	movs	r3, #0
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	4619      	mov	r1, r3
 8002620:	4821      	ldr	r0, [pc, #132]	; (80026a8 <MX_TIM4_Init+0xf0>)
 8002622:	f00e fc03 	bl	8010e2c <HAL_TIMEx_MasterConfigSynchronization>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800262c:	f000 fb20 	bl	8002c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002630:	2360      	movs	r3, #96	; 0x60
 8002632:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002640:	463b      	mov	r3, r7
 8002642:	2200      	movs	r2, #0
 8002644:	4619      	mov	r1, r3
 8002646:	4818      	ldr	r0, [pc, #96]	; (80026a8 <MX_TIM4_Init+0xf0>)
 8002648:	f00d fe22 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002652:	f000 fb0d 	bl	8002c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002656:	463b      	mov	r3, r7
 8002658:	2204      	movs	r2, #4
 800265a:	4619      	mov	r1, r3
 800265c:	4812      	ldr	r0, [pc, #72]	; (80026a8 <MX_TIM4_Init+0xf0>)
 800265e:	f00d fe17 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002668:	f000 fb02 	bl	8002c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800266c:	463b      	mov	r3, r7
 800266e:	2208      	movs	r2, #8
 8002670:	4619      	mov	r1, r3
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <MX_TIM4_Init+0xf0>)
 8002674:	f00d fe0c 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800267e:	f000 faf7 	bl	8002c70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002682:	463b      	mov	r3, r7
 8002684:	220c      	movs	r2, #12
 8002686:	4619      	mov	r1, r3
 8002688:	4807      	ldr	r0, [pc, #28]	; (80026a8 <MX_TIM4_Init+0xf0>)
 800268a:	f00d fe01 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002694:	f000 faec 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002698:	4803      	ldr	r0, [pc, #12]	; (80026a8 <MX_TIM4_Init+0xf0>)
 800269a:	f001 f807 	bl	80036ac <HAL_TIM_MspPostInit>

}
 800269e:	bf00      	nop
 80026a0:	3728      	adds	r7, #40	; 0x28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	240012e0 	.word	0x240012e0
 80026ac:	40000800 	.word	0x40000800

080026b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08a      	sub	sp, #40	; 0x28
 80026b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <MX_TIM5_Init+0xac>)
 80026d6:	4a22      	ldr	r2, [pc, #136]	; (8002760 <MX_TIM5_Init+0xb0>)
 80026d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80026da:	4b20      	ldr	r3, [pc, #128]	; (800275c <MX_TIM5_Init+0xac>)
 80026dc:	2200      	movs	r2, #0
 80026de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <MX_TIM5_Init+0xac>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80026e6:	4b1d      	ldr	r3, [pc, #116]	; (800275c <MX_TIM5_Init+0xac>)
 80026e8:	225a      	movs	r2, #90	; 0x5a
 80026ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <MX_TIM5_Init+0xac>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f2:	4b1a      	ldr	r3, [pc, #104]	; (800275c <MX_TIM5_Init+0xac>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80026f8:	4818      	ldr	r0, [pc, #96]	; (800275c <MX_TIM5_Init+0xac>)
 80026fa:	f00d f901 	bl	800f900 <HAL_TIM_PWM_Init>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002704:	f000 fab4 	bl	8002c70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270c:	2300      	movs	r3, #0
 800270e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002710:	f107 031c 	add.w	r3, r7, #28
 8002714:	4619      	mov	r1, r3
 8002716:	4811      	ldr	r0, [pc, #68]	; (800275c <MX_TIM5_Init+0xac>)
 8002718:	f00e fb88 	bl	8010e2c <HAL_TIMEx_MasterConfigSynchronization>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002722:	f000 faa5 	bl	8002c70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002726:	2360      	movs	r3, #96	; 0x60
 8002728:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	220c      	movs	r2, #12
 800273a:	4619      	mov	r1, r3
 800273c:	4807      	ldr	r0, [pc, #28]	; (800275c <MX_TIM5_Init+0xac>)
 800273e:	f00d fda7 	bl	8010290 <HAL_TIM_PWM_ConfigChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002748:	f000 fa92 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800274c:	4803      	ldr	r0, [pc, #12]	; (800275c <MX_TIM5_Init+0xac>)
 800274e:	f000 ffad 	bl	80036ac <HAL_TIM_MspPostInit>

}
 8002752:	bf00      	nop
 8002754:	3728      	adds	r7, #40	; 0x28
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2400132c 	.word	0x2400132c
 8002760:	40000c00 	.word	0x40000c00

08002764 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <MX_TIM13_Init+0x40>)
 800276a:	4a0f      	ldr	r2, [pc, #60]	; (80027a8 <MX_TIM13_Init+0x44>)
 800276c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800276e:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <MX_TIM13_Init+0x40>)
 8002770:	225f      	movs	r2, #95	; 0x5f
 8002772:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MX_TIM13_Init+0x40>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <MX_TIM13_Init+0x40>)
 800277c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002780:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <MX_TIM13_Init+0x40>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <MX_TIM13_Init+0x40>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <MX_TIM13_Init+0x40>)
 8002790:	f00d f85f 	bl	800f852 <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800279a:	f000 fa69 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	24001378 	.word	0x24001378
 80027a8:	40001c00 	.word	0x40001c00

080027ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027b0:	4b22      	ldr	r3, [pc, #136]	; (800283c <MX_UART4_Init+0x90>)
 80027b2:	4a23      	ldr	r2, [pc, #140]	; (8002840 <MX_UART4_Init+0x94>)
 80027b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027b6:	4b21      	ldr	r3, [pc, #132]	; (800283c <MX_UART4_Init+0x90>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <MX_UART4_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b1d      	ldr	r3, [pc, #116]	; (800283c <MX_UART4_Init+0x90>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <MX_UART4_Init+0x90>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <MX_UART4_Init+0x90>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b19      	ldr	r3, [pc, #100]	; (800283c <MX_UART4_Init+0x90>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b17      	ldr	r3, [pc, #92]	; (800283c <MX_UART4_Init+0x90>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027e2:	4b16      	ldr	r3, [pc, #88]	; (800283c <MX_UART4_Init+0x90>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <MX_UART4_Init+0x90>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <MX_UART4_Init+0x90>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80027f4:	4811      	ldr	r0, [pc, #68]	; (800283c <MX_UART4_Init+0x90>)
 80027f6:	f00e fbd3 	bl	8010fa0 <HAL_UART_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002800:	f000 fa36 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002804:	2100      	movs	r1, #0
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <MX_UART4_Init+0x90>)
 8002808:	f00f fcd9 	bl	80121be <HAL_UARTEx_SetTxFifoThreshold>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002812:	f000 fa2d 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002816:	2100      	movs	r1, #0
 8002818:	4808      	ldr	r0, [pc, #32]	; (800283c <MX_UART4_Init+0x90>)
 800281a:	f00f fd0e 	bl	801223a <HAL_UARTEx_SetRxFifoThreshold>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002824:	f000 fa24 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002828:	4804      	ldr	r0, [pc, #16]	; (800283c <MX_UART4_Init+0x90>)
 800282a:	f00f fc8f 	bl	801214c <HAL_UARTEx_DisableFifoMode>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002834:	f000 fa1c 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}
 800283c:	2400161c 	.word	0x2400161c
 8002840:	40004c00 	.word	0x40004c00

08002844 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002848:	4b22      	ldr	r3, [pc, #136]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 800284a:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <MX_USART6_UART_Init+0x94>)
 800284c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800284e:	4b21      	ldr	r3, [pc, #132]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002850:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002854:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002856:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800285c:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002862:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002868:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 800286a:	220c      	movs	r2, #12
 800286c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800286e:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002874:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 8002888:	2200      	movs	r2, #0
 800288a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800288c:	4811      	ldr	r0, [pc, #68]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 800288e:	f00e fb87 	bl	8010fa0 <HAL_UART_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002898:	f000 f9ea 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800289c:	2100      	movs	r1, #0
 800289e:	480d      	ldr	r0, [pc, #52]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 80028a0:	f00f fc8d 	bl	80121be <HAL_UARTEx_SetTxFifoThreshold>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80028aa:	f000 f9e1 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028ae:	2100      	movs	r1, #0
 80028b0:	4808      	ldr	r0, [pc, #32]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 80028b2:	f00f fcc2 	bl	801223a <HAL_UARTEx_SetRxFifoThreshold>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80028bc:	f000 f9d8 	bl	8002c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	; (80028d4 <MX_USART6_UART_Init+0x90>)
 80028c2:	f00f fc43 	bl	801214c <HAL_UARTEx_DisableFifoMode>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80028cc:	f000 f9d0 	bl	8002c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	240016b0 	.word	0x240016b0
 80028d8:	40011400 	.word	0x40011400

080028dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <MX_DMA_Init+0xbc>)
 80028e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028e8:	4a2b      	ldr	r2, [pc, #172]	; (8002998 <MX_DMA_Init+0xbc>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <MX_DMA_Init+0xbc>)
 80028f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	607b      	str	r3, [r7, #4]
 80028fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <MX_DMA_Init+0xbc>)
 8002902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <MX_DMA_Init+0xbc>)
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <MX_DMA_Init+0xbc>)
 8002912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	200b      	movs	r0, #11
 8002924:	f002 ff57 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002928:	200b      	movs	r0, #11
 800292a:	f002 ff6e 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	200c      	movs	r0, #12
 8002934:	f002 ff4f 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002938:	200c      	movs	r0, #12
 800293a:	f002 ff66 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	200d      	movs	r0, #13
 8002944:	f002 ff47 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002948:	200d      	movs	r0, #13
 800294a:	f002 ff5e 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800294e:	2200      	movs	r2, #0
 8002950:	2100      	movs	r1, #0
 8002952:	200e      	movs	r0, #14
 8002954:	f002 ff3f 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002958:	200e      	movs	r0, #14
 800295a:	f002 ff56 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	200f      	movs	r0, #15
 8002964:	f002 ff37 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002968:	200f      	movs	r0, #15
 800296a:	f002 ff4e 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	2100      	movs	r1, #0
 8002972:	2010      	movs	r0, #16
 8002974:	f002 ff2f 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002978:	2010      	movs	r0, #16
 800297a:	f002 ff46 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	2046      	movs	r0, #70	; 0x46
 8002984:	f002 ff27 	bl	80057d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002988:	2046      	movs	r0, #70	; 0x46
 800298a:	f002 ff3e 	bl	800580a <HAL_NVIC_EnableIRQ>

}
 800298e:	bf00      	nop
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	58024400 	.word	0x58024400

0800299c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a2:	f107 031c 	add.w	r3, r7, #28
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	60da      	str	r2, [r3, #12]
 80029b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80029b2:	4ba7      	ldr	r3, [pc, #668]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b8:	4aa5      	ldr	r2, [pc, #660]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029ba:	f043 0310 	orr.w	r3, r3, #16
 80029be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029c2:	4ba3      	ldr	r3, [pc, #652]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029d0:	4b9f      	ldr	r3, [pc, #636]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d6:	4a9e      	ldr	r2, [pc, #632]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029d8:	f043 0320 	orr.w	r3, r3, #32
 80029dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029e0:	4b9b      	ldr	r3, [pc, #620]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029e6:	f003 0320 	and.w	r3, r3, #32
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ee:	4b98      	ldr	r3, [pc, #608]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029f4:	4a96      	ldr	r2, [pc, #600]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029fe:	4b94      	ldr	r3, [pc, #592]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0c:	4b90      	ldr	r3, [pc, #576]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a12:	4a8f      	ldr	r2, [pc, #572]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a1c:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	4b89      	ldr	r3, [pc, #548]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a30:	4a87      	ldr	r2, [pc, #540]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a32:	f043 0302 	orr.w	r3, r3, #2
 8002a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a3a:	4b85      	ldr	r3, [pc, #532]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a48:	4b81      	ldr	r3, [pc, #516]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a4e:	4a80      	ldr	r2, [pc, #512]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a58:	4b7d      	ldr	r3, [pc, #500]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a66:	4b7a      	ldr	r3, [pc, #488]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6c:	4a78      	ldr	r2, [pc, #480]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a6e:	f043 0308 	orr.w	r3, r3, #8
 8002a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <MX_GPIO_Init+0x2b4>)
 8002a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002a84:	2200      	movs	r2, #0
 8002a86:	f241 5104 	movw	r1, #5380	; 0x1504
 8002a8a:	4872      	ldr	r0, [pc, #456]	; (8002c54 <MX_GPIO_Init+0x2b8>)
 8002a8c:	f005 fcd0 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	f248 0106 	movw	r1, #32774	; 0x8006
 8002a96:	4870      	ldr	r0, [pc, #448]	; (8002c58 <MX_GPIO_Init+0x2bc>)
 8002a98:	f005 fcca 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2130      	movs	r1, #48	; 0x30
 8002aa0:	486e      	ldr	r0, [pc, #440]	; (8002c5c <MX_GPIO_Init+0x2c0>)
 8002aa2:	f005 fcc5 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2103      	movs	r1, #3
 8002aaa:	486d      	ldr	r0, [pc, #436]	; (8002c60 <MX_GPIO_Init+0x2c4>)
 8002aac:	f005 fcc0 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002ab6:	486b      	ldr	r0, [pc, #428]	; (8002c64 <MX_GPIO_Init+0x2c8>)
 8002ab8:	f005 fcba 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002abc:	2200      	movs	r2, #0
 8002abe:	210e      	movs	r1, #14
 8002ac0:	4869      	ldr	r0, [pc, #420]	; (8002c68 <MX_GPIO_Init+0x2cc>)
 8002ac2:	f005 fcb5 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002acc:	4867      	ldr	r0, [pc, #412]	; (8002c6c <MX_GPIO_Init+0x2d0>)
 8002ace:	f005 fcaf 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	4865      	ldr	r0, [pc, #404]	; (8002c6c <MX_GPIO_Init+0x2d0>)
 8002ad8:	f005 fcaa 	bl	8008430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002adc:	f241 5304 	movw	r3, #5380	; 0x1504
 8002ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	4619      	mov	r1, r3
 8002af4:	4857      	ldr	r0, [pc, #348]	; (8002c54 <MX_GPIO_Init+0x2b8>)
 8002af6:	f005 fadb 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002afa:	f248 0306 	movw	r3, #32774	; 0x8006
 8002afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b0c:	f107 031c 	add.w	r3, r7, #28
 8002b10:	4619      	mov	r1, r3
 8002b12:	4851      	ldr	r0, [pc, #324]	; (8002c58 <MX_GPIO_Init+0x2bc>)
 8002b14:	f005 facc 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b18:	2330      	movs	r3, #48	; 0x30
 8002b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b28:	f107 031c 	add.w	r3, r7, #28
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	484b      	ldr	r0, [pc, #300]	; (8002c5c <MX_GPIO_Init+0x2c0>)
 8002b30:	f005 fabe 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002b34:	2303      	movs	r3, #3
 8002b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2300      	movs	r3, #0
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4845      	ldr	r0, [pc, #276]	; (8002c60 <MX_GPIO_Init+0x2c4>)
 8002b4c:	f005 fab0 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002b50:	2304      	movs	r3, #4
 8002b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 031c 	add.w	r3, r7, #28
 8002b60:	4619      	mov	r1, r3
 8002b62:	483f      	ldr	r0, [pc, #252]	; (8002c60 <MX_GPIO_Init+0x2c4>)
 8002b64:	f005 faa4 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002b68:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b7a:	f107 031c 	add.w	r3, r7, #28
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4838      	ldr	r0, [pc, #224]	; (8002c64 <MX_GPIO_Init+0x2c8>)
 8002b82:	f005 fa95 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002b86:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b90:	2301      	movs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4832      	ldr	r0, [pc, #200]	; (8002c64 <MX_GPIO_Init+0x2c8>)
 8002b9c:	f005 fa88 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 031c 	add.w	r3, r7, #28
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	482d      	ldr	r0, [pc, #180]	; (8002c68 <MX_GPIO_Init+0x2cc>)
 8002bb4:	f005 fa7c 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002bb8:	230e      	movs	r3, #14
 8002bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc8:	f107 031c 	add.w	r3, r7, #28
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4826      	ldr	r0, [pc, #152]	; (8002c68 <MX_GPIO_Init+0x2cc>)
 8002bd0:	f005 fa6e 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002bd4:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bde:	2301      	movs	r3, #1
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	481a      	ldr	r0, [pc, #104]	; (8002c54 <MX_GPIO_Init+0x2b8>)
 8002bea:	f005 fa61 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002bee:	f240 7301 	movw	r3, #1793	; 0x701
 8002bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4819      	ldr	r0, [pc, #100]	; (8002c6c <MX_GPIO_Init+0x2d0>)
 8002c08:	f005 fa52 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c10:	2300      	movs	r3, #0
 8002c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4812      	ldr	r0, [pc, #72]	; (8002c68 <MX_GPIO_Init+0x2cc>)
 8002c20:	f005 fa46 	bl	80080b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002c36:	2300      	movs	r3, #0
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4805      	ldr	r0, [pc, #20]	; (8002c58 <MX_GPIO_Init+0x2bc>)
 8002c42:	f005 fa35 	bl	80080b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c46:	bf00      	nop
 8002c48:	3730      	adds	r7, #48	; 0x30
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	58024400 	.word	0x58024400
 8002c54:	58021000 	.word	0x58021000
 8002c58:	58020000 	.word	0x58020000
 8002c5c:	58020800 	.word	0x58020800
 8002c60:	58020400 	.word	0x58020400
 8002c64:	58021400 	.word	0x58021400
 8002c68:	58021800 	.word	0x58021800
 8002c6c:	58020c00 	.word	0x58020c00

08002c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c74:	b672      	cpsid	i
}
 8002c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c78:	e7fe      	b.n	8002c78 <Error_Handler+0x8>
	...

08002c7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_MspInit+0x30>)
 8002c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c88:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_MspInit+0x30>)
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_MspInit+0x30>)
 8002c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	58024400 	.word	0x58024400

08002cb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08c      	sub	sp, #48	; 0x30
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
 8002cc2:	609a      	str	r2, [r3, #8]
 8002cc4:	60da      	str	r2, [r3, #12]
 8002cc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a5d      	ldr	r2, [pc, #372]	; (8002e44 <HAL_ADC_MspInit+0x194>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d159      	bne.n	8002d86 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002cd2:	4b5d      	ldr	r3, [pc, #372]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd8:	4a5b      	ldr	r2, [pc, #364]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002cda:	f043 0320 	orr.w	r3, r3, #32
 8002cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ce2:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cf0:	4b55      	ldr	r3, [pc, #340]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf6:	4a54      	ldr	r2, [pc, #336]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d00:	4b51      	ldr	r3, [pc, #324]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d12:	2303      	movs	r3, #3
 8002d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002d1a:	f107 031c 	add.w	r3, r7, #28
 8002d1e:	4619      	mov	r1, r3
 8002d20:	484a      	ldr	r0, [pc, #296]	; (8002e4c <HAL_ADC_MspInit+0x19c>)
 8002d22:	f005 f9c5 	bl	80080b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002d26:	4b4a      	ldr	r3, [pc, #296]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d28:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_ADC_MspInit+0x1a4>)
 8002d2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d2c:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d2e:	2209      	movs	r2, #9
 8002d30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d32:	4b47      	ldr	r3, [pc, #284]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d38:	4b45      	ldr	r3, [pc, #276]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d3e:	4b44      	ldr	r3, [pc, #272]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d46:	4b42      	ldr	r3, [pc, #264]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d4e:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d56:	4b3e      	ldr	r3, [pc, #248]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d5c:	4b3c      	ldr	r3, [pc, #240]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d62:	4b3b      	ldr	r3, [pc, #236]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d68:	4839      	ldr	r0, [pc, #228]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d6a:	f002 fd69 	bl	8005840 <HAL_DMA_Init>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002d74:	f7ff ff7c 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a35      	ldr	r2, [pc, #212]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d7c:	659a      	str	r2, [r3, #88]	; 0x58
 8002d7e:	4a34      	ldr	r2, [pc, #208]	; (8002e50 <HAL_ADC_MspInit+0x1a0>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002d84:	e059      	b.n	8002e3a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a33      	ldr	r2, [pc, #204]	; (8002e58 <HAL_ADC_MspInit+0x1a8>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d154      	bne.n	8002e3a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d96:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da0:	4b29      	ldr	r3, [pc, #164]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db4:	4a24      	ldr	r2, [pc, #144]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_ADC_MspInit+0x198>)
 8002dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002dcc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002dd0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002dd4:	f001 f89e 	bl	8003f14 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002dda:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <HAL_ADC_MspInit+0x1b0>)
 8002ddc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002dde:	4b1f      	ldr	r3, [pc, #124]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002de0:	2273      	movs	r2, #115	; 0x73
 8002de2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002de4:	4b1d      	ldr	r3, [pc, #116]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dea:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002df2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df6:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002df8:	4b18      	ldr	r3, [pc, #96]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002dfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dfe:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e00:	4b16      	ldr	r3, [pc, #88]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e06:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e08:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e10:	4b12      	ldr	r3, [pc, #72]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e16:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e18:	4b10      	ldr	r3, [pc, #64]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e1e:	480f      	ldr	r0, [pc, #60]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e20:	f002 fd0e 	bl	8005840 <HAL_DMA_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002e2a:	f7ff ff21 	bl	8002c70 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e32:	659a      	str	r2, [r3, #88]	; 0x58
 8002e34:	4a09      	ldr	r2, [pc, #36]	; (8002e5c <HAL_ADC_MspInit+0x1ac>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002e3a:	bf00      	nop
 8002e3c:	3730      	adds	r7, #48	; 0x30
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	58024400 	.word	0x58024400
 8002e4c:	58020800 	.word	0x58020800
 8002e50:	24000e50 	.word	0x24000e50
 8002e54:	40020088 	.word	0x40020088
 8002e58:	58026000 	.word	0x58026000
 8002e5c:	24000ec8 	.word	0x24000ec8
 8002e60:	400204b8 	.word	0x400204b8

08002e64 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b0b8      	sub	sp, #224	; 0xe0
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e7c:	f107 0310 	add.w	r3, r7, #16
 8002e80:	22b8      	movs	r2, #184	; 0xb8
 8002e82:	2100      	movs	r1, #0
 8002e84:	4618      	mov	r0, r3
 8002e86:	f015 faac 	bl	80183e2 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <HAL_FDCAN_MspInit+0xc4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d145      	bne.n	8002f20 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002e94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ea4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea6:	f107 0310 	add.w	r3, r7, #16
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f007 feee 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002eb6:	f7ff fedb 	bl	8002c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002eba:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002ebc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ec0:	4a1a      	ldr	r2, [pc, #104]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002eca:	4b18      	ldr	r3, [pc, #96]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002ecc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ed8:	4b14      	ldr	r3, [pc, #80]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ede:	4a13      	ldr	r2, [pc, #76]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002ee0:	f043 0320 	orr.w	r3, r3, #32
 8002ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee8:	4b10      	ldr	r3, [pc, #64]	; (8002f2c <HAL_FDCAN_MspInit+0xc8>)
 8002eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ef6:	23c0      	movs	r3, #192	; 0xc0
 8002ef8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efc:	2302      	movs	r3, #2
 8002efe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4805      	ldr	r0, [pc, #20]	; (8002f30 <HAL_FDCAN_MspInit+0xcc>)
 8002f1c:	f005 f8c8 	bl	80080b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002f20:	bf00      	nop
 8002f22:	37e0      	adds	r7, #224	; 0xe0
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	4000d400 	.word	0x4000d400
 8002f2c:	58024400 	.word	0x58024400
 8002f30:	58021400 	.word	0x58021400

08002f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b0b8      	sub	sp, #224	; 0xe0
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	605a      	str	r2, [r3, #4]
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	60da      	str	r2, [r3, #12]
 8002f4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f4c:	f107 0310 	add.w	r3, r7, #16
 8002f50:	22b8      	movs	r2, #184	; 0xb8
 8002f52:	2100      	movs	r1, #0
 8002f54:	4618      	mov	r0, r3
 8002f56:	f015 fa44 	bl	80183e2 <memset>
  if(hi2c->Instance==I2C2)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2a      	ldr	r2, [pc, #168]	; (8003008 <HAL_I2C_MspInit+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d14d      	bne.n	8003000 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002f64:	f04f 0208 	mov.w	r2, #8
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f76:	f107 0310 	add.w	r3, r7, #16
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f007 fe86 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002f86:	f7ff fe73 	bl	8002c70 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002f92:	f043 0320 	orr.w	r3, r3, #32
 8002f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa0:	f003 0320 	and.w	r3, r3, #32
 8002fa4:	60fb      	str	r3, [r7, #12]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fae:	2312      	movs	r3, #18
 8002fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fc6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4810      	ldr	r0, [pc, #64]	; (8003010 <HAL_I2C_MspInit+0xdc>)
 8002fce:	f005 f86f 	bl	80080b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002fd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd8:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fe2:	4b0a      	ldr	r3, [pc, #40]	; (800300c <HAL_I2C_MspInit+0xd8>)
 8002fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2021      	movs	r0, #33	; 0x21
 8002ff6:	f002 fbee 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002ffa:	2021      	movs	r0, #33	; 0x21
 8002ffc:	f002 fc05 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003000:	bf00      	nop
 8003002:	37e0      	adds	r7, #224	; 0xe0
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40005800 	.word	0x40005800
 800300c:	58024400 	.word	0x58024400
 8003010:	58021400 	.word	0x58021400

08003014 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b0ba      	sub	sp, #232	; 0xe8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800302c:	f107 0318 	add.w	r3, r7, #24
 8003030:	22b8      	movs	r2, #184	; 0xb8
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f015 f9d4 	bl	80183e2 <memset>
  if(hsd->Instance==SDMMC2)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_SD_MspInit+0x1a0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	f040 80b3 	bne.w	80031ac <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003052:	2300      	movs	r3, #0
 8003054:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	4618      	mov	r0, r3
 800305c:	f007 fe16 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003066:	f7ff fe03 	bl	8002c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800306a:	4b53      	ldr	r3, [pc, #332]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 800306c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003070:	4a51      	ldr	r2, [pc, #324]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 8003072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003076:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800307a:	4b4f      	ldr	r3, [pc, #316]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 800307c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003080:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 800308a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800308e:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003098:	4b47      	ldr	r3, [pc, #284]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 800309a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 80030a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030ac:	4a42      	ldr	r2, [pc, #264]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 80030ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030b6:	4b40      	ldr	r3, [pc, #256]	; (80031b8 <HAL_SD_MspInit+0x1a4>)
 80030b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030c4:	2340      	movs	r3, #64	; 0x40
 80030c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d6:	2303      	movs	r3, #3
 80030d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030dc:	230b      	movs	r3, #11
 80030de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e6:	4619      	mov	r1, r3
 80030e8:	4834      	ldr	r0, [pc, #208]	; (80031bc <HAL_SD_MspInit+0x1a8>)
 80030ea:	f004 ffe1 	bl	80080b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003106:	230b      	movs	r3, #11
 8003108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800310c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003110:	4619      	mov	r1, r3
 8003112:	482a      	ldr	r0, [pc, #168]	; (80031bc <HAL_SD_MspInit+0x1a8>)
 8003114:	f004 ffcc 	bl	80080b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800311c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003126:	2301      	movs	r3, #1
 8003128:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003132:	230b      	movs	r3, #11
 8003134:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800313c:	4619      	mov	r1, r3
 800313e:	4820      	ldr	r0, [pc, #128]	; (80031c0 <HAL_SD_MspInit+0x1ac>)
 8003140:	f004 ffb6 	bl	80080b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800315e:	230b      	movs	r3, #11
 8003160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003164:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003168:	4619      	mov	r1, r3
 800316a:	4815      	ldr	r0, [pc, #84]	; (80031c0 <HAL_SD_MspInit+0x1ac>)
 800316c:	f004 ffa0 	bl	80080b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003170:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003174:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800318a:	230a      	movs	r3, #10
 800318c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003190:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003194:	4619      	mov	r1, r3
 8003196:	480a      	ldr	r0, [pc, #40]	; (80031c0 <HAL_SD_MspInit+0x1ac>)
 8003198:	f004 ff8a 	bl	80080b0 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 800319c:	2200      	movs	r2, #0
 800319e:	2100      	movs	r1, #0
 80031a0:	207c      	movs	r0, #124	; 0x7c
 80031a2:	f002 fb18 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80031a6:	207c      	movs	r0, #124	; 0x7c
 80031a8:	f002 fb2f 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80031ac:	bf00      	nop
 80031ae:	37e8      	adds	r7, #232	; 0xe8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	48022400 	.word	0x48022400
 80031b8:	58024400 	.word	0x58024400
 80031bc:	58020c00 	.word	0x58020c00
 80031c0:	58021800 	.word	0x58021800

080031c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a4f      	ldr	r2, [pc, #316]	; (8003320 <HAL_SPI_MspInit+0x15c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d12e      	bne.n	8003244 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80031e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ec:	4a4d      	ldr	r2, [pc, #308]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80031ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031f6:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80031f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003200:	623b      	str	r3, [r7, #32]
 8003202:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003204:	4b47      	ldr	r3, [pc, #284]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800320a:	4a46      	ldr	r2, [pc, #280]	; (8003324 <HAL_SPI_MspInit+0x160>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003214:	4b43      	ldr	r3, [pc, #268]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003222:	23e0      	movs	r3, #224	; 0xe0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003226:	2302      	movs	r3, #2
 8003228:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003232:	2305      	movs	r3, #5
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323a:	4619      	mov	r1, r3
 800323c:	483a      	ldr	r0, [pc, #232]	; (8003328 <HAL_SPI_MspInit+0x164>)
 800323e:	f004 ff37 	bl	80080b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003242:	e068      	b.n	8003316 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a38      	ldr	r2, [pc, #224]	; (800332c <HAL_SPI_MspInit+0x168>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d12f      	bne.n	80032ae <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800324e:	4b35      	ldr	r3, [pc, #212]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003254:	4a33      	ldr	r2, [pc, #204]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003256:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800325a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326c:	4b2d      	ldr	r3, [pc, #180]	; (8003324 <HAL_SPI_MspInit+0x160>)
 800326e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003272:	4a2c      	ldr	r2, [pc, #176]	; (8003324 <HAL_SPI_MspInit+0x160>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800327c:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_SPI_MspInit+0x160>)
 800327e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800328a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800328e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003298:	2300      	movs	r3, #0
 800329a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800329c:	2305      	movs	r3, #5
 800329e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	4822      	ldr	r0, [pc, #136]	; (8003330 <HAL_SPI_MspInit+0x16c>)
 80032a8:	f004 ff02 	bl	80080b0 <HAL_GPIO_Init>
}
 80032ac:	e033      	b.n	8003316 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <HAL_SPI_MspInit+0x170>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d12e      	bne.n	8003316 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80032b8:	4b1a      	ldr	r3, [pc, #104]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032be:	4a19      	ldr	r2, [pc, #100]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032dc:	4a11      	ldr	r2, [pc, #68]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e6:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_SPI_MspInit+0x160>)
 80032e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80032f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003302:	2300      	movs	r3, #0
 8003304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003306:	2306      	movs	r3, #6
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800330a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330e:	4619      	mov	r1, r3
 8003310:	4809      	ldr	r0, [pc, #36]	; (8003338 <HAL_SPI_MspInit+0x174>)
 8003312:	f004 fecd 	bl	80080b0 <HAL_GPIO_Init>
}
 8003316:	bf00      	nop
 8003318:	3738      	adds	r7, #56	; 0x38
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40013000 	.word	0x40013000
 8003324:	58024400 	.word	0x58024400
 8003328:	58020000 	.word	0x58020000
 800332c:	40003800 	.word	0x40003800
 8003330:	58020400 	.word	0x58020400
 8003334:	40003c00 	.word	0x40003c00
 8003338:	58020800 	.word	0x58020800

0800333c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 031c 	add.w	r3, r7, #28
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d15d      	bne.n	800341a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800335e:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003364:	4a8c      	ldr	r2, [pc, #560]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800336e:	4b8a      	ldr	r3, [pc, #552]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003370:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337c:	4b86      	ldr	r3, [pc, #536]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 800337e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003382:	4a85      	ldr	r2, [pc, #532]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800338c:	4b82      	ldr	r3, [pc, #520]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 800338e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800339a:	2301      	movs	r3, #1
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339e:	2302      	movs	r3, #2
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033aa:	2301      	movs	r3, #1
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ae:	f107 031c 	add.w	r3, r7, #28
 80033b2:	4619      	mov	r1, r3
 80033b4:	4879      	ldr	r0, [pc, #484]	; (800359c <HAL_TIM_PWM_MspInit+0x260>)
 80033b6:	f004 fe7b 	bl	80080b0 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80033ba:	4b79      	ldr	r3, [pc, #484]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033bc:	4a79      	ldr	r2, [pc, #484]	; (80035a4 <HAL_TIM_PWM_MspInit+0x268>)
 80033be:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80033c0:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033c2:	2214      	movs	r2, #20
 80033c4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c6:	4b76      	ldr	r3, [pc, #472]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033c8:	2240      	movs	r2, #64	; 0x40
 80033ca:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80033cc:	4b74      	ldr	r3, [pc, #464]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80033d2:	4b73      	ldr	r3, [pc, #460]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033d8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033da:	4b71      	ldr	r3, [pc, #452]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e2:	4b6f      	ldr	r3, [pc, #444]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033e8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80033ea:	4b6d      	ldr	r3, [pc, #436]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80033f0:	4b6b      	ldr	r3, [pc, #428]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f6:	4b6a      	ldr	r3, [pc, #424]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80033fc:	4868      	ldr	r0, [pc, #416]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 80033fe:	f002 fa1f 	bl	8005840 <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003408:	f7ff fc32 	bl	8002c70 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a64      	ldr	r2, [pc, #400]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c
 8003412:	4a63      	ldr	r2, [pc, #396]	; (80035a0 <HAL_TIM_PWM_MspInit+0x264>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003418:	e119      	b.n	800364e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a62      	ldr	r2, [pc, #392]	; (80035a8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d16d      	bne.n	8003500 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003424:	4b5c      	ldr	r3, [pc, #368]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800342a:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003434:	4b58      	ldr	r3, [pc, #352]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	613b      	str	r3, [r7, #16]
 8003440:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003442:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003444:	4a5a      	ldr	r2, [pc, #360]	; (80035b0 <HAL_TIM_PWM_MspInit+0x274>)
 8003446:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003448:	4b58      	ldr	r3, [pc, #352]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 800344a:	2218      	movs	r2, #24
 800344c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800344e:	4b57      	ldr	r3, [pc, #348]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003450:	2240      	movs	r2, #64	; 0x40
 8003452:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003454:	4b55      	ldr	r3, [pc, #340]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 800345c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003460:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003462:	4b52      	ldr	r3, [pc, #328]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003464:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003468:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800346a:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 800346c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003470:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003472:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003474:	2200      	movs	r2, #0
 8003476:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 800347a:	2200      	movs	r2, #0
 800347c:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800347e:	4b4b      	ldr	r3, [pc, #300]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003480:	2200      	movs	r2, #0
 8003482:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003484:	4849      	ldr	r0, [pc, #292]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003486:	f002 f9db 	bl	8005840 <HAL_DMA_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003490:	f7ff fbee 	bl	8002c70 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a45      	ldr	r2, [pc, #276]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 8003498:	629a      	str	r2, [r3, #40]	; 0x28
 800349a:	4a44      	ldr	r2, [pc, #272]	; (80035ac <HAL_TIM_PWM_MspInit+0x270>)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80034a0:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034a2:	4a45      	ldr	r2, [pc, #276]	; (80035b8 <HAL_TIM_PWM_MspInit+0x27c>)
 80034a4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80034a6:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034a8:	2217      	movs	r2, #23
 80034aa:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034ac:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b2:	4b40      	ldr	r3, [pc, #256]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80034b8:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034be:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034c0:	4b3c      	ldr	r3, [pc, #240]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034c6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034ce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80034d0:	4b38      	ldr	r3, [pc, #224]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034d8:	2200      	movs	r2, #0
 80034da:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034de:	2200      	movs	r2, #0
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80034e2:	4834      	ldr	r0, [pc, #208]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034e4:	f002 f9ac 	bl	8005840 <HAL_DMA_Init>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80034ee:	f7ff fbbf 	bl	8002c70 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
 80034f8:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <HAL_TIM_PWM_MspInit+0x278>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80034fe:	e0a6      	b.n	800364e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2d      	ldr	r2, [pc, #180]	; (80035bc <HAL_TIM_PWM_MspInit+0x280>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d15e      	bne.n	80035c8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 800350c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003510:	4a21      	ldr	r2, [pc, #132]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800351a:	4b1f      	ldr	r3, [pc, #124]	; (8003598 <HAL_TIM_PWM_MspInit+0x25c>)
 800351c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800352a:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_PWM_MspInit+0x288>)
 800352c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003530:	221f      	movs	r2, #31
 8003532:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003534:	4b22      	ldr	r3, [pc, #136]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800353c:	2200      	movs	r2, #0
 800353e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003546:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003548:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800354a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800354e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003550:	4b1b      	ldr	r3, [pc, #108]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003552:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003556:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800355a:	2200      	movs	r2, #0
 800355c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800355e:	4b18      	ldr	r3, [pc, #96]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800356a:	4815      	ldr	r0, [pc, #84]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800356c:	f002 f968 	bl	8005840 <HAL_DMA_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003576:	f7ff fb7b 	bl	8002c70 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 800357e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_TIM_PWM_MspInit+0x284>)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	201e      	movs	r0, #30
 800358c:	f002 f923 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003590:	201e      	movs	r0, #30
 8003592:	f002 f93a 	bl	800580a <HAL_NVIC_EnableIRQ>
}
 8003596:	e05a      	b.n	800364e <HAL_TIM_PWM_MspInit+0x312>
 8003598:	58024400 	.word	0x58024400
 800359c:	58020000 	.word	0x58020000
 80035a0:	240013c4 	.word	0x240013c4
 80035a4:	40020028 	.word	0x40020028
 80035a8:	40000400 	.word	0x40000400
 80035ac:	2400143c 	.word	0x2400143c
 80035b0:	40020058 	.word	0x40020058
 80035b4:	240014b4 	.word	0x240014b4
 80035b8:	40020070 	.word	0x40020070
 80035bc:	40000800 	.word	0x40000800
 80035c0:	2400152c 	.word	0x2400152c
 80035c4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a22      	ldr	r2, [pc, #136]	; (8003658 <HAL_TIM_PWM_MspInit+0x31c>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d13d      	bne.n	800364e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035d2:	4b22      	ldr	r3, [pc, #136]	; (800365c <HAL_TIM_PWM_MspInit+0x320>)
 80035d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d8:	4a20      	ldr	r2, [pc, #128]	; (800365c <HAL_TIM_PWM_MspInit+0x320>)
 80035da:	f043 0308 	orr.w	r3, r3, #8
 80035de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_TIM_PWM_MspInit+0x320>)
 80035e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80035f0:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 80035f2:	4a1c      	ldr	r2, [pc, #112]	; (8003664 <HAL_TIM_PWM_MspInit+0x328>)
 80035f4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80035f6:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 80035f8:	223a      	movs	r2, #58	; 0x3a
 80035fa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035fc:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003602:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 800360a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800360e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003610:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003616:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 800361a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800361e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003620:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003622:	2200      	movs	r2, #0
 8003624:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003628:	2200      	movs	r2, #0
 800362a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 800362e:	2200      	movs	r2, #0
 8003630:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003632:	480b      	ldr	r0, [pc, #44]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003634:	f002 f904 	bl	8005840 <HAL_DMA_Init>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800363e:	f7ff fb17 	bl	8002c70 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_TIM_PWM_MspInit+0x324>)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800364e:	bf00      	nop
 8003650:	3730      	adds	r7, #48	; 0x30
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40000c00 	.word	0x40000c00
 800365c:	58024400 	.word	0x58024400
 8003660:	240015a4 	.word	0x240015a4
 8003664:	40020040 	.word	0x40020040

08003668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_TIM_Base_MspInit+0x3c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10e      	bne.n	8003698 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_TIM_Base_MspInit+0x40>)
 800367c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003680:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_TIM_Base_MspInit+0x40>)
 8003682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003686:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_TIM_Base_MspInit+0x40>)
 800368c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003698:	bf00      	nop
 800369a:	3714      	adds	r7, #20
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40001c00 	.word	0x40001c00
 80036a8:	58024400 	.word	0x58024400

080036ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08c      	sub	sp, #48	; 0x30
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d120      	bne.n	8003710 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	4b52      	ldr	r3, [pc, #328]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80036d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80036d6:	f043 0302 	orr.w	r3, r3, #2
 80036da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036de:	4b4e      	ldr	r3, [pc, #312]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	2302      	movs	r3, #2
 80036f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036f6:	2302      	movs	r3, #2
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fa:	2300      	movs	r3, #0
 80036fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036fe:	2301      	movs	r3, #1
 8003700:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003702:	f107 031c 	add.w	r3, r7, #28
 8003706:	4619      	mov	r1, r3
 8003708:	4844      	ldr	r0, [pc, #272]	; (800381c <HAL_TIM_MspPostInit+0x170>)
 800370a:	f004 fcd1 	bl	80080b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800370e:	e07f      	b.n	8003810 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_TIM_MspPostInit+0x174>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d11f      	bne.n	800375a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	4b3f      	ldr	r3, [pc, #252]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 800371c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003720:	4a3d      	ldr	r2, [pc, #244]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800372a:	4b3b      	ldr	r3, [pc, #236]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 800372c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003738:	2330      	movs	r3, #48	; 0x30
 800373a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373c:	2302      	movs	r3, #2
 800373e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003740:	2302      	movs	r3, #2
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003744:	2300      	movs	r3, #0
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003748:	2302      	movs	r3, #2
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4619      	mov	r1, r3
 8003752:	4832      	ldr	r0, [pc, #200]	; (800381c <HAL_TIM_MspPostInit+0x170>)
 8003754:	f004 fcac 	bl	80080b0 <HAL_GPIO_Init>
}
 8003758:	e05a      	b.n	8003810 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a31      	ldr	r2, [pc, #196]	; (8003824 <HAL_TIM_MspPostInit+0x178>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d131      	bne.n	80037c8 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 8003766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800376a:	4a2b      	ldr	r2, [pc, #172]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 800376c:	f043 0308 	orr.w	r3, r3, #8
 8003770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 8003776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003782:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003794:	2302      	movs	r3, #2
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	4822      	ldr	r0, [pc, #136]	; (8003828 <HAL_TIM_MspPostInit+0x17c>)
 80037a0:	f004 fc86 	bl	80080b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80037a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037ae:	2302      	movs	r3, #2
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037b6:	2302      	movs	r3, #2
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ba:	f107 031c 	add.w	r3, r7, #28
 80037be:	4619      	mov	r1, r3
 80037c0:	4819      	ldr	r0, [pc, #100]	; (8003828 <HAL_TIM_MspPostInit+0x17c>)
 80037c2:	f004 fc75 	bl	80080b0 <HAL_GPIO_Init>
}
 80037c6:	e023      	b.n	8003810 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a17      	ldr	r2, [pc, #92]	; (800382c <HAL_TIM_MspPostInit+0x180>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d11e      	bne.n	8003810 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80037d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037d8:	4a0f      	ldr	r2, [pc, #60]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <HAL_TIM_MspPostInit+0x16c>)
 80037e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80037f0:	2308      	movs	r3, #8
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80037f8:	2302      	movs	r3, #2
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003800:	2302      	movs	r3, #2
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	4809      	ldr	r0, [pc, #36]	; (8003830 <HAL_TIM_MspPostInit+0x184>)
 800380c:	f004 fc50 	bl	80080b0 <HAL_GPIO_Init>
}
 8003810:	bf00      	nop
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	58024400 	.word	0x58024400
 800381c:	58020400 	.word	0x58020400
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	58020c00 	.word	0x58020c00
 800382c:	40000c00 	.word	0x40000c00
 8003830:	58020000 	.word	0x58020000

08003834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0ba      	sub	sp, #232	; 0xe8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800383c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	609a      	str	r2, [r3, #8]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800384c:	f107 0318 	add.w	r3, r7, #24
 8003850:	22b8      	movs	r2, #184	; 0xb8
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f014 fdc4 	bl	80183e2 <memset>
  if(huart->Instance==UART4)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a4d      	ldr	r2, [pc, #308]	; (8003994 <HAL_UART_MspInit+0x160>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d147      	bne.n	80038f4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003864:	f04f 0202 	mov.w	r2, #2
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003870:	2300      	movs	r3, #0
 8003872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003876:	f107 0318 	add.w	r3, r7, #24
 800387a:	4618      	mov	r0, r3
 800387c:	f007 fa06 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003886:	f7ff f9f3 	bl	8002c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800388a:	4b43      	ldr	r3, [pc, #268]	; (8003998 <HAL_UART_MspInit+0x164>)
 800388c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003890:	4a41      	ldr	r2, [pc, #260]	; (8003998 <HAL_UART_MspInit+0x164>)
 8003892:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003896:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800389a:	4b3f      	ldr	r3, [pc, #252]	; (8003998 <HAL_UART_MspInit+0x164>)
 800389c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a8:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <HAL_UART_MspInit+0x164>)
 80038aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ae:	4a3a      	ldr	r2, [pc, #232]	; (8003998 <HAL_UART_MspInit+0x164>)
 80038b0:	f043 0302 	orr.w	r3, r3, #2
 80038b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038b8:	4b37      	ldr	r3, [pc, #220]	; (8003998 <HAL_UART_MspInit+0x164>)
 80038ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ce:	2302      	movs	r3, #2
 80038d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038e0:	2308      	movs	r3, #8
 80038e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038ea:	4619      	mov	r1, r3
 80038ec:	482b      	ldr	r0, [pc, #172]	; (800399c <HAL_UART_MspInit+0x168>)
 80038ee:	f004 fbdf 	bl	80080b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038f2:	e04a      	b.n	800398a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a29      	ldr	r2, [pc, #164]	; (80039a0 <HAL_UART_MspInit+0x16c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d145      	bne.n	800398a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80038fe:	f04f 0201 	mov.w	r2, #1
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800390a:	2300      	movs	r3, #0
 800390c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003910:	f107 0318 	add.w	r3, r7, #24
 8003914:	4618      	mov	r0, r3
 8003916:	f007 f9b9 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003920:	f7ff f9a6 	bl	8002c70 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003924:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <HAL_UART_MspInit+0x164>)
 8003926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800392a:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_UART_MspInit+0x164>)
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <HAL_UART_MspInit+0x164>)
 8003936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800393a:	f003 0320 	and.w	r3, r3, #32
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <HAL_UART_MspInit+0x164>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003948:	4a13      	ldr	r2, [pc, #76]	; (8003998 <HAL_UART_MspInit+0x164>)
 800394a:	f043 0304 	orr.w	r3, r3, #4
 800394e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_UART_MspInit+0x164>)
 8003954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003960:	23c0      	movs	r3, #192	; 0xc0
 8003962:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003978:	2307      	movs	r3, #7
 800397a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003982:	4619      	mov	r1, r3
 8003984:	4807      	ldr	r0, [pc, #28]	; (80039a4 <HAL_UART_MspInit+0x170>)
 8003986:	f004 fb93 	bl	80080b0 <HAL_GPIO_Init>
}
 800398a:	bf00      	nop
 800398c:	37e8      	adds	r7, #232	; 0xe8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40004c00 	.word	0x40004c00
 8003998:	58024400 	.word	0x58024400
 800399c:	58020400 	.word	0x58020400
 80039a0:	40011400 	.word	0x40011400
 80039a4:	58020800 	.word	0x58020800

080039a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <NMI_Handler+0x4>

080039ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039b2:	e7fe      	b.n	80039b2 <HardFault_Handler+0x4>

080039b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <MemManage_Handler+0x4>

080039ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039be:	e7fe      	b.n	80039be <BusFault_Handler+0x4>

080039c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <UsageFault_Handler+0x4>

080039c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039e2:	b480      	push	{r7}
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039f4:	f000 fa4a 	bl	8003e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}

080039fc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003a00:	4802      	ldr	r0, [pc, #8]	; (8003a0c <DMA1_Stream0_IRQHandler+0x10>)
 8003a02:	f002 fcdf 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2400152c 	.word	0x2400152c

08003a10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003a14:	4802      	ldr	r0, [pc, #8]	; (8003a20 <DMA1_Stream1_IRQHandler+0x10>)
 8003a16:	f002 fcd5 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	240013c4 	.word	0x240013c4

08003a24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003a28:	4802      	ldr	r0, [pc, #8]	; (8003a34 <DMA1_Stream2_IRQHandler+0x10>)
 8003a2a:	f002 fccb 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	240015a4 	.word	0x240015a4

08003a38 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a3c:	4802      	ldr	r0, [pc, #8]	; (8003a48 <DMA1_Stream3_IRQHandler+0x10>)
 8003a3e:	f002 fcc1 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2400143c 	.word	0x2400143c

08003a4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003a50:	4802      	ldr	r0, [pc, #8]	; (8003a5c <DMA1_Stream4_IRQHandler+0x10>)
 8003a52:	f002 fcb7 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003a56:	bf00      	nop
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	240014b4 	.word	0x240014b4

08003a60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a64:	4802      	ldr	r0, [pc, #8]	; (8003a70 <DMA1_Stream5_IRQHandler+0x10>)
 8003a66:	f002 fcad 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a6a:	bf00      	nop
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	24000e50 	.word	0x24000e50

08003a74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a78:	4802      	ldr	r0, [pc, #8]	; (8003a84 <TIM4_IRQHandler+0x10>)
 8003a7a:	f00c fae9 	bl	8010050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	240012e0 	.word	0x240012e0

08003a88 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a8c:	4802      	ldr	r0, [pc, #8]	; (8003a98 <I2C2_EV_IRQHandler+0x10>)
 8003a8e:	f004 fd79 	bl	8008584 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	24000fe0 	.word	0x24000fe0

08003a9c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003aa0:	4802      	ldr	r0, [pc, #8]	; (8003aac <DMA2_Stream7_IRQHandler+0x10>)
 8003aa2:	f002 fc8f 	bl	80063c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	24000ec8 	.word	0x24000ec8

08003ab0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <OTG_HS_IRQHandler+0x10>)
 8003ab6:	f004 ff6f 	bl	8008998 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	24002c48 	.word	0x24002c48

08003ac4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <SDMMC2_IRQHandler+0x10>)
 8003aca:	f009 ff35 	bl	800d938 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	24001034 	.word	0x24001034

08003ad8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return 1;
 8003adc:	2301      	movs	r3, #1
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <_kill>:

int _kill(int pid, int sig)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003af2:	f014 fcc9 	bl	8018488 <__errno>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2216      	movs	r2, #22
 8003afa:	601a      	str	r2, [r3, #0]
  return -1;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <_exit>:

void _exit (int status)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b10:	f04f 31ff 	mov.w	r1, #4294967295
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ffe7 	bl	8003ae8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b1a:	e7fe      	b.n	8003b1a <_exit+0x12>

08003b1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
 8003b2c:	e00a      	b.n	8003b44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b2e:	f3af 8000 	nop.w
 8003b32:	4601      	mov	r1, r0
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	b2ca      	uxtb	r2, r1
 8003b3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	3301      	adds	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	dbf0      	blt.n	8003b2e <_read+0x12>
  }

  return len;
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b086      	sub	sp, #24
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e009      	b.n	8003b7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	60ba      	str	r2, [r7, #8]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	dbf1      	blt.n	8003b68 <_write+0x12>
  }
  return len;
 8003b84:	687b      	ldr	r3, [r7, #4]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <_close>:

int _close(int file)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b083      	sub	sp, #12
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_isatty>:

int _isatty(int file)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
	...

08003bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c00:	4a14      	ldr	r2, [pc, #80]	; (8003c54 <_sbrk+0x5c>)
 8003c02:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <_sbrk+0x60>)
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <_sbrk+0x64>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d102      	bne.n	8003c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <_sbrk+0x64>)
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <_sbrk+0x68>)
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <_sbrk+0x64>)
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d207      	bcs.n	8003c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c28:	f014 fc2e 	bl	8018488 <__errno>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	220c      	movs	r2, #12
 8003c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	e009      	b.n	8003c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c38:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <_sbrk+0x64>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <_sbrk+0x64>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <_sbrk+0x64>)
 8003c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	24050000 	.word	0x24050000
 8003c58:	00000800 	.word	0x00000800
 8003c5c:	24001744 	.word	0x24001744
 8003c60:	240034c0 	.word	0x240034c0

08003c64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <SystemInit+0xd0>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	4a31      	ldr	r2, [pc, #196]	; (8003d34 <SystemInit+0xd0>)
 8003c70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <SystemInit+0xd4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	2b06      	cmp	r3, #6
 8003c82:	d807      	bhi.n	8003c94 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <SystemInit+0xd4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 030f 	bic.w	r3, r3, #15
 8003c8c:	4a2a      	ldr	r2, [pc, #168]	; (8003d38 <SystemInit+0xd4>)
 8003c8e:	f043 0307 	orr.w	r3, r3, #7
 8003c92:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c94:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <SystemInit+0xd8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <SystemInit+0xd8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ca0:	4b26      	ldr	r3, [pc, #152]	; (8003d3c <SystemInit+0xd8>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <SystemInit+0xd8>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4924      	ldr	r1, [pc, #144]	; (8003d3c <SystemInit+0xd8>)
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <SystemInit+0xdc>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <SystemInit+0xd4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003cbe:	4b1e      	ldr	r3, [pc, #120]	; (8003d38 <SystemInit+0xd4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 030f 	bic.w	r3, r3, #15
 8003cc6:	4a1c      	ldr	r2, [pc, #112]	; (8003d38 <SystemInit+0xd4>)
 8003cc8:	f043 0307 	orr.w	r3, r3, #7
 8003ccc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003cce:	4b1b      	ldr	r3, [pc, #108]	; (8003d3c <SystemInit+0xd8>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003cd4:	4b19      	ldr	r3, [pc, #100]	; (8003d3c <SystemInit+0xd8>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <SystemInit+0xd8>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <SystemInit+0xd8>)
 8003ce2:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <SystemInit+0xe0>)
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ce6:	4b15      	ldr	r3, [pc, #84]	; (8003d3c <SystemInit+0xd8>)
 8003ce8:	4a17      	ldr	r2, [pc, #92]	; (8003d48 <SystemInit+0xe4>)
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cec:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <SystemInit+0xd8>)
 8003cee:	4a17      	ldr	r2, [pc, #92]	; (8003d4c <SystemInit+0xe8>)
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cf2:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <SystemInit+0xd8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cf8:	4b10      	ldr	r3, [pc, #64]	; (8003d3c <SystemInit+0xd8>)
 8003cfa:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <SystemInit+0xe8>)
 8003cfc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cfe:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <SystemInit+0xd8>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003d04:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <SystemInit+0xd8>)
 8003d06:	4a11      	ldr	r2, [pc, #68]	; (8003d4c <SystemInit+0xe8>)
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <SystemInit+0xd8>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d10:	4b0a      	ldr	r3, [pc, #40]	; (8003d3c <SystemInit+0xd8>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <SystemInit+0xd8>)
 8003d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003d1c:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <SystemInit+0xd8>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d22:	4b0b      	ldr	r3, [pc, #44]	; (8003d50 <SystemInit+0xec>)
 8003d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d2a:	bf00      	nop
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00
 8003d38:	52002000 	.word	0x52002000
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d44:	02020200 	.word	0x02020200
 8003d48:	01ff0000 	.word	0x01ff0000
 8003d4c:	01010280 	.word	0x01010280
 8003d50:	52004000 	.word	0x52004000

08003d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d58:	f7ff ff84 	bl	8003c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d5c:	480c      	ldr	r0, [pc, #48]	; (8003d90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d5e:	490d      	ldr	r1, [pc, #52]	; (8003d94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d64:	e002      	b.n	8003d6c <LoopCopyDataInit>

08003d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d6a:	3304      	adds	r3, #4

08003d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d70:	d3f9      	bcc.n	8003d66 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d78:	e001      	b.n	8003d7e <LoopFillZerobss>

08003d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d7c:	3204      	adds	r2, #4

08003d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d80:	d3fb      	bcc.n	8003d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d82:	f014 fb87 	bl	8018494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d86:	f7fd fcc7 	bl	8001718 <main>
  bx  lr
 8003d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d8c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003d90:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003d94:	240002c8 	.word	0x240002c8
  ldr r2, =_sidata
 8003d98:	0801c994 	.word	0x0801c994
  ldr r2, =_sbss
 8003d9c:	240002c8 	.word	0x240002c8
  ldr r4, =_ebss
 8003da0:	240034c0 	.word	0x240034c0

08003da4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003da4:	e7fe      	b.n	8003da4 <ADC3_IRQHandler>
	...

08003da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dae:	2003      	movs	r0, #3
 8003db0:	f001 fd06 	bl	80057c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003db4:	f006 fd94 	bl	800a8e0 <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_Init+0x68>)
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4913      	ldr	r1, [pc, #76]	; (8003e14 <HAL_Init+0x6c>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dd2:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <HAL_Init+0x68>)
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	4a0e      	ldr	r2, [pc, #56]	; (8003e14 <HAL_Init+0x6c>)
 8003ddc:	5cd3      	ldrb	r3, [r2, r3]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
 8003de8:	4a0b      	ldr	r2, [pc, #44]	; (8003e18 <HAL_Init+0x70>)
 8003dea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003dec:	4a0b      	ldr	r2, [pc, #44]	; (8003e1c <HAL_Init+0x74>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003df2:	200f      	movs	r0, #15
 8003df4:	f000 f814 	bl	8003e20 <HAL_InitTick>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e002      	b.n	8003e08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e02:	f7fe ff3b 	bl	8002c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	58024400 	.word	0x58024400
 8003e14:	0801c4e8 	.word	0x0801c4e8
 8003e18:	24000004 	.word	0x24000004
 8003e1c:	24000000 	.word	0x24000000

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_InitTick+0x60>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e021      	b.n	8003e78 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_InitTick+0x64>)
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <HAL_InitTick+0x60>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fceb 	bl	8005826 <HAL_SYSTICK_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e00e      	b.n	8003e78 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b0f      	cmp	r3, #15
 8003e5e:	d80a      	bhi.n	8003e76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e60:	2200      	movs	r2, #0
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	f001 fcb5 	bl	80057d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e6c:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <HAL_InitTick+0x68>)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	2400000c 	.word	0x2400000c
 8003e84:	24000000 	.word	0x24000000
 8003e88:	24000008 	.word	0x24000008

08003e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_IncTick+0x20>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	4b06      	ldr	r3, [pc, #24]	; (8003eb0 <HAL_IncTick+0x24>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	4a04      	ldr	r2, [pc, #16]	; (8003eb0 <HAL_IncTick+0x24>)
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	2400000c 	.word	0x2400000c
 8003eb0:	24001748 	.word	0x24001748

08003eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8003eb8:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <HAL_GetTick+0x14>)
 8003eba:	681b      	ldr	r3, [r3, #0]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	24001748 	.word	0x24001748

08003ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7ff ffee 	bl	8003eb4 <HAL_GetTick>
 8003ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee4:	d005      	beq.n	8003ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_Delay+0x44>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4413      	add	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ef2:	bf00      	nop
 8003ef4:	f7ff ffde 	bl	8003eb4 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d8f7      	bhi.n	8003ef4 <HAL_Delay+0x28>
  {
  }
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	2400000c 	.word	0x2400000c

08003f14 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003f1e:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	401a      	ands	r2, r3
 8003f28:	4904      	ldr	r1, [pc, #16]	; (8003f3c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	58000400 	.word	0x58000400

08003f40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	609a      	str	r2, [r3, #8]
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	3360      	adds	r3, #96	; 0x60
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	4a10      	ldr	r2, [pc, #64]	; (8004008 <LL_ADC_SetOffset+0x60>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d10b      	bne.n	8003fe4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003fe2:	e00b      	b.n	8003ffc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	430b      	orrs	r3, r1
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
}
 8003ffc:	bf00      	nop
 8003ffe:	371c      	adds	r7, #28
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	58026000 	.word	0x58026000

0800400c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	3360      	adds	r3, #96	; 0x60
 800401a:	461a      	mov	r2, r3
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	611a      	str	r2, [r3, #16]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3360      	adds	r3, #96	; 0x60
 8004084:	461a      	mov	r2, r3
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	431a      	orrs	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	601a      	str	r2, [r3, #0]
  }
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	58026000 	.word	0x58026000

080040b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d10e      	bne.n	80040e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3360      	adds	r3, #96	; 0x60
 80040c8:	461a      	mov	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	431a      	orrs	r2, r3
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	58026000 	.word	0x58026000

080040f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <LL_ADC_SetOffsetSign+0x40>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d10e      	bne.n	8004126 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	3360      	adds	r3, #96	; 0x60
 800410c:	461a      	mov	r2, r3
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	431a      	orrs	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	58026000 	.word	0x58026000

08004138 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3360      	adds	r3, #96	; 0x60
 8004148:	461a      	mov	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4a0c      	ldr	r2, [pc, #48]	; (8004188 <LL_ADC_SetOffsetState+0x50>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800416a:	e007      	b.n	800417c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	58026000 	.word	0x58026000

0800418c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3330      	adds	r3, #48	; 0x30
 800419c:	461a      	mov	r2, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	f003 030c 	and.w	r3, r3, #12
 80041a8:	4413      	add	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	211f      	movs	r1, #31
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0e9b      	lsrs	r3, r3, #26
 80041c4:	f003 011f 	and.w	r1, r3, #31
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	431a      	orrs	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3314      	adds	r3, #20
 80041f4:	461a      	mov	r2, r3
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	0e5b      	lsrs	r3, r3, #25
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0d1b      	lsrs	r3, r3, #20
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2107      	movs	r1, #7
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d115      	bne.n	800427c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f003 0318 	and.w	r3, r3, #24
 8004266:	4914      	ldr	r1, [pc, #80]	; (80042b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004268:	40d9      	lsrs	r1, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	400b      	ands	r3, r1
 800426e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004272:	431a      	orrs	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800427a:	e014      	b.n	80042a6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004288:	43db      	mvns	r3, r3
 800428a:	401a      	ands	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f003 0318 	and.w	r3, r3, #24
 8004292:	4909      	ldr	r1, [pc, #36]	; (80042b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004294:	40d9      	lsrs	r1, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	400b      	ands	r3, r1
 800429a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800429e:	431a      	orrs	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	58026000 	.word	0x58026000
 80042b8:	000fffff 	.word	0x000fffff

080042bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6093      	str	r3, [r2, #8]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	5fffffc0 	.word	0x5fffffc0

080042e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	4b05      	ldr	r3, [pc, #20]	; (800432c <LL_ADC_EnableInternalRegulator+0x24>)
 8004316:	4013      	ands	r3, r2
 8004318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	6fffffc0 	.word	0x6fffffc0

08004330 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004344:	d101      	bne.n	800434a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b01      	cmp	r3, #1
 800436a:	d101      	bne.n	8004370 <LL_ADC_IsEnabled+0x18>
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <LL_ADC_IsEnabled+0x1a>
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d101      	bne.n	8004396 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d101      	bne.n	80043bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
	...

080043cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b089      	sub	sp, #36	; 0x24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043d8:	2300      	movs	r3, #0
 80043da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e1ee      	b.n	80047c4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fe fc5b 	bl	8002cb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff ff67 	bl	80042e0 <LL_ADC_IsDeepPowerDownEnabled>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d004      	beq.n	8004422 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff4d 	bl	80042bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff ff82 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d114      	bne.n	800445c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff66 	bl	8004308 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800443c:	4b8e      	ldr	r3, [pc, #568]	; (8004678 <HAL_ADC_Init+0x2ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	4a8e      	ldr	r2, [pc, #568]	; (800467c <HAL_ADC_Init+0x2b0>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	099b      	lsrs	r3, r3, #6
 800444a:	3301      	adds	r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800444e:	e002      	b.n	8004456 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f9      	bne.n	8004450 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff ff65 	bl	8004330 <LL_ADC_IsInternalRegulatorEnabled>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d10d      	bne.n	8004488 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004470:	f043 0210 	orr.w	r2, r3, #16
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800447c:	f043 0201 	orr.w	r2, r3, #1
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff ff76 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 8004492:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004498:	f003 0310 	and.w	r3, r3, #16
 800449c:	2b00      	cmp	r3, #0
 800449e:	f040 8188 	bne.w	80047b2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f040 8184 	bne.w	80047b2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044b2:	f043 0202 	orr.w	r2, r3, #2
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff ff4a 	bl	8004358 <LL_ADC_IsEnabled>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d136      	bne.n	8004538 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6c      	ldr	r2, [pc, #432]	; (8004680 <HAL_ADC_Init+0x2b4>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_ADC_Init+0x112>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a6a      	ldr	r2, [pc, #424]	; (8004684 <HAL_ADC_Init+0x2b8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d10e      	bne.n	80044fc <HAL_ADC_Init+0x130>
 80044de:	4868      	ldr	r0, [pc, #416]	; (8004680 <HAL_ADC_Init+0x2b4>)
 80044e0:	f7ff ff3a 	bl	8004358 <LL_ADC_IsEnabled>
 80044e4:	4604      	mov	r4, r0
 80044e6:	4867      	ldr	r0, [pc, #412]	; (8004684 <HAL_ADC_Init+0x2b8>)
 80044e8:	f7ff ff36 	bl	8004358 <LL_ADC_IsEnabled>
 80044ec:	4603      	mov	r3, r0
 80044ee:	4323      	orrs	r3, r4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_ADC_Init+0x142>
 80044fc:	4862      	ldr	r0, [pc, #392]	; (8004688 <HAL_ADC_Init+0x2bc>)
 80044fe:	f7ff ff2b 	bl	8004358 <LL_ADC_IsEnabled>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d012      	beq.n	8004538 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5a      	ldr	r2, [pc, #360]	; (8004680 <HAL_ADC_Init+0x2b4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_ADC_Init+0x15a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a58      	ldr	r2, [pc, #352]	; (8004684 <HAL_ADC_Init+0x2b8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d101      	bne.n	800452a <HAL_ADC_Init+0x15e>
 8004526:	4a59      	ldr	r2, [pc, #356]	; (800468c <HAL_ADC_Init+0x2c0>)
 8004528:	e000      	b.n	800452c <HAL_ADC_Init+0x160>
 800452a:	4a59      	ldr	r2, [pc, #356]	; (8004690 <HAL_ADC_Init+0x2c4>)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7ff fd04 	bl	8003f40 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <HAL_ADC_Init+0x2bc>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d129      	bne.n	8004596 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	7e5b      	ldrb	r3, [r3, #25]
 8004546:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800454c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004552:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	2b08      	cmp	r3, #8
 800455a:	d013      	beq.n	8004584 <HAL_ADC_Init+0x1b8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b0c      	cmp	r3, #12
 8004562:	d00d      	beq.n	8004580 <HAL_ADC_Init+0x1b4>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b1c      	cmp	r3, #28
 800456a:	d007      	beq.n	800457c <HAL_ADC_Init+0x1b0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b18      	cmp	r3, #24
 8004572:	d101      	bne.n	8004578 <HAL_ADC_Init+0x1ac>
 8004574:	2318      	movs	r3, #24
 8004576:	e006      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004578:	2300      	movs	r3, #0
 800457a:	e004      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 800457c:	2310      	movs	r3, #16
 800457e:	e002      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004580:	2308      	movs	r3, #8
 8004582:	e000      	b.n	8004586 <HAL_ADC_Init+0x1ba>
 8004584:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004586:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004590:	4313      	orrs	r3, r2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e00e      	b.n	80045b4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	7e5b      	ldrb	r3, [r3, #25]
 800459a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80045a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80045b0:	4313      	orrs	r3, r2
 80045b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d106      	bne.n	80045cc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	3b01      	subs	r3, #1
 80045c4:	045b      	lsls	r3, r3, #17
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d009      	beq.n	80045e8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a26      	ldr	r2, [pc, #152]	; (8004688 <HAL_ADC_Init+0x2bc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d115      	bne.n	800461e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	4b26      	ldr	r3, [pc, #152]	; (8004694 <HAL_ADC_Init+0x2c8>)
 80045fa:	4013      	ands	r3, r2
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	430b      	orrs	r3, r1
 8004604:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	611a      	str	r2, [r3, #16]
 800461c:	e009      	b.n	8004632 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <HAL_ADC_Init+0x2cc>)
 8004626:	4013      	ands	r3, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	69b9      	ldr	r1, [r7, #24]
 800462e:	430b      	orrs	r3, r1
 8004630:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fea1 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 800463c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff feae 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 8004648:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 808e 	bne.w	800476e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	f040 808a 	bne.w	800476e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a0a      	ldr	r2, [pc, #40]	; (8004688 <HAL_ADC_Init+0x2bc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d11b      	bne.n	800469c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	7e1b      	ldrb	r3, [r3, #24]
 8004668:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004670:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e018      	b.n	80046aa <HAL_ADC_Init+0x2de>
 8004678:	24000000 	.word	0x24000000
 800467c:	053e2d63 	.word	0x053e2d63
 8004680:	40022000 	.word	0x40022000
 8004684:	40022100 	.word	0x40022100
 8004688:	58026000 	.word	0x58026000
 800468c:	40022300 	.word	0x40022300
 8004690:	58026300 	.word	0x58026300
 8004694:	fff04007 	.word	0xfff04007
 8004698:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	7e1b      	ldrb	r3, [r3, #24]
 80046a0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80046a6:	4313      	orrs	r3, r2
 80046a8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	4b46      	ldr	r3, [pc, #280]	; (80047cc <HAL_ADC_Init+0x400>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	430b      	orrs	r3, r1
 80046bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d137      	bne.n	8004738 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a3f      	ldr	r2, [pc, #252]	; (80047d0 <HAL_ADC_Init+0x404>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d116      	bne.n	8004706 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	4b3d      	ldr	r3, [pc, #244]	; (80047d4 <HAL_ADC_Init+0x408>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80046ea:	4311      	orrs	r1, r2
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046f0:	4311      	orrs	r1, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80046f6:	430a      	orrs	r2, r1
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f042 0201 	orr.w	r2, r2, #1
 8004702:	611a      	str	r2, [r3, #16]
 8004704:	e020      	b.n	8004748 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_ADC_Init+0x40c>)
 800470e:	4013      	ands	r3, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004714:	3a01      	subs	r2, #1
 8004716:	0411      	lsls	r1, r2, #16
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800471c:	4311      	orrs	r1, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004728:	430a      	orrs	r2, r1
 800472a:	431a      	orrs	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f042 0201 	orr.w	r2, r2, #1
 8004734:	611a      	str	r2, [r3, #16]
 8004736:	e007      	b.n	8004748 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_ADC_Init+0x404>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d002      	beq.n	800476e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fd63 	bl	8005234 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d10c      	bne.n	8004790 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	f023 010f 	bic.w	r1, r3, #15
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	1e5a      	subs	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
 800478e:	e007      	b.n	80047a0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 020f 	bic.w	r2, r2, #15
 800479e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	f023 0303 	bic.w	r3, r3, #3
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60
 80047b0:	e007      	b.n	80047c2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b6:	f043 0210 	orr.w	r2, r3, #16
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}
 80047cc:	ffffbffc 	.word	0xffffbffc
 80047d0:	58026000 	.word	0x58026000
 80047d4:	fc00f81f 	.word	0xfc00f81f
 80047d8:	fc00f81e 	.word	0xfc00f81e

080047dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b0b9      	sub	sp, #228	; 0xe4
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047f6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4aa9      	ldr	r2, [pc, #676]	; (8004aa4 <HAL_ADC_ConfigChannel+0x2c8>)
 80047fe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d102      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x34>
 800480a:	2302      	movs	r3, #2
 800480c:	f000 bcfa 	b.w	8005204 <HAL_ADC_ConfigChannel+0xa28>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff fdae 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 84de 	bne.w	80051e6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a9e      	ldr	r2, [pc, #632]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d033      	beq.n	800489c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800483c:	2b00      	cmp	r3, #0
 800483e:	d108      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x76>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	0e9b      	lsrs	r3, r3, #26
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2201      	movs	r2, #1
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	e01d      	b.n	800488e <HAL_ADC_ConfigChannel+0xb2>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800485e:	fa93 f3a3 	rbit	r3, r3
 8004862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004866:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800486a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800486e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004876:	2320      	movs	r3, #32
 8004878:	e004      	b.n	8004884 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800487a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	2201      	movs	r2, #1
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	69d1      	ldr	r1, [r2, #28]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	430b      	orrs	r3, r1
 800489a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	f7ff fc6f 	bl	800418c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7ff fd63 	bl	800437e <LL_ADC_REG_IsConversionOngoing>
 80048b8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fd6f 	bl	80043a4 <LL_ADC_INJ_IsConversionOngoing>
 80048c6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 8270 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 826b 	bne.w	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6818      	ldr	r0, [r3, #0]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f7ff fc7a 	bl	80041e4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6c      	ldr	r2, [pc, #432]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d10d      	bne.n	8004916 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	08db      	lsrs	r3, r3, #3
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004914:	e032      	b.n	800497c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004916:	4b65      	ldr	r3, [pc, #404]	; (8004aac <HAL_ADC_ConfigChannel+0x2d0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800491e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004922:	d10b      	bne.n	800493c <HAL_ADC_ConfigChannel+0x160>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	089b      	lsrs	r3, r3, #2
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	fa02 f303 	lsl.w	r3, r2, r3
 800493a:	e01d      	b.n	8004978 <HAL_ADC_ConfigChannel+0x19c>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10b      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x186>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	089b      	lsrs	r3, r3, #2
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	e00a      	b.n	8004978 <HAL_ADC_ConfigChannel+0x19c>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b04      	cmp	r3, #4
 8004982:	d048      	beq.n	8004a16 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6919      	ldr	r1, [r3, #16]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004994:	f7ff fb08 	bl	8003fa8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d119      	bne.n	80049d6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	6919      	ldr	r1, [r3, #16]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f7ff fba0 	bl	80040f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6919      	ldr	r1, [r3, #16]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1f0>
 80049c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ca:	e000      	b.n	80049ce <HAL_ADC_ConfigChannel+0x1f2>
 80049cc:	2300      	movs	r3, #0
 80049ce:	461a      	mov	r2, r3
 80049d0:	f7ff fb6e 	bl	80040b0 <LL_ADC_SetOffsetSaturation>
 80049d4:	e1ee      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d102      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x212>
 80049e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049ec:	e000      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x214>
 80049ee:	2300      	movs	r3, #0
 80049f0:	461a      	mov	r2, r3
 80049f2:	f7ff fb3b 	bl	800406c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7e1b      	ldrb	r3, [r3, #24]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d102      	bne.n	8004a0c <HAL_ADC_ConfigChannel+0x230>
 8004a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004a0a:	e000      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x232>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	461a      	mov	r2, r3
 8004a10:	f7ff fb12 	bl	8004038 <LL_ADC_SetDataRightShift>
 8004a14:	e1ce      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a23      	ldr	r2, [pc, #140]	; (8004aa8 <HAL_ADC_ConfigChannel+0x2cc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	f040 8181 	bne.w	8004d24 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2100      	movs	r1, #0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff faef 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x272>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fae4 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a44:	4603      	mov	r3, r0
 8004a46:	0e9b      	lsrs	r3, r3, #26
 8004a48:	f003 021f 	and.w	r2, r3, #31
 8004a4c:	e01e      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x2b0>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff fad9 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a64:	fa93 f3a3 	rbit	r3, r3
 8004a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004a6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004a74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004a7c:	2320      	movs	r3, #32
 8004a7e:	e004      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004a80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a84:	fab3 f383 	clz	r3, r3
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10b      	bne.n	8004ab0 <HAL_ADC_ConfigChannel+0x2d4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	e01e      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x306>
 8004aa4:	47ff0000 	.word	0x47ff0000
 8004aa8:	58026000 	.word	0x58026000
 8004aac:	5c001000 	.word	0x5c001000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004abc:	fa93 f3a3 	rbit	r3, r3
 8004ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004ad4:	2320      	movs	r3, #32
 8004ad6:	e004      	b.n	8004ae2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004ad8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d106      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2200      	movs	r2, #0
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fb22 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2101      	movs	r1, #1
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa86 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b00:	4603      	mov	r3, r0
 8004b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x344>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fa7b 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b16:	4603      	mov	r3, r0
 8004b18:	0e9b      	lsrs	r3, r3, #26
 8004b1a:	f003 021f 	and.w	r2, r3, #31
 8004b1e:	e01e      	b.n	8004b5e <HAL_ADC_ConfigChannel+0x382>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2101      	movs	r1, #1
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fa70 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b36:	fa93 f3a3 	rbit	r3, r3
 8004b3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004b3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004b4e:	2320      	movs	r3, #32
 8004b50:	e004      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004b52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x39a>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	0e9b      	lsrs	r3, r3, #26
 8004b70:	f003 031f 	and.w	r3, r3, #31
 8004b74:	e018      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x3cc>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b82:	fa93 f3a3 	rbit	r3, r3
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004b9a:	2320      	movs	r3, #32
 8004b9c:	e004      	b.n	8004ba8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fabf 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fa23 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x40a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2102      	movs	r1, #2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7ff fa18 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 021f 	and.w	r2, r3, #31
 8004be4:	e01e      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x448>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fa0d 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfc:	fa93 f3a3 	rbit	r3, r3
 8004c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004c04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d101      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004c14:	2320      	movs	r3, #32
 8004c16:	e004      	b.n	8004c22 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c1c:	fab3 f383 	clz	r3, r3
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x460>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	0e9b      	lsrs	r3, r3, #26
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	e014      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x48a>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c44:	fa93 f3a3 	rbit	r3, r3
 8004c48:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004c50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004c58:	2320      	movs	r3, #32
 8004c5a:	e004      	b.n	8004c66 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c60:	fab3 f383 	clz	r3, r3
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d106      	bne.n	8004c78 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff fa60 	bl	8004138 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2103      	movs	r1, #3
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff f9c4 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004c84:	4603      	mov	r3, r0
 8004c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_ADC_ConfigChannel+0x4c8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2103      	movs	r1, #3
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7ff f9b9 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	0e9b      	lsrs	r3, r3, #26
 8004c9e:	f003 021f 	and.w	r2, r3, #31
 8004ca2:	e017      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x4f8>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2103      	movs	r1, #3
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f9ae 	bl	800400c <LL_ADC_GetOffsetChannel>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cb6:	fa93 f3a3 	rbit	r3, r3
 8004cba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004cc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	e003      	b.n	8004cd2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ccc:	fab3 f383 	clz	r3, r3
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_ADC_ConfigChannel+0x510>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	0e9b      	lsrs	r3, r3, #26
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	e011      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x534>
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cfc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004cfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004d04:	2320      	movs	r3, #32
 8004d06:	e003      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d14f      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2103      	movs	r1, #3
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fa0b 	bl	8004138 <LL_ADC_SetOffsetState>
 8004d22:	e047      	b.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	069b      	lsls	r3, r3, #26
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d107      	bne.n	8004d48 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	069b      	lsls	r3, r3, #26
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d107      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d6a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	069b      	lsls	r3, r3, #26
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d107      	bne.n	8004d90 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004d8e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	069b      	lsls	r3, r3, #26
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d107      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004db2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff facd 	bl	8004358 <LL_ADC_IsEnabled>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8219 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6819      	ldr	r1, [r3, #0]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f7ff fa32 	bl	800423c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4aa1      	ldr	r2, [pc, #644]	; (8005064 <HAL_ADC_ConfigChannel+0x888>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	f040 812e 	bne.w	8005040 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_ADC_ConfigChannel+0x630>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	0e9b      	lsrs	r3, r3, #26
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	f003 031f 	and.w	r3, r3, #31
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	bf94      	ite	ls
 8004e04:	2301      	movls	r3, #1
 8004e06:	2300      	movhi	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	e019      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x664>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e14:	fa93 f3a3 	rbit	r3, r3
 8004e18:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004e24:	2320      	movs	r3, #32
 8004e26:	e003      	b.n	8004e30 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004e28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	3301      	adds	r3, #1
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2b09      	cmp	r3, #9
 8004e38:	bf94      	ite	ls
 8004e3a:	2301      	movls	r3, #1
 8004e3c:	2300      	movhi	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d079      	beq.n	8004f38 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d107      	bne.n	8004e60 <HAL_ADC_ConfigChannel+0x684>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	0e9b      	lsrs	r3, r3, #26
 8004e56:	3301      	adds	r3, #1
 8004e58:	069b      	lsls	r3, r3, #26
 8004e5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e5e:	e015      	b.n	8004e8c <HAL_ADC_ConfigChannel+0x6b0>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e68:	fa93 f3a3 	rbit	r3, r3
 8004e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e70:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004e78:	2320      	movs	r3, #32
 8004e7a:	e003      	b.n	8004e84 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	069b      	lsls	r3, r3, #26
 8004e88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d109      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x6d0>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	0e9b      	lsrs	r3, r3, #26
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eaa:	e017      	b.n	8004edc <HAL_ADC_ConfigChannel+0x700>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004eb4:	fa93 f3a3 	rbit	r3, r3
 8004eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	e003      	b.n	8004ed0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eca:	fab3 f383 	clz	r3, r3
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x726>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f003 021f 	and.w	r2, r3, #31
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	051b      	lsls	r3, r3, #20
 8004f00:	e018      	b.n	8004f34 <HAL_ADC_ConfigChannel+0x758>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004f1a:	2320      	movs	r3, #32
 8004f1c:	e003      	b.n	8004f26 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f20:	fab3 f383 	clz	r3, r3
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	3301      	adds	r3, #1
 8004f28:	f003 021f 	and.w	r2, r3, #31
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	4413      	add	r3, r2
 8004f32:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f34:	430b      	orrs	r3, r1
 8004f36:	e07e      	b.n	8005036 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x778>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	069b      	lsls	r3, r3, #26
 8004f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f52:	e015      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x7a4>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	fa93 f3a3 	rbit	r3, r3
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	e003      	b.n	8004f78 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f72:	fab3 f383 	clz	r3, r3
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	3301      	adds	r3, #1
 8004f7a:	069b      	lsls	r3, r3, #26
 8004f7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x7c4>
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	0e9b      	lsrs	r3, r3, #26
 8004f92:	3301      	adds	r3, #1
 8004f94:	f003 031f 	and.w	r3, r3, #31
 8004f98:	2101      	movs	r1, #1
 8004f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f9e:	e017      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x7f4>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	fa93 f3a3 	rbit	r3, r3
 8004fac:	61bb      	str	r3, [r7, #24]
  return result;
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004fb8:	2320      	movs	r3, #32
 8004fba:	e003      	b.n	8004fc4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	fab3 f383 	clz	r3, r3
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	2101      	movs	r1, #1
 8004fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd0:	ea42 0103 	orr.w	r1, r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10d      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x820>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0e9b      	lsrs	r3, r3, #26
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	f003 021f 	and.w	r2, r3, #31
 8004fec:	4613      	mov	r3, r2
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3b1e      	subs	r3, #30
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	e01b      	b.n	8005034 <HAL_ADC_ConfigChannel+0x858>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	60fb      	str	r3, [r7, #12]
  return result;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 021f 	and.w	r2, r3, #31
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	3b1e      	subs	r3, #30
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005034:	430b      	orrs	r3, r1
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	4619      	mov	r1, r3
 800503c:	f7ff f8d2 	bl	80041e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	f280 80d7 	bge.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a06      	ldr	r2, [pc, #24]	; (8005068 <HAL_ADC_ConfigChannel+0x88c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_ADC_ConfigChannel+0x882>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a04      	ldr	r2, [pc, #16]	; (800506c <HAL_ADC_ConfigChannel+0x890>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x898>
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <HAL_ADC_ConfigChannel+0x894>)
 8005060:	e009      	b.n	8005076 <HAL_ADC_ConfigChannel+0x89a>
 8005062:	bf00      	nop
 8005064:	47ff0000 	.word	0x47ff0000
 8005068:	40022000 	.word	0x40022000
 800506c:	40022100 	.word	0x40022100
 8005070:	40022300 	.word	0x40022300
 8005074:	4b65      	ldr	r3, [pc, #404]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ff88 	bl	8003f8c <LL_ADC_GetCommonPathInternalCh>
 800507c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a62      	ldr	r2, [pc, #392]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d004      	beq.n	8005094 <HAL_ADC_ConfigChannel+0x8b8>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a61      	ldr	r2, [pc, #388]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10e      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x8d6>
 8005094:	485e      	ldr	r0, [pc, #376]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005096:	f7ff f95f 	bl	8004358 <LL_ADC_IsEnabled>
 800509a:	4604      	mov	r4, r0
 800509c:	485d      	ldr	r0, [pc, #372]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 800509e:	f7ff f95b 	bl	8004358 <LL_ADC_IsEnabled>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4323      	orrs	r3, r4
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	e008      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x8e8>
 80050b2:	4859      	ldr	r0, [pc, #356]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80050b4:	f7ff f950 	bl	8004358 <LL_ADC_IsEnabled>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf0c      	ite	eq
 80050be:	2301      	moveq	r3, #1
 80050c0:	2300      	movne	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8084 	beq.w	80051d2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a53      	ldr	r2, [pc, #332]	; (800521c <HAL_ADC_ConfigChannel+0xa40>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d132      	bne.n	800513a <HAL_ADC_ConfigChannel+0x95e>
 80050d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80050d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d12c      	bne.n	800513a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a4c      	ldr	r2, [pc, #304]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	f040 8086 	bne.w	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a47      	ldr	r2, [pc, #284]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d004      	beq.n	8005100 <HAL_ADC_ConfigChannel+0x924>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a46      	ldr	r2, [pc, #280]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d101      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x928>
 8005100:	4a47      	ldr	r2, [pc, #284]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 8005102:	e000      	b.n	8005106 <HAL_ADC_ConfigChannel+0x92a>
 8005104:	4a41      	ldr	r2, [pc, #260]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800510a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800510e:	4619      	mov	r1, r3
 8005110:	4610      	mov	r0, r2
 8005112:	f7fe ff28 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005116:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_ADC_ConfigChannel+0xa48>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	4a42      	ldr	r2, [pc, #264]	; (8005228 <HAL_ADC_ConfigChannel+0xa4c>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	3301      	adds	r3, #1
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800512a:	e002      	b.n	8005132 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3b01      	subs	r3, #1
 8005130:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f9      	bne.n	800512c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005138:	e05e      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3b      	ldr	r2, [pc, #236]	; (800522c <HAL_ADC_ConfigChannel+0xa50>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d120      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x9aa>
 8005144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11a      	bne.n	8005186 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a30      	ldr	r2, [pc, #192]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d14e      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d004      	beq.n	800516e <HAL_ADC_ConfigChannel+0x992>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2a      	ldr	r2, [pc, #168]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d101      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x996>
 800516e:	4a2c      	ldr	r2, [pc, #176]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 8005170:	e000      	b.n	8005174 <HAL_ADC_ConfigChannel+0x998>
 8005172:	4a26      	ldr	r2, [pc, #152]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 8005174:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005178:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fef1 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005184:	e038      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a29      	ldr	r2, [pc, #164]	; (8005230 <HAL_ADC_ConfigChannel+0xa54>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d133      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
 8005190:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d12d      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1d      	ldr	r2, [pc, #116]	; (8005218 <HAL_ADC_ConfigChannel+0xa3c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d128      	bne.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a19      	ldr	r2, [pc, #100]	; (8005210 <HAL_ADC_ConfigChannel+0xa34>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d004      	beq.n	80051ba <HAL_ADC_ConfigChannel+0x9de>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a17      	ldr	r2, [pc, #92]	; (8005214 <HAL_ADC_ConfigChannel+0xa38>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_ADC_ConfigChannel+0x9e2>
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_ADC_ConfigChannel+0xa44>)
 80051bc:	e000      	b.n	80051c0 <HAL_ADC_ConfigChannel+0x9e4>
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_ADC_ConfigChannel+0xa30>)
 80051c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051c8:	4619      	mov	r1, r3
 80051ca:	4610      	mov	r0, r2
 80051cc:	f7fe fecb 	bl	8003f66 <LL_ADC_SetCommonPathInternalCh>
 80051d0:	e012      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d6:	f043 0220 	orr.w	r2, r3, #32
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80051e4:	e008      	b.n	80051f8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ea:	f043 0220 	orr.w	r2, r3, #32
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005200:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005204:	4618      	mov	r0, r3
 8005206:	37e4      	adds	r7, #228	; 0xe4
 8005208:	46bd      	mov	sp, r7
 800520a:	bd90      	pop	{r4, r7, pc}
 800520c:	58026300 	.word	0x58026300
 8005210:	40022000 	.word	0x40022000
 8005214:	40022100 	.word	0x40022100
 8005218:	58026000 	.word	0x58026000
 800521c:	c7520000 	.word	0xc7520000
 8005220:	40022300 	.word	0x40022300
 8005224:	24000000 	.word	0x24000000
 8005228:	053e2d63 	.word	0x053e2d63
 800522c:	c3210000 	.word	0xc3210000
 8005230:	cb840000 	.word	0xcb840000

08005234 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a6c      	ldr	r2, [pc, #432]	; (80053f4 <ADC_ConfigureBoostMode+0x1c0>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d004      	beq.n	8005250 <ADC_ConfigureBoostMode+0x1c>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a6b      	ldr	r2, [pc, #428]	; (80053f8 <ADC_ConfigureBoostMode+0x1c4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d109      	bne.n	8005264 <ADC_ConfigureBoostMode+0x30>
 8005250:	4b6a      	ldr	r3, [pc, #424]	; (80053fc <ADC_ConfigureBoostMode+0x1c8>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005258:	2b00      	cmp	r3, #0
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <ADC_ConfigureBoostMode+0x42>
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <ADC_ConfigureBoostMode+0x1cc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01c      	beq.n	80052b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800527a:	f005 fcab 	bl	800abd4 <HAL_RCC_GetHCLKFreq>
 800527e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005288:	d010      	beq.n	80052ac <ADC_ConfigureBoostMode+0x78>
 800528a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800528e:	d873      	bhi.n	8005378 <ADC_ConfigureBoostMode+0x144>
 8005290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005294:	d002      	beq.n	800529c <ADC_ConfigureBoostMode+0x68>
 8005296:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800529a:	d16d      	bne.n	8005378 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a8:	60fb      	str	r3, [r7, #12]
        break;
 80052aa:	e068      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	089b      	lsrs	r3, r3, #2
 80052b0:	60fb      	str	r3, [r7, #12]
        break;
 80052b2:	e064      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80052b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80052b8:	f04f 0100 	mov.w	r1, #0
 80052bc:	f006 fe86 	bl	800bfcc <HAL_RCCEx_GetPeriphCLKFreq>
 80052c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052ca:	d051      	beq.n	8005370 <ADC_ConfigureBoostMode+0x13c>
 80052cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80052d0:	d854      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052d6:	d047      	beq.n	8005368 <ADC_ConfigureBoostMode+0x134>
 80052d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80052dc:	d84e      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052e2:	d03d      	beq.n	8005360 <ADC_ConfigureBoostMode+0x12c>
 80052e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80052e8:	d848      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052ee:	d033      	beq.n	8005358 <ADC_ConfigureBoostMode+0x124>
 80052f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052f4:	d842      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 80052f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80052fa:	d029      	beq.n	8005350 <ADC_ConfigureBoostMode+0x11c>
 80052fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005300:	d83c      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005302:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005306:	d01a      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005308:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800530c:	d836      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 800530e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005312:	d014      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005314:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005318:	d830      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531e:	d00e      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005324:	d82a      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005326:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800532a:	d008      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 800532c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005330:	d824      	bhi.n	800537c <ADC_ConfigureBoostMode+0x148>
 8005332:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005336:	d002      	beq.n	800533e <ADC_ConfigureBoostMode+0x10a>
 8005338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533c:	d11e      	bne.n	800537c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	0c9b      	lsrs	r3, r3, #18
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	fbb2 f3f3 	udiv	r3, r2, r3
 800534c:	60fb      	str	r3, [r7, #12]
        break;
 800534e:	e016      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	091b      	lsrs	r3, r3, #4
 8005354:	60fb      	str	r3, [r7, #12]
        break;
 8005356:	e012      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	60fb      	str	r3, [r7, #12]
        break;
 800535e:	e00e      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	099b      	lsrs	r3, r3, #6
 8005364:	60fb      	str	r3, [r7, #12]
        break;
 8005366:	e00a      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	09db      	lsrs	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
        break;
 800536e:	e006      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	60fb      	str	r3, [r7, #12]
        break;
 8005376:	e002      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800537c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <ADC_ConfigureBoostMode+0x1d0>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d808      	bhi.n	800539e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800539a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800539c:	e025      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	4a19      	ldr	r2, [pc, #100]	; (8005408 <ADC_ConfigureBoostMode+0x1d4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d80a      	bhi.n	80053bc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b8:	609a      	str	r2, [r3, #8]
}
 80053ba:	e016      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a13      	ldr	r2, [pc, #76]	; (800540c <ADC_ConfigureBoostMode+0x1d8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d80a      	bhi.n	80053da <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	609a      	str	r2, [r3, #8]
}
 80053d8:	e007      	b.n	80053ea <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80053e8:	609a      	str	r2, [r3, #8]
}
 80053ea:	bf00      	nop
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40022000 	.word	0x40022000
 80053f8:	40022100 	.word	0x40022100
 80053fc:	40022300 	.word	0x40022300
 8005400:	58026300 	.word	0x58026300
 8005404:	005f5e10 	.word	0x005f5e10
 8005408:	00bebc20 	.word	0x00bebc20
 800540c:	017d7840 	.word	0x017d7840

08005410 <LL_ADC_IsEnabled>:
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <LL_ADC_IsEnabled+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_ADC_IsEnabled+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_ADC_REG_IsConversionOngoing>:
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b04      	cmp	r3, #4
 8005448:	d101      	bne.n	800544e <LL_ADC_REG_IsConversionOngoing+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800545c:	b590      	push	{r4, r7, lr}
 800545e:	b0a3      	sub	sp, #140	; 0x8c
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005466:	2300      	movs	r3, #0
 8005468:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005476:	2302      	movs	r3, #2
 8005478:	e0c1      	b.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005482:	2300      	movs	r3, #0
 8005484:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a5e      	ldr	r2, [pc, #376]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d102      	bne.n	800549a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005494:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005496:	60fb      	str	r3, [r7, #12]
 8005498:	e001      	b.n	800549e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a8:	f043 0220 	orr.w	r2, r3, #32
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e0a0      	b.n	80055fe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff ffb9 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 80054c4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ffb2 	bl	8005436 <LL_ADC_REG_IsConversionOngoing>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f040 8081 	bne.w	80055dc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80054da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d17c      	bne.n	80055dc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a48      	ldr	r2, [pc, #288]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a46      	ldr	r2, [pc, #280]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d101      	bne.n	80054fa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80054f6:	4b46      	ldr	r3, [pc, #280]	; (8005610 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80054f8:	e000      	b.n	80054fc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80054fa:	4b46      	ldr	r3, [pc, #280]	; (8005614 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80054fc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d039      	beq.n	800557a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	431a      	orrs	r2, r3
 8005514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005516:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a3a      	ldr	r2, [pc, #232]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d004      	beq.n	800552c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a39      	ldr	r2, [pc, #228]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d10e      	bne.n	800554a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800552c:	4836      	ldr	r0, [pc, #216]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800552e:	f7ff ff6f 	bl	8005410 <LL_ADC_IsEnabled>
 8005532:	4604      	mov	r4, r0
 8005534:	4835      	ldr	r0, [pc, #212]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005536:	f7ff ff6b 	bl	8005410 <LL_ADC_IsEnabled>
 800553a:	4603      	mov	r3, r0
 800553c:	4323      	orrs	r3, r4
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	e008      	b.n	800555c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800554a:	4833      	ldr	r0, [pc, #204]	; (8005618 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800554c:	f7ff ff60 	bl	8005410 <LL_ADC_IsEnabled>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d047      	beq.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005566:	4013      	ands	r3, r2
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	6811      	ldr	r1, [r2, #0]
 800556c:	683a      	ldr	r2, [r7, #0]
 800556e:	6892      	ldr	r2, [r2, #8]
 8005570:	430a      	orrs	r2, r1
 8005572:	431a      	orrs	r2, r3
 8005574:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005576:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005578:	e03a      	b.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800557a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005582:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005584:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a1f      	ldr	r2, [pc, #124]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d004      	beq.n	800559a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1d      	ldr	r2, [pc, #116]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10e      	bne.n	80055b8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800559a:	481b      	ldr	r0, [pc, #108]	; (8005608 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800559c:	f7ff ff38 	bl	8005410 <LL_ADC_IsEnabled>
 80055a0:	4604      	mov	r4, r0
 80055a2:	481a      	ldr	r0, [pc, #104]	; (800560c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055a4:	f7ff ff34 	bl	8005410 <LL_ADC_IsEnabled>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4323      	orrs	r3, r4
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	e008      	b.n	80055ca <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80055b8:	4817      	ldr	r0, [pc, #92]	; (8005618 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80055ba:	f7ff ff29 	bl	8005410 <LL_ADC_IsEnabled>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf0c      	ite	eq
 80055c4:	2301      	moveq	r3, #1
 80055c6:	2300      	movne	r3, #0
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80055ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055d0:	689a      	ldr	r2, [r3, #8]
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80055d4:	4013      	ands	r3, r2
 80055d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055da:	e009      	b.n	80055f0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80055ee:	e000      	b.n	80055f2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80055fa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80055fe:	4618      	mov	r0, r3
 8005600:	378c      	adds	r7, #140	; 0x8c
 8005602:	46bd      	mov	sp, r7
 8005604:	bd90      	pop	{r4, r7, pc}
 8005606:	bf00      	nop
 8005608:	40022000 	.word	0x40022000
 800560c:	40022100 	.word	0x40022100
 8005610:	40022300 	.word	0x40022300
 8005614:	58026300 	.word	0x58026300
 8005618:	58026000 	.word	0x58026000
 800561c:	fffff0e0 	.word	0xfffff0e0

08005620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005630:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <__NVIC_SetPriorityGrouping+0x40>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800563c:	4013      	ands	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <__NVIC_SetPriorityGrouping+0x44>)
 800564a:	4313      	orrs	r3, r2
 800564c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800564e:	4a04      	ldr	r2, [pc, #16]	; (8005660 <__NVIC_SetPriorityGrouping+0x40>)
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	60d3      	str	r3, [r2, #12]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	e000ed00 	.word	0xe000ed00
 8005664:	05fa0000 	.word	0x05fa0000

08005668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <__NVIC_GetPriorityGrouping+0x18>)
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	0a1b      	lsrs	r3, r3, #8
 8005672:	f003 0307 	and.w	r3, r3, #7
}
 8005676:	4618      	mov	r0, r3
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	e000ed00 	.word	0xe000ed00

08005684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800568e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	db0b      	blt.n	80056ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	f003 021f 	and.w	r2, r3, #31
 800569c:	4907      	ldr	r1, [pc, #28]	; (80056bc <__NVIC_EnableIRQ+0x38>)
 800569e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2001      	movs	r0, #1
 80056a6:	fa00 f202 	lsl.w	r2, r0, r2
 80056aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	e000e100 	.word	0xe000e100

080056c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	4603      	mov	r3, r0
 80056c8:	6039      	str	r1, [r7, #0]
 80056ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80056cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db0a      	blt.n	80056ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <__NVIC_SetPriority+0x4c>)
 80056da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056de:	0112      	lsls	r2, r2, #4
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	440b      	add	r3, r1
 80056e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056e8:	e00a      	b.n	8005700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	4908      	ldr	r1, [pc, #32]	; (8005710 <__NVIC_SetPriority+0x50>)
 80056f0:	88fb      	ldrh	r3, [r7, #6]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	3b04      	subs	r3, #4
 80056f8:	0112      	lsls	r2, r2, #4
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	440b      	add	r3, r1
 80056fe:	761a      	strb	r2, [r3, #24]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	e000e100 	.word	0xe000e100
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f1c3 0307 	rsb	r3, r3, #7
 800572e:	2b04      	cmp	r3, #4
 8005730:	bf28      	it	cs
 8005732:	2304      	movcs	r3, #4
 8005734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3304      	adds	r3, #4
 800573a:	2b06      	cmp	r3, #6
 800573c:	d902      	bls.n	8005744 <NVIC_EncodePriority+0x30>
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	3b03      	subs	r3, #3
 8005742:	e000      	b.n	8005746 <NVIC_EncodePriority+0x32>
 8005744:	2300      	movs	r3, #0
 8005746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005748:	f04f 32ff 	mov.w	r2, #4294967295
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	401a      	ands	r2, r3
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800575c:	f04f 31ff 	mov.w	r1, #4294967295
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	43d9      	mvns	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800576c:	4313      	orrs	r3, r2
         );
}
 800576e:	4618      	mov	r0, r3
 8005770:	3724      	adds	r7, #36	; 0x24
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	3b01      	subs	r3, #1
 8005788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800578c:	d301      	bcc.n	8005792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800578e:	2301      	movs	r3, #1
 8005790:	e00f      	b.n	80057b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <SysTick_Config+0x40>)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3b01      	subs	r3, #1
 8005798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800579a:	210f      	movs	r1, #15
 800579c:	f04f 30ff 	mov.w	r0, #4294967295
 80057a0:	f7ff ff8e 	bl	80056c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057a4:	4b05      	ldr	r3, [pc, #20]	; (80057bc <SysTick_Config+0x40>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057aa:	4b04      	ldr	r3, [pc, #16]	; (80057bc <SysTick_Config+0x40>)
 80057ac:	2207      	movs	r2, #7
 80057ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	e000e010 	.word	0xe000e010

080057c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f7ff ff29 	bl	8005620 <__NVIC_SetPriorityGrouping>
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}

080057d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b086      	sub	sp, #24
 80057da:	af00      	add	r7, sp, #0
 80057dc:	4603      	mov	r3, r0
 80057de:	60b9      	str	r1, [r7, #8]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80057e4:	f7ff ff40 	bl	8005668 <__NVIC_GetPriorityGrouping>
 80057e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	6978      	ldr	r0, [r7, #20]
 80057f0:	f7ff ff90 	bl	8005714 <NVIC_EncodePriority>
 80057f4:	4602      	mov	r2, r0
 80057f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff ff5f 	bl	80056c0 <__NVIC_SetPriority>
}
 8005802:	bf00      	nop
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	4603      	mov	r3, r0
 8005812:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff33 	bl	8005684 <__NVIC_EnableIRQ>
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff ffa4 	bl	800577c <SysTick_Config>
 8005834:	4603      	mov	r3, r0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005848:	f7fe fb34 	bl	8003eb4 <HAL_GetTick>
 800584c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d101      	bne.n	8005858 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e312      	b.n	8005e7e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a66      	ldr	r2, [pc, #408]	; (80059f8 <HAL_DMA_Init+0x1b8>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d04a      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a65      	ldr	r2, [pc, #404]	; (80059fc <HAL_DMA_Init+0x1bc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d045      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a63      	ldr	r2, [pc, #396]	; (8005a00 <HAL_DMA_Init+0x1c0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d040      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a62      	ldr	r2, [pc, #392]	; (8005a04 <HAL_DMA_Init+0x1c4>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d03b      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a60      	ldr	r2, [pc, #384]	; (8005a08 <HAL_DMA_Init+0x1c8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d036      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5f      	ldr	r2, [pc, #380]	; (8005a0c <HAL_DMA_Init+0x1cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d031      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a5d      	ldr	r2, [pc, #372]	; (8005a10 <HAL_DMA_Init+0x1d0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d02c      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a5c      	ldr	r2, [pc, #368]	; (8005a14 <HAL_DMA_Init+0x1d4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d027      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5a      	ldr	r2, [pc, #360]	; (8005a18 <HAL_DMA_Init+0x1d8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d022      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a59      	ldr	r2, [pc, #356]	; (8005a1c <HAL_DMA_Init+0x1dc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d01d      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a57      	ldr	r2, [pc, #348]	; (8005a20 <HAL_DMA_Init+0x1e0>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d018      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a56      	ldr	r2, [pc, #344]	; (8005a24 <HAL_DMA_Init+0x1e4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a54      	ldr	r2, [pc, #336]	; (8005a28 <HAL_DMA_Init+0x1e8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d00e      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a53      	ldr	r2, [pc, #332]	; (8005a2c <HAL_DMA_Init+0x1ec>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d009      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a51      	ldr	r2, [pc, #324]	; (8005a30 <HAL_DMA_Init+0x1f0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d004      	beq.n	80058f8 <HAL_DMA_Init+0xb8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a50      	ldr	r2, [pc, #320]	; (8005a34 <HAL_DMA_Init+0x1f4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_DMA_Init+0xbc>
 80058f8:	2301      	movs	r3, #1
 80058fa:	e000      	b.n	80058fe <HAL_DMA_Init+0xbe>
 80058fc:	2300      	movs	r3, #0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 813c 	beq.w	8005b7c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <HAL_DMA_Init+0x1b8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d04a      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a36      	ldr	r2, [pc, #216]	; (80059fc <HAL_DMA_Init+0x1bc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d045      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_DMA_Init+0x1c0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d040      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <HAL_DMA_Init+0x1c4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d03b      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <HAL_DMA_Init+0x1c8>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d036      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <HAL_DMA_Init+0x1cc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d031      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <HAL_DMA_Init+0x1d0>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d02c      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <HAL_DMA_Init+0x1d4>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d027      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_Init+0x1d8>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d022      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_DMA_Init+0x1dc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d01d      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_DMA_Init+0x1e0>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d018      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <HAL_DMA_Init+0x1e4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d013      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <HAL_DMA_Init+0x1e8>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00e      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <HAL_DMA_Init+0x1ec>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d009      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_DMA_Init+0x1f0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_DMA_Init+0x174>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <HAL_DMA_Init+0x1f4>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d108      	bne.n	80059c6 <HAL_DMA_Init+0x186>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0201 	bic.w	r2, r2, #1
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	e007      	b.n	80059d6 <HAL_DMA_Init+0x196>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80059d6:	e02f      	b.n	8005a38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059d8:	f7fe fa6c 	bl	8003eb4 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	2b05      	cmp	r3, #5
 80059e4:	d928      	bls.n	8005a38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2220      	movs	r2, #32
 80059ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2203      	movs	r2, #3
 80059f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e242      	b.n	8005e7e <HAL_DMA_Init+0x63e>
 80059f8:	40020010 	.word	0x40020010
 80059fc:	40020028 	.word	0x40020028
 8005a00:	40020040 	.word	0x40020040
 8005a04:	40020058 	.word	0x40020058
 8005a08:	40020070 	.word	0x40020070
 8005a0c:	40020088 	.word	0x40020088
 8005a10:	400200a0 	.word	0x400200a0
 8005a14:	400200b8 	.word	0x400200b8
 8005a18:	40020410 	.word	0x40020410
 8005a1c:	40020428 	.word	0x40020428
 8005a20:	40020440 	.word	0x40020440
 8005a24:	40020458 	.word	0x40020458
 8005a28:	40020470 	.word	0x40020470
 8005a2c:	40020488 	.word	0x40020488
 8005a30:	400204a0 	.word	0x400204a0
 8005a34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1c8      	bne.n	80059d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4b83      	ldr	r3, [pc, #524]	; (8005c60 <HAL_DMA_Init+0x420>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005a5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	699b      	ldr	r3, [r3, #24]
 8005a70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d107      	bne.n	8005a9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b28      	cmp	r3, #40	; 0x28
 8005aa2:	d903      	bls.n	8005aac <HAL_DMA_Init+0x26c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8005aaa:	d91f      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab2:	d903      	bls.n	8005abc <HAL_DMA_Init+0x27c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b42      	cmp	r3, #66	; 0x42
 8005aba:	d917      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	2b46      	cmp	r3, #70	; 0x46
 8005ac2:	d903      	bls.n	8005acc <HAL_DMA_Init+0x28c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	2b48      	cmp	r3, #72	; 0x48
 8005aca:	d90f      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b4e      	cmp	r3, #78	; 0x4e
 8005ad2:	d903      	bls.n	8005adc <HAL_DMA_Init+0x29c>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2b52      	cmp	r3, #82	; 0x52
 8005ada:	d907      	bls.n	8005aec <HAL_DMA_Init+0x2ac>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b73      	cmp	r3, #115	; 0x73
 8005ae2:	d905      	bls.n	8005af0 <HAL_DMA_Init+0x2b0>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b77      	cmp	r3, #119	; 0x77
 8005aea:	d801      	bhi.n	8005af0 <HAL_DMA_Init+0x2b0>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <HAL_DMA_Init+0x2b2>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 0307 	bic.w	r3, r3, #7
 8005b14:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d117      	bne.n	8005b58 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2c:	697a      	ldr	r2, [r7, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00e      	beq.n	8005b58 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f001 fdca 	bl	80076d4 <DMA_CheckFifoParam>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e192      	b.n	8005e7e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fd05 	bl	8007570 <DMA_CalcBaseAndBitshift>
 8005b66:	4603      	mov	r3, r0
 8005b68:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	223f      	movs	r2, #63	; 0x3f
 8005b74:	409a      	lsls	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	e0c8      	b.n	8005d0e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a38      	ldr	r2, [pc, #224]	; (8005c64 <HAL_DMA_Init+0x424>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d022      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a37      	ldr	r2, [pc, #220]	; (8005c68 <HAL_DMA_Init+0x428>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d01d      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <HAL_DMA_Init+0x42c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d018      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a34      	ldr	r2, [pc, #208]	; (8005c70 <HAL_DMA_Init+0x430>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a32      	ldr	r2, [pc, #200]	; (8005c74 <HAL_DMA_Init+0x434>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00e      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a31      	ldr	r2, [pc, #196]	; (8005c78 <HAL_DMA_Init+0x438>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d009      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_DMA_Init+0x43c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d004      	beq.n	8005bcc <HAL_DMA_Init+0x38c>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a2e      	ldr	r2, [pc, #184]	; (8005c80 <HAL_DMA_Init+0x440>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA_Init+0x390>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e000      	b.n	8005bd2 <HAL_DMA_Init+0x392>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 8092 	beq.w	8005cfc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <HAL_DMA_Init+0x424>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d021      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a20      	ldr	r2, [pc, #128]	; (8005c68 <HAL_DMA_Init+0x428>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d01c      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1e      	ldr	r2, [pc, #120]	; (8005c6c <HAL_DMA_Init+0x42c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1d      	ldr	r2, [pc, #116]	; (8005c70 <HAL_DMA_Init+0x430>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <HAL_DMA_Init+0x434>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d00d      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1a      	ldr	r2, [pc, #104]	; (8005c78 <HAL_DMA_Init+0x438>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d008      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <HAL_DMA_Init+0x43c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <HAL_DMA_Init+0x3e6>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a17      	ldr	r2, [pc, #92]	; (8005c80 <HAL_DMA_Init+0x440>)
 8005c24:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <HAL_DMA_Init+0x444>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d01c      	beq.n	8005c88 <HAL_DMA_Init+0x448>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	2b80      	cmp	r3, #128	; 0x80
 8005c54:	d102      	bne.n	8005c5c <HAL_DMA_Init+0x41c>
 8005c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c5a:	e016      	b.n	8005c8a <HAL_DMA_Init+0x44a>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e014      	b.n	8005c8a <HAL_DMA_Init+0x44a>
 8005c60:	fe10803f 	.word	0xfe10803f
 8005c64:	58025408 	.word	0x58025408
 8005c68:	5802541c 	.word	0x5802541c
 8005c6c:	58025430 	.word	0x58025430
 8005c70:	58025444 	.word	0x58025444
 8005c74:	58025458 	.word	0x58025458
 8005c78:	5802546c 	.word	0x5802546c
 8005c7c:	58025480 	.word	0x58025480
 8005c80:	58025494 	.word	0x58025494
 8005c84:	fffe000f 	.word	0xfffe000f
 8005c88:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	68d2      	ldr	r2, [r2, #12]
 8005c8e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005c90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005c98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005ca0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005cb8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4b6e      	ldr	r3, [pc, #440]	; (8005e88 <HAL_DMA_Init+0x648>)
 8005cd0:	4413      	add	r3, r2
 8005cd2:	4a6e      	ldr	r2, [pc, #440]	; (8005e8c <HAL_DMA_Init+0x64c>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	009a      	lsls	r2, r3, #2
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f001 fc45 	bl	8007570 <DMA_CalcBaseAndBitshift>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	409a      	lsls	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	e008      	b.n	8005d0e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2203      	movs	r2, #3
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e0b7      	b.n	8005e7e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a5f      	ldr	r2, [pc, #380]	; (8005e90 <HAL_DMA_Init+0x650>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d072      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a5d      	ldr	r2, [pc, #372]	; (8005e94 <HAL_DMA_Init+0x654>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d06d      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a5c      	ldr	r2, [pc, #368]	; (8005e98 <HAL_DMA_Init+0x658>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d068      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a5a      	ldr	r2, [pc, #360]	; (8005e9c <HAL_DMA_Init+0x65c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d063      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a59      	ldr	r2, [pc, #356]	; (8005ea0 <HAL_DMA_Init+0x660>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d05e      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <HAL_DMA_Init+0x664>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d059      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a56      	ldr	r2, [pc, #344]	; (8005ea8 <HAL_DMA_Init+0x668>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d054      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a54      	ldr	r2, [pc, #336]	; (8005eac <HAL_DMA_Init+0x66c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d04f      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a53      	ldr	r2, [pc, #332]	; (8005eb0 <HAL_DMA_Init+0x670>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d04a      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a51      	ldr	r2, [pc, #324]	; (8005eb4 <HAL_DMA_Init+0x674>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d045      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a50      	ldr	r2, [pc, #320]	; (8005eb8 <HAL_DMA_Init+0x678>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d040      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4e      	ldr	r2, [pc, #312]	; (8005ebc <HAL_DMA_Init+0x67c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a4d      	ldr	r2, [pc, #308]	; (8005ec0 <HAL_DMA_Init+0x680>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d036      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a4b      	ldr	r2, [pc, #300]	; (8005ec4 <HAL_DMA_Init+0x684>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d031      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a4a      	ldr	r2, [pc, #296]	; (8005ec8 <HAL_DMA_Init+0x688>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d02c      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a48      	ldr	r2, [pc, #288]	; (8005ecc <HAL_DMA_Init+0x68c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d027      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a47      	ldr	r2, [pc, #284]	; (8005ed0 <HAL_DMA_Init+0x690>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d022      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a45      	ldr	r2, [pc, #276]	; (8005ed4 <HAL_DMA_Init+0x694>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d01d      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a44      	ldr	r2, [pc, #272]	; (8005ed8 <HAL_DMA_Init+0x698>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d018      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a42      	ldr	r2, [pc, #264]	; (8005edc <HAL_DMA_Init+0x69c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d013      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a41      	ldr	r2, [pc, #260]	; (8005ee0 <HAL_DMA_Init+0x6a0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00e      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <HAL_DMA_Init+0x6a4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d009      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a3e      	ldr	r2, [pc, #248]	; (8005ee8 <HAL_DMA_Init+0x6a8>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d004      	beq.n	8005dfe <HAL_DMA_Init+0x5be>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3c      	ldr	r2, [pc, #240]	; (8005eec <HAL_DMA_Init+0x6ac>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Init+0x5c2>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <HAL_DMA_Init+0x5c4>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d032      	beq.n	8005e6e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 fcdf 	bl	80077cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d102      	bne.n	8005e1c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e30:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d010      	beq.n	8005e5c <HAL_DMA_Init+0x61c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d80c      	bhi.n	8005e5c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 fd5c 	bl	8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	e008      	b.n	8005e6e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	a7fdabf8 	.word	0xa7fdabf8
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
 8005ed0:	58025408 	.word	0x58025408
 8005ed4:	5802541c 	.word	0x5802541c
 8005ed8:	58025430 	.word	0x58025430
 8005edc:	58025444 	.word	0x58025444
 8005ee0:	58025458 	.word	0x58025458
 8005ee4:	5802546c 	.word	0x5802546c
 8005ee8:	58025480 	.word	0x58025480
 8005eec:	58025494 	.word	0x58025494

08005ef0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
 8005efc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e226      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_DMA_Start_IT+0x2a>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e21f      	b.n	800635a <HAL_DMA_Start_IT+0x46a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f040 820a 	bne.w	8006344 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2202      	movs	r2, #2
 8005f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a68      	ldr	r2, [pc, #416]	; (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d04a      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a66      	ldr	r2, [pc, #408]	; (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d045      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a65      	ldr	r2, [pc, #404]	; (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d040      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a63      	ldr	r2, [pc, #396]	; (80060f0 <HAL_DMA_Start_IT+0x200>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d03b      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a62      	ldr	r2, [pc, #392]	; (80060f4 <HAL_DMA_Start_IT+0x204>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d036      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_DMA_Start_IT+0x208>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a5f      	ldr	r2, [pc, #380]	; (80060fc <HAL_DMA_Start_IT+0x20c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d02c      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a5d      	ldr	r2, [pc, #372]	; (8006100 <HAL_DMA_Start_IT+0x210>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d027      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a5c      	ldr	r2, [pc, #368]	; (8006104 <HAL_DMA_Start_IT+0x214>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d022      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a5a      	ldr	r2, [pc, #360]	; (8006108 <HAL_DMA_Start_IT+0x218>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d01d      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a59      	ldr	r2, [pc, #356]	; (800610c <HAL_DMA_Start_IT+0x21c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d018      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a57      	ldr	r2, [pc, #348]	; (8006110 <HAL_DMA_Start_IT+0x220>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a56      	ldr	r2, [pc, #344]	; (8006114 <HAL_DMA_Start_IT+0x224>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d00e      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a54      	ldr	r2, [pc, #336]	; (8006118 <HAL_DMA_Start_IT+0x228>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d009      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a53      	ldr	r2, [pc, #332]	; (800611c <HAL_DMA_Start_IT+0x22c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d004      	beq.n	8005fde <HAL_DMA_Start_IT+0xee>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a51      	ldr	r2, [pc, #324]	; (8006120 <HAL_DMA_Start_IT+0x230>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x100>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e007      	b.n	8006000 <HAL_DMA_Start_IT+0x110>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0201 	bic.w	r2, r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 f906 	bl	8007218 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a34      	ldr	r2, [pc, #208]	; (80060e4 <HAL_DMA_Start_IT+0x1f4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d04a      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a33      	ldr	r2, [pc, #204]	; (80060e8 <HAL_DMA_Start_IT+0x1f8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d045      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a31      	ldr	r2, [pc, #196]	; (80060ec <HAL_DMA_Start_IT+0x1fc>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d040      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a30      	ldr	r2, [pc, #192]	; (80060f0 <HAL_DMA_Start_IT+0x200>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d03b      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_DMA_Start_IT+0x204>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d036      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_DMA_Start_IT+0x208>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d031      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a2b      	ldr	r2, [pc, #172]	; (80060fc <HAL_DMA_Start_IT+0x20c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d02c      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a2a      	ldr	r2, [pc, #168]	; (8006100 <HAL_DMA_Start_IT+0x210>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d027      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a28      	ldr	r2, [pc, #160]	; (8006104 <HAL_DMA_Start_IT+0x214>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a27      	ldr	r2, [pc, #156]	; (8006108 <HAL_DMA_Start_IT+0x218>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d01d      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a25      	ldr	r2, [pc, #148]	; (800610c <HAL_DMA_Start_IT+0x21c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a24      	ldr	r2, [pc, #144]	; (8006110 <HAL_DMA_Start_IT+0x220>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a22      	ldr	r2, [pc, #136]	; (8006114 <HAL_DMA_Start_IT+0x224>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a21      	ldr	r2, [pc, #132]	; (8006118 <HAL_DMA_Start_IT+0x228>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_DMA_Start_IT+0x22c>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_DMA_Start_IT+0x1bc>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_DMA_Start_IT+0x230>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d101      	bne.n	80060b0 <HAL_DMA_Start_IT+0x1c0>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <HAL_DMA_Start_IT+0x1c2>
 80060b0:	2300      	movs	r3, #0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d036      	beq.n	8006124 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 021e 	bic.w	r2, r3, #30
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f042 0216 	orr.w	r2, r2, #22
 80060c8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d03e      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0208 	orr.w	r2, r2, #8
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e035      	b.n	8006150 <HAL_DMA_Start_IT+0x260>
 80060e4:	40020010 	.word	0x40020010
 80060e8:	40020028 	.word	0x40020028
 80060ec:	40020040 	.word	0x40020040
 80060f0:	40020058 	.word	0x40020058
 80060f4:	40020070 	.word	0x40020070
 80060f8:	40020088 	.word	0x40020088
 80060fc:	400200a0 	.word	0x400200a0
 8006100:	400200b8 	.word	0x400200b8
 8006104:	40020410 	.word	0x40020410
 8006108:	40020428 	.word	0x40020428
 800610c:	40020440 	.word	0x40020440
 8006110:	40020458 	.word	0x40020458
 8006114:	40020470 	.word	0x40020470
 8006118:	40020488 	.word	0x40020488
 800611c:	400204a0 	.word	0x400204a0
 8006120:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f023 020e 	bic.w	r2, r3, #14
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f042 020a 	orr.w	r2, r2, #10
 8006136:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613c:	2b00      	cmp	r3, #0
 800613e:	d007      	beq.n	8006150 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0204 	orr.w	r2, r2, #4
 800614e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a83      	ldr	r2, [pc, #524]	; (8006364 <HAL_DMA_Start_IT+0x474>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d072      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a82      	ldr	r2, [pc, #520]	; (8006368 <HAL_DMA_Start_IT+0x478>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d06d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a80      	ldr	r2, [pc, #512]	; (800636c <HAL_DMA_Start_IT+0x47c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d068      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a7f      	ldr	r2, [pc, #508]	; (8006370 <HAL_DMA_Start_IT+0x480>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d063      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a7d      	ldr	r2, [pc, #500]	; (8006374 <HAL_DMA_Start_IT+0x484>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d05e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7c      	ldr	r2, [pc, #496]	; (8006378 <HAL_DMA_Start_IT+0x488>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d059      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_DMA_Start_IT+0x48c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d054      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a79      	ldr	r2, [pc, #484]	; (8006380 <HAL_DMA_Start_IT+0x490>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d04f      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a77      	ldr	r2, [pc, #476]	; (8006384 <HAL_DMA_Start_IT+0x494>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d04a      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a76      	ldr	r2, [pc, #472]	; (8006388 <HAL_DMA_Start_IT+0x498>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d045      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a74      	ldr	r2, [pc, #464]	; (800638c <HAL_DMA_Start_IT+0x49c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d040      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a73      	ldr	r2, [pc, #460]	; (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d03b      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a71      	ldr	r2, [pc, #452]	; (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d036      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a70      	ldr	r2, [pc, #448]	; (8006398 <HAL_DMA_Start_IT+0x4a8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d031      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a6e      	ldr	r2, [pc, #440]	; (800639c <HAL_DMA_Start_IT+0x4ac>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d02c      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a6d      	ldr	r2, [pc, #436]	; (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d027      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6b      	ldr	r2, [pc, #428]	; (80063a4 <HAL_DMA_Start_IT+0x4b4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d022      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6a      	ldr	r2, [pc, #424]	; (80063a8 <HAL_DMA_Start_IT+0x4b8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d01d      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a68      	ldr	r2, [pc, #416]	; (80063ac <HAL_DMA_Start_IT+0x4bc>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d018      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a67      	ldr	r2, [pc, #412]	; (80063b0 <HAL_DMA_Start_IT+0x4c0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d013      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a65      	ldr	r2, [pc, #404]	; (80063b4 <HAL_DMA_Start_IT+0x4c4>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d00e      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <HAL_DMA_Start_IT+0x4c8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d009      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a62      	ldr	r2, [pc, #392]	; (80063bc <HAL_DMA_Start_IT+0x4cc>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d004      	beq.n	8006240 <HAL_DMA_Start_IT+0x350>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a61      	ldr	r2, [pc, #388]	; (80063c0 <HAL_DMA_Start_IT+0x4d0>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d101      	bne.n	8006244 <HAL_DMA_Start_IT+0x354>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_DMA_Start_IT+0x356>
 8006244:	2300      	movs	r3, #0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d01a      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006266:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d007      	beq.n	8006280 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800627e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a37      	ldr	r2, [pc, #220]	; (8006364 <HAL_DMA_Start_IT+0x474>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d04a      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a36      	ldr	r2, [pc, #216]	; (8006368 <HAL_DMA_Start_IT+0x478>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d045      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a34      	ldr	r2, [pc, #208]	; (800636c <HAL_DMA_Start_IT+0x47c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d040      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a33      	ldr	r2, [pc, #204]	; (8006370 <HAL_DMA_Start_IT+0x480>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d03b      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a31      	ldr	r2, [pc, #196]	; (8006374 <HAL_DMA_Start_IT+0x484>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d036      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <HAL_DMA_Start_IT+0x488>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d031      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a2e      	ldr	r2, [pc, #184]	; (800637c <HAL_DMA_Start_IT+0x48c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02c      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a2d      	ldr	r2, [pc, #180]	; (8006380 <HAL_DMA_Start_IT+0x490>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d027      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	; (8006384 <HAL_DMA_Start_IT+0x494>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d022      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <HAL_DMA_Start_IT+0x498>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d01d      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_DMA_Start_IT+0x49c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d018      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a27      	ldr	r2, [pc, #156]	; (8006390 <HAL_DMA_Start_IT+0x4a0>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d013      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a25      	ldr	r2, [pc, #148]	; (8006394 <HAL_DMA_Start_IT+0x4a4>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00e      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a24      	ldr	r2, [pc, #144]	; (8006398 <HAL_DMA_Start_IT+0x4a8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d009      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a22      	ldr	r2, [pc, #136]	; (800639c <HAL_DMA_Start_IT+0x4ac>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d004      	beq.n	8006320 <HAL_DMA_Start_IT+0x430>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a21      	ldr	r2, [pc, #132]	; (80063a0 <HAL_DMA_Start_IT+0x4b0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d108      	bne.n	8006332 <HAL_DMA_Start_IT+0x442>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	e012      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	e009      	b.n	8006358 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40020010 	.word	0x40020010
 8006368:	40020028 	.word	0x40020028
 800636c:	40020040 	.word	0x40020040
 8006370:	40020058 	.word	0x40020058
 8006374:	40020070 	.word	0x40020070
 8006378:	40020088 	.word	0x40020088
 800637c:	400200a0 	.word	0x400200a0
 8006380:	400200b8 	.word	0x400200b8
 8006384:	40020410 	.word	0x40020410
 8006388:	40020428 	.word	0x40020428
 800638c:	40020440 	.word	0x40020440
 8006390:	40020458 	.word	0x40020458
 8006394:	40020470 	.word	0x40020470
 8006398:	40020488 	.word	0x40020488
 800639c:	400204a0 	.word	0x400204a0
 80063a0:	400204b8 	.word	0x400204b8
 80063a4:	58025408 	.word	0x58025408
 80063a8:	5802541c 	.word	0x5802541c
 80063ac:	58025430 	.word	0x58025430
 80063b0:	58025444 	.word	0x58025444
 80063b4:	58025458 	.word	0x58025458
 80063b8:	5802546c 	.word	0x5802546c
 80063bc:	58025480 	.word	0x58025480
 80063c0:	58025494 	.word	0x58025494

080063c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80063d0:	4b67      	ldr	r3, [pc, #412]	; (8006570 <HAL_DMA_IRQHandler+0x1ac>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a67      	ldr	r2, [pc, #412]	; (8006574 <HAL_DMA_IRQHandler+0x1b0>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0a9b      	lsrs	r3, r3, #10
 80063dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a5f      	ldr	r2, [pc, #380]	; (8006578 <HAL_DMA_IRQHandler+0x1b4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d04a      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5d      	ldr	r2, [pc, #372]	; (800657c <HAL_DMA_IRQHandler+0x1b8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d045      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a5c      	ldr	r2, [pc, #368]	; (8006580 <HAL_DMA_IRQHandler+0x1bc>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d040      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a5a      	ldr	r2, [pc, #360]	; (8006584 <HAL_DMA_IRQHandler+0x1c0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d03b      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a59      	ldr	r2, [pc, #356]	; (8006588 <HAL_DMA_IRQHandler+0x1c4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d036      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a57      	ldr	r2, [pc, #348]	; (800658c <HAL_DMA_IRQHandler+0x1c8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d031      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a56      	ldr	r2, [pc, #344]	; (8006590 <HAL_DMA_IRQHandler+0x1cc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d02c      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a54      	ldr	r2, [pc, #336]	; (8006594 <HAL_DMA_IRQHandler+0x1d0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d027      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a53      	ldr	r2, [pc, #332]	; (8006598 <HAL_DMA_IRQHandler+0x1d4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d022      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a51      	ldr	r2, [pc, #324]	; (800659c <HAL_DMA_IRQHandler+0x1d8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d01d      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a50      	ldr	r2, [pc, #320]	; (80065a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d018      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a4e      	ldr	r2, [pc, #312]	; (80065a4 <HAL_DMA_IRQHandler+0x1e0>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a4d      	ldr	r2, [pc, #308]	; (80065a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d00e      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a4b      	ldr	r2, [pc, #300]	; (80065ac <HAL_DMA_IRQHandler+0x1e8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d009      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <HAL_DMA_IRQHandler+0x1ec>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d004      	beq.n	8006496 <HAL_DMA_IRQHandler+0xd2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a48      	ldr	r2, [pc, #288]	; (80065b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_DMA_IRQHandler+0xd6>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <HAL_DMA_IRQHandler+0xd8>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 842b 	beq.w	8006cf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a6:	f003 031f 	and.w	r3, r3, #31
 80064aa:	2208      	movs	r2, #8
 80064ac:	409a      	lsls	r2, r3
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	4013      	ands	r3, r2
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 80a2 	beq.w	80065fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a2e      	ldr	r2, [pc, #184]	; (8006578 <HAL_DMA_IRQHandler+0x1b4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d04a      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a2d      	ldr	r2, [pc, #180]	; (800657c <HAL_DMA_IRQHandler+0x1b8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d045      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a2b      	ldr	r2, [pc, #172]	; (8006580 <HAL_DMA_IRQHandler+0x1bc>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d040      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <HAL_DMA_IRQHandler+0x1c0>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d03b      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a28      	ldr	r2, [pc, #160]	; (8006588 <HAL_DMA_IRQHandler+0x1c4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d036      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a27      	ldr	r2, [pc, #156]	; (800658c <HAL_DMA_IRQHandler+0x1c8>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d031      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <HAL_DMA_IRQHandler+0x1cc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d02c      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a24      	ldr	r2, [pc, #144]	; (8006594 <HAL_DMA_IRQHandler+0x1d0>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d027      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a22      	ldr	r2, [pc, #136]	; (8006598 <HAL_DMA_IRQHandler+0x1d4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_DMA_IRQHandler+0x1d8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d01d      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <HAL_DMA_IRQHandler+0x1dc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	; (80065a4 <HAL_DMA_IRQHandler+0x1e0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	; (80065a8 <HAL_DMA_IRQHandler+0x1e4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	; (80065ac <HAL_DMA_IRQHandler+0x1e8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_DMA_IRQHandler+0x1ec>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_DMA_IRQHandler+0x194>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_DMA_IRQHandler+0x1f0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d12f      	bne.n	80065b8 <HAL_DMA_IRQHandler+0x1f4>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0304 	and.w	r3, r3, #4
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	e02e      	b.n	80065cc <HAL_DMA_IRQHandler+0x208>
 800656e:	bf00      	nop
 8006570:	24000000 	.word	0x24000000
 8006574:	1b4e81b5 	.word	0x1b4e81b5
 8006578:	40020010 	.word	0x40020010
 800657c:	40020028 	.word	0x40020028
 8006580:	40020040 	.word	0x40020040
 8006584:	40020058 	.word	0x40020058
 8006588:	40020070 	.word	0x40020070
 800658c:	40020088 	.word	0x40020088
 8006590:	400200a0 	.word	0x400200a0
 8006594:	400200b8 	.word	0x400200b8
 8006598:	40020410 	.word	0x40020410
 800659c:	40020428 	.word	0x40020428
 80065a0:	40020440 	.word	0x40020440
 80065a4:	40020458 	.word	0x40020458
 80065a8:	40020470 	.word	0x40020470
 80065ac:	40020488 	.word	0x40020488
 80065b0:	400204a0 	.word	0x400204a0
 80065b4:	400204b8 	.word	0x400204b8
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	bf14      	ite	ne
 80065c6:	2301      	movne	r3, #1
 80065c8:	2300      	moveq	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d015      	beq.n	80065fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0204 	bic.w	r2, r2, #4
 80065de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	2208      	movs	r2, #8
 80065ea:	409a      	lsls	r2, r3
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	f043 0201 	orr.w	r2, r3, #1
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	fa22 f303 	lsr.w	r3, r2, r3
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d06e      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a69      	ldr	r2, [pc, #420]	; (80067bc <HAL_DMA_IRQHandler+0x3f8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d04a      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a67      	ldr	r2, [pc, #412]	; (80067c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d045      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a66      	ldr	r2, [pc, #408]	; (80067c4 <HAL_DMA_IRQHandler+0x400>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d040      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a64      	ldr	r2, [pc, #400]	; (80067c8 <HAL_DMA_IRQHandler+0x404>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d03b      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a63      	ldr	r2, [pc, #396]	; (80067cc <HAL_DMA_IRQHandler+0x408>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d036      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a61      	ldr	r2, [pc, #388]	; (80067d0 <HAL_DMA_IRQHandler+0x40c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d031      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a60      	ldr	r2, [pc, #384]	; (80067d4 <HAL_DMA_IRQHandler+0x410>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d02c      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a5e      	ldr	r2, [pc, #376]	; (80067d8 <HAL_DMA_IRQHandler+0x414>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d027      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a5d      	ldr	r2, [pc, #372]	; (80067dc <HAL_DMA_IRQHandler+0x418>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a5b      	ldr	r2, [pc, #364]	; (80067e0 <HAL_DMA_IRQHandler+0x41c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d01d      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a5a      	ldr	r2, [pc, #360]	; (80067e4 <HAL_DMA_IRQHandler+0x420>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a58      	ldr	r2, [pc, #352]	; (80067e8 <HAL_DMA_IRQHandler+0x424>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a57      	ldr	r2, [pc, #348]	; (80067ec <HAL_DMA_IRQHandler+0x428>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a55      	ldr	r2, [pc, #340]	; (80067f0 <HAL_DMA_IRQHandler+0x42c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a54      	ldr	r2, [pc, #336]	; (80067f4 <HAL_DMA_IRQHandler+0x430>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_DMA_IRQHandler+0x2ee>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a52      	ldr	r2, [pc, #328]	; (80067f8 <HAL_DMA_IRQHandler+0x434>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d10a      	bne.n	80066c8 <HAL_DMA_IRQHandler+0x304>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf14      	ite	ne
 80066c0:	2301      	movne	r3, #1
 80066c2:	2300      	moveq	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e003      	b.n	80066d0 <HAL_DMA_IRQHandler+0x30c>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00d      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2201      	movs	r2, #1
 80066de:	409a      	lsls	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f043 0202 	orr.w	r2, r3, #2
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	2204      	movs	r2, #4
 80066fa:	409a      	lsls	r2, r3
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 808f 	beq.w	8006824 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a2c      	ldr	r2, [pc, #176]	; (80067bc <HAL_DMA_IRQHandler+0x3f8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d04a      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <HAL_DMA_IRQHandler+0x3fc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d045      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <HAL_DMA_IRQHandler+0x400>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d040      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <HAL_DMA_IRQHandler+0x404>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d03b      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <HAL_DMA_IRQHandler+0x408>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d036      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a24      	ldr	r2, [pc, #144]	; (80067d0 <HAL_DMA_IRQHandler+0x40c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d031      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <HAL_DMA_IRQHandler+0x410>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d02c      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_DMA_IRQHandler+0x414>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d027      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a20      	ldr	r2, [pc, #128]	; (80067dc <HAL_DMA_IRQHandler+0x418>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d022      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1e      	ldr	r2, [pc, #120]	; (80067e0 <HAL_DMA_IRQHandler+0x41c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1d      	ldr	r2, [pc, #116]	; (80067e4 <HAL_DMA_IRQHandler+0x420>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1b      	ldr	r2, [pc, #108]	; (80067e8 <HAL_DMA_IRQHandler+0x424>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1a      	ldr	r2, [pc, #104]	; (80067ec <HAL_DMA_IRQHandler+0x428>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a18      	ldr	r2, [pc, #96]	; (80067f0 <HAL_DMA_IRQHandler+0x42c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <HAL_DMA_IRQHandler+0x430>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x3e2>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <HAL_DMA_IRQHandler+0x434>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d12a      	bne.n	80067fc <HAL_DMA_IRQHandler+0x438>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e023      	b.n	8006804 <HAL_DMA_IRQHandler+0x440>
 80067bc:	40020010 	.word	0x40020010
 80067c0:	40020028 	.word	0x40020028
 80067c4:	40020040 	.word	0x40020040
 80067c8:	40020058 	.word	0x40020058
 80067cc:	40020070 	.word	0x40020070
 80067d0:	40020088 	.word	0x40020088
 80067d4:	400200a0 	.word	0x400200a0
 80067d8:	400200b8 	.word	0x400200b8
 80067dc:	40020410 	.word	0x40020410
 80067e0:	40020428 	.word	0x40020428
 80067e4:	40020440 	.word	0x40020440
 80067e8:	40020458 	.word	0x40020458
 80067ec:	40020470 	.word	0x40020470
 80067f0:	40020488 	.word	0x40020488
 80067f4:	400204a0 	.word	0x400204a0
 80067f8:	400204b8 	.word	0x400204b8
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2300      	movs	r3, #0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2204      	movs	r2, #4
 8006812:	409a      	lsls	r2, r3
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800681c:	f043 0204 	orr.w	r2, r3, #4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006828:	f003 031f 	and.w	r3, r3, #31
 800682c:	2210      	movs	r2, #16
 800682e:	409a      	lsls	r2, r3
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80a6 	beq.w	8006986 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a85      	ldr	r2, [pc, #532]	; (8006a54 <HAL_DMA_IRQHandler+0x690>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d04a      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a83      	ldr	r2, [pc, #524]	; (8006a58 <HAL_DMA_IRQHandler+0x694>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d045      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a82      	ldr	r2, [pc, #520]	; (8006a5c <HAL_DMA_IRQHandler+0x698>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d040      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a80      	ldr	r2, [pc, #512]	; (8006a60 <HAL_DMA_IRQHandler+0x69c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d03b      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a7f      	ldr	r2, [pc, #508]	; (8006a64 <HAL_DMA_IRQHandler+0x6a0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d036      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a7d      	ldr	r2, [pc, #500]	; (8006a68 <HAL_DMA_IRQHandler+0x6a4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d031      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a7c      	ldr	r2, [pc, #496]	; (8006a6c <HAL_DMA_IRQHandler+0x6a8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d02c      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a7a      	ldr	r2, [pc, #488]	; (8006a70 <HAL_DMA_IRQHandler+0x6ac>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d027      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a79      	ldr	r2, [pc, #484]	; (8006a74 <HAL_DMA_IRQHandler+0x6b0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d022      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a77      	ldr	r2, [pc, #476]	; (8006a78 <HAL_DMA_IRQHandler+0x6b4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01d      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a76      	ldr	r2, [pc, #472]	; (8006a7c <HAL_DMA_IRQHandler+0x6b8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d018      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a74      	ldr	r2, [pc, #464]	; (8006a80 <HAL_DMA_IRQHandler+0x6bc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d013      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a73      	ldr	r2, [pc, #460]	; (8006a84 <HAL_DMA_IRQHandler+0x6c0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00e      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <HAL_DMA_IRQHandler+0x6c4>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d009      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a70      	ldr	r2, [pc, #448]	; (8006a8c <HAL_DMA_IRQHandler+0x6c8>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d004      	beq.n	80068da <HAL_DMA_IRQHandler+0x516>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a6e      	ldr	r2, [pc, #440]	; (8006a90 <HAL_DMA_IRQHandler+0x6cc>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d10a      	bne.n	80068f0 <HAL_DMA_IRQHandler+0x52c>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e009      	b.n	8006904 <HAL_DMA_IRQHandler+0x540>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d03e      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690c:	f003 031f 	and.w	r3, r3, #31
 8006910:	2210      	movs	r2, #16
 8006912:	409a      	lsls	r2, r3
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d018      	beq.n	8006958 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d108      	bne.n	8006946 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d024      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
 8006944:	e01f      	b.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694a:	2b00      	cmp	r3, #0
 800694c:	d01b      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	4798      	blx	r3
 8006956:	e016      	b.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d107      	bne.n	8006976 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0208 	bic.w	r2, r2, #8
 8006974:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698a:	f003 031f 	and.w	r3, r3, #31
 800698e:	2220      	movs	r2, #32
 8006990:	409a      	lsls	r2, r3
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8110 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a2c      	ldr	r2, [pc, #176]	; (8006a54 <HAL_DMA_IRQHandler+0x690>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d04a      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a2b      	ldr	r2, [pc, #172]	; (8006a58 <HAL_DMA_IRQHandler+0x694>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d045      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <HAL_DMA_IRQHandler+0x698>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d040      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <HAL_DMA_IRQHandler+0x69c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d03b      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a26      	ldr	r2, [pc, #152]	; (8006a64 <HAL_DMA_IRQHandler+0x6a0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d036      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a25      	ldr	r2, [pc, #148]	; (8006a68 <HAL_DMA_IRQHandler+0x6a4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d031      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <HAL_DMA_IRQHandler+0x6a8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d02c      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <HAL_DMA_IRQHandler+0x6ac>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d027      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a20      	ldr	r2, [pc, #128]	; (8006a74 <HAL_DMA_IRQHandler+0x6b0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d022      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a1f      	ldr	r2, [pc, #124]	; (8006a78 <HAL_DMA_IRQHandler+0x6b4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a1d      	ldr	r2, [pc, #116]	; (8006a7c <HAL_DMA_IRQHandler+0x6b8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a1c      	ldr	r2, [pc, #112]	; (8006a80 <HAL_DMA_IRQHandler+0x6bc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d013      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_DMA_IRQHandler+0x6c0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a19      	ldr	r2, [pc, #100]	; (8006a88 <HAL_DMA_IRQHandler+0x6c4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a17      	ldr	r2, [pc, #92]	; (8006a8c <HAL_DMA_IRQHandler+0x6c8>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_DMA_IRQHandler+0x678>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a16      	ldr	r2, [pc, #88]	; (8006a90 <HAL_DMA_IRQHandler+0x6cc>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d12b      	bne.n	8006a94 <HAL_DMA_IRQHandler+0x6d0>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bf14      	ite	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	2300      	moveq	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	e02a      	b.n	8006aa8 <HAL_DMA_IRQHandler+0x6e4>
 8006a52:	bf00      	nop
 8006a54:	40020010 	.word	0x40020010
 8006a58:	40020028 	.word	0x40020028
 8006a5c:	40020040 	.word	0x40020040
 8006a60:	40020058 	.word	0x40020058
 8006a64:	40020070 	.word	0x40020070
 8006a68:	40020088 	.word	0x40020088
 8006a6c:	400200a0 	.word	0x400200a0
 8006a70:	400200b8 	.word	0x400200b8
 8006a74:	40020410 	.word	0x40020410
 8006a78:	40020428 	.word	0x40020428
 8006a7c:	40020440 	.word	0x40020440
 8006a80:	40020458 	.word	0x40020458
 8006a84:	40020470 	.word	0x40020470
 8006a88:	40020488 	.word	0x40020488
 8006a8c:	400204a0 	.word	0x400204a0
 8006a90:	400204b8 	.word	0x400204b8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	bf14      	ite	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	2300      	moveq	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 8087 	beq.w	8006bbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d139      	bne.n	8006b3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0216 	bic.w	r2, r2, #22
 8006ad8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ae8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_DMA_IRQHandler+0x736>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	223f      	movs	r2, #63	; 0x3f
 8006b14:	409a      	lsls	r2, r3
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 834a 	beq.w	80071c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	4798      	blx	r3
          }
          return;
 8006b3c:	e344      	b.n	80071c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d018      	beq.n	8006b7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d108      	bne.n	8006b6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d02c      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	e027      	b.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d023      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
 8006b7c:	e01e      	b.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10f      	bne.n	8006bac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0210 	bic.w	r2, r2, #16
 8006b9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d003      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8306 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 8088 	beq.w	8006ce4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2204      	movs	r2, #4
 8006bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a7a      	ldr	r2, [pc, #488]	; (8006dcc <HAL_DMA_IRQHandler+0xa08>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d04a      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a79      	ldr	r2, [pc, #484]	; (8006dd0 <HAL_DMA_IRQHandler+0xa0c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d045      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a77      	ldr	r2, [pc, #476]	; (8006dd4 <HAL_DMA_IRQHandler+0xa10>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d040      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a76      	ldr	r2, [pc, #472]	; (8006dd8 <HAL_DMA_IRQHandler+0xa14>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d03b      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a74      	ldr	r2, [pc, #464]	; (8006ddc <HAL_DMA_IRQHandler+0xa18>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d036      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a73      	ldr	r2, [pc, #460]	; (8006de0 <HAL_DMA_IRQHandler+0xa1c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d031      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a71      	ldr	r2, [pc, #452]	; (8006de4 <HAL_DMA_IRQHandler+0xa20>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d02c      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a70      	ldr	r2, [pc, #448]	; (8006de8 <HAL_DMA_IRQHandler+0xa24>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d027      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a6e      	ldr	r2, [pc, #440]	; (8006dec <HAL_DMA_IRQHandler+0xa28>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d022      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6d      	ldr	r2, [pc, #436]	; (8006df0 <HAL_DMA_IRQHandler+0xa2c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d01d      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6b      	ldr	r2, [pc, #428]	; (8006df4 <HAL_DMA_IRQHandler+0xa30>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d018      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6a      	ldr	r2, [pc, #424]	; (8006df8 <HAL_DMA_IRQHandler+0xa34>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d013      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a68      	ldr	r2, [pc, #416]	; (8006dfc <HAL_DMA_IRQHandler+0xa38>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d00e      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a67      	ldr	r2, [pc, #412]	; (8006e00 <HAL_DMA_IRQHandler+0xa3c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d009      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a65      	ldr	r2, [pc, #404]	; (8006e04 <HAL_DMA_IRQHandler+0xa40>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d004      	beq.n	8006c7c <HAL_DMA_IRQHandler+0x8b8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a64      	ldr	r2, [pc, #400]	; (8006e08 <HAL_DMA_IRQHandler+0xa44>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d108      	bne.n	8006c8e <HAL_DMA_IRQHandler+0x8ca>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f022 0201 	bic.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	e007      	b.n	8006c9e <HAL_DMA_IRQHandler+0x8da>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f022 0201 	bic.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d307      	bcc.n	8006cba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1f2      	bne.n	8006c9e <HAL_DMA_IRQHandler+0x8da>
 8006cb8:	e000      	b.n	8006cbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006cba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2203      	movs	r2, #3
 8006cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006cd2:	e003      	b.n	8006cdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8272 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	e26c      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a43      	ldr	r2, [pc, #268]	; (8006e0c <HAL_DMA_IRQHandler+0xa48>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d022      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a42      	ldr	r2, [pc, #264]	; (8006e10 <HAL_DMA_IRQHandler+0xa4c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d01d      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a40      	ldr	r2, [pc, #256]	; (8006e14 <HAL_DMA_IRQHandler+0xa50>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a3f      	ldr	r2, [pc, #252]	; (8006e18 <HAL_DMA_IRQHandler+0xa54>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a3d      	ldr	r2, [pc, #244]	; (8006e1c <HAL_DMA_IRQHandler+0xa58>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a3c      	ldr	r2, [pc, #240]	; (8006e20 <HAL_DMA_IRQHandler+0xa5c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3a      	ldr	r2, [pc, #232]	; (8006e24 <HAL_DMA_IRQHandler+0xa60>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_DMA_IRQHandler+0x984>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a39      	ldr	r2, [pc, #228]	; (8006e28 <HAL_DMA_IRQHandler+0xa64>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d101      	bne.n	8006d4c <HAL_DMA_IRQHandler+0x988>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e000      	b.n	8006d4e <HAL_DMA_IRQHandler+0x98a>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 823f 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d60:	f003 031f 	and.w	r3, r3, #31
 8006d64:	2204      	movs	r2, #4
 8006d66:	409a      	lsls	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80cd 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xb48>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80c7 	beq.w	8006f0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	2204      	movs	r2, #4
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d049      	beq.n	8006e2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8210 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006db4:	e20a      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 8206 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc8:	e200      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
 8006dca:	bf00      	nop
 8006dcc:	40020010 	.word	0x40020010
 8006dd0:	40020028 	.word	0x40020028
 8006dd4:	40020040 	.word	0x40020040
 8006dd8:	40020058 	.word	0x40020058
 8006ddc:	40020070 	.word	0x40020070
 8006de0:	40020088 	.word	0x40020088
 8006de4:	400200a0 	.word	0x400200a0
 8006de8:	400200b8 	.word	0x400200b8
 8006dec:	40020410 	.word	0x40020410
 8006df0:	40020428 	.word	0x40020428
 8006df4:	40020440 	.word	0x40020440
 8006df8:	40020458 	.word	0x40020458
 8006dfc:	40020470 	.word	0x40020470
 8006e00:	40020488 	.word	0x40020488
 8006e04:	400204a0 	.word	0x400204a0
 8006e08:	400204b8 	.word	0x400204b8
 8006e0c:	58025408 	.word	0x58025408
 8006e10:	5802541c 	.word	0x5802541c
 8006e14:	58025430 	.word	0x58025430
 8006e18:	58025444 	.word	0x58025444
 8006e1c:	58025458 	.word	0x58025458
 8006e20:	5802546c 	.word	0x5802546c
 8006e24:	58025480 	.word	0x58025480
 8006e28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d160      	bne.n	8006ef8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a7f      	ldr	r2, [pc, #508]	; (8007038 <HAL_DMA_IRQHandler+0xc74>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a7d      	ldr	r2, [pc, #500]	; (800703c <HAL_DMA_IRQHandler+0xc78>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a7c      	ldr	r2, [pc, #496]	; (8007040 <HAL_DMA_IRQHandler+0xc7c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a7a      	ldr	r2, [pc, #488]	; (8007044 <HAL_DMA_IRQHandler+0xc80>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a79      	ldr	r2, [pc, #484]	; (8007048 <HAL_DMA_IRQHandler+0xc84>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a77      	ldr	r2, [pc, #476]	; (800704c <HAL_DMA_IRQHandler+0xc88>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a76      	ldr	r2, [pc, #472]	; (8007050 <HAL_DMA_IRQHandler+0xc8c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a74      	ldr	r2, [pc, #464]	; (8007054 <HAL_DMA_IRQHandler+0xc90>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a73      	ldr	r2, [pc, #460]	; (8007058 <HAL_DMA_IRQHandler+0xc94>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a71      	ldr	r2, [pc, #452]	; (800705c <HAL_DMA_IRQHandler+0xc98>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a70      	ldr	r2, [pc, #448]	; (8007060 <HAL_DMA_IRQHandler+0xc9c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a6e      	ldr	r2, [pc, #440]	; (8007064 <HAL_DMA_IRQHandler+0xca0>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a6d      	ldr	r2, [pc, #436]	; (8007068 <HAL_DMA_IRQHandler+0xca4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a6b      	ldr	r2, [pc, #428]	; (800706c <HAL_DMA_IRQHandler+0xca8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a6a      	ldr	r2, [pc, #424]	; (8007070 <HAL_DMA_IRQHandler+0xcac>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_DMA_IRQHandler+0xb12>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a68      	ldr	r2, [pc, #416]	; (8007074 <HAL_DMA_IRQHandler+0xcb0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d108      	bne.n	8006ee8 <HAL_DMA_IRQHandler+0xb24>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0208 	bic.w	r2, r2, #8
 8006ee4:	601a      	str	r2, [r3, #0]
 8006ee6:	e007      	b.n	8006ef8 <HAL_DMA_IRQHandler+0xb34>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f022 0204 	bic.w	r2, r2, #4
 8006ef6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 8165 	beq.w	80071cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f0a:	e15f      	b.n	80071cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	2202      	movs	r2, #2
 8006f16:	409a      	lsls	r2, r3
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80c5 	beq.w	80070ac <HAL_DMA_IRQHandler+0xce8>
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80bf 	beq.w	80070ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2202      	movs	r2, #2
 8006f38:	409a      	lsls	r2, r3
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d018      	beq.n	8006f7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 813a 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f64:	e134      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8130 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f78:	e12a      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f003 0320 	and.w	r3, r3, #32
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	f040 8089 	bne.w	8007098 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a2b      	ldr	r2, [pc, #172]	; (8007038 <HAL_DMA_IRQHandler+0xc74>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d04a      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a29      	ldr	r2, [pc, #164]	; (800703c <HAL_DMA_IRQHandler+0xc78>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d045      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a28      	ldr	r2, [pc, #160]	; (8007040 <HAL_DMA_IRQHandler+0xc7c>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d040      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a26      	ldr	r2, [pc, #152]	; (8007044 <HAL_DMA_IRQHandler+0xc80>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d03b      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a25      	ldr	r2, [pc, #148]	; (8007048 <HAL_DMA_IRQHandler+0xc84>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d036      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <HAL_DMA_IRQHandler+0xc88>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d031      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a22      	ldr	r2, [pc, #136]	; (8007050 <HAL_DMA_IRQHandler+0xc8c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d02c      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a20      	ldr	r2, [pc, #128]	; (8007054 <HAL_DMA_IRQHandler+0xc90>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d027      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_DMA_IRQHandler+0xc94>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d022      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1d      	ldr	r2, [pc, #116]	; (800705c <HAL_DMA_IRQHandler+0xc98>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_DMA_IRQHandler+0xc9c>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d018      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1a      	ldr	r2, [pc, #104]	; (8007064 <HAL_DMA_IRQHandler+0xca0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a19      	ldr	r2, [pc, #100]	; (8007068 <HAL_DMA_IRQHandler+0xca4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a17      	ldr	r2, [pc, #92]	; (800706c <HAL_DMA_IRQHandler+0xca8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_DMA_IRQHandler+0xcac>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_DMA_IRQHandler+0xc62>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a14      	ldr	r2, [pc, #80]	; (8007074 <HAL_DMA_IRQHandler+0xcb0>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d128      	bne.n	8007078 <HAL_DMA_IRQHandler+0xcb4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0214 	bic.w	r2, r2, #20
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	e027      	b.n	8007088 <HAL_DMA_IRQHandler+0xcc4>
 8007038:	40020010 	.word	0x40020010
 800703c:	40020028 	.word	0x40020028
 8007040:	40020040 	.word	0x40020040
 8007044:	40020058 	.word	0x40020058
 8007048:	40020070 	.word	0x40020070
 800704c:	40020088 	.word	0x40020088
 8007050:	400200a0 	.word	0x400200a0
 8007054:	400200b8 	.word	0x400200b8
 8007058:	40020410 	.word	0x40020410
 800705c:	40020428 	.word	0x40020428
 8007060:	40020440 	.word	0x40020440
 8007064:	40020458 	.word	0x40020458
 8007068:	40020470 	.word	0x40020470
 800706c:	40020488 	.word	0x40020488
 8007070:	400204a0 	.word	0x400204a0
 8007074:	400204b8 	.word	0x400204b8
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 020a 	bic.w	r2, r2, #10
 8007086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	f000 8097 	beq.w	80071d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070aa:	e091      	b.n	80071d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2208      	movs	r2, #8
 80070b6:	409a      	lsls	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	4013      	ands	r3, r2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8088 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8082 	beq.w	80071d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a41      	ldr	r2, [pc, #260]	; (80071d8 <HAL_DMA_IRQHandler+0xe14>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d04a      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a3f      	ldr	r2, [pc, #252]	; (80071dc <HAL_DMA_IRQHandler+0xe18>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d045      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a3e      	ldr	r2, [pc, #248]	; (80071e0 <HAL_DMA_IRQHandler+0xe1c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d040      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a3c      	ldr	r2, [pc, #240]	; (80071e4 <HAL_DMA_IRQHandler+0xe20>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d03b      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3b      	ldr	r2, [pc, #236]	; (80071e8 <HAL_DMA_IRQHandler+0xe24>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d036      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a39      	ldr	r2, [pc, #228]	; (80071ec <HAL_DMA_IRQHandler+0xe28>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d031      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a38      	ldr	r2, [pc, #224]	; (80071f0 <HAL_DMA_IRQHandler+0xe2c>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d02c      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a36      	ldr	r2, [pc, #216]	; (80071f4 <HAL_DMA_IRQHandler+0xe30>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d027      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a35      	ldr	r2, [pc, #212]	; (80071f8 <HAL_DMA_IRQHandler+0xe34>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d022      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a33      	ldr	r2, [pc, #204]	; (80071fc <HAL_DMA_IRQHandler+0xe38>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01d      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a32      	ldr	r2, [pc, #200]	; (8007200 <HAL_DMA_IRQHandler+0xe3c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d018      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a30      	ldr	r2, [pc, #192]	; (8007204 <HAL_DMA_IRQHandler+0xe40>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d013      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a2f      	ldr	r2, [pc, #188]	; (8007208 <HAL_DMA_IRQHandler+0xe44>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d00e      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2d      	ldr	r2, [pc, #180]	; (800720c <HAL_DMA_IRQHandler+0xe48>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d009      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2c      	ldr	r2, [pc, #176]	; (8007210 <HAL_DMA_IRQHandler+0xe4c>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d004      	beq.n	800716e <HAL_DMA_IRQHandler+0xdaa>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2a      	ldr	r2, [pc, #168]	; (8007214 <HAL_DMA_IRQHandler+0xe50>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d108      	bne.n	8007180 <HAL_DMA_IRQHandler+0xdbc>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 021c 	bic.w	r2, r2, #28
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	e007      	b.n	8007190 <HAL_DMA_IRQHandler+0xdcc>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 020e 	bic.w	r2, r2, #14
 800718e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2201      	movs	r2, #1
 800719a:	409a      	lsls	r2, r3
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d009      	beq.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
 80071c6:	e004      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80071c8:	bf00      	nop
 80071ca:	e002      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071cc:	bf00      	nop
 80071ce:	e000      	b.n	80071d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80071d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071d2:	3728      	adds	r7, #40	; 0x28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	40020010 	.word	0x40020010
 80071dc:	40020028 	.word	0x40020028
 80071e0:	40020040 	.word	0x40020040
 80071e4:	40020058 	.word	0x40020058
 80071e8:	40020070 	.word	0x40020070
 80071ec:	40020088 	.word	0x40020088
 80071f0:	400200a0 	.word	0x400200a0
 80071f4:	400200b8 	.word	0x400200b8
 80071f8:	40020410 	.word	0x40020410
 80071fc:	40020428 	.word	0x40020428
 8007200:	40020440 	.word	0x40020440
 8007204:	40020458 	.word	0x40020458
 8007208:	40020470 	.word	0x40020470
 800720c:	40020488 	.word	0x40020488
 8007210:	400204a0 	.word	0x400204a0
 8007214:	400204b8 	.word	0x400204b8

08007218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]
 8007224:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007230:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a7f      	ldr	r2, [pc, #508]	; (8007434 <DMA_SetConfig+0x21c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d072      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <DMA_SetConfig+0x220>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d06d      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a7c      	ldr	r2, [pc, #496]	; (800743c <DMA_SetConfig+0x224>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d068      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a7a      	ldr	r2, [pc, #488]	; (8007440 <DMA_SetConfig+0x228>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d063      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a79      	ldr	r2, [pc, #484]	; (8007444 <DMA_SetConfig+0x22c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d05e      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a77      	ldr	r2, [pc, #476]	; (8007448 <DMA_SetConfig+0x230>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d059      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a76      	ldr	r2, [pc, #472]	; (800744c <DMA_SetConfig+0x234>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d054      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a74      	ldr	r2, [pc, #464]	; (8007450 <DMA_SetConfig+0x238>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04f      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a73      	ldr	r2, [pc, #460]	; (8007454 <DMA_SetConfig+0x23c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d04a      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a71      	ldr	r2, [pc, #452]	; (8007458 <DMA_SetConfig+0x240>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d045      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a70      	ldr	r2, [pc, #448]	; (800745c <DMA_SetConfig+0x244>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d040      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a6e      	ldr	r2, [pc, #440]	; (8007460 <DMA_SetConfig+0x248>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d03b      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a6d      	ldr	r2, [pc, #436]	; (8007464 <DMA_SetConfig+0x24c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d036      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6b      	ldr	r2, [pc, #428]	; (8007468 <DMA_SetConfig+0x250>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d031      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6a      	ldr	r2, [pc, #424]	; (800746c <DMA_SetConfig+0x254>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d02c      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a68      	ldr	r2, [pc, #416]	; (8007470 <DMA_SetConfig+0x258>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d027      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a67      	ldr	r2, [pc, #412]	; (8007474 <DMA_SetConfig+0x25c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d022      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a65      	ldr	r2, [pc, #404]	; (8007478 <DMA_SetConfig+0x260>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d01d      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a64      	ldr	r2, [pc, #400]	; (800747c <DMA_SetConfig+0x264>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d018      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a62      	ldr	r2, [pc, #392]	; (8007480 <DMA_SetConfig+0x268>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d013      	beq.n	8007322 <DMA_SetConfig+0x10a>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a61      	ldr	r2, [pc, #388]	; (8007484 <DMA_SetConfig+0x26c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d00e      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a5f      	ldr	r2, [pc, #380]	; (8007488 <DMA_SetConfig+0x270>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d009      	beq.n	8007322 <DMA_SetConfig+0x10a>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a5e      	ldr	r2, [pc, #376]	; (800748c <DMA_SetConfig+0x274>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d004      	beq.n	8007322 <DMA_SetConfig+0x10a>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a5c      	ldr	r2, [pc, #368]	; (8007490 <DMA_SetConfig+0x278>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d101      	bne.n	8007326 <DMA_SetConfig+0x10e>
 8007322:	2301      	movs	r3, #1
 8007324:	e000      	b.n	8007328 <DMA_SetConfig+0x110>
 8007326:	2300      	movs	r3, #0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007334:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d004      	beq.n	8007348 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007346:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a39      	ldr	r2, [pc, #228]	; (8007434 <DMA_SetConfig+0x21c>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d04a      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a38      	ldr	r2, [pc, #224]	; (8007438 <DMA_SetConfig+0x220>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d045      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a36      	ldr	r2, [pc, #216]	; (800743c <DMA_SetConfig+0x224>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d040      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a35      	ldr	r2, [pc, #212]	; (8007440 <DMA_SetConfig+0x228>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d03b      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a33      	ldr	r2, [pc, #204]	; (8007444 <DMA_SetConfig+0x22c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d036      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a32      	ldr	r2, [pc, #200]	; (8007448 <DMA_SetConfig+0x230>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d031      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a30      	ldr	r2, [pc, #192]	; (800744c <DMA_SetConfig+0x234>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d02c      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a2f      	ldr	r2, [pc, #188]	; (8007450 <DMA_SetConfig+0x238>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d027      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a2d      	ldr	r2, [pc, #180]	; (8007454 <DMA_SetConfig+0x23c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d022      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2c      	ldr	r2, [pc, #176]	; (8007458 <DMA_SetConfig+0x240>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d01d      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2a      	ldr	r2, [pc, #168]	; (800745c <DMA_SetConfig+0x244>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d018      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a29      	ldr	r2, [pc, #164]	; (8007460 <DMA_SetConfig+0x248>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d013      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a27      	ldr	r2, [pc, #156]	; (8007464 <DMA_SetConfig+0x24c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d00e      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a26      	ldr	r2, [pc, #152]	; (8007468 <DMA_SetConfig+0x250>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d009      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a24      	ldr	r2, [pc, #144]	; (800746c <DMA_SetConfig+0x254>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <DMA_SetConfig+0x1d0>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a23      	ldr	r2, [pc, #140]	; (8007470 <DMA_SetConfig+0x258>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d101      	bne.n	80073ec <DMA_SetConfig+0x1d4>
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <DMA_SetConfig+0x1d6>
 80073ec:	2300      	movs	r3, #0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d059      	beq.n	80074a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	223f      	movs	r2, #63	; 0x3f
 80073fc:	409a      	lsls	r2, r3
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007410:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d138      	bne.n	8007494 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007432:	e086      	b.n	8007542 <DMA_SetConfig+0x32a>
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	58025408 	.word	0x58025408
 8007478:	5802541c 	.word	0x5802541c
 800747c:	58025430 	.word	0x58025430
 8007480:	58025444 	.word	0x58025444
 8007484:	58025458 	.word	0x58025458
 8007488:	5802546c 	.word	0x5802546c
 800748c:	58025480 	.word	0x58025480
 8007490:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]
}
 80074a4:	e04d      	b.n	8007542 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a29      	ldr	r2, [pc, #164]	; (8007550 <DMA_SetConfig+0x338>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d022      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <DMA_SetConfig+0x33c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01d      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a26      	ldr	r2, [pc, #152]	; (8007558 <DMA_SetConfig+0x340>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d018      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a24      	ldr	r2, [pc, #144]	; (800755c <DMA_SetConfig+0x344>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d013      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a23      	ldr	r2, [pc, #140]	; (8007560 <DMA_SetConfig+0x348>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00e      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <DMA_SetConfig+0x34c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d009      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a20      	ldr	r2, [pc, #128]	; (8007568 <DMA_SetConfig+0x350>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d004      	beq.n	80074f6 <DMA_SetConfig+0x2de>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a1e      	ldr	r2, [pc, #120]	; (800756c <DMA_SetConfig+0x354>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d101      	bne.n	80074fa <DMA_SetConfig+0x2e2>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <DMA_SetConfig+0x2e4>
 80074fa:	2300      	movs	r3, #0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d020      	beq.n	8007542 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007504:	f003 031f 	and.w	r3, r3, #31
 8007508:	2201      	movs	r2, #1
 800750a:	409a      	lsls	r2, r3
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b40      	cmp	r3, #64	; 0x40
 800751e:	d108      	bne.n	8007532 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	60da      	str	r2, [r3, #12]
}
 8007530:	e007      	b.n	8007542 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	60da      	str	r2, [r3, #12]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	58025408 	.word	0x58025408
 8007554:	5802541c 	.word	0x5802541c
 8007558:	58025430 	.word	0x58025430
 800755c:	58025444 	.word	0x58025444
 8007560:	58025458 	.word	0x58025458
 8007564:	5802546c 	.word	0x5802546c
 8007568:	58025480 	.word	0x58025480
 800756c:	58025494 	.word	0x58025494

08007570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a42      	ldr	r2, [pc, #264]	; (8007688 <DMA_CalcBaseAndBitshift+0x118>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d04a      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a41      	ldr	r2, [pc, #260]	; (800768c <DMA_CalcBaseAndBitshift+0x11c>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d045      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a3f      	ldr	r2, [pc, #252]	; (8007690 <DMA_CalcBaseAndBitshift+0x120>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d040      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a3e      	ldr	r2, [pc, #248]	; (8007694 <DMA_CalcBaseAndBitshift+0x124>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d03b      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a3c      	ldr	r2, [pc, #240]	; (8007698 <DMA_CalcBaseAndBitshift+0x128>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d036      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a3b      	ldr	r2, [pc, #236]	; (800769c <DMA_CalcBaseAndBitshift+0x12c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d031      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a39      	ldr	r2, [pc, #228]	; (80076a0 <DMA_CalcBaseAndBitshift+0x130>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d02c      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a38      	ldr	r2, [pc, #224]	; (80076a4 <DMA_CalcBaseAndBitshift+0x134>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d027      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a36      	ldr	r2, [pc, #216]	; (80076a8 <DMA_CalcBaseAndBitshift+0x138>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d022      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a35      	ldr	r2, [pc, #212]	; (80076ac <DMA_CalcBaseAndBitshift+0x13c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01d      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a33      	ldr	r2, [pc, #204]	; (80076b0 <DMA_CalcBaseAndBitshift+0x140>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d018      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a32      	ldr	r2, [pc, #200]	; (80076b4 <DMA_CalcBaseAndBitshift+0x144>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a30      	ldr	r2, [pc, #192]	; (80076b8 <DMA_CalcBaseAndBitshift+0x148>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2f      	ldr	r2, [pc, #188]	; (80076bc <DMA_CalcBaseAndBitshift+0x14c>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d009      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2d      	ldr	r2, [pc, #180]	; (80076c0 <DMA_CalcBaseAndBitshift+0x150>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <DMA_CalcBaseAndBitshift+0xa8>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2c      	ldr	r2, [pc, #176]	; (80076c4 <DMA_CalcBaseAndBitshift+0x154>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d101      	bne.n	800761c <DMA_CalcBaseAndBitshift+0xac>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <DMA_CalcBaseAndBitshift+0xae>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d024      	beq.n	800766c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	b2db      	uxtb	r3, r3
 8007628:	3b10      	subs	r3, #16
 800762a:	4a27      	ldr	r2, [pc, #156]	; (80076c8 <DMA_CalcBaseAndBitshift+0x158>)
 800762c:	fba2 2303 	umull	r2, r3, r2, r3
 8007630:	091b      	lsrs	r3, r3, #4
 8007632:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f003 0307 	and.w	r3, r3, #7
 800763a:	4a24      	ldr	r2, [pc, #144]	; (80076cc <DMA_CalcBaseAndBitshift+0x15c>)
 800763c:	5cd3      	ldrb	r3, [r2, r3]
 800763e:	461a      	mov	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d908      	bls.n	800765c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	461a      	mov	r2, r3
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007652:	4013      	ands	r3, r2
 8007654:	1d1a      	adds	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	659a      	str	r2, [r3, #88]	; 0x58
 800765a:	e00d      	b.n	8007678 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <DMA_CalcBaseAndBitshift+0x160>)
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6593      	str	r3, [r2, #88]	; 0x58
 800766a:	e005      	b.n	8007678 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40020010 	.word	0x40020010
 800768c:	40020028 	.word	0x40020028
 8007690:	40020040 	.word	0x40020040
 8007694:	40020058 	.word	0x40020058
 8007698:	40020070 	.word	0x40020070
 800769c:	40020088 	.word	0x40020088
 80076a0:	400200a0 	.word	0x400200a0
 80076a4:	400200b8 	.word	0x400200b8
 80076a8:	40020410 	.word	0x40020410
 80076ac:	40020428 	.word	0x40020428
 80076b0:	40020440 	.word	0x40020440
 80076b4:	40020458 	.word	0x40020458
 80076b8:	40020470 	.word	0x40020470
 80076bc:	40020488 	.word	0x40020488
 80076c0:	400204a0 	.word	0x400204a0
 80076c4:	400204b8 	.word	0x400204b8
 80076c8:	aaaaaaab 	.word	0xaaaaaaab
 80076cc:	0801c4f8 	.word	0x0801c4f8
 80076d0:	fffffc00 	.word	0xfffffc00

080076d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d120      	bne.n	800772a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d858      	bhi.n	80077a2 <DMA_CheckFifoParam+0xce>
 80076f0:	a201      	add	r2, pc, #4	; (adr r2, 80076f8 <DMA_CheckFifoParam+0x24>)
 80076f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f6:	bf00      	nop
 80076f8:	08007709 	.word	0x08007709
 80076fc:	0800771b 	.word	0x0800771b
 8007700:	08007709 	.word	0x08007709
 8007704:	080077a3 	.word	0x080077a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d048      	beq.n	80077a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007718:	e045      	b.n	80077a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007722:	d142      	bne.n	80077aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007728:	e03f      	b.n	80077aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007732:	d123      	bne.n	800777c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007738:	2b03      	cmp	r3, #3
 800773a:	d838      	bhi.n	80077ae <DMA_CheckFifoParam+0xda>
 800773c:	a201      	add	r2, pc, #4	; (adr r2, 8007744 <DMA_CheckFifoParam+0x70>)
 800773e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007742:	bf00      	nop
 8007744:	08007755 	.word	0x08007755
 8007748:	0800775b 	.word	0x0800775b
 800774c:	08007755 	.word	0x08007755
 8007750:	0800776d 	.word	0x0800776d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	73fb      	strb	r3, [r7, #15]
        break;
 8007758:	e030      	b.n	80077bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d025      	beq.n	80077b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800776a:	e022      	b.n	80077b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007774:	d11f      	bne.n	80077b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800777a:	e01c      	b.n	80077b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	2b02      	cmp	r3, #2
 8007782:	d902      	bls.n	800778a <DMA_CheckFifoParam+0xb6>
 8007784:	2b03      	cmp	r3, #3
 8007786:	d003      	beq.n	8007790 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007788:	e018      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	73fb      	strb	r3, [r7, #15]
        break;
 800778e:	e015      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00e      	beq.n	80077ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
    break;
 80077a0:	e00b      	b.n	80077ba <DMA_CheckFifoParam+0xe6>
        break;
 80077a2:	bf00      	nop
 80077a4:	e00a      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077a6:	bf00      	nop
 80077a8:	e008      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077aa:	bf00      	nop
 80077ac:	e006      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077ae:	bf00      	nop
 80077b0:	e004      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077b2:	bf00      	nop
 80077b4:	e002      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
        break;
 80077b6:	bf00      	nop
 80077b8:	e000      	b.n	80077bc <DMA_CheckFifoParam+0xe8>
    break;
 80077ba:	bf00      	nop
    }
  }

  return status;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3714      	adds	r7, #20
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop

080077cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a38      	ldr	r2, [pc, #224]	; (80078c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a36      	ldr	r2, [pc, #216]	; (80078c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a35      	ldr	r2, [pc, #212]	; (80078c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a33      	ldr	r2, [pc, #204]	; (80078cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a32      	ldr	r2, [pc, #200]	; (80078d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a30      	ldr	r2, [pc, #192]	; (80078d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a2f      	ldr	r2, [pc, #188]	; (80078d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a2d      	ldr	r2, [pc, #180]	; (80078dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d101      	bne.n	800782e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800782a:	2301      	movs	r3, #1
 800782c:	e000      	b.n	8007830 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800782e:	2300      	movs	r3, #0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01a      	beq.n	800786a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	b2db      	uxtb	r3, r3
 800783a:	3b08      	subs	r3, #8
 800783c:	4a28      	ldr	r2, [pc, #160]	; (80078e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	091b      	lsrs	r3, r3, #4
 8007844:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a24      	ldr	r2, [pc, #144]	; (80078e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007858:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2201      	movs	r2, #1
 8007862:	409a      	lsls	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007868:	e024      	b.n	80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b2db      	uxtb	r3, r3
 8007870:	3b10      	subs	r3, #16
 8007872:	4a1e      	ldr	r2, [pc, #120]	; (80078ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007874:	fba2 2303 	umull	r2, r3, r2, r3
 8007878:	091b      	lsrs	r3, r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4a1c      	ldr	r2, [pc, #112]	; (80078f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d806      	bhi.n	8007892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4a1b      	ldr	r2, [pc, #108]	; (80078f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d902      	bls.n	8007892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3308      	adds	r3, #8
 8007890:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	4b18      	ldr	r3, [pc, #96]	; (80078f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007896:	4413      	add	r3, r2
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	461a      	mov	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a16      	ldr	r2, [pc, #88]	; (80078fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80078a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2201      	movs	r2, #1
 80078ae:	409a      	lsls	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80078b4:	bf00      	nop
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	58025408 	.word	0x58025408
 80078c4:	5802541c 	.word	0x5802541c
 80078c8:	58025430 	.word	0x58025430
 80078cc:	58025444 	.word	0x58025444
 80078d0:	58025458 	.word	0x58025458
 80078d4:	5802546c 	.word	0x5802546c
 80078d8:	58025480 	.word	0x58025480
 80078dc:	58025494 	.word	0x58025494
 80078e0:	cccccccd 	.word	0xcccccccd
 80078e4:	16009600 	.word	0x16009600
 80078e8:	58025880 	.word	0x58025880
 80078ec:	aaaaaaab 	.word	0xaaaaaaab
 80078f0:	400204b8 	.word	0x400204b8
 80078f4:	4002040f 	.word	0x4002040f
 80078f8:	10008200 	.word	0x10008200
 80078fc:	40020880 	.word	0x40020880

08007900 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d04a      	beq.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b08      	cmp	r3, #8
 800791a:	d847      	bhi.n	80079ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d022      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a24      	ldr	r2, [pc, #144]	; (80079bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d01d      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d018      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a21      	ldr	r2, [pc, #132]	; (80079c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00e      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1e      	ldr	r2, [pc, #120]	; (80079cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d009      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d004      	beq.n	800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007970:	2300      	movs	r3, #0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	4a15      	ldr	r2, [pc, #84]	; (80079dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007988:	671a      	str	r2, [r3, #112]	; 0x70
 800798a:	e009      	b.n	80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	461a      	mov	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800799e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80079ac:	bf00      	nop
 80079ae:	3714      	adds	r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	58025408 	.word	0x58025408
 80079bc:	5802541c 	.word	0x5802541c
 80079c0:	58025430 	.word	0x58025430
 80079c4:	58025444 	.word	0x58025444
 80079c8:	58025458 	.word	0x58025458
 80079cc:	5802546c 	.word	0x5802546c
 80079d0:	58025480 	.word	0x58025480
 80079d4:	58025494 	.word	0x58025494
 80079d8:	1600963f 	.word	0x1600963f
 80079dc:	58025940 	.word	0x58025940
 80079e0:	1000823f 	.word	0x1000823f
 80079e4:	40020940 	.word	0x40020940

080079e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b098      	sub	sp, #96	; 0x60
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80079f0:	4a84      	ldr	r2, [pc, #528]	; (8007c04 <HAL_FDCAN_Init+0x21c>)
 80079f2:	f107 030c 	add.w	r3, r7, #12
 80079f6:	4611      	mov	r1, r2
 80079f8:	224c      	movs	r2, #76	; 0x4c
 80079fa:	4618      	mov	r0, r3
 80079fc:	f010 fd79 	bl	80184f2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e1c6      	b.n	8007d98 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a7e      	ldr	r2, [pc, #504]	; (8007c08 <HAL_FDCAN_Init+0x220>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d106      	bne.n	8007a22 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d106      	bne.n	8007a3c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fb fa14 	bl	8002e64 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f022 0210 	bic.w	r2, r2, #16
 8007a4a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a4c:	f7fc fa32 	bl	8003eb4 <HAL_GetTick>
 8007a50:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a52:	e014      	b.n	8007a7e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a54:	f7fc fa2e 	bl	8003eb4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b0a      	cmp	r3, #10
 8007a60:	d90d      	bls.n	8007a7e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a68:	f043 0201 	orr.w	r2, r3, #1
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2203      	movs	r2, #3
 8007a76:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e18c      	b.n	8007d98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	f003 0308 	and.w	r3, r3, #8
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d0e3      	beq.n	8007a54 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0201 	orr.w	r2, r2, #1
 8007a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a9c:	f7fc fa0a 	bl	8003eb4 <HAL_GetTick>
 8007aa0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aa2:	e014      	b.n	8007ace <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007aa4:	f7fc fa06 	bl	8003eb4 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b0a      	cmp	r3, #10
 8007ab0:	d90d      	bls.n	8007ace <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ab8:	f043 0201 	orr.w	r2, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e164      	b.n	8007d98 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d0e3      	beq.n	8007aa4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0202 	orr.w	r2, r2, #2
 8007aea:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	7c1b      	ldrb	r3, [r3, #16]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d108      	bne.n	8007b06 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	699a      	ldr	r2, [r3, #24]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b02:	619a      	str	r2, [r3, #24]
 8007b04:	e007      	b.n	8007b16 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699a      	ldr	r2, [r3, #24]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b14:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	7c5b      	ldrb	r3, [r3, #17]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d108      	bne.n	8007b30 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699a      	ldr	r2, [r3, #24]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b2c:	619a      	str	r2, [r3, #24]
 8007b2e:	e007      	b.n	8007b40 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b3e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	7c9b      	ldrb	r3, [r3, #18]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d108      	bne.n	8007b5a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b56:	619a      	str	r2, [r3, #24]
 8007b58:	e007      	b.n	8007b6a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b68:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	699b      	ldr	r3, [r3, #24]
 8007b70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007b8e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0210 	bic.w	r2, r2, #16
 8007b9e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d108      	bne.n	8007bba <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f042 0204 	orr.w	r2, r2, #4
 8007bb6:	619a      	str	r2, [r3, #24]
 8007bb8:	e030      	b.n	8007c1c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d02c      	beq.n	8007c1c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d020      	beq.n	8007c0c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	699a      	ldr	r2, [r3, #24]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007bd8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f042 0210 	orr.w	r2, r2, #16
 8007be8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d114      	bne.n	8007c1c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699a      	ldr	r2, [r3, #24]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0220 	orr.w	r2, r2, #32
 8007c00:	619a      	str	r2, [r3, #24]
 8007c02:	e00b      	b.n	8007c1c <HAL_FDCAN_Init+0x234>
 8007c04:	0801c3e4 	.word	0x0801c3e4
 8007c08:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0220 	orr.w	r2, r2, #32
 8007c1a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	3b01      	subs	r3, #1
 8007c22:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	69db      	ldr	r3, [r3, #28]
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c2c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c34:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	695b      	ldr	r3, [r3, #20]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c44:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c46:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c50:	d115      	bne.n	8007c7e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c60:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	3b01      	subs	r3, #1
 8007c68:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007c6a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c72:	3b01      	subs	r3, #1
 8007c74:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007c7a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007c7c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ca4:	4413      	add	r3, r2
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d011      	beq.n	8007cce <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007cb2:	f023 0107 	bic.w	r1, r3, #7
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	3360      	adds	r3, #96	; 0x60
 8007cbe:	443b      	add	r3, r7
 8007cc0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d011      	beq.n	8007cfa <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007cde:	f023 0107 	bic.w	r1, r3, #7
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	3360      	adds	r3, #96	; 0x60
 8007cea:	443b      	add	r3, r7
 8007cec:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d012      	beq.n	8007d28 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d0a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	3360      	adds	r3, #96	; 0x60
 8007d16:	443b      	add	r3, r7
 8007d18:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d1c:	011a      	lsls	r2, r3, #4
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d012      	beq.n	8007d56 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007d38:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	3360      	adds	r3, #96	; 0x60
 8007d44:	443b      	add	r3, r7
 8007d46:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007d4a:	021a      	lsls	r2, r3, #8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a11      	ldr	r2, [pc, #68]	; (8007da0 <HAL_FDCAN_Init+0x3b8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d107      	bne.n	8007d70 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f022 0203 	bic.w	r2, r2, #3
 8007d6e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f80b 	bl	8007da4 <FDCAN_CalcultateRamBlockAddresses>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007d94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3760      	adds	r7, #96	; 0x60
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	4000a000 	.word	0x4000a000

08007da4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007db0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007dba:	4ba7      	ldr	r3, [pc, #668]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	0091      	lsls	r1, r2, #2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6812      	ldr	r2, [r2, #0]
 8007dc6:	430b      	orrs	r3, r1
 8007dc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dd4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	041a      	lsls	r2, r3, #16
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	430a      	orrs	r2, r1
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	4413      	add	r3, r2
 8007df0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007dfa:	4b97      	ldr	r3, [pc, #604]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	0091      	lsls	r1, r2, #2
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	430b      	orrs	r3, r1
 8007e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e14:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1c:	041a      	lsls	r2, r3, #16
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	430a      	orrs	r2, r1
 8007e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2c:	005b      	lsls	r3, r3, #1
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	4413      	add	r3, r2
 8007e32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007e3c:	4b86      	ldr	r3, [pc, #536]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	68ba      	ldr	r2, [r7, #8]
 8007e42:	0091      	lsls	r1, r2, #2
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6812      	ldr	r2, [r2, #0]
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007e56:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	041a      	lsls	r2, r3, #16
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4413      	add	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007e84:	4b74      	ldr	r3, [pc, #464]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007e86:	4013      	ands	r3, r2
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	0091      	lsls	r1, r2, #2
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6812      	ldr	r2, [r2, #0]
 8007e90:	430b      	orrs	r3, r1
 8007e92:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e9e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ea6:	041a      	lsls	r2, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007ecc:	4b62      	ldr	r3, [pc, #392]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ece:	4013      	ands	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	0091      	lsls	r1, r2, #2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ee6:	fb02 f303 	mul.w	r3, r2, r3
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	4413      	add	r3, r2
 8007eee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007ef8:	4b57      	ldr	r3, [pc, #348]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	0091      	lsls	r1, r2, #2
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	6812      	ldr	r2, [r2, #0]
 8007f04:	430b      	orrs	r3, r1
 8007f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f12:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f1a:	041a      	lsls	r2, r3, #16
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	68ba      	ldr	r2, [r7, #8]
 8007f2e:	4413      	add	r3, r2
 8007f30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007f3a:	4b47      	ldr	r3, [pc, #284]	; (8008058 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	0091      	lsls	r1, r2, #2
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	430b      	orrs	r3, r1
 8007f48:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f54:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f5c:	041a      	lsls	r2, r3, #16
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f70:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f78:	061a      	lsls	r2, r3, #24
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f88:	4b34      	ldr	r3, [pc, #208]	; (800805c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009a      	lsls	r2, r3, #2
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	441a      	add	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	441a      	add	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007fbe:	fb01 f303 	mul.w	r3, r1, r3
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	441a      	add	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fea:	6879      	ldr	r1, [r7, #4]
 8007fec:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007fee:	fb01 f303 	mul.w	r3, r1, r3
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008006:	00db      	lsls	r3, r3, #3
 8008008:	441a      	add	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801a:	6879      	ldr	r1, [r7, #4]
 800801c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800801e:	fb01 f303 	mul.w	r3, r1, r3
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	441a      	add	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804e:	4a04      	ldr	r2, [pc, #16]	; (8008060 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d915      	bls.n	8008080 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008054:	e006      	b.n	8008064 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008056:	bf00      	nop
 8008058:	ffff0003 	.word	0xffff0003
 800805c:	10002b00 	.word	0x10002b00
 8008060:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800806a:	f043 0220 	orr.w	r2, r3, #32
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2203      	movs	r2, #3
 8008078:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800807c:	2301      	movs	r3, #1
 800807e:	e010      	b.n	80080a2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e005      	b.n	8008094 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3304      	adds	r3, #4
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d3f3      	bcc.n	8008088 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop

080080b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b089      	sub	sp, #36	; 0x24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80080be:	4b86      	ldr	r3, [pc, #536]	; (80082d8 <HAL_GPIO_Init+0x228>)
 80080c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080c2:	e18c      	b.n	80083de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	2101      	movs	r1, #1
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	fa01 f303 	lsl.w	r3, r1, r3
 80080d0:	4013      	ands	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 817e 	beq.w	80083d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f003 0303 	and.w	r3, r3, #3
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d005      	beq.n	80080f4 <HAL_GPIO_Init+0x44>
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d130      	bne.n	8008156 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	2203      	movs	r2, #3
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	43db      	mvns	r3, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	4013      	ands	r3, r2
 800810a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	fa02 f303 	lsl.w	r3, r2, r3
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	4313      	orrs	r3, r2
 800811c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800812a:	2201      	movs	r2, #1
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	fa02 f303 	lsl.w	r3, r2, r3
 8008132:	43db      	mvns	r3, r3
 8008134:	69ba      	ldr	r2, [r7, #24]
 8008136:	4013      	ands	r3, r2
 8008138:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	091b      	lsrs	r3, r3, #4
 8008140:	f003 0201 	and.w	r2, r3, #1
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	fa02 f303 	lsl.w	r3, r2, r3
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	4313      	orrs	r3, r2
 800814e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f003 0303 	and.w	r3, r3, #3
 800815e:	2b03      	cmp	r3, #3
 8008160:	d017      	beq.n	8008192 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	2203      	movs	r2, #3
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	43db      	mvns	r3, r3
 8008174:	69ba      	ldr	r2, [r7, #24]
 8008176:	4013      	ands	r3, r2
 8008178:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	fa02 f303 	lsl.w	r3, r2, r3
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	4313      	orrs	r3, r2
 800818a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d123      	bne.n	80081e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	08da      	lsrs	r2, r3, #3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3208      	adds	r2, #8
 80081a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	f003 0307 	and.w	r3, r3, #7
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	220f      	movs	r2, #15
 80081b6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ba:	43db      	mvns	r3, r3
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	4013      	ands	r3, r2
 80081c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	691a      	ldr	r2, [r3, #16]
 80081c6:	69fb      	ldr	r3, [r7, #28]
 80081c8:	f003 0307 	and.w	r3, r3, #7
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	08da      	lsrs	r2, r3, #3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3208      	adds	r2, #8
 80081e0:	69b9      	ldr	r1, [r7, #24]
 80081e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	2203      	movs	r2, #3
 80081f2:	fa02 f303 	lsl.w	r3, r2, r3
 80081f6:	43db      	mvns	r3, r3
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	4013      	ands	r3, r2
 80081fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f003 0203 	and.w	r2, r3, #3
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	005b      	lsls	r3, r3, #1
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	4313      	orrs	r3, r2
 8008212:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 80d8 	beq.w	80083d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008228:	4b2c      	ldr	r3, [pc, #176]	; (80082dc <HAL_GPIO_Init+0x22c>)
 800822a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800822e:	4a2b      	ldr	r2, [pc, #172]	; (80082dc <HAL_GPIO_Init+0x22c>)
 8008230:	f043 0302 	orr.w	r3, r3, #2
 8008234:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008238:	4b28      	ldr	r3, [pc, #160]	; (80082dc <HAL_GPIO_Init+0x22c>)
 800823a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008246:	4a26      	ldr	r2, [pc, #152]	; (80082e0 <HAL_GPIO_Init+0x230>)
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	089b      	lsrs	r3, r3, #2
 800824c:	3302      	adds	r3, #2
 800824e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	f003 0303 	and.w	r3, r3, #3
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	220f      	movs	r2, #15
 800825e:	fa02 f303 	lsl.w	r3, r2, r3
 8008262:	43db      	mvns	r3, r3
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	4013      	ands	r3, r2
 8008268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1d      	ldr	r2, [pc, #116]	; (80082e4 <HAL_GPIO_Init+0x234>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d04a      	beq.n	8008308 <HAL_GPIO_Init+0x258>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <HAL_GPIO_Init+0x238>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d02b      	beq.n	80082d2 <HAL_GPIO_Init+0x222>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <HAL_GPIO_Init+0x23c>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d025      	beq.n	80082ce <HAL_GPIO_Init+0x21e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <HAL_GPIO_Init+0x240>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d01f      	beq.n	80082ca <HAL_GPIO_Init+0x21a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <HAL_GPIO_Init+0x244>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d019      	beq.n	80082c6 <HAL_GPIO_Init+0x216>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <HAL_GPIO_Init+0x248>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d013      	beq.n	80082c2 <HAL_GPIO_Init+0x212>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a17      	ldr	r2, [pc, #92]	; (80082fc <HAL_GPIO_Init+0x24c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d00d      	beq.n	80082be <HAL_GPIO_Init+0x20e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a16      	ldr	r2, [pc, #88]	; (8008300 <HAL_GPIO_Init+0x250>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d007      	beq.n	80082ba <HAL_GPIO_Init+0x20a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a15      	ldr	r2, [pc, #84]	; (8008304 <HAL_GPIO_Init+0x254>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d101      	bne.n	80082b6 <HAL_GPIO_Init+0x206>
 80082b2:	2309      	movs	r3, #9
 80082b4:	e029      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082b6:	230a      	movs	r3, #10
 80082b8:	e027      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082ba:	2307      	movs	r3, #7
 80082bc:	e025      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082be:	2306      	movs	r3, #6
 80082c0:	e023      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082c2:	2305      	movs	r3, #5
 80082c4:	e021      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082c6:	2304      	movs	r3, #4
 80082c8:	e01f      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082ca:	2303      	movs	r3, #3
 80082cc:	e01d      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e01b      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e019      	b.n	800830a <HAL_GPIO_Init+0x25a>
 80082d6:	bf00      	nop
 80082d8:	58000080 	.word	0x58000080
 80082dc:	58024400 	.word	0x58024400
 80082e0:	58000400 	.word	0x58000400
 80082e4:	58020000 	.word	0x58020000
 80082e8:	58020400 	.word	0x58020400
 80082ec:	58020800 	.word	0x58020800
 80082f0:	58020c00 	.word	0x58020c00
 80082f4:	58021000 	.word	0x58021000
 80082f8:	58021400 	.word	0x58021400
 80082fc:	58021800 	.word	0x58021800
 8008300:	58021c00 	.word	0x58021c00
 8008304:	58022400 	.word	0x58022400
 8008308:	2300      	movs	r3, #0
 800830a:	69fa      	ldr	r2, [r7, #28]
 800830c:	f002 0203 	and.w	r2, r2, #3
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	4093      	lsls	r3, r2
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	4313      	orrs	r3, r2
 8008318:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800831a:	4938      	ldr	r1, [pc, #224]	; (80083fc <HAL_GPIO_Init+0x34c>)
 800831c:	69fb      	ldr	r3, [r7, #28]
 800831e:	089b      	lsrs	r3, r3, #2
 8008320:	3302      	adds	r3, #2
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	43db      	mvns	r3, r3
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	4013      	ands	r3, r2
 8008338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d003      	beq.n	800834e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	4313      	orrs	r3, r2
 800834c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800834e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	43db      	mvns	r3, r3
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	4013      	ands	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008374:	69ba      	ldr	r2, [r7, #24]
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	4313      	orrs	r3, r2
 800837a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800837c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008380:	69bb      	ldr	r3, [r7, #24]
 8008382:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	43db      	mvns	r3, r3
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	4013      	ands	r3, r2
 8008392:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80083a0:	69ba      	ldr	r2, [r7, #24]
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	43db      	mvns	r3, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	4013      	ands	r3, r2
 80083bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80083ca:	69ba      	ldr	r2, [r7, #24]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	3301      	adds	r3, #1
 80083dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	fa22 f303 	lsr.w	r3, r2, r3
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f47f ae6b 	bne.w	80080c4 <HAL_GPIO_Init+0x14>
  }
}
 80083ee:	bf00      	nop
 80083f0:	bf00      	nop
 80083f2:	3724      	adds	r7, #36	; 0x24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	58000400 	.word	0x58000400

08008400 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008400:	b480      	push	{r7}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	691a      	ldr	r2, [r3, #16]
 8008410:	887b      	ldrh	r3, [r7, #2]
 8008412:	4013      	ands	r3, r2
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008418:	2301      	movs	r3, #1
 800841a:	73fb      	strb	r3, [r7, #15]
 800841c:	e001      	b.n	8008422 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008422:	7bfb      	ldrb	r3, [r7, #15]
}
 8008424:	4618      	mov	r0, r3
 8008426:	3714      	adds	r7, #20
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008430:	b480      	push	{r7}
 8008432:	b083      	sub	sp, #12
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
 800843c:	4613      	mov	r3, r2
 800843e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008440:	787b      	ldrb	r3, [r7, #1]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d003      	beq.n	800844e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008446:	887a      	ldrh	r2, [r7, #2]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800844c:	e003      	b.n	8008456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800844e:	887b      	ldrh	r3, [r7, #2]
 8008450:	041a      	lsls	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	619a      	str	r2, [r3, #24]
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
	...

08008464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e07f      	b.n	8008576 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b00      	cmp	r3, #0
 8008480:	d106      	bne.n	8008490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fa fd52 	bl	8002f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2224      	movs	r2, #36	; 0x24
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f022 0201 	bic.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80084b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d107      	bne.n	80084de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	689a      	ldr	r2, [r3, #8]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	e006      	b.n	80084ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689a      	ldr	r2, [r3, #8]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80084ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d104      	bne.n	80084fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6859      	ldr	r1, [r3, #4]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <HAL_I2C_Init+0x11c>)
 800850a:	430b      	orrs	r3, r1
 800850c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800851c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	430a      	orrs	r2, r1
 8008536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	69d9      	ldr	r1, [r3, #28]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a1a      	ldr	r2, [r3, #32]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}
 800857e:	bf00      	nop
 8008580:	02008000 	.word	0x02008000

08008584 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d005      	beq.n	80085b0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
  }
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b20      	cmp	r3, #32
 80085cc:	d138      	bne.n	8008640 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085d8:	2302      	movs	r3, #2
 80085da:	e032      	b.n	8008642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2224      	movs	r2, #36	; 0x24
 80085e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0201 	bic.w	r2, r2, #1
 80085fa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800860a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6819      	ldr	r1, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800863c:	2300      	movs	r3, #0
 800863e:	e000      	b.n	8008642 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008640:	2302      	movs	r3, #2
  }
}
 8008642:	4618      	mov	r0, r3
 8008644:	370c      	adds	r7, #12
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b20      	cmp	r3, #32
 8008662:	d139      	bne.n	80086d8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800866a:	2b01      	cmp	r3, #1
 800866c:	d101      	bne.n	8008672 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800866e:	2302      	movs	r3, #2
 8008670:	e033      	b.n	80086da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2224      	movs	r2, #36	; 0x24
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 0201 	bic.w	r2, r2, #1
 8008690:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80086a0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68fa      	ldr	r2, [r7, #12]
 80086b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f042 0201 	orr.w	r2, r2, #1
 80086c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086d4:	2300      	movs	r3, #0
 80086d6:	e000      	b.n	80086da <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086d8:	2302      	movs	r3, #2
  }
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3714      	adds	r7, #20
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e8:	b08f      	sub	sp, #60	; 0x3c
 80086ea:	af0a      	add	r7, sp, #40	; 0x28
 80086ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	e116      	b.n	8008926 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f00e fbc8 	bl	8016ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2203      	movs	r2, #3
 800871c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d102      	bne.n	8008732 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4618      	mov	r0, r3
 8008738:	f00a fcf7 	bl	801312a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	603b      	str	r3, [r7, #0]
 8008742:	687e      	ldr	r6, [r7, #4]
 8008744:	466d      	mov	r5, sp
 8008746:	f106 0410 	add.w	r4, r6, #16
 800874a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800874c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800874e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008756:	e885 0003 	stmia.w	r5, {r0, r1}
 800875a:	1d33      	adds	r3, r6, #4
 800875c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800875e:	6838      	ldr	r0, [r7, #0]
 8008760:	f00a fbc2 	bl	8012ee8 <USB_CoreInit>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d005      	beq.n	8008776 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e0d7      	b.n	8008926 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2100      	movs	r1, #0
 800877c:	4618      	mov	r0, r3
 800877e:	f00a fce5 	bl	801314c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	e04a      	b.n	800881e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008788:	7bfa      	ldrb	r2, [r7, #15]
 800878a:	6879      	ldr	r1, [r7, #4]
 800878c:	4613      	mov	r3, r2
 800878e:	00db      	lsls	r3, r3, #3
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	440b      	add	r3, r1
 8008796:	333d      	adds	r3, #61	; 0x3d
 8008798:	2201      	movs	r2, #1
 800879a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	6879      	ldr	r1, [r7, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	00db      	lsls	r3, r3, #3
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	440b      	add	r3, r1
 80087aa:	333c      	adds	r3, #60	; 0x3c
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80087b0:	7bfa      	ldrb	r2, [r7, #15]
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
 80087b4:	b298      	uxth	r0, r3
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4613      	mov	r3, r2
 80087ba:	00db      	lsls	r3, r3, #3
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	3356      	adds	r3, #86	; 0x56
 80087c4:	4602      	mov	r2, r0
 80087c6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80087c8:	7bfa      	ldrb	r2, [r7, #15]
 80087ca:	6879      	ldr	r1, [r7, #4]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3340      	adds	r3, #64	; 0x40
 80087d8:	2200      	movs	r2, #0
 80087da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087dc:	7bfa      	ldrb	r2, [r7, #15]
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	4613      	mov	r3, r2
 80087e2:	00db      	lsls	r3, r3, #3
 80087e4:	4413      	add	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3344      	adds	r3, #68	; 0x44
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087f0:	7bfa      	ldrb	r2, [r7, #15]
 80087f2:	6879      	ldr	r1, [r7, #4]
 80087f4:	4613      	mov	r3, r2
 80087f6:	00db      	lsls	r3, r3, #3
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	440b      	add	r3, r1
 80087fe:	3348      	adds	r3, #72	; 0x48
 8008800:	2200      	movs	r2, #0
 8008802:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008804:	7bfa      	ldrb	r2, [r7, #15]
 8008806:	6879      	ldr	r1, [r7, #4]
 8008808:	4613      	mov	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	4413      	add	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	440b      	add	r3, r1
 8008812:	334c      	adds	r3, #76	; 0x4c
 8008814:	2200      	movs	r2, #0
 8008816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	3301      	adds	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]
 800881e:	7bfa      	ldrb	r2, [r7, #15]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d3af      	bcc.n	8008788 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008828:	2300      	movs	r3, #0
 800882a:	73fb      	strb	r3, [r7, #15]
 800882c:	e044      	b.n	80088b8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800882e:	7bfa      	ldrb	r2, [r7, #15]
 8008830:	6879      	ldr	r1, [r7, #4]
 8008832:	4613      	mov	r3, r2
 8008834:	00db      	lsls	r3, r3, #3
 8008836:	4413      	add	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	440b      	add	r3, r1
 800883c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008840:	2200      	movs	r2, #0
 8008842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008844:	7bfa      	ldrb	r2, [r7, #15]
 8008846:	6879      	ldr	r1, [r7, #4]
 8008848:	4613      	mov	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	4413      	add	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	440b      	add	r3, r1
 8008852:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008856:	7bfa      	ldrb	r2, [r7, #15]
 8008858:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800885a:	7bfa      	ldrb	r2, [r7, #15]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800886c:	2200      	movs	r2, #0
 800886e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008870:	7bfa      	ldrb	r2, [r7, #15]
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008886:	7bfa      	ldrb	r2, [r7, #15]
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4613      	mov	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800889c:	7bfa      	ldrb	r2, [r7, #15]
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	4613      	mov	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	4413      	add	r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088b2:	7bfb      	ldrb	r3, [r7, #15]
 80088b4:	3301      	adds	r3, #1
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	7bfa      	ldrb	r2, [r7, #15]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d3b5      	bcc.n	800882e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	687e      	ldr	r6, [r7, #4]
 80088ca:	466d      	mov	r5, sp
 80088cc:	f106 0410 	add.w	r4, r6, #16
 80088d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80088e0:	1d33      	adds	r3, r6, #4
 80088e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088e4:	6838      	ldr	r0, [r7, #0]
 80088e6:	f00a fc7d 	bl	80131e4 <USB_DevInit>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e014      	b.n	8008926 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b01      	cmp	r3, #1
 8008912:	d102      	bne.n	800891a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f001 f96f 	bl	8009bf8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4618      	mov	r0, r3
 8008920:	f00b fcbf 	bl	80142a2 <USB_DevDisconnect>

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800892e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b084      	sub	sp, #16
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008942:	2b01      	cmp	r3, #1
 8008944:	d101      	bne.n	800894a <HAL_PCD_Start+0x1c>
 8008946:	2302      	movs	r3, #2
 8008948:	e022      	b.n	8008990 <HAL_PCD_Start+0x62>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800896a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f00a fbc6 	bl	8013108 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f00b fc6d 	bl	8014260 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	3710      	adds	r7, #16
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008998:	b590      	push	{r4, r7, lr}
 800899a:	b08d      	sub	sp, #52	; 0x34
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f00b fd2b 	bl	801440a <USB_GetMode>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 84b7 	bne.w	800932a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00b fc8f 	bl	80142e4 <USB_ReadInterrupts>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 84ad 	beq.w	8009328 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	0a1b      	lsrs	r3, r3, #8
 80089d8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f00b fc7c 	bl	80142e4 <USB_ReadInterrupts>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d107      	bne.n	8008a06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695a      	ldr	r2, [r3, #20]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f002 0202 	and.w	r2, r2, #2
 8008a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f00b fc6a 	bl	80142e4 <USB_ReadInterrupts>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f003 0310 	and.w	r3, r3, #16
 8008a16:	2b10      	cmp	r3, #16
 8008a18:	d161      	bne.n	8008ade <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	699a      	ldr	r2, [r3, #24]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0210 	bic.w	r2, r2, #16
 8008a28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008a2a:	6a3b      	ldr	r3, [r7, #32]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f003 020f 	and.w	r2, r3, #15
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4413      	add	r3, r2
 8008a46:	3304      	adds	r3, #4
 8008a48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	0c5b      	lsrs	r3, r3, #17
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d124      	bne.n	8008aa0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008a56:	69ba      	ldr	r2, [r7, #24]
 8008a58:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d035      	beq.n	8008ace <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	091b      	lsrs	r3, r3, #4
 8008a6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	461a      	mov	r2, r3
 8008a74:	6a38      	ldr	r0, [r7, #32]
 8008a76:	f00b faa1 	bl	8013fbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	091b      	lsrs	r3, r3, #4
 8008a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a86:	441a      	add	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	695a      	ldr	r2, [r3, #20]
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	091b      	lsrs	r3, r3, #4
 8008a94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a98:	441a      	add	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	615a      	str	r2, [r3, #20]
 8008a9e:	e016      	b.n	8008ace <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	0c5b      	lsrs	r3, r3, #17
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	2b06      	cmp	r3, #6
 8008aaa:	d110      	bne.n	8008ace <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6a38      	ldr	r0, [r7, #32]
 8008ab8:	f00b fa80 	bl	8013fbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	695a      	ldr	r2, [r3, #20]
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	091b      	lsrs	r3, r3, #4
 8008ac4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ac8:	441a      	add	r2, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	699a      	ldr	r2, [r3, #24]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0210 	orr.w	r2, r2, #16
 8008adc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f00b fbfe 	bl	80142e4 <USB_ReadInterrupts>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008af2:	f040 80a7 	bne.w	8008c44 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f00b fc03 	bl	801430a <USB_ReadDevAllOutEpInterrupt>
 8008b04:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b06:	e099      	b.n	8008c3c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 808e 	beq.w	8008c30 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1a:	b2d2      	uxtb	r2, r2
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f00b fc27 	bl	8014372 <USB_ReadDevOutEPInterrupt>
 8008b24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00c      	beq.n	8008b4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	2301      	movs	r3, #1
 8008b40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fed1 	bl	80098ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f003 0308 	and.w	r3, r3, #8
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00c      	beq.n	8008b6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b60:	461a      	mov	r2, r3
 8008b62:	2308      	movs	r3, #8
 8008b64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 ffa7 	bl	8009abc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d008      	beq.n	8008b8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b84:	461a      	mov	r2, r3
 8008b86:	2310      	movs	r3, #16
 8008b88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f003 0302 	and.w	r3, r3, #2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d030      	beq.n	8008bf6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b9c:	2b80      	cmp	r3, #128	; 0x80
 8008b9e:	d109      	bne.n	8008bb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008bb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d108      	bne.n	8008be4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f00e fa5a 	bl	8017098 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2302      	movs	r3, #2
 8008bf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f003 0320 	and.w	r3, r3, #32
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d008      	beq.n	8008c12 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	2320      	movs	r3, #32
 8008c10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c2e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	3301      	adds	r3, #1
 8008c34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c38:	085b      	lsrs	r3, r3, #1
 8008c3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f47f af62 	bne.w	8008b08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f00b fb4b 	bl	80142e4 <USB_ReadInterrupts>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c58:	f040 80db 	bne.w	8008e12 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f00b fb6c 	bl	801433e <USB_ReadDevAllInEpInterrupt>
 8008c66:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c6c:	e0cd      	b.n	8008e0a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c70:	f003 0301 	and.w	r3, r3, #1
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f000 80c2 	beq.w	8008dfe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c80:	b2d2      	uxtb	r2, r2
 8008c82:	4611      	mov	r1, r2
 8008c84:	4618      	mov	r0, r3
 8008c86:	f00b fb92 	bl	80143ae <USB_ReadDevInEPInterrupt>
 8008c8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d057      	beq.n	8008d46 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	2301      	movs	r3, #1
 8008cca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d132      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3348      	adds	r3, #72	; 0x48
 8008ce4:	6819      	ldr	r1, [r3, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cea:	4613      	mov	r3, r2
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4403      	add	r3, r0
 8008cf4:	3344      	adds	r3, #68	; 0x44
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4419      	add	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cfe:	4613      	mov	r3, r2
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4403      	add	r3, r0
 8008d08:	3348      	adds	r3, #72	; 0x48
 8008d0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d113      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x3a2>
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d16:	4613      	mov	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	440b      	add	r3, r1
 8008d20:	334c      	adds	r3, #76	; 0x4c
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d108      	bne.n	8008d3a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d32:	461a      	mov	r2, r3
 8008d34:	2101      	movs	r1, #1
 8008d36:	f00b fb9b 	bl	8014470 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f00e f924 	bl	8016f8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d008      	beq.n	8008d62 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	2308      	movs	r3, #8
 8008d60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f003 0310 	and.w	r3, r3, #16
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d008      	beq.n	8008d7e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	015a      	lsls	r2, r3, #5
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	4413      	add	r3, r2
 8008d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d78:	461a      	mov	r2, r3
 8008d7a:	2310      	movs	r3, #16
 8008d7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	015a      	lsls	r2, r3, #5
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	4413      	add	r3, r2
 8008d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d94:	461a      	mov	r2, r3
 8008d96:	2340      	movs	r3, #64	; 0x40
 8008d98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d023      	beq.n	8008dec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008da6:	6a38      	ldr	r0, [r7, #32]
 8008da8:	f00a fb7a 	bl	80134a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dae:	4613      	mov	r3, r2
 8008db0:	00db      	lsls	r3, r3, #3
 8008db2:	4413      	add	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	3338      	adds	r3, #56	; 0x38
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	4413      	add	r3, r2
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	78db      	ldrb	r3, [r3, #3]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d108      	bne.n	8008dda <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	4619      	mov	r1, r3
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f00e f971 	bl	80170bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de6:	461a      	mov	r2, r3
 8008de8:	2302      	movs	r3, #2
 8008dea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fcea 	bl	80097d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	3301      	adds	r3, #1
 8008e02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	f47f af2e 	bne.w	8008c6e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f00b fa64 	bl	80142e4 <USB_ReadInterrupts>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e26:	d122      	bne.n	8008e6e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e36:	f023 0301 	bic.w	r3, r3, #1
 8008e3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d108      	bne.n	8008e58 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e4e:	2100      	movs	r1, #0
 8008e50:	6878      	ldr	r0, [r7, #4]
 8008e52:	f000 fef5 	bl	8009c40 <HAL_PCDEx_LPM_Callback>
 8008e56:	e002      	b.n	8008e5e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f00e f90f 	bl	801707c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	695a      	ldr	r2, [r3, #20]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f00b fa36 	bl	80142e4 <USB_ReadInterrupts>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e82:	d112      	bne.n	8008eaa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d102      	bne.n	8008e9a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f00e f8cb 	bl	8017030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695a      	ldr	r2, [r3, #20]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f00b fa18 	bl	80142e4 <USB_ReadInterrupts>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ebe:	d121      	bne.n	8008f04 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008ece:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d111      	bne.n	8008efe <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee8:	089b      	lsrs	r3, r3, #2
 8008eea:	f003 020f 	and.w	r2, r3, #15
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fea2 	bl	8009c40 <HAL_PCDEx_LPM_Callback>
 8008efc:	e002      	b.n	8008f04 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f00e f896 	bl	8017030 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f00b f9eb 	bl	80142e4 <USB_ReadInterrupts>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f18:	f040 80b7 	bne.w	800908a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2a:	f023 0301 	bic.w	r3, r3, #1
 8008f2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2110      	movs	r1, #16
 8008f36:	4618      	mov	r0, r3
 8008f38:	f00a fab2 	bl	80134a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f40:	e046      	b.n	8008fd0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f74:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f82:	461a      	mov	r2, r3
 8008f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f88:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	69fa      	ldr	r2, [r7, #28]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fa8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	69fa      	ldr	r2, [r7, #28]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fc4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008fc8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fcc:	3301      	adds	r3, #1
 8008fce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d3b3      	bcc.n	8008f42 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008fec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d016      	beq.n	8009024 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009000:	69fa      	ldr	r2, [r7, #28]
 8009002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009006:	f043 030b 	orr.w	r3, r3, #11
 800900a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800901c:	f043 030b 	orr.w	r3, r3, #11
 8009020:	6453      	str	r3, [r2, #68]	; 0x44
 8009022:	e015      	b.n	8009050 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902a:	695a      	ldr	r2, [r3, #20]
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009032:	4619      	mov	r1, r3
 8009034:	f242 032b 	movw	r3, #8235	; 0x202b
 8009038:	4313      	orrs	r3, r2
 800903a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f043 030b 	orr.w	r3, r3, #11
 800904e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800905e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009062:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6818      	ldr	r0, [r3, #0]
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009074:	461a      	mov	r2, r3
 8009076:	f00b f9fb 	bl	8014470 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	695a      	ldr	r2, [r3, #20]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009088:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f00b f928 	bl	80142e4 <USB_ReadInterrupts>
 8009094:	4603      	mov	r3, r0
 8009096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800909e:	d124      	bne.n	80090ea <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f00b f9bf 	bl	8014428 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f00a fa73 	bl	801359a <USB_GetDevSpeed>
 80090b4:	4603      	mov	r3, r0
 80090b6:	461a      	mov	r2, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681c      	ldr	r4, [r3, #0]
 80090c0:	f001 fd88 	bl	800abd4 <HAL_RCC_GetHCLKFreq>
 80090c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	4620      	mov	r0, r4
 80090d0:	f009 ff78 	bl	8012fc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f00d ff82 	bl	8016fde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	695a      	ldr	r2, [r3, #20]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80090e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f00b f8f8 	bl	80142e4 <USB_ReadInterrupts>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b08      	cmp	r3, #8
 80090fc:	d10a      	bne.n	8009114 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f00d ff5f 	bl	8016fc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	695a      	ldr	r2, [r3, #20]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f002 0208 	and.w	r2, r2, #8
 8009112:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	f00b f8e3 	bl	80142e4 <USB_ReadInterrupts>
 800911e:	4603      	mov	r3, r0
 8009120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009124:	2b80      	cmp	r3, #128	; 0x80
 8009126:	d122      	bne.n	800916e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009134:	2301      	movs	r3, #1
 8009136:	627b      	str	r3, [r7, #36]	; 0x24
 8009138:	e014      	b.n	8009164 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800913a:	6879      	ldr	r1, [r7, #4]
 800913c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800913e:	4613      	mov	r3, r2
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	4413      	add	r3, r2
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	440b      	add	r3, r1
 8009148:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d105      	bne.n	800915e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	b2db      	uxtb	r3, r3
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb09 	bl	8009770 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	3301      	adds	r3, #1
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800916a:	429a      	cmp	r2, r3
 800916c:	d3e5      	bcc.n	800913a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4618      	mov	r0, r3
 8009174:	f00b f8b6 	bl	80142e4 <USB_ReadInterrupts>
 8009178:	4603      	mov	r3, r0
 800917a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800917e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009182:	d13b      	bne.n	80091fc <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009184:	2301      	movs	r3, #1
 8009186:	627b      	str	r3, [r7, #36]	; 0x24
 8009188:	e02b      	b.n	80091e2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919e:	4613      	mov	r3, r2
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4413      	add	r3, r2
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	440b      	add	r3, r1
 80091a8:	3340      	adds	r3, #64	; 0x40
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d115      	bne.n	80091dc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80091b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	da12      	bge.n	80091dc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ba:	4613      	mov	r3, r2
 80091bc:	00db      	lsls	r3, r3, #3
 80091be:	4413      	add	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	440b      	add	r3, r1
 80091c4:	333f      	adds	r3, #63	; 0x3f
 80091c6:	2201      	movs	r2, #1
 80091c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	4619      	mov	r1, r3
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 faca 	bl	8009770 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	3301      	adds	r3, #1
 80091e0:	627b      	str	r3, [r7, #36]	; 0x24
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d3ce      	bcc.n	800918a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695a      	ldr	r2, [r3, #20]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80091fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f00b f86f 	bl	80142e4 <USB_ReadInterrupts>
 8009206:	4603      	mov	r3, r0
 8009208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800920c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009210:	d155      	bne.n	80092be <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009212:	2301      	movs	r3, #1
 8009214:	627b      	str	r3, [r7, #36]	; 0x24
 8009216:	e045      	b.n	80092a4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800922c:	4613      	mov	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	4413      	add	r3, r2
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	440b      	add	r3, r1
 8009236:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d12e      	bne.n	800929e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009240:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009242:	2b00      	cmp	r3, #0
 8009244:	da2b      	bge.n	800929e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009252:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009256:	429a      	cmp	r2, r3
 8009258:	d121      	bne.n	800929e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925e:	4613      	mov	r3, r2
 8009260:	00db      	lsls	r3, r3, #3
 8009262:	4413      	add	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	440b      	add	r3, r1
 8009268:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800926c:	2201      	movs	r2, #1
 800926e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800927c:	6a3b      	ldr	r3, [r7, #32]
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	69fa      	ldr	r2, [r7, #28]
 8009292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800929a:	6053      	str	r3, [r2, #4]
            break;
 800929c:	e007      	b.n	80092ae <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	3301      	adds	r3, #1
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d3b4      	bcc.n	8009218 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	695a      	ldr	r2, [r3, #20]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80092bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f00b f80e 	bl	80142e4 <USB_ReadInterrupts>
 80092c8:	4603      	mov	r3, r0
 80092ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d2:	d10a      	bne.n	80092ea <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f00d ff03 	bl	80170e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	695a      	ldr	r2, [r3, #20]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80092e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f00a fff8 	bl	80142e4 <USB_ReadInterrupts>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b04      	cmp	r3, #4
 80092fc:	d115      	bne.n	800932a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009306:	69bb      	ldr	r3, [r7, #24]
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f00d fef3 	bl	80170fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	6859      	ldr	r1, [r3, #4]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	e000      	b.n	800932a <HAL_PCD_IRQHandler+0x992>
      return;
 8009328:	bf00      	nop
    }
  }
}
 800932a:	3734      	adds	r7, #52	; 0x34
 800932c:	46bd      	mov	sp, r7
 800932e:	bd90      	pop	{r4, r7, pc}

08009330 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009342:	2b01      	cmp	r3, #1
 8009344:	d101      	bne.n	800934a <HAL_PCD_SetAddress+0x1a>
 8009346:	2302      	movs	r3, #2
 8009348:	e013      	b.n	8009372 <HAL_PCD_SetAddress+0x42>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	78fa      	ldrb	r2, [r7, #3]
 8009360:	4611      	mov	r1, r2
 8009362:	4618      	mov	r0, r3
 8009364:	f00a ff56 	bl	8014214 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b084      	sub	sp, #16
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
 8009382:	4608      	mov	r0, r1
 8009384:	4611      	mov	r1, r2
 8009386:	461a      	mov	r2, r3
 8009388:	4603      	mov	r3, r0
 800938a:	70fb      	strb	r3, [r7, #3]
 800938c:	460b      	mov	r3, r1
 800938e:	803b      	strh	r3, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009394:	2300      	movs	r3, #0
 8009396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009398:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800939c:	2b00      	cmp	r3, #0
 800939e:	da0f      	bge.n	80093c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093a0:	78fb      	ldrb	r3, [r7, #3]
 80093a2:	f003 020f 	and.w	r2, r3, #15
 80093a6:	4613      	mov	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	3338      	adds	r3, #56	; 0x38
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	3304      	adds	r3, #4
 80093b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2201      	movs	r2, #1
 80093bc:	705a      	strb	r2, [r3, #1]
 80093be:	e00f      	b.n	80093e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	f003 020f 	and.w	r2, r3, #15
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	4413      	add	r3, r2
 80093d6:	3304      	adds	r3, #4
 80093d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80093ec:	883a      	ldrh	r2, [r7, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	78ba      	ldrb	r2, [r7, #2]
 80093f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800940a:	78bb      	ldrb	r3, [r7, #2]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d102      	bne.n	8009416 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800941c:	2b01      	cmp	r3, #1
 800941e:	d101      	bne.n	8009424 <HAL_PCD_EP_Open+0xaa>
 8009420:	2302      	movs	r3, #2
 8009422:	e00e      	b.n	8009442 <HAL_PCD_EP_Open+0xc8>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68f9      	ldr	r1, [r7, #12]
 8009432:	4618      	mov	r0, r3
 8009434:	f00a f8d6 	bl	80135e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009440:	7afb      	ldrb	r3, [r7, #11]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009456:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800945a:	2b00      	cmp	r3, #0
 800945c:	da0f      	bge.n	800947e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	f003 020f 	and.w	r2, r3, #15
 8009464:	4613      	mov	r3, r2
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	3338      	adds	r3, #56	; 0x38
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	4413      	add	r3, r2
 8009472:	3304      	adds	r3, #4
 8009474:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2201      	movs	r2, #1
 800947a:	705a      	strb	r2, [r3, #1]
 800947c:	e00f      	b.n	800949e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	f003 020f 	and.w	r2, r3, #15
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	b2da      	uxtb	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <HAL_PCD_EP_Close+0x6e>
 80094b4:	2302      	movs	r3, #2
 80094b6:	e00e      	b.n	80094d6 <HAL_PCD_EP_Close+0x8c>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68f9      	ldr	r1, [r7, #12]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f00a f914 	bl	80136f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
 80094ea:	460b      	mov	r3, r1
 80094ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ee:	7afb      	ldrb	r3, [r7, #11]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	4613      	mov	r3, r2
 80094f6:	00db      	lsls	r3, r3, #3
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	683a      	ldr	r2, [r7, #0]
 8009512:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2200      	movs	r2, #0
 8009518:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	2200      	movs	r2, #0
 800951e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009520:	7afb      	ldrb	r3, [r7, #11]
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	b2da      	uxtb	r2, r3
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d102      	bne.n	800953a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6818      	ldr	r0, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	461a      	mov	r2, r3
 8009546:	6979      	ldr	r1, [r7, #20]
 8009548:	f00a f9b0 	bl	80138ac <USB_EPStartXfer>

  return HAL_OK;
 800954c:	2300      	movs	r3, #0
}
 800954e:	4618      	mov	r0, r3
 8009550:	3718      	adds	r7, #24
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	460b      	mov	r3, r1
 8009560:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	f003 020f 	and.w	r2, r3, #15
 8009568:	6879      	ldr	r1, [r7, #4]
 800956a:	4613      	mov	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	4413      	add	r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	440b      	add	r3, r1
 8009574:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009578:	681b      	ldr	r3, [r3, #0]
}
 800957a:	4618      	mov	r0, r3
 800957c:	370c      	adds	r7, #12
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b086      	sub	sp, #24
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	607a      	str	r2, [r7, #4]
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	460b      	mov	r3, r1
 8009594:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009596:	7afb      	ldrb	r3, [r7, #11]
 8009598:	f003 020f 	and.w	r2, r3, #15
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	3338      	adds	r3, #56	; 0x38
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4413      	add	r3, r2
 80095aa:	3304      	adds	r3, #4
 80095ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2200      	movs	r2, #0
 80095be:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2201      	movs	r2, #1
 80095c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	f003 030f 	and.w	r3, r3, #15
 80095cc:	b2da      	uxtb	r2, r3
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d102      	bne.n	80095e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	461a      	mov	r2, r3
 80095ec:	6979      	ldr	r1, [r7, #20]
 80095ee:	f00a f95d 	bl	80138ac <USB_EPStartXfer>

  return HAL_OK;
 80095f2:	2300      	movs	r3, #0
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	460b      	mov	r3, r1
 8009606:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009608:	78fb      	ldrb	r3, [r7, #3]
 800960a:	f003 020f 	and.w	r2, r3, #15
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	429a      	cmp	r2, r3
 8009614:	d901      	bls.n	800961a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e050      	b.n	80096bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800961a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800961e:	2b00      	cmp	r3, #0
 8009620:	da0f      	bge.n	8009642 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009622:	78fb      	ldrb	r3, [r7, #3]
 8009624:	f003 020f 	and.w	r2, r3, #15
 8009628:	4613      	mov	r3, r2
 800962a:	00db      	lsls	r3, r3, #3
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	3338      	adds	r3, #56	; 0x38
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	4413      	add	r3, r2
 8009636:	3304      	adds	r3, #4
 8009638:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2201      	movs	r2, #1
 800963e:	705a      	strb	r2, [r3, #1]
 8009640:	e00d      	b.n	800965e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009642:	78fa      	ldrb	r2, [r7, #3]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	4413      	add	r3, r2
 8009654:	3304      	adds	r3, #4
 8009656:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2201      	movs	r2, #1
 8009662:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009664:	78fb      	ldrb	r3, [r7, #3]
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	b2da      	uxtb	r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <HAL_PCD_EP_SetStall+0x82>
 800967a:	2302      	movs	r3, #2
 800967c:	e01e      	b.n	80096bc <HAL_PCD_EP_SetStall+0xc0>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	68f9      	ldr	r1, [r7, #12]
 800968c:	4618      	mov	r0, r3
 800968e:	f00a fced 	bl	801406c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009692:	78fb      	ldrb	r3, [r7, #3]
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10a      	bne.n	80096b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	b2d9      	uxtb	r1, r3
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096ac:	461a      	mov	r2, r3
 80096ae:	f00a fedf 	bl	8014470 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	460b      	mov	r3, r1
 80096ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80096d0:	78fb      	ldrb	r3, [r7, #3]
 80096d2:	f003 020f 	and.w	r2, r3, #15
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d901      	bls.n	80096e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	e042      	b.n	8009768 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da0f      	bge.n	800970a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	3338      	adds	r3, #56	; 0x38
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	4413      	add	r3, r2
 80096fe:	3304      	adds	r3, #4
 8009700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2201      	movs	r2, #1
 8009706:	705a      	strb	r2, [r3, #1]
 8009708:	e00f      	b.n	800972a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800970a:	78fb      	ldrb	r3, [r7, #3]
 800970c:	f003 020f 	and.w	r2, r3, #15
 8009710:	4613      	mov	r3, r2
 8009712:	00db      	lsls	r3, r3, #3
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	4413      	add	r3, r2
 8009720:	3304      	adds	r3, #4
 8009722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	b2da      	uxtb	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_PCD_EP_ClrStall+0x86>
 8009746:	2302      	movs	r3, #2
 8009748:	e00e      	b.n	8009768 <HAL_PCD_EP_ClrStall+0xa4>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68f9      	ldr	r1, [r7, #12]
 8009758:	4618      	mov	r0, r3
 800975a:	f00a fcf5 	bl	8014148 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800977c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009780:	2b00      	cmp	r3, #0
 8009782:	da0c      	bge.n	800979e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	f003 020f 	and.w	r2, r3, #15
 800978a:	4613      	mov	r3, r2
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	4413      	add	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	3338      	adds	r3, #56	; 0x38
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	4413      	add	r3, r2
 8009798:	3304      	adds	r3, #4
 800979a:	60fb      	str	r3, [r7, #12]
 800979c:	e00c      	b.n	80097b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800979e:	78fb      	ldrb	r3, [r7, #3]
 80097a0:	f003 020f 	and.w	r2, r3, #15
 80097a4:	4613      	mov	r3, r2
 80097a6:	00db      	lsls	r3, r3, #3
 80097a8:	4413      	add	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	4413      	add	r3, r2
 80097b4:	3304      	adds	r3, #4
 80097b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	4618      	mov	r0, r3
 80097c0:	f00a fb14 	bl	8013dec <USB_EPStopXfer>
 80097c4:	4603      	mov	r3, r0
 80097c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80097c8:	7afb      	ldrb	r3, [r7, #11]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b08a      	sub	sp, #40	; 0x28
 80097d6:	af02      	add	r7, sp, #8
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	4613      	mov	r3, r2
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	3338      	adds	r3, #56	; 0x38
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	4413      	add	r3, r2
 80097f6:	3304      	adds	r3, #4
 80097f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	695a      	ldr	r2, [r3, #20]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	429a      	cmp	r2, r3
 8009804:	d901      	bls.n	800980a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e06c      	b.n	80098e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	691a      	ldr	r2, [r3, #16]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	695b      	ldr	r3, [r3, #20]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	69fa      	ldr	r2, [r7, #28]
 800981c:	429a      	cmp	r2, r3
 800981e:	d902      	bls.n	8009826 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	3303      	adds	r3, #3
 800982a:	089b      	lsrs	r3, r3, #2
 800982c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800982e:	e02b      	b.n	8009888 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691a      	ldr	r2, [r3, #16]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	69fa      	ldr	r2, [r7, #28]
 8009842:	429a      	cmp	r2, r3
 8009844:	d902      	bls.n	800984c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	3303      	adds	r3, #3
 8009850:	089b      	lsrs	r3, r3, #2
 8009852:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	68d9      	ldr	r1, [r3, #12]
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	b2da      	uxtb	r2, r3
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009864:	b2db      	uxtb	r3, r3
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	6978      	ldr	r0, [r7, #20]
 800986c:	f00a fb68 	bl	8013f40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68da      	ldr	r2, [r3, #12]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	441a      	add	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	695a      	ldr	r2, [r3, #20]
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	441a      	add	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	429a      	cmp	r2, r3
 800989c:	d809      	bhi.n	80098b2 <PCD_WriteEmptyTxFifo+0xe0>
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	695a      	ldr	r2, [r3, #20]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d203      	bcs.n	80098b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1be      	bne.n	8009830 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d811      	bhi.n	80098e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	2201      	movs	r2, #1
 80098c6:	fa02 f303 	lsl.w	r3, r2, r3
 80098ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	43db      	mvns	r3, r3
 80098d8:	6939      	ldr	r1, [r7, #16]
 80098da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098de:	4013      	ands	r3, r2
 80098e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3720      	adds	r7, #32
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b088      	sub	sp, #32
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	333c      	adds	r3, #60	; 0x3c
 8009904:	3304      	adds	r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d17b      	bne.n	8009a1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f003 0308 	and.w	r3, r3, #8
 8009928:	2b00      	cmp	r3, #0
 800992a:	d015      	beq.n	8009958 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	4a61      	ldr	r2, [pc, #388]	; (8009ab4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	f240 80b9 	bls.w	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 80b3 	beq.w	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994e:	461a      	mov	r2, r3
 8009950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009954:	6093      	str	r3, [r2, #8]
 8009956:	e0a7      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	f003 0320 	and.w	r3, r3, #32
 800995e:	2b00      	cmp	r3, #0
 8009960:	d009      	beq.n	8009976 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996e:	461a      	mov	r2, r3
 8009970:	2320      	movs	r3, #32
 8009972:	6093      	str	r3, [r2, #8]
 8009974:	e098      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800997c:	2b00      	cmp	r3, #0
 800997e:	f040 8093 	bne.w	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	4a4b      	ldr	r2, [pc, #300]	; (8009ab4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d90f      	bls.n	80099aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00a      	beq.n	80099aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	461a      	mov	r2, r3
 80099a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099a6:	6093      	str	r3, [r2, #8]
 80099a8:	e07e      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	4613      	mov	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	4413      	add	r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	4413      	add	r3, r2
 80099bc:	3304      	adds	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	6a1a      	ldr	r2, [r3, #32]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	0159      	lsls	r1, r3, #5
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	440b      	add	r3, r1
 80099cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099d6:	1ad2      	subs	r2, r2, r3
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d114      	bne.n	8009a0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6818      	ldr	r0, [r3, #0]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80099f4:	461a      	mov	r2, r3
 80099f6:	2101      	movs	r1, #1
 80099f8:	f00a fd3a 	bl	8014470 <USB_EP0_OutStart>
 80099fc:	e006      	b.n	8009a0c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	68da      	ldr	r2, [r3, #12]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	441a      	add	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	4619      	mov	r1, r3
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f00d faa0 	bl	8016f58 <HAL_PCD_DataOutStageCallback>
 8009a18:	e046      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	4a26      	ldr	r2, [pc, #152]	; (8009ab8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d124      	bne.n	8009a6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	015a      	lsls	r2, r3, #5
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	4413      	add	r3, r2
 8009a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a38:	461a      	mov	r2, r3
 8009a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a3e:	6093      	str	r3, [r2, #8]
 8009a40:	e032      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f003 0320 	and.w	r3, r3, #32
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d008      	beq.n	8009a5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2320      	movs	r3, #32
 8009a5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f00d fa77 	bl	8016f58 <HAL_PCD_DataOutStageCallback>
 8009a6a:	e01d      	b.n	8009aa8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d114      	bne.n	8009a9c <PCD_EP_OutXfrComplete_int+0x1b0>
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	4613      	mov	r3, r2
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d108      	bne.n	8009a9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009a94:	461a      	mov	r2, r3
 8009a96:	2100      	movs	r1, #0
 8009a98:	f00a fcea 	bl	8014470 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f00d fa58 	bl	8016f58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3720      	adds	r7, #32
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	4f54300a 	.word	0x4f54300a
 8009ab8:	4f54310a 	.word	0x4f54310a

08009abc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	333c      	adds	r3, #60	; 0x3c
 8009ad4:	3304      	adds	r3, #4
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	015a      	lsls	r2, r3, #5
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4a15      	ldr	r2, [pc, #84]	; (8009b44 <PCD_EP_OutSetupPacket_int+0x88>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d90e      	bls.n	8009b10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d009      	beq.n	8009b10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f00d fa0f 	bl	8016f34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a0a      	ldr	r2, [pc, #40]	; (8009b44 <PCD_EP_OutSetupPacket_int+0x88>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d90c      	bls.n	8009b38 <PCD_EP_OutSetupPacket_int+0x7c>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d108      	bne.n	8009b38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b30:	461a      	mov	r2, r3
 8009b32:	2101      	movs	r1, #1
 8009b34:	f00a fc9c 	bl	8014470 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3718      	adds	r7, #24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	4f54300a 	.word	0x4f54300a

08009b48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
 8009b54:	4613      	mov	r3, r2
 8009b56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d107      	bne.n	8009b76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009b66:	883b      	ldrh	r3, [r7, #0]
 8009b68:	0419      	lsls	r1, r3, #16
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	629a      	str	r2, [r3, #40]	; 0x28
 8009b74:	e028      	b.n	8009bc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009b84:	2300      	movs	r3, #0
 8009b86:	73fb      	strb	r3, [r7, #15]
 8009b88:	e00d      	b.n	8009ba6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	3340      	adds	r3, #64	; 0x40
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	0c1b      	lsrs	r3, r3, #16
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ba0:	7bfb      	ldrb	r3, [r7, #15]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
 8009ba6:	7bfa      	ldrb	r2, [r7, #15]
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d3ec      	bcc.n	8009b8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009bb0:	883b      	ldrh	r3, [r7, #0]
 8009bb2:	0418      	lsls	r0, r3, #16
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6819      	ldr	r1, [r3, #0]
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	68ba      	ldr	r2, [r7, #8]
 8009bbe:	4302      	orrs	r2, r0
 8009bc0:	3340      	adds	r3, #64	; 0x40
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	440b      	add	r3, r1
 8009bc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	460b      	mov	r3, r1
 8009be0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	887a      	ldrh	r2, [r7, #2]
 8009be8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009bea:	2300      	movs	r3, #0
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr

08009bf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b085      	sub	sp, #20
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c26:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <HAL_PCDEx_ActivateLPM+0x44>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	68fa      	ldr	r2, [r7, #12]
 8009c2c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	10000003 	.word	0x10000003

08009c40 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c60:	4b19      	ldr	r3, [pc, #100]	; (8009cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c62:	68db      	ldr	r3, [r3, #12]
 8009c64:	f003 0304 	and.w	r3, r3, #4
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d00a      	beq.n	8009c82 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c6c:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	f003 0307 	and.w	r3, r3, #7
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d001      	beq.n	8009c7e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e01f      	b.n	8009cbe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	e01d      	b.n	8009cbe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c82:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	f023 0207 	bic.w	r2, r3, #7
 8009c8a:	490f      	ldr	r1, [pc, #60]	; (8009cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009c92:	f7fa f90f 	bl	8003eb4 <HAL_GetTick>
 8009c96:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009c98:	e009      	b.n	8009cae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009c9a:	f7fa f90b 	bl	8003eb4 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ca8:	d901      	bls.n	8009cae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e007      	b.n	8009cbe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cae:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_PWREx_ConfigSupply+0x70>)
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cba:	d1ee      	bne.n	8009c9a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	58024800 	.word	0x58024800

08009ccc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009cd0:	4b05      	ldr	r3, [pc, #20]	; (8009ce8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	4a04      	ldr	r2, [pc, #16]	; (8009ce8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009cda:	60d3      	str	r3, [r2, #12]
}
 8009cdc:	bf00      	nop
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	58024800 	.word	0x58024800

08009cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	; 0x30
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e3c8      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0301 	and.w	r3, r3, #1
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	f000 8087 	beq.w	8009e1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d0c:	4b88      	ldr	r3, [pc, #544]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d0e:	691b      	ldr	r3, [r3, #16]
 8009d10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d16:	4b86      	ldr	r3, [pc, #536]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b10      	cmp	r3, #16
 8009d20:	d007      	beq.n	8009d32 <HAL_RCC_OscConfig+0x46>
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	2b18      	cmp	r3, #24
 8009d26:	d110      	bne.n	8009d4a <HAL_RCC_OscConfig+0x5e>
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d10b      	bne.n	8009d4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d32:	4b7f      	ldr	r3, [pc, #508]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d06c      	beq.n	8009e18 <HAL_RCC_OscConfig+0x12c>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d168      	bne.n	8009e18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e3a2      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d52:	d106      	bne.n	8009d62 <HAL_RCC_OscConfig+0x76>
 8009d54:	4b76      	ldr	r3, [pc, #472]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a75      	ldr	r2, [pc, #468]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	e02e      	b.n	8009dc0 <HAL_RCC_OscConfig+0xd4>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d10c      	bne.n	8009d84 <HAL_RCC_OscConfig+0x98>
 8009d6a:	4b71      	ldr	r3, [pc, #452]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a70      	ldr	r2, [pc, #448]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	4b6e      	ldr	r3, [pc, #440]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a6d      	ldr	r2, [pc, #436]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d80:	6013      	str	r3, [r2, #0]
 8009d82:	e01d      	b.n	8009dc0 <HAL_RCC_OscConfig+0xd4>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d8c:	d10c      	bne.n	8009da8 <HAL_RCC_OscConfig+0xbc>
 8009d8e:	4b68      	ldr	r3, [pc, #416]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a67      	ldr	r2, [pc, #412]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d98:	6013      	str	r3, [r2, #0]
 8009d9a:	4b65      	ldr	r3, [pc, #404]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a64      	ldr	r2, [pc, #400]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	e00b      	b.n	8009dc0 <HAL_RCC_OscConfig+0xd4>
 8009da8:	4b61      	ldr	r3, [pc, #388]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a60      	ldr	r2, [pc, #384]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009db2:	6013      	str	r3, [r2, #0]
 8009db4:	4b5e      	ldr	r3, [pc, #376]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a5d      	ldr	r2, [pc, #372]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d013      	beq.n	8009df0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc8:	f7fa f874 	bl	8003eb4 <HAL_GetTick>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dd0:	f7fa f870 	bl	8003eb4 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b64      	cmp	r3, #100	; 0x64
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e356      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009de2:	4b53      	ldr	r3, [pc, #332]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0xe4>
 8009dee:	e014      	b.n	8009e1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009df0:	f7fa f860 	bl	8003eb4 <HAL_GetTick>
 8009df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009df6:	e008      	b.n	8009e0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009df8:	f7fa f85c 	bl	8003eb4 <HAL_GetTick>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	2b64      	cmp	r3, #100	; 0x64
 8009e04:	d901      	bls.n	8009e0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e342      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e0a:	4b49      	ldr	r3, [pc, #292]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1f0      	bne.n	8009df8 <HAL_RCC_OscConfig+0x10c>
 8009e16:	e000      	b.n	8009e1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0302 	and.w	r3, r3, #2
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 808c 	beq.w	8009f40 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e28:	4b41      	ldr	r3, [pc, #260]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e32:	4b3f      	ldr	r3, [pc, #252]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_RCC_OscConfig+0x162>
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	2b18      	cmp	r3, #24
 8009e42:	d137      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x1c8>
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	f003 0303 	and.w	r3, r3, #3
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d132      	bne.n	8009eb4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e4e:	4b38      	ldr	r3, [pc, #224]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <HAL_RCC_OscConfig+0x17a>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e314      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e66:	4b32      	ldr	r3, [pc, #200]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f023 0219 	bic.w	r2, r3, #25
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	492f      	ldr	r1, [pc, #188]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e74:	4313      	orrs	r3, r2
 8009e76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e78:	f7fa f81c 	bl	8003eb4 <HAL_GetTick>
 8009e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e7e:	e008      	b.n	8009e92 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e80:	f7fa f818 	bl	8003eb4 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d901      	bls.n	8009e92 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e2fe      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f003 0304 	and.w	r3, r3, #4
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0f0      	beq.n	8009e80 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e9e:	4b24      	ldr	r3, [pc, #144]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	061b      	lsls	r3, r3, #24
 8009eac:	4920      	ldr	r1, [pc, #128]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eb2:	e045      	b.n	8009f40 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d026      	beq.n	8009f0a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ebc:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f023 0219 	bic.w	r2, r3, #25
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4919      	ldr	r1, [pc, #100]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ece:	f7f9 fff1 	bl	8003eb4 <HAL_GetTick>
 8009ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ed6:	f7f9 ffed 	bl	8003eb4 <HAL_GetTick>
 8009eda:	4602      	mov	r2, r0
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	1ad3      	subs	r3, r2, r3
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	d901      	bls.n	8009ee8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	e2d3      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ee8:	4b11      	ldr	r3, [pc, #68]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0f0      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ef4:	4b0e      	ldr	r3, [pc, #56]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	691b      	ldr	r3, [r3, #16]
 8009f00:	061b      	lsls	r3, r3, #24
 8009f02:	490b      	ldr	r1, [pc, #44]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	604b      	str	r3, [r1, #4]
 8009f08:	e01a      	b.n	8009f40 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f0a:	4b09      	ldr	r3, [pc, #36]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a08      	ldr	r2, [pc, #32]	; (8009f30 <HAL_RCC_OscConfig+0x244>)
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f16:	f7f9 ffcd 	bl	8003eb4 <HAL_GetTick>
 8009f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f1c:	e00a      	b.n	8009f34 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f1e:	f7f9 ffc9 	bl	8003eb4 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d903      	bls.n	8009f34 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e2af      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
 8009f30:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f34:	4b96      	ldr	r3, [pc, #600]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1ee      	bne.n	8009f1e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f003 0310 	and.w	r3, r3, #16
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d06a      	beq.n	800a022 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f4c:	4b90      	ldr	r3, [pc, #576]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f54:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f56:	4b8e      	ldr	r3, [pc, #568]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009f5c:	69bb      	ldr	r3, [r7, #24]
 8009f5e:	2b08      	cmp	r3, #8
 8009f60:	d007      	beq.n	8009f72 <HAL_RCC_OscConfig+0x286>
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	2b18      	cmp	r3, #24
 8009f66:	d11b      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x2b4>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d116      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f72:	4b87      	ldr	r3, [pc, #540]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d005      	beq.n	8009f8a <HAL_RCC_OscConfig+0x29e>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	2b80      	cmp	r3, #128	; 0x80
 8009f84:	d001      	beq.n	8009f8a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e282      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009f8a:	4b81      	ldr	r3, [pc, #516]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	061b      	lsls	r3, r3, #24
 8009f98:	497d      	ldr	r1, [pc, #500]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009f9e:	e040      	b.n	800a022 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d023      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009fa8:	4b79      	ldr	r3, [pc, #484]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a78      	ldr	r2, [pc, #480]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb4:	f7f9 ff7e 	bl	8003eb4 <HAL_GetTick>
 8009fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009fbc:	f7f9 ff7a 	bl	8003eb4 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e260      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009fce:	4b70      	ldr	r3, [pc, #448]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0f0      	beq.n	8009fbc <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009fda:	4b6d      	ldr	r3, [pc, #436]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6a1b      	ldr	r3, [r3, #32]
 8009fe6:	061b      	lsls	r3, r3, #24
 8009fe8:	4969      	ldr	r1, [pc, #420]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60cb      	str	r3, [r1, #12]
 8009fee:	e018      	b.n	800a022 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ff0:	4b67      	ldr	r3, [pc, #412]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a66      	ldr	r2, [pc, #408]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 8009ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffc:	f7f9 ff5a 	bl	8003eb4 <HAL_GetTick>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a002:	e008      	b.n	800a016 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a004:	f7f9 ff56 	bl	8003eb4 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	2b02      	cmp	r3, #2
 800a010:	d901      	bls.n	800a016 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a012:	2303      	movs	r3, #3
 800a014:	e23c      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a016:	4b5e      	ldr	r3, [pc, #376]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1f0      	bne.n	800a004 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f003 0308 	and.w	r3, r3, #8
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d036      	beq.n	800a09c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	695b      	ldr	r3, [r3, #20]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d019      	beq.n	800a06a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a036:	4b56      	ldr	r3, [pc, #344]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a03a:	4a55      	ldr	r2, [pc, #340]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a03c:	f043 0301 	orr.w	r3, r3, #1
 800a040:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a042:	f7f9 ff37 	bl	8003eb4 <HAL_GetTick>
 800a046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a048:	e008      	b.n	800a05c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a04a:	f7f9 ff33 	bl	8003eb4 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	2b02      	cmp	r3, #2
 800a056:	d901      	bls.n	800a05c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	e219      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a05c:	4b4c      	ldr	r3, [pc, #304]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0f0      	beq.n	800a04a <HAL_RCC_OscConfig+0x35e>
 800a068:	e018      	b.n	800a09c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a06a:	4b49      	ldr	r3, [pc, #292]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a06e:	4a48      	ldr	r2, [pc, #288]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a076:	f7f9 ff1d 	bl	8003eb4 <HAL_GetTick>
 800a07a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a07c:	e008      	b.n	800a090 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a07e:	f7f9 ff19 	bl	8003eb4 <HAL_GetTick>
 800a082:	4602      	mov	r2, r0
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	1ad3      	subs	r3, r2, r3
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d901      	bls.n	800a090 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a08c:	2303      	movs	r3, #3
 800a08e:	e1ff      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a090:	4b3f      	ldr	r3, [pc, #252]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f0      	bne.n	800a07e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0320 	and.w	r3, r3, #32
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d036      	beq.n	800a116 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d019      	beq.n	800a0e4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a0b0:	4b37      	ldr	r3, [pc, #220]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a36      	ldr	r2, [pc, #216]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a0b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a0ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0bc:	f7f9 fefa 	bl	8003eb4 <HAL_GetTick>
 800a0c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0c2:	e008      	b.n	800a0d6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0c4:	f7f9 fef6 	bl	8003eb4 <HAL_GetTick>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0cc:	1ad3      	subs	r3, r2, r3
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d901      	bls.n	800a0d6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	e1dc      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a0d6:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d0f0      	beq.n	800a0c4 <HAL_RCC_OscConfig+0x3d8>
 800a0e2:	e018      	b.n	800a116 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a0e4:	4b2a      	ldr	r3, [pc, #168]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a29      	ldr	r2, [pc, #164]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a0ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a0ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a0f0:	f7f9 fee0 	bl	8003eb4 <HAL_GetTick>
 800a0f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a0f6:	e008      	b.n	800a10a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a0f8:	f7f9 fedc 	bl	8003eb4 <HAL_GetTick>
 800a0fc:	4602      	mov	r2, r0
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	2b02      	cmp	r3, #2
 800a104:	d901      	bls.n	800a10a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a106:	2303      	movs	r3, #3
 800a108:	e1c2      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a10a:	4b21      	ldr	r3, [pc, #132]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1f0      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0304 	and.w	r3, r3, #4
 800a11e:	2b00      	cmp	r3, #0
 800a120:	f000 8086 	beq.w	800a230 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a124:	4b1b      	ldr	r3, [pc, #108]	; (800a194 <HAL_RCC_OscConfig+0x4a8>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a1a      	ldr	r2, [pc, #104]	; (800a194 <HAL_RCC_OscConfig+0x4a8>)
 800a12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a12e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a130:	f7f9 fec0 	bl	8003eb4 <HAL_GetTick>
 800a134:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a136:	e008      	b.n	800a14a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a138:	f7f9 febc 	bl	8003eb4 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b64      	cmp	r3, #100	; 0x64
 800a144:	d901      	bls.n	800a14a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e1a2      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <HAL_RCC_OscConfig+0x4a8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d0f0      	beq.n	800a138 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d106      	bne.n	800a16c <HAL_RCC_OscConfig+0x480>
 800a15e:	4b0c      	ldr	r3, [pc, #48]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a162:	4a0b      	ldr	r2, [pc, #44]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a164:	f043 0301 	orr.w	r3, r3, #1
 800a168:	6713      	str	r3, [r2, #112]	; 0x70
 800a16a:	e032      	b.n	800a1d2 <HAL_RCC_OscConfig+0x4e6>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d111      	bne.n	800a198 <HAL_RCC_OscConfig+0x4ac>
 800a174:	4b06      	ldr	r3, [pc, #24]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a178:	4a05      	ldr	r2, [pc, #20]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a17a:	f023 0301 	bic.w	r3, r3, #1
 800a17e:	6713      	str	r3, [r2, #112]	; 0x70
 800a180:	4b03      	ldr	r3, [pc, #12]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a184:	4a02      	ldr	r2, [pc, #8]	; (800a190 <HAL_RCC_OscConfig+0x4a4>)
 800a186:	f023 0304 	bic.w	r3, r3, #4
 800a18a:	6713      	str	r3, [r2, #112]	; 0x70
 800a18c:	e021      	b.n	800a1d2 <HAL_RCC_OscConfig+0x4e6>
 800a18e:	bf00      	nop
 800a190:	58024400 	.word	0x58024400
 800a194:	58024800 	.word	0x58024800
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	2b05      	cmp	r3, #5
 800a19e:	d10c      	bne.n	800a1ba <HAL_RCC_OscConfig+0x4ce>
 800a1a0:	4b83      	ldr	r3, [pc, #524]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1a4:	4a82      	ldr	r2, [pc, #520]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1a6:	f043 0304 	orr.w	r3, r3, #4
 800a1aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a1ac:	4b80      	ldr	r3, [pc, #512]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	4a7f      	ldr	r2, [pc, #508]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1b2:	f043 0301 	orr.w	r3, r3, #1
 800a1b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a1b8:	e00b      	b.n	800a1d2 <HAL_RCC_OscConfig+0x4e6>
 800a1ba:	4b7d      	ldr	r3, [pc, #500]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	4a7c      	ldr	r2, [pc, #496]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1c0:	f023 0301 	bic.w	r3, r3, #1
 800a1c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a1c6:	4b7a      	ldr	r3, [pc, #488]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ca:	4a79      	ldr	r2, [pc, #484]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1cc:	f023 0304 	bic.w	r3, r3, #4
 800a1d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d015      	beq.n	800a206 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1da:	f7f9 fe6b 	bl	8003eb4 <HAL_GetTick>
 800a1de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1e0:	e00a      	b.n	800a1f8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1e2:	f7f9 fe67 	bl	8003eb4 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d901      	bls.n	800a1f8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e14b      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a1f8:	4b6d      	ldr	r3, [pc, #436]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a1fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1fc:	f003 0302 	and.w	r3, r3, #2
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0ee      	beq.n	800a1e2 <HAL_RCC_OscConfig+0x4f6>
 800a204:	e014      	b.n	800a230 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a206:	f7f9 fe55 	bl	8003eb4 <HAL_GetTick>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a20c:	e00a      	b.n	800a224 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a20e:	f7f9 fe51 	bl	8003eb4 <HAL_GetTick>
 800a212:	4602      	mov	r2, r0
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	1ad3      	subs	r3, r2, r3
 800a218:	f241 3288 	movw	r2, #5000	; 0x1388
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d901      	bls.n	800a224 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e135      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a224:	4b62      	ldr	r3, [pc, #392]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d1ee      	bne.n	800a20e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 812a 	beq.w	800a48e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a23a:	4b5d      	ldr	r3, [pc, #372]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a242:	2b18      	cmp	r3, #24
 800a244:	f000 80ba 	beq.w	800a3bc <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	f040 8095 	bne.w	800a37c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a252:	4b57      	ldr	r3, [pc, #348]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a56      	ldr	r2, [pc, #344]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a258:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a25c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a25e:	f7f9 fe29 	bl	8003eb4 <HAL_GetTick>
 800a262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a264:	e008      	b.n	800a278 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a266:	f7f9 fe25 	bl	8003eb4 <HAL_GetTick>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	2b02      	cmp	r3, #2
 800a272:	d901      	bls.n	800a278 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e10b      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a278:	4b4d      	ldr	r3, [pc, #308]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1f0      	bne.n	800a266 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a284:	4b4a      	ldr	r3, [pc, #296]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a288:	4b4a      	ldr	r3, [pc, #296]	; (800a3b4 <HAL_RCC_OscConfig+0x6c8>)
 800a28a:	4013      	ands	r3, r2
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a290:	687a      	ldr	r2, [r7, #4]
 800a292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a294:	0112      	lsls	r2, r2, #4
 800a296:	430a      	orrs	r2, r1
 800a298:	4945      	ldr	r1, [pc, #276]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	628b      	str	r3, [r1, #40]	; 0x28
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	025b      	lsls	r3, r3, #9
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	431a      	orrs	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	041b      	lsls	r3, r3, #16
 800a2bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2c0:	431a      	orrs	r2, r3
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c6:	3b01      	subs	r3, #1
 800a2c8:	061b      	lsls	r3, r3, #24
 800a2ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2ce:	4938      	ldr	r1, [pc, #224]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a2d4:	4b36      	ldr	r3, [pc, #216]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	4a35      	ldr	r2, [pc, #212]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2e0:	4b33      	ldr	r3, [pc, #204]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2e4:	4b34      	ldr	r3, [pc, #208]	; (800a3b8 <HAL_RCC_OscConfig+0x6cc>)
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2ec:	00d2      	lsls	r2, r2, #3
 800a2ee:	4930      	ldr	r1, [pc, #192]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a2f4:	4b2e      	ldr	r3, [pc, #184]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	f023 020c 	bic.w	r2, r3, #12
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	492b      	ldr	r1, [pc, #172]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a302:	4313      	orrs	r3, r2
 800a304:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a306:	4b2a      	ldr	r3, [pc, #168]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30a:	f023 0202 	bic.w	r2, r3, #2
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	4927      	ldr	r1, [pc, #156]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a314:	4313      	orrs	r3, r2
 800a316:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a318:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	4a24      	ldr	r2, [pc, #144]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a31e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a322:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a324:	4b22      	ldr	r3, [pc, #136]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	4a21      	ldr	r2, [pc, #132]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a32a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a32e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a330:	4b1f      	ldr	r3, [pc, #124]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a334:	4a1e      	ldr	r2, [pc, #120]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a33a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a33c:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a1b      	ldr	r2, [pc, #108]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a342:	f043 0301 	orr.w	r3, r3, #1
 800a346:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a348:	4b19      	ldr	r3, [pc, #100]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a18      	ldr	r2, [pc, #96]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a34e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7f9 fdae 	bl	8003eb4 <HAL_GetTick>
 800a358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a35c:	f7f9 fdaa 	bl	8003eb4 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e090      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a36e:	4b10      	ldr	r3, [pc, #64]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f0      	beq.n	800a35c <HAL_RCC_OscConfig+0x670>
 800a37a:	e088      	b.n	800a48e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a37c:	4b0c      	ldr	r3, [pc, #48]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0b      	ldr	r2, [pc, #44]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a388:	f7f9 fd94 	bl	8003eb4 <HAL_GetTick>
 800a38c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a38e:	e008      	b.n	800a3a2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a390:	f7f9 fd90 	bl	8003eb4 <HAL_GetTick>
 800a394:	4602      	mov	r2, r0
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d901      	bls.n	800a3a2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e076      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a3a2:	4b03      	ldr	r3, [pc, #12]	; (800a3b0 <HAL_RCC_OscConfig+0x6c4>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d1f0      	bne.n	800a390 <HAL_RCC_OscConfig+0x6a4>
 800a3ae:	e06e      	b.n	800a48e <HAL_RCC_OscConfig+0x7a2>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	fffffc0c 	.word	0xfffffc0c
 800a3b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a3bc:	4b36      	ldr	r3, [pc, #216]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a3c2:	4b35      	ldr	r3, [pc, #212]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3c6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d031      	beq.n	800a434 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f003 0203 	and.w	r2, r3, #3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d12a      	bne.n	800a434 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	091b      	lsrs	r3, r3, #4
 800a3e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d122      	bne.n	800a434 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d11a      	bne.n	800a434 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	0a5b      	lsrs	r3, r3, #9
 800a402:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d111      	bne.n	800a434 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	0c1b      	lsrs	r3, r3, #16
 800a414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a41e:	429a      	cmp	r2, r3
 800a420:	d108      	bne.n	800a434 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	0e1b      	lsrs	r3, r3, #24
 800a426:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a42e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a430:	429a      	cmp	r2, r3
 800a432:	d001      	beq.n	800a438 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e02b      	b.n	800a490 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a438:	4b17      	ldr	r3, [pc, #92]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43c:	08db      	lsrs	r3, r3, #3
 800a43e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a442:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d01f      	beq.n	800a48e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a44e:	4b12      	ldr	r3, [pc, #72]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a452:	4a11      	ldr	r2, [pc, #68]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a454:	f023 0301 	bic.w	r3, r3, #1
 800a458:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a45a:	f7f9 fd2b 	bl	8003eb4 <HAL_GetTick>
 800a45e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a460:	bf00      	nop
 800a462:	f7f9 fd27 	bl	8003eb4 <HAL_GetTick>
 800a466:	4602      	mov	r2, r0
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d0f9      	beq.n	800a462 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a46e:	4b0a      	ldr	r3, [pc, #40]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a472:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <HAL_RCC_OscConfig+0x7b0>)
 800a474:	4013      	ands	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a47a:	00d2      	lsls	r2, r2, #3
 800a47c:	4906      	ldr	r1, [pc, #24]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a47e:	4313      	orrs	r3, r2
 800a480:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a486:	4a04      	ldr	r2, [pc, #16]	; (800a498 <HAL_RCC_OscConfig+0x7ac>)
 800a488:	f043 0301 	orr.w	r3, r3, #1
 800a48c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a48e:	2300      	movs	r3, #0
}
 800a490:	4618      	mov	r0, r3
 800a492:	3730      	adds	r7, #48	; 0x30
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	58024400 	.word	0x58024400
 800a49c:	ffff0007 	.word	0xffff0007

0800a4a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e19c      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4b4:	4b8a      	ldr	r3, [pc, #552]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	683a      	ldr	r2, [r7, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d910      	bls.n	800a4e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4c2:	4b87      	ldr	r3, [pc, #540]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f023 020f 	bic.w	r2, r3, #15
 800a4ca:	4985      	ldr	r1, [pc, #532]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	4313      	orrs	r3, r2
 800a4d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4d2:	4b83      	ldr	r3, [pc, #524]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d001      	beq.n	800a4e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	e184      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d010      	beq.n	800a512 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	4b7b      	ldr	r3, [pc, #492]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d908      	bls.n	800a512 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a500:	4b78      	ldr	r3, [pc, #480]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a502:	699b      	ldr	r3, [r3, #24]
 800a504:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	691b      	ldr	r3, [r3, #16]
 800a50c:	4975      	ldr	r1, [pc, #468]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 0308 	and.w	r3, r3, #8
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d010      	beq.n	800a540 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	695a      	ldr	r2, [r3, #20]
 800a522:	4b70      	ldr	r3, [pc, #448]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d908      	bls.n	800a540 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a52e:	4b6d      	ldr	r3, [pc, #436]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	496a      	ldr	r1, [pc, #424]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a53c:	4313      	orrs	r3, r2
 800a53e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0310 	and.w	r3, r3, #16
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d010      	beq.n	800a56e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	699a      	ldr	r2, [r3, #24]
 800a550:	4b64      	ldr	r3, [pc, #400]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a552:	69db      	ldr	r3, [r3, #28]
 800a554:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a558:	429a      	cmp	r2, r3
 800a55a:	d908      	bls.n	800a56e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a55c:	4b61      	ldr	r3, [pc, #388]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a55e:	69db      	ldr	r3, [r3, #28]
 800a560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	495e      	ldr	r1, [pc, #376]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f003 0320 	and.w	r3, r3, #32
 800a576:	2b00      	cmp	r3, #0
 800a578:	d010      	beq.n	800a59c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69da      	ldr	r2, [r3, #28]
 800a57e:	4b59      	ldr	r3, [pc, #356]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a586:	429a      	cmp	r2, r3
 800a588:	d908      	bls.n	800a59c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a58a:	4b56      	ldr	r3, [pc, #344]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a58c:	6a1b      	ldr	r3, [r3, #32]
 800a58e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	4953      	ldr	r1, [pc, #332]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0302 	and.w	r3, r3, #2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d010      	beq.n	800a5ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68da      	ldr	r2, [r3, #12]
 800a5ac:	4b4d      	ldr	r3, [pc, #308]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d908      	bls.n	800a5ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5b8:	4b4a      	ldr	r3, [pc, #296]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5ba:	699b      	ldr	r3, [r3, #24]
 800a5bc:	f023 020f 	bic.w	r2, r3, #15
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	4947      	ldr	r1, [pc, #284]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 0301 	and.w	r3, r3, #1
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d055      	beq.n	800a682 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a5d6:	4b43      	ldr	r3, [pc, #268]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	4940      	ldr	r1, [pc, #256]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d107      	bne.n	800a600 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a5f0:	4b3c      	ldr	r3, [pc, #240]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d121      	bne.n	800a640 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e0f6      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	2b03      	cmp	r3, #3
 800a606:	d107      	bne.n	800a618 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a608:	4b36      	ldr	r3, [pc, #216]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d115      	bne.n	800a640 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	e0ea      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2b01      	cmp	r3, #1
 800a61e:	d107      	bne.n	800a630 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a620:	4b30      	ldr	r3, [pc, #192]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	e0de      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a630:	4b2c      	ldr	r3, [pc, #176]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d101      	bne.n	800a640 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	e0d6      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a640:	4b28      	ldr	r3, [pc, #160]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	f023 0207 	bic.w	r2, r3, #7
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	4925      	ldr	r1, [pc, #148]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a652:	f7f9 fc2f 	bl	8003eb4 <HAL_GetTick>
 800a656:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a658:	e00a      	b.n	800a670 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a65a:	f7f9 fc2b 	bl	8003eb4 <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	f241 3288 	movw	r2, #5000	; 0x1388
 800a668:	4293      	cmp	r3, r2
 800a66a:	d901      	bls.n	800a670 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a66c:	2303      	movs	r3, #3
 800a66e:	e0be      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a670:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a672:	691b      	ldr	r3, [r3, #16]
 800a674:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	00db      	lsls	r3, r3, #3
 800a67e:	429a      	cmp	r2, r3
 800a680:	d1eb      	bne.n	800a65a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d010      	beq.n	800a6b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68da      	ldr	r2, [r3, #12]
 800a692:	4b14      	ldr	r3, [pc, #80]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a694:	699b      	ldr	r3, [r3, #24]
 800a696:	f003 030f 	and.w	r3, r3, #15
 800a69a:	429a      	cmp	r2, r3
 800a69c:	d208      	bcs.n	800a6b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	f023 020f 	bic.w	r2, r3, #15
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	490e      	ldr	r1, [pc, #56]	; (800a6e4 <HAL_RCC_ClockConfig+0x244>)
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a6b0:	4b0b      	ldr	r3, [pc, #44]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	683a      	ldr	r2, [r7, #0]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d214      	bcs.n	800a6e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6be:	4b08      	ldr	r3, [pc, #32]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f023 020f 	bic.w	r2, r3, #15
 800a6c6:	4906      	ldr	r1, [pc, #24]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6ce:	4b04      	ldr	r3, [pc, #16]	; (800a6e0 <HAL_RCC_ClockConfig+0x240>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	683a      	ldr	r2, [r7, #0]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d005      	beq.n	800a6e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	e086      	b.n	800a7ee <HAL_RCC_ClockConfig+0x34e>
 800a6e0:	52002000 	.word	0x52002000
 800a6e4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d010      	beq.n	800a716 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	691a      	ldr	r2, [r3, #16]
 800a6f8:	4b3f      	ldr	r3, [pc, #252]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a6fa:	699b      	ldr	r3, [r3, #24]
 800a6fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a700:	429a      	cmp	r2, r3
 800a702:	d208      	bcs.n	800a716 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a704:	4b3c      	ldr	r3, [pc, #240]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	4939      	ldr	r1, [pc, #228]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a712:	4313      	orrs	r3, r2
 800a714:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d010      	beq.n	800a744 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	695a      	ldr	r2, [r3, #20]
 800a726:	4b34      	ldr	r3, [pc, #208]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a728:	69db      	ldr	r3, [r3, #28]
 800a72a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a72e:	429a      	cmp	r2, r3
 800a730:	d208      	bcs.n	800a744 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a732:	4b31      	ldr	r3, [pc, #196]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	492e      	ldr	r1, [pc, #184]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a740:	4313      	orrs	r3, r2
 800a742:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f003 0310 	and.w	r3, r3, #16
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d010      	beq.n	800a772 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699a      	ldr	r2, [r3, #24]
 800a754:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d208      	bcs.n	800a772 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a760:	4b25      	ldr	r3, [pc, #148]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	4922      	ldr	r1, [pc, #136]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 0320 	and.w	r3, r3, #32
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d010      	beq.n	800a7a0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	69da      	ldr	r2, [r3, #28]
 800a782:	4b1d      	ldr	r3, [pc, #116]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d208      	bcs.n	800a7a0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a78e:	4b1a      	ldr	r3, [pc, #104]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	69db      	ldr	r3, [r3, #28]
 800a79a:	4917      	ldr	r1, [pc, #92]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a79c:	4313      	orrs	r3, r2
 800a79e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a7a0:	f000 f89e 	bl	800a8e0 <HAL_RCC_GetSysClockFreq>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	4b14      	ldr	r3, [pc, #80]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	0a1b      	lsrs	r3, r3, #8
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	4912      	ldr	r1, [pc, #72]	; (800a7fc <HAL_RCC_ClockConfig+0x35c>)
 800a7b2:	5ccb      	ldrb	r3, [r1, r3]
 800a7b4:	f003 031f 	and.w	r3, r3, #31
 800a7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7be:	4b0e      	ldr	r3, [pc, #56]	; (800a7f8 <HAL_RCC_ClockConfig+0x358>)
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 030f 	and.w	r3, r3, #15
 800a7c6:	4a0d      	ldr	r2, [pc, #52]	; (800a7fc <HAL_RCC_ClockConfig+0x35c>)
 800a7c8:	5cd3      	ldrb	r3, [r2, r3]
 800a7ca:	f003 031f 	and.w	r3, r3, #31
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d4:	4a0a      	ldr	r2, [pc, #40]	; (800a800 <HAL_RCC_ClockConfig+0x360>)
 800a7d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7d8:	4a0a      	ldr	r2, [pc, #40]	; (800a804 <HAL_RCC_ClockConfig+0x364>)
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a7de:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <HAL_RCC_ClockConfig+0x368>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f9 fb1c 	bl	8003e20 <HAL_InitTick>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3718      	adds	r7, #24
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	58024400 	.word	0x58024400
 800a7fc:	0801c4e8 	.word	0x0801c4e8
 800a800:	24000004 	.word	0x24000004
 800a804:	24000000 	.word	0x24000000
 800a808:	24000008 	.word	0x24000008

0800a80c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08c      	sub	sp, #48	; 0x30
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d12a      	bne.n	800a874 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a81e:	4b2d      	ldr	r3, [pc, #180]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a824:	4a2b      	ldr	r2, [pc, #172]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a82e:	4b29      	ldr	r3, [pc, #164]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	61bb      	str	r3, [r7, #24]
 800a83a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a83c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a842:	2302      	movs	r3, #2
 800a844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a846:	2303      	movs	r3, #3
 800a848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a84a:	2300      	movs	r3, #0
 800a84c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a84e:	2300      	movs	r3, #0
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a852:	f107 031c 	add.w	r3, r7, #28
 800a856:	4619      	mov	r1, r3
 800a858:	481f      	ldr	r0, [pc, #124]	; (800a8d8 <HAL_RCC_MCOConfig+0xcc>)
 800a85a:	f7fd fc29 	bl	80080b0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a85e:	4b1d      	ldr	r3, [pc, #116]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	430b      	orrs	r3, r1
 800a86c:	4919      	ldr	r1, [pc, #100]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a872:	e02a      	b.n	800a8ca <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a874:	4b17      	ldr	r3, [pc, #92]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a87a:	4a16      	ldr	r2, [pc, #88]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a87c:	f043 0304 	orr.w	r3, r3, #4
 800a880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a884:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a892:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a898:	2302      	movs	r3, #2
 800a89a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a89c:	2303      	movs	r3, #3
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a8a8:	f107 031c 	add.w	r3, r7, #28
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	480b      	ldr	r0, [pc, #44]	; (800a8dc <HAL_RCC_MCOConfig+0xd0>)
 800a8b0:	f7fd fbfe 	bl	80080b0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a8b4:	4b07      	ldr	r3, [pc, #28]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	01d9      	lsls	r1, r3, #7
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	430b      	orrs	r3, r1
 800a8c4:	4903      	ldr	r1, [pc, #12]	; (800a8d4 <HAL_RCC_MCOConfig+0xc8>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	610b      	str	r3, [r1, #16]
}
 800a8ca:	bf00      	nop
 800a8cc:	3730      	adds	r7, #48	; 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	58024400 	.word	0x58024400
 800a8d8:	58020000 	.word	0x58020000
 800a8dc:	58020800 	.word	0x58020800

0800a8e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b089      	sub	sp, #36	; 0x24
 800a8e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8e6:	4bb3      	ldr	r3, [pc, #716]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8ee:	2b18      	cmp	r3, #24
 800a8f0:	f200 8155 	bhi.w	800ab9e <HAL_RCC_GetSysClockFreq+0x2be>
 800a8f4:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a8f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fa:	bf00      	nop
 800a8fc:	0800a961 	.word	0x0800a961
 800a900:	0800ab9f 	.word	0x0800ab9f
 800a904:	0800ab9f 	.word	0x0800ab9f
 800a908:	0800ab9f 	.word	0x0800ab9f
 800a90c:	0800ab9f 	.word	0x0800ab9f
 800a910:	0800ab9f 	.word	0x0800ab9f
 800a914:	0800ab9f 	.word	0x0800ab9f
 800a918:	0800ab9f 	.word	0x0800ab9f
 800a91c:	0800a987 	.word	0x0800a987
 800a920:	0800ab9f 	.word	0x0800ab9f
 800a924:	0800ab9f 	.word	0x0800ab9f
 800a928:	0800ab9f 	.word	0x0800ab9f
 800a92c:	0800ab9f 	.word	0x0800ab9f
 800a930:	0800ab9f 	.word	0x0800ab9f
 800a934:	0800ab9f 	.word	0x0800ab9f
 800a938:	0800ab9f 	.word	0x0800ab9f
 800a93c:	0800a98d 	.word	0x0800a98d
 800a940:	0800ab9f 	.word	0x0800ab9f
 800a944:	0800ab9f 	.word	0x0800ab9f
 800a948:	0800ab9f 	.word	0x0800ab9f
 800a94c:	0800ab9f 	.word	0x0800ab9f
 800a950:	0800ab9f 	.word	0x0800ab9f
 800a954:	0800ab9f 	.word	0x0800ab9f
 800a958:	0800ab9f 	.word	0x0800ab9f
 800a95c:	0800a993 	.word	0x0800a993
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a960:	4b94      	ldr	r3, [pc, #592]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0320 	and.w	r3, r3, #32
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d009      	beq.n	800a980 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a96c:	4b91      	ldr	r3, [pc, #580]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	08db      	lsrs	r3, r3, #3
 800a972:	f003 0303 	and.w	r3, r3, #3
 800a976:	4a90      	ldr	r2, [pc, #576]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a978:	fa22 f303 	lsr.w	r3, r2, r3
 800a97c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a97e:	e111      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a980:	4b8d      	ldr	r3, [pc, #564]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a982:	61bb      	str	r3, [r7, #24]
      break;
 800a984:	e10e      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a986:	4b8d      	ldr	r3, [pc, #564]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a988:	61bb      	str	r3, [r7, #24]
      break;
 800a98a:	e10b      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a98c:	4b8c      	ldr	r3, [pc, #560]	; (800abc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a98e:	61bb      	str	r3, [r7, #24]
      break;
 800a990:	e108      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a992:	4b88      	ldr	r3, [pc, #544]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a99c:	4b85      	ldr	r3, [pc, #532]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a99e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a0:	091b      	lsrs	r3, r3, #4
 800a9a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9a8:	4b82      	ldr	r3, [pc, #520]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9b2:	4b80      	ldr	r3, [pc, #512]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b6:	08db      	lsrs	r3, r3, #3
 800a9b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	fb02 f303 	mul.w	r3, r2, r3
 800a9c2:	ee07 3a90 	vmov	s15, r3
 800a9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80e1 	beq.w	800ab98 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	f000 8083 	beq.w	800aae4 <HAL_RCC_GetSysClockFreq+0x204>
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	f200 80a1 	bhi.w	800ab28 <HAL_RCC_GetSysClockFreq+0x248>
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d003      	beq.n	800a9f4 <HAL_RCC_GetSysClockFreq+0x114>
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d056      	beq.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a9f2:	e099      	b.n	800ab28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9f4:	4b6f      	ldr	r3, [pc, #444]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f003 0320 	and.w	r3, r3, #32
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d02d      	beq.n	800aa5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa00:	4b6c      	ldr	r3, [pc, #432]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	08db      	lsrs	r3, r3, #3
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	4a6b      	ldr	r2, [pc, #428]	; (800abb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa0c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	ee07 3a90 	vmov	s15, r3
 800aa18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2a:	4b62      	ldr	r3, [pc, #392]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa32:	ee07 3a90 	vmov	s15, r3
 800aa36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa3e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800abc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa5a:	e087      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa66:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6e:	4b51      	ldr	r3, [pc, #324]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa82:	eddf 5a50 	vldr	s11, [pc, #320]	; 800abc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aa9e:	e065      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2ec>
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b40      	ldr	r3, [pc, #256]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aac6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800abc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aae2:	e043      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaee:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800aaf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf6:	4b2f      	ldr	r3, [pc, #188]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800abc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab26:	e021      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab32:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abcc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3a:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800abc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab6c:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	0a5b      	lsrs	r3, r3, #9
 800ab72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab76:	3301      	adds	r3, #1
 800ab78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	ee07 3a90 	vmov	s15, r3
 800ab80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab84:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab90:	ee17 3a90 	vmov	r3, s15
 800ab94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ab96:	e005      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61bb      	str	r3, [r7, #24]
      break;
 800ab9c:	e002      	b.n	800aba4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ab9e:	4b07      	ldr	r3, [pc, #28]	; (800abbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aba0:	61bb      	str	r3, [r7, #24]
      break;
 800aba2:	bf00      	nop
  }

  return sysclockfreq;
 800aba4:	69bb      	ldr	r3, [r7, #24]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3724      	adds	r7, #36	; 0x24
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	58024400 	.word	0x58024400
 800abb8:	03d09000 	.word	0x03d09000
 800abbc:	003d0900 	.word	0x003d0900
 800abc0:	02faf080 	.word	0x02faf080
 800abc4:	46000000 	.word	0x46000000
 800abc8:	4c742400 	.word	0x4c742400
 800abcc:	4a742400 	.word	0x4a742400
 800abd0:	4c3ebc20 	.word	0x4c3ebc20

0800abd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abda:	f7ff fe81 	bl	800a8e0 <HAL_RCC_GetSysClockFreq>
 800abde:	4602      	mov	r2, r0
 800abe0:	4b10      	ldr	r3, [pc, #64]	; (800ac24 <HAL_RCC_GetHCLKFreq+0x50>)
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	0a1b      	lsrs	r3, r3, #8
 800abe6:	f003 030f 	and.w	r3, r3, #15
 800abea:	490f      	ldr	r1, [pc, #60]	; (800ac28 <HAL_RCC_GetHCLKFreq+0x54>)
 800abec:	5ccb      	ldrb	r3, [r1, r3]
 800abee:	f003 031f 	and.w	r3, r3, #31
 800abf2:	fa22 f303 	lsr.w	r3, r2, r3
 800abf6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <HAL_RCC_GetHCLKFreq+0x50>)
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac02:	5cd3      	ldrb	r3, [r2, r3]
 800ac04:	f003 031f 	and.w	r3, r3, #31
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac0e:	4a07      	ldr	r2, [pc, #28]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac12:	4a07      	ldr	r2, [pc, #28]	; (800ac30 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	58024400 	.word	0x58024400
 800ac28:	0801c4e8 	.word	0x0801c4e8
 800ac2c:	24000004 	.word	0x24000004
 800ac30:	24000000 	.word	0x24000000

0800ac34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac38:	f7ff ffcc 	bl	800abd4 <HAL_RCC_GetHCLKFreq>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	4b06      	ldr	r3, [pc, #24]	; (800ac58 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac40:	69db      	ldr	r3, [r3, #28]
 800ac42:	091b      	lsrs	r3, r3, #4
 800ac44:	f003 0307 	and.w	r3, r3, #7
 800ac48:	4904      	ldr	r1, [pc, #16]	; (800ac5c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac4a:	5ccb      	ldrb	r3, [r1, r3]
 800ac4c:	f003 031f 	and.w	r3, r3, #31
 800ac50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	58024400 	.word	0x58024400
 800ac5c:	0801c4e8 	.word	0x0801c4e8

0800ac60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac64:	f7ff ffb6 	bl	800abd4 <HAL_RCC_GetHCLKFreq>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	4b06      	ldr	r3, [pc, #24]	; (800ac84 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac6c:	69db      	ldr	r3, [r3, #28]
 800ac6e:	0a1b      	lsrs	r3, r3, #8
 800ac70:	f003 0307 	and.w	r3, r3, #7
 800ac74:	4904      	ldr	r1, [pc, #16]	; (800ac88 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac76:	5ccb      	ldrb	r3, [r1, r3]
 800ac78:	f003 031f 	and.w	r3, r3, #31
 800ac7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	58024400 	.word	0x58024400
 800ac88:	0801c4e8 	.word	0x0801c4e8

0800ac8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac90:	b0c6      	sub	sp, #280	; 0x118
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac98:	2300      	movs	r3, #0
 800ac9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800acb0:	2500      	movs	r5, #0
 800acb2:	ea54 0305 	orrs.w	r3, r4, r5
 800acb6:	d049      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800acb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acbe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acc2:	d02f      	beq.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800acc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acc8:	d828      	bhi.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acce:	d01a      	beq.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800acd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acd4:	d822      	bhi.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acde:	d007      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ace0:	e01c      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ace2:	4bab      	ldr	r3, [pc, #684]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ace4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace6:	4aaa      	ldr	r2, [pc, #680]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ace8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acee:	e01a      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf4:	3308      	adds	r3, #8
 800acf6:	2102      	movs	r1, #2
 800acf8:	4618      	mov	r0, r3
 800acfa:	f002 fa49 	bl	800d190 <RCCEx_PLL2_Config>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad04:	e00f      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0a:	3328      	adds	r3, #40	; 0x28
 800ad0c:	2102      	movs	r1, #2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f002 faf0 	bl	800d2f4 <RCCEx_PLL3_Config>
 800ad14:	4603      	mov	r3, r0
 800ad16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad1a:	e004      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad22:	e000      	b.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10a      	bne.n	800ad44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad2e:	4b98      	ldr	r3, [pc, #608]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad3c:	4a94      	ldr	r2, [pc, #592]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	6513      	str	r3, [r2, #80]	; 0x50
 800ad42:	e003      	b.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad58:	f04f 0900 	mov.w	r9, #0
 800ad5c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad60:	d047      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad68:	2b04      	cmp	r3, #4
 800ad6a:	d82a      	bhi.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad6c:	a201      	add	r2, pc, #4	; (adr r2, 800ad74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad72:	bf00      	nop
 800ad74:	0800ad89 	.word	0x0800ad89
 800ad78:	0800ad97 	.word	0x0800ad97
 800ad7c:	0800adad 	.word	0x0800adad
 800ad80:	0800adcb 	.word	0x0800adcb
 800ad84:	0800adcb 	.word	0x0800adcb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad88:	4b81      	ldr	r3, [pc, #516]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8c:	4a80      	ldr	r2, [pc, #512]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad94:	e01a      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad9a:	3308      	adds	r3, #8
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f002 f9f6 	bl	800d190 <RCCEx_PLL2_Config>
 800ada4:	4603      	mov	r3, r0
 800ada6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adaa:	e00f      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb0:	3328      	adds	r3, #40	; 0x28
 800adb2:	2100      	movs	r1, #0
 800adb4:	4618      	mov	r0, r3
 800adb6:	f002 fa9d 	bl	800d2f4 <RCCEx_PLL3_Config>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adc0:	e004      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adc8:	e000      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800adca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10a      	bne.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800add4:	4b6e      	ldr	r3, [pc, #440]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800add6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add8:	f023 0107 	bic.w	r1, r3, #7
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade2:	4a6b      	ldr	r2, [pc, #428]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ade4:	430b      	orrs	r3, r1
 800ade6:	6513      	str	r3, [r2, #80]	; 0x50
 800ade8:	e003      	b.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800adfe:	f04f 0b00 	mov.w	fp, #0
 800ae02:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae06:	d05b      	beq.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae10:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae14:	d03b      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ae16:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae1a:	d834      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae20:	d037      	beq.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae26:	d82e      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae2c:	d033      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ae2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae32:	d828      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae38:	d01a      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ae3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae3e:	d822      	bhi.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae48:	d007      	beq.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae4a:	e01c      	b.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae4c:	4b50      	ldr	r3, [pc, #320]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae50:	4a4f      	ldr	r2, [pc, #316]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae58:	e01e      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5e:	3308      	adds	r3, #8
 800ae60:	2100      	movs	r1, #0
 800ae62:	4618      	mov	r0, r3
 800ae64:	f002 f994 	bl	800d190 <RCCEx_PLL2_Config>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae6e:	e013      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae74:	3328      	adds	r3, #40	; 0x28
 800ae76:	2100      	movs	r1, #0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f002 fa3b 	bl	800d2f4 <RCCEx_PLL3_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae84:	e008      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae8c:	e004      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae8e:	bf00      	nop
 800ae90:	e002      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae92:	bf00      	nop
 800ae94:	e000      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10b      	bne.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aea0:	4b3b      	ldr	r3, [pc, #236]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aea4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aeb0:	4a37      	ldr	r2, [pc, #220]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeb2:	430b      	orrs	r3, r1
 800aeb4:	6593      	str	r3, [r2, #88]	; 0x58
 800aeb6:	e003      	b.n	800aec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aed0:	2300      	movs	r3, #0
 800aed2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aed6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aeda:	460b      	mov	r3, r1
 800aedc:	4313      	orrs	r3, r2
 800aede:	d05d      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aee8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aeec:	d03b      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aeee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aef2:	d834      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aef8:	d037      	beq.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aefa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aefe:	d82e      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af04:	d033      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800af06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af0a:	d828      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af10:	d01a      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800af12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af16:	d822      	bhi.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af20:	d007      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af22:	e01c      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af24:	4b1a      	ldr	r3, [pc, #104]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4a19      	ldr	r2, [pc, #100]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af30:	e01e      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	3308      	adds	r3, #8
 800af38:	2100      	movs	r1, #0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f002 f928 	bl	800d190 <RCCEx_PLL2_Config>
 800af40:	4603      	mov	r3, r0
 800af42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af46:	e013      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4c:	3328      	adds	r3, #40	; 0x28
 800af4e:	2100      	movs	r1, #0
 800af50:	4618      	mov	r0, r3
 800af52:	f002 f9cf 	bl	800d2f4 <RCCEx_PLL3_Config>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af5c:	e008      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af64:	e004      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af66:	bf00      	nop
 800af68:	e002      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af6a:	bf00      	nop
 800af6c:	e000      	b.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af74:	2b00      	cmp	r3, #0
 800af76:	d10d      	bne.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af88:	4a01      	ldr	r2, [pc, #4]	; (800af90 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af8a:	430b      	orrs	r3, r1
 800af8c:	6593      	str	r3, [r2, #88]	; 0x58
 800af8e:	e005      	b.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800af90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800af9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800afa8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afac:	2300      	movs	r3, #0
 800afae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afb2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4313      	orrs	r3, r2
 800afba:	d03a      	beq.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800afbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afc2:	2b30      	cmp	r3, #48	; 0x30
 800afc4:	d01f      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800afc6:	2b30      	cmp	r3, #48	; 0x30
 800afc8:	d819      	bhi.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afca:	2b20      	cmp	r3, #32
 800afcc:	d00c      	beq.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800afce:	2b20      	cmp	r3, #32
 800afd0:	d815      	bhi.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d019      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afd6:	2b10      	cmp	r3, #16
 800afd8:	d111      	bne.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afda:	4baa      	ldr	r3, [pc, #680]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afde:	4aa9      	ldr	r2, [pc, #676]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afe4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800afe6:	e011      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800afe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afec:	3308      	adds	r3, #8
 800afee:	2102      	movs	r1, #2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f002 f8cd 	bl	800d190 <RCCEx_PLL2_Config>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800affc:	e006      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800affe:	2301      	movs	r3, #1
 800b000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b004:	e002      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b00a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b014:	4b9b      	ldr	r3, [pc, #620]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b018:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b022:	4a98      	ldr	r2, [pc, #608]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b024:	430b      	orrs	r3, r1
 800b026:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b028:	e003      	b.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b02e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b03e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b042:	2300      	movs	r3, #0
 800b044:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b048:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b04c:	460b      	mov	r3, r1
 800b04e:	4313      	orrs	r3, r2
 800b050:	d051      	beq.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b058:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b05c:	d035      	beq.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b05e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b062:	d82e      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b064:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b068:	d031      	beq.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b06a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b06e:	d828      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b074:	d01a      	beq.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b07a:	d822      	bhi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d003      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b084:	d007      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b086:	e01c      	b.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b088:	4b7e      	ldr	r3, [pc, #504]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	4a7d      	ldr	r2, [pc, #500]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b08e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b092:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b094:	e01c      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09a:	3308      	adds	r3, #8
 800b09c:	2100      	movs	r1, #0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f002 f876 	bl	800d190 <RCCEx_PLL2_Config>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0aa:	e011      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b0:	3328      	adds	r3, #40	; 0x28
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 f91d 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0c0:	e006      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0c8:	e002      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0ca:	bf00      	nop
 800b0cc:	e000      	b.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10a      	bne.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0d8:	4b6a      	ldr	r3, [pc, #424]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0dc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e6:	4a67      	ldr	r2, [pc, #412]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0e8:	430b      	orrs	r3, r1
 800b0ea:	6513      	str	r3, [r2, #80]	; 0x50
 800b0ec:	e003      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b106:	2300      	movs	r3, #0
 800b108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b10c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b110:	460b      	mov	r3, r1
 800b112:	4313      	orrs	r3, r2
 800b114:	d053      	beq.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b11c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b120:	d033      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b126:	d82c      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b128:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b12c:	d02f      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b12e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b132:	d826      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b138:	d02b      	beq.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b13a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b13e:	d820      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b144:	d012      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b14a:	d81a      	bhi.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d022      	beq.n	800b196 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b154:	d115      	bne.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b15a:	3308      	adds	r3, #8
 800b15c:	2101      	movs	r1, #1
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 f816 	bl	800d190 <RCCEx_PLL2_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b16a:	e015      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b170:	3328      	adds	r3, #40	; 0x28
 800b172:	2101      	movs	r1, #1
 800b174:	4618      	mov	r0, r3
 800b176:	f002 f8bd 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b17a:	4603      	mov	r3, r0
 800b17c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b180:	e00a      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b182:	2301      	movs	r3, #1
 800b184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b188:	e006      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b18a:	bf00      	nop
 800b18c:	e004      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b18e:	bf00      	nop
 800b190:	e002      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b192:	bf00      	nop
 800b194:	e000      	b.n	800b198 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b196:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b198:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1a0:	4b38      	ldr	r3, [pc, #224]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1ae:	4a35      	ldr	r2, [pc, #212]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b0:	430b      	orrs	r3, r1
 800b1b2:	6513      	str	r3, [r2, #80]	; 0x50
 800b1b4:	e003      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b1ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1d4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b1d8:	460b      	mov	r3, r1
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	d058      	beq.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1ea:	d033      	beq.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1f0:	d82c      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f6:	d02f      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1fc:	d826      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b1fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b202:	d02b      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b208:	d820      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b20a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b20e:	d012      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b214:	d81a      	bhi.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d022      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b21a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b21e:	d115      	bne.n	800b24c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b224:	3308      	adds	r3, #8
 800b226:	2101      	movs	r1, #1
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 ffb1 	bl	800d190 <RCCEx_PLL2_Config>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b234:	e015      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b23a:	3328      	adds	r3, #40	; 0x28
 800b23c:	2101      	movs	r1, #1
 800b23e:	4618      	mov	r0, r3
 800b240:	f002 f858 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b244:	4603      	mov	r3, r0
 800b246:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b24a:	e00a      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b252:	e006      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b254:	bf00      	nop
 800b256:	e004      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b258:	bf00      	nop
 800b25a:	e002      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b262:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10e      	bne.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b26c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b26e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b27a:	4a02      	ldr	r2, [pc, #8]	; (800b284 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b27c:	430b      	orrs	r3, r1
 800b27e:	6593      	str	r3, [r2, #88]	; 0x58
 800b280:	e006      	b.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b28c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b29c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2a6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d037      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ba:	d00e      	beq.n	800b2da <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c0:	d816      	bhi.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d018      	beq.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b2c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ca:	d111      	bne.n	800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2cc:	4bc4      	ldr	r3, [pc, #784]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d0:	4ac3      	ldr	r2, [pc, #780]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2d8:	e00f      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2de:	3308      	adds	r3, #8
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 ff54 	bl	800d190 <RCCEx_PLL2_Config>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2ee:	e004      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2f6:	e000      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d10a      	bne.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b302:	4bb7      	ldr	r3, [pc, #732]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b306:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b30e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b310:	4ab3      	ldr	r2, [pc, #716]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b312:	430b      	orrs	r3, r1
 800b314:	6513      	str	r3, [r2, #80]	; 0x50
 800b316:	e003      	b.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b318:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b31c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b328:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b32c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b330:	2300      	movs	r3, #0
 800b332:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b336:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b33a:	460b      	mov	r3, r1
 800b33c:	4313      	orrs	r3, r2
 800b33e:	d039      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b346:	2b03      	cmp	r3, #3
 800b348:	d81c      	bhi.n	800b384 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b34a:	a201      	add	r2, pc, #4	; (adr r2, 800b350 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b350:	0800b38d 	.word	0x0800b38d
 800b354:	0800b361 	.word	0x0800b361
 800b358:	0800b36f 	.word	0x0800b36f
 800b35c:	0800b38d 	.word	0x0800b38d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b360:	4b9f      	ldr	r3, [pc, #636]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b364:	4a9e      	ldr	r2, [pc, #632]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b36a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b36c:	e00f      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	3308      	adds	r3, #8
 800b374:	2102      	movs	r1, #2
 800b376:	4618      	mov	r0, r3
 800b378:	f001 ff0a 	bl	800d190 <RCCEx_PLL2_Config>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b382:	e004      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b38a:	e000      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b38c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b38e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b392:	2b00      	cmp	r3, #0
 800b394:	d10a      	bne.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b396:	4b92      	ldr	r3, [pc, #584]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b39a:	f023 0103 	bic.w	r1, r3, #3
 800b39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3a4:	4a8e      	ldr	r2, [pc, #568]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3a6:	430b      	orrs	r3, r1
 800b3a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3aa:	e003      	b.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b3c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3ca:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	f000 8099 	beq.w	800b508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3d6:	4b83      	ldr	r3, [pc, #524]	; (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a82      	ldr	r2, [pc, #520]	; (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3e2:	f7f8 fd67 	bl	8003eb4 <HAL_GetTick>
 800b3e6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ea:	e00b      	b.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3ec:	f7f8 fd62 	bl	8003eb4 <HAL_GetTick>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b64      	cmp	r3, #100	; 0x64
 800b3fa:	d903      	bls.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b402:	e005      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b404:	4b77      	ldr	r3, [pc, #476]	; (800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0ed      	beq.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b410:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b414:	2b00      	cmp	r3, #0
 800b416:	d173      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b418:	4b71      	ldr	r3, [pc, #452]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b41a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b424:	4053      	eors	r3, r2
 800b426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d015      	beq.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b42e:	4b6c      	ldr	r3, [pc, #432]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b436:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b43a:	4b69      	ldr	r3, [pc, #420]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43e:	4a68      	ldr	r2, [pc, #416]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b444:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b446:	4b66      	ldr	r3, [pc, #408]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44a:	4a65      	ldr	r2, [pc, #404]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b44c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b450:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b452:	4a63      	ldr	r2, [pc, #396]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b454:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b458:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b466:	d118      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b468:	f7f8 fd24 	bl	8003eb4 <HAL_GetTick>
 800b46c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b470:	e00d      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b472:	f7f8 fd1f 	bl	8003eb4 <HAL_GetTick>
 800b476:	4602      	mov	r2, r0
 800b478:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b47c:	1ad2      	subs	r2, r2, r3
 800b47e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b482:	429a      	cmp	r2, r3
 800b484:	d903      	bls.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b48c:	e005      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b48e:	4b54      	ldr	r3, [pc, #336]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0eb      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b49a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d129      	bne.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4b2:	d10e      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b4b4:	4b4a      	ldr	r3, [pc, #296]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4c4:	091a      	lsrs	r2, r3, #4
 800b4c6:	4b48      	ldr	r3, [pc, #288]	; (800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	4a45      	ldr	r2, [pc, #276]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	6113      	str	r3, [r2, #16]
 800b4d0:	e005      	b.n	800b4de <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b4d2:	4b43      	ldr	r3, [pc, #268]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	4a42      	ldr	r2, [pc, #264]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4dc:	6113      	str	r3, [r2, #16]
 800b4de:	4b40      	ldr	r3, [pc, #256]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4ee:	4a3c      	ldr	r2, [pc, #240]	; (800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	6713      	str	r3, [r2, #112]	; 0x70
 800b4f4:	e008      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b4fe:	e003      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b504:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f002 0301 	and.w	r3, r2, #1
 800b514:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b518:	2300      	movs	r3, #0
 800b51a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b51e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b522:	460b      	mov	r3, r1
 800b524:	4313      	orrs	r3, r2
 800b526:	f000 808f 	beq.w	800b648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b530:	2b28      	cmp	r3, #40	; 0x28
 800b532:	d871      	bhi.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b534:	a201      	add	r2, pc, #4	; (adr r2, 800b53c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b53a:	bf00      	nop
 800b53c:	0800b621 	.word	0x0800b621
 800b540:	0800b619 	.word	0x0800b619
 800b544:	0800b619 	.word	0x0800b619
 800b548:	0800b619 	.word	0x0800b619
 800b54c:	0800b619 	.word	0x0800b619
 800b550:	0800b619 	.word	0x0800b619
 800b554:	0800b619 	.word	0x0800b619
 800b558:	0800b619 	.word	0x0800b619
 800b55c:	0800b5ed 	.word	0x0800b5ed
 800b560:	0800b619 	.word	0x0800b619
 800b564:	0800b619 	.word	0x0800b619
 800b568:	0800b619 	.word	0x0800b619
 800b56c:	0800b619 	.word	0x0800b619
 800b570:	0800b619 	.word	0x0800b619
 800b574:	0800b619 	.word	0x0800b619
 800b578:	0800b619 	.word	0x0800b619
 800b57c:	0800b603 	.word	0x0800b603
 800b580:	0800b619 	.word	0x0800b619
 800b584:	0800b619 	.word	0x0800b619
 800b588:	0800b619 	.word	0x0800b619
 800b58c:	0800b619 	.word	0x0800b619
 800b590:	0800b619 	.word	0x0800b619
 800b594:	0800b619 	.word	0x0800b619
 800b598:	0800b619 	.word	0x0800b619
 800b59c:	0800b621 	.word	0x0800b621
 800b5a0:	0800b619 	.word	0x0800b619
 800b5a4:	0800b619 	.word	0x0800b619
 800b5a8:	0800b619 	.word	0x0800b619
 800b5ac:	0800b619 	.word	0x0800b619
 800b5b0:	0800b619 	.word	0x0800b619
 800b5b4:	0800b619 	.word	0x0800b619
 800b5b8:	0800b619 	.word	0x0800b619
 800b5bc:	0800b621 	.word	0x0800b621
 800b5c0:	0800b619 	.word	0x0800b619
 800b5c4:	0800b619 	.word	0x0800b619
 800b5c8:	0800b619 	.word	0x0800b619
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b619 	.word	0x0800b619
 800b5d8:	0800b619 	.word	0x0800b619
 800b5dc:	0800b621 	.word	0x0800b621
 800b5e0:	58024400 	.word	0x58024400
 800b5e4:	58024800 	.word	0x58024800
 800b5e8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f001 fdcb 	bl	800d190 <RCCEx_PLL2_Config>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b600:	e00f      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b606:	3328      	adds	r3, #40	; 0x28
 800b608:	2101      	movs	r1, #1
 800b60a:	4618      	mov	r0, r3
 800b60c:	f001 fe72 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b610:	4603      	mov	r3, r0
 800b612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b616:	e004      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b61e:	e000      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b620:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10a      	bne.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b62a:	4bbf      	ldr	r3, [pc, #764]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b638:	4abb      	ldr	r2, [pc, #748]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b63a:	430b      	orrs	r3, r1
 800b63c:	6553      	str	r3, [r2, #84]	; 0x54
 800b63e:	e003      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b644:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f002 0302 	and.w	r3, r2, #2
 800b654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b658:	2300      	movs	r3, #0
 800b65a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b65e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b662:	460b      	mov	r3, r1
 800b664:	4313      	orrs	r3, r2
 800b666:	d041      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b66e:	2b05      	cmp	r3, #5
 800b670:	d824      	bhi.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b672:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b678:	0800b6c5 	.word	0x0800b6c5
 800b67c:	0800b691 	.word	0x0800b691
 800b680:	0800b6a7 	.word	0x0800b6a7
 800b684:	0800b6c5 	.word	0x0800b6c5
 800b688:	0800b6c5 	.word	0x0800b6c5
 800b68c:	0800b6c5 	.word	0x0800b6c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b694:	3308      	adds	r3, #8
 800b696:	2101      	movs	r1, #1
 800b698:	4618      	mov	r0, r3
 800b69a:	f001 fd79 	bl	800d190 <RCCEx_PLL2_Config>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6a4:	e00f      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	3328      	adds	r3, #40	; 0x28
 800b6ac:	2101      	movs	r1, #1
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f001 fe20 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6ba:	e004      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6c2:	e000      	b.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b6c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10a      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6ce:	4b96      	ldr	r3, [pc, #600]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d2:	f023 0107 	bic.w	r1, r3, #7
 800b6d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6dc:	4a92      	ldr	r2, [pc, #584]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b6e2:	e003      	b.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f002 0304 	and.w	r3, r2, #4
 800b6f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b702:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b706:	460b      	mov	r3, r1
 800b708:	4313      	orrs	r3, r2
 800b70a:	d044      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b70c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b714:	2b05      	cmp	r3, #5
 800b716:	d825      	bhi.n	800b764 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b718:	a201      	add	r2, pc, #4	; (adr r2, 800b720 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b71a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71e:	bf00      	nop
 800b720:	0800b76d 	.word	0x0800b76d
 800b724:	0800b739 	.word	0x0800b739
 800b728:	0800b74f 	.word	0x0800b74f
 800b72c:	0800b76d 	.word	0x0800b76d
 800b730:	0800b76d 	.word	0x0800b76d
 800b734:	0800b76d 	.word	0x0800b76d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73c:	3308      	adds	r3, #8
 800b73e:	2101      	movs	r1, #1
 800b740:	4618      	mov	r0, r3
 800b742:	f001 fd25 	bl	800d190 <RCCEx_PLL2_Config>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b74c:	e00f      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b752:	3328      	adds	r3, #40	; 0x28
 800b754:	2101      	movs	r1, #1
 800b756:	4618      	mov	r0, r3
 800b758:	f001 fdcc 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b75c:	4603      	mov	r3, r0
 800b75e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b762:	e004      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b76a:	e000      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b76e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10b      	bne.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b776:	4b6c      	ldr	r3, [pc, #432]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b77a:	f023 0107 	bic.w	r1, r3, #7
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b786:	4a68      	ldr	r2, [pc, #416]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b788:	430b      	orrs	r3, r1
 800b78a:	6593      	str	r3, [r2, #88]	; 0x58
 800b78c:	e003      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b792:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	f002 0320 	and.w	r3, r2, #32
 800b7a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b7ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	d055      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c2:	d033      	beq.n	800b82c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b7c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7c8:	d82c      	bhi.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7ce:	d02f      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b7d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7d4:	d826      	bhi.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7da:	d02b      	beq.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7e0:	d820      	bhi.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7e6:	d012      	beq.n	800b80e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7ec:	d81a      	bhi.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d022      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b7f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7f6:	d115      	bne.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	2100      	movs	r1, #0
 800b800:	4618      	mov	r0, r3
 800b802:	f001 fcc5 	bl	800d190 <RCCEx_PLL2_Config>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b80c:	e015      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	3328      	adds	r3, #40	; 0x28
 800b814:	2102      	movs	r1, #2
 800b816:	4618      	mov	r0, r3
 800b818:	f001 fd6c 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b81c:	4603      	mov	r3, r0
 800b81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b822:	e00a      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b82a:	e006      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b82c:	bf00      	nop
 800b82e:	e004      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b830:	bf00      	nop
 800b832:	e002      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b834:	bf00      	nop
 800b836:	e000      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b83a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10b      	bne.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b842:	4b39      	ldr	r3, [pc, #228]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b846:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b852:	4a35      	ldr	r2, [pc, #212]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b854:	430b      	orrs	r3, r1
 800b856:	6553      	str	r3, [r2, #84]	; 0x54
 800b858:	e003      	b.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b85a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b85e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b86e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b872:	2300      	movs	r3, #0
 800b874:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b878:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b87c:	460b      	mov	r3, r1
 800b87e:	4313      	orrs	r3, r2
 800b880:	d058      	beq.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b886:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b88a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b88e:	d033      	beq.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b890:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b894:	d82c      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b89a:	d02f      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8a0:	d826      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8a6:	d02b      	beq.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b8a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8ac:	d820      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b2:	d012      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b8:	d81a      	bhi.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d022      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b8be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8c2:	d115      	bne.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	2100      	movs	r1, #0
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f001 fc5f 	bl	800d190 <RCCEx_PLL2_Config>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8d8:	e015      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8de:	3328      	adds	r3, #40	; 0x28
 800b8e0:	2102      	movs	r1, #2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f001 fd06 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8ee:	e00a      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8f6:	e006      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8f8:	bf00      	nop
 800b8fa:	e004      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b8fc:	bf00      	nop
 800b8fe:	e002      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b900:	bf00      	nop
 800b902:	e000      	b.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b906:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10e      	bne.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b90e:	4b06      	ldr	r3, [pc, #24]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b912:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b91e:	4a02      	ldr	r2, [pc, #8]	; (800b928 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b920:	430b      	orrs	r3, r1
 800b922:	6593      	str	r3, [r2, #88]	; 0x58
 800b924:	e006      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b926:	bf00      	nop
 800b928:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b92c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b930:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b940:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b944:	2300      	movs	r3, #0
 800b946:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b94a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b94e:	460b      	mov	r3, r1
 800b950:	4313      	orrs	r3, r2
 800b952:	d055      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b95c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b960:	d033      	beq.n	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b962:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b966:	d82c      	bhi.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b96c:	d02f      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b96e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b972:	d826      	bhi.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b974:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b978:	d02b      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b97a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b97e:	d820      	bhi.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b984:	d012      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b98a:	d81a      	bhi.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d022      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b994:	d115      	bne.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99a:	3308      	adds	r3, #8
 800b99c:	2100      	movs	r1, #0
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 fbf6 	bl	800d190 <RCCEx_PLL2_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9aa:	e015      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	3328      	adds	r3, #40	; 0x28
 800b9b2:	2102      	movs	r1, #2
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fc9d 	bl	800d2f4 <RCCEx_PLL3_Config>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9c0:	e00a      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9c8:	e006      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9ca:	bf00      	nop
 800b9cc:	e004      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9ce:	bf00      	nop
 800b9d0:	e002      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9d2:	bf00      	nop
 800b9d4:	e000      	b.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d10b      	bne.n	800b9f8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9e0:	4ba0      	ldr	r3, [pc, #640]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9f0:	4a9c      	ldr	r2, [pc, #624]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	6593      	str	r3, [r2, #88]	; 0x58
 800b9f6:	e003      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ba00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	f002 0308 	and.w	r3, r2, #8
 800ba0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba10:	2300      	movs	r3, #0
 800ba12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	d01e      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba2c:	d10c      	bne.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	3328      	adds	r3, #40	; 0x28
 800ba34:	2102      	movs	r1, #2
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 fc5c 	bl	800d2f4 <RCCEx_PLL3_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d002      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba48:	4b86      	ldr	r3, [pc, #536]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba58:	4a82      	ldr	r2, [pc, #520]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5a:	430b      	orrs	r3, r1
 800ba5c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f002 0310 	and.w	r3, r2, #16
 800ba6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba74:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba78:	460b      	mov	r3, r1
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	d01e      	beq.n	800babc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba8a:	d10c      	bne.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba90:	3328      	adds	r3, #40	; 0x28
 800ba92:	2102      	movs	r1, #2
 800ba94:	4618      	mov	r0, r3
 800ba96:	f001 fc2d 	bl	800d2f4 <RCCEx_PLL3_Config>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800baa6:	4b6f      	ldr	r3, [pc, #444]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bab6:	4a6b      	ldr	r2, [pc, #428]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bab8:	430b      	orrs	r3, r1
 800baba:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800babc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bac8:	67bb      	str	r3, [r7, #120]	; 0x78
 800baca:	2300      	movs	r3, #0
 800bacc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bace:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bad2:	460b      	mov	r3, r1
 800bad4:	4313      	orrs	r3, r2
 800bad6:	d03e      	beq.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800badc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bae0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bae4:	d022      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800bae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baea:	d81b      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800baf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baf4:	d00b      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800baf6:	e015      	b.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bafc:	3308      	adds	r3, #8
 800bafe:	2100      	movs	r1, #0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 fb45 	bl	800d190 <RCCEx_PLL2_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb0c:	e00f      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb12:	3328      	adds	r3, #40	; 0x28
 800bb14:	2102      	movs	r1, #2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fbec 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb22:	e004      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb2a:	e000      	b.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bb2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10b      	bne.n	800bb4e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb36:	4b4b      	ldr	r3, [pc, #300]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb3a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb46:	4a47      	ldr	r2, [pc, #284]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb48:	430b      	orrs	r3, r1
 800bb4a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb4c:	e003      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb62:	673b      	str	r3, [r7, #112]	; 0x70
 800bb64:	2300      	movs	r3, #0
 800bb66:	677b      	str	r3, [r7, #116]	; 0x74
 800bb68:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	d03b      	beq.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb7e:	d01f      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb84:	d818      	bhi.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb8a:	d003      	beq.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bb8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb90:	d007      	beq.n	800bba2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bb92:	e011      	b.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb94:	4b33      	ldr	r3, [pc, #204]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb98:	4a32      	ldr	r2, [pc, #200]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bba0:	e00f      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba6:	3328      	adds	r3, #40	; 0x28
 800bba8:	2101      	movs	r1, #1
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 fba2 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbb6:	e004      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbbe:	e000      	b.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bbc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10b      	bne.n	800bbe2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbca:	4b26      	ldr	r3, [pc, #152]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbda:	4a22      	ldr	r2, [pc, #136]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	6553      	str	r3, [r2, #84]	; 0x54
 800bbe0:	e003      	b.n	800bbea <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbe6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bbf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbfc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bc00:	460b      	mov	r3, r1
 800bc02:	4313      	orrs	r3, r2
 800bc04:	d034      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bc10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc14:	d007      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bc16:	e011      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc18:	4b12      	ldr	r3, [pc, #72]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1c:	4a11      	ldr	r2, [pc, #68]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc24:	e00e      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2102      	movs	r1, #2
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 faae 	bl	800d190 <RCCEx_PLL2_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc3a:	e003      	b.n	800bc44 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc42:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10d      	bne.n	800bc68 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc5a:	4a02      	ldr	r2, [pc, #8]	; (800bc64 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc60:	e006      	b.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc62:	bf00      	nop
 800bc64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc7c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc7e:	2300      	movs	r3, #0
 800bc80:	667b      	str	r3, [r7, #100]	; 0x64
 800bc82:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bc86:	460b      	mov	r3, r1
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	d00c      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	3328      	adds	r3, #40	; 0x28
 800bc92:	2102      	movs	r1, #2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f001 fb2d 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bca0:	2301      	movs	r3, #1
 800bca2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcae:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bcb2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcb8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	d036      	beq.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bccc:	d018      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bcce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcd2:	d811      	bhi.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bcd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcd8:	d014      	beq.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bcda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcde:	d80b      	bhi.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d011      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bce8:	d106      	bne.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcea:	4bb7      	ldr	r3, [pc, #732]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcee:	4ab6      	ldr	r2, [pc, #728]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bcf6:	e008      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcfe:	e004      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd00:	bf00      	nop
 800bd02:	e002      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd04:	bf00      	nop
 800bd06:	e000      	b.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd08:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10a      	bne.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd12:	4bad      	ldr	r3, [pc, #692]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd20:	4aa9      	ldr	r2, [pc, #676]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd22:	430b      	orrs	r3, r1
 800bd24:	6553      	str	r3, [r2, #84]	; 0x54
 800bd26:	e003      	b.n	800bd30 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd3c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd3e:	2300      	movs	r3, #0
 800bd40:	657b      	str	r3, [r7, #84]	; 0x54
 800bd42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd46:	460b      	mov	r3, r1
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	d009      	beq.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd4c:	4b9e      	ldr	r3, [pc, #632]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5a:	4a9b      	ldr	r2, [pc, #620]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd6e:	2300      	movs	r3, #0
 800bd70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd72:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd76:	460b      	mov	r3, r1
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	d009      	beq.n	800bd90 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd7c:	4b92      	ldr	r3, [pc, #584]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd80:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bd84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd8a:	4a8f      	ldr	r2, [pc, #572]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd8c:	430b      	orrs	r3, r1
 800bd8e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bd9c:	643b      	str	r3, [r7, #64]	; 0x40
 800bd9e:	2300      	movs	r3, #0
 800bda0:	647b      	str	r3, [r7, #68]	; 0x44
 800bda2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bda6:	460b      	mov	r3, r1
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	d00e      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdac:	4b86      	ldr	r3, [pc, #536]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	4a85      	ldr	r2, [pc, #532]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdb6:	6113      	str	r3, [r2, #16]
 800bdb8:	4b83      	ldr	r3, [pc, #524]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdba:	6919      	ldr	r1, [r3, #16]
 800bdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdc4:	4a80      	ldr	r2, [pc, #512]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc6:	430b      	orrs	r3, r1
 800bdc8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bdd6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bdd8:	2300      	movs	r3, #0
 800bdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bddc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bde0:	460b      	mov	r3, r1
 800bde2:	4313      	orrs	r3, r2
 800bde4:	d009      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bde6:	4b78      	ldr	r3, [pc, #480]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bde8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdea:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf4:	4a74      	ldr	r2, [pc, #464]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be06:	633b      	str	r3, [r7, #48]	; 0x30
 800be08:	2300      	movs	r3, #0
 800be0a:	637b      	str	r3, [r7, #52]	; 0x34
 800be0c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800be10:	460b      	mov	r3, r1
 800be12:	4313      	orrs	r3, r2
 800be14:	d00a      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be16:	4b6c      	ldr	r3, [pc, #432]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be1a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800be1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be26:	4a68      	ldr	r2, [pc, #416]	; (800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be28:	430b      	orrs	r3, r1
 800be2a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	2100      	movs	r1, #0
 800be36:	62b9      	str	r1, [r7, #40]	; 0x28
 800be38:	f003 0301 	and.w	r3, r3, #1
 800be3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be3e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be42:	460b      	mov	r3, r1
 800be44:	4313      	orrs	r3, r2
 800be46:	d011      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4c:	3308      	adds	r3, #8
 800be4e:	2100      	movs	r1, #0
 800be50:	4618      	mov	r0, r3
 800be52:	f001 f99d 	bl	800d190 <RCCEx_PLL2_Config>
 800be56:	4603      	mov	r3, r0
 800be58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be60:	2b00      	cmp	r3, #0
 800be62:	d003      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be74:	2100      	movs	r1, #0
 800be76:	6239      	str	r1, [r7, #32]
 800be78:	f003 0302 	and.w	r3, r3, #2
 800be7c:	627b      	str	r3, [r7, #36]	; 0x24
 800be7e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be82:	460b      	mov	r3, r1
 800be84:	4313      	orrs	r3, r2
 800be86:	d011      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8c:	3308      	adds	r3, #8
 800be8e:	2101      	movs	r1, #1
 800be90:	4618      	mov	r0, r3
 800be92:	f001 f97d 	bl	800d190 <RCCEx_PLL2_Config>
 800be96:	4603      	mov	r3, r0
 800be98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d003      	beq.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bea8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800beac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb4:	2100      	movs	r1, #0
 800beb6:	61b9      	str	r1, [r7, #24]
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	61fb      	str	r3, [r7, #28]
 800bebe:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d011      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800becc:	3308      	adds	r3, #8
 800bece:	2102      	movs	r1, #2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f001 f95d 	bl	800d190 <RCCEx_PLL2_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bedc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d003      	beq.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bee4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bee8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800beec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef4:	2100      	movs	r1, #0
 800bef6:	6139      	str	r1, [r7, #16]
 800bef8:	f003 0308 	and.w	r3, r3, #8
 800befc:	617b      	str	r3, [r7, #20]
 800befe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf02:	460b      	mov	r3, r1
 800bf04:	4313      	orrs	r3, r2
 800bf06:	d011      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0c:	3328      	adds	r3, #40	; 0x28
 800bf0e:	2100      	movs	r1, #0
 800bf10:	4618      	mov	r0, r3
 800bf12:	f001 f9ef 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bf16:	4603      	mov	r3, r0
 800bf18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bf1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d003      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	2100      	movs	r1, #0
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	60fb      	str	r3, [r7, #12]
 800bf3e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf42:	460b      	mov	r3, r1
 800bf44:	4313      	orrs	r3, r2
 800bf46:	d011      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4c:	3328      	adds	r3, #40	; 0x28
 800bf4e:	2101      	movs	r1, #1
 800bf50:	4618      	mov	r0, r3
 800bf52:	f001 f9cf 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bf56:	4603      	mov	r3, r0
 800bf58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d003      	beq.n	800bf6c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	2100      	movs	r1, #0
 800bf76:	6039      	str	r1, [r7, #0]
 800bf78:	f003 0320 	and.w	r3, r3, #32
 800bf7c:	607b      	str	r3, [r7, #4]
 800bf7e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf82:	460b      	mov	r3, r1
 800bf84:	4313      	orrs	r3, r2
 800bf86:	d011      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf8c:	3328      	adds	r3, #40	; 0x28
 800bf8e:	2102      	movs	r1, #2
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 f9af 	bl	800d2f4 <RCCEx_PLL3_Config>
 800bf96:	4603      	mov	r3, r0
 800bf98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d003      	beq.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bfac:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	e000      	b.n	800bfba <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfc6:	bf00      	nop
 800bfc8:	58024400 	.word	0x58024400

0800bfcc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b090      	sub	sp, #64	; 0x40
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfda:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bfde:	430b      	orrs	r3, r1
 800bfe0:	f040 8094 	bne.w	800c10c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bfe4:	4b9b      	ldr	r3, [pc, #620]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe8:	f003 0307 	and.w	r3, r3, #7
 800bfec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	f200 8087 	bhi.w	800c104 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c011 	.word	0x0800c011
 800c000:	0800c039 	.word	0x0800c039
 800c004:	0800c061 	.word	0x0800c061
 800c008:	0800c0fd 	.word	0x0800c0fd
 800c00c:	0800c089 	.word	0x0800c089
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c010:	4b90      	ldr	r3, [pc, #576]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c01c:	d108      	bne.n	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c01e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c022:	4618      	mov	r0, r3
 800c024:	f000 ff62 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02c:	f000 bc93 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	f000 bc8f 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c038:	4b86      	ldr	r3, [pc, #536]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c040:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c044:	d108      	bne.n	800c058 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c046:	f107 0318 	add.w	r3, r7, #24
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 fca6 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c054:	f000 bc7f 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c058:	2300      	movs	r3, #0
 800c05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c05c:	f000 bc7b 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c060:	4b7c      	ldr	r3, [pc, #496]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c068:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c06c:	d108      	bne.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c06e:	f107 030c 	add.w	r3, r7, #12
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fde6 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c07c:	f000 bc6b 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c080:	2300      	movs	r3, #0
 800c082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c084:	f000 bc67 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c088:	4b72      	ldr	r3, [pc, #456]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c08a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c08c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c090:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c092:	4b70      	ldr	r3, [pc, #448]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f003 0304 	and.w	r3, r3, #4
 800c09a:	2b04      	cmp	r3, #4
 800c09c:	d10c      	bne.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d109      	bne.n	800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0a4:	4b6b      	ldr	r3, [pc, #428]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	08db      	lsrs	r3, r3, #3
 800c0aa:	f003 0303 	and.w	r3, r3, #3
 800c0ae:	4a6a      	ldr	r2, [pc, #424]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c0b0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0b6:	e01f      	b.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0b8:	4b66      	ldr	r3, [pc, #408]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0c4:	d106      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0cc:	d102      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0ce:	4b63      	ldr	r3, [pc, #396]	; (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0d2:	e011      	b.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0d4:	4b5f      	ldr	r3, [pc, #380]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e0:	d106      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0e8:	d102      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0ea:	4b5d      	ldr	r3, [pc, #372]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ee:	e003      	b.n	800c0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c0f4:	f000 bc2f 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0f8:	f000 bc2d 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0fc:	4b59      	ldr	r3, [pc, #356]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c100:	f000 bc29 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c104:	2300      	movs	r3, #0
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c108:	f000 bc25 	b.w	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c10c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c110:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c114:	430b      	orrs	r3, r1
 800c116:	f040 80a7 	bne.w	800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c11a:	4b4e      	ldr	r3, [pc, #312]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c11c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c11e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c122:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c12a:	d054      	beq.n	800c1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c132:	f200 808b 	bhi.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c138:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c13c:	f000 8083 	beq.w	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c146:	f200 8081 	bhi.w	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c150:	d02f      	beq.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c158:	d878      	bhi.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d004      	beq.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c162:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c166:	d012      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c168:	e070      	b.n	800c24c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c16a:	4b3a      	ldr	r3, [pc, #232]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c172:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c176:	d107      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 feb5 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c186:	e3e6      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18c:	e3e3      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c18e:	4b31      	ldr	r3, [pc, #196]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c19a:	d107      	bne.n	800c1ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c19c:	f107 0318 	add.w	r3, r7, #24
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f000 fbfb 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1aa:	e3d4      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b0:	e3d1      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1b2:	4b28      	ldr	r3, [pc, #160]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1be:	d107      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1c0:	f107 030c 	add.w	r3, r7, #12
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fd3d 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ce:	e3c2      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d4:	e3bf      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1d6:	4b1f      	ldr	r3, [pc, #124]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e0:	4b1c      	ldr	r3, [pc, #112]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0304 	and.w	r3, r3, #4
 800c1e8:	2b04      	cmp	r3, #4
 800c1ea:	d10c      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f2:	4b18      	ldr	r3, [pc, #96]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	08db      	lsrs	r3, r3, #3
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	4a16      	ldr	r2, [pc, #88]	; (800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c1fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c204:	e01e      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c206:	4b13      	ldr	r3, [pc, #76]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c20e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c212:	d106      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c21a:	d102      	bne.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c21c:	4b0f      	ldr	r3, [pc, #60]	; (800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c220:	e010      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c222:	4b0c      	ldr	r3, [pc, #48]	; (800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c22a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c22e:	d106      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c232:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c236:	d102      	bne.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c238:	4b09      	ldr	r3, [pc, #36]	; (800c260 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c23c:	e002      	b.n	800c244 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c23e:	2300      	movs	r3, #0
 800c240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c242:	e388      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c244:	e387      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c246:	4b07      	ldr	r3, [pc, #28]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c24a:	e384      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c24c:	2300      	movs	r3, #0
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c250:	e381      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c252:	bf00      	nop
 800c254:	58024400 	.word	0x58024400
 800c258:	03d09000 	.word	0x03d09000
 800c25c:	003d0900 	.word	0x003d0900
 800c260:	02faf080 	.word	0x02faf080
 800c264:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c268:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c26c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c270:	430b      	orrs	r3, r1
 800c272:	f040 809c 	bne.w	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c276:	4b9e      	ldr	r3, [pc, #632]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c27a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c27e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c282:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c286:	d054      	beq.n	800c332 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c28e:	f200 808b 	bhi.w	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c294:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c298:	f000 8083 	beq.w	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2a2:	f200 8081 	bhi.w	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2ac:	d02f      	beq.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2b4:	d878      	bhi.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d004      	beq.n	800c2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2c2:	d012      	beq.n	800c2ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c2c4:	e070      	b.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2c6:	4b8a      	ldr	r3, [pc, #552]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2d2:	d107      	bne.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 fe07 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2e2:	e338      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e8:	e335      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ea:	4b81      	ldr	r3, [pc, #516]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f6:	d107      	bne.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f8:	f107 0318 	add.w	r3, r7, #24
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f000 fb4d 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c306:	e326      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30c:	e323      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c30e:	4b78      	ldr	r3, [pc, #480]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31a:	d107      	bne.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	4618      	mov	r0, r3
 800c322:	f000 fc8f 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32a:	e314      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c330:	e311      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c332:	4b6f      	ldr	r3, [pc, #444]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c336:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c33a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c33c:	4b6c      	ldr	r3, [pc, #432]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 0304 	and.w	r3, r3, #4
 800c344:	2b04      	cmp	r3, #4
 800c346:	d10c      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d109      	bne.n	800c362 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c34e:	4b68      	ldr	r3, [pc, #416]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	08db      	lsrs	r3, r3, #3
 800c354:	f003 0303 	and.w	r3, r3, #3
 800c358:	4a66      	ldr	r2, [pc, #408]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c35a:	fa22 f303 	lsr.w	r3, r2, r3
 800c35e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c360:	e01e      	b.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c362:	4b63      	ldr	r3, [pc, #396]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36e:	d106      	bne.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c376:	d102      	bne.n	800c37e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c378:	4b5f      	ldr	r3, [pc, #380]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c37c:	e010      	b.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c37e:	4b5c      	ldr	r3, [pc, #368]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c38a:	d106      	bne.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c392:	d102      	bne.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c394:	4b59      	ldr	r3, [pc, #356]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c398:	e002      	b.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c39e:	e2da      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3a0:	e2d9      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3a2:	4b57      	ldr	r3, [pc, #348]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a6:	e2d6      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ac:	e2d3      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3b6:	430b      	orrs	r3, r1
 800c3b8:	f040 80a7 	bne.w	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3bc:	4b4c      	ldr	r3, [pc, #304]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3cc:	d055      	beq.n	800c47a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3d4:	f200 8096 	bhi.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3de:	f000 8084 	beq.w	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3e8:	f200 808c 	bhi.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3f2:	d030      	beq.n	800c456 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3fa:	f200 8083 	bhi.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	2b00      	cmp	r3, #0
 800c402:	d004      	beq.n	800c40e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c40a:	d012      	beq.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c40c:	e07a      	b.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c40e:	4b38      	ldr	r3, [pc, #224]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c416:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c41a:	d107      	bne.n	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c41c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fd63 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c42a:	e294      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c42c:	2300      	movs	r3, #0
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c430:	e291      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c432:	4b2f      	ldr	r3, [pc, #188]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c43a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c43e:	d107      	bne.n	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c440:	f107 0318 	add.w	r3, r7, #24
 800c444:	4618      	mov	r0, r3
 800c446:	f000 faa9 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c44e:	e282      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c450:	2300      	movs	r3, #0
 800c452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c454:	e27f      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c456:	4b26      	ldr	r3, [pc, #152]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c462:	d107      	bne.n	800c474 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c464:	f107 030c 	add.w	r3, r7, #12
 800c468:	4618      	mov	r0, r3
 800c46a:	f000 fbeb 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c472:	e270      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c474:	2300      	movs	r3, #0
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c478:	e26d      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c47a:	4b1d      	ldr	r3, [pc, #116]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c47c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c47e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c482:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c484:	4b1a      	ldr	r3, [pc, #104]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d10c      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c492:	2b00      	cmp	r3, #0
 800c494:	d109      	bne.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c496:	4b16      	ldr	r3, [pc, #88]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	08db      	lsrs	r3, r3, #3
 800c49c:	f003 0303 	and.w	r3, r3, #3
 800c4a0:	4a14      	ldr	r2, [pc, #80]	; (800c4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4a8:	e01e      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4aa:	4b11      	ldr	r3, [pc, #68]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b6:	d106      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4be:	d102      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4c0:	4b0d      	ldr	r3, [pc, #52]	; (800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4c4:	e010      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4c6:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d2:	d106      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4da:	d102      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4dc:	4b07      	ldr	r3, [pc, #28]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4e0:	e002      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4e6:	e236      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4e8:	e235      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4ea:	4b05      	ldr	r3, [pc, #20]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ee:	e232      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	03d09000 	.word	0x03d09000
 800c4f8:	003d0900 	.word	0x003d0900
 800c4fc:	02faf080 	.word	0x02faf080
 800c500:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c508:	e225      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c50e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c512:	430b      	orrs	r3, r1
 800c514:	f040 8085 	bne.w	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c518:	4b9c      	ldr	r3, [pc, #624]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c51a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c51c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c520:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c528:	d06b      	beq.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c530:	d874      	bhi.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c538:	d056      	beq.n	800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c540:	d86c      	bhi.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c548:	d03b      	beq.n	800c5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c550:	d864      	bhi.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c558:	d021      	beq.n	800c59e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c560:	d85c      	bhi.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	2b00      	cmp	r3, #0
 800c566:	d004      	beq.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c56e:	d004      	beq.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c570:	e054      	b.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c572:	f7fe fb5f 	bl	800ac34 <HAL_RCC_GetPCLK1Freq>
 800c576:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c578:	e1ed      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c57a:	4b84      	ldr	r3, [pc, #528]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c586:	d107      	bne.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c588:	f107 0318 	add.w	r3, r7, #24
 800c58c:	4618      	mov	r0, r3
 800c58e:	f000 fa05 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c596:	e1de      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c598:	2300      	movs	r3, #0
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c59c:	e1db      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c59e:	4b7b      	ldr	r3, [pc, #492]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5aa:	d107      	bne.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5ac:	f107 030c 	add.w	r3, r7, #12
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 fb47 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ba:	e1cc      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5c0:	e1c9      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5c2:	4b72      	ldr	r3, [pc, #456]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0304 	and.w	r3, r3, #4
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	d109      	bne.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5ce:	4b6f      	ldr	r3, [pc, #444]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	08db      	lsrs	r3, r3, #3
 800c5d4:	f003 0303 	and.w	r3, r3, #3
 800c5d8:	4a6d      	ldr	r2, [pc, #436]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5da:	fa22 f303 	lsr.w	r3, r2, r3
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5e0:	e1b9      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e6:	e1b6      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5e8:	4b68      	ldr	r3, [pc, #416]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f4:	d102      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c5f6:	4b67      	ldr	r3, [pc, #412]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fa:	e1ac      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c600:	e1a9      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c602:	4b62      	ldr	r3, [pc, #392]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60e:	d102      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c610:	4b61      	ldr	r3, [pc, #388]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c614:	e19f      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e19c      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c620:	e199      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c622:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c626:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c62a:	430b      	orrs	r3, r1
 800c62c:	d173      	bne.n	800c716 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c62e:	4b57      	ldr	r3, [pc, #348]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c632:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c636:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c63e:	d02f      	beq.n	800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c646:	d863      	bhi.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d004      	beq.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c654:	d012      	beq.n	800c67c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c656:	e05b      	b.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c658:	4b4c      	ldr	r3, [pc, #304]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c660:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c664:	d107      	bne.n	800c676 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c666:	f107 0318 	add.w	r3, r7, #24
 800c66a:	4618      	mov	r0, r3
 800c66c:	f000 f996 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c670:	69bb      	ldr	r3, [r7, #24]
 800c672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c674:	e16f      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c676:	2300      	movs	r3, #0
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67a:	e16c      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c67c:	4b43      	ldr	r3, [pc, #268]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c688:	d107      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	4618      	mov	r0, r3
 800c690:	f000 fad8 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c698:	e15d      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69e:	e15a      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6a0:	4b3a      	ldr	r3, [pc, #232]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6aa:	4b38      	ldr	r3, [pc, #224]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f003 0304 	and.w	r3, r3, #4
 800c6b2:	2b04      	cmp	r3, #4
 800c6b4:	d10c      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c6b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d109      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6bc:	4b33      	ldr	r3, [pc, #204]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	08db      	lsrs	r3, r3, #3
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	4a32      	ldr	r2, [pc, #200]	; (800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ce:	e01e      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6d0:	4b2e      	ldr	r3, [pc, #184]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6dc:	d106      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6e4:	d102      	bne.n	800c6ec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6e6:	4b2b      	ldr	r3, [pc, #172]	; (800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6ea:	e010      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6ec:	4b27      	ldr	r3, [pc, #156]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6f8:	d106      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c6fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c700:	d102      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c702:	4b25      	ldr	r3, [pc, #148]	; (800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c706:	e002      	b.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c70c:	e123      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c70e:	e122      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c714:	e11f      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c716:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c71a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c71e:	430b      	orrs	r3, r1
 800c720:	d13c      	bne.n	800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c722:	4b1a      	ldr	r3, [pc, #104]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c72a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d004      	beq.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c738:	d012      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c73a:	e023      	b.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c73c:	4b13      	ldr	r3, [pc, #76]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c748:	d107      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fbcc 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c758:	e0fd      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	e0fa      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c76c:	d107      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c76e:	f107 0318 	add.w	r3, r7, #24
 800c772:	4618      	mov	r0, r3
 800c774:	f000 f912 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c778:	6a3b      	ldr	r3, [r7, #32]
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c77c:	e0eb      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c782:	e0e8      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c788:	e0e5      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c78a:	bf00      	nop
 800c78c:	58024400 	.word	0x58024400
 800c790:	03d09000 	.word	0x03d09000
 800c794:	003d0900 	.word	0x003d0900
 800c798:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c79c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7a0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c7a4:	430b      	orrs	r3, r1
 800c7a6:	f040 8085 	bne.w	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7aa:	4b6d      	ldr	r3, [pc, #436]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7ba:	d06b      	beq.n	800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7c2:	d874      	bhi.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7ca:	d056      	beq.n	800c87a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7d2:	d86c      	bhi.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7da:	d03b      	beq.n	800c854 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7e2:	d864      	bhi.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ea:	d021      	beq.n	800c830 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f2:	d85c      	bhi.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d004      	beq.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c800:	d004      	beq.n	800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c802:	e054      	b.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c804:	f000 f8b4 	bl	800c970 <HAL_RCCEx_GetD3PCLK1Freq>
 800c808:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c80a:	e0a4      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c80c:	4b54      	ldr	r3, [pc, #336]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c818:	d107      	bne.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c81a:	f107 0318 	add.w	r3, r7, #24
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 f8bc 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c828:	e095      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82e:	e092      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c830:	4b4b      	ldr	r3, [pc, #300]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c83c:	d107      	bne.n	800c84e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83e:	f107 030c 	add.w	r3, r7, #12
 800c842:	4618      	mov	r0, r3
 800c844:	f000 f9fe 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c84c:	e083      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c84e:	2300      	movs	r3, #0
 800c850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c852:	e080      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c854:	4b42      	ldr	r3, [pc, #264]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f003 0304 	and.w	r3, r3, #4
 800c85c:	2b04      	cmp	r3, #4
 800c85e:	d109      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c860:	4b3f      	ldr	r3, [pc, #252]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	08db      	lsrs	r3, r3, #3
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	4a3e      	ldr	r2, [pc, #248]	; (800c964 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c86c:	fa22 f303 	lsr.w	r3, r2, r3
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c872:	e070      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c874:	2300      	movs	r3, #0
 800c876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c878:	e06d      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c87a:	4b39      	ldr	r3, [pc, #228]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c886:	d102      	bne.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c888:	4b37      	ldr	r3, [pc, #220]	; (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c88c:	e063      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c892:	e060      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c894:	4b32      	ldr	r3, [pc, #200]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c89c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8a0:	d102      	bne.n	800c8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c8a2:	4b32      	ldr	r3, [pc, #200]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a6:	e056      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ac:	e053      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b2:	e050      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8bc:	430b      	orrs	r3, r1
 800c8be:	d148      	bne.n	800c952 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8c0:	4b27      	ldr	r3, [pc, #156]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8d0:	d02a      	beq.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8d8:	d838      	bhi.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d004      	beq.n	800c8ea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8e6:	d00d      	beq.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8e8:	e030      	b.n	800c94c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8ea:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f6:	d102      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c8f8:	4b1c      	ldr	r3, [pc, #112]	; (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8fc:	e02b      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c902:	e028      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c904:	4b16      	ldr	r3, [pc, #88]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c910:	d107      	bne.n	800c922 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fae8 	bl	800ceec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c91e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c920:	e019      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c926:	e016      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c928:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c934:	d107      	bne.n	800c946 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c936:	f107 0318 	add.w	r3, r7, #24
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 f82e 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c944:	e007      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c94a:	e004      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c94c:	2300      	movs	r3, #0
 800c94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c950:	e001      	b.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3740      	adds	r7, #64	; 0x40
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	58024400 	.word	0x58024400
 800c964:	03d09000 	.word	0x03d09000
 800c968:	003d0900 	.word	0x003d0900
 800c96c:	02faf080 	.word	0x02faf080

0800c970 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c974:	f7fe f92e 	bl	800abd4 <HAL_RCC_GetHCLKFreq>
 800c978:	4602      	mov	r2, r0
 800c97a:	4b06      	ldr	r3, [pc, #24]	; (800c994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	091b      	lsrs	r3, r3, #4
 800c980:	f003 0307 	and.w	r3, r3, #7
 800c984:	4904      	ldr	r1, [pc, #16]	; (800c998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c986:	5ccb      	ldrb	r3, [r1, r3]
 800c988:	f003 031f 	and.w	r3, r3, #31
 800c98c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c990:	4618      	mov	r0, r3
 800c992:	bd80      	pop	{r7, pc}
 800c994:	58024400 	.word	0x58024400
 800c998:	0801c4e8 	.word	0x0801c4e8

0800c99c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b089      	sub	sp, #36	; 0x24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9a4:	4ba1      	ldr	r3, [pc, #644]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9a8:	f003 0303 	and.w	r3, r3, #3
 800c9ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9ae:	4b9f      	ldr	r3, [pc, #636]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b2:	0b1b      	lsrs	r3, r3, #12
 800c9b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9ba:	4b9c      	ldr	r3, [pc, #624]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9be:	091b      	lsrs	r3, r3, #4
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9c6:	4b99      	ldr	r3, [pc, #612]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9ca:	08db      	lsrs	r3, r3, #3
 800c9cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	fb02 f303 	mul.w	r3, r2, r3
 800c9d6:	ee07 3a90 	vmov	s15, r3
 800c9da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	f000 8111 	beq.w	800cc0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	2b02      	cmp	r3, #2
 800c9ee:	f000 8083 	beq.w	800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	f200 80a1 	bhi.w	800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d003      	beq.n	800ca08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca00:	69bb      	ldr	r3, [r7, #24]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d056      	beq.n	800cab4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca06:	e099      	b.n	800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca08:	4b88      	ldr	r3, [pc, #544]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f003 0320 	and.w	r3, r3, #32
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d02d      	beq.n	800ca70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca14:	4b85      	ldr	r3, [pc, #532]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	08db      	lsrs	r3, r3, #3
 800ca1a:	f003 0303 	and.w	r3, r3, #3
 800ca1e:	4a84      	ldr	r2, [pc, #528]	; (800cc30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca20:	fa22 f303 	lsr.w	r3, r2, r3
 800ca24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	ee07 3a90 	vmov	s15, r3
 800ca2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3e:	4b7b      	ldr	r3, [pc, #492]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca46:	ee07 3a90 	vmov	s15, r3
 800ca4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca52:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca6e:	e087      	b.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca82:	4b6a      	ldr	r3, [pc, #424]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca96:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab2:	e065      	b.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	ee07 3a90 	vmov	s15, r3
 800caba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cabe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac6:	4b59      	ldr	r3, [pc, #356]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cada:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caf6:	e043      	b.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb02:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0a:	4b48      	ldr	r3, [pc, #288]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb1e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb3a:	e021      	b.n	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	ee07 3a90 	vmov	s15, r3
 800cb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb46:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb4e:	4b37      	ldr	r3, [pc, #220]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb62:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb80:	4b2a      	ldr	r3, [pc, #168]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb84:	0a5b      	lsrs	r3, r3, #9
 800cb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8a:	ee07 3a90 	vmov	s15, r3
 800cb8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb96:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb9a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cba6:	ee17 2a90 	vmov	r2, s15
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbae:	4b1f      	ldr	r3, [pc, #124]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbb2:	0c1b      	lsrs	r3, r3, #16
 800cbb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb8:	ee07 3a90 	vmov	s15, r3
 800cbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbd4:	ee17 2a90 	vmov	r2, s15
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbdc:	4b13      	ldr	r3, [pc, #76]	; (800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe0:	0e1b      	lsrs	r3, r3, #24
 800cbe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbe6:	ee07 3a90 	vmov	s15, r3
 800cbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbf6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc02:	ee17 2a90 	vmov	r2, s15
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc0a:	e008      	b.n	800cc1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2200      	movs	r2, #0
 800cc16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	609a      	str	r2, [r3, #8]
}
 800cc1e:	bf00      	nop
 800cc20:	3724      	adds	r7, #36	; 0x24
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr
 800cc2a:	bf00      	nop
 800cc2c:	58024400 	.word	0x58024400
 800cc30:	03d09000 	.word	0x03d09000
 800cc34:	46000000 	.word	0x46000000
 800cc38:	4c742400 	.word	0x4c742400
 800cc3c:	4a742400 	.word	0x4a742400
 800cc40:	4c3ebc20 	.word	0x4c3ebc20

0800cc44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b089      	sub	sp, #36	; 0x24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc4c:	4ba1      	ldr	r3, [pc, #644]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc56:	4b9f      	ldr	r3, [pc, #636]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5a:	0d1b      	lsrs	r3, r3, #20
 800cc5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc62:	4b9c      	ldr	r3, [pc, #624]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc66:	0a1b      	lsrs	r3, r3, #8
 800cc68:	f003 0301 	and.w	r3, r3, #1
 800cc6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc6e:	4b99      	ldr	r3, [pc, #612]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc72:	08db      	lsrs	r3, r3, #3
 800cc74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc78:	693a      	ldr	r2, [r7, #16]
 800cc7a:	fb02 f303 	mul.w	r3, r2, r3
 800cc7e:	ee07 3a90 	vmov	s15, r3
 800cc82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	f000 8111 	beq.w	800ceb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc92:	69bb      	ldr	r3, [r7, #24]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	f000 8083 	beq.w	800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	2b02      	cmp	r3, #2
 800cc9e:	f200 80a1 	bhi.w	800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d003      	beq.n	800ccb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d056      	beq.n	800cd5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccae:	e099      	b.n	800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccb0:	4b88      	ldr	r3, [pc, #544]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0320 	and.w	r3, r3, #32
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d02d      	beq.n	800cd18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccbc:	4b85      	ldr	r3, [pc, #532]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	08db      	lsrs	r3, r3, #3
 800ccc2:	f003 0303 	and.w	r3, r3, #3
 800ccc6:	4a84      	ldr	r2, [pc, #528]	; (800ced8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cccc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	ee07 3a90 	vmov	s15, r3
 800ccd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce6:	4b7b      	ldr	r3, [pc, #492]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccee:	ee07 3a90 	vmov	s15, r3
 800ccf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd16:	e087      	b.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	ee07 3a90 	vmov	s15, r3
 800cd1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cee0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2a:	4b6a      	ldr	r3, [pc, #424]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5a:	e065      	b.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	ee07 3a90 	vmov	s15, r3
 800cd62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd6e:	4b59      	ldr	r3, [pc, #356]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd82:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd9e:	e043      	b.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdaa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb2:	4b48      	ldr	r3, [pc, #288]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cde2:	e021      	b.n	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	ee07 3a90 	vmov	s15, r3
 800cdea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf6:	4b37      	ldr	r3, [pc, #220]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfe:	ee07 3a90 	vmov	s15, r3
 800ce02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cedc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce28:	4b2a      	ldr	r3, [pc, #168]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2c:	0a5b      	lsrs	r3, r3, #9
 800ce2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce32:	ee07 3a90 	vmov	s15, r3
 800ce36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce4e:	ee17 2a90 	vmov	r2, s15
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce56:	4b1f      	ldr	r3, [pc, #124]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce5a:	0c1b      	lsrs	r3, r3, #16
 800ce5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce60:	ee07 3a90 	vmov	s15, r3
 800ce64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce70:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce7c:	ee17 2a90 	vmov	r2, s15
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce84:	4b13      	ldr	r3, [pc, #76]	; (800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce88:	0e1b      	lsrs	r3, r3, #24
 800ce8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce8e:	ee07 3a90 	vmov	s15, r3
 800ce92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceaa:	ee17 2a90 	vmov	r2, s15
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ceb2:	e008      	b.n	800cec6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2200      	movs	r2, #0
 800cec4:	609a      	str	r2, [r3, #8]
}
 800cec6:	bf00      	nop
 800cec8:	3724      	adds	r7, #36	; 0x24
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	58024400 	.word	0x58024400
 800ced8:	03d09000 	.word	0x03d09000
 800cedc:	46000000 	.word	0x46000000
 800cee0:	4c742400 	.word	0x4c742400
 800cee4:	4a742400 	.word	0x4a742400
 800cee8:	4c3ebc20 	.word	0x4c3ebc20

0800ceec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b089      	sub	sp, #36	; 0x24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cef4:	4ba0      	ldr	r3, [pc, #640]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cef8:	f003 0303 	and.w	r3, r3, #3
 800cefc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cefe:	4b9e      	ldr	r3, [pc, #632]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf02:	091b      	lsrs	r3, r3, #4
 800cf04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf08:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf0a:	4b9b      	ldr	r3, [pc, #620]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf14:	4b98      	ldr	r3, [pc, #608]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf18:	08db      	lsrs	r3, r3, #3
 800cf1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	fb02 f303 	mul.w	r3, r2, r3
 800cf24:	ee07 3a90 	vmov	s15, r3
 800cf28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf2c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 8111 	beq.w	800d15a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	2b02      	cmp	r3, #2
 800cf3c:	f000 8083 	beq.w	800d046 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf40:	69bb      	ldr	r3, [r7, #24]
 800cf42:	2b02      	cmp	r3, #2
 800cf44:	f200 80a1 	bhi.w	800d08a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d056      	beq.n	800d002 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf54:	e099      	b.n	800d08a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf56:	4b88      	ldr	r3, [pc, #544]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 0320 	and.w	r3, r3, #32
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d02d      	beq.n	800cfbe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf62:	4b85      	ldr	r3, [pc, #532]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	08db      	lsrs	r3, r3, #3
 800cf68:	f003 0303 	and.w	r3, r3, #3
 800cf6c:	4a83      	ldr	r2, [pc, #524]	; (800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf6e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf72:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	ee07 3a90 	vmov	s15, r3
 800cf7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	ee07 3a90 	vmov	s15, r3
 800cf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf8c:	4b7a      	ldr	r3, [pc, #488]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf94:	ee07 3a90 	vmov	s15, r3
 800cf98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfb8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfbc:	e087      	b.n	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfbe:	697b      	ldr	r3, [r7, #20]
 800cfc0:	ee07 3a90 	vmov	s15, r3
 800cfc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfc8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd0:	4b69      	ldr	r3, [pc, #420]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfd8:	ee07 3a90 	vmov	s15, r3
 800cfdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfe8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d000:	e065      	b.n	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	ee07 3a90 	vmov	s15, r3
 800d008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d014:	4b58      	ldr	r3, [pc, #352]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d024:	ed97 6a03 	vldr	s12, [r7, #12]
 800d028:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d040:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d044:	e043      	b.n	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	ee07 3a90 	vmov	s15, r3
 800d04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d050:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d058:	4b47      	ldr	r3, [pc, #284]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d060:	ee07 3a90 	vmov	s15, r3
 800d064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d068:	ed97 6a03 	vldr	s12, [r7, #12]
 800d06c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d088:	e021      	b.n	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	ee07 3a90 	vmov	s15, r3
 800d090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d094:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d184 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09c:	4b36      	ldr	r3, [pc, #216]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a4:	ee07 3a90 	vmov	s15, r3
 800d0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d180 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0cc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0ce:	4b2a      	ldr	r3, [pc, #168]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d2:	0a5b      	lsrs	r3, r3, #9
 800d0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0d8:	ee07 3a90 	vmov	s15, r3
 800d0dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0f4:	ee17 2a90 	vmov	r2, s15
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d0fc:	4b1e      	ldr	r3, [pc, #120]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d100:	0c1b      	lsrs	r3, r3, #16
 800d102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d106:	ee07 3a90 	vmov	s15, r3
 800d10a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d112:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d116:	edd7 6a07 	vldr	s13, [r7, #28]
 800d11a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d11e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d122:	ee17 2a90 	vmov	r2, s15
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d12a:	4b13      	ldr	r3, [pc, #76]	; (800d178 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d12e:	0e1b      	lsrs	r3, r3, #24
 800d130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d134:	ee07 3a90 	vmov	s15, r3
 800d138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d13c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d140:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d144:	edd7 6a07 	vldr	s13, [r7, #28]
 800d148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d14c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d150:	ee17 2a90 	vmov	r2, s15
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d158:	e008      	b.n	800d16c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	609a      	str	r2, [r3, #8]
}
 800d16c:	bf00      	nop
 800d16e:	3724      	adds	r7, #36	; 0x24
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	58024400 	.word	0x58024400
 800d17c:	03d09000 	.word	0x03d09000
 800d180:	46000000 	.word	0x46000000
 800d184:	4c742400 	.word	0x4c742400
 800d188:	4a742400 	.word	0x4a742400
 800d18c:	4c3ebc20 	.word	0x4c3ebc20

0800d190 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d19e:	4b53      	ldr	r3, [pc, #332]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a2:	f003 0303 	and.w	r3, r3, #3
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d101      	bne.n	800d1ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	e099      	b.n	800d2e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d1ae:	4b4f      	ldr	r3, [pc, #316]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a4e      	ldr	r2, [pc, #312]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ba:	f7f6 fe7b 	bl	8003eb4 <HAL_GetTick>
 800d1be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1c0:	e008      	b.n	800d1d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1c2:	f7f6 fe77 	bl	8003eb4 <HAL_GetTick>
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	68bb      	ldr	r3, [r7, #8]
 800d1ca:	1ad3      	subs	r3, r2, r3
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d901      	bls.n	800d1d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	e086      	b.n	800d2e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1d4:	4b45      	ldr	r3, [pc, #276]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1f0      	bne.n	800d1c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1e0:	4b42      	ldr	r3, [pc, #264]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	031b      	lsls	r3, r3, #12
 800d1ee:	493f      	ldr	r1, [pc, #252]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	628b      	str	r3, [r1, #40]	; 0x28
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	3b01      	subs	r3, #1
 800d204:	025b      	lsls	r3, r3, #9
 800d206:	b29b      	uxth	r3, r3
 800d208:	431a      	orrs	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68db      	ldr	r3, [r3, #12]
 800d20e:	3b01      	subs	r3, #1
 800d210:	041b      	lsls	r3, r3, #16
 800d212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	3b01      	subs	r3, #1
 800d21e:	061b      	lsls	r3, r3, #24
 800d220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d224:	4931      	ldr	r1, [pc, #196]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d226:	4313      	orrs	r3, r2
 800d228:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d22a:	4b30      	ldr	r3, [pc, #192]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	492d      	ldr	r1, [pc, #180]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d23c:	4b2b      	ldr	r3, [pc, #172]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	f023 0220 	bic.w	r2, r3, #32
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	4928      	ldr	r1, [pc, #160]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d24e:	4b27      	ldr	r3, [pc, #156]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d252:	4a26      	ldr	r2, [pc, #152]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d254:	f023 0310 	bic.w	r3, r3, #16
 800d258:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d25a:	4b24      	ldr	r3, [pc, #144]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d25e:	4b24      	ldr	r3, [pc, #144]	; (800d2f0 <RCCEx_PLL2_Config+0x160>)
 800d260:	4013      	ands	r3, r2
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	69d2      	ldr	r2, [r2, #28]
 800d266:	00d2      	lsls	r2, r2, #3
 800d268:	4920      	ldr	r1, [pc, #128]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d26e:	4b1f      	ldr	r3, [pc, #124]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d272:	4a1e      	ldr	r2, [pc, #120]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d274:	f043 0310 	orr.w	r3, r3, #16
 800d278:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d106      	bne.n	800d28e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d280:	4b1a      	ldr	r3, [pc, #104]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d284:	4a19      	ldr	r2, [pc, #100]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d286:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d28a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d28c:	e00f      	b.n	800d2ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d106      	bne.n	800d2a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d294:	4b15      	ldr	r3, [pc, #84]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d298:	4a14      	ldr	r2, [pc, #80]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d29a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d29e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2a0:	e005      	b.n	800d2ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d2a2:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	4a11      	ldr	r2, [pc, #68]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d2a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d2ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a0e      	ldr	r2, [pc, #56]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d2b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ba:	f7f6 fdfb 	bl	8003eb4 <HAL_GetTick>
 800d2be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2c0:	e008      	b.n	800d2d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2c2:	f7f6 fdf7 	bl	8003eb4 <HAL_GetTick>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	d901      	bls.n	800d2d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2d0:	2303      	movs	r3, #3
 800d2d2:	e006      	b.n	800d2e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2d4:	4b05      	ldr	r3, [pc, #20]	; (800d2ec <RCCEx_PLL2_Config+0x15c>)
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d0f0      	beq.n	800d2c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	ffff0007 	.word	0xffff0007

0800d2f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d302:	4b53      	ldr	r3, [pc, #332]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d306:	f003 0303 	and.w	r3, r3, #3
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d101      	bne.n	800d312 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d30e:	2301      	movs	r3, #1
 800d310:	e099      	b.n	800d446 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d312:	4b4f      	ldr	r3, [pc, #316]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4a4e      	ldr	r2, [pc, #312]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d31e:	f7f6 fdc9 	bl	8003eb4 <HAL_GetTick>
 800d322:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d324:	e008      	b.n	800d338 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d326:	f7f6 fdc5 	bl	8003eb4 <HAL_GetTick>
 800d32a:	4602      	mov	r2, r0
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	2b02      	cmp	r3, #2
 800d332:	d901      	bls.n	800d338 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d334:	2303      	movs	r3, #3
 800d336:	e086      	b.n	800d446 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d338:	4b45      	ldr	r3, [pc, #276]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1f0      	bne.n	800d326 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d344:	4b42      	ldr	r3, [pc, #264]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d348:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	051b      	lsls	r3, r3, #20
 800d352:	493f      	ldr	r1, [pc, #252]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d354:	4313      	orrs	r3, r2
 800d356:	628b      	str	r3, [r1, #40]	; 0x28
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	3b01      	subs	r3, #1
 800d368:	025b      	lsls	r3, r3, #9
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	431a      	orrs	r2, r3
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	68db      	ldr	r3, [r3, #12]
 800d372:	3b01      	subs	r3, #1
 800d374:	041b      	lsls	r3, r3, #16
 800d376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d37a:	431a      	orrs	r2, r3
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	3b01      	subs	r3, #1
 800d382:	061b      	lsls	r3, r3, #24
 800d384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d388:	4931      	ldr	r1, [pc, #196]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d38a:	4313      	orrs	r3, r2
 800d38c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d38e:	4b30      	ldr	r3, [pc, #192]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d392:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	695b      	ldr	r3, [r3, #20]
 800d39a:	492d      	ldr	r1, [pc, #180]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	4313      	orrs	r3, r2
 800d39e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d3a0:	4b2b      	ldr	r3, [pc, #172]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	699b      	ldr	r3, [r3, #24]
 800d3ac:	4928      	ldr	r1, [pc, #160]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d3b2:	4b27      	ldr	r3, [pc, #156]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b6:	4a26      	ldr	r2, [pc, #152]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3be:	4b24      	ldr	r3, [pc, #144]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3c2:	4b24      	ldr	r3, [pc, #144]	; (800d454 <RCCEx_PLL3_Config+0x160>)
 800d3c4:	4013      	ands	r3, r2
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	69d2      	ldr	r2, [r2, #28]
 800d3ca:	00d2      	lsls	r2, r2, #3
 800d3cc:	4920      	ldr	r1, [pc, #128]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3d2:	4b1f      	ldr	r3, [pc, #124]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d6:	4a1e      	ldr	r2, [pc, #120]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d106      	bne.n	800d3f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3e4:	4b1a      	ldr	r3, [pc, #104]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	4a19      	ldr	r2, [pc, #100]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d3f0:	e00f      	b.n	800d412 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d106      	bne.n	800d406 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d3f8:	4b15      	ldr	r3, [pc, #84]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	4a14      	ldr	r2, [pc, #80]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d3fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d402:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d404:	e005      	b.n	800d412 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d406:	4b12      	ldr	r3, [pc, #72]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40a:	4a11      	ldr	r2, [pc, #68]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d40c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d410:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d412:	4b0f      	ldr	r3, [pc, #60]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4a0e      	ldr	r2, [pc, #56]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d41c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d41e:	f7f6 fd49 	bl	8003eb4 <HAL_GetTick>
 800d422:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d424:	e008      	b.n	800d438 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d426:	f7f6 fd45 	bl	8003eb4 <HAL_GetTick>
 800d42a:	4602      	mov	r2, r0
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	1ad3      	subs	r3, r2, r3
 800d430:	2b02      	cmp	r3, #2
 800d432:	d901      	bls.n	800d438 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d434:	2303      	movs	r3, #3
 800d436:	e006      	b.n	800d446 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d438:	4b05      	ldr	r3, [pc, #20]	; (800d450 <RCCEx_PLL3_Config+0x15c>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d440:	2b00      	cmp	r3, #0
 800d442:	d0f0      	beq.n	800d426 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d444:	7bfb      	ldrb	r3, [r7, #15]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	58024400 	.word	0x58024400
 800d454:	ffff0007 	.word	0xffff0007

0800d458 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	; 0x28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d466:	2301      	movs	r3, #1
 800d468:	e075      	b.n	800d556 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d470:	b2db      	uxtb	r3, r3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d105      	bne.n	800d482 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f7f5 fdc9 	bl	8003014 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2204      	movs	r2, #4
 800d486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f868 	bl	800d560 <HAL_SD_InitCard>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d001      	beq.n	800d49a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e05d      	b.n	800d556 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d49a:	f107 0308 	add.w	r3, r7, #8
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f000 fdaf 	bl	800e004 <HAL_SD_GetCardStatus>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d001      	beq.n	800d4b0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	e052      	b.n	800d556 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d4b0:	7e3b      	ldrb	r3, [r7, #24]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d4b6:	7e7b      	ldrb	r3, [r7, #25]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d10a      	bne.n	800d4da <HAL_SD_Init+0x82>
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d102      	bne.n	800d4d0 <HAL_SD_Init+0x78>
 800d4ca:	6a3b      	ldr	r3, [r7, #32]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d4d6:	659a      	str	r2, [r3, #88]	; 0x58
 800d4d8:	e00b      	b.n	800d4f2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d104      	bne.n	800d4ec <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4e8:	659a      	str	r2, [r3, #88]	; 0x58
 800d4ea:	e002      	b.n	800d4f2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	68db      	ldr	r3, [r3, #12]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fe6d 	bl	800e1d8 <HAL_SD_ConfigWideBusOperation>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d504:	2301      	movs	r3, #1
 800d506:	e026      	b.n	800d556 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d508:	f7f6 fcd4 	bl	8003eb4 <HAL_GetTick>
 800d50c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d50e:	e011      	b.n	800d534 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d510:	f7f6 fcd0 	bl	8003eb4 <HAL_GetTick>
 800d514:	4602      	mov	r2, r0
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51e:	d109      	bne.n	800d534 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d526:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2201      	movs	r2, #1
 800d52c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d530:	2303      	movs	r3, #3
 800d532:	e010      	b.n	800d556 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 ff61 	bl	800e3fc <HAL_SD_GetCardState>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	d1e7      	bne.n	800d510 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2200      	movs	r2, #0
 800d54a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2201      	movs	r2, #1
 800d550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3728      	adds	r7, #40	; 0x28
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d560:	b590      	push	{r4, r7, lr}
 800d562:	b08d      	sub	sp, #52	; 0x34
 800d564:	af02      	add	r7, sp, #8
 800d566:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d568:	2300      	movs	r3, #0
 800d56a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d56c:	2300      	movs	r3, #0
 800d56e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d574:	2300      	movs	r3, #0
 800d576:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d578:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d57c:	f04f 0100 	mov.w	r1, #0
 800d580:	f7fe fd24 	bl	800bfcc <HAL_RCCEx_GetPeriphCLKFreq>
 800d584:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d109      	bne.n	800d5a0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d59a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e070      	b.n	800d682 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	0a1b      	lsrs	r3, r3, #8
 800d5a4:	4a39      	ldr	r2, [pc, #228]	; (800d68c <HAL_SD_InitCard+0x12c>)
 800d5a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5aa:	091b      	lsrs	r3, r3, #4
 800d5ac:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681c      	ldr	r4, [r3, #0]
 800d5b2:	466a      	mov	r2, sp
 800d5b4:	f107 0318 	add.w	r3, r7, #24
 800d5b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5bc:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5c0:	f107 030c 	add.w	r3, r7, #12
 800d5c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	f004 fec4 	bl	8012354 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f004 ff07 	bl	80123e4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d005      	beq.n	800d5e8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5e6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d007      	beq.n	800d5fe <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d5ee:	4a28      	ldr	r2, [pc, #160]	; (800d690 <HAL_SD_InitCard+0x130>)
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5f6:	3301      	adds	r3, #1
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f7f6 fc67 	bl	8003ecc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 ffea 	bl	800e5d8 <SD_PowerON>
 800d604:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d00b      	beq.n	800d624 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d618:	6a3b      	ldr	r3, [r7, #32]
 800d61a:	431a      	orrs	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d620:	2301      	movs	r3, #1
 800d622:	e02e      	b.n	800d682 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f000 ff09 	bl	800e43c <SD_InitCard>
 800d62a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d00b      	beq.n	800d64a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	431a      	orrs	r2, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	e01b      	b.n	800d682 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d652:	4618      	mov	r0, r3
 800d654:	f004 ff5c 	bl	8012510 <SDMMC_CmdBlockLength>
 800d658:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00f      	beq.n	800d680 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a0b      	ldr	r2, [pc, #44]	; (800d694 <HAL_SD_InitCard+0x134>)
 800d666:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d66c:	6a3b      	ldr	r3, [r7, #32]
 800d66e:	431a      	orrs	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	e000      	b.n	800d682 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	372c      	adds	r7, #44	; 0x2c
 800d686:	46bd      	mov	sp, r7
 800d688:	bd90      	pop	{r4, r7, pc}
 800d68a:	bf00      	nop
 800d68c:	014f8b59 	.word	0x014f8b59
 800d690:	00012110 	.word	0x00012110
 800d694:	1fe00fff 	.word	0x1fe00fff

0800d698 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08c      	sub	sp, #48	; 0x30
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d107      	bne.n	800d6c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e08d      	b.n	800d7dc <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	f040 8086 	bne.w	800d7da <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	441a      	add	r2, r3
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d907      	bls.n	800d6f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e074      	b.n	800d7dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2203      	movs	r2, #3
 800d6f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2200      	movs	r2, #0
 800d700:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68ba      	ldr	r2, [r7, #8]
 800d706:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	025a      	lsls	r2, r3, #9
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d714:	2b01      	cmp	r3, #1
 800d716:	d002      	beq.n	800d71e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d71a:	025b      	lsls	r3, r3, #9
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d71e:	f04f 33ff 	mov.w	r3, #4294967295
 800d722:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	025b      	lsls	r3, r3, #9
 800d728:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d72a:	2390      	movs	r3, #144	; 0x90
 800d72c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d72e:	2302      	movs	r3, #2
 800d730:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d732:	2300      	movs	r3, #0
 800d734:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d736:	2300      	movs	r3, #0
 800d738:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f107 0210 	add.w	r2, r7, #16
 800d742:	4611      	mov	r1, r2
 800d744:	4618      	mov	r0, r3
 800d746:	f004 feb7 	bl	80124b8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d758:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	2201      	movs	r2, #1
 800d768:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d90a      	bls.n	800d786 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2282      	movs	r2, #130	; 0x82
 800d774:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d77c:	4618      	mov	r0, r3
 800d77e:	f004 ff0d 	bl	801259c <SDMMC_CmdReadMultiBlock>
 800d782:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d784:	e009      	b.n	800d79a <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2281      	movs	r2, #129	; 0x81
 800d78a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d792:	4618      	mov	r0, r3
 800d794:	f004 fedf 	bl	8012556 <SDMMC_CmdReadSingleBlock>
 800d798:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d012      	beq.n	800d7c6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a0f      	ldr	r2, [pc, #60]	; (800d7e4 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d7a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ae:	431a      	orrs	r2, r3
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	e00a      	b.n	800d7dc <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d7d4:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	e000      	b.n	800d7dc <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d7da:	2302      	movs	r3, #2
  }
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3730      	adds	r7, #48	; 0x30
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	1fe00fff 	.word	0x1fe00fff

0800d7e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08c      	sub	sp, #48	; 0x30
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	60f8      	str	r0, [r7, #12]
 800d7f0:	60b9      	str	r1, [r7, #8]
 800d7f2:	607a      	str	r2, [r7, #4]
 800d7f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d804:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e08d      	b.n	800d92c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b01      	cmp	r3, #1
 800d81a:	f040 8086 	bne.w	800d92a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2200      	movs	r2, #0
 800d822:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	441a      	add	r2, r3
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d82e:	429a      	cmp	r2, r3
 800d830:	d907      	bls.n	800d842 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d836:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d83e:	2301      	movs	r3, #1
 800d840:	e074      	b.n	800d92c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2203      	movs	r2, #3
 800d846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2200      	movs	r2, #0
 800d850:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	68ba      	ldr	r2, [r7, #8]
 800d856:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	025a      	lsls	r2, r3, #9
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	2b01      	cmp	r3, #1
 800d866:	d002      	beq.n	800d86e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86a:	025b      	lsls	r3, r3, #9
 800d86c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d86e:	f04f 33ff 	mov.w	r3, #4294967295
 800d872:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	025b      	lsls	r3, r3, #9
 800d878:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d87a:	2390      	movs	r3, #144	; 0x90
 800d87c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d87e:	2300      	movs	r3, #0
 800d880:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d882:	2300      	movs	r3, #0
 800d884:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d886:	2300      	movs	r3, #0
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f107 0210 	add.w	r2, r7, #16
 800d892:	4611      	mov	r1, r2
 800d894:	4618      	mov	r0, r3
 800d896:	f004 fe0f 	bl	80124b8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8a8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d90a      	bls.n	800d8d6 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	22a0      	movs	r2, #160	; 0xa0
 800d8c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f004 feab 	bl	8012628 <SDMMC_CmdWriteMultiBlock>
 800d8d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d8d4:	e009      	b.n	800d8ea <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	2290      	movs	r2, #144	; 0x90
 800d8da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	f004 fe7d 	bl	80125e2 <SDMMC_CmdWriteSingleBlock>
 800d8e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d012      	beq.n	800d916 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a0f      	ldr	r2, [pc, #60]	; (800d934 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d8f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fe:	431a      	orrs	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2201      	movs	r2, #1
 800d908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e00a      	b.n	800d92c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d924:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	e000      	b.n	800d92c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d92a:	2302      	movs	r3, #2
  }
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3730      	adds	r7, #48	; 0x30
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	1fe00fff 	.word	0x1fe00fff

0800d938 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d94c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d950:	2b00      	cmp	r3, #0
 800d952:	d008      	beq.n	800d966 <HAL_SD_IRQHandler+0x2e>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f003 0308 	and.w	r3, r3, #8
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d003      	beq.n	800d966 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f001 f926 	bl	800ebb0 <SD_Read_IT>
 800d964:	e19a      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d96c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d970:	2b00      	cmp	r3, #0
 800d972:	f000 80ac 	beq.w	800dace <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d97e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	4b59      	ldr	r3, [pc, #356]	; (800daf0 <HAL_SD_IRQHandler+0x1b8>)
 800d98c:	400b      	ands	r3, r1
 800d98e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d99e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	68da      	ldr	r2, [r3, #12]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d9ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f003 0308 	and.w	r3, r3, #8
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d038      	beq.n	800da2c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f003 0302 	and.w	r3, r3, #2
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d104      	bne.n	800d9ce <HAL_SD_IRQHandler+0x96>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f003 0320 	and.w	r3, r3, #32
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d011      	beq.n	800d9f2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f004 fe4c 	bl	8012670 <SDMMC_CmdStopTransfer>
 800d9d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d008      	beq.n	800d9f2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9e4:	68bb      	ldr	r3, [r7, #8]
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 f95b 	bl	800dca8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a3f      	ldr	r2, [pc, #252]	; (800daf4 <HAL_SD_IRQHandler+0x1bc>)
 800d9f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d104      	bne.n	800da1c <HAL_SD_IRQHandler+0xe4>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d003      	beq.n	800da24 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800da1c:	6878      	ldr	r0, [r7, #4]
 800da1e:	f006 fe4d 	bl	80146bc <HAL_SD_RxCpltCallback>
 800da22:	e13b      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f006 fe3f 	bl	80146a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800da2a:	e137      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 8132 	beq.w	800dc9c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2200      	movs	r2, #0
 800da3e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	2200      	movs	r2, #0
 800da46:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2200      	movs	r2, #0
 800da4e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f003 0302 	and.w	r3, r3, #2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d104      	bne.n	800da64 <HAL_SD_IRQHandler+0x12c>
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b00      	cmp	r3, #0
 800da62:	d011      	beq.n	800da88 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f004 fe01 	bl	8012670 <SDMMC_CmdStopTransfer>
 800da6e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d008      	beq.n	800da88 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	431a      	orrs	r2, r3
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f910 	bl	800dca8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f003 0310 	and.w	r3, r3, #16
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d104      	bne.n	800daaa <HAL_SD_IRQHandler+0x172>
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f003 0320 	and.w	r3, r3, #32
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d002      	beq.n	800dab0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f006 fdfc 	bl	80146a8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d105      	bne.n	800dac6 <HAL_SD_IRQHandler+0x18e>
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f003 0302 	and.w	r3, r3, #2
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 80eb 	beq.w	800dc9c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dac6:	6878      	ldr	r0, [r7, #4]
 800dac8:	f006 fdf8 	bl	80146bc <HAL_SD_RxCpltCallback>
}
 800dacc:	e0e6      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d00d      	beq.n	800daf8 <HAL_SD_IRQHandler+0x1c0>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	f003 0308 	and.w	r3, r3, #8
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d008      	beq.n	800daf8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f001 f8a8 	bl	800ec3c <SD_Write_IT>
 800daec:	e0d6      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
 800daee:	bf00      	nop
 800daf0:	ffff3ec5 	.word	0xffff3ec5
 800daf4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dafe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800db02:	2b00      	cmp	r3, #0
 800db04:	f000 809d 	beq.w	800dc42 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d005      	beq.n	800db22 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db1a:	f043 0202 	orr.w	r2, r3, #2
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db28:	f003 0308 	and.w	r3, r3, #8
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d005      	beq.n	800db3c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db34:	f043 0208 	orr.w	r2, r3, #8
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b00      	cmp	r3, #0
 800db48:	d005      	beq.n	800db56 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db4e:	f043 0220 	orr.w	r2, r3, #32
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db5c:	f003 0310 	and.w	r3, r3, #16
 800db60:	2b00      	cmp	r3, #0
 800db62:	d005      	beq.n	800db70 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db68:	f043 0210 	orr.w	r2, r3, #16
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a4b      	ldr	r2, [pc, #300]	; (800dca4 <HAL_SD_IRQHandler+0x36c>)
 800db76:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800db86:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	68da      	ldr	r2, [r3, #12]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db96:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dba6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	68da      	ldr	r2, [r3, #12]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dbb6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f004 fd57 	bl	8012670 <SDMMC_CmdStopTransfer>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc8:	431a      	orrs	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	68da      	ldr	r2, [r3, #12]
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dbdc:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dbe6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f003 0308 	and.w	r3, r3, #8
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00a      	beq.n	800dc08 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f851 	bl	800dca8 <HAL_SD_ErrorCallback>
}
 800dc06:	e049      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d044      	beq.n	800dc9c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d040      	beq.n	800dc9c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dc28:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2201      	movs	r2, #1
 800dc36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f834 	bl	800dca8 <HAL_SD_ErrorCallback>
}
 800dc40:	e02c      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d025      	beq.n	800dc9c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc58:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc60:	f003 0304 	and.w	r3, r3, #4
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d10c      	bne.n	800dc82 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f003 0320 	and.w	r3, r3, #32
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d003      	beq.n	800dc7a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f001 f84a 	bl	800ed0c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800dc78:	e010      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f001 f832 	bl	800ece4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800dc80:	e00c      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f003 0320 	and.w	r3, r3, #32
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d003      	beq.n	800dc94 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f001 f833 	bl	800ecf8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800dc92:	e003      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f001 f81b 	bl	800ecd0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800dc9a:	e7ff      	b.n	800dc9c <HAL_SD_IRQHandler+0x364>
 800dc9c:	bf00      	nop
 800dc9e:	3710      	adds	r7, #16
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	18000f3a 	.word	0x18000f3a

0800dca8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dcb0:	bf00      	nop
 800dcb2:	370c      	adds	r7, #12
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcba:	4770      	bx	lr

0800dcbc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
 800dcc4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcca:	0f9b      	lsrs	r3, r3, #30
 800dccc:	b2da      	uxtb	r2, r3
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcd6:	0e9b      	lsrs	r3, r3, #26
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	f003 030f 	and.w	r3, r3, #15
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dce8:	0e1b      	lsrs	r3, r3, #24
 800dcea:	b2db      	uxtb	r3, r3
 800dcec:	f003 0303 	and.w	r3, r3, #3
 800dcf0:	b2da      	uxtb	r2, r3
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcfa:	0c1b      	lsrs	r3, r3, #16
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd06:	0a1b      	lsrs	r3, r3, #8
 800dd08:	b2da      	uxtb	r2, r3
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd12:	b2da      	uxtb	r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd1c:	0d1b      	lsrs	r3, r3, #20
 800dd1e:	b29a      	uxth	r2, r3
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd28:	0c1b      	lsrs	r3, r3, #16
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	f003 030f 	and.w	r3, r3, #15
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd3a:	0bdb      	lsrs	r3, r3, #15
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	f003 0301 	and.w	r3, r3, #1
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd4c:	0b9b      	lsrs	r3, r3, #14
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	b2da      	uxtb	r2, r3
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd5e:	0b5b      	lsrs	r3, r3, #13
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	f003 0301 	and.w	r3, r3, #1
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd70:	0b1b      	lsrs	r3, r3, #12
 800dd72:	b2db      	uxtb	r3, r3
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	b2da      	uxtb	r2, r3
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2200      	movs	r2, #0
 800dd82:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d163      	bne.n	800de54 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd90:	009a      	lsls	r2, r3, #2
 800dd92:	f640 73fc 	movw	r3, #4092	; 0xffc
 800dd96:	4013      	ands	r3, r2
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dd9c:	0f92      	lsrs	r2, r2, #30
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda8:	0edb      	lsrs	r3, r3, #27
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f003 0307 	and.w	r3, r3, #7
 800ddb0:	b2da      	uxtb	r2, r3
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddba:	0e1b      	lsrs	r3, r3, #24
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	f003 0307 	and.w	r3, r3, #7
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddcc:	0d5b      	lsrs	r3, r3, #21
 800ddce:	b2db      	uxtb	r3, r3
 800ddd0:	f003 0307 	and.w	r3, r3, #7
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddde:	0c9b      	lsrs	r3, r3, #18
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	f003 0307 	and.w	r3, r3, #7
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddf0:	0bdb      	lsrs	r3, r3, #15
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	f003 0307 	and.w	r3, r3, #7
 800ddf8:	b2da      	uxtb	r2, r3
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	691b      	ldr	r3, [r3, #16]
 800de02:	1c5a      	adds	r2, r3, #1
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	7e1b      	ldrb	r3, [r3, #24]
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	f003 0307 	and.w	r3, r3, #7
 800de12:	3302      	adds	r3, #2
 800de14:	2201      	movs	r2, #1
 800de16:	fa02 f303 	lsl.w	r3, r2, r3
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800de1e:	fb03 f202 	mul.w	r2, r3, r2
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	7a1b      	ldrb	r3, [r3, #8]
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 030f 	and.w	r3, r3, #15
 800de30:	2201      	movs	r2, #1
 800de32:	409a      	lsls	r2, r3
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800de40:	0a52      	lsrs	r2, r2, #9
 800de42:	fb03 f202 	mul.w	r2, r3, r2
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de50:	655a      	str	r2, [r3, #84]	; 0x54
 800de52:	e031      	b.n	800deb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d11d      	bne.n	800de98 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de60:	041b      	lsls	r3, r3, #16
 800de62:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de6a:	0c1b      	lsrs	r3, r3, #16
 800de6c:	431a      	orrs	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	691b      	ldr	r3, [r3, #16]
 800de76:	3301      	adds	r3, #1
 800de78:	029a      	lsls	r2, r3, #10
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de8c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	655a      	str	r2, [r3, #84]	; 0x54
 800de96:	e00f      	b.n	800deb8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	4a58      	ldr	r2, [pc, #352]	; (800e000 <HAL_SD_GetCardCSD+0x344>)
 800de9e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dea4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2201      	movs	r2, #1
 800deb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800deb4:	2301      	movs	r3, #1
 800deb6:	e09d      	b.n	800dff4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800debc:	0b9b      	lsrs	r3, r3, #14
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dece:	09db      	lsrs	r3, r3, #7
 800ded0:	b2db      	uxtb	r3, r3
 800ded2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dee6:	b2da      	uxtb	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def0:	0fdb      	lsrs	r3, r3, #31
 800def2:	b2da      	uxtb	r2, r3
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800defc:	0f5b      	lsrs	r3, r3, #29
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f003 0303 	and.w	r3, r3, #3
 800df04:	b2da      	uxtb	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df0e:	0e9b      	lsrs	r3, r3, #26
 800df10:	b2db      	uxtb	r3, r3
 800df12:	f003 0307 	and.w	r3, r3, #7
 800df16:	b2da      	uxtb	r2, r3
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df20:	0d9b      	lsrs	r3, r3, #22
 800df22:	b2db      	uxtb	r3, r3
 800df24:	f003 030f 	and.w	r3, r3, #15
 800df28:	b2da      	uxtb	r2, r3
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df32:	0d5b      	lsrs	r3, r3, #21
 800df34:	b2db      	uxtb	r3, r3
 800df36:	f003 0301 	and.w	r3, r3, #1
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df4e:	0c1b      	lsrs	r3, r3, #16
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0301 	and.w	r3, r3, #1
 800df56:	b2da      	uxtb	r2, r3
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df62:	0bdb      	lsrs	r3, r3, #15
 800df64:	b2db      	uxtb	r3, r3
 800df66:	f003 0301 	and.w	r3, r3, #1
 800df6a:	b2da      	uxtb	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df76:	0b9b      	lsrs	r3, r3, #14
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	b2da      	uxtb	r2, r3
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df8a:	0b5b      	lsrs	r3, r3, #13
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	b2da      	uxtb	r2, r3
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df9e:	0b1b      	lsrs	r3, r3, #12
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	f003 0301 	and.w	r3, r3, #1
 800dfa6:	b2da      	uxtb	r2, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfb2:	0a9b      	lsrs	r3, r3, #10
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 0303 	and.w	r3, r3, #3
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfc6:	0a1b      	lsrs	r3, r3, #8
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	f003 0303 	and.w	r3, r3, #3
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfda:	085b      	lsrs	r3, r3, #1
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	2201      	movs	r2, #1
 800dfee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	370c      	adds	r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr
 800e000:	1fe00fff 	.word	0x1fe00fff

0800e004 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b094      	sub	sp, #80	; 0x50
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	2b03      	cmp	r3, #3
 800e01e:	d101      	bne.n	800e024 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	e0a7      	b.n	800e174 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e024:	f107 0308 	add.w	r3, r7, #8
 800e028:	4619      	mov	r1, r3
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 fb62 	bl	800e6f4 <SD_SendSDStatus>
 800e030:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e034:	2b00      	cmp	r3, #0
 800e036:	d011      	beq.n	800e05c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	4a4f      	ldr	r2, [pc, #316]	; (800e17c <HAL_SD_GetCardStatus+0x178>)
 800e03e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e046:	431a      	orrs	r2, r3
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e05a:	e070      	b.n	800e13e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	099b      	lsrs	r3, r3, #6
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0303 	and.w	r3, r3, #3
 800e066:	b2da      	uxtb	r2, r3
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	095b      	lsrs	r3, r3, #5
 800e070:	b2db      	uxtb	r3, r3
 800e072:	f003 0301 	and.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	0a1b      	lsrs	r3, r3, #8
 800e080:	b29b      	uxth	r3, r3
 800e082:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e086:	b29a      	uxth	r2, r3
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	0e1b      	lsrs	r3, r3, #24
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	4313      	orrs	r3, r2
 800e090:	b29a      	uxth	r2, r3
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	061a      	lsls	r2, r3, #24
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e0a2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	0a1b      	lsrs	r3, r3, #8
 800e0a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0ac:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	0e1b      	lsrs	r3, r3, #24
 800e0b2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	0a1b      	lsrs	r3, r3, #8
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	0d1b      	lsrs	r3, r3, #20
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	f003 030f 	and.w	r3, r3, #15
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	0c1b      	lsrs	r3, r3, #16
 800e0de:	b29b      	uxth	r3, r3
 800e0e0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	0a9b      	lsrs	r3, r3, #10
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e100:	b2da      	uxtb	r2, r3
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	0a1b      	lsrs	r3, r3, #8
 800e10a:	b2db      	uxtb	r3, r3
 800e10c:	f003 0303 	and.w	r3, r3, #3
 800e110:	b2da      	uxtb	r2, r3
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	091b      	lsrs	r3, r3, #4
 800e11a:	b2db      	uxtb	r3, r3
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	b2da      	uxtb	r2, r3
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	f003 030f 	and.w	r3, r3, #15
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e134:	69bb      	ldr	r3, [r7, #24]
 800e136:	0e1b      	lsrs	r3, r3, #24
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e146:	4618      	mov	r0, r3
 800e148:	f004 f9e2 	bl	8012510 <SDMMC_CmdBlockLength>
 800e14c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e14e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e150:	2b00      	cmp	r3, #0
 800e152:	d00d      	beq.n	800e170 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4a08      	ldr	r2, [pc, #32]	; (800e17c <HAL_SD_GetCardStatus+0x178>)
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e160:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e16a:	2301      	movs	r3, #1
 800e16c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e170:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e174:	4618      	mov	r0, r3
 800e176:	3750      	adds	r7, #80	; 0x50
 800e178:	46bd      	mov	sp, r7
 800e17a:	bd80      	pop	{r7, pc}
 800e17c:	1fe00fff 	.word	0x1fe00fff

0800e180 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e180:	b480      	push	{r7}
 800e182:	b083      	sub	sp, #12
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
 800e188:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	370c      	adds	r7, #12
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr

0800e1d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e1d8:	b590      	push	{r4, r7, lr}
 800e1da:	b08d      	sub	sp, #52	; 0x34
 800e1dc:	af02      	add	r7, sp, #8
 800e1de:	6078      	str	r0, [r7, #4]
 800e1e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2203      	movs	r2, #3
 800e1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f4:	2b03      	cmp	r3, #3
 800e1f6:	d02e      	beq.n	800e256 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e1fe:	d106      	bne.n	800e20e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	635a      	str	r2, [r3, #52]	; 0x34
 800e20c:	e029      	b.n	800e262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e214:	d10a      	bne.n	800e22c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fb64 	bl	800e8e4 <SD_WideBus_Enable>
 800e21c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	431a      	orrs	r2, r3
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	635a      	str	r2, [r3, #52]	; 0x34
 800e22a:	e01a      	b.n	800e262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10a      	bne.n	800e248 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fba1 	bl	800e97a <SD_WideBus_Disable>
 800e238:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e23e:	6a3b      	ldr	r3, [r7, #32]
 800e240:	431a      	orrs	r2, r3
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	635a      	str	r2, [r3, #52]	; 0x34
 800e246:	e00c      	b.n	800e262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	635a      	str	r2, [r3, #52]	; 0x34
 800e254:	e005      	b.n	800e262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e266:	2b00      	cmp	r3, #0
 800e268:	d007      	beq.n	800e27a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4a5f      	ldr	r2, [pc, #380]	; (800e3ec <HAL_SD_ConfigWideBusOperation+0x214>)
 800e270:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e272:	2301      	movs	r3, #1
 800e274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e278:	e096      	b.n	800e3a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e27a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e27e:	f04f 0100 	mov.w	r1, #0
 800e282:	f7fd fea3 	bl	800bfcc <HAL_RCCEx_GetPeriphCLKFreq>
 800e286:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e288:	69fb      	ldr	r3, [r7, #28]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f000 8083 	beq.w	800e396 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	685b      	ldr	r3, [r3, #4]
 800e294:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	695a      	ldr	r2, [r3, #20]
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	4950      	ldr	r1, [pc, #320]	; (800e3f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2ae:	fba1 1303 	umull	r1, r3, r1, r3
 800e2b2:	0e1b      	lsrs	r3, r3, #24
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d303      	bcc.n	800e2c0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	61bb      	str	r3, [r7, #24]
 800e2be:	e05a      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e2c8:	d103      	bne.n	800e2d2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	61bb      	str	r3, [r7, #24]
 800e2d0:	e051      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2da:	d126      	bne.n	800e32a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	695b      	ldr	r3, [r3, #20]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10e      	bne.n	800e302 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	4a43      	ldr	r2, [pc, #268]	; (800e3f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d906      	bls.n	800e2fa <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e2ec:	69fb      	ldr	r3, [r7, #28]
 800e2ee:	4a40      	ldr	r2, [pc, #256]	; (800e3f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e2f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f4:	0e5b      	lsrs	r3, r3, #25
 800e2f6:	61bb      	str	r3, [r7, #24]
 800e2f8:	e03d      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	61bb      	str	r3, [r7, #24]
 800e300:	e039      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	005b      	lsls	r3, r3, #1
 800e308:	69fa      	ldr	r2, [r7, #28]
 800e30a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e30e:	4a39      	ldr	r2, [pc, #228]	; (800e3f4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d906      	bls.n	800e322 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	4a36      	ldr	r2, [pc, #216]	; (800e3f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e318:	fba2 2303 	umull	r2, r3, r2, r3
 800e31c:	0e5b      	lsrs	r3, r3, #25
 800e31e:	61bb      	str	r3, [r7, #24]
 800e320:	e029      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	695b      	ldr	r3, [r3, #20]
 800e326:	61bb      	str	r3, [r7, #24]
 800e328:	e025      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	695b      	ldr	r3, [r3, #20]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10e      	bne.n	800e350 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e332:	69fb      	ldr	r3, [r7, #28]
 800e334:	4a30      	ldr	r2, [pc, #192]	; (800e3f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d906      	bls.n	800e348 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e33a:	69fb      	ldr	r3, [r7, #28]
 800e33c:	4a2c      	ldr	r2, [pc, #176]	; (800e3f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e33e:	fba2 2303 	umull	r2, r3, r2, r3
 800e342:	0e1b      	lsrs	r3, r3, #24
 800e344:	61bb      	str	r3, [r7, #24]
 800e346:	e016      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	61bb      	str	r3, [r7, #24]
 800e34e:	e012      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	695b      	ldr	r3, [r3, #20]
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	69fa      	ldr	r2, [r7, #28]
 800e358:	fbb2 f3f3 	udiv	r3, r2, r3
 800e35c:	4a26      	ldr	r2, [pc, #152]	; (800e3f8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d906      	bls.n	800e370 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	4a22      	ldr	r2, [pc, #136]	; (800e3f0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e366:	fba2 2303 	umull	r2, r3, r2, r3
 800e36a:	0e1b      	lsrs	r3, r3, #24
 800e36c:	61bb      	str	r3, [r7, #24]
 800e36e:	e002      	b.n	800e376 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	695b      	ldr	r3, [r3, #20]
 800e374:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	681c      	ldr	r4, [r3, #0]
 800e37a:	466a      	mov	r2, sp
 800e37c:	f107 0314 	add.w	r3, r7, #20
 800e380:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e384:	e882 0003 	stmia.w	r2, {r0, r1}
 800e388:	f107 0308 	add.w	r3, r7, #8
 800e38c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e38e:	4620      	mov	r0, r4
 800e390:	f003 ffe0 	bl	8012354 <SDMMC_Init>
 800e394:	e008      	b.n	800e3a8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e39a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f004 f8ad 	bl	8012510 <SDMMC_CmdBlockLength>
 800e3b6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3b8:	6a3b      	ldr	r3, [r7, #32]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00c      	beq.n	800e3d8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a0a      	ldr	r2, [pc, #40]	; (800e3ec <HAL_SD_ConfigWideBusOperation+0x214>)
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3ca:	6a3b      	ldr	r3, [r7, #32]
 800e3cc:	431a      	orrs	r2, r3
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	372c      	adds	r7, #44	; 0x2c
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd90      	pop	{r4, r7, pc}
 800e3ec:	1fe00fff 	.word	0x1fe00fff
 800e3f0:	55e63b89 	.word	0x55e63b89
 800e3f4:	02faf080 	.word	0x02faf080
 800e3f8:	017d7840 	.word	0x017d7840

0800e3fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b086      	sub	sp, #24
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e404:	2300      	movs	r3, #0
 800e406:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e408:	f107 030c 	add.w	r3, r7, #12
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fa40 	bl	800e894 <SD_SendStatus>
 800e414:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d005      	beq.n	800e428 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	431a      	orrs	r2, r3
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	0a5b      	lsrs	r3, r3, #9
 800e42c:	f003 030f 	and.w	r3, r3, #15
 800e430:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e432:	693b      	ldr	r3, [r7, #16]
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b090      	sub	sp, #64	; 0x40
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e444:	2300      	movs	r3, #0
 800e446:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e448:	f7f5 fd34 	bl	8003eb4 <HAL_GetTick>
 800e44c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	4618      	mov	r0, r3
 800e454:	f003 ffd7 	bl	8012406 <SDMMC_GetPowerState>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d102      	bne.n	800e464 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e45e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e462:	e0b5      	b.n	800e5d0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e468:	2b03      	cmp	r3, #3
 800e46a:	d02e      	beq.n	800e4ca <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4618      	mov	r0, r3
 800e472:	f004 fa22 	bl	80128ba <SDMMC_CmdSendCID>
 800e476:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <SD_InitCard+0x46>
    {
      return errorstate;
 800e47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e480:	e0a6      	b.n	800e5d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f004 f802 	bl	8012492 <SDMMC_GetResponse>
 800e48e:	4602      	mov	r2, r0
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2104      	movs	r1, #4
 800e49a:	4618      	mov	r0, r3
 800e49c:	f003 fff9 	bl	8012492 <SDMMC_GetResponse>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	2108      	movs	r1, #8
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f003 fff0 	bl	8012492 <SDMMC_GetResponse>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	210c      	movs	r1, #12
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f003 ffe7 	bl	8012492 <SDMMC_GetResponse>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	d01d      	beq.n	800e50e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e4d2:	e019      	b.n	800e508 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	f107 020a 	add.w	r2, r7, #10
 800e4dc:	4611      	mov	r1, r2
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f004 fa2a 	bl	8012938 <SDMMC_CmdSetRelAdd>
 800e4e4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d001      	beq.n	800e4f0 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4ee:	e06f      	b.n	800e5d0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e4f0:	f7f5 fce0 	bl	8003eb4 <HAL_GetTick>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	f241 3287 	movw	r2, #4999	; 0x1387
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d902      	bls.n	800e508 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e502:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e506:	e063      	b.n	800e5d0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e508:	897b      	ldrh	r3, [r7, #10]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d0e2      	beq.n	800e4d4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e512:	2b03      	cmp	r3, #3
 800e514:	d036      	beq.n	800e584 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e516:	897b      	ldrh	r3, [r7, #10]
 800e518:	461a      	mov	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e526:	041b      	lsls	r3, r3, #16
 800e528:	4619      	mov	r1, r3
 800e52a:	4610      	mov	r0, r2
 800e52c:	f004 f9e4 	bl	80128f8 <SDMMC_CmdSendCSD>
 800e530:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <SD_InitCard+0x100>
    {
      return errorstate;
 800e538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e53a:	e049      	b.n	800e5d0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2100      	movs	r1, #0
 800e542:	4618      	mov	r0, r3
 800e544:	f003 ffa5 	bl	8012492 <SDMMC_GetResponse>
 800e548:	4602      	mov	r2, r0
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	2104      	movs	r1, #4
 800e554:	4618      	mov	r0, r3
 800e556:	f003 ff9c 	bl	8012492 <SDMMC_GetResponse>
 800e55a:	4602      	mov	r2, r0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2108      	movs	r1, #8
 800e566:	4618      	mov	r0, r3
 800e568:	f003 ff93 	bl	8012492 <SDMMC_GetResponse>
 800e56c:	4602      	mov	r2, r0
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	210c      	movs	r1, #12
 800e578:	4618      	mov	r0, r3
 800e57a:	f003 ff8a 	bl	8012492 <SDMMC_GetResponse>
 800e57e:	4602      	mov	r2, r0
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2104      	movs	r1, #4
 800e58a:	4618      	mov	r0, r3
 800e58c:	f003 ff81 	bl	8012492 <SDMMC_GetResponse>
 800e590:	4603      	mov	r3, r0
 800e592:	0d1a      	lsrs	r2, r3, #20
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e598:	f107 030c 	add.w	r3, r7, #12
 800e59c:	4619      	mov	r1, r3
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff fb8c 	bl	800dcbc <HAL_SD_GetCardCSD>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d002      	beq.n	800e5b0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e5aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e5ae:	e00f      	b.n	800e5d0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5b8:	041b      	lsls	r3, r3, #16
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f004 f893 	bl	80126e8 <SDMMC_CmdSelDesel>
 800e5c2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <SD_InitCard+0x192>
  {
    return errorstate;
 800e5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5cc:	e000      	b.n	800e5d0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3740      	adds	r7, #64	; 0x40
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f004 f89c 	bl	801272e <SDMMC_CmdGoIdleState>
 800e5f6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	e072      	b.n	800e6e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	4618      	mov	r0, r3
 800e608:	f004 f8af 	bl	801276a <SDMMC_CmdOperCond>
 800e60c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e614:	d10d      	bne.n	800e632 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2200      	movs	r2, #0
 800e61a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4618      	mov	r0, r3
 800e622:	f004 f884 	bl	801272e <SDMMC_CmdGoIdleState>
 800e626:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <SD_PowerON+0x60>
    {
      return errorstate;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	e05a      	b.n	800e6e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2201      	movs	r2, #1
 800e636:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	d137      	bne.n	800e6b0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2100      	movs	r1, #0
 800e646:	4618      	mov	r0, r3
 800e648:	f004 f8af 	bl	80127aa <SDMMC_CmdAppCommand>
 800e64c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d02d      	beq.n	800e6b0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e658:	e046      	b.n	800e6e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2100      	movs	r1, #0
 800e660:	4618      	mov	r0, r3
 800e662:	f004 f8a2 	bl	80127aa <SDMMC_CmdAppCommand>
 800e666:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	e03a      	b.n	800e6e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	491e      	ldr	r1, [pc, #120]	; (800e6f0 <SD_PowerON+0x118>)
 800e678:	4618      	mov	r0, r3
 800e67a:	f004 f8b9 	bl	80127f0 <SDMMC_CmdAppOperCommand>
 800e67e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e686:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e68a:	e02d      	b.n	800e6e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2100      	movs	r1, #0
 800e692:	4618      	mov	r0, r3
 800e694:	f003 fefd 	bl	8012492 <SDMMC_GetResponse>
 800e698:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	0fdb      	lsrs	r3, r3, #31
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d101      	bne.n	800e6a6 <SD_PowerON+0xce>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e000      	b.n	800e6a8 <SD_PowerON+0xd0>
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	613b      	str	r3, [r7, #16]

    count++;
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	3301      	adds	r3, #1
 800e6ae:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d802      	bhi.n	800e6c0 <SD_PowerON+0xe8>
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d0cc      	beq.n	800e65a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d902      	bls.n	800e6d0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e6ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6ce:	e00b      	b.n	800e6e8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d002      	beq.n	800e6e6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2201      	movs	r2, #1
 800e6e4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e6e6:	2300      	movs	r3, #0
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	c1100000 	.word	0xc1100000

0800e6f4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b08c      	sub	sp, #48	; 0x30
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6fe:	f7f5 fbd9 	bl	8003eb4 <HAL_GetTick>
 800e702:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e704:	683b      	ldr	r3, [r7, #0]
 800e706:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	2100      	movs	r1, #0
 800e70e:	4618      	mov	r0, r3
 800e710:	f003 febf 	bl	8012492 <SDMMC_GetResponse>
 800e714:	4603      	mov	r3, r0
 800e716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e71a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e71e:	d102      	bne.n	800e726 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e720:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e724:	e0b0      	b.n	800e888 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	2140      	movs	r1, #64	; 0x40
 800e72c:	4618      	mov	r0, r3
 800e72e:	f003 feef 	bl	8012510 <SDMMC_CmdBlockLength>
 800e732:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e742:	6a3b      	ldr	r3, [r7, #32]
 800e744:	e0a0      	b.n	800e888 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e74e:	041b      	lsls	r3, r3, #16
 800e750:	4619      	mov	r1, r3
 800e752:	4610      	mov	r0, r2
 800e754:	f004 f829 	bl	80127aa <SDMMC_CmdAppCommand>
 800e758:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e75a:	6a3b      	ldr	r3, [r7, #32]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d005      	beq.n	800e76c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e768:	6a3b      	ldr	r3, [r7, #32]
 800e76a:	e08d      	b.n	800e888 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e76c:	f04f 33ff 	mov.w	r3, #4294967295
 800e770:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e772:	2340      	movs	r3, #64	; 0x40
 800e774:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e776:	2360      	movs	r3, #96	; 0x60
 800e778:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e77a:	2302      	movs	r3, #2
 800e77c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e77e:	2300      	movs	r3, #0
 800e780:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e782:	2301      	movs	r3, #1
 800e784:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f107 0208 	add.w	r2, r7, #8
 800e78e:	4611      	mov	r1, r2
 800e790:	4618      	mov	r0, r3
 800e792:	f003 fe91 	bl	80124b8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f004 f911 	bl	80129c2 <SDMMC_CmdStatusRegister>
 800e7a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7a2:	6a3b      	ldr	r3, [r7, #32]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d02b      	beq.n	800e800 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	e069      	b.n	800e888 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d013      	beq.n	800e7ea <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7c6:	e00d      	b.n	800e7e4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f003 fdeb 	bl	80123a8 <SDMMC_ReadFIFO>
 800e7d2:	4602      	mov	r2, r0
 800e7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d6:	601a      	str	r2, [r3, #0]
        pData++;
 800e7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7da:	3304      	adds	r3, #4
 800e7dc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	2b07      	cmp	r3, #7
 800e7e8:	d9ee      	bls.n	800e7c8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e7ea:	f7f5 fb63 	bl	8003eb4 <HAL_GetTick>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	1ad3      	subs	r3, r2, r3
 800e7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f8:	d102      	bne.n	800e800 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e7fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e7fe:	e043      	b.n	800e888 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e806:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0d2      	beq.n	800e7b4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e814:	f003 0308 	and.w	r3, r3, #8
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d001      	beq.n	800e820 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e81c:	2308      	movs	r3, #8
 800e81e:	e033      	b.n	800e888 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e826:	f003 0302 	and.w	r3, r3, #2
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e82e:	2302      	movs	r3, #2
 800e830:	e02a      	b.n	800e888 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e838:	f003 0320 	and.w	r3, r3, #32
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d017      	beq.n	800e870 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e840:	2320      	movs	r3, #32
 800e842:	e021      	b.n	800e888 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4618      	mov	r0, r3
 800e84a:	f003 fdad 	bl	80123a8 <SDMMC_ReadFIFO>
 800e84e:	4602      	mov	r2, r0
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	601a      	str	r2, [r3, #0]
    pData++;
 800e854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e856:	3304      	adds	r3, #4
 800e858:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e85a:	f7f5 fb2b 	bl	8003eb4 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e868:	d102      	bne.n	800e870 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e86a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e86e:	e00b      	b.n	800e888 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1e2      	bne.n	800e844 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	4a03      	ldr	r2, [pc, #12]	; (800e890 <SD_SendSDStatus+0x19c>)
 800e884:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3730      	adds	r7, #48	; 0x30
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	18000f3a 	.word	0x18000f3a

0800e894 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b084      	sub	sp, #16
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d102      	bne.n	800e8aa <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e8a8:	e018      	b.n	800e8dc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b2:	041b      	lsls	r3, r3, #16
 800e8b4:	4619      	mov	r1, r3
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	f004 f860 	bl	801297c <SDMMC_CmdSendStatus>
 800e8bc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d001      	beq.n	800e8c8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	e009      	b.n	800e8dc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f003 fddf 	bl	8012492 <SDMMC_GetResponse>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e8da:	2300      	movs	r3, #0
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	60fb      	str	r3, [r7, #12]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f003 fdc9 	bl	8012492 <SDMMC_GetResponse>
 800e900:	4603      	mov	r3, r0
 800e902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e90a:	d102      	bne.n	800e912 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e90c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e910:	e02f      	b.n	800e972 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e912:	f107 030c 	add.w	r3, r7, #12
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f879 	bl	800ea10 <SD_FindSCR>
 800e91e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d001      	beq.n	800e92a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e926:	697b      	ldr	r3, [r7, #20]
 800e928:	e023      	b.n	800e972 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e930:	2b00      	cmp	r3, #0
 800e932:	d01c      	beq.n	800e96e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681a      	ldr	r2, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e93c:	041b      	lsls	r3, r3, #16
 800e93e:	4619      	mov	r1, r3
 800e940:	4610      	mov	r0, r2
 800e942:	f003 ff32 	bl	80127aa <SDMMC_CmdAppCommand>
 800e946:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d001      	beq.n	800e952 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	e00f      	b.n	800e972 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2102      	movs	r1, #2
 800e958:	4618      	mov	r0, r3
 800e95a:	f003 ff69 	bl	8012830 <SDMMC_CmdBusWidth>
 800e95e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d001      	beq.n	800e96a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	e003      	b.n	800e972 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e96a:	2300      	movs	r3, #0
 800e96c:	e001      	b.n	800e972 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e96e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e972:	4618      	mov	r0, r3
 800e974:	3718      	adds	r7, #24
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b086      	sub	sp, #24
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e982:	2300      	movs	r3, #0
 800e984:	60fb      	str	r3, [r7, #12]
 800e986:	2300      	movs	r3, #0
 800e988:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2100      	movs	r1, #0
 800e990:	4618      	mov	r0, r3
 800e992:	f003 fd7e 	bl	8012492 <SDMMC_GetResponse>
 800e996:	4603      	mov	r3, r0
 800e998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e99c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9a0:	d102      	bne.n	800e9a8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9a6:	e02f      	b.n	800ea08 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9a8:	f107 030c 	add.w	r3, r7, #12
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	6878      	ldr	r0, [r7, #4]
 800e9b0:	f000 f82e 	bl	800ea10 <SD_FindSCR>
 800e9b4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e9b6:	697b      	ldr	r3, [r7, #20]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d001      	beq.n	800e9c0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	e023      	b.n	800ea08 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01c      	beq.n	800ea04 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681a      	ldr	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9d2:	041b      	lsls	r3, r3, #16
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	f003 fee7 	bl	80127aa <SDMMC_CmdAppCommand>
 800e9dc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	e00f      	b.n	800ea08 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2100      	movs	r1, #0
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f003 ff1e 	bl	8012830 <SDMMC_CmdBusWidth>
 800e9f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	e003      	b.n	800ea08 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea00:	2300      	movs	r3, #0
 800ea02:	e001      	b.n	800ea08 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3718      	adds	r7, #24
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b08e      	sub	sp, #56	; 0x38
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ea1a:	f7f5 fa4b 	bl	8003eb4 <HAL_GetTick>
 800ea1e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ea20:	2300      	movs	r3, #0
 800ea22:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ea24:	2300      	movs	r3, #0
 800ea26:	60bb      	str	r3, [r7, #8]
 800ea28:	2300      	movs	r3, #0
 800ea2a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2108      	movs	r1, #8
 800ea36:	4618      	mov	r0, r3
 800ea38:	f003 fd6a 	bl	8012510 <SDMMC_CmdBlockLength>
 800ea3c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d001      	beq.n	800ea48 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	e0ad      	b.n	800eba4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681a      	ldr	r2, [r3, #0]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea50:	041b      	lsls	r3, r3, #16
 800ea52:	4619      	mov	r1, r3
 800ea54:	4610      	mov	r0, r2
 800ea56:	f003 fea8 	bl	80127aa <SDMMC_CmdAppCommand>
 800ea5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d001      	beq.n	800ea66 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	e09e      	b.n	800eba4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea66:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea6c:	2308      	movs	r3, #8
 800ea6e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ea70:	2330      	movs	r3, #48	; 0x30
 800ea72:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ea74:	2302      	movs	r3, #2
 800ea76:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f107 0210 	add.w	r2, r7, #16
 800ea88:	4611      	mov	r1, r2
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f003 fd14 	bl	80124b8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f003 feee 	bl	8012876 <SDMMC_CmdSendSCR>
 800ea9a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d027      	beq.n	800eaf2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	e07e      	b.n	800eba4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d113      	bne.n	800eadc <SD_FindSCR+0xcc>
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d110      	bne.n	800eadc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f003 fc72 	bl	80123a8 <SDMMC_ReadFIFO>
 800eac4:	4603      	mov	r3, r0
 800eac6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4618      	mov	r0, r3
 800eace:	f003 fc6b 	bl	80123a8 <SDMMC_ReadFIFO>
 800ead2:	4603      	mov	r3, r0
 800ead4:	60fb      	str	r3, [r7, #12]
      index++;
 800ead6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ead8:	3301      	adds	r3, #1
 800eada:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eadc:	f7f5 f9ea 	bl	8003eb4 <HAL_GetTick>
 800eae0:	4602      	mov	r2, r0
 800eae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae4:	1ad3      	subs	r3, r2, r3
 800eae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaea:	d102      	bne.n	800eaf2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eaec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eaf0:	e058      	b.n	800eba4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaf8:	f240 532a 	movw	r3, #1322	; 0x52a
 800eafc:	4013      	ands	r3, r2
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d0d1      	beq.n	800eaa6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb08:	f003 0308 	and.w	r3, r3, #8
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d005      	beq.n	800eb1c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	2208      	movs	r2, #8
 800eb16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eb18:	2308      	movs	r3, #8
 800eb1a:	e043      	b.n	800eba4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb22:	f003 0302 	and.w	r3, r3, #2
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d005      	beq.n	800eb36 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2202      	movs	r2, #2
 800eb30:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb32:	2302      	movs	r3, #2
 800eb34:	e036      	b.n	800eba4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb3c:	f003 0320 	and.w	r3, r3, #32
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d005      	beq.n	800eb50 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2220      	movs	r2, #32
 800eb4a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb4c:	2320      	movs	r3, #32
 800eb4e:	e029      	b.n	800eba4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a15      	ldr	r2, [pc, #84]	; (800ebac <SD_FindSCR+0x19c>)
 800eb56:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	061a      	lsls	r2, r3, #24
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	021b      	lsls	r3, r3, #8
 800eb60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb64:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	0a1b      	lsrs	r3, r3, #8
 800eb6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb6e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	0e1b      	lsrs	r3, r3, #24
 800eb74:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800eb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb78:	601a      	str	r2, [r3, #0]
    scr++;
 800eb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	061a      	lsls	r2, r3, #24
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	021b      	lsls	r3, r3, #8
 800eb88:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb8c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	0a1b      	lsrs	r3, r3, #8
 800eb92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb96:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	0e1b      	lsrs	r3, r3, #24
 800eb9c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800eb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eba2:	2300      	movs	r3, #0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3738      	adds	r7, #56	; 0x38
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	18000f3a 	.word	0x18000f3a

0800ebb0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebc2:	2b1f      	cmp	r3, #31
 800ebc4:	d936      	bls.n	800ec34 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	617b      	str	r3, [r7, #20]
 800ebca:	e027      	b.n	800ec1c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f003 fbe9 	bl	80123a8 <SDMMC_ReadFIFO>
 800ebd6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	b2da      	uxtb	r2, r3
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	0a1b      	lsrs	r3, r3, #8
 800ebea:	b2da      	uxtb	r2, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	0c1b      	lsrs	r3, r3, #16
 800ebfa:	b2da      	uxtb	r2, r3
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	3301      	adds	r3, #1
 800ec04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	0e1b      	lsrs	r3, r3, #24
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	3301      	adds	r3, #1
 800ec14:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	3301      	adds	r3, #1
 800ec1a:	617b      	str	r3, [r7, #20]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2b07      	cmp	r3, #7
 800ec20:	d9d4      	bls.n	800ebcc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	693a      	ldr	r2, [r7, #16]
 800ec26:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec2c:	f1a3 0220 	sub.w	r2, r3, #32
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800ec34:	bf00      	nop
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	69db      	ldr	r3, [r3, #28]
 800ec48:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a1b      	ldr	r3, [r3, #32]
 800ec4e:	2b1f      	cmp	r3, #31
 800ec50:	d93a      	bls.n	800ecc8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]
 800ec56:	e02b      	b.n	800ecb0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	781b      	ldrb	r3, [r3, #0]
 800ec5c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	3301      	adds	r3, #1
 800ec62:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	021a      	lsls	r2, r3, #8
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	3301      	adds	r3, #1
 800ec74:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	781b      	ldrb	r3, [r3, #0]
 800ec7a:	041a      	lsls	r2, r3, #16
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	3301      	adds	r3, #1
 800ec86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	061a      	lsls	r2, r3, #24
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	3301      	adds	r3, #1
 800ec98:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	f107 020c 	add.w	r2, r7, #12
 800eca2:	4611      	mov	r1, r2
 800eca4:	4618      	mov	r0, r3
 800eca6:	f003 fb8c 	bl	80123c2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	3301      	adds	r3, #1
 800ecae:	617b      	str	r3, [r7, #20]
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	2b07      	cmp	r3, #7
 800ecb4:	d9d0      	bls.n	800ec58 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	693a      	ldr	r2, [r7, #16]
 800ecba:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a1b      	ldr	r3, [r3, #32]
 800ecc0:	f1a3 0220 	sub.w	r2, r3, #32
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	621a      	str	r2, [r3, #32]
  }
}
 800ecc8:	bf00      	nop
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ecd8:	bf00      	nop
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ecec:	bf00      	nop
 800ecee:	370c      	adds	r7, #12
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800ed14:	bf00      	nop
 800ed16:	370c      	adds	r7, #12
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr

0800ed20 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d101      	bne.n	800ed32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	e10f      	b.n	800ef52 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a87      	ldr	r2, [pc, #540]	; (800ef5c <HAL_SPI_Init+0x23c>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00f      	beq.n	800ed62 <HAL_SPI_Init+0x42>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	4a86      	ldr	r2, [pc, #536]	; (800ef60 <HAL_SPI_Init+0x240>)
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d00a      	beq.n	800ed62 <HAL_SPI_Init+0x42>
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a84      	ldr	r2, [pc, #528]	; (800ef64 <HAL_SPI_Init+0x244>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d005      	beq.n	800ed62 <HAL_SPI_Init+0x42>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	2b0f      	cmp	r3, #15
 800ed5c:	d901      	bls.n	800ed62 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e0f7      	b.n	800ef52 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f000 fd5a 	bl	800f81c <SPI_GetPacketSize>
 800ed68:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	4a7b      	ldr	r2, [pc, #492]	; (800ef5c <HAL_SPI_Init+0x23c>)
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d00c      	beq.n	800ed8e <HAL_SPI_Init+0x6e>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	4a79      	ldr	r2, [pc, #484]	; (800ef60 <HAL_SPI_Init+0x240>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d007      	beq.n	800ed8e <HAL_SPI_Init+0x6e>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	4a78      	ldr	r2, [pc, #480]	; (800ef64 <HAL_SPI_Init+0x244>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d002      	beq.n	800ed8e <HAL_SPI_Init+0x6e>
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b08      	cmp	r3, #8
 800ed8c:	d811      	bhi.n	800edb2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ed92:	4a72      	ldr	r2, [pc, #456]	; (800ef5c <HAL_SPI_Init+0x23c>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d009      	beq.n	800edac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	4a70      	ldr	r2, [pc, #448]	; (800ef60 <HAL_SPI_Init+0x240>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d004      	beq.n	800edac <HAL_SPI_Init+0x8c>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	4a6f      	ldr	r2, [pc, #444]	; (800ef64 <HAL_SPI_Init+0x244>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d104      	bne.n	800edb6 <HAL_SPI_Init+0x96>
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	2b10      	cmp	r3, #16
 800edb0:	d901      	bls.n	800edb6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	e0cd      	b.n	800ef52 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d106      	bne.n	800edd0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7f4 f9fa 	bl	80031c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2202      	movs	r2, #2
 800edd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	f022 0201 	bic.w	r2, r2, #1
 800ede6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	689b      	ldr	r3, [r3, #8]
 800edee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800edf2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	699b      	ldr	r3, [r3, #24]
 800edf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800edfc:	d119      	bne.n	800ee32 <HAL_SPI_Init+0x112>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee06:	d103      	bne.n	800ee10 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d008      	beq.n	800ee22 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10c      	bne.n	800ee32 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ee1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee20:	d107      	bne.n	800ee32 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ee30:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d00f      	beq.n	800ee5e <HAL_SPI_Init+0x13e>
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	2b06      	cmp	r3, #6
 800ee44:	d90b      	bls.n	800ee5e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	430a      	orrs	r2, r1
 800ee5a:	601a      	str	r2, [r3, #0]
 800ee5c:	e007      	b.n	800ee6e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ee6c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	69da      	ldr	r2, [r3, #28]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee76:	431a      	orrs	r2, r3
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	431a      	orrs	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee80:	ea42 0103 	orr.w	r1, r2, r3
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68da      	ldr	r2, [r3, #12]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee98:	431a      	orrs	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	699b      	ldr	r3, [r3, #24]
 800eea4:	431a      	orrs	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	691b      	ldr	r3, [r3, #16]
 800eeaa:	431a      	orrs	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	431a      	orrs	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	431a      	orrs	r2, r3
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	431a      	orrs	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eec2:	431a      	orrs	r2, r3
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	689b      	ldr	r3, [r3, #8]
 800eec8:	431a      	orrs	r2, r3
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eece:	ea42 0103 	orr.w	r1, r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	430a      	orrs	r2, r1
 800eedc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d113      	bne.n	800ef0e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eef8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	689b      	ldr	r3, [r3, #8]
 800ef00:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ef0c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	f022 0201 	bic.w	r2, r2, #1
 800ef1c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d00a      	beq.n	800ef40 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	430a      	orrs	r2, r1
 800ef3e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	2200      	movs	r2, #0
 800ef44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ef50:	2300      	movs	r3, #0
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3710      	adds	r7, #16
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	40013000 	.word	0x40013000
 800ef60:	40003800 	.word	0x40003800
 800ef64:	40003c00 	.word	0x40003c00

0800ef68 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b08a      	sub	sp, #40	; 0x28
 800ef6c:	af02      	add	r7, sp, #8
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	603b      	str	r3, [r7, #0]
 800ef74:	4613      	mov	r3, r2
 800ef76:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	3320      	adds	r3, #32
 800ef7e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef80:	2300      	movs	r3, #0
 800ef82:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef8a:	2b01      	cmp	r3, #1
 800ef8c:	d101      	bne.n	800ef92 <HAL_SPI_Transmit+0x2a>
 800ef8e:	2302      	movs	r3, #2
 800ef90:	e1e1      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2201      	movs	r2, #1
 800ef96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef9a:	f7f4 ff8b 	bl	8003eb4 <HAL_GetTick>
 800ef9e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d007      	beq.n	800efbc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800efac:	2302      	movs	r3, #2
 800efae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2200      	movs	r2, #0
 800efb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efb8:	7efb      	ldrb	r3, [r7, #27]
 800efba:	e1cc      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d002      	beq.n	800efc8 <HAL_SPI_Transmit+0x60>
 800efc2:	88fb      	ldrh	r3, [r7, #6]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d107      	bne.n	800efd8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efd4:	7efb      	ldrb	r3, [r7, #27]
 800efd6:	e1be      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2203      	movs	r2, #3
 800efdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	68ba      	ldr	r2, [r7, #8]
 800efec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	88fa      	ldrh	r2, [r7, #6]
 800eff2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	88fa      	ldrh	r2, [r7, #6]
 800effa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	2200      	movs	r2, #0
 800f002:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2200      	movs	r2, #0
 800f008:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	2200      	movs	r2, #0
 800f010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2200      	movs	r2, #0
 800f018:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2200      	movs	r2, #0
 800f01e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f028:	d108      	bne.n	800f03c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f038:	601a      	str	r2, [r3, #0]
 800f03a:	e009      	b.n	800f050 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f04e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	685a      	ldr	r2, [r3, #4]
 800f056:	4b96      	ldr	r3, [pc, #600]	; (800f2b0 <HAL_SPI_Transmit+0x348>)
 800f058:	4013      	ands	r3, r2
 800f05a:	88f9      	ldrh	r1, [r7, #6]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	6812      	ldr	r2, [r2, #0]
 800f060:	430b      	orrs	r3, r1
 800f062:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	f042 0201 	orr.w	r2, r2, #1
 800f072:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	685b      	ldr	r3, [r3, #4]
 800f078:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f07c:	d107      	bne.n	800f08e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f08c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	2b0f      	cmp	r3, #15
 800f094:	d947      	bls.n	800f126 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f096:	e03f      	b.n	800f118 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	f003 0302 	and.w	r3, r3, #2
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	d114      	bne.n	800f0d0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	6812      	ldr	r2, [r2, #0]
 800f0b0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f0b6:	1d1a      	adds	r2, r3, #4
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f0ce:	e023      	b.n	800f118 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0d0:	f7f4 fef0 	bl	8003eb4 <HAL_GetTick>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d803      	bhi.n	800f0e8 <HAL_SPI_Transmit+0x180>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e6:	d102      	bne.n	800f0ee <HAL_SPI_Transmit+0x186>
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d114      	bne.n	800f118 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f000 fac6 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f114:	2303      	movs	r3, #3
 800f116:	e11e      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d1b9      	bne.n	800f098 <HAL_SPI_Transmit+0x130>
 800f124:	e0f1      	b.n	800f30a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	2b07      	cmp	r3, #7
 800f12c:	f240 80e6 	bls.w	800f2fc <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f130:	e05d      	b.n	800f1ee <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	695b      	ldr	r3, [r3, #20]
 800f138:	f003 0302 	and.w	r3, r3, #2
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d132      	bne.n	800f1a6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f146:	b29b      	uxth	r3, r3
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d918      	bls.n	800f17e <HAL_SPI_Transmit+0x216>
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f150:	2b00      	cmp	r3, #0
 800f152:	d014      	beq.n	800f17e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	6812      	ldr	r2, [r2, #0]
 800f15e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f164:	1d1a      	adds	r2, r3, #4
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f170:	b29b      	uxth	r3, r3
 800f172:	3b02      	subs	r3, #2
 800f174:	b29a      	uxth	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f17c:	e037      	b.n	800f1ee <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f182:	881a      	ldrh	r2, [r3, #0]
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f18c:	1c9a      	adds	r2, r3, #2
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f198:	b29b      	uxth	r3, r3
 800f19a:	3b01      	subs	r3, #1
 800f19c:	b29a      	uxth	r2, r3
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f1a4:	e023      	b.n	800f1ee <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1a6:	f7f4 fe85 	bl	8003eb4 <HAL_GetTick>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	683a      	ldr	r2, [r7, #0]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d803      	bhi.n	800f1be <HAL_SPI_Transmit+0x256>
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1bc:	d102      	bne.n	800f1c4 <HAL_SPI_Transmit+0x25c>
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d114      	bne.n	800f1ee <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f000 fa5b 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2201      	movs	r2, #1
 800f1e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	e0b3      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d19b      	bne.n	800f132 <HAL_SPI_Transmit+0x1ca>
 800f1fa:	e086      	b.n	800f30a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	695b      	ldr	r3, [r3, #20]
 800f202:	f003 0302 	and.w	r3, r3, #2
 800f206:	2b02      	cmp	r3, #2
 800f208:	d154      	bne.n	800f2b4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f210:	b29b      	uxth	r3, r3
 800f212:	2b03      	cmp	r3, #3
 800f214:	d918      	bls.n	800f248 <HAL_SPI_Transmit+0x2e0>
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21a:	2b40      	cmp	r3, #64	; 0x40
 800f21c:	d914      	bls.n	800f248 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	6812      	ldr	r2, [r2, #0]
 800f228:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f22e:	1d1a      	adds	r2, r3, #4
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f23a:	b29b      	uxth	r3, r3
 800f23c:	3b04      	subs	r3, #4
 800f23e:	b29a      	uxth	r2, r3
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f246:	e059      	b.n	800f2fc <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f24e:	b29b      	uxth	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	d917      	bls.n	800f284 <HAL_SPI_Transmit+0x31c>
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d013      	beq.n	800f284 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f260:	881a      	ldrh	r2, [r3, #0]
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f26a:	1c9a      	adds	r2, r3, #2
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f276:	b29b      	uxth	r3, r3
 800f278:	3b02      	subs	r3, #2
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f282:	e03b      	b.n	800f2fc <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3320      	adds	r3, #32
 800f28e:	7812      	ldrb	r2, [r2, #0]
 800f290:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f296:	1c5a      	adds	r2, r3, #1
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f2ae:	e025      	b.n	800f2fc <HAL_SPI_Transmit+0x394>
 800f2b0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2b4:	f7f4 fdfe 	bl	8003eb4 <HAL_GetTick>
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	1ad3      	subs	r3, r2, r3
 800f2be:	683a      	ldr	r2, [r7, #0]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d803      	bhi.n	800f2cc <HAL_SPI_Transmit+0x364>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d102      	bne.n	800f2d2 <HAL_SPI_Transmit+0x36a>
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d114      	bne.n	800f2fc <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2d2:	68f8      	ldr	r0, [r7, #12]
 800f2d4:	f000 f9d4 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	2201      	movs	r2, #1
 800f2f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2f8:	2303      	movs	r3, #3
 800f2fa:	e02c      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f302:	b29b      	uxth	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	f47f af79 	bne.w	800f1fc <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	9300      	str	r3, [sp, #0]
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	2200      	movs	r2, #0
 800f312:	2108      	movs	r1, #8
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f000 fa53 	bl	800f7c0 <SPI_WaitOnFlagUntilTimeout>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d007      	beq.n	800f330 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f326:	f043 0220 	orr.w	r2, r3, #32
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 f9a5 	bl	800f680 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d001      	beq.n	800f354 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f350:	2301      	movs	r3, #1
 800f352:	e000      	b.n	800f356 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f354:	7efb      	ldrb	r3, [r7, #27]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3720      	adds	r7, #32
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop

0800f360 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b088      	sub	sp, #32
 800f364:	af00      	add	r7, sp, #0
 800f366:	60f8      	str	r0, [r7, #12]
 800f368:	60b9      	str	r1, [r7, #8]
 800f36a:	603b      	str	r3, [r7, #0]
 800f36c:	4613      	mov	r3, r2
 800f36e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3330      	adds	r3, #48	; 0x30
 800f37a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f382:	2b01      	cmp	r3, #1
 800f384:	d101      	bne.n	800f38a <HAL_SPI_Receive+0x2a>
 800f386:	2302      	movs	r3, #2
 800f388:	e173      	b.n	800f672 <HAL_SPI_Receive+0x312>
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2201      	movs	r2, #1
 800f38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f392:	f7f4 fd8f 	bl	8003eb4 <HAL_GetTick>
 800f396:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b01      	cmp	r3, #1
 800f3a2:	d007      	beq.n	800f3b4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3b0:	7ffb      	ldrb	r3, [r7, #31]
 800f3b2:	e15e      	b.n	800f672 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d002      	beq.n	800f3c0 <HAL_SPI_Receive+0x60>
 800f3ba:	88fb      	ldrh	r3, [r7, #6]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d107      	bne.n	800f3d0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f3cc:	7ffb      	ldrb	r3, [r7, #31]
 800f3ce:	e150      	b.n	800f672 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	88fa      	ldrh	r2, [r7, #6]
 800f3ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	88fa      	ldrh	r2, [r7, #6]
 800f3f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	2200      	movs	r2, #0
 800f410:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	2200      	movs	r2, #0
 800f416:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	689b      	ldr	r3, [r3, #8]
 800f41c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f420:	d108      	bne.n	800f434 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	e009      	b.n	800f448 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f446:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	685a      	ldr	r2, [r3, #4]
 800f44e:	4b8b      	ldr	r3, [pc, #556]	; (800f67c <HAL_SPI_Receive+0x31c>)
 800f450:	4013      	ands	r3, r2
 800f452:	88f9      	ldrh	r1, [r7, #6]
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	6812      	ldr	r2, [r2, #0]
 800f458:	430b      	orrs	r3, r1
 800f45a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	f042 0201 	orr.w	r2, r2, #1
 800f46a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f474:	d107      	bne.n	800f486 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f484:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	68db      	ldr	r3, [r3, #12]
 800f48a:	2b0f      	cmp	r3, #15
 800f48c:	d948      	bls.n	800f520 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f48e:	e040      	b.n	800f512 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	695a      	ldr	r2, [r3, #20]
 800f496:	f248 0308 	movw	r3, #32776	; 0x8008
 800f49a:	4013      	ands	r3, r2
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d014      	beq.n	800f4ca <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f4aa:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f4b0:	1d1a      	adds	r2, r3, #4
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4bc:	b29b      	uxth	r3, r3
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f4c8:	e023      	b.n	800f512 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4ca:	f7f4 fcf3 	bl	8003eb4 <HAL_GetTick>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	1ad3      	subs	r3, r2, r3
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d803      	bhi.n	800f4e2 <HAL_SPI_Receive+0x182>
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e0:	d102      	bne.n	800f4e8 <HAL_SPI_Receive+0x188>
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d114      	bne.n	800f512 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 f8c9 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2201      	movs	r2, #1
 800f50a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f50e:	2303      	movs	r3, #3
 800f510:	e0af      	b.n	800f672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f518:	b29b      	uxth	r3, r3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1b8      	bne.n	800f490 <HAL_SPI_Receive+0x130>
 800f51e:	e095      	b.n	800f64c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	2b07      	cmp	r3, #7
 800f526:	f240 808b 	bls.w	800f640 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f52a:	e03f      	b.n	800f5ac <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	695b      	ldr	r3, [r3, #20]
 800f532:	f003 0301 	and.w	r3, r3, #1
 800f536:	2b01      	cmp	r3, #1
 800f538:	d114      	bne.n	800f564 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f53e:	69ba      	ldr	r2, [r7, #24]
 800f540:	8812      	ldrh	r2, [r2, #0]
 800f542:	b292      	uxth	r2, r2
 800f544:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f54a:	1c9a      	adds	r2, r3, #2
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f556:	b29b      	uxth	r3, r3
 800f558:	3b01      	subs	r3, #1
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f562:	e023      	b.n	800f5ac <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f564:	f7f4 fca6 	bl	8003eb4 <HAL_GetTick>
 800f568:	4602      	mov	r2, r0
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	683a      	ldr	r2, [r7, #0]
 800f570:	429a      	cmp	r2, r3
 800f572:	d803      	bhi.n	800f57c <HAL_SPI_Receive+0x21c>
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57a:	d102      	bne.n	800f582 <HAL_SPI_Receive+0x222>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d114      	bne.n	800f5ac <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f000 f87c 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2200      	movs	r2, #0
 800f58c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2201      	movs	r2, #1
 800f5a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f5a8:	2303      	movs	r3, #3
 800f5aa:	e062      	b.n	800f672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5b2:	b29b      	uxth	r3, r3
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1b9      	bne.n	800f52c <HAL_SPI_Receive+0x1cc>
 800f5b8:	e048      	b.n	800f64c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b01      	cmp	r3, #1
 800f5c6:	d117      	bne.n	800f5f8 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d4:	7812      	ldrb	r2, [r2, #0]
 800f5d6:	b2d2      	uxtb	r2, r2
 800f5d8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	3b01      	subs	r3, #1
 800f5ee:	b29a      	uxth	r2, r3
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5f6:	e023      	b.n	800f640 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5f8:	f7f4 fc5c 	bl	8003eb4 <HAL_GetTick>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	697b      	ldr	r3, [r7, #20]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	429a      	cmp	r2, r3
 800f606:	d803      	bhi.n	800f610 <HAL_SPI_Receive+0x2b0>
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60e:	d102      	bne.n	800f616 <HAL_SPI_Receive+0x2b6>
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d114      	bne.n	800f640 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f000 f832 	bl	800f680 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	2200      	movs	r2, #0
 800f620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f62a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f63c:	2303      	movs	r3, #3
 800f63e:	e018      	b.n	800f672 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f646:	b29b      	uxth	r3, r3
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1b6      	bne.n	800f5ba <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f000 f817 	bl	800f680 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2200      	movs	r2, #0
 800f656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	2201      	movs	r2, #1
 800f65e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f670:	7ffb      	ldrb	r3, [r7, #31]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3720      	adds	r7, #32
 800f676:	46bd      	mov	sp, r7
 800f678:	bd80      	pop	{r7, pc}
 800f67a:	bf00      	nop
 800f67c:	ffff0000 	.word	0xffff0000

0800f680 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f680:	b480      	push	{r7}
 800f682:	b085      	sub	sp, #20
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	695b      	ldr	r3, [r3, #20]
 800f68e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	699a      	ldr	r2, [r3, #24]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f042 0208 	orr.w	r2, r2, #8
 800f69e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	699a      	ldr	r2, [r3, #24]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f042 0210 	orr.w	r2, r2, #16
 800f6ae:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f022 0201 	bic.w	r2, r2, #1
 800f6be:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	6919      	ldr	r1, [r3, #16]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681a      	ldr	r2, [r3, #0]
 800f6ca:	4b3c      	ldr	r3, [pc, #240]	; (800f7bc <SPI_CloseTransfer+0x13c>)
 800f6cc:	400b      	ands	r3, r1
 800f6ce:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	689a      	ldr	r2, [r3, #8]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f6de:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b04      	cmp	r3, #4
 800f6ea:	d014      	beq.n	800f716 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f003 0320 	and.w	r3, r3, #32
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00f      	beq.n	800f716 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	699a      	ldr	r2, [r3, #24]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	f042 0220 	orr.w	r2, r2, #32
 800f714:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f71c:	b2db      	uxtb	r3, r3
 800f71e:	2b03      	cmp	r3, #3
 800f720:	d014      	beq.n	800f74c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00f      	beq.n	800f74c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f732:	f043 0204 	orr.w	r2, r3, #4
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	699a      	ldr	r2, [r3, #24]
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f74a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f752:	2b00      	cmp	r3, #0
 800f754:	d00f      	beq.n	800f776 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f75c:	f043 0201 	orr.w	r2, r3, #1
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	699a      	ldr	r2, [r3, #24]
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f774:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d00f      	beq.n	800f7a0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f786:	f043 0208 	orr.w	r2, r3, #8
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	699a      	ldr	r2, [r3, #24]
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f79e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f7b0:	bf00      	nop
 800f7b2:	3714      	adds	r7, #20
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr
 800f7bc:	fffffc90 	.word	0xfffffc90

0800f7c0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b084      	sub	sp, #16
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	603b      	str	r3, [r7, #0]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7d0:	e010      	b.n	800f7f4 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7d2:	f7f4 fb6f 	bl	8003eb4 <HAL_GetTick>
 800f7d6:	4602      	mov	r2, r0
 800f7d8:	69bb      	ldr	r3, [r7, #24]
 800f7da:	1ad3      	subs	r3, r2, r3
 800f7dc:	683a      	ldr	r2, [r7, #0]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d803      	bhi.n	800f7ea <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e8:	d102      	bne.n	800f7f0 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d101      	bne.n	800f7f4 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e00f      	b.n	800f814 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	695a      	ldr	r2, [r3, #20]
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	68ba      	ldr	r2, [r7, #8]
 800f800:	429a      	cmp	r2, r3
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	461a      	mov	r2, r3
 800f80c:	79fb      	ldrb	r3, [r7, #7]
 800f80e:	429a      	cmp	r2, r3
 800f810:	d0df      	beq.n	800f7d2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3710      	adds	r7, #16
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd80      	pop	{r7, pc}

0800f81c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f828:	095b      	lsrs	r3, r3, #5
 800f82a:	3301      	adds	r3, #1
 800f82c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68db      	ldr	r3, [r3, #12]
 800f832:	3301      	adds	r3, #1
 800f834:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	3307      	adds	r3, #7
 800f83a:	08db      	lsrs	r3, r3, #3
 800f83c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	fb02 f303 	mul.w	r3, r2, r3
}
 800f846:	4618      	mov	r0, r3
 800f848:	3714      	adds	r7, #20
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f852:	b580      	push	{r7, lr}
 800f854:	b082      	sub	sp, #8
 800f856:	af00      	add	r7, sp, #0
 800f858:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d101      	bne.n	800f864 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f860:	2301      	movs	r3, #1
 800f862:	e049      	b.n	800f8f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f86a:	b2db      	uxtb	r3, r3
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d106      	bne.n	800f87e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f7f3 fef5 	bl	8003668 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2202      	movs	r2, #2
 800f882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	3304      	adds	r3, #4
 800f88e:	4619      	mov	r1, r3
 800f890:	4610      	mov	r0, r2
 800f892:	f000 ff29 	bl	80106e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2201      	movs	r2, #1
 800f89a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2201      	movs	r2, #1
 800f8da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	2201      	movs	r2, #1
 800f8ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2201      	movs	r2, #1
 800f8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f8f6:	2300      	movs	r3, #0
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f90e:	2301      	movs	r3, #1
 800f910:	e049      	b.n	800f9a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d106      	bne.n	800f92c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7f3 fd08 	bl	800333c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2202      	movs	r2, #2
 800f930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681a      	ldr	r2, [r3, #0]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4619      	mov	r1, r3
 800f93e:	4610      	mov	r0, r2
 800f940:	f000 fed2 	bl	80106e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2201      	movs	r2, #1
 800f958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2201      	movs	r2, #1
 800f968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2201      	movs	r2, #1
 800f978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	2201      	movs	r2, #1
 800f980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2201      	movs	r2, #1
 800f990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	2201      	movs	r2, #1
 800f998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b084      	sub	sp, #16
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d109      	bne.n	800f9d4 <HAL_TIM_PWM_Start+0x24>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	bf14      	ite	ne
 800f9cc:	2301      	movne	r3, #1
 800f9ce:	2300      	moveq	r3, #0
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	e03c      	b.n	800fa4e <HAL_TIM_PWM_Start+0x9e>
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	2b04      	cmp	r3, #4
 800f9d8:	d109      	bne.n	800f9ee <HAL_TIM_PWM_Start+0x3e>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	bf14      	ite	ne
 800f9e6:	2301      	movne	r3, #1
 800f9e8:	2300      	moveq	r3, #0
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	e02f      	b.n	800fa4e <HAL_TIM_PWM_Start+0x9e>
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	2b08      	cmp	r3, #8
 800f9f2:	d109      	bne.n	800fa08 <HAL_TIM_PWM_Start+0x58>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	bf14      	ite	ne
 800fa00:	2301      	movne	r3, #1
 800fa02:	2300      	moveq	r3, #0
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	e022      	b.n	800fa4e <HAL_TIM_PWM_Start+0x9e>
 800fa08:	683b      	ldr	r3, [r7, #0]
 800fa0a:	2b0c      	cmp	r3, #12
 800fa0c:	d109      	bne.n	800fa22 <HAL_TIM_PWM_Start+0x72>
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	bf14      	ite	ne
 800fa1a:	2301      	movne	r3, #1
 800fa1c:	2300      	moveq	r3, #0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	e015      	b.n	800fa4e <HAL_TIM_PWM_Start+0x9e>
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	2b10      	cmp	r3, #16
 800fa26:	d109      	bne.n	800fa3c <HAL_TIM_PWM_Start+0x8c>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa2e:	b2db      	uxtb	r3, r3
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	bf14      	ite	ne
 800fa34:	2301      	movne	r3, #1
 800fa36:	2300      	moveq	r3, #0
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	e008      	b.n	800fa4e <HAL_TIM_PWM_Start+0x9e>
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	bf14      	ite	ne
 800fa48:	2301      	movne	r3, #1
 800fa4a:	2300      	moveq	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d001      	beq.n	800fa56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fa52:	2301      	movs	r3, #1
 800fa54:	e0ab      	b.n	800fbae <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fa56:	683b      	ldr	r3, [r7, #0]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d104      	bne.n	800fa66 <HAL_TIM_PWM_Start+0xb6>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2202      	movs	r2, #2
 800fa60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa64:	e023      	b.n	800faae <HAL_TIM_PWM_Start+0xfe>
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	d104      	bne.n	800fa76 <HAL_TIM_PWM_Start+0xc6>
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2202      	movs	r2, #2
 800fa70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa74:	e01b      	b.n	800faae <HAL_TIM_PWM_Start+0xfe>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	2b08      	cmp	r3, #8
 800fa7a:	d104      	bne.n	800fa86 <HAL_TIM_PWM_Start+0xd6>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2202      	movs	r2, #2
 800fa80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa84:	e013      	b.n	800faae <HAL_TIM_PWM_Start+0xfe>
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	2b0c      	cmp	r3, #12
 800fa8a:	d104      	bne.n	800fa96 <HAL_TIM_PWM_Start+0xe6>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2202      	movs	r2, #2
 800fa90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa94:	e00b      	b.n	800faae <HAL_TIM_PWM_Start+0xfe>
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	2b10      	cmp	r3, #16
 800fa9a:	d104      	bne.n	800faa6 <HAL_TIM_PWM_Start+0xf6>
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2202      	movs	r2, #2
 800faa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800faa4:	e003      	b.n	800faae <HAL_TIM_PWM_Start+0xfe>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2202      	movs	r2, #2
 800faaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2201      	movs	r2, #1
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	4618      	mov	r0, r3
 800fab8:	f001 f992 	bl	8010de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a3d      	ldr	r2, [pc, #244]	; (800fbb8 <HAL_TIM_PWM_Start+0x208>)
 800fac2:	4293      	cmp	r3, r2
 800fac4:	d013      	beq.n	800faee <HAL_TIM_PWM_Start+0x13e>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a3c      	ldr	r2, [pc, #240]	; (800fbbc <HAL_TIM_PWM_Start+0x20c>)
 800facc:	4293      	cmp	r3, r2
 800face:	d00e      	beq.n	800faee <HAL_TIM_PWM_Start+0x13e>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	4a3a      	ldr	r2, [pc, #232]	; (800fbc0 <HAL_TIM_PWM_Start+0x210>)
 800fad6:	4293      	cmp	r3, r2
 800fad8:	d009      	beq.n	800faee <HAL_TIM_PWM_Start+0x13e>
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	4a39      	ldr	r2, [pc, #228]	; (800fbc4 <HAL_TIM_PWM_Start+0x214>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d004      	beq.n	800faee <HAL_TIM_PWM_Start+0x13e>
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	4a37      	ldr	r2, [pc, #220]	; (800fbc8 <HAL_TIM_PWM_Start+0x218>)
 800faea:	4293      	cmp	r3, r2
 800faec:	d101      	bne.n	800faf2 <HAL_TIM_PWM_Start+0x142>
 800faee:	2301      	movs	r3, #1
 800faf0:	e000      	b.n	800faf4 <HAL_TIM_PWM_Start+0x144>
 800faf2:	2300      	movs	r3, #0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d007      	beq.n	800fb08 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4a2a      	ldr	r2, [pc, #168]	; (800fbb8 <HAL_TIM_PWM_Start+0x208>)
 800fb0e:	4293      	cmp	r3, r2
 800fb10:	d02c      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb1a:	d027      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4a2a      	ldr	r2, [pc, #168]	; (800fbcc <HAL_TIM_PWM_Start+0x21c>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d022      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	4a29      	ldr	r2, [pc, #164]	; (800fbd0 <HAL_TIM_PWM_Start+0x220>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d01d      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	4a27      	ldr	r2, [pc, #156]	; (800fbd4 <HAL_TIM_PWM_Start+0x224>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d018      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a1f      	ldr	r2, [pc, #124]	; (800fbbc <HAL_TIM_PWM_Start+0x20c>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d013      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a23      	ldr	r2, [pc, #140]	; (800fbd8 <HAL_TIM_PWM_Start+0x228>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d00e      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4a1b      	ldr	r2, [pc, #108]	; (800fbc0 <HAL_TIM_PWM_Start+0x210>)
 800fb54:	4293      	cmp	r3, r2
 800fb56:	d009      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	4a1f      	ldr	r2, [pc, #124]	; (800fbdc <HAL_TIM_PWM_Start+0x22c>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d004      	beq.n	800fb6c <HAL_TIM_PWM_Start+0x1bc>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a1e      	ldr	r2, [pc, #120]	; (800fbe0 <HAL_TIM_PWM_Start+0x230>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d115      	bne.n	800fb98 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	689a      	ldr	r2, [r3, #8]
 800fb72:	4b1c      	ldr	r3, [pc, #112]	; (800fbe4 <HAL_TIM_PWM_Start+0x234>)
 800fb74:	4013      	ands	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	2b06      	cmp	r3, #6
 800fb7c:	d015      	beq.n	800fbaa <HAL_TIM_PWM_Start+0x1fa>
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb84:	d011      	beq.n	800fbaa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	f042 0201 	orr.w	r2, r2, #1
 800fb94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb96:	e008      	b.n	800fbaa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	681a      	ldr	r2, [r3, #0]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	f042 0201 	orr.w	r2, r2, #1
 800fba6:	601a      	str	r2, [r3, #0]
 800fba8:	e000      	b.n	800fbac <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fbaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	40010000 	.word	0x40010000
 800fbbc:	40010400 	.word	0x40010400
 800fbc0:	40014000 	.word	0x40014000
 800fbc4:	40014400 	.word	0x40014400
 800fbc8:	40014800 	.word	0x40014800
 800fbcc:	40000400 	.word	0x40000400
 800fbd0:	40000800 	.word	0x40000800
 800fbd4:	40000c00 	.word	0x40000c00
 800fbd8:	40001800 	.word	0x40001800
 800fbdc:	4000e000 	.word	0x4000e000
 800fbe0:	4000e400 	.word	0x4000e400
 800fbe4:	00010007 	.word	0x00010007

0800fbe8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d109      	bne.n	800fc14 <HAL_TIM_PWM_Start_DMA+0x2c>
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	2b02      	cmp	r3, #2
 800fc0a:	bf0c      	ite	eq
 800fc0c:	2301      	moveq	r3, #1
 800fc0e:	2300      	movne	r3, #0
 800fc10:	b2db      	uxtb	r3, r3
 800fc12:	e03c      	b.n	800fc8e <HAL_TIM_PWM_Start_DMA+0xa6>
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	2b04      	cmp	r3, #4
 800fc18:	d109      	bne.n	800fc2e <HAL_TIM_PWM_Start_DMA+0x46>
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc20:	b2db      	uxtb	r3, r3
 800fc22:	2b02      	cmp	r3, #2
 800fc24:	bf0c      	ite	eq
 800fc26:	2301      	moveq	r3, #1
 800fc28:	2300      	movne	r3, #0
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	e02f      	b.n	800fc8e <HAL_TIM_PWM_Start_DMA+0xa6>
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	2b08      	cmp	r3, #8
 800fc32:	d109      	bne.n	800fc48 <HAL_TIM_PWM_Start_DMA+0x60>
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b02      	cmp	r3, #2
 800fc3e:	bf0c      	ite	eq
 800fc40:	2301      	moveq	r3, #1
 800fc42:	2300      	movne	r3, #0
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	e022      	b.n	800fc8e <HAL_TIM_PWM_Start_DMA+0xa6>
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b0c      	cmp	r3, #12
 800fc4c:	d109      	bne.n	800fc62 <HAL_TIM_PWM_Start_DMA+0x7a>
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc54:	b2db      	uxtb	r3, r3
 800fc56:	2b02      	cmp	r3, #2
 800fc58:	bf0c      	ite	eq
 800fc5a:	2301      	moveq	r3, #1
 800fc5c:	2300      	movne	r3, #0
 800fc5e:	b2db      	uxtb	r3, r3
 800fc60:	e015      	b.n	800fc8e <HAL_TIM_PWM_Start_DMA+0xa6>
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	2b10      	cmp	r3, #16
 800fc66:	d109      	bne.n	800fc7c <HAL_TIM_PWM_Start_DMA+0x94>
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	2b02      	cmp	r3, #2
 800fc72:	bf0c      	ite	eq
 800fc74:	2301      	moveq	r3, #1
 800fc76:	2300      	movne	r3, #0
 800fc78:	b2db      	uxtb	r3, r3
 800fc7a:	e008      	b.n	800fc8e <HAL_TIM_PWM_Start_DMA+0xa6>
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b02      	cmp	r3, #2
 800fc86:	bf0c      	ite	eq
 800fc88:	2301      	moveq	r3, #1
 800fc8a:	2300      	movne	r3, #0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fc92:	2302      	movs	r3, #2
 800fc94:	e1ba      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d109      	bne.n	800fcb0 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	bf0c      	ite	eq
 800fca8:	2301      	moveq	r3, #1
 800fcaa:	2300      	movne	r3, #0
 800fcac:	b2db      	uxtb	r3, r3
 800fcae:	e03c      	b.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x142>
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	2b04      	cmp	r3, #4
 800fcb4:	d109      	bne.n	800fcca <HAL_TIM_PWM_Start_DMA+0xe2>
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	bf0c      	ite	eq
 800fcc2:	2301      	moveq	r3, #1
 800fcc4:	2300      	movne	r3, #0
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	e02f      	b.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x142>
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	2b08      	cmp	r3, #8
 800fcce:	d109      	bne.n	800fce4 <HAL_TIM_PWM_Start_DMA+0xfc>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	bf0c      	ite	eq
 800fcdc:	2301      	moveq	r3, #1
 800fcde:	2300      	movne	r3, #0
 800fce0:	b2db      	uxtb	r3, r3
 800fce2:	e022      	b.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x142>
 800fce4:	68bb      	ldr	r3, [r7, #8]
 800fce6:	2b0c      	cmp	r3, #12
 800fce8:	d109      	bne.n	800fcfe <HAL_TIM_PWM_Start_DMA+0x116>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	bf0c      	ite	eq
 800fcf6:	2301      	moveq	r3, #1
 800fcf8:	2300      	movne	r3, #0
 800fcfa:	b2db      	uxtb	r3, r3
 800fcfc:	e015      	b.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x142>
 800fcfe:	68bb      	ldr	r3, [r7, #8]
 800fd00:	2b10      	cmp	r3, #16
 800fd02:	d109      	bne.n	800fd18 <HAL_TIM_PWM_Start_DMA+0x130>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	bf0c      	ite	eq
 800fd10:	2301      	moveq	r3, #1
 800fd12:	2300      	movne	r3, #0
 800fd14:	b2db      	uxtb	r3, r3
 800fd16:	e008      	b.n	800fd2a <HAL_TIM_PWM_Start_DMA+0x142>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	bf0c      	ite	eq
 800fd24:	2301      	moveq	r3, #1
 800fd26:	2300      	movne	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d034      	beq.n	800fd98 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <HAL_TIM_PWM_Start_DMA+0x152>
 800fd34:	887b      	ldrh	r3, [r7, #2]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d101      	bne.n	800fd3e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e166      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d104      	bne.n	800fd4e <HAL_TIM_PWM_Start_DMA+0x166>
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2202      	movs	r2, #2
 800fd48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fd4c:	e026      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	2b04      	cmp	r3, #4
 800fd52:	d104      	bne.n	800fd5e <HAL_TIM_PWM_Start_DMA+0x176>
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2202      	movs	r2, #2
 800fd58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fd5c:	e01e      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b08      	cmp	r3, #8
 800fd62:	d104      	bne.n	800fd6e <HAL_TIM_PWM_Start_DMA+0x186>
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2202      	movs	r2, #2
 800fd68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fd6c:	e016      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	2b0c      	cmp	r3, #12
 800fd72:	d104      	bne.n	800fd7e <HAL_TIM_PWM_Start_DMA+0x196>
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	2202      	movs	r2, #2
 800fd78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd7c:	e00e      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2b10      	cmp	r3, #16
 800fd82:	d104      	bne.n	800fd8e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2202      	movs	r2, #2
 800fd88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd8c:	e006      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2202      	movs	r2, #2
 800fd92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fd96:	e001      	b.n	800fd9c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800fd98:	2301      	movs	r3, #1
 800fd9a:	e137      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	2b0c      	cmp	r3, #12
 800fda0:	f200 80ae 	bhi.w	800ff00 <HAL_TIM_PWM_Start_DMA+0x318>
 800fda4:	a201      	add	r2, pc, #4	; (adr r2, 800fdac <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800fda6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdaa:	bf00      	nop
 800fdac:	0800fde1 	.word	0x0800fde1
 800fdb0:	0800ff01 	.word	0x0800ff01
 800fdb4:	0800ff01 	.word	0x0800ff01
 800fdb8:	0800ff01 	.word	0x0800ff01
 800fdbc:	0800fe29 	.word	0x0800fe29
 800fdc0:	0800ff01 	.word	0x0800ff01
 800fdc4:	0800ff01 	.word	0x0800ff01
 800fdc8:	0800ff01 	.word	0x0800ff01
 800fdcc:	0800fe71 	.word	0x0800fe71
 800fdd0:	0800ff01 	.word	0x0800ff01
 800fdd4:	0800ff01 	.word	0x0800ff01
 800fdd8:	0800ff01 	.word	0x0800ff01
 800fddc:	0800feb9 	.word	0x0800feb9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde4:	4a8b      	ldr	r2, [pc, #556]	; (8010014 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fde6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdec:	4a8a      	ldr	r2, [pc, #552]	; (8010018 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fdee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf4:	4a89      	ldr	r2, [pc, #548]	; (801001c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fdf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800fdfc:	6879      	ldr	r1, [r7, #4]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	3334      	adds	r3, #52	; 0x34
 800fe04:	461a      	mov	r2, r3
 800fe06:	887b      	ldrh	r3, [r7, #2]
 800fe08:	f7f6 f872 	bl	8005ef0 <HAL_DMA_Start_IT>
 800fe0c:	4603      	mov	r3, r0
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fe12:	2301      	movs	r3, #1
 800fe14:	e0fa      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	68da      	ldr	r2, [r3, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe24:	60da      	str	r2, [r3, #12]
      break;
 800fe26:	e06e      	b.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe2c:	4a79      	ldr	r2, [pc, #484]	; (8010014 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fe2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe34:	4a78      	ldr	r2, [pc, #480]	; (8010018 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fe36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe3c:	4a77      	ldr	r2, [pc, #476]	; (801001c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fe3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	3338      	adds	r3, #56	; 0x38
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	887b      	ldrh	r3, [r7, #2]
 800fe50:	f7f6 f84e 	bl	8005ef0 <HAL_DMA_Start_IT>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d001      	beq.n	800fe5e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	e0d6      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	68da      	ldr	r2, [r3, #12]
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fe6c:	60da      	str	r2, [r3, #12]
      break;
 800fe6e:	e04a      	b.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe74:	4a67      	ldr	r2, [pc, #412]	; (8010014 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fe76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7c:	4a66      	ldr	r2, [pc, #408]	; (8010018 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fe7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe84:	4a65      	ldr	r2, [pc, #404]	; (801001c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fe86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fe8c:	6879      	ldr	r1, [r7, #4]
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	333c      	adds	r3, #60	; 0x3c
 800fe94:	461a      	mov	r2, r3
 800fe96:	887b      	ldrh	r3, [r7, #2]
 800fe98:	f7f6 f82a 	bl	8005ef0 <HAL_DMA_Start_IT>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d001      	beq.n	800fea6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fea2:	2301      	movs	r3, #1
 800fea4:	e0b2      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	68da      	ldr	r2, [r3, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800feb4:	60da      	str	r2, [r3, #12]
      break;
 800feb6:	e026      	b.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800febc:	4a55      	ldr	r2, [pc, #340]	; (8010014 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800febe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec4:	4a54      	ldr	r2, [pc, #336]	; (8010018 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fec6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fecc:	4a53      	ldr	r2, [pc, #332]	; (801001c <HAL_TIM_PWM_Start_DMA+0x434>)
 800fece:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fed4:	6879      	ldr	r1, [r7, #4]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	3340      	adds	r3, #64	; 0x40
 800fedc:	461a      	mov	r2, r3
 800fede:	887b      	ldrh	r3, [r7, #2]
 800fee0:	f7f6 f806 	bl	8005ef0 <HAL_DMA_Start_IT>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d001      	beq.n	800feee <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800feea:	2301      	movs	r3, #1
 800feec:	e08e      	b.n	801000c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68da      	ldr	r2, [r3, #12]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fefc:	60da      	str	r2, [r3, #12]
      break;
 800fefe:	e002      	b.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	75fb      	strb	r3, [r7, #23]
      break;
 800ff04:	bf00      	nop
  }

  if (status == HAL_OK)
 800ff06:	7dfb      	ldrb	r3, [r7, #23]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d17e      	bne.n	801000a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2201      	movs	r2, #1
 800ff12:	68b9      	ldr	r1, [r7, #8]
 800ff14:	4618      	mov	r0, r3
 800ff16:	f000 ff63 	bl	8010de0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	4a40      	ldr	r2, [pc, #256]	; (8010020 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ff20:	4293      	cmp	r3, r2
 800ff22:	d013      	beq.n	800ff4c <HAL_TIM_PWM_Start_DMA+0x364>
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	4a3e      	ldr	r2, [pc, #248]	; (8010024 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d00e      	beq.n	800ff4c <HAL_TIM_PWM_Start_DMA+0x364>
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a3d      	ldr	r2, [pc, #244]	; (8010028 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d009      	beq.n	800ff4c <HAL_TIM_PWM_Start_DMA+0x364>
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a3b      	ldr	r2, [pc, #236]	; (801002c <HAL_TIM_PWM_Start_DMA+0x444>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d004      	beq.n	800ff4c <HAL_TIM_PWM_Start_DMA+0x364>
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	4a3a      	ldr	r2, [pc, #232]	; (8010030 <HAL_TIM_PWM_Start_DMA+0x448>)
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d101      	bne.n	800ff50 <HAL_TIM_PWM_Start_DMA+0x368>
 800ff4c:	2301      	movs	r3, #1
 800ff4e:	e000      	b.n	800ff52 <HAL_TIM_PWM_Start_DMA+0x36a>
 800ff50:	2300      	movs	r3, #0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d007      	beq.n	800ff66 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ff64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a2d      	ldr	r2, [pc, #180]	; (8010020 <HAL_TIM_PWM_Start_DMA+0x438>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d02c      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff78:	d027      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a2d      	ldr	r2, [pc, #180]	; (8010034 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d022      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a2b      	ldr	r2, [pc, #172]	; (8010038 <HAL_TIM_PWM_Start_DMA+0x450>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d01d      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a2a      	ldr	r2, [pc, #168]	; (801003c <HAL_TIM_PWM_Start_DMA+0x454>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d018      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4a21      	ldr	r2, [pc, #132]	; (8010024 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ff9e:	4293      	cmp	r3, r2
 800ffa0:	d013      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a26      	ldr	r2, [pc, #152]	; (8010040 <HAL_TIM_PWM_Start_DMA+0x458>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d00e      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4a1d      	ldr	r2, [pc, #116]	; (8010028 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ffb2:	4293      	cmp	r3, r2
 800ffb4:	d009      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4a22      	ldr	r2, [pc, #136]	; (8010044 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d004      	beq.n	800ffca <HAL_TIM_PWM_Start_DMA+0x3e2>
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a20      	ldr	r2, [pc, #128]	; (8010048 <HAL_TIM_PWM_Start_DMA+0x460>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d115      	bne.n	800fff6 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	689a      	ldr	r2, [r3, #8]
 800ffd0:	4b1e      	ldr	r3, [pc, #120]	; (801004c <HAL_TIM_PWM_Start_DMA+0x464>)
 800ffd2:	4013      	ands	r3, r2
 800ffd4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	2b06      	cmp	r3, #6
 800ffda:	d015      	beq.n	8010008 <HAL_TIM_PWM_Start_DMA+0x420>
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ffe2:	d011      	beq.n	8010008 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681a      	ldr	r2, [r3, #0]
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f042 0201 	orr.w	r2, r2, #1
 800fff2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fff4:	e008      	b.n	8010008 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f042 0201 	orr.w	r2, r2, #1
 8010004:	601a      	str	r2, [r3, #0]
 8010006:	e000      	b.n	801000a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010008:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801000a:	7dfb      	ldrb	r3, [r7, #23]
}
 801000c:	4618      	mov	r0, r3
 801000e:	3718      	adds	r7, #24
 8010010:	46bd      	mov	sp, r7
 8010012:	bd80      	pop	{r7, pc}
 8010014:	080105d7 	.word	0x080105d7
 8010018:	0801067f 	.word	0x0801067f
 801001c:	08010545 	.word	0x08010545
 8010020:	40010000 	.word	0x40010000
 8010024:	40010400 	.word	0x40010400
 8010028:	40014000 	.word	0x40014000
 801002c:	40014400 	.word	0x40014400
 8010030:	40014800 	.word	0x40014800
 8010034:	40000400 	.word	0x40000400
 8010038:	40000800 	.word	0x40000800
 801003c:	40000c00 	.word	0x40000c00
 8010040:	40001800 	.word	0x40001800
 8010044:	4000e000 	.word	0x4000e000
 8010048:	4000e400 	.word	0x4000e400
 801004c:	00010007 	.word	0x00010007

08010050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	f003 0302 	and.w	r3, r3, #2
 8010062:	2b02      	cmp	r3, #2
 8010064:	d122      	bne.n	80100ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	f003 0302 	and.w	r3, r3, #2
 8010070:	2b02      	cmp	r3, #2
 8010072:	d11b      	bne.n	80100ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f06f 0202 	mvn.w	r2, #2
 801007c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	2201      	movs	r2, #1
 8010082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	699b      	ldr	r3, [r3, #24]
 801008a:	f003 0303 	and.w	r3, r3, #3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d003      	beq.n	801009a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 fa24 	bl	80104e0 <HAL_TIM_IC_CaptureCallback>
 8010098:	e005      	b.n	80100a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f000 fa16 	bl	80104cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fa27 	bl	80104f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2200      	movs	r2, #0
 80100aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	f003 0304 	and.w	r3, r3, #4
 80100b6:	2b04      	cmp	r3, #4
 80100b8:	d122      	bne.n	8010100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	f003 0304 	and.w	r3, r3, #4
 80100c4:	2b04      	cmp	r3, #4
 80100c6:	d11b      	bne.n	8010100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	f06f 0204 	mvn.w	r2, #4
 80100d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2202      	movs	r2, #2
 80100d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	699b      	ldr	r3, [r3, #24]
 80100de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d003      	beq.n	80100ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f000 f9fa 	bl	80104e0 <HAL_TIM_IC_CaptureCallback>
 80100ec:	e005      	b.n	80100fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f9ec 	bl	80104cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 f9fd 	bl	80104f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	2200      	movs	r2, #0
 80100fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	691b      	ldr	r3, [r3, #16]
 8010106:	f003 0308 	and.w	r3, r3, #8
 801010a:	2b08      	cmp	r3, #8
 801010c:	d122      	bne.n	8010154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	f003 0308 	and.w	r3, r3, #8
 8010118:	2b08      	cmp	r3, #8
 801011a:	d11b      	bne.n	8010154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f06f 0208 	mvn.w	r2, #8
 8010124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2204      	movs	r2, #4
 801012a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	69db      	ldr	r3, [r3, #28]
 8010132:	f003 0303 	and.w	r3, r3, #3
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 f9d0 	bl	80104e0 <HAL_TIM_IC_CaptureCallback>
 8010140:	e005      	b.n	801014e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 f9c2 	bl	80104cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 f9d3 	bl	80104f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	2200      	movs	r2, #0
 8010152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	f003 0310 	and.w	r3, r3, #16
 801015e:	2b10      	cmp	r3, #16
 8010160:	d122      	bne.n	80101a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	68db      	ldr	r3, [r3, #12]
 8010168:	f003 0310 	and.w	r3, r3, #16
 801016c:	2b10      	cmp	r3, #16
 801016e:	d11b      	bne.n	80101a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f06f 0210 	mvn.w	r2, #16
 8010178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2208      	movs	r2, #8
 801017e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	69db      	ldr	r3, [r3, #28]
 8010186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801018a:	2b00      	cmp	r3, #0
 801018c:	d003      	beq.n	8010196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f000 f9a6 	bl	80104e0 <HAL_TIM_IC_CaptureCallback>
 8010194:	e005      	b.n	80101a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010196:	6878      	ldr	r0, [r7, #4]
 8010198:	f000 f998 	bl	80104cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f9a9 	bl	80104f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	691b      	ldr	r3, [r3, #16]
 80101ae:	f003 0301 	and.w	r3, r3, #1
 80101b2:	2b01      	cmp	r3, #1
 80101b4:	d10e      	bne.n	80101d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68db      	ldr	r3, [r3, #12]
 80101bc:	f003 0301 	and.w	r3, r3, #1
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d107      	bne.n	80101d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	f06f 0201 	mvn.w	r2, #1
 80101cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f972 	bl	80104b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	691b      	ldr	r3, [r3, #16]
 80101da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101de:	2b80      	cmp	r3, #128	; 0x80
 80101e0:	d10e      	bne.n	8010200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	68db      	ldr	r3, [r3, #12]
 80101e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80101ec:	2b80      	cmp	r3, #128	; 0x80
 80101ee:	d107      	bne.n	8010200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80101f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 febc 	bl	8010f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801020a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801020e:	d10e      	bne.n	801022e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801021a:	2b80      	cmp	r3, #128	; 0x80
 801021c:	d107      	bne.n	801022e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010228:	6878      	ldr	r0, [r7, #4]
 801022a:	f000 feaf 	bl	8010f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010238:	2b40      	cmp	r3, #64	; 0x40
 801023a:	d10e      	bne.n	801025a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	68db      	ldr	r3, [r3, #12]
 8010242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010246:	2b40      	cmp	r3, #64	; 0x40
 8010248:	d107      	bne.n	801025a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f961 	bl	801051c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	691b      	ldr	r3, [r3, #16]
 8010260:	f003 0320 	and.w	r3, r3, #32
 8010264:	2b20      	cmp	r3, #32
 8010266:	d10e      	bne.n	8010286 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	68db      	ldr	r3, [r3, #12]
 801026e:	f003 0320 	and.w	r3, r3, #32
 8010272:	2b20      	cmp	r3, #32
 8010274:	d107      	bne.n	8010286 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f06f 0220 	mvn.w	r2, #32
 801027e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 fe6f 	bl	8010f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010286:	bf00      	nop
 8010288:	3708      	adds	r7, #8
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b086      	sub	sp, #24
 8010294:	af00      	add	r7, sp, #0
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801029c:	2300      	movs	r3, #0
 801029e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102a6:	2b01      	cmp	r3, #1
 80102a8:	d101      	bne.n	80102ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80102aa:	2302      	movs	r3, #2
 80102ac:	e0ff      	b.n	80104ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2201      	movs	r2, #1
 80102b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2b14      	cmp	r3, #20
 80102ba:	f200 80f0 	bhi.w	801049e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80102be:	a201      	add	r2, pc, #4	; (adr r2, 80102c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80102c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c4:	08010319 	.word	0x08010319
 80102c8:	0801049f 	.word	0x0801049f
 80102cc:	0801049f 	.word	0x0801049f
 80102d0:	0801049f 	.word	0x0801049f
 80102d4:	08010359 	.word	0x08010359
 80102d8:	0801049f 	.word	0x0801049f
 80102dc:	0801049f 	.word	0x0801049f
 80102e0:	0801049f 	.word	0x0801049f
 80102e4:	0801039b 	.word	0x0801039b
 80102e8:	0801049f 	.word	0x0801049f
 80102ec:	0801049f 	.word	0x0801049f
 80102f0:	0801049f 	.word	0x0801049f
 80102f4:	080103db 	.word	0x080103db
 80102f8:	0801049f 	.word	0x0801049f
 80102fc:	0801049f 	.word	0x0801049f
 8010300:	0801049f 	.word	0x0801049f
 8010304:	0801041d 	.word	0x0801041d
 8010308:	0801049f 	.word	0x0801049f
 801030c:	0801049f 	.word	0x0801049f
 8010310:	0801049f 	.word	0x0801049f
 8010314:	0801045d 	.word	0x0801045d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	68b9      	ldr	r1, [r7, #8]
 801031e:	4618      	mov	r0, r3
 8010320:	f000 fa88 	bl	8010834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	699a      	ldr	r2, [r3, #24]
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	f042 0208 	orr.w	r2, r2, #8
 8010332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	699a      	ldr	r2, [r3, #24]
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	f022 0204 	bic.w	r2, r2, #4
 8010342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	6999      	ldr	r1, [r3, #24]
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	691a      	ldr	r2, [r3, #16]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	430a      	orrs	r2, r1
 8010354:	619a      	str	r2, [r3, #24]
      break;
 8010356:	e0a5      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	68b9      	ldr	r1, [r7, #8]
 801035e:	4618      	mov	r0, r3
 8010360:	f000 faf8 	bl	8010954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	699a      	ldr	r2, [r3, #24]
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	699a      	ldr	r2, [r3, #24]
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	6999      	ldr	r1, [r3, #24]
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	021a      	lsls	r2, r3, #8
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	430a      	orrs	r2, r1
 8010396:	619a      	str	r2, [r3, #24]
      break;
 8010398:	e084      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68b9      	ldr	r1, [r7, #8]
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 fb61 	bl	8010a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	69da      	ldr	r2, [r3, #28]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f042 0208 	orr.w	r2, r2, #8
 80103b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	69da      	ldr	r2, [r3, #28]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f022 0204 	bic.w	r2, r2, #4
 80103c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	69d9      	ldr	r1, [r3, #28]
 80103cc:	68bb      	ldr	r3, [r7, #8]
 80103ce:	691a      	ldr	r2, [r3, #16]
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	430a      	orrs	r2, r1
 80103d6:	61da      	str	r2, [r3, #28]
      break;
 80103d8:	e064      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	68b9      	ldr	r1, [r7, #8]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f000 fbc9 	bl	8010b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	69da      	ldr	r2, [r3, #28]
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	69da      	ldr	r2, [r3, #28]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	69d9      	ldr	r1, [r3, #28]
 801040c:	68bb      	ldr	r3, [r7, #8]
 801040e:	691b      	ldr	r3, [r3, #16]
 8010410:	021a      	lsls	r2, r3, #8
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	430a      	orrs	r2, r1
 8010418:	61da      	str	r2, [r3, #28]
      break;
 801041a:	e043      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	68b9      	ldr	r1, [r7, #8]
 8010422:	4618      	mov	r0, r3
 8010424:	f000 fc12 	bl	8010c4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f042 0208 	orr.w	r2, r2, #8
 8010436:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f022 0204 	bic.w	r2, r2, #4
 8010446:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	691a      	ldr	r2, [r3, #16]
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	430a      	orrs	r2, r1
 8010458:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801045a:	e023      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	68b9      	ldr	r1, [r7, #8]
 8010462:	4618      	mov	r0, r3
 8010464:	f000 fc56 	bl	8010d14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010476:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010486:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801048e:	68bb      	ldr	r3, [r7, #8]
 8010490:	691b      	ldr	r3, [r3, #16]
 8010492:	021a      	lsls	r2, r3, #8
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	430a      	orrs	r2, r1
 801049a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801049c:	e002      	b.n	80104a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801049e:	2301      	movs	r3, #1
 80104a0:	75fb      	strb	r3, [r7, #23]
      break;
 80104a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	2200      	movs	r2, #0
 80104a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80104ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80104ae:	4618      	mov	r0, r3
 80104b0:	3718      	adds	r7, #24
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bd80      	pop	{r7, pc}
 80104b6:	bf00      	nop

080104b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b083      	sub	sp, #12
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80104c0:	bf00      	nop
 80104c2:	370c      	adds	r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ca:	4770      	bx	lr

080104cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80104d4:	bf00      	nop
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80104e8:	bf00      	nop
 80104ea:	370c      	adds	r7, #12
 80104ec:	46bd      	mov	sp, r7
 80104ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f2:	4770      	bx	lr

080104f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80104f4:	b480      	push	{r7}
 80104f6:	b083      	sub	sp, #12
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80104fc:	bf00      	nop
 80104fe:	370c      	adds	r7, #12
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr

08010508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010508:	b480      	push	{r7}
 801050a:	b083      	sub	sp, #12
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010510:	bf00      	nop
 8010512:	370c      	adds	r7, #12
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801051c:	b480      	push	{r7}
 801051e:	b083      	sub	sp, #12
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010524:	bf00      	nop
 8010526:	370c      	adds	r7, #12
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr

08010530 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010538:	bf00      	nop
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr

08010544 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010550:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	429a      	cmp	r2, r3
 801055a:	d107      	bne.n	801056c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2201      	movs	r2, #1
 8010560:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	2201      	movs	r2, #1
 8010566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801056a:	e02a      	b.n	80105c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	429a      	cmp	r2, r3
 8010574:	d107      	bne.n	8010586 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2202      	movs	r2, #2
 801057a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010584:	e01d      	b.n	80105c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	429a      	cmp	r2, r3
 801058e:	d107      	bne.n	80105a0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2204      	movs	r2, #4
 8010594:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2201      	movs	r2, #1
 801059a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801059e:	e010      	b.n	80105c2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	429a      	cmp	r2, r3
 80105a8:	d107      	bne.n	80105ba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	2208      	movs	r2, #8
 80105ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	2201      	movs	r2, #1
 80105b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105b8:	e003      	b.n	80105c2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	2201      	movs	r2, #1
 80105be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f7ff ffb4 	bl	8010530 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2200      	movs	r2, #0
 80105cc:	771a      	strb	r2, [r3, #28]
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80105d6:	b580      	push	{r7, lr}
 80105d8:	b084      	sub	sp, #16
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e8:	687a      	ldr	r2, [r7, #4]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d10b      	bne.n	8010606 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2201      	movs	r2, #1
 80105f2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	69db      	ldr	r3, [r3, #28]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d136      	bne.n	801066a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2201      	movs	r2, #1
 8010600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010604:	e031      	b.n	801066a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801060a:	687a      	ldr	r2, [r7, #4]
 801060c:	429a      	cmp	r2, r3
 801060e:	d10b      	bne.n	8010628 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	2202      	movs	r2, #2
 8010614:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	69db      	ldr	r3, [r3, #28]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d125      	bne.n	801066a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2201      	movs	r2, #1
 8010622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010626:	e020      	b.n	801066a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801062c:	687a      	ldr	r2, [r7, #4]
 801062e:	429a      	cmp	r2, r3
 8010630:	d10b      	bne.n	801064a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2204      	movs	r2, #4
 8010636:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d114      	bne.n	801066a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2201      	movs	r2, #1
 8010644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010648:	e00f      	b.n	801066a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	429a      	cmp	r2, r3
 8010652:	d10a      	bne.n	801066a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	2208      	movs	r2, #8
 8010658:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	69db      	ldr	r3, [r3, #28]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d103      	bne.n	801066a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	2201      	movs	r2, #1
 8010666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7ff ff42 	bl	80104f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	2200      	movs	r2, #0
 8010674:	771a      	strb	r2, [r3, #28]
}
 8010676:	bf00      	nop
 8010678:	3710      	adds	r7, #16
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b084      	sub	sp, #16
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801068a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	429a      	cmp	r2, r3
 8010694:	d103      	bne.n	801069e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2201      	movs	r2, #1
 801069a:	771a      	strb	r2, [r3, #28]
 801069c:	e019      	b.n	80106d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d103      	bne.n	80106b0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2202      	movs	r2, #2
 80106ac:	771a      	strb	r2, [r3, #28]
 80106ae:	e010      	b.n	80106d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b4:	687a      	ldr	r2, [r7, #4]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d103      	bne.n	80106c2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2204      	movs	r2, #4
 80106be:	771a      	strb	r2, [r3, #28]
 80106c0:	e007      	b.n	80106d2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	429a      	cmp	r2, r3
 80106ca:	d102      	bne.n	80106d2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	2208      	movs	r2, #8
 80106d0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80106d2:	68f8      	ldr	r0, [r7, #12]
 80106d4:	f7ff ff18 	bl	8010508 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	2200      	movs	r2, #0
 80106dc:	771a      	strb	r2, [r3, #28]
}
 80106de:	bf00      	nop
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	4a44      	ldr	r2, [pc, #272]	; (801080c <TIM_Base_SetConfig+0x124>)
 80106fc:	4293      	cmp	r3, r2
 80106fe:	d013      	beq.n	8010728 <TIM_Base_SetConfig+0x40>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010706:	d00f      	beq.n	8010728 <TIM_Base_SetConfig+0x40>
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	4a41      	ldr	r2, [pc, #260]	; (8010810 <TIM_Base_SetConfig+0x128>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d00b      	beq.n	8010728 <TIM_Base_SetConfig+0x40>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	4a40      	ldr	r2, [pc, #256]	; (8010814 <TIM_Base_SetConfig+0x12c>)
 8010714:	4293      	cmp	r3, r2
 8010716:	d007      	beq.n	8010728 <TIM_Base_SetConfig+0x40>
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4a3f      	ldr	r2, [pc, #252]	; (8010818 <TIM_Base_SetConfig+0x130>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d003      	beq.n	8010728 <TIM_Base_SetConfig+0x40>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	4a3e      	ldr	r2, [pc, #248]	; (801081c <TIM_Base_SetConfig+0x134>)
 8010724:	4293      	cmp	r3, r2
 8010726:	d108      	bne.n	801073a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801072e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010730:	683b      	ldr	r3, [r7, #0]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	4313      	orrs	r3, r2
 8010738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4a33      	ldr	r2, [pc, #204]	; (801080c <TIM_Base_SetConfig+0x124>)
 801073e:	4293      	cmp	r3, r2
 8010740:	d027      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010748:	d023      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4a30      	ldr	r2, [pc, #192]	; (8010810 <TIM_Base_SetConfig+0x128>)
 801074e:	4293      	cmp	r3, r2
 8010750:	d01f      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	4a2f      	ldr	r2, [pc, #188]	; (8010814 <TIM_Base_SetConfig+0x12c>)
 8010756:	4293      	cmp	r3, r2
 8010758:	d01b      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	4a2e      	ldr	r2, [pc, #184]	; (8010818 <TIM_Base_SetConfig+0x130>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d017      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	4a2d      	ldr	r2, [pc, #180]	; (801081c <TIM_Base_SetConfig+0x134>)
 8010766:	4293      	cmp	r3, r2
 8010768:	d013      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	4a2c      	ldr	r2, [pc, #176]	; (8010820 <TIM_Base_SetConfig+0x138>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d00f      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	4a2b      	ldr	r2, [pc, #172]	; (8010824 <TIM_Base_SetConfig+0x13c>)
 8010776:	4293      	cmp	r3, r2
 8010778:	d00b      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	4a2a      	ldr	r2, [pc, #168]	; (8010828 <TIM_Base_SetConfig+0x140>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d007      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	4a29      	ldr	r2, [pc, #164]	; (801082c <TIM_Base_SetConfig+0x144>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d003      	beq.n	8010792 <TIM_Base_SetConfig+0xaa>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	4a28      	ldr	r2, [pc, #160]	; (8010830 <TIM_Base_SetConfig+0x148>)
 801078e:	4293      	cmp	r3, r2
 8010790:	d108      	bne.n	80107a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	68fa      	ldr	r2, [r7, #12]
 80107a0:	4313      	orrs	r3, r2
 80107a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	695b      	ldr	r3, [r3, #20]
 80107ae:	4313      	orrs	r3, r2
 80107b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	68fa      	ldr	r2, [r7, #12]
 80107b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	689a      	ldr	r2, [r3, #8]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a10      	ldr	r2, [pc, #64]	; (801080c <TIM_Base_SetConfig+0x124>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d00f      	beq.n	80107f0 <TIM_Base_SetConfig+0x108>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a12      	ldr	r2, [pc, #72]	; (801081c <TIM_Base_SetConfig+0x134>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d00b      	beq.n	80107f0 <TIM_Base_SetConfig+0x108>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a11      	ldr	r2, [pc, #68]	; (8010820 <TIM_Base_SetConfig+0x138>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d007      	beq.n	80107f0 <TIM_Base_SetConfig+0x108>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a10      	ldr	r2, [pc, #64]	; (8010824 <TIM_Base_SetConfig+0x13c>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d003      	beq.n	80107f0 <TIM_Base_SetConfig+0x108>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	4a0f      	ldr	r2, [pc, #60]	; (8010828 <TIM_Base_SetConfig+0x140>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d103      	bne.n	80107f8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	691a      	ldr	r2, [r3, #16]
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2201      	movs	r2, #1
 80107fc:	615a      	str	r2, [r3, #20]
}
 80107fe:	bf00      	nop
 8010800:	3714      	adds	r7, #20
 8010802:	46bd      	mov	sp, r7
 8010804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010808:	4770      	bx	lr
 801080a:	bf00      	nop
 801080c:	40010000 	.word	0x40010000
 8010810:	40000400 	.word	0x40000400
 8010814:	40000800 	.word	0x40000800
 8010818:	40000c00 	.word	0x40000c00
 801081c:	40010400 	.word	0x40010400
 8010820:	40014000 	.word	0x40014000
 8010824:	40014400 	.word	0x40014400
 8010828:	40014800 	.word	0x40014800
 801082c:	4000e000 	.word	0x4000e000
 8010830:	4000e400 	.word	0x4000e400

08010834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010834:	b480      	push	{r7}
 8010836:	b087      	sub	sp, #28
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a1b      	ldr	r3, [r3, #32]
 8010842:	f023 0201 	bic.w	r2, r3, #1
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	6a1b      	ldr	r3, [r3, #32]
 801084e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	685b      	ldr	r3, [r3, #4]
 8010854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	699b      	ldr	r3, [r3, #24]
 801085a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4b37      	ldr	r3, [pc, #220]	; (801093c <TIM_OC1_SetConfig+0x108>)
 8010860:	4013      	ands	r3, r2
 8010862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f023 0303 	bic.w	r3, r3, #3
 801086a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	68fa      	ldr	r2, [r7, #12]
 8010872:	4313      	orrs	r3, r2
 8010874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	f023 0302 	bic.w	r3, r3, #2
 801087c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	4313      	orrs	r3, r2
 8010886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a2d      	ldr	r2, [pc, #180]	; (8010940 <TIM_OC1_SetConfig+0x10c>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d00f      	beq.n	80108b0 <TIM_OC1_SetConfig+0x7c>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4a2c      	ldr	r2, [pc, #176]	; (8010944 <TIM_OC1_SetConfig+0x110>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d00b      	beq.n	80108b0 <TIM_OC1_SetConfig+0x7c>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	4a2b      	ldr	r2, [pc, #172]	; (8010948 <TIM_OC1_SetConfig+0x114>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d007      	beq.n	80108b0 <TIM_OC1_SetConfig+0x7c>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4a2a      	ldr	r2, [pc, #168]	; (801094c <TIM_OC1_SetConfig+0x118>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d003      	beq.n	80108b0 <TIM_OC1_SetConfig+0x7c>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4a29      	ldr	r2, [pc, #164]	; (8010950 <TIM_OC1_SetConfig+0x11c>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d10c      	bne.n	80108ca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	f023 0308 	bic.w	r3, r3, #8
 80108b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	68db      	ldr	r3, [r3, #12]
 80108bc:	697a      	ldr	r2, [r7, #20]
 80108be:	4313      	orrs	r3, r2
 80108c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f023 0304 	bic.w	r3, r3, #4
 80108c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4a1c      	ldr	r2, [pc, #112]	; (8010940 <TIM_OC1_SetConfig+0x10c>)
 80108ce:	4293      	cmp	r3, r2
 80108d0:	d00f      	beq.n	80108f2 <TIM_OC1_SetConfig+0xbe>
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	4a1b      	ldr	r2, [pc, #108]	; (8010944 <TIM_OC1_SetConfig+0x110>)
 80108d6:	4293      	cmp	r3, r2
 80108d8:	d00b      	beq.n	80108f2 <TIM_OC1_SetConfig+0xbe>
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4a1a      	ldr	r2, [pc, #104]	; (8010948 <TIM_OC1_SetConfig+0x114>)
 80108de:	4293      	cmp	r3, r2
 80108e0:	d007      	beq.n	80108f2 <TIM_OC1_SetConfig+0xbe>
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	4a19      	ldr	r2, [pc, #100]	; (801094c <TIM_OC1_SetConfig+0x118>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d003      	beq.n	80108f2 <TIM_OC1_SetConfig+0xbe>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	4a18      	ldr	r2, [pc, #96]	; (8010950 <TIM_OC1_SetConfig+0x11c>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d111      	bne.n	8010916 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80108f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	695b      	ldr	r3, [r3, #20]
 8010906:	693a      	ldr	r2, [r7, #16]
 8010908:	4313      	orrs	r3, r2
 801090a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	693a      	ldr	r2, [r7, #16]
 8010912:	4313      	orrs	r3, r2
 8010914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	693a      	ldr	r2, [r7, #16]
 801091a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	685a      	ldr	r2, [r3, #4]
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	697a      	ldr	r2, [r7, #20]
 801092e:	621a      	str	r2, [r3, #32]
}
 8010930:	bf00      	nop
 8010932:	371c      	adds	r7, #28
 8010934:	46bd      	mov	sp, r7
 8010936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093a:	4770      	bx	lr
 801093c:	fffeff8f 	.word	0xfffeff8f
 8010940:	40010000 	.word	0x40010000
 8010944:	40010400 	.word	0x40010400
 8010948:	40014000 	.word	0x40014000
 801094c:	40014400 	.word	0x40014400
 8010950:	40014800 	.word	0x40014800

08010954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010954:	b480      	push	{r7}
 8010956:	b087      	sub	sp, #28
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6a1b      	ldr	r3, [r3, #32]
 8010962:	f023 0210 	bic.w	r2, r3, #16
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801097c:	68fa      	ldr	r2, [r7, #12]
 801097e:	4b34      	ldr	r3, [pc, #208]	; (8010a50 <TIM_OC2_SetConfig+0xfc>)
 8010980:	4013      	ands	r3, r2
 8010982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801098a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	021b      	lsls	r3, r3, #8
 8010992:	68fa      	ldr	r2, [r7, #12]
 8010994:	4313      	orrs	r3, r2
 8010996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	f023 0320 	bic.w	r3, r3, #32
 801099e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	689b      	ldr	r3, [r3, #8]
 80109a4:	011b      	lsls	r3, r3, #4
 80109a6:	697a      	ldr	r2, [r7, #20]
 80109a8:	4313      	orrs	r3, r2
 80109aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4a29      	ldr	r2, [pc, #164]	; (8010a54 <TIM_OC2_SetConfig+0x100>)
 80109b0:	4293      	cmp	r3, r2
 80109b2:	d003      	beq.n	80109bc <TIM_OC2_SetConfig+0x68>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	4a28      	ldr	r2, [pc, #160]	; (8010a58 <TIM_OC2_SetConfig+0x104>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d10d      	bne.n	80109d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	68db      	ldr	r3, [r3, #12]
 80109c8:	011b      	lsls	r3, r3, #4
 80109ca:	697a      	ldr	r2, [r7, #20]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	4a1e      	ldr	r2, [pc, #120]	; (8010a54 <TIM_OC2_SetConfig+0x100>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d00f      	beq.n	8010a00 <TIM_OC2_SetConfig+0xac>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4a1d      	ldr	r2, [pc, #116]	; (8010a58 <TIM_OC2_SetConfig+0x104>)
 80109e4:	4293      	cmp	r3, r2
 80109e6:	d00b      	beq.n	8010a00 <TIM_OC2_SetConfig+0xac>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	4a1c      	ldr	r2, [pc, #112]	; (8010a5c <TIM_OC2_SetConfig+0x108>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d007      	beq.n	8010a00 <TIM_OC2_SetConfig+0xac>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	4a1b      	ldr	r2, [pc, #108]	; (8010a60 <TIM_OC2_SetConfig+0x10c>)
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d003      	beq.n	8010a00 <TIM_OC2_SetConfig+0xac>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	4a1a      	ldr	r2, [pc, #104]	; (8010a64 <TIM_OC2_SetConfig+0x110>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d113      	bne.n	8010a28 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010a00:	693b      	ldr	r3, [r7, #16]
 8010a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010a06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	695b      	ldr	r3, [r3, #20]
 8010a14:	009b      	lsls	r3, r3, #2
 8010a16:	693a      	ldr	r2, [r7, #16]
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	699b      	ldr	r3, [r3, #24]
 8010a20:	009b      	lsls	r3, r3, #2
 8010a22:	693a      	ldr	r2, [r7, #16]
 8010a24:	4313      	orrs	r3, r2
 8010a26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	693a      	ldr	r2, [r7, #16]
 8010a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	68fa      	ldr	r2, [r7, #12]
 8010a32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	685a      	ldr	r2, [r3, #4]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	621a      	str	r2, [r3, #32]
}
 8010a42:	bf00      	nop
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4c:	4770      	bx	lr
 8010a4e:	bf00      	nop
 8010a50:	feff8fff 	.word	0xfeff8fff
 8010a54:	40010000 	.word	0x40010000
 8010a58:	40010400 	.word	0x40010400
 8010a5c:	40014000 	.word	0x40014000
 8010a60:	40014400 	.word	0x40014400
 8010a64:	40014800 	.word	0x40014800

08010a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b087      	sub	sp, #28
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a1b      	ldr	r3, [r3, #32]
 8010a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	6a1b      	ldr	r3, [r3, #32]
 8010a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	685b      	ldr	r3, [r3, #4]
 8010a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	69db      	ldr	r3, [r3, #28]
 8010a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	4b33      	ldr	r3, [pc, #204]	; (8010b60 <TIM_OC3_SetConfig+0xf8>)
 8010a94:	4013      	ands	r3, r2
 8010a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f023 0303 	bic.w	r3, r3, #3
 8010a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	68fa      	ldr	r2, [r7, #12]
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	021b      	lsls	r3, r3, #8
 8010ab8:	697a      	ldr	r2, [r7, #20]
 8010aba:	4313      	orrs	r3, r2
 8010abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4a28      	ldr	r2, [pc, #160]	; (8010b64 <TIM_OC3_SetConfig+0xfc>)
 8010ac2:	4293      	cmp	r3, r2
 8010ac4:	d003      	beq.n	8010ace <TIM_OC3_SetConfig+0x66>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	4a27      	ldr	r2, [pc, #156]	; (8010b68 <TIM_OC3_SetConfig+0x100>)
 8010aca:	4293      	cmp	r3, r2
 8010acc:	d10d      	bne.n	8010aea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010ace:	697b      	ldr	r3, [r7, #20]
 8010ad0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	68db      	ldr	r3, [r3, #12]
 8010ada:	021b      	lsls	r3, r3, #8
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	4313      	orrs	r3, r2
 8010ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	4a1d      	ldr	r2, [pc, #116]	; (8010b64 <TIM_OC3_SetConfig+0xfc>)
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d00f      	beq.n	8010b12 <TIM_OC3_SetConfig+0xaa>
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4a1c      	ldr	r2, [pc, #112]	; (8010b68 <TIM_OC3_SetConfig+0x100>)
 8010af6:	4293      	cmp	r3, r2
 8010af8:	d00b      	beq.n	8010b12 <TIM_OC3_SetConfig+0xaa>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	4a1b      	ldr	r2, [pc, #108]	; (8010b6c <TIM_OC3_SetConfig+0x104>)
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d007      	beq.n	8010b12 <TIM_OC3_SetConfig+0xaa>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4a1a      	ldr	r2, [pc, #104]	; (8010b70 <TIM_OC3_SetConfig+0x108>)
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d003      	beq.n	8010b12 <TIM_OC3_SetConfig+0xaa>
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	4a19      	ldr	r2, [pc, #100]	; (8010b74 <TIM_OC3_SetConfig+0x10c>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d113      	bne.n	8010b3a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010b18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010b20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	695b      	ldr	r3, [r3, #20]
 8010b26:	011b      	lsls	r3, r3, #4
 8010b28:	693a      	ldr	r2, [r7, #16]
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	699b      	ldr	r3, [r3, #24]
 8010b32:	011b      	lsls	r3, r3, #4
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	4313      	orrs	r3, r2
 8010b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	693a      	ldr	r2, [r7, #16]
 8010b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	68fa      	ldr	r2, [r7, #12]
 8010b44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	685a      	ldr	r2, [r3, #4]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	697a      	ldr	r2, [r7, #20]
 8010b52:	621a      	str	r2, [r3, #32]
}
 8010b54:	bf00      	nop
 8010b56:	371c      	adds	r7, #28
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5e:	4770      	bx	lr
 8010b60:	fffeff8f 	.word	0xfffeff8f
 8010b64:	40010000 	.word	0x40010000
 8010b68:	40010400 	.word	0x40010400
 8010b6c:	40014000 	.word	0x40014000
 8010b70:	40014400 	.word	0x40014400
 8010b74:	40014800 	.word	0x40014800

08010b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	6a1b      	ldr	r3, [r3, #32]
 8010b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a1b      	ldr	r3, [r3, #32]
 8010b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	685b      	ldr	r3, [r3, #4]
 8010b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	69db      	ldr	r3, [r3, #28]
 8010b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010ba0:	68fa      	ldr	r2, [r7, #12]
 8010ba2:	4b24      	ldr	r3, [pc, #144]	; (8010c34 <TIM_OC4_SetConfig+0xbc>)
 8010ba4:	4013      	ands	r3, r2
 8010ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	021b      	lsls	r3, r3, #8
 8010bb6:	68fa      	ldr	r2, [r7, #12]
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	689b      	ldr	r3, [r3, #8]
 8010bc8:	031b      	lsls	r3, r3, #12
 8010bca:	693a      	ldr	r2, [r7, #16]
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	4a19      	ldr	r2, [pc, #100]	; (8010c38 <TIM_OC4_SetConfig+0xc0>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d00f      	beq.n	8010bf8 <TIM_OC4_SetConfig+0x80>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	4a18      	ldr	r2, [pc, #96]	; (8010c3c <TIM_OC4_SetConfig+0xc4>)
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	d00b      	beq.n	8010bf8 <TIM_OC4_SetConfig+0x80>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4a17      	ldr	r2, [pc, #92]	; (8010c40 <TIM_OC4_SetConfig+0xc8>)
 8010be4:	4293      	cmp	r3, r2
 8010be6:	d007      	beq.n	8010bf8 <TIM_OC4_SetConfig+0x80>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	4a16      	ldr	r2, [pc, #88]	; (8010c44 <TIM_OC4_SetConfig+0xcc>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d003      	beq.n	8010bf8 <TIM_OC4_SetConfig+0x80>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4a15      	ldr	r2, [pc, #84]	; (8010c48 <TIM_OC4_SetConfig+0xd0>)
 8010bf4:	4293      	cmp	r3, r2
 8010bf6:	d109      	bne.n	8010c0c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	695b      	ldr	r3, [r3, #20]
 8010c04:	019b      	lsls	r3, r3, #6
 8010c06:	697a      	ldr	r2, [r7, #20]
 8010c08:	4313      	orrs	r3, r2
 8010c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	68fa      	ldr	r2, [r7, #12]
 8010c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	685a      	ldr	r2, [r3, #4]
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	693a      	ldr	r2, [r7, #16]
 8010c24:	621a      	str	r2, [r3, #32]
}
 8010c26:	bf00      	nop
 8010c28:	371c      	adds	r7, #28
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c30:	4770      	bx	lr
 8010c32:	bf00      	nop
 8010c34:	feff8fff 	.word	0xfeff8fff
 8010c38:	40010000 	.word	0x40010000
 8010c3c:	40010400 	.word	0x40010400
 8010c40:	40014000 	.word	0x40014000
 8010c44:	40014400 	.word	0x40014400
 8010c48:	40014800 	.word	0x40014800

08010c4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6a1b      	ldr	r3, [r3, #32]
 8010c5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	6a1b      	ldr	r3, [r3, #32]
 8010c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	4b21      	ldr	r3, [pc, #132]	; (8010cfc <TIM_OC5_SetConfig+0xb0>)
 8010c78:	4013      	ands	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	68fa      	ldr	r2, [r7, #12]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010c8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	689b      	ldr	r3, [r3, #8]
 8010c92:	041b      	lsls	r3, r3, #16
 8010c94:	693a      	ldr	r2, [r7, #16]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	4a18      	ldr	r2, [pc, #96]	; (8010d00 <TIM_OC5_SetConfig+0xb4>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d00f      	beq.n	8010cc2 <TIM_OC5_SetConfig+0x76>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a17      	ldr	r2, [pc, #92]	; (8010d04 <TIM_OC5_SetConfig+0xb8>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d00b      	beq.n	8010cc2 <TIM_OC5_SetConfig+0x76>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a16      	ldr	r2, [pc, #88]	; (8010d08 <TIM_OC5_SetConfig+0xbc>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d007      	beq.n	8010cc2 <TIM_OC5_SetConfig+0x76>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a15      	ldr	r2, [pc, #84]	; (8010d0c <TIM_OC5_SetConfig+0xc0>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d003      	beq.n	8010cc2 <TIM_OC5_SetConfig+0x76>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a14      	ldr	r2, [pc, #80]	; (8010d10 <TIM_OC5_SetConfig+0xc4>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d109      	bne.n	8010cd6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010cca:	683b      	ldr	r3, [r7, #0]
 8010ccc:	695b      	ldr	r3, [r3, #20]
 8010cce:	021b      	lsls	r3, r3, #8
 8010cd0:	697a      	ldr	r2, [r7, #20]
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	697a      	ldr	r2, [r7, #20]
 8010cda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	68fa      	ldr	r2, [r7, #12]
 8010ce0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	621a      	str	r2, [r3, #32]
}
 8010cf0:	bf00      	nop
 8010cf2:	371c      	adds	r7, #28
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cfa:	4770      	bx	lr
 8010cfc:	fffeff8f 	.word	0xfffeff8f
 8010d00:	40010000 	.word	0x40010000
 8010d04:	40010400 	.word	0x40010400
 8010d08:	40014000 	.word	0x40014000
 8010d0c:	40014400 	.word	0x40014400
 8010d10:	40014800 	.word	0x40014800

08010d14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010d14:	b480      	push	{r7}
 8010d16:	b087      	sub	sp, #28
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6a1b      	ldr	r3, [r3, #32]
 8010d2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010d3c:	68fa      	ldr	r2, [r7, #12]
 8010d3e:	4b22      	ldr	r3, [pc, #136]	; (8010dc8 <TIM_OC6_SetConfig+0xb4>)
 8010d40:	4013      	ands	r3, r2
 8010d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	021b      	lsls	r3, r3, #8
 8010d4a:	68fa      	ldr	r2, [r7, #12]
 8010d4c:	4313      	orrs	r3, r2
 8010d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010d56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	689b      	ldr	r3, [r3, #8]
 8010d5c:	051b      	lsls	r3, r3, #20
 8010d5e:	693a      	ldr	r2, [r7, #16]
 8010d60:	4313      	orrs	r3, r2
 8010d62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	4a19      	ldr	r2, [pc, #100]	; (8010dcc <TIM_OC6_SetConfig+0xb8>)
 8010d68:	4293      	cmp	r3, r2
 8010d6a:	d00f      	beq.n	8010d8c <TIM_OC6_SetConfig+0x78>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	4a18      	ldr	r2, [pc, #96]	; (8010dd0 <TIM_OC6_SetConfig+0xbc>)
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d00b      	beq.n	8010d8c <TIM_OC6_SetConfig+0x78>
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	4a17      	ldr	r2, [pc, #92]	; (8010dd4 <TIM_OC6_SetConfig+0xc0>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d007      	beq.n	8010d8c <TIM_OC6_SetConfig+0x78>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	4a16      	ldr	r2, [pc, #88]	; (8010dd8 <TIM_OC6_SetConfig+0xc4>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d003      	beq.n	8010d8c <TIM_OC6_SetConfig+0x78>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	4a15      	ldr	r2, [pc, #84]	; (8010ddc <TIM_OC6_SetConfig+0xc8>)
 8010d88:	4293      	cmp	r3, r2
 8010d8a:	d109      	bne.n	8010da0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010d92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	695b      	ldr	r3, [r3, #20]
 8010d98:	029b      	lsls	r3, r3, #10
 8010d9a:	697a      	ldr	r2, [r7, #20]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	697a      	ldr	r2, [r7, #20]
 8010da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	68fa      	ldr	r2, [r7, #12]
 8010daa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	685a      	ldr	r2, [r3, #4]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	693a      	ldr	r2, [r7, #16]
 8010db8:	621a      	str	r2, [r3, #32]
}
 8010dba:	bf00      	nop
 8010dbc:	371c      	adds	r7, #28
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc4:	4770      	bx	lr
 8010dc6:	bf00      	nop
 8010dc8:	feff8fff 	.word	0xfeff8fff
 8010dcc:	40010000 	.word	0x40010000
 8010dd0:	40010400 	.word	0x40010400
 8010dd4:	40014000 	.word	0x40014000
 8010dd8:	40014400 	.word	0x40014400
 8010ddc:	40014800 	.word	0x40014800

08010de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b087      	sub	sp, #28
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	60f8      	str	r0, [r7, #12]
 8010de8:	60b9      	str	r1, [r7, #8]
 8010dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010dec:	68bb      	ldr	r3, [r7, #8]
 8010dee:	f003 031f 	and.w	r3, r3, #31
 8010df2:	2201      	movs	r2, #1
 8010df4:	fa02 f303 	lsl.w	r3, r2, r3
 8010df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	6a1a      	ldr	r2, [r3, #32]
 8010dfe:	697b      	ldr	r3, [r7, #20]
 8010e00:	43db      	mvns	r3, r3
 8010e02:	401a      	ands	r2, r3
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6a1a      	ldr	r2, [r3, #32]
 8010e0c:	68bb      	ldr	r3, [r7, #8]
 8010e0e:	f003 031f 	and.w	r3, r3, #31
 8010e12:	6879      	ldr	r1, [r7, #4]
 8010e14:	fa01 f303 	lsl.w	r3, r1, r3
 8010e18:	431a      	orrs	r2, r3
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	621a      	str	r2, [r3, #32]
}
 8010e1e:	bf00      	nop
 8010e20:	371c      	adds	r7, #28
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
	...

08010e2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d101      	bne.n	8010e44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010e40:	2302      	movs	r3, #2
 8010e42:	e077      	b.n	8010f34 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2201      	movs	r2, #1
 8010e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2202      	movs	r2, #2
 8010e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	685b      	ldr	r3, [r3, #4]
 8010e5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	4a35      	ldr	r2, [pc, #212]	; (8010f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010e6a:	4293      	cmp	r3, r2
 8010e6c:	d004      	beq.n	8010e78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	4a34      	ldr	r2, [pc, #208]	; (8010f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d108      	bne.n	8010e8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010e7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	4313      	orrs	r3, r2
 8010e88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	4313      	orrs	r3, r2
 8010e9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	68fa      	ldr	r2, [r7, #12]
 8010ea2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4a25      	ldr	r2, [pc, #148]	; (8010f40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010eaa:	4293      	cmp	r3, r2
 8010eac:	d02c      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010eb6:	d027      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	4a22      	ldr	r2, [pc, #136]	; (8010f48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d022      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	4a21      	ldr	r2, [pc, #132]	; (8010f4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010ec8:	4293      	cmp	r3, r2
 8010eca:	d01d      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4a1f      	ldr	r2, [pc, #124]	; (8010f50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d018      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	4a1a      	ldr	r2, [pc, #104]	; (8010f44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d013      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	4a1b      	ldr	r2, [pc, #108]	; (8010f54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d00e      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	4a1a      	ldr	r2, [pc, #104]	; (8010f58 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d009      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	4a18      	ldr	r2, [pc, #96]	; (8010f5c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010efa:	4293      	cmp	r3, r2
 8010efc:	d004      	beq.n	8010f08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	4a17      	ldr	r2, [pc, #92]	; (8010f60 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d10c      	bne.n	8010f22 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	68ba      	ldr	r2, [r7, #8]
 8010f16:	4313      	orrs	r3, r2
 8010f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68ba      	ldr	r2, [r7, #8]
 8010f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3714      	adds	r7, #20
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr
 8010f40:	40010000 	.word	0x40010000
 8010f44:	40010400 	.word	0x40010400
 8010f48:	40000400 	.word	0x40000400
 8010f4c:	40000800 	.word	0x40000800
 8010f50:	40000c00 	.word	0x40000c00
 8010f54:	40001800 	.word	0x40001800
 8010f58:	40014000 	.word	0x40014000
 8010f5c:	4000e000 	.word	0x4000e000
 8010f60:	4000e400 	.word	0x4000e400

08010f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010f6c:	bf00      	nop
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d101      	bne.n	8010fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e042      	b.n	8011038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d106      	bne.n	8010fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7f2 fc35 	bl	8003834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	2224      	movs	r2, #36	; 0x24
 8010fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	681a      	ldr	r2, [r3, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f022 0201 	bic.w	r2, r2, #1
 8010fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010fe2:	6878      	ldr	r0, [r7, #4]
 8010fe4:	f000 f82c 	bl	8011040 <UART_SetConfig>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b01      	cmp	r3, #1
 8010fec:	d101      	bne.n	8010ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e022      	b.n	8011038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d002      	beq.n	8011000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fe8c 	bl	8011d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	685a      	ldr	r2, [r3, #4]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801100e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	689a      	ldr	r2, [r3, #8]
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801101e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f042 0201 	orr.w	r2, r2, #1
 801102e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 ff13 	bl	8011e5c <UART_CheckIdleState>
 8011036:	4603      	mov	r3, r0
}
 8011038:	4618      	mov	r0, r3
 801103a:	3708      	adds	r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011044:	b092      	sub	sp, #72	; 0x48
 8011046:	af00      	add	r7, sp, #0
 8011048:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	689a      	ldr	r2, [r3, #8]
 8011054:	697b      	ldr	r3, [r7, #20]
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	431a      	orrs	r2, r3
 801105a:	697b      	ldr	r3, [r7, #20]
 801105c:	695b      	ldr	r3, [r3, #20]
 801105e:	431a      	orrs	r2, r3
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	69db      	ldr	r3, [r3, #28]
 8011064:	4313      	orrs	r3, r2
 8011066:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	4bbe      	ldr	r3, [pc, #760]	; (8011368 <UART_SetConfig+0x328>)
 8011070:	4013      	ands	r3, r2
 8011072:	697a      	ldr	r2, [r7, #20]
 8011074:	6812      	ldr	r2, [r2, #0]
 8011076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011078:	430b      	orrs	r3, r1
 801107a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	68da      	ldr	r2, [r3, #12]
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	430a      	orrs	r2, r1
 8011090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011092:	697b      	ldr	r3, [r7, #20]
 8011094:	699b      	ldr	r3, [r3, #24]
 8011096:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4ab3      	ldr	r2, [pc, #716]	; (801136c <UART_SetConfig+0x32c>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d004      	beq.n	80110ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	6a1b      	ldr	r3, [r3, #32]
 80110a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110a8:	4313      	orrs	r3, r2
 80110aa:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	689a      	ldr	r2, [r3, #8]
 80110b2:	4baf      	ldr	r3, [pc, #700]	; (8011370 <UART_SetConfig+0x330>)
 80110b4:	4013      	ands	r3, r2
 80110b6:	697a      	ldr	r2, [r7, #20]
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110bc:	430b      	orrs	r3, r1
 80110be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c6:	f023 010f 	bic.w	r1, r3, #15
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110ce:	697b      	ldr	r3, [r7, #20]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	430a      	orrs	r2, r1
 80110d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80110d6:	697b      	ldr	r3, [r7, #20]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	4aa6      	ldr	r2, [pc, #664]	; (8011374 <UART_SetConfig+0x334>)
 80110dc:	4293      	cmp	r3, r2
 80110de:	d177      	bne.n	80111d0 <UART_SetConfig+0x190>
 80110e0:	4ba5      	ldr	r3, [pc, #660]	; (8011378 <UART_SetConfig+0x338>)
 80110e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110e8:	2b28      	cmp	r3, #40	; 0x28
 80110ea:	d86d      	bhi.n	80111c8 <UART_SetConfig+0x188>
 80110ec:	a201      	add	r2, pc, #4	; (adr r2, 80110f4 <UART_SetConfig+0xb4>)
 80110ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110f2:	bf00      	nop
 80110f4:	08011199 	.word	0x08011199
 80110f8:	080111c9 	.word	0x080111c9
 80110fc:	080111c9 	.word	0x080111c9
 8011100:	080111c9 	.word	0x080111c9
 8011104:	080111c9 	.word	0x080111c9
 8011108:	080111c9 	.word	0x080111c9
 801110c:	080111c9 	.word	0x080111c9
 8011110:	080111c9 	.word	0x080111c9
 8011114:	080111a1 	.word	0x080111a1
 8011118:	080111c9 	.word	0x080111c9
 801111c:	080111c9 	.word	0x080111c9
 8011120:	080111c9 	.word	0x080111c9
 8011124:	080111c9 	.word	0x080111c9
 8011128:	080111c9 	.word	0x080111c9
 801112c:	080111c9 	.word	0x080111c9
 8011130:	080111c9 	.word	0x080111c9
 8011134:	080111a9 	.word	0x080111a9
 8011138:	080111c9 	.word	0x080111c9
 801113c:	080111c9 	.word	0x080111c9
 8011140:	080111c9 	.word	0x080111c9
 8011144:	080111c9 	.word	0x080111c9
 8011148:	080111c9 	.word	0x080111c9
 801114c:	080111c9 	.word	0x080111c9
 8011150:	080111c9 	.word	0x080111c9
 8011154:	080111b1 	.word	0x080111b1
 8011158:	080111c9 	.word	0x080111c9
 801115c:	080111c9 	.word	0x080111c9
 8011160:	080111c9 	.word	0x080111c9
 8011164:	080111c9 	.word	0x080111c9
 8011168:	080111c9 	.word	0x080111c9
 801116c:	080111c9 	.word	0x080111c9
 8011170:	080111c9 	.word	0x080111c9
 8011174:	080111b9 	.word	0x080111b9
 8011178:	080111c9 	.word	0x080111c9
 801117c:	080111c9 	.word	0x080111c9
 8011180:	080111c9 	.word	0x080111c9
 8011184:	080111c9 	.word	0x080111c9
 8011188:	080111c9 	.word	0x080111c9
 801118c:	080111c9 	.word	0x080111c9
 8011190:	080111c9 	.word	0x080111c9
 8011194:	080111c1 	.word	0x080111c1
 8011198:	2301      	movs	r3, #1
 801119a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119e:	e326      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111a0:	2304      	movs	r3, #4
 80111a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a6:	e322      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111a8:	2308      	movs	r3, #8
 80111aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ae:	e31e      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111b0:	2310      	movs	r3, #16
 80111b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111b6:	e31a      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111b8:	2320      	movs	r3, #32
 80111ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111be:	e316      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111c0:	2340      	movs	r3, #64	; 0x40
 80111c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111c6:	e312      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111c8:	2380      	movs	r3, #128	; 0x80
 80111ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ce:	e30e      	b.n	80117ee <UART_SetConfig+0x7ae>
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	4a69      	ldr	r2, [pc, #420]	; (801137c <UART_SetConfig+0x33c>)
 80111d6:	4293      	cmp	r3, r2
 80111d8:	d130      	bne.n	801123c <UART_SetConfig+0x1fc>
 80111da:	4b67      	ldr	r3, [pc, #412]	; (8011378 <UART_SetConfig+0x338>)
 80111dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111de:	f003 0307 	and.w	r3, r3, #7
 80111e2:	2b05      	cmp	r3, #5
 80111e4:	d826      	bhi.n	8011234 <UART_SetConfig+0x1f4>
 80111e6:	a201      	add	r2, pc, #4	; (adr r2, 80111ec <UART_SetConfig+0x1ac>)
 80111e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ec:	08011205 	.word	0x08011205
 80111f0:	0801120d 	.word	0x0801120d
 80111f4:	08011215 	.word	0x08011215
 80111f8:	0801121d 	.word	0x0801121d
 80111fc:	08011225 	.word	0x08011225
 8011200:	0801122d 	.word	0x0801122d
 8011204:	2300      	movs	r3, #0
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e2f0      	b.n	80117ee <UART_SetConfig+0x7ae>
 801120c:	2304      	movs	r3, #4
 801120e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011212:	e2ec      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011214:	2308      	movs	r3, #8
 8011216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801121a:	e2e8      	b.n	80117ee <UART_SetConfig+0x7ae>
 801121c:	2310      	movs	r3, #16
 801121e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011222:	e2e4      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011224:	2320      	movs	r3, #32
 8011226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801122a:	e2e0      	b.n	80117ee <UART_SetConfig+0x7ae>
 801122c:	2340      	movs	r3, #64	; 0x40
 801122e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011232:	e2dc      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011234:	2380      	movs	r3, #128	; 0x80
 8011236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801123a:	e2d8      	b.n	80117ee <UART_SetConfig+0x7ae>
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	4a4f      	ldr	r2, [pc, #316]	; (8011380 <UART_SetConfig+0x340>)
 8011242:	4293      	cmp	r3, r2
 8011244:	d130      	bne.n	80112a8 <UART_SetConfig+0x268>
 8011246:	4b4c      	ldr	r3, [pc, #304]	; (8011378 <UART_SetConfig+0x338>)
 8011248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801124a:	f003 0307 	and.w	r3, r3, #7
 801124e:	2b05      	cmp	r3, #5
 8011250:	d826      	bhi.n	80112a0 <UART_SetConfig+0x260>
 8011252:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <UART_SetConfig+0x218>)
 8011254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011258:	08011271 	.word	0x08011271
 801125c:	08011279 	.word	0x08011279
 8011260:	08011281 	.word	0x08011281
 8011264:	08011289 	.word	0x08011289
 8011268:	08011291 	.word	0x08011291
 801126c:	08011299 	.word	0x08011299
 8011270:	2300      	movs	r3, #0
 8011272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011276:	e2ba      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011278:	2304      	movs	r3, #4
 801127a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801127e:	e2b6      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011280:	2308      	movs	r3, #8
 8011282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011286:	e2b2      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011288:	2310      	movs	r3, #16
 801128a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801128e:	e2ae      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011290:	2320      	movs	r3, #32
 8011292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011296:	e2aa      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011298:	2340      	movs	r3, #64	; 0x40
 801129a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801129e:	e2a6      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112a0:	2380      	movs	r3, #128	; 0x80
 80112a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112a6:	e2a2      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a35      	ldr	r2, [pc, #212]	; (8011384 <UART_SetConfig+0x344>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d130      	bne.n	8011314 <UART_SetConfig+0x2d4>
 80112b2:	4b31      	ldr	r3, [pc, #196]	; (8011378 <UART_SetConfig+0x338>)
 80112b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80112b6:	f003 0307 	and.w	r3, r3, #7
 80112ba:	2b05      	cmp	r3, #5
 80112bc:	d826      	bhi.n	801130c <UART_SetConfig+0x2cc>
 80112be:	a201      	add	r2, pc, #4	; (adr r2, 80112c4 <UART_SetConfig+0x284>)
 80112c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c4:	080112dd 	.word	0x080112dd
 80112c8:	080112e5 	.word	0x080112e5
 80112cc:	080112ed 	.word	0x080112ed
 80112d0:	080112f5 	.word	0x080112f5
 80112d4:	080112fd 	.word	0x080112fd
 80112d8:	08011305 	.word	0x08011305
 80112dc:	2300      	movs	r3, #0
 80112de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e2:	e284      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112e4:	2304      	movs	r3, #4
 80112e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ea:	e280      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112ec:	2308      	movs	r3, #8
 80112ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f2:	e27c      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112f4:	2310      	movs	r3, #16
 80112f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fa:	e278      	b.n	80117ee <UART_SetConfig+0x7ae>
 80112fc:	2320      	movs	r3, #32
 80112fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011302:	e274      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011304:	2340      	movs	r3, #64	; 0x40
 8011306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130a:	e270      	b.n	80117ee <UART_SetConfig+0x7ae>
 801130c:	2380      	movs	r3, #128	; 0x80
 801130e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011312:	e26c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4a1b      	ldr	r2, [pc, #108]	; (8011388 <UART_SetConfig+0x348>)
 801131a:	4293      	cmp	r3, r2
 801131c:	d142      	bne.n	80113a4 <UART_SetConfig+0x364>
 801131e:	4b16      	ldr	r3, [pc, #88]	; (8011378 <UART_SetConfig+0x338>)
 8011320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011322:	f003 0307 	and.w	r3, r3, #7
 8011326:	2b05      	cmp	r3, #5
 8011328:	d838      	bhi.n	801139c <UART_SetConfig+0x35c>
 801132a:	a201      	add	r2, pc, #4	; (adr r2, 8011330 <UART_SetConfig+0x2f0>)
 801132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011330:	08011349 	.word	0x08011349
 8011334:	08011351 	.word	0x08011351
 8011338:	08011359 	.word	0x08011359
 801133c:	08011361 	.word	0x08011361
 8011340:	0801138d 	.word	0x0801138d
 8011344:	08011395 	.word	0x08011395
 8011348:	2300      	movs	r3, #0
 801134a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801134e:	e24e      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011350:	2304      	movs	r3, #4
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e24a      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011358:	2308      	movs	r3, #8
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e246      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011360:	2310      	movs	r3, #16
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e242      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011368:	cfff69f3 	.word	0xcfff69f3
 801136c:	58000c00 	.word	0x58000c00
 8011370:	11fff4ff 	.word	0x11fff4ff
 8011374:	40011000 	.word	0x40011000
 8011378:	58024400 	.word	0x58024400
 801137c:	40004400 	.word	0x40004400
 8011380:	40004800 	.word	0x40004800
 8011384:	40004c00 	.word	0x40004c00
 8011388:	40005000 	.word	0x40005000
 801138c:	2320      	movs	r3, #32
 801138e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011392:	e22c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011394:	2340      	movs	r3, #64	; 0x40
 8011396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801139a:	e228      	b.n	80117ee <UART_SetConfig+0x7ae>
 801139c:	2380      	movs	r3, #128	; 0x80
 801139e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113a2:	e224      	b.n	80117ee <UART_SetConfig+0x7ae>
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	4ab1      	ldr	r2, [pc, #708]	; (8011670 <UART_SetConfig+0x630>)
 80113aa:	4293      	cmp	r3, r2
 80113ac:	d176      	bne.n	801149c <UART_SetConfig+0x45c>
 80113ae:	4bb1      	ldr	r3, [pc, #708]	; (8011674 <UART_SetConfig+0x634>)
 80113b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80113b6:	2b28      	cmp	r3, #40	; 0x28
 80113b8:	d86c      	bhi.n	8011494 <UART_SetConfig+0x454>
 80113ba:	a201      	add	r2, pc, #4	; (adr r2, 80113c0 <UART_SetConfig+0x380>)
 80113bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c0:	08011465 	.word	0x08011465
 80113c4:	08011495 	.word	0x08011495
 80113c8:	08011495 	.word	0x08011495
 80113cc:	08011495 	.word	0x08011495
 80113d0:	08011495 	.word	0x08011495
 80113d4:	08011495 	.word	0x08011495
 80113d8:	08011495 	.word	0x08011495
 80113dc:	08011495 	.word	0x08011495
 80113e0:	0801146d 	.word	0x0801146d
 80113e4:	08011495 	.word	0x08011495
 80113e8:	08011495 	.word	0x08011495
 80113ec:	08011495 	.word	0x08011495
 80113f0:	08011495 	.word	0x08011495
 80113f4:	08011495 	.word	0x08011495
 80113f8:	08011495 	.word	0x08011495
 80113fc:	08011495 	.word	0x08011495
 8011400:	08011475 	.word	0x08011475
 8011404:	08011495 	.word	0x08011495
 8011408:	08011495 	.word	0x08011495
 801140c:	08011495 	.word	0x08011495
 8011410:	08011495 	.word	0x08011495
 8011414:	08011495 	.word	0x08011495
 8011418:	08011495 	.word	0x08011495
 801141c:	08011495 	.word	0x08011495
 8011420:	0801147d 	.word	0x0801147d
 8011424:	08011495 	.word	0x08011495
 8011428:	08011495 	.word	0x08011495
 801142c:	08011495 	.word	0x08011495
 8011430:	08011495 	.word	0x08011495
 8011434:	08011495 	.word	0x08011495
 8011438:	08011495 	.word	0x08011495
 801143c:	08011495 	.word	0x08011495
 8011440:	08011485 	.word	0x08011485
 8011444:	08011495 	.word	0x08011495
 8011448:	08011495 	.word	0x08011495
 801144c:	08011495 	.word	0x08011495
 8011450:	08011495 	.word	0x08011495
 8011454:	08011495 	.word	0x08011495
 8011458:	08011495 	.word	0x08011495
 801145c:	08011495 	.word	0x08011495
 8011460:	0801148d 	.word	0x0801148d
 8011464:	2301      	movs	r3, #1
 8011466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801146a:	e1c0      	b.n	80117ee <UART_SetConfig+0x7ae>
 801146c:	2304      	movs	r3, #4
 801146e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011472:	e1bc      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011474:	2308      	movs	r3, #8
 8011476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801147a:	e1b8      	b.n	80117ee <UART_SetConfig+0x7ae>
 801147c:	2310      	movs	r3, #16
 801147e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011482:	e1b4      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011484:	2320      	movs	r3, #32
 8011486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801148a:	e1b0      	b.n	80117ee <UART_SetConfig+0x7ae>
 801148c:	2340      	movs	r3, #64	; 0x40
 801148e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011492:	e1ac      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011494:	2380      	movs	r3, #128	; 0x80
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149a:	e1a8      	b.n	80117ee <UART_SetConfig+0x7ae>
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a75      	ldr	r2, [pc, #468]	; (8011678 <UART_SetConfig+0x638>)
 80114a2:	4293      	cmp	r3, r2
 80114a4:	d130      	bne.n	8011508 <UART_SetConfig+0x4c8>
 80114a6:	4b73      	ldr	r3, [pc, #460]	; (8011674 <UART_SetConfig+0x634>)
 80114a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114aa:	f003 0307 	and.w	r3, r3, #7
 80114ae:	2b05      	cmp	r3, #5
 80114b0:	d826      	bhi.n	8011500 <UART_SetConfig+0x4c0>
 80114b2:	a201      	add	r2, pc, #4	; (adr r2, 80114b8 <UART_SetConfig+0x478>)
 80114b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114b8:	080114d1 	.word	0x080114d1
 80114bc:	080114d9 	.word	0x080114d9
 80114c0:	080114e1 	.word	0x080114e1
 80114c4:	080114e9 	.word	0x080114e9
 80114c8:	080114f1 	.word	0x080114f1
 80114cc:	080114f9 	.word	0x080114f9
 80114d0:	2300      	movs	r3, #0
 80114d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114d6:	e18a      	b.n	80117ee <UART_SetConfig+0x7ae>
 80114d8:	2304      	movs	r3, #4
 80114da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114de:	e186      	b.n	80117ee <UART_SetConfig+0x7ae>
 80114e0:	2308      	movs	r3, #8
 80114e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114e6:	e182      	b.n	80117ee <UART_SetConfig+0x7ae>
 80114e8:	2310      	movs	r3, #16
 80114ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ee:	e17e      	b.n	80117ee <UART_SetConfig+0x7ae>
 80114f0:	2320      	movs	r3, #32
 80114f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114f6:	e17a      	b.n	80117ee <UART_SetConfig+0x7ae>
 80114f8:	2340      	movs	r3, #64	; 0x40
 80114fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114fe:	e176      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011500:	2380      	movs	r3, #128	; 0x80
 8011502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011506:	e172      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4a5b      	ldr	r2, [pc, #364]	; (801167c <UART_SetConfig+0x63c>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d130      	bne.n	8011574 <UART_SetConfig+0x534>
 8011512:	4b58      	ldr	r3, [pc, #352]	; (8011674 <UART_SetConfig+0x634>)
 8011514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011516:	f003 0307 	and.w	r3, r3, #7
 801151a:	2b05      	cmp	r3, #5
 801151c:	d826      	bhi.n	801156c <UART_SetConfig+0x52c>
 801151e:	a201      	add	r2, pc, #4	; (adr r2, 8011524 <UART_SetConfig+0x4e4>)
 8011520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011524:	0801153d 	.word	0x0801153d
 8011528:	08011545 	.word	0x08011545
 801152c:	0801154d 	.word	0x0801154d
 8011530:	08011555 	.word	0x08011555
 8011534:	0801155d 	.word	0x0801155d
 8011538:	08011565 	.word	0x08011565
 801153c:	2300      	movs	r3, #0
 801153e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011542:	e154      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011544:	2304      	movs	r3, #4
 8011546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154a:	e150      	b.n	80117ee <UART_SetConfig+0x7ae>
 801154c:	2308      	movs	r3, #8
 801154e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011552:	e14c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011554:	2310      	movs	r3, #16
 8011556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155a:	e148      	b.n	80117ee <UART_SetConfig+0x7ae>
 801155c:	2320      	movs	r3, #32
 801155e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011562:	e144      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011564:	2340      	movs	r3, #64	; 0x40
 8011566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801156a:	e140      	b.n	80117ee <UART_SetConfig+0x7ae>
 801156c:	2380      	movs	r3, #128	; 0x80
 801156e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011572:	e13c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	4a41      	ldr	r2, [pc, #260]	; (8011680 <UART_SetConfig+0x640>)
 801157a:	4293      	cmp	r3, r2
 801157c:	f040 8082 	bne.w	8011684 <UART_SetConfig+0x644>
 8011580:	4b3c      	ldr	r3, [pc, #240]	; (8011674 <UART_SetConfig+0x634>)
 8011582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011588:	2b28      	cmp	r3, #40	; 0x28
 801158a:	d86d      	bhi.n	8011668 <UART_SetConfig+0x628>
 801158c:	a201      	add	r2, pc, #4	; (adr r2, 8011594 <UART_SetConfig+0x554>)
 801158e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011592:	bf00      	nop
 8011594:	08011639 	.word	0x08011639
 8011598:	08011669 	.word	0x08011669
 801159c:	08011669 	.word	0x08011669
 80115a0:	08011669 	.word	0x08011669
 80115a4:	08011669 	.word	0x08011669
 80115a8:	08011669 	.word	0x08011669
 80115ac:	08011669 	.word	0x08011669
 80115b0:	08011669 	.word	0x08011669
 80115b4:	08011641 	.word	0x08011641
 80115b8:	08011669 	.word	0x08011669
 80115bc:	08011669 	.word	0x08011669
 80115c0:	08011669 	.word	0x08011669
 80115c4:	08011669 	.word	0x08011669
 80115c8:	08011669 	.word	0x08011669
 80115cc:	08011669 	.word	0x08011669
 80115d0:	08011669 	.word	0x08011669
 80115d4:	08011649 	.word	0x08011649
 80115d8:	08011669 	.word	0x08011669
 80115dc:	08011669 	.word	0x08011669
 80115e0:	08011669 	.word	0x08011669
 80115e4:	08011669 	.word	0x08011669
 80115e8:	08011669 	.word	0x08011669
 80115ec:	08011669 	.word	0x08011669
 80115f0:	08011669 	.word	0x08011669
 80115f4:	08011651 	.word	0x08011651
 80115f8:	08011669 	.word	0x08011669
 80115fc:	08011669 	.word	0x08011669
 8011600:	08011669 	.word	0x08011669
 8011604:	08011669 	.word	0x08011669
 8011608:	08011669 	.word	0x08011669
 801160c:	08011669 	.word	0x08011669
 8011610:	08011669 	.word	0x08011669
 8011614:	08011659 	.word	0x08011659
 8011618:	08011669 	.word	0x08011669
 801161c:	08011669 	.word	0x08011669
 8011620:	08011669 	.word	0x08011669
 8011624:	08011669 	.word	0x08011669
 8011628:	08011669 	.word	0x08011669
 801162c:	08011669 	.word	0x08011669
 8011630:	08011669 	.word	0x08011669
 8011634:	08011661 	.word	0x08011661
 8011638:	2301      	movs	r3, #1
 801163a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163e:	e0d6      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011640:	2304      	movs	r3, #4
 8011642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011646:	e0d2      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011648:	2308      	movs	r3, #8
 801164a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164e:	e0ce      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011650:	2310      	movs	r3, #16
 8011652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011656:	e0ca      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011658:	2320      	movs	r3, #32
 801165a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801165e:	e0c6      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011660:	2340      	movs	r3, #64	; 0x40
 8011662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011666:	e0c2      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011668:	2380      	movs	r3, #128	; 0x80
 801166a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801166e:	e0be      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011670:	40011400 	.word	0x40011400
 8011674:	58024400 	.word	0x58024400
 8011678:	40007800 	.word	0x40007800
 801167c:	40007c00 	.word	0x40007c00
 8011680:	40011800 	.word	0x40011800
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	4aad      	ldr	r2, [pc, #692]	; (8011940 <UART_SetConfig+0x900>)
 801168a:	4293      	cmp	r3, r2
 801168c:	d176      	bne.n	801177c <UART_SetConfig+0x73c>
 801168e:	4bad      	ldr	r3, [pc, #692]	; (8011944 <UART_SetConfig+0x904>)
 8011690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011692:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011696:	2b28      	cmp	r3, #40	; 0x28
 8011698:	d86c      	bhi.n	8011774 <UART_SetConfig+0x734>
 801169a:	a201      	add	r2, pc, #4	; (adr r2, 80116a0 <UART_SetConfig+0x660>)
 801169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a0:	08011745 	.word	0x08011745
 80116a4:	08011775 	.word	0x08011775
 80116a8:	08011775 	.word	0x08011775
 80116ac:	08011775 	.word	0x08011775
 80116b0:	08011775 	.word	0x08011775
 80116b4:	08011775 	.word	0x08011775
 80116b8:	08011775 	.word	0x08011775
 80116bc:	08011775 	.word	0x08011775
 80116c0:	0801174d 	.word	0x0801174d
 80116c4:	08011775 	.word	0x08011775
 80116c8:	08011775 	.word	0x08011775
 80116cc:	08011775 	.word	0x08011775
 80116d0:	08011775 	.word	0x08011775
 80116d4:	08011775 	.word	0x08011775
 80116d8:	08011775 	.word	0x08011775
 80116dc:	08011775 	.word	0x08011775
 80116e0:	08011755 	.word	0x08011755
 80116e4:	08011775 	.word	0x08011775
 80116e8:	08011775 	.word	0x08011775
 80116ec:	08011775 	.word	0x08011775
 80116f0:	08011775 	.word	0x08011775
 80116f4:	08011775 	.word	0x08011775
 80116f8:	08011775 	.word	0x08011775
 80116fc:	08011775 	.word	0x08011775
 8011700:	0801175d 	.word	0x0801175d
 8011704:	08011775 	.word	0x08011775
 8011708:	08011775 	.word	0x08011775
 801170c:	08011775 	.word	0x08011775
 8011710:	08011775 	.word	0x08011775
 8011714:	08011775 	.word	0x08011775
 8011718:	08011775 	.word	0x08011775
 801171c:	08011775 	.word	0x08011775
 8011720:	08011765 	.word	0x08011765
 8011724:	08011775 	.word	0x08011775
 8011728:	08011775 	.word	0x08011775
 801172c:	08011775 	.word	0x08011775
 8011730:	08011775 	.word	0x08011775
 8011734:	08011775 	.word	0x08011775
 8011738:	08011775 	.word	0x08011775
 801173c:	08011775 	.word	0x08011775
 8011740:	0801176d 	.word	0x0801176d
 8011744:	2301      	movs	r3, #1
 8011746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801174a:	e050      	b.n	80117ee <UART_SetConfig+0x7ae>
 801174c:	2304      	movs	r3, #4
 801174e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011752:	e04c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011754:	2308      	movs	r3, #8
 8011756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801175a:	e048      	b.n	80117ee <UART_SetConfig+0x7ae>
 801175c:	2310      	movs	r3, #16
 801175e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011762:	e044      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011764:	2320      	movs	r3, #32
 8011766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801176a:	e040      	b.n	80117ee <UART_SetConfig+0x7ae>
 801176c:	2340      	movs	r3, #64	; 0x40
 801176e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011772:	e03c      	b.n	80117ee <UART_SetConfig+0x7ae>
 8011774:	2380      	movs	r3, #128	; 0x80
 8011776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801177a:	e038      	b.n	80117ee <UART_SetConfig+0x7ae>
 801177c:	697b      	ldr	r3, [r7, #20]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	4a71      	ldr	r2, [pc, #452]	; (8011948 <UART_SetConfig+0x908>)
 8011782:	4293      	cmp	r3, r2
 8011784:	d130      	bne.n	80117e8 <UART_SetConfig+0x7a8>
 8011786:	4b6f      	ldr	r3, [pc, #444]	; (8011944 <UART_SetConfig+0x904>)
 8011788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801178a:	f003 0307 	and.w	r3, r3, #7
 801178e:	2b05      	cmp	r3, #5
 8011790:	d826      	bhi.n	80117e0 <UART_SetConfig+0x7a0>
 8011792:	a201      	add	r2, pc, #4	; (adr r2, 8011798 <UART_SetConfig+0x758>)
 8011794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011798:	080117b1 	.word	0x080117b1
 801179c:	080117b9 	.word	0x080117b9
 80117a0:	080117c1 	.word	0x080117c1
 80117a4:	080117c9 	.word	0x080117c9
 80117a8:	080117d1 	.word	0x080117d1
 80117ac:	080117d9 	.word	0x080117d9
 80117b0:	2302      	movs	r3, #2
 80117b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117b6:	e01a      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117b8:	2304      	movs	r3, #4
 80117ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117be:	e016      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117c0:	2308      	movs	r3, #8
 80117c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117c6:	e012      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117c8:	2310      	movs	r3, #16
 80117ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117ce:	e00e      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117d0:	2320      	movs	r3, #32
 80117d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117d6:	e00a      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117d8:	2340      	movs	r3, #64	; 0x40
 80117da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117de:	e006      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117e0:	2380      	movs	r3, #128	; 0x80
 80117e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117e6:	e002      	b.n	80117ee <UART_SetConfig+0x7ae>
 80117e8:	2380      	movs	r3, #128	; 0x80
 80117ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80117ee:	697b      	ldr	r3, [r7, #20]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	4a55      	ldr	r2, [pc, #340]	; (8011948 <UART_SetConfig+0x908>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	f040 80f8 	bne.w	80119ea <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80117fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80117fe:	2b20      	cmp	r3, #32
 8011800:	dc46      	bgt.n	8011890 <UART_SetConfig+0x850>
 8011802:	2b02      	cmp	r3, #2
 8011804:	db75      	blt.n	80118f2 <UART_SetConfig+0x8b2>
 8011806:	3b02      	subs	r3, #2
 8011808:	2b1e      	cmp	r3, #30
 801180a:	d872      	bhi.n	80118f2 <UART_SetConfig+0x8b2>
 801180c:	a201      	add	r2, pc, #4	; (adr r2, 8011814 <UART_SetConfig+0x7d4>)
 801180e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011812:	bf00      	nop
 8011814:	08011897 	.word	0x08011897
 8011818:	080118f3 	.word	0x080118f3
 801181c:	0801189f 	.word	0x0801189f
 8011820:	080118f3 	.word	0x080118f3
 8011824:	080118f3 	.word	0x080118f3
 8011828:	080118f3 	.word	0x080118f3
 801182c:	080118af 	.word	0x080118af
 8011830:	080118f3 	.word	0x080118f3
 8011834:	080118f3 	.word	0x080118f3
 8011838:	080118f3 	.word	0x080118f3
 801183c:	080118f3 	.word	0x080118f3
 8011840:	080118f3 	.word	0x080118f3
 8011844:	080118f3 	.word	0x080118f3
 8011848:	080118f3 	.word	0x080118f3
 801184c:	080118bf 	.word	0x080118bf
 8011850:	080118f3 	.word	0x080118f3
 8011854:	080118f3 	.word	0x080118f3
 8011858:	080118f3 	.word	0x080118f3
 801185c:	080118f3 	.word	0x080118f3
 8011860:	080118f3 	.word	0x080118f3
 8011864:	080118f3 	.word	0x080118f3
 8011868:	080118f3 	.word	0x080118f3
 801186c:	080118f3 	.word	0x080118f3
 8011870:	080118f3 	.word	0x080118f3
 8011874:	080118f3 	.word	0x080118f3
 8011878:	080118f3 	.word	0x080118f3
 801187c:	080118f3 	.word	0x080118f3
 8011880:	080118f3 	.word	0x080118f3
 8011884:	080118f3 	.word	0x080118f3
 8011888:	080118f3 	.word	0x080118f3
 801188c:	080118e5 	.word	0x080118e5
 8011890:	2b40      	cmp	r3, #64	; 0x40
 8011892:	d02a      	beq.n	80118ea <UART_SetConfig+0x8aa>
 8011894:	e02d      	b.n	80118f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011896:	f7fb f86b 	bl	800c970 <HAL_RCCEx_GetD3PCLK1Freq>
 801189a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801189c:	e02f      	b.n	80118fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fb f87a 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80118a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118ac:	e027      	b.n	80118fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118ae:	f107 0318 	add.w	r3, r7, #24
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fb f9c6 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80118b8:	69fb      	ldr	r3, [r7, #28]
 80118ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118bc:	e01f      	b.n	80118fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80118be:	4b21      	ldr	r3, [pc, #132]	; (8011944 <UART_SetConfig+0x904>)
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	f003 0320 	and.w	r3, r3, #32
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d009      	beq.n	80118de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80118ca:	4b1e      	ldr	r3, [pc, #120]	; (8011944 <UART_SetConfig+0x904>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	08db      	lsrs	r3, r3, #3
 80118d0:	f003 0303 	and.w	r3, r3, #3
 80118d4:	4a1d      	ldr	r2, [pc, #116]	; (801194c <UART_SetConfig+0x90c>)
 80118d6:	fa22 f303 	lsr.w	r3, r2, r3
 80118da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80118dc:	e00f      	b.n	80118fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80118de:	4b1b      	ldr	r3, [pc, #108]	; (801194c <UART_SetConfig+0x90c>)
 80118e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e2:	e00c      	b.n	80118fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80118e4:	4b1a      	ldr	r3, [pc, #104]	; (8011950 <UART_SetConfig+0x910>)
 80118e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118e8:	e009      	b.n	80118fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80118ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80118ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118f0:	e005      	b.n	80118fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80118f2:	2300      	movs	r3, #0
 80118f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80118f6:	2301      	movs	r3, #1
 80118f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80118fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80118fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011900:	2b00      	cmp	r3, #0
 8011902:	f000 81ee 	beq.w	8011ce2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190a:	4a12      	ldr	r2, [pc, #72]	; (8011954 <UART_SetConfig+0x914>)
 801190c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011910:	461a      	mov	r2, r3
 8011912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011914:	fbb3 f3f2 	udiv	r3, r3, r2
 8011918:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	685a      	ldr	r2, [r3, #4]
 801191e:	4613      	mov	r3, r2
 8011920:	005b      	lsls	r3, r3, #1
 8011922:	4413      	add	r3, r2
 8011924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011926:	429a      	cmp	r2, r3
 8011928:	d305      	bcc.n	8011936 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011932:	429a      	cmp	r2, r3
 8011934:	d910      	bls.n	8011958 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011936:	2301      	movs	r3, #1
 8011938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801193c:	e1d1      	b.n	8011ce2 <UART_SetConfig+0xca2>
 801193e:	bf00      	nop
 8011940:	40011c00 	.word	0x40011c00
 8011944:	58024400 	.word	0x58024400
 8011948:	58000c00 	.word	0x58000c00
 801194c:	03d09000 	.word	0x03d09000
 8011950:	003d0900 	.word	0x003d0900
 8011954:	0801c500 	.word	0x0801c500
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195a:	2200      	movs	r2, #0
 801195c:	60bb      	str	r3, [r7, #8]
 801195e:	60fa      	str	r2, [r7, #12]
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011964:	4ac0      	ldr	r2, [pc, #768]	; (8011c68 <UART_SetConfig+0xc28>)
 8011966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801196a:	b29b      	uxth	r3, r3
 801196c:	2200      	movs	r2, #0
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	607a      	str	r2, [r7, #4]
 8011972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011976:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801197a:	f7ee feed 	bl	8000758 <__aeabi_uldivmod>
 801197e:	4602      	mov	r2, r0
 8011980:	460b      	mov	r3, r1
 8011982:	4610      	mov	r0, r2
 8011984:	4619      	mov	r1, r3
 8011986:	f04f 0200 	mov.w	r2, #0
 801198a:	f04f 0300 	mov.w	r3, #0
 801198e:	020b      	lsls	r3, r1, #8
 8011990:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011994:	0202      	lsls	r2, r0, #8
 8011996:	6979      	ldr	r1, [r7, #20]
 8011998:	6849      	ldr	r1, [r1, #4]
 801199a:	0849      	lsrs	r1, r1, #1
 801199c:	2000      	movs	r0, #0
 801199e:	460c      	mov	r4, r1
 80119a0:	4605      	mov	r5, r0
 80119a2:	eb12 0804 	adds.w	r8, r2, r4
 80119a6:	eb43 0905 	adc.w	r9, r3, r5
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	2200      	movs	r2, #0
 80119b0:	469a      	mov	sl, r3
 80119b2:	4693      	mov	fp, r2
 80119b4:	4652      	mov	r2, sl
 80119b6:	465b      	mov	r3, fp
 80119b8:	4640      	mov	r0, r8
 80119ba:	4649      	mov	r1, r9
 80119bc:	f7ee fecc 	bl	8000758 <__aeabi_uldivmod>
 80119c0:	4602      	mov	r2, r0
 80119c2:	460b      	mov	r3, r1
 80119c4:	4613      	mov	r3, r2
 80119c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80119c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80119ce:	d308      	bcc.n	80119e2 <UART_SetConfig+0x9a2>
 80119d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119d6:	d204      	bcs.n	80119e2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119de:	60da      	str	r2, [r3, #12]
 80119e0:	e17f      	b.n	8011ce2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80119e2:	2301      	movs	r3, #1
 80119e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80119e8:	e17b      	b.n	8011ce2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	69db      	ldr	r3, [r3, #28]
 80119ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119f2:	f040 80bd 	bne.w	8011b70 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80119f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119fa:	2b20      	cmp	r3, #32
 80119fc:	dc48      	bgt.n	8011a90 <UART_SetConfig+0xa50>
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	db7b      	blt.n	8011afa <UART_SetConfig+0xaba>
 8011a02:	2b20      	cmp	r3, #32
 8011a04:	d879      	bhi.n	8011afa <UART_SetConfig+0xaba>
 8011a06:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <UART_SetConfig+0x9cc>)
 8011a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0c:	08011a97 	.word	0x08011a97
 8011a10:	08011a9f 	.word	0x08011a9f
 8011a14:	08011afb 	.word	0x08011afb
 8011a18:	08011afb 	.word	0x08011afb
 8011a1c:	08011aa7 	.word	0x08011aa7
 8011a20:	08011afb 	.word	0x08011afb
 8011a24:	08011afb 	.word	0x08011afb
 8011a28:	08011afb 	.word	0x08011afb
 8011a2c:	08011ab7 	.word	0x08011ab7
 8011a30:	08011afb 	.word	0x08011afb
 8011a34:	08011afb 	.word	0x08011afb
 8011a38:	08011afb 	.word	0x08011afb
 8011a3c:	08011afb 	.word	0x08011afb
 8011a40:	08011afb 	.word	0x08011afb
 8011a44:	08011afb 	.word	0x08011afb
 8011a48:	08011afb 	.word	0x08011afb
 8011a4c:	08011ac7 	.word	0x08011ac7
 8011a50:	08011afb 	.word	0x08011afb
 8011a54:	08011afb 	.word	0x08011afb
 8011a58:	08011afb 	.word	0x08011afb
 8011a5c:	08011afb 	.word	0x08011afb
 8011a60:	08011afb 	.word	0x08011afb
 8011a64:	08011afb 	.word	0x08011afb
 8011a68:	08011afb 	.word	0x08011afb
 8011a6c:	08011afb 	.word	0x08011afb
 8011a70:	08011afb 	.word	0x08011afb
 8011a74:	08011afb 	.word	0x08011afb
 8011a78:	08011afb 	.word	0x08011afb
 8011a7c:	08011afb 	.word	0x08011afb
 8011a80:	08011afb 	.word	0x08011afb
 8011a84:	08011afb 	.word	0x08011afb
 8011a88:	08011afb 	.word	0x08011afb
 8011a8c:	08011aed 	.word	0x08011aed
 8011a90:	2b40      	cmp	r3, #64	; 0x40
 8011a92:	d02e      	beq.n	8011af2 <UART_SetConfig+0xab2>
 8011a94:	e031      	b.n	8011afa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011a96:	f7f9 f8cd 	bl	800ac34 <HAL_RCC_GetPCLK1Freq>
 8011a9a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a9c:	e033      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011a9e:	f7f9 f8df 	bl	800ac60 <HAL_RCC_GetPCLK2Freq>
 8011aa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011aa4:	e02f      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fa ff76 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ab4:	e027      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011ab6:	f107 0318 	add.w	r3, r7, #24
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7fb f8c2 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ac4:	e01f      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011ac6:	4b69      	ldr	r3, [pc, #420]	; (8011c6c <UART_SetConfig+0xc2c>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f003 0320 	and.w	r3, r3, #32
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d009      	beq.n	8011ae6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011ad2:	4b66      	ldr	r3, [pc, #408]	; (8011c6c <UART_SetConfig+0xc2c>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	08db      	lsrs	r3, r3, #3
 8011ad8:	f003 0303 	and.w	r3, r3, #3
 8011adc:	4a64      	ldr	r2, [pc, #400]	; (8011c70 <UART_SetConfig+0xc30>)
 8011ade:	fa22 f303 	lsr.w	r3, r2, r3
 8011ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011ae4:	e00f      	b.n	8011b06 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011ae6:	4b62      	ldr	r3, [pc, #392]	; (8011c70 <UART_SetConfig+0xc30>)
 8011ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aea:	e00c      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011aec:	4b61      	ldr	r3, [pc, #388]	; (8011c74 <UART_SetConfig+0xc34>)
 8011aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011af0:	e009      	b.n	8011b06 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011af8:	e005      	b.n	8011b06 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011afa:	2300      	movs	r3, #0
 8011afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011afe:	2301      	movs	r3, #1
 8011b00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	f000 80ea 	beq.w	8011ce2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b12:	4a55      	ldr	r2, [pc, #340]	; (8011c68 <UART_SetConfig+0xc28>)
 8011b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b18:	461a      	mov	r2, r3
 8011b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b20:	005a      	lsls	r2, r3, #1
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	085b      	lsrs	r3, r3, #1
 8011b28:	441a      	add	r2, r3
 8011b2a:	697b      	ldr	r3, [r7, #20]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b32:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	2b0f      	cmp	r3, #15
 8011b38:	d916      	bls.n	8011b68 <UART_SetConfig+0xb28>
 8011b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011b40:	d212      	bcs.n	8011b68 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f023 030f 	bic.w	r3, r3, #15
 8011b4a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b4e:	085b      	lsrs	r3, r3, #1
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	f003 0307 	and.w	r3, r3, #7
 8011b56:	b29a      	uxth	r2, r3
 8011b58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b5a:	4313      	orrs	r3, r2
 8011b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011b5e:	697b      	ldr	r3, [r7, #20]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011b64:	60da      	str	r2, [r3, #12]
 8011b66:	e0bc      	b.n	8011ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011b68:	2301      	movs	r3, #1
 8011b6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011b6e:	e0b8      	b.n	8011ce2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011b70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011b74:	2b20      	cmp	r3, #32
 8011b76:	dc4b      	bgt.n	8011c10 <UART_SetConfig+0xbd0>
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	f2c0 8087 	blt.w	8011c8c <UART_SetConfig+0xc4c>
 8011b7e:	2b20      	cmp	r3, #32
 8011b80:	f200 8084 	bhi.w	8011c8c <UART_SetConfig+0xc4c>
 8011b84:	a201      	add	r2, pc, #4	; (adr r2, 8011b8c <UART_SetConfig+0xb4c>)
 8011b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b8a:	bf00      	nop
 8011b8c:	08011c17 	.word	0x08011c17
 8011b90:	08011c1f 	.word	0x08011c1f
 8011b94:	08011c8d 	.word	0x08011c8d
 8011b98:	08011c8d 	.word	0x08011c8d
 8011b9c:	08011c27 	.word	0x08011c27
 8011ba0:	08011c8d 	.word	0x08011c8d
 8011ba4:	08011c8d 	.word	0x08011c8d
 8011ba8:	08011c8d 	.word	0x08011c8d
 8011bac:	08011c37 	.word	0x08011c37
 8011bb0:	08011c8d 	.word	0x08011c8d
 8011bb4:	08011c8d 	.word	0x08011c8d
 8011bb8:	08011c8d 	.word	0x08011c8d
 8011bbc:	08011c8d 	.word	0x08011c8d
 8011bc0:	08011c8d 	.word	0x08011c8d
 8011bc4:	08011c8d 	.word	0x08011c8d
 8011bc8:	08011c8d 	.word	0x08011c8d
 8011bcc:	08011c47 	.word	0x08011c47
 8011bd0:	08011c8d 	.word	0x08011c8d
 8011bd4:	08011c8d 	.word	0x08011c8d
 8011bd8:	08011c8d 	.word	0x08011c8d
 8011bdc:	08011c8d 	.word	0x08011c8d
 8011be0:	08011c8d 	.word	0x08011c8d
 8011be4:	08011c8d 	.word	0x08011c8d
 8011be8:	08011c8d 	.word	0x08011c8d
 8011bec:	08011c8d 	.word	0x08011c8d
 8011bf0:	08011c8d 	.word	0x08011c8d
 8011bf4:	08011c8d 	.word	0x08011c8d
 8011bf8:	08011c8d 	.word	0x08011c8d
 8011bfc:	08011c8d 	.word	0x08011c8d
 8011c00:	08011c8d 	.word	0x08011c8d
 8011c04:	08011c8d 	.word	0x08011c8d
 8011c08:	08011c8d 	.word	0x08011c8d
 8011c0c:	08011c7f 	.word	0x08011c7f
 8011c10:	2b40      	cmp	r3, #64	; 0x40
 8011c12:	d037      	beq.n	8011c84 <UART_SetConfig+0xc44>
 8011c14:	e03a      	b.n	8011c8c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c16:	f7f9 f80d 	bl	800ac34 <HAL_RCC_GetPCLK1Freq>
 8011c1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c1c:	e03c      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c1e:	f7f9 f81f 	bl	800ac60 <HAL_RCC_GetPCLK2Freq>
 8011c22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c24:	e038      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fa feb6 	bl	800c99c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c34:	e030      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c36:	f107 0318 	add.w	r3, r7, #24
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fb f802 	bl	800cc44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c44:	e028      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c46:	4b09      	ldr	r3, [pc, #36]	; (8011c6c <UART_SetConfig+0xc2c>)
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f003 0320 	and.w	r3, r3, #32
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d012      	beq.n	8011c78 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c52:	4b06      	ldr	r3, [pc, #24]	; (8011c6c <UART_SetConfig+0xc2c>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	08db      	lsrs	r3, r3, #3
 8011c58:	f003 0303 	and.w	r3, r3, #3
 8011c5c:	4a04      	ldr	r2, [pc, #16]	; (8011c70 <UART_SetConfig+0xc30>)
 8011c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8011c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c64:	e018      	b.n	8011c98 <UART_SetConfig+0xc58>
 8011c66:	bf00      	nop
 8011c68:	0801c500 	.word	0x0801c500
 8011c6c:	58024400 	.word	0x58024400
 8011c70:	03d09000 	.word	0x03d09000
 8011c74:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011c78:	4b24      	ldr	r3, [pc, #144]	; (8011d0c <UART_SetConfig+0xccc>)
 8011c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7c:	e00c      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011c7e:	4b24      	ldr	r3, [pc, #144]	; (8011d10 <UART_SetConfig+0xcd0>)
 8011c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c82:	e009      	b.n	8011c98 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011c84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011c88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c8a:	e005      	b.n	8011c98 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011c90:	2301      	movs	r3, #1
 8011c92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011c96:	bf00      	nop
    }

    if (pclk != 0U)
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d021      	beq.n	8011ce2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ca2:	4a1c      	ldr	r2, [pc, #112]	; (8011d14 <UART_SetConfig+0xcd4>)
 8011ca4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cac:	fbb3 f2f2 	udiv	r2, r3, r2
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	085b      	lsrs	r3, r3, #1
 8011cb6:	441a      	add	r2, r3
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cc0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cc4:	2b0f      	cmp	r3, #15
 8011cc6:	d909      	bls.n	8011cdc <UART_SetConfig+0xc9c>
 8011cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cce:	d205      	bcs.n	8011cdc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	697b      	ldr	r3, [r7, #20]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	60da      	str	r2, [r3, #12]
 8011cda:	e002      	b.n	8011ce2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	2201      	movs	r2, #1
 8011ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	2201      	movs	r2, #1
 8011cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	2200      	movs	r2, #0
 8011cfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011cfe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3748      	adds	r7, #72	; 0x48
 8011d06:	46bd      	mov	sp, r7
 8011d08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011d0c:	03d09000 	.word	0x03d09000
 8011d10:	003d0900 	.word	0x003d0900
 8011d14:	0801c500 	.word	0x0801c500

08011d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b083      	sub	sp, #12
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d00a      	beq.n	8011d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	430a      	orrs	r2, r1
 8011d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d46:	f003 0302 	and.w	r3, r3, #2
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d00a      	beq.n	8011d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	430a      	orrs	r2, r1
 8011d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d68:	f003 0304 	and.w	r3, r3, #4
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d00a      	beq.n	8011d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	430a      	orrs	r2, r1
 8011d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d8a:	f003 0308 	and.w	r3, r3, #8
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d00a      	beq.n	8011da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	430a      	orrs	r2, r1
 8011da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dac:	f003 0310 	and.w	r3, r3, #16
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00a      	beq.n	8011dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	430a      	orrs	r2, r1
 8011dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dce:	f003 0320 	and.w	r3, r3, #32
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d00a      	beq.n	8011dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	430a      	orrs	r2, r1
 8011dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d01a      	beq.n	8011e2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	430a      	orrs	r2, r1
 8011e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011e16:	d10a      	bne.n	8011e2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	430a      	orrs	r2, r1
 8011e2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d00a      	beq.n	8011e50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	430a      	orrs	r2, r1
 8011e4e:	605a      	str	r2, [r3, #4]
  }
}
 8011e50:	bf00      	nop
 8011e52:	370c      	adds	r7, #12
 8011e54:	46bd      	mov	sp, r7
 8011e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5a:	4770      	bx	lr

08011e5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b098      	sub	sp, #96	; 0x60
 8011e60:	af02      	add	r7, sp, #8
 8011e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2200      	movs	r2, #0
 8011e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011e6c:	f7f2 f822 	bl	8003eb4 <HAL_GetTick>
 8011e70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	f003 0308 	and.w	r3, r3, #8
 8011e7c:	2b08      	cmp	r3, #8
 8011e7e:	d12f      	bne.n	8011ee0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011e80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011e84:	9300      	str	r3, [sp, #0]
 8011e86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e88:	2200      	movs	r2, #0
 8011e8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f88e 	bl	8011fb0 <UART_WaitOnFlagUntilTimeout>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d022      	beq.n	8011ee0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea2:	e853 3f00 	ldrex	r3, [r3]
 8011ea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011eae:	653b      	str	r3, [r7, #80]	; 0x50
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8011eba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ec0:	e841 2300 	strex	r3, r2, [r1]
 8011ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1e6      	bne.n	8011e9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2220      	movs	r2, #32
 8011ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011edc:	2303      	movs	r3, #3
 8011ede:	e063      	b.n	8011fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f003 0304 	and.w	r3, r3, #4
 8011eea:	2b04      	cmp	r3, #4
 8011eec:	d149      	bne.n	8011f82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011eee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011efc:	6878      	ldr	r0, [r7, #4]
 8011efe:	f000 f857 	bl	8011fb0 <UART_WaitOnFlagUntilTimeout>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d03c      	beq.n	8011f82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f10:	e853 3f00 	ldrex	r3, [r3]
 8011f14:	623b      	str	r3, [r7, #32]
   return(result);
 8011f16:	6a3b      	ldr	r3, [r7, #32]
 8011f18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	461a      	mov	r2, r3
 8011f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f26:	633b      	str	r3, [r7, #48]	; 0x30
 8011f28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f2e:	e841 2300 	strex	r3, r2, [r1]
 8011f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1e6      	bne.n	8011f08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	3308      	adds	r3, #8
 8011f40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f42:	693b      	ldr	r3, [r7, #16]
 8011f44:	e853 3f00 	ldrex	r3, [r3]
 8011f48:	60fb      	str	r3, [r7, #12]
   return(result);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f023 0301 	bic.w	r3, r3, #1
 8011f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	3308      	adds	r3, #8
 8011f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011f5a:	61fa      	str	r2, [r7, #28]
 8011f5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f5e:	69b9      	ldr	r1, [r7, #24]
 8011f60:	69fa      	ldr	r2, [r7, #28]
 8011f62:	e841 2300 	strex	r3, r2, [r1]
 8011f66:	617b      	str	r3, [r7, #20]
   return(result);
 8011f68:	697b      	ldr	r3, [r7, #20]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d1e5      	bne.n	8011f3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2220      	movs	r2, #32
 8011f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e012      	b.n	8011fa8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2220      	movs	r2, #32
 8011f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	2220      	movs	r2, #32
 8011f8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2200      	movs	r2, #0
 8011f96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011fa6:	2300      	movs	r3, #0
}
 8011fa8:	4618      	mov	r0, r3
 8011faa:	3758      	adds	r7, #88	; 0x58
 8011fac:	46bd      	mov	sp, r7
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011fb0:	b580      	push	{r7, lr}
 8011fb2:	b084      	sub	sp, #16
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	60f8      	str	r0, [r7, #12]
 8011fb8:	60b9      	str	r1, [r7, #8]
 8011fba:	603b      	str	r3, [r7, #0]
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011fc0:	e049      	b.n	8012056 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fc8:	d045      	beq.n	8012056 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011fca:	f7f1 ff73 	bl	8003eb4 <HAL_GetTick>
 8011fce:	4602      	mov	r2, r0
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	1ad3      	subs	r3, r2, r3
 8011fd4:	69ba      	ldr	r2, [r7, #24]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d302      	bcc.n	8011fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d101      	bne.n	8011fe4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011fe0:	2303      	movs	r3, #3
 8011fe2:	e048      	b.n	8012076 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f003 0304 	and.w	r3, r3, #4
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d031      	beq.n	8012056 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	69db      	ldr	r3, [r3, #28]
 8011ff8:	f003 0308 	and.w	r3, r3, #8
 8011ffc:	2b08      	cmp	r3, #8
 8011ffe:	d110      	bne.n	8012022 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2208      	movs	r2, #8
 8012006:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f000 f839 	bl	8012080 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	2208      	movs	r2, #8
 8012012:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	2200      	movs	r2, #0
 801201a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801201e:	2301      	movs	r3, #1
 8012020:	e029      	b.n	8012076 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801202c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012030:	d111      	bne.n	8012056 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801203a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801203c:	68f8      	ldr	r0, [r7, #12]
 801203e:	f000 f81f 	bl	8012080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	2220      	movs	r2, #32
 8012046:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2200      	movs	r2, #0
 801204e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012052:	2303      	movs	r3, #3
 8012054:	e00f      	b.n	8012076 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	69da      	ldr	r2, [r3, #28]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	4013      	ands	r3, r2
 8012060:	68ba      	ldr	r2, [r7, #8]
 8012062:	429a      	cmp	r2, r3
 8012064:	bf0c      	ite	eq
 8012066:	2301      	moveq	r3, #1
 8012068:	2300      	movne	r3, #0
 801206a:	b2db      	uxtb	r3, r3
 801206c:	461a      	mov	r2, r3
 801206e:	79fb      	ldrb	r3, [r7, #7]
 8012070:	429a      	cmp	r2, r3
 8012072:	d0a6      	beq.n	8011fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012074:	2300      	movs	r3, #0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3710      	adds	r7, #16
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
	...

08012080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012080:	b480      	push	{r7}
 8012082:	b095      	sub	sp, #84	; 0x54
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801208e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012090:	e853 3f00 	ldrex	r3, [r3]
 8012094:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012098:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801209c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	461a      	mov	r2, r3
 80120a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a6:	643b      	str	r3, [r7, #64]	; 0x40
 80120a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120ae:	e841 2300 	strex	r3, r2, [r1]
 80120b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1e6      	bne.n	8012088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	3308      	adds	r3, #8
 80120c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	e853 3f00 	ldrex	r3, [r3]
 80120c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80120ca:	69fa      	ldr	r2, [r7, #28]
 80120cc:	4b1e      	ldr	r3, [pc, #120]	; (8012148 <UART_EndRxTransfer+0xc8>)
 80120ce:	4013      	ands	r3, r2
 80120d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	3308      	adds	r3, #8
 80120d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80120da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80120dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80120e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e2:	e841 2300 	strex	r3, r2, [r1]
 80120e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80120e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d1e5      	bne.n	80120ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d118      	bne.n	8012128 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	e853 3f00 	ldrex	r3, [r3]
 8012102:	60bb      	str	r3, [r7, #8]
   return(result);
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	f023 0310 	bic.w	r3, r3, #16
 801210a:	647b      	str	r3, [r7, #68]	; 0x44
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	461a      	mov	r2, r3
 8012112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012114:	61bb      	str	r3, [r7, #24]
 8012116:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012118:	6979      	ldr	r1, [r7, #20]
 801211a:	69ba      	ldr	r2, [r7, #24]
 801211c:	e841 2300 	strex	r3, r2, [r1]
 8012120:	613b      	str	r3, [r7, #16]
   return(result);
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d1e6      	bne.n	80120f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2220      	movs	r2, #32
 801212c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2200      	movs	r2, #0
 8012134:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801213c:	bf00      	nop
 801213e:	3754      	adds	r7, #84	; 0x54
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr
 8012148:	effffffe 	.word	0xeffffffe

0801214c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801214c:	b480      	push	{r7}
 801214e:	b085      	sub	sp, #20
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801215a:	2b01      	cmp	r3, #1
 801215c:	d101      	bne.n	8012162 <HAL_UARTEx_DisableFifoMode+0x16>
 801215e:	2302      	movs	r3, #2
 8012160:	e027      	b.n	80121b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2201      	movs	r2, #1
 8012166:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	2224      	movs	r2, #36	; 0x24
 801216e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	681a      	ldr	r2, [r3, #0]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	681b      	ldr	r3, [r3, #0]
 8012184:	f022 0201 	bic.w	r2, r2, #1
 8012188:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012190:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2200      	movs	r2, #0
 8012196:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2220      	movs	r2, #32
 80121a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	2200      	movs	r2, #0
 80121ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80121b0:	2300      	movs	r3, #0
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3714      	adds	r7, #20
 80121b6:	46bd      	mov	sp, r7
 80121b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121bc:	4770      	bx	lr

080121be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80121be:	b580      	push	{r7, lr}
 80121c0:	b084      	sub	sp, #16
 80121c2:	af00      	add	r7, sp, #0
 80121c4:	6078      	str	r0, [r7, #4]
 80121c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d101      	bne.n	80121d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80121d2:	2302      	movs	r3, #2
 80121d4:	e02d      	b.n	8012232 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	2201      	movs	r2, #1
 80121da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2224      	movs	r2, #36	; 0x24
 80121e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	f022 0201 	bic.w	r2, r2, #1
 80121fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	683a      	ldr	r2, [r7, #0]
 801220e:	430a      	orrs	r2, r1
 8012210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f850 	bl	80122b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	68fa      	ldr	r2, [r7, #12]
 801221e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2220      	movs	r2, #32
 8012224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2200      	movs	r2, #0
 801222c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3710      	adds	r7, #16
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}

0801223a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801223a:	b580      	push	{r7, lr}
 801223c:	b084      	sub	sp, #16
 801223e:	af00      	add	r7, sp, #0
 8012240:	6078      	str	r0, [r7, #4]
 8012242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801224a:	2b01      	cmp	r3, #1
 801224c:	d101      	bne.n	8012252 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801224e:	2302      	movs	r3, #2
 8012250:	e02d      	b.n	80122ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2201      	movs	r2, #1
 8012256:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2224      	movs	r2, #36	; 0x24
 801225e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	f022 0201 	bic.w	r2, r2, #1
 8012278:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	683a      	ldr	r2, [r7, #0]
 801228a:	430a      	orrs	r2, r1
 801228c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 f812 	bl	80122b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2220      	movs	r2, #32
 80122a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2200      	movs	r2, #0
 80122a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3710      	adds	r7, #16
 80122b2:	46bd      	mov	sp, r7
 80122b4:	bd80      	pop	{r7, pc}
	...

080122b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80122b8:	b480      	push	{r7}
 80122ba:	b085      	sub	sp, #20
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d108      	bne.n	80122da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2201      	movs	r2, #1
 80122cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	2201      	movs	r2, #1
 80122d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80122d8:	e031      	b.n	801233e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80122da:	2310      	movs	r3, #16
 80122dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80122de:	2310      	movs	r3, #16
 80122e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	689b      	ldr	r3, [r3, #8]
 80122e8:	0e5b      	lsrs	r3, r3, #25
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	f003 0307 	and.w	r3, r3, #7
 80122f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	689b      	ldr	r3, [r3, #8]
 80122f8:	0f5b      	lsrs	r3, r3, #29
 80122fa:	b2db      	uxtb	r3, r3
 80122fc:	f003 0307 	and.w	r3, r3, #7
 8012300:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012302:	7bbb      	ldrb	r3, [r7, #14]
 8012304:	7b3a      	ldrb	r2, [r7, #12]
 8012306:	4911      	ldr	r1, [pc, #68]	; (801234c <UARTEx_SetNbDataToProcess+0x94>)
 8012308:	5c8a      	ldrb	r2, [r1, r2]
 801230a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801230e:	7b3a      	ldrb	r2, [r7, #12]
 8012310:	490f      	ldr	r1, [pc, #60]	; (8012350 <UARTEx_SetNbDataToProcess+0x98>)
 8012312:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012314:	fb93 f3f2 	sdiv	r3, r3, r2
 8012318:	b29a      	uxth	r2, r3
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012320:	7bfb      	ldrb	r3, [r7, #15]
 8012322:	7b7a      	ldrb	r2, [r7, #13]
 8012324:	4909      	ldr	r1, [pc, #36]	; (801234c <UARTEx_SetNbDataToProcess+0x94>)
 8012326:	5c8a      	ldrb	r2, [r1, r2]
 8012328:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801232c:	7b7a      	ldrb	r2, [r7, #13]
 801232e:	4908      	ldr	r1, [pc, #32]	; (8012350 <UARTEx_SetNbDataToProcess+0x98>)
 8012330:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012332:	fb93 f3f2 	sdiv	r3, r3, r2
 8012336:	b29a      	uxth	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801233e:	bf00      	nop
 8012340:	3714      	adds	r7, #20
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr
 801234a:	bf00      	nop
 801234c:	0801c518 	.word	0x0801c518
 8012350:	0801c520 	.word	0x0801c520

08012354 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012354:	b084      	sub	sp, #16
 8012356:	b480      	push	{r7}
 8012358:	b085      	sub	sp, #20
 801235a:	af00      	add	r7, sp, #0
 801235c:	6078      	str	r0, [r7, #4]
 801235e:	f107 001c 	add.w	r0, r7, #28
 8012362:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801236a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801236c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801236e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012372:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012374:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012376:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801237a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	4313      	orrs	r3, r2
 8012380:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	685a      	ldr	r2, [r3, #4]
 8012386:	4b07      	ldr	r3, [pc, #28]	; (80123a4 <SDMMC_Init+0x50>)
 8012388:	4013      	ands	r3, r2
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	431a      	orrs	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012392:	2300      	movs	r3, #0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	b004      	add	sp, #16
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	ffc02c00 	.word	0xffc02c00

080123a8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80123a8:	b480      	push	{r7}
 80123aa:	b083      	sub	sp, #12
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	370c      	adds	r7, #12
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80123c2:	b480      	push	{r7}
 80123c4:	b083      	sub	sp, #12
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80123d6:	2300      	movs	r3, #0
}
 80123d8:	4618      	mov	r0, r3
 80123da:	370c      	adds	r7, #12
 80123dc:	46bd      	mov	sp, r7
 80123de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e2:	4770      	bx	lr

080123e4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80123e4:	b480      	push	{r7}
 80123e6:	b083      	sub	sp, #12
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	f043 0203 	orr.w	r2, r3, #3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80123f8:	2300      	movs	r3, #0
}
 80123fa:	4618      	mov	r0, r3
 80123fc:	370c      	adds	r7, #12
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr

08012406 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012406:	b480      	push	{r7}
 8012408:	b083      	sub	sp, #12
 801240a:	af00      	add	r7, sp, #0
 801240c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	f003 0303 	and.w	r3, r3, #3
}
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr
	...

08012424 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012432:	683b      	ldr	r3, [r7, #0]
 8012434:	681a      	ldr	r2, [r3, #0]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012442:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012448:	431a      	orrs	r2, r3
                       Command->CPSM);
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801244e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	4313      	orrs	r3, r2
 8012454:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68da      	ldr	r2, [r3, #12]
 801245a:	4b06      	ldr	r3, [pc, #24]	; (8012474 <SDMMC_SendCommand+0x50>)
 801245c:	4013      	ands	r3, r2
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	431a      	orrs	r2, r3
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012466:	2300      	movs	r3, #0
}
 8012468:	4618      	mov	r0, r3
 801246a:	3714      	adds	r7, #20
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr
 8012474:	fffee0c0 	.word	0xfffee0c0

08012478 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012478:	b480      	push	{r7}
 801247a:	b083      	sub	sp, #12
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	691b      	ldr	r3, [r3, #16]
 8012484:	b2db      	uxtb	r3, r3
}
 8012486:	4618      	mov	r0, r3
 8012488:	370c      	adds	r7, #12
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012492:	b480      	push	{r7}
 8012494:	b085      	sub	sp, #20
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	3314      	adds	r3, #20
 80124a0:	461a      	mov	r2, r3
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	4413      	add	r3, r2
 80124a6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	681b      	ldr	r3, [r3, #0]
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3714      	adds	r7, #20
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	685a      	ldr	r2, [r3, #4]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80124da:	683b      	ldr	r3, [r7, #0]
 80124dc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80124de:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80124e4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80124ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80124ec:	68fa      	ldr	r2, [r7, #12]
 80124ee:	4313      	orrs	r3, r2
 80124f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	431a      	orrs	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012502:	2300      	movs	r3, #0

}
 8012504:	4618      	mov	r0, r3
 8012506:	3714      	adds	r7, #20
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b088      	sub	sp, #32
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801251e:	2310      	movs	r3, #16
 8012520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012528:	2300      	movs	r3, #0
 801252a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012532:	f107 0308 	add.w	r3, r7, #8
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff ff73 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012542:	2110      	movs	r1, #16
 8012544:	6878      	ldr	r0, [r7, #4]
 8012546:	f000 fa5f 	bl	8012a08 <SDMMC_GetCmdResp1>
 801254a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801254c:	69fb      	ldr	r3, [r7, #28]
}
 801254e:	4618      	mov	r0, r3
 8012550:	3720      	adds	r7, #32
 8012552:	46bd      	mov	sp, r7
 8012554:	bd80      	pop	{r7, pc}

08012556 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012556:	b580      	push	{r7, lr}
 8012558:	b088      	sub	sp, #32
 801255a:	af00      	add	r7, sp, #0
 801255c:	6078      	str	r0, [r7, #4]
 801255e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012564:	2311      	movs	r3, #17
 8012566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012568:	f44f 7380 	mov.w	r3, #256	; 0x100
 801256c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801256e:	2300      	movs	r3, #0
 8012570:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012572:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012576:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012578:	f107 0308 	add.w	r3, r7, #8
 801257c:	4619      	mov	r1, r3
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f7ff ff50 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012584:	f241 3288 	movw	r2, #5000	; 0x1388
 8012588:	2111      	movs	r1, #17
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f000 fa3c 	bl	8012a08 <SDMMC_GetCmdResp1>
 8012590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012592:	69fb      	ldr	r3, [r7, #28]
}
 8012594:	4618      	mov	r0, r3
 8012596:	3720      	adds	r7, #32
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b088      	sub	sp, #32
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80125aa:	2312      	movs	r3, #18
 80125ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125b4:	2300      	movs	r3, #0
 80125b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80125bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80125be:	f107 0308 	add.w	r3, r7, #8
 80125c2:	4619      	mov	r1, r3
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff ff2d 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80125ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80125ce:	2112      	movs	r1, #18
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f000 fa19 	bl	8012a08 <SDMMC_GetCmdResp1>
 80125d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80125d8:	69fb      	ldr	r3, [r7, #28]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3720      	adds	r7, #32
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80125e2:	b580      	push	{r7, lr}
 80125e4:	b088      	sub	sp, #32
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80125f0:	2318      	movs	r3, #24
 80125f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80125f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80125f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80125fa:	2300      	movs	r3, #0
 80125fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80125fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012604:	f107 0308 	add.w	r3, r7, #8
 8012608:	4619      	mov	r1, r3
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff ff0a 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012610:	f241 3288 	movw	r2, #5000	; 0x1388
 8012614:	2118      	movs	r1, #24
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 f9f6 	bl	8012a08 <SDMMC_GetCmdResp1>
 801261c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801261e:	69fb      	ldr	r3, [r7, #28]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3720      	adds	r7, #32
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}

08012628 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b088      	sub	sp, #32
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012632:	683b      	ldr	r3, [r7, #0]
 8012634:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012636:	2319      	movs	r3, #25
 8012638:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801263a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801263e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012640:	2300      	movs	r3, #0
 8012642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012644:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012648:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801264a:	f107 0308 	add.w	r3, r7, #8
 801264e:	4619      	mov	r1, r3
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff fee7 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012656:	f241 3288 	movw	r2, #5000	; 0x1388
 801265a:	2119      	movs	r1, #25
 801265c:	6878      	ldr	r0, [r7, #4]
 801265e:	f000 f9d3 	bl	8012a08 <SDMMC_GetCmdResp1>
 8012662:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012664:	69fb      	ldr	r3, [r7, #28]
}
 8012666:	4618      	mov	r0, r3
 8012668:	3720      	adds	r7, #32
 801266a:	46bd      	mov	sp, r7
 801266c:	bd80      	pop	{r7, pc}
	...

08012670 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b088      	sub	sp, #32
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012678:	2300      	movs	r3, #0
 801267a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801267c:	230c      	movs	r3, #12
 801267e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012686:	2300      	movs	r3, #0
 8012688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801268a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801268e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	68db      	ldr	r3, [r3, #12]
 8012694:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	68db      	ldr	r3, [r3, #12]
 80126a0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126a8:	f107 0308 	add.w	r3, r7, #8
 80126ac:	4619      	mov	r1, r3
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff feb8 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80126b4:	4a0b      	ldr	r2, [pc, #44]	; (80126e4 <SDMMC_CmdStopTransfer+0x74>)
 80126b6:	210c      	movs	r1, #12
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 f9a5 	bl	8012a08 <SDMMC_GetCmdResp1>
 80126be:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80126d2:	d101      	bne.n	80126d8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80126d4:	2300      	movs	r3, #0
 80126d6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80126d8:	69fb      	ldr	r3, [r7, #28]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3720      	adds	r7, #32
 80126de:	46bd      	mov	sp, r7
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	05f5e100 	.word	0x05f5e100

080126e8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b088      	sub	sp, #32
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
 80126f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80126f6:	2307      	movs	r3, #7
 80126f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012700:	2300      	movs	r3, #0
 8012702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801270a:	f107 0308 	add.w	r3, r7, #8
 801270e:	4619      	mov	r1, r3
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7ff fe87 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8012716:	f241 3288 	movw	r2, #5000	; 0x1388
 801271a:	2107      	movs	r1, #7
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f000 f973 	bl	8012a08 <SDMMC_GetCmdResp1>
 8012722:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012724:	69fb      	ldr	r3, [r7, #28]
}
 8012726:	4618      	mov	r0, r3
 8012728:	3720      	adds	r7, #32
 801272a:	46bd      	mov	sp, r7
 801272c:	bd80      	pop	{r7, pc}

0801272e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801272e:	b580      	push	{r7, lr}
 8012730:	b088      	sub	sp, #32
 8012732:	af00      	add	r7, sp, #0
 8012734:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012736:	2300      	movs	r3, #0
 8012738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801273a:	2300      	movs	r3, #0
 801273c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801273e:	2300      	movs	r3, #0
 8012740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012742:	2300      	movs	r3, #0
 8012744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801274a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801274c:	f107 0308 	add.w	r3, r7, #8
 8012750:	4619      	mov	r1, r3
 8012752:	6878      	ldr	r0, [r7, #4]
 8012754:	f7ff fe66 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fb97 	bl	8012e8c <SDMMC_GetCmdError>
 801275e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012760:	69fb      	ldr	r3, [r7, #28]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3720      	adds	r7, #32
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b088      	sub	sp, #32
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8012772:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012778:	2308      	movs	r3, #8
 801277a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801277c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012780:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012782:	2300      	movs	r3, #0
 8012784:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801278a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801278c:	f107 0308 	add.w	r3, r7, #8
 8012790:	4619      	mov	r1, r3
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f7ff fe46 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f000 fb29 	bl	8012df0 <SDMMC_GetCmdResp7>
 801279e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127a0:	69fb      	ldr	r3, [r7, #28]
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3720      	adds	r7, #32
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b088      	sub	sp, #32
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
 80127b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80127b8:	2337      	movs	r3, #55	; 0x37
 80127ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127c2:	2300      	movs	r3, #0
 80127c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127cc:	f107 0308 	add.w	r3, r7, #8
 80127d0:	4619      	mov	r1, r3
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f7ff fe26 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80127d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127dc:	2137      	movs	r1, #55	; 0x37
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f000 f912 	bl	8012a08 <SDMMC_GetCmdResp1>
 80127e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127e6:	69fb      	ldr	r3, [r7, #28]
}
 80127e8:	4618      	mov	r0, r3
 80127ea:	3720      	adds	r7, #32
 80127ec:	46bd      	mov	sp, r7
 80127ee:	bd80      	pop	{r7, pc}

080127f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
 80127f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80127fe:	2329      	movs	r3, #41	; 0x29
 8012800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012808:	2300      	movs	r3, #0
 801280a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801280c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012812:	f107 0308 	add.w	r3, r7, #8
 8012816:	4619      	mov	r1, r3
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f7ff fe03 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 fa2e 	bl	8012c80 <SDMMC_GetCmdResp3>
 8012824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012826:	69fb      	ldr	r3, [r7, #28]
}
 8012828:	4618      	mov	r0, r3
 801282a:	3720      	adds	r7, #32
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}

08012830 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b088      	sub	sp, #32
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801283e:	2306      	movs	r3, #6
 8012840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012842:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012848:	2300      	movs	r3, #0
 801284a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801284c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012852:	f107 0308 	add.w	r3, r7, #8
 8012856:	4619      	mov	r1, r3
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7ff fde3 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801285e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012862:	2106      	movs	r1, #6
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 f8cf 	bl	8012a08 <SDMMC_GetCmdResp1>
 801286a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801286c:	69fb      	ldr	r3, [r7, #28]
}
 801286e:	4618      	mov	r0, r3
 8012870:	3720      	adds	r7, #32
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}

08012876 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012876:	b580      	push	{r7, lr}
 8012878:	b088      	sub	sp, #32
 801287a:	af00      	add	r7, sp, #0
 801287c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801287e:	2300      	movs	r3, #0
 8012880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012882:	2333      	movs	r3, #51	; 0x33
 8012884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012886:	f44f 7380 	mov.w	r3, #256	; 0x100
 801288a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801288c:	2300      	movs	r3, #0
 801288e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012896:	f107 0308 	add.w	r3, r7, #8
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f7ff fdc1 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80128a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80128a6:	2133      	movs	r1, #51	; 0x33
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f000 f8ad 	bl	8012a08 <SDMMC_GetCmdResp1>
 80128ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128b0:	69fb      	ldr	r3, [r7, #28]
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3720      	adds	r7, #32
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}

080128ba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80128ba:	b580      	push	{r7, lr}
 80128bc:	b088      	sub	sp, #32
 80128be:	af00      	add	r7, sp, #0
 80128c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80128c2:	2300      	movs	r3, #0
 80128c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80128c6:	2302      	movs	r3, #2
 80128c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80128ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80128ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128d0:	2300      	movs	r3, #0
 80128d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128da:	f107 0308 	add.w	r3, r7, #8
 80128de:	4619      	mov	r1, r3
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff fd9f 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f980 	bl	8012bec <SDMMC_GetCmdResp2>
 80128ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128ee:	69fb      	ldr	r3, [r7, #28]
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3720      	adds	r7, #32
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b088      	sub	sp, #32
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012902:	683b      	ldr	r3, [r7, #0]
 8012904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012906:	2309      	movs	r3, #9
 8012908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801290a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801290e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012910:	2300      	movs	r3, #0
 8012912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012918:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801291a:	f107 0308 	add.w	r3, r7, #8
 801291e:	4619      	mov	r1, r3
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f7ff fd7f 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f000 f960 	bl	8012bec <SDMMC_GetCmdResp2>
 801292c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801292e:	69fb      	ldr	r3, [r7, #28]
}
 8012930:	4618      	mov	r0, r3
 8012932:	3720      	adds	r7, #32
 8012934:	46bd      	mov	sp, r7
 8012936:	bd80      	pop	{r7, pc}

08012938 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b088      	sub	sp, #32
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012942:	2300      	movs	r3, #0
 8012944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012946:	2303      	movs	r3, #3
 8012948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801294a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801294e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012950:	2300      	movs	r3, #0
 8012952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012958:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801295a:	f107 0308 	add.w	r3, r7, #8
 801295e:	4619      	mov	r1, r3
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f7ff fd5f 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012966:	683a      	ldr	r2, [r7, #0]
 8012968:	2103      	movs	r1, #3
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f000 f9c8 	bl	8012d00 <SDMMC_GetCmdResp6>
 8012970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012972:	69fb      	ldr	r3, [r7, #28]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3720      	adds	r7, #32
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af00      	add	r7, sp, #0
 8012982:	6078      	str	r0, [r7, #4]
 8012984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801298a:	230d      	movs	r3, #13
 801298c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801298e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012994:	2300      	movs	r3, #0
 8012996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801299c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801299e:	f107 0308 	add.w	r3, r7, #8
 80129a2:	4619      	mov	r1, r3
 80129a4:	6878      	ldr	r0, [r7, #4]
 80129a6:	f7ff fd3d 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80129aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80129ae:	210d      	movs	r1, #13
 80129b0:	6878      	ldr	r0, [r7, #4]
 80129b2:	f000 f829 	bl	8012a08 <SDMMC_GetCmdResp1>
 80129b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129b8:	69fb      	ldr	r3, [r7, #28]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3720      	adds	r7, #32
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b088      	sub	sp, #32
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80129ca:	2300      	movs	r3, #0
 80129cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80129ce:	230d      	movs	r3, #13
 80129d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129d8:	2300      	movs	r3, #0
 80129da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129e2:	f107 0308 	add.w	r3, r7, #8
 80129e6:	4619      	mov	r1, r3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7ff fd1b 	bl	8012424 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80129ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80129f2:	210d      	movs	r1, #13
 80129f4:	6878      	ldr	r0, [r7, #4]
 80129f6:	f000 f807 	bl	8012a08 <SDMMC_GetCmdResp1>
 80129fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129fc:	69fb      	ldr	r3, [r7, #28]
}
 80129fe:	4618      	mov	r0, r3
 8012a00:	3720      	adds	r7, #32
 8012a02:	46bd      	mov	sp, r7
 8012a04:	bd80      	pop	{r7, pc}
	...

08012a08 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b088      	sub	sp, #32
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	460b      	mov	r3, r1
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012a16:	4b70      	ldr	r3, [pc, #448]	; (8012bd8 <SDMMC_GetCmdResp1+0x1d0>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	4a70      	ldr	r2, [pc, #448]	; (8012bdc <SDMMC_GetCmdResp1+0x1d4>)
 8012a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8012a20:	0a5a      	lsrs	r2, r3, #9
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	fb02 f303 	mul.w	r3, r2, r3
 8012a28:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	1e5a      	subs	r2, r3, #1
 8012a2e:	61fa      	str	r2, [r7, #28]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d102      	bne.n	8012a3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a38:	e0c9      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a3e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012a40:	69ba      	ldr	r2, [r7, #24]
 8012a42:	4b67      	ldr	r3, [pc, #412]	; (8012be0 <SDMMC_GetCmdResp1+0x1d8>)
 8012a44:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d0ef      	beq.n	8012a2a <SDMMC_GetCmdResp1+0x22>
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d1ea      	bne.n	8012a2a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a58:	f003 0304 	and.w	r3, r3, #4
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d004      	beq.n	8012a6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2204      	movs	r2, #4
 8012a64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012a66:	2304      	movs	r3, #4
 8012a68:	e0b1      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a6e:	f003 0301 	and.w	r3, r3, #1
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d004      	beq.n	8012a80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	2201      	movs	r2, #1
 8012a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	e0a6      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	4a58      	ldr	r2, [pc, #352]	; (8012be4 <SDMMC_GetCmdResp1+0x1dc>)
 8012a84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f7ff fcf6 	bl	8012478 <SDMMC_GetCommandResponse>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	461a      	mov	r2, r3
 8012a90:	7afb      	ldrb	r3, [r7, #11]
 8012a92:	4293      	cmp	r3, r2
 8012a94:	d001      	beq.n	8012a9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012a96:	2301      	movs	r3, #1
 8012a98:	e099      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012a9a:	2100      	movs	r1, #0
 8012a9c:	68f8      	ldr	r0, [r7, #12]
 8012a9e:	f7ff fcf8 	bl	8012492 <SDMMC_GetResponse>
 8012aa2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012aa4:	697a      	ldr	r2, [r7, #20]
 8012aa6:	4b50      	ldr	r3, [pc, #320]	; (8012be8 <SDMMC_GetCmdResp1+0x1e0>)
 8012aa8:	4013      	ands	r3, r2
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d101      	bne.n	8012ab2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	e08d      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	da02      	bge.n	8012abe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012abc:	e087      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d001      	beq.n	8012acc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012ac8:	2340      	movs	r3, #64	; 0x40
 8012aca:	e080      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012acc:	697b      	ldr	r3, [r7, #20]
 8012ace:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d001      	beq.n	8012ada <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012ad6:	2380      	movs	r3, #128	; 0x80
 8012ad8:	e079      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d002      	beq.n	8012aea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ae8:	e071      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d002      	beq.n	8012afa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012af8:	e069      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d002      	beq.n	8012b0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012b08:	e061      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d002      	beq.n	8012b1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012b18:	e059      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b28:	e051      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012b2a:	697b      	ldr	r3, [r7, #20]
 8012b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d002      	beq.n	8012b3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012b38:	e049      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012b44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012b48:	e041      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012b4a:	697b      	ldr	r3, [r7, #20]
 8012b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d002      	beq.n	8012b5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b58:	e039      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d002      	beq.n	8012b6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012b64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012b68:	e031      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012b74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012b78:	e029      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d002      	beq.n	8012b8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012b84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012b88:	e021      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012b8a:	697b      	ldr	r3, [r7, #20]
 8012b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d002      	beq.n	8012b9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012b94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012b98:	e019      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012b9a:	697b      	ldr	r3, [r7, #20]
 8012b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d002      	beq.n	8012baa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012ba8:	e011      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d002      	beq.n	8012bba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012bb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012bb8:	e009      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012bba:	697b      	ldr	r3, [r7, #20]
 8012bbc:	f003 0308 	and.w	r3, r3, #8
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d002      	beq.n	8012bca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012bc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012bc8:	e001      	b.n	8012bce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012bca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3720      	adds	r7, #32
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	24000000 	.word	0x24000000
 8012bdc:	10624dd3 	.word	0x10624dd3
 8012be0:	00200045 	.word	0x00200045
 8012be4:	002000c5 	.word	0x002000c5
 8012be8:	fdffe008 	.word	0xfdffe008

08012bec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012bf4:	4b1f      	ldr	r3, [pc, #124]	; (8012c74 <SDMMC_GetCmdResp2+0x88>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4a1f      	ldr	r2, [pc, #124]	; (8012c78 <SDMMC_GetCmdResp2+0x8c>)
 8012bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8012bfe:	0a5b      	lsrs	r3, r3, #9
 8012c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c04:	fb02 f303 	mul.w	r3, r2, r3
 8012c08:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	1e5a      	subs	r2, r3, #1
 8012c0e:	60fa      	str	r2, [r7, #12]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d102      	bne.n	8012c1a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012c14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012c18:	e026      	b.n	8012c68 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c1e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d0ef      	beq.n	8012c0a <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d1ea      	bne.n	8012c0a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c38:	f003 0304 	and.w	r3, r3, #4
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d004      	beq.n	8012c4a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2204      	movs	r2, #4
 8012c44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c46:	2304      	movs	r3, #4
 8012c48:	e00e      	b.n	8012c68 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c4e:	f003 0301 	and.w	r3, r3, #1
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d004      	beq.n	8012c60 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e003      	b.n	8012c68 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	4a06      	ldr	r2, [pc, #24]	; (8012c7c <SDMMC_GetCmdResp2+0x90>)
 8012c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012c66:	2300      	movs	r3, #0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3714      	adds	r7, #20
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	24000000 	.word	0x24000000
 8012c78:	10624dd3 	.word	0x10624dd3
 8012c7c:	002000c5 	.word	0x002000c5

08012c80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012c80:	b480      	push	{r7}
 8012c82:	b085      	sub	sp, #20
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012c88:	4b1a      	ldr	r3, [pc, #104]	; (8012cf4 <SDMMC_GetCmdResp3+0x74>)
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	4a1a      	ldr	r2, [pc, #104]	; (8012cf8 <SDMMC_GetCmdResp3+0x78>)
 8012c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8012c92:	0a5b      	lsrs	r3, r3, #9
 8012c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c98:	fb02 f303 	mul.w	r3, r2, r3
 8012c9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	1e5a      	subs	r2, r3, #1
 8012ca2:	60fa      	str	r2, [r7, #12]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d102      	bne.n	8012cae <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ca8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012cac:	e01b      	b.n	8012ce6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cb2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d0ef      	beq.n	8012c9e <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012cbe:	68bb      	ldr	r3, [r7, #8]
 8012cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d1ea      	bne.n	8012c9e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ccc:	f003 0304 	and.w	r3, r3, #4
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d004      	beq.n	8012cde <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2204      	movs	r2, #4
 8012cd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012cda:	2304      	movs	r3, #4
 8012cdc:	e003      	b.n	8012ce6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4a06      	ldr	r2, [pc, #24]	; (8012cfc <SDMMC_GetCmdResp3+0x7c>)
 8012ce2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012ce4:	2300      	movs	r3, #0
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3714      	adds	r7, #20
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr
 8012cf2:	bf00      	nop
 8012cf4:	24000000 	.word	0x24000000
 8012cf8:	10624dd3 	.word	0x10624dd3
 8012cfc:	002000c5 	.word	0x002000c5

08012d00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	460b      	mov	r3, r1
 8012d0a:	607a      	str	r2, [r7, #4]
 8012d0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012d0e:	4b35      	ldr	r3, [pc, #212]	; (8012de4 <SDMMC_GetCmdResp6+0xe4>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4a35      	ldr	r2, [pc, #212]	; (8012de8 <SDMMC_GetCmdResp6+0xe8>)
 8012d14:	fba2 2303 	umull	r2, r3, r2, r3
 8012d18:	0a5b      	lsrs	r3, r3, #9
 8012d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012d1e:	fb02 f303 	mul.w	r3, r2, r3
 8012d22:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012d24:	69fb      	ldr	r3, [r7, #28]
 8012d26:	1e5a      	subs	r2, r3, #1
 8012d28:	61fa      	str	r2, [r7, #28]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d102      	bne.n	8012d34 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012d2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012d32:	e052      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d38:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d3a:	69bb      	ldr	r3, [r7, #24]
 8012d3c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d0ef      	beq.n	8012d24 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1ea      	bne.n	8012d24 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d52:	f003 0304 	and.w	r3, r3, #4
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d004      	beq.n	8012d64 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2204      	movs	r2, #4
 8012d5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012d60:	2304      	movs	r3, #4
 8012d62:	e03a      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d68:	f003 0301 	and.w	r3, r3, #1
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d004      	beq.n	8012d7a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	2201      	movs	r2, #1
 8012d74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d76:	2301      	movs	r3, #1
 8012d78:	e02f      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012d7a:	68f8      	ldr	r0, [r7, #12]
 8012d7c:	f7ff fb7c 	bl	8012478 <SDMMC_GetCommandResponse>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	7afb      	ldrb	r3, [r7, #11]
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d001      	beq.n	8012d8e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e025      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	4a16      	ldr	r2, [pc, #88]	; (8012dec <SDMMC_GetCmdResp6+0xec>)
 8012d92:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012d94:	2100      	movs	r1, #0
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f7ff fb7b 	bl	8012492 <SDMMC_GetResponse>
 8012d9c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012d9e:	697b      	ldr	r3, [r7, #20]
 8012da0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d106      	bne.n	8012db6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012da8:	697b      	ldr	r3, [r7, #20]
 8012daa:	0c1b      	lsrs	r3, r3, #16
 8012dac:	b29a      	uxth	r2, r3
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012db2:	2300      	movs	r3, #0
 8012db4:	e011      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d002      	beq.n	8012dc6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012dc4:	e009      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d002      	beq.n	8012dd6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012dd4:	e001      	b.n	8012dda <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012dd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3720      	adds	r7, #32
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	24000000 	.word	0x24000000
 8012de8:	10624dd3 	.word	0x10624dd3
 8012dec:	002000c5 	.word	0x002000c5

08012df0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012df0:	b480      	push	{r7}
 8012df2:	b085      	sub	sp, #20
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012df8:	4b22      	ldr	r3, [pc, #136]	; (8012e84 <SDMMC_GetCmdResp7+0x94>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4a22      	ldr	r2, [pc, #136]	; (8012e88 <SDMMC_GetCmdResp7+0x98>)
 8012dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8012e02:	0a5b      	lsrs	r3, r3, #9
 8012e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e08:	fb02 f303 	mul.w	r3, r2, r3
 8012e0c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	1e5a      	subs	r2, r3, #1
 8012e12:	60fa      	str	r2, [r7, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d102      	bne.n	8012e1e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e1c:	e02c      	b.n	8012e78 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e22:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d0ef      	beq.n	8012e0e <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1ea      	bne.n	8012e0e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e3c:	f003 0304 	and.w	r3, r3, #4
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d004      	beq.n	8012e4e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	2204      	movs	r2, #4
 8012e48:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e4a:	2304      	movs	r3, #4
 8012e4c:	e014      	b.n	8012e78 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e52:	f003 0301 	and.w	r3, r3, #1
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d004      	beq.n	8012e64 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e60:	2301      	movs	r3, #1
 8012e62:	e009      	b.n	8012e78 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d002      	beq.n	8012e76 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2240      	movs	r2, #64	; 0x40
 8012e74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e76:	2300      	movs	r3, #0

}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3714      	adds	r7, #20
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e82:	4770      	bx	lr
 8012e84:	24000000 	.word	0x24000000
 8012e88:	10624dd3 	.word	0x10624dd3

08012e8c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e94:	4b11      	ldr	r3, [pc, #68]	; (8012edc <SDMMC_GetCmdError+0x50>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	4a11      	ldr	r2, [pc, #68]	; (8012ee0 <SDMMC_GetCmdError+0x54>)
 8012e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e9e:	0a5b      	lsrs	r3, r3, #9
 8012ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ea4:	fb02 f303 	mul.w	r3, r2, r3
 8012ea8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	1e5a      	subs	r2, r3, #1
 8012eae:	60fa      	str	r2, [r7, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012eb8:	e009      	b.n	8012ece <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d0f1      	beq.n	8012eaa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4a06      	ldr	r2, [pc, #24]	; (8012ee4 <SDMMC_GetCmdError+0x58>)
 8012eca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012ecc:	2300      	movs	r3, #0
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	24000000 	.word	0x24000000
 8012ee0:	10624dd3 	.word	0x10624dd3
 8012ee4:	002000c5 	.word	0x002000c5

08012ee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012ee8:	b084      	sub	sp, #16
 8012eea:	b580      	push	{r7, lr}
 8012eec:	b084      	sub	sp, #16
 8012eee:	af00      	add	r7, sp, #0
 8012ef0:	6078      	str	r0, [r7, #4]
 8012ef2:	f107 001c 	add.w	r0, r7, #28
 8012ef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d120      	bne.n	8012f42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	68da      	ldr	r2, [r3, #12]
 8012f10:	4b2a      	ldr	r3, [pc, #168]	; (8012fbc <USB_CoreInit+0xd4>)
 8012f12:	4013      	ands	r3, r2
 8012f14:	687a      	ldr	r2, [r7, #4]
 8012f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f26:	2b01      	cmp	r3, #1
 8012f28:	d105      	bne.n	8012f36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	68db      	ldr	r3, [r3, #12]
 8012f2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f001 faf8 	bl	801452c <USB_CoreReset>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	73fb      	strb	r3, [r7, #15]
 8012f40:	e01a      	b.n	8012f78 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	68db      	ldr	r3, [r3, #12]
 8012f46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f001 faec 	bl	801452c <USB_CoreReset>
 8012f54:	4603      	mov	r3, r0
 8012f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d106      	bne.n	8012f6c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	639a      	str	r2, [r3, #56]	; 0x38
 8012f6a:	e005      	b.n	8012f78 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d116      	bne.n	8012fac <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f82:	b29a      	uxth	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012f8c:	4b0c      	ldr	r3, [pc, #48]	; (8012fc0 <USB_CoreInit+0xd8>)
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	687a      	ldr	r2, [r7, #4]
 8012f92:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	f043 0206 	orr.w	r2, r3, #6
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	689b      	ldr	r3, [r3, #8]
 8012fa4:	f043 0220 	orr.w	r2, r3, #32
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012fb8:	b004      	add	sp, #16
 8012fba:	4770      	bx	lr
 8012fbc:	ffbdffbf 	.word	0xffbdffbf
 8012fc0:	03ee0000 	.word	0x03ee0000

08012fc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b087      	sub	sp, #28
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	60f8      	str	r0, [r7, #12]
 8012fcc:	60b9      	str	r1, [r7, #8]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012fd2:	79fb      	ldrb	r3, [r7, #7]
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d165      	bne.n	80130a4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012fd8:	68bb      	ldr	r3, [r7, #8]
 8012fda:	4a41      	ldr	r2, [pc, #260]	; (80130e0 <USB_SetTurnaroundTime+0x11c>)
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d906      	bls.n	8012fee <USB_SetTurnaroundTime+0x2a>
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	4a40      	ldr	r2, [pc, #256]	; (80130e4 <USB_SetTurnaroundTime+0x120>)
 8012fe4:	4293      	cmp	r3, r2
 8012fe6:	d202      	bcs.n	8012fee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012fe8:	230f      	movs	r3, #15
 8012fea:	617b      	str	r3, [r7, #20]
 8012fec:	e062      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	4a3c      	ldr	r2, [pc, #240]	; (80130e4 <USB_SetTurnaroundTime+0x120>)
 8012ff2:	4293      	cmp	r3, r2
 8012ff4:	d306      	bcc.n	8013004 <USB_SetTurnaroundTime+0x40>
 8012ff6:	68bb      	ldr	r3, [r7, #8]
 8012ff8:	4a3b      	ldr	r2, [pc, #236]	; (80130e8 <USB_SetTurnaroundTime+0x124>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d202      	bcs.n	8013004 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012ffe:	230e      	movs	r3, #14
 8013000:	617b      	str	r3, [r7, #20]
 8013002:	e057      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013004:	68bb      	ldr	r3, [r7, #8]
 8013006:	4a38      	ldr	r2, [pc, #224]	; (80130e8 <USB_SetTurnaroundTime+0x124>)
 8013008:	4293      	cmp	r3, r2
 801300a:	d306      	bcc.n	801301a <USB_SetTurnaroundTime+0x56>
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	4a37      	ldr	r2, [pc, #220]	; (80130ec <USB_SetTurnaroundTime+0x128>)
 8013010:	4293      	cmp	r3, r2
 8013012:	d202      	bcs.n	801301a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013014:	230d      	movs	r3, #13
 8013016:	617b      	str	r3, [r7, #20]
 8013018:	e04c      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	4a33      	ldr	r2, [pc, #204]	; (80130ec <USB_SetTurnaroundTime+0x128>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d306      	bcc.n	8013030 <USB_SetTurnaroundTime+0x6c>
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	4a32      	ldr	r2, [pc, #200]	; (80130f0 <USB_SetTurnaroundTime+0x12c>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d802      	bhi.n	8013030 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801302a:	230c      	movs	r3, #12
 801302c:	617b      	str	r3, [r7, #20]
 801302e:	e041      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	4a2f      	ldr	r2, [pc, #188]	; (80130f0 <USB_SetTurnaroundTime+0x12c>)
 8013034:	4293      	cmp	r3, r2
 8013036:	d906      	bls.n	8013046 <USB_SetTurnaroundTime+0x82>
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	4a2e      	ldr	r2, [pc, #184]	; (80130f4 <USB_SetTurnaroundTime+0x130>)
 801303c:	4293      	cmp	r3, r2
 801303e:	d802      	bhi.n	8013046 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013040:	230b      	movs	r3, #11
 8013042:	617b      	str	r3, [r7, #20]
 8013044:	e036      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	4a2a      	ldr	r2, [pc, #168]	; (80130f4 <USB_SetTurnaroundTime+0x130>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d906      	bls.n	801305c <USB_SetTurnaroundTime+0x98>
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	4a29      	ldr	r2, [pc, #164]	; (80130f8 <USB_SetTurnaroundTime+0x134>)
 8013052:	4293      	cmp	r3, r2
 8013054:	d802      	bhi.n	801305c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013056:	230a      	movs	r3, #10
 8013058:	617b      	str	r3, [r7, #20]
 801305a:	e02b      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	4a26      	ldr	r2, [pc, #152]	; (80130f8 <USB_SetTurnaroundTime+0x134>)
 8013060:	4293      	cmp	r3, r2
 8013062:	d906      	bls.n	8013072 <USB_SetTurnaroundTime+0xae>
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	4a25      	ldr	r2, [pc, #148]	; (80130fc <USB_SetTurnaroundTime+0x138>)
 8013068:	4293      	cmp	r3, r2
 801306a:	d202      	bcs.n	8013072 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801306c:	2309      	movs	r3, #9
 801306e:	617b      	str	r3, [r7, #20]
 8013070:	e020      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	4a21      	ldr	r2, [pc, #132]	; (80130fc <USB_SetTurnaroundTime+0x138>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d306      	bcc.n	8013088 <USB_SetTurnaroundTime+0xc4>
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	4a20      	ldr	r2, [pc, #128]	; (8013100 <USB_SetTurnaroundTime+0x13c>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d802      	bhi.n	8013088 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013082:	2308      	movs	r3, #8
 8013084:	617b      	str	r3, [r7, #20]
 8013086:	e015      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	4a1d      	ldr	r2, [pc, #116]	; (8013100 <USB_SetTurnaroundTime+0x13c>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d906      	bls.n	801309e <USB_SetTurnaroundTime+0xda>
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	4a1c      	ldr	r2, [pc, #112]	; (8013104 <USB_SetTurnaroundTime+0x140>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d202      	bcs.n	801309e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013098:	2307      	movs	r3, #7
 801309a:	617b      	str	r3, [r7, #20]
 801309c:	e00a      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801309e:	2306      	movs	r3, #6
 80130a0:	617b      	str	r3, [r7, #20]
 80130a2:	e007      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80130a4:	79fb      	ldrb	r3, [r7, #7]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d102      	bne.n	80130b0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80130aa:	2309      	movs	r3, #9
 80130ac:	617b      	str	r3, [r7, #20]
 80130ae:	e001      	b.n	80130b4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80130b0:	2309      	movs	r3, #9
 80130b2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	68da      	ldr	r2, [r3, #12]
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	029b      	lsls	r3, r3, #10
 80130c8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80130cc:	431a      	orrs	r2, r3
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80130d2:	2300      	movs	r3, #0
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	371c      	adds	r7, #28
 80130d8:	46bd      	mov	sp, r7
 80130da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130de:	4770      	bx	lr
 80130e0:	00d8acbf 	.word	0x00d8acbf
 80130e4:	00e4e1c0 	.word	0x00e4e1c0
 80130e8:	00f42400 	.word	0x00f42400
 80130ec:	01067380 	.word	0x01067380
 80130f0:	011a499f 	.word	0x011a499f
 80130f4:	01312cff 	.word	0x01312cff
 80130f8:	014ca43f 	.word	0x014ca43f
 80130fc:	016e3600 	.word	0x016e3600
 8013100:	01a6ab1f 	.word	0x01a6ab1f
 8013104:	01e84800 	.word	0x01e84800

08013108 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013108:	b480      	push	{r7}
 801310a:	b083      	sub	sp, #12
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	f043 0201 	orr.w	r2, r3, #1
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801311c:	2300      	movs	r3, #0
}
 801311e:	4618      	mov	r0, r3
 8013120:	370c      	adds	r7, #12
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr

0801312a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801312a:	b480      	push	{r7}
 801312c:	b083      	sub	sp, #12
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	f023 0201 	bic.w	r2, r3, #1
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801313e:	2300      	movs	r3, #0
}
 8013140:	4618      	mov	r0, r3
 8013142:	370c      	adds	r7, #12
 8013144:	46bd      	mov	sp, r7
 8013146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314a:	4770      	bx	lr

0801314c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b084      	sub	sp, #16
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
 8013154:	460b      	mov	r3, r1
 8013156:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013158:	2300      	movs	r3, #0
 801315a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013168:	78fb      	ldrb	r3, [r7, #3]
 801316a:	2b01      	cmp	r3, #1
 801316c:	d115      	bne.n	801319a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	68db      	ldr	r3, [r3, #12]
 8013172:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801317a:	2001      	movs	r0, #1
 801317c:	f7f0 fea6 	bl	8003ecc <HAL_Delay>
      ms++;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	3301      	adds	r3, #1
 8013184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f001 f93f 	bl	801440a <USB_GetMode>
 801318c:	4603      	mov	r3, r0
 801318e:	2b01      	cmp	r3, #1
 8013190:	d01e      	beq.n	80131d0 <USB_SetCurrentMode+0x84>
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b31      	cmp	r3, #49	; 0x31
 8013196:	d9f0      	bls.n	801317a <USB_SetCurrentMode+0x2e>
 8013198:	e01a      	b.n	80131d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801319a:	78fb      	ldrb	r3, [r7, #3]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d115      	bne.n	80131cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80131ac:	2001      	movs	r0, #1
 80131ae:	f7f0 fe8d 	bl	8003ecc <HAL_Delay>
      ms++;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	3301      	adds	r3, #1
 80131b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f001 f926 	bl	801440a <USB_GetMode>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d005      	beq.n	80131d0 <USB_SetCurrentMode+0x84>
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2b31      	cmp	r3, #49	; 0x31
 80131c8:	d9f0      	bls.n	80131ac <USB_SetCurrentMode+0x60>
 80131ca:	e001      	b.n	80131d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80131cc:	2301      	movs	r3, #1
 80131ce:	e005      	b.n	80131dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	2b32      	cmp	r3, #50	; 0x32
 80131d4:	d101      	bne.n	80131da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80131d6:	2301      	movs	r3, #1
 80131d8:	e000      	b.n	80131dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80131da:	2300      	movs	r3, #0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3710      	adds	r7, #16
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80131e4:	b084      	sub	sp, #16
 80131e6:	b580      	push	{r7, lr}
 80131e8:	b086      	sub	sp, #24
 80131ea:	af00      	add	r7, sp, #0
 80131ec:	6078      	str	r0, [r7, #4]
 80131ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80131f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80131fe:	2300      	movs	r3, #0
 8013200:	613b      	str	r3, [r7, #16]
 8013202:	e009      	b.n	8013218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	693b      	ldr	r3, [r7, #16]
 8013208:	3340      	adds	r3, #64	; 0x40
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	4413      	add	r3, r2
 801320e:	2200      	movs	r2, #0
 8013210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013212:	693b      	ldr	r3, [r7, #16]
 8013214:	3301      	adds	r3, #1
 8013216:	613b      	str	r3, [r7, #16]
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	2b0e      	cmp	r3, #14
 801321c:	d9f2      	bls.n	8013204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013220:	2b00      	cmp	r3, #0
 8013222:	d11c      	bne.n	801325e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801322a:	685b      	ldr	r3, [r3, #4]
 801322c:	68fa      	ldr	r2, [r7, #12]
 801322e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013232:	f043 0302 	orr.w	r3, r3, #2
 8013236:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801323c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	601a      	str	r2, [r3, #0]
 801325c:	e005      	b.n	801326a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013262:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013270:	461a      	mov	r2, r3
 8013272:	2300      	movs	r3, #0
 8013274:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801327c:	4619      	mov	r1, r3
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013284:	461a      	mov	r2, r3
 8013286:	680b      	ldr	r3, [r1, #0]
 8013288:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801328a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801328c:	2b01      	cmp	r3, #1
 801328e:	d10c      	bne.n	80132aa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013292:	2b00      	cmp	r3, #0
 8013294:	d104      	bne.n	80132a0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013296:	2100      	movs	r1, #0
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f000 f965 	bl	8013568 <USB_SetDevSpeed>
 801329e:	e008      	b.n	80132b2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80132a0:	2101      	movs	r1, #1
 80132a2:	6878      	ldr	r0, [r7, #4]
 80132a4:	f000 f960 	bl	8013568 <USB_SetDevSpeed>
 80132a8:	e003      	b.n	80132b2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80132aa:	2103      	movs	r1, #3
 80132ac:	6878      	ldr	r0, [r7, #4]
 80132ae:	f000 f95b 	bl	8013568 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80132b2:	2110      	movs	r1, #16
 80132b4:	6878      	ldr	r0, [r7, #4]
 80132b6:	f000 f8f3 	bl	80134a0 <USB_FlushTxFifo>
 80132ba:	4603      	mov	r3, r0
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d001      	beq.n	80132c4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80132c0:	2301      	movs	r3, #1
 80132c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 f91f 	bl	8013508 <USB_FlushRxFifo>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d001      	beq.n	80132d4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80132d0:	2301      	movs	r3, #1
 80132d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132da:	461a      	mov	r2, r3
 80132dc:	2300      	movs	r3, #0
 80132de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132e6:	461a      	mov	r2, r3
 80132e8:	2300      	movs	r3, #0
 80132ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80132ec:	68fb      	ldr	r3, [r7, #12]
 80132ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80132f2:	461a      	mov	r2, r3
 80132f4:	2300      	movs	r3, #0
 80132f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80132f8:	2300      	movs	r3, #0
 80132fa:	613b      	str	r3, [r7, #16]
 80132fc:	e043      	b.n	8013386 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	015a      	lsls	r2, r3, #5
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	4413      	add	r3, r2
 8013306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013310:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013314:	d118      	bne.n	8013348 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013316:	693b      	ldr	r3, [r7, #16]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d10a      	bne.n	8013332 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801331c:	693b      	ldr	r3, [r7, #16]
 801331e:	015a      	lsls	r2, r3, #5
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	4413      	add	r3, r2
 8013324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013328:	461a      	mov	r2, r3
 801332a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801332e:	6013      	str	r3, [r2, #0]
 8013330:	e013      	b.n	801335a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013332:	693b      	ldr	r3, [r7, #16]
 8013334:	015a      	lsls	r2, r3, #5
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	4413      	add	r3, r2
 801333a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801333e:	461a      	mov	r2, r3
 8013340:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013344:	6013      	str	r3, [r2, #0]
 8013346:	e008      	b.n	801335a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013348:	693b      	ldr	r3, [r7, #16]
 801334a:	015a      	lsls	r2, r3, #5
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4413      	add	r3, r2
 8013350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013354:	461a      	mov	r2, r3
 8013356:	2300      	movs	r3, #0
 8013358:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801335a:	693b      	ldr	r3, [r7, #16]
 801335c:	015a      	lsls	r2, r3, #5
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	4413      	add	r3, r2
 8013362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013366:	461a      	mov	r2, r3
 8013368:	2300      	movs	r3, #0
 801336a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	015a      	lsls	r2, r3, #5
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	4413      	add	r3, r2
 8013374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013378:	461a      	mov	r2, r3
 801337a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801337e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	3301      	adds	r3, #1
 8013384:	613b      	str	r3, [r7, #16]
 8013386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013388:	693a      	ldr	r2, [r7, #16]
 801338a:	429a      	cmp	r2, r3
 801338c:	d3b7      	bcc.n	80132fe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801338e:	2300      	movs	r3, #0
 8013390:	613b      	str	r3, [r7, #16]
 8013392:	e043      	b.n	801341c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013394:	693b      	ldr	r3, [r7, #16]
 8013396:	015a      	lsls	r2, r3, #5
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	4413      	add	r3, r2
 801339c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80133a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80133aa:	d118      	bne.n	80133de <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80133ac:	693b      	ldr	r3, [r7, #16]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d10a      	bne.n	80133c8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80133b2:	693b      	ldr	r3, [r7, #16]
 80133b4:	015a      	lsls	r2, r3, #5
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	4413      	add	r3, r2
 80133ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133be:	461a      	mov	r2, r3
 80133c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80133c4:	6013      	str	r3, [r2, #0]
 80133c6:	e013      	b.n	80133f0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	015a      	lsls	r2, r3, #5
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	4413      	add	r3, r2
 80133d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133d4:	461a      	mov	r2, r3
 80133d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80133da:	6013      	str	r3, [r2, #0]
 80133dc:	e008      	b.n	80133f0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	015a      	lsls	r2, r3, #5
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	4413      	add	r3, r2
 80133e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133ea:	461a      	mov	r2, r3
 80133ec:	2300      	movs	r3, #0
 80133ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	015a      	lsls	r2, r3, #5
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	4413      	add	r3, r2
 80133f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133fc:	461a      	mov	r2, r3
 80133fe:	2300      	movs	r3, #0
 8013400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	015a      	lsls	r2, r3, #5
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	4413      	add	r3, r2
 801340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801340e:	461a      	mov	r2, r3
 8013410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013414:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	3301      	adds	r3, #1
 801341a:	613b      	str	r3, [r7, #16]
 801341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341e:	693a      	ldr	r2, [r7, #16]
 8013420:	429a      	cmp	r2, r3
 8013422:	d3b7      	bcc.n	8013394 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801342a:	691b      	ldr	r3, [r3, #16]
 801342c:	68fa      	ldr	r2, [r7, #12]
 801342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013432:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013436:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	2200      	movs	r2, #0
 801343c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013444:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013448:	2b00      	cmp	r3, #0
 801344a:	d105      	bne.n	8013458 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	699b      	ldr	r3, [r3, #24]
 8013450:	f043 0210 	orr.w	r2, r3, #16
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	699a      	ldr	r2, [r3, #24]
 801345c:	4b0e      	ldr	r3, [pc, #56]	; (8013498 <USB_DevInit+0x2b4>)
 801345e:	4313      	orrs	r3, r2
 8013460:	687a      	ldr	r2, [r7, #4]
 8013462:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013466:	2b00      	cmp	r3, #0
 8013468:	d005      	beq.n	8013476 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	699b      	ldr	r3, [r3, #24]
 801346e:	f043 0208 	orr.w	r2, r3, #8
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013478:	2b01      	cmp	r3, #1
 801347a:	d105      	bne.n	8013488 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	699a      	ldr	r2, [r3, #24]
 8013480:	4b06      	ldr	r3, [pc, #24]	; (801349c <USB_DevInit+0x2b8>)
 8013482:	4313      	orrs	r3, r2
 8013484:	687a      	ldr	r2, [r7, #4]
 8013486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013488:	7dfb      	ldrb	r3, [r7, #23]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3718      	adds	r7, #24
 801348e:	46bd      	mov	sp, r7
 8013490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013494:	b004      	add	sp, #16
 8013496:	4770      	bx	lr
 8013498:	803c3800 	.word	0x803c3800
 801349c:	40000004 	.word	0x40000004

080134a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80134aa:	2300      	movs	r3, #0
 80134ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3301      	adds	r3, #1
 80134b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	4a13      	ldr	r2, [pc, #76]	; (8013504 <USB_FlushTxFifo+0x64>)
 80134b8:	4293      	cmp	r3, r2
 80134ba:	d901      	bls.n	80134c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80134bc:	2303      	movs	r3, #3
 80134be:	e01b      	b.n	80134f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	691b      	ldr	r3, [r3, #16]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	daf2      	bge.n	80134ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80134c8:	2300      	movs	r3, #0
 80134ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	019b      	lsls	r3, r3, #6
 80134d0:	f043 0220 	orr.w	r2, r3, #32
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	3301      	adds	r3, #1
 80134dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	4a08      	ldr	r2, [pc, #32]	; (8013504 <USB_FlushTxFifo+0x64>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d901      	bls.n	80134ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80134e6:	2303      	movs	r3, #3
 80134e8:	e006      	b.n	80134f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	691b      	ldr	r3, [r3, #16]
 80134ee:	f003 0320 	and.w	r3, r3, #32
 80134f2:	2b20      	cmp	r3, #32
 80134f4:	d0f0      	beq.n	80134d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80134f6:	2300      	movs	r3, #0
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	3714      	adds	r7, #20
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr
 8013504:	00030d40 	.word	0x00030d40

08013508 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013510:	2300      	movs	r3, #0
 8013512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3301      	adds	r3, #1
 8013518:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	4a11      	ldr	r2, [pc, #68]	; (8013564 <USB_FlushRxFifo+0x5c>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d901      	bls.n	8013526 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013522:	2303      	movs	r3, #3
 8013524:	e018      	b.n	8013558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	691b      	ldr	r3, [r3, #16]
 801352a:	2b00      	cmp	r3, #0
 801352c:	daf2      	bge.n	8013514 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801352e:	2300      	movs	r3, #0
 8013530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2210      	movs	r2, #16
 8013536:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	3301      	adds	r3, #1
 801353c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	4a08      	ldr	r2, [pc, #32]	; (8013564 <USB_FlushRxFifo+0x5c>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d901      	bls.n	801354a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013546:	2303      	movs	r3, #3
 8013548:	e006      	b.n	8013558 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	691b      	ldr	r3, [r3, #16]
 801354e:	f003 0310 	and.w	r3, r3, #16
 8013552:	2b10      	cmp	r3, #16
 8013554:	d0f0      	beq.n	8013538 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013556:	2300      	movs	r3, #0
}
 8013558:	4618      	mov	r0, r3
 801355a:	3714      	adds	r7, #20
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr
 8013564:	00030d40 	.word	0x00030d40

08013568 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013568:	b480      	push	{r7}
 801356a:	b085      	sub	sp, #20
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	460b      	mov	r3, r1
 8013572:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801357e:	681a      	ldr	r2, [r3, #0]
 8013580:	78fb      	ldrb	r3, [r7, #3]
 8013582:	68f9      	ldr	r1, [r7, #12]
 8013584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013588:	4313      	orrs	r3, r2
 801358a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801358c:	2300      	movs	r3, #0
}
 801358e:	4618      	mov	r0, r3
 8013590:	3714      	adds	r7, #20
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr

0801359a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801359a:	b480      	push	{r7}
 801359c:	b087      	sub	sp, #28
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80135a6:	693b      	ldr	r3, [r7, #16]
 80135a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135ac:	689b      	ldr	r3, [r3, #8]
 80135ae:	f003 0306 	and.w	r3, r3, #6
 80135b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d102      	bne.n	80135c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80135ba:	2300      	movs	r3, #0
 80135bc:	75fb      	strb	r3, [r7, #23]
 80135be:	e00a      	b.n	80135d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2b02      	cmp	r3, #2
 80135c4:	d002      	beq.n	80135cc <USB_GetDevSpeed+0x32>
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	2b06      	cmp	r3, #6
 80135ca:	d102      	bne.n	80135d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80135cc:	2302      	movs	r3, #2
 80135ce:	75fb      	strb	r3, [r7, #23]
 80135d0:	e001      	b.n	80135d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80135d2:	230f      	movs	r3, #15
 80135d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80135d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80135d8:	4618      	mov	r0, r3
 80135da:	371c      	adds	r7, #28
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr

080135e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	785b      	ldrb	r3, [r3, #1]
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d139      	bne.n	8013674 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013606:	69da      	ldr	r2, [r3, #28]
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	f003 030f 	and.w	r3, r3, #15
 8013610:	2101      	movs	r1, #1
 8013612:	fa01 f303 	lsl.w	r3, r1, r3
 8013616:	b29b      	uxth	r3, r3
 8013618:	68f9      	ldr	r1, [r7, #12]
 801361a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801361e:	4313      	orrs	r3, r2
 8013620:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	015a      	lsls	r2, r3, #5
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	4413      	add	r3, r2
 801362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013634:	2b00      	cmp	r3, #0
 8013636:	d153      	bne.n	80136e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	015a      	lsls	r2, r3, #5
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	4413      	add	r3, r2
 8013640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	689b      	ldr	r3, [r3, #8]
 801364a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	791b      	ldrb	r3, [r3, #4]
 8013652:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013654:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	059b      	lsls	r3, r3, #22
 801365a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801365c:	431a      	orrs	r2, r3
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	0159      	lsls	r1, r3, #5
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	440b      	add	r3, r1
 8013666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801366a:	4619      	mov	r1, r3
 801366c:	4b20      	ldr	r3, [pc, #128]	; (80136f0 <USB_ActivateEndpoint+0x10c>)
 801366e:	4313      	orrs	r3, r2
 8013670:	600b      	str	r3, [r1, #0]
 8013672:	e035      	b.n	80136e0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801367a:	69da      	ldr	r2, [r3, #28]
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	f003 030f 	and.w	r3, r3, #15
 8013684:	2101      	movs	r1, #1
 8013686:	fa01 f303 	lsl.w	r3, r1, r3
 801368a:	041b      	lsls	r3, r3, #16
 801368c:	68f9      	ldr	r1, [r7, #12]
 801368e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013692:	4313      	orrs	r3, r2
 8013694:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	015a      	lsls	r2, r3, #5
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	4413      	add	r3, r2
 801369e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d119      	bne.n	80136e0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	015a      	lsls	r2, r3, #5
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	4413      	add	r3, r2
 80136b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	689b      	ldr	r3, [r3, #8]
 80136be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	791b      	ldrb	r3, [r3, #4]
 80136c6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80136c8:	430b      	orrs	r3, r1
 80136ca:	431a      	orrs	r2, r3
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	0159      	lsls	r1, r3, #5
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	440b      	add	r3, r1
 80136d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136d8:	4619      	mov	r1, r3
 80136da:	4b05      	ldr	r3, [pc, #20]	; (80136f0 <USB_ActivateEndpoint+0x10c>)
 80136dc:	4313      	orrs	r3, r2
 80136de:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3714      	adds	r7, #20
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	10008000 	.word	0x10008000

080136f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80136f4:	b480      	push	{r7}
 80136f6:	b085      	sub	sp, #20
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013708:	683b      	ldr	r3, [r7, #0]
 801370a:	785b      	ldrb	r3, [r3, #1]
 801370c:	2b01      	cmp	r3, #1
 801370e:	d161      	bne.n	80137d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013710:	68bb      	ldr	r3, [r7, #8]
 8013712:	015a      	lsls	r2, r3, #5
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	4413      	add	r3, r2
 8013718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013726:	d11f      	bne.n	8013768 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	015a      	lsls	r2, r3, #5
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	4413      	add	r3, r2
 8013730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	68ba      	ldr	r2, [r7, #8]
 8013738:	0151      	lsls	r1, r2, #5
 801373a:	68fa      	ldr	r2, [r7, #12]
 801373c:	440a      	add	r2, r1
 801373e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013742:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013746:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	015a      	lsls	r2, r3, #5
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	4413      	add	r3, r2
 8013750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	0151      	lsls	r1, r2, #5
 801375a:	68fa      	ldr	r2, [r7, #12]
 801375c:	440a      	add	r2, r1
 801375e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013762:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013766:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801376e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	781b      	ldrb	r3, [r3, #0]
 8013774:	f003 030f 	and.w	r3, r3, #15
 8013778:	2101      	movs	r1, #1
 801377a:	fa01 f303 	lsl.w	r3, r1, r3
 801377e:	b29b      	uxth	r3, r3
 8013780:	43db      	mvns	r3, r3
 8013782:	68f9      	ldr	r1, [r7, #12]
 8013784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013788:	4013      	ands	r3, r2
 801378a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013792:	69da      	ldr	r2, [r3, #28]
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	f003 030f 	and.w	r3, r3, #15
 801379c:	2101      	movs	r1, #1
 801379e:	fa01 f303 	lsl.w	r3, r1, r3
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	43db      	mvns	r3, r3
 80137a6:	68f9      	ldr	r1, [r7, #12]
 80137a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137ac:	4013      	ands	r3, r2
 80137ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	015a      	lsls	r2, r3, #5
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	4413      	add	r3, r2
 80137b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	0159      	lsls	r1, r3, #5
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	440b      	add	r3, r1
 80137c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137ca:	4619      	mov	r1, r3
 80137cc:	4b35      	ldr	r3, [pc, #212]	; (80138a4 <USB_DeactivateEndpoint+0x1b0>)
 80137ce:	4013      	ands	r3, r2
 80137d0:	600b      	str	r3, [r1, #0]
 80137d2:	e060      	b.n	8013896 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	015a      	lsls	r2, r3, #5
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	4413      	add	r3, r2
 80137dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80137e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80137ea:	d11f      	bne.n	801382c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80137ec:	68bb      	ldr	r3, [r7, #8]
 80137ee:	015a      	lsls	r2, r3, #5
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	4413      	add	r3, r2
 80137f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	68ba      	ldr	r2, [r7, #8]
 80137fc:	0151      	lsls	r1, r2, #5
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	440a      	add	r2, r1
 8013802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013806:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801380a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801380c:	68bb      	ldr	r3, [r7, #8]
 801380e:	015a      	lsls	r2, r3, #5
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	4413      	add	r3, r2
 8013814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	68ba      	ldr	r2, [r7, #8]
 801381c:	0151      	lsls	r1, r2, #5
 801381e:	68fa      	ldr	r2, [r7, #12]
 8013820:	440a      	add	r2, r1
 8013822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013826:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801382a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f003 030f 	and.w	r3, r3, #15
 801383c:	2101      	movs	r1, #1
 801383e:	fa01 f303 	lsl.w	r3, r1, r3
 8013842:	041b      	lsls	r3, r3, #16
 8013844:	43db      	mvns	r3, r3
 8013846:	68f9      	ldr	r1, [r7, #12]
 8013848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801384c:	4013      	ands	r3, r2
 801384e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013856:	69da      	ldr	r2, [r3, #28]
 8013858:	683b      	ldr	r3, [r7, #0]
 801385a:	781b      	ldrb	r3, [r3, #0]
 801385c:	f003 030f 	and.w	r3, r3, #15
 8013860:	2101      	movs	r1, #1
 8013862:	fa01 f303 	lsl.w	r3, r1, r3
 8013866:	041b      	lsls	r3, r3, #16
 8013868:	43db      	mvns	r3, r3
 801386a:	68f9      	ldr	r1, [r7, #12]
 801386c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013870:	4013      	ands	r3, r2
 8013872:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	015a      	lsls	r2, r3, #5
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	4413      	add	r3, r2
 801387c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013880:	681a      	ldr	r2, [r3, #0]
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	0159      	lsls	r1, r3, #5
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	440b      	add	r3, r1
 801388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801388e:	4619      	mov	r1, r3
 8013890:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <USB_DeactivateEndpoint+0x1b4>)
 8013892:	4013      	ands	r3, r2
 8013894:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013896:	2300      	movs	r3, #0
}
 8013898:	4618      	mov	r0, r3
 801389a:	3714      	adds	r7, #20
 801389c:	46bd      	mov	sp, r7
 801389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a2:	4770      	bx	lr
 80138a4:	ec337800 	.word	0xec337800
 80138a8:	eff37800 	.word	0xeff37800

080138ac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b08a      	sub	sp, #40	; 0x28
 80138b0:	af02      	add	r7, sp, #8
 80138b2:	60f8      	str	r0, [r7, #12]
 80138b4:	60b9      	str	r1, [r7, #8]
 80138b6:	4613      	mov	r3, r2
 80138b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80138c4:	68bb      	ldr	r3, [r7, #8]
 80138c6:	785b      	ldrb	r3, [r3, #1]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	f040 8181 	bne.w	8013bd0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	691b      	ldr	r3, [r3, #16]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d132      	bne.n	801393c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138d6:	69bb      	ldr	r3, [r7, #24]
 80138d8:	015a      	lsls	r2, r3, #5
 80138da:	69fb      	ldr	r3, [r7, #28]
 80138dc:	4413      	add	r3, r2
 80138de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e2:	691a      	ldr	r2, [r3, #16]
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	0159      	lsls	r1, r3, #5
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	440b      	add	r3, r1
 80138ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138f0:	4619      	mov	r1, r3
 80138f2:	4ba5      	ldr	r3, [pc, #660]	; (8013b88 <USB_EPStartXfer+0x2dc>)
 80138f4:	4013      	ands	r3, r2
 80138f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	015a      	lsls	r2, r3, #5
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	4413      	add	r3, r2
 8013900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013904:	691b      	ldr	r3, [r3, #16]
 8013906:	69ba      	ldr	r2, [r7, #24]
 8013908:	0151      	lsls	r1, r2, #5
 801390a:	69fa      	ldr	r2, [r7, #28]
 801390c:	440a      	add	r2, r1
 801390e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013918:	69bb      	ldr	r3, [r7, #24]
 801391a:	015a      	lsls	r2, r3, #5
 801391c:	69fb      	ldr	r3, [r7, #28]
 801391e:	4413      	add	r3, r2
 8013920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013924:	691a      	ldr	r2, [r3, #16]
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	0159      	lsls	r1, r3, #5
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	440b      	add	r3, r1
 801392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013932:	4619      	mov	r1, r3
 8013934:	4b95      	ldr	r3, [pc, #596]	; (8013b8c <USB_EPStartXfer+0x2e0>)
 8013936:	4013      	ands	r3, r2
 8013938:	610b      	str	r3, [r1, #16]
 801393a:	e092      	b.n	8013a62 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	015a      	lsls	r2, r3, #5
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	4413      	add	r3, r2
 8013944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013948:	691a      	ldr	r2, [r3, #16]
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	0159      	lsls	r1, r3, #5
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	440b      	add	r3, r1
 8013952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013956:	4619      	mov	r1, r3
 8013958:	4b8c      	ldr	r3, [pc, #560]	; (8013b8c <USB_EPStartXfer+0x2e0>)
 801395a:	4013      	ands	r3, r2
 801395c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801395e:	69bb      	ldr	r3, [r7, #24]
 8013960:	015a      	lsls	r2, r3, #5
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	4413      	add	r3, r2
 8013966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801396a:	691a      	ldr	r2, [r3, #16]
 801396c:	69bb      	ldr	r3, [r7, #24]
 801396e:	0159      	lsls	r1, r3, #5
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	440b      	add	r3, r1
 8013974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013978:	4619      	mov	r1, r3
 801397a:	4b83      	ldr	r3, [pc, #524]	; (8013b88 <USB_EPStartXfer+0x2dc>)
 801397c:	4013      	ands	r3, r2
 801397e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d11a      	bne.n	80139bc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013986:	68bb      	ldr	r3, [r7, #8]
 8013988:	691a      	ldr	r2, [r3, #16]
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	689b      	ldr	r3, [r3, #8]
 801398e:	429a      	cmp	r2, r3
 8013990:	d903      	bls.n	801399a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	689a      	ldr	r2, [r3, #8]
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	015a      	lsls	r2, r3, #5
 801399e:	69fb      	ldr	r3, [r7, #28]
 80139a0:	4413      	add	r3, r2
 80139a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139a6:	691b      	ldr	r3, [r3, #16]
 80139a8:	69ba      	ldr	r2, [r7, #24]
 80139aa:	0151      	lsls	r1, r2, #5
 80139ac:	69fa      	ldr	r2, [r7, #28]
 80139ae:	440a      	add	r2, r1
 80139b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80139b8:	6113      	str	r3, [r2, #16]
 80139ba:	e01b      	b.n	80139f4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80139bc:	69bb      	ldr	r3, [r7, #24]
 80139be:	015a      	lsls	r2, r3, #5
 80139c0:	69fb      	ldr	r3, [r7, #28]
 80139c2:	4413      	add	r3, r2
 80139c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139c8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80139ca:	68bb      	ldr	r3, [r7, #8]
 80139cc:	6919      	ldr	r1, [r3, #16]
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	689b      	ldr	r3, [r3, #8]
 80139d2:	440b      	add	r3, r1
 80139d4:	1e59      	subs	r1, r3, #1
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	689b      	ldr	r3, [r3, #8]
 80139da:	fbb1 f3f3 	udiv	r3, r1, r3
 80139de:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80139e0:	4b6b      	ldr	r3, [pc, #428]	; (8013b90 <USB_EPStartXfer+0x2e4>)
 80139e2:	400b      	ands	r3, r1
 80139e4:	69b9      	ldr	r1, [r7, #24]
 80139e6:	0148      	lsls	r0, r1, #5
 80139e8:	69f9      	ldr	r1, [r7, #28]
 80139ea:	4401      	add	r1, r0
 80139ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80139f0:	4313      	orrs	r3, r2
 80139f2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80139f4:	69bb      	ldr	r3, [r7, #24]
 80139f6:	015a      	lsls	r2, r3, #5
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	4413      	add	r3, r2
 80139fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a00:	691a      	ldr	r2, [r3, #16]
 8013a02:	68bb      	ldr	r3, [r7, #8]
 8013a04:	691b      	ldr	r3, [r3, #16]
 8013a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013a0a:	69b9      	ldr	r1, [r7, #24]
 8013a0c:	0148      	lsls	r0, r1, #5
 8013a0e:	69f9      	ldr	r1, [r7, #28]
 8013a10:	4401      	add	r1, r0
 8013a12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013a16:	4313      	orrs	r3, r2
 8013a18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013a1a:	68bb      	ldr	r3, [r7, #8]
 8013a1c:	791b      	ldrb	r3, [r3, #4]
 8013a1e:	2b01      	cmp	r3, #1
 8013a20:	d11f      	bne.n	8013a62 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013a22:	69bb      	ldr	r3, [r7, #24]
 8013a24:	015a      	lsls	r2, r3, #5
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	4413      	add	r3, r2
 8013a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2e:	691b      	ldr	r3, [r3, #16]
 8013a30:	69ba      	ldr	r2, [r7, #24]
 8013a32:	0151      	lsls	r1, r2, #5
 8013a34:	69fa      	ldr	r2, [r7, #28]
 8013a36:	440a      	add	r2, r1
 8013a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013a40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013a42:	69bb      	ldr	r3, [r7, #24]
 8013a44:	015a      	lsls	r2, r3, #5
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	4413      	add	r3, r2
 8013a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a4e:	691b      	ldr	r3, [r3, #16]
 8013a50:	69ba      	ldr	r2, [r7, #24]
 8013a52:	0151      	lsls	r1, r2, #5
 8013a54:	69fa      	ldr	r2, [r7, #28]
 8013a56:	440a      	add	r2, r1
 8013a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013a60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013a62:	79fb      	ldrb	r3, [r7, #7]
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d14b      	bne.n	8013b00 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013a68:	68bb      	ldr	r3, [r7, #8]
 8013a6a:	69db      	ldr	r3, [r3, #28]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d009      	beq.n	8013a84 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013a70:	69bb      	ldr	r3, [r7, #24]
 8013a72:	015a      	lsls	r2, r3, #5
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	4413      	add	r3, r2
 8013a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a7c:	461a      	mov	r2, r3
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	69db      	ldr	r3, [r3, #28]
 8013a82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	791b      	ldrb	r3, [r3, #4]
 8013a88:	2b01      	cmp	r3, #1
 8013a8a:	d128      	bne.n	8013ade <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a92:	689b      	ldr	r3, [r3, #8]
 8013a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d110      	bne.n	8013abe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	015a      	lsls	r2, r3, #5
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	69ba      	ldr	r2, [r7, #24]
 8013aac:	0151      	lsls	r1, r2, #5
 8013aae:	69fa      	ldr	r2, [r7, #28]
 8013ab0:	440a      	add	r2, r1
 8013ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013aba:	6013      	str	r3, [r2, #0]
 8013abc:	e00f      	b.n	8013ade <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	015a      	lsls	r2, r3, #5
 8013ac2:	69fb      	ldr	r3, [r7, #28]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	69ba      	ldr	r2, [r7, #24]
 8013ace:	0151      	lsls	r1, r2, #5
 8013ad0:	69fa      	ldr	r2, [r7, #28]
 8013ad2:	440a      	add	r2, r1
 8013ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013adc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	015a      	lsls	r2, r3, #5
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	4413      	add	r3, r2
 8013ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	69ba      	ldr	r2, [r7, #24]
 8013aee:	0151      	lsls	r1, r2, #5
 8013af0:	69fa      	ldr	r2, [r7, #28]
 8013af2:	440a      	add	r2, r1
 8013af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013afc:	6013      	str	r3, [r2, #0]
 8013afe:	e16a      	b.n	8013dd6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013b00:	69bb      	ldr	r3, [r7, #24]
 8013b02:	015a      	lsls	r2, r3, #5
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	4413      	add	r3, r2
 8013b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	69ba      	ldr	r2, [r7, #24]
 8013b10:	0151      	lsls	r1, r2, #5
 8013b12:	69fa      	ldr	r2, [r7, #28]
 8013b14:	440a      	add	r2, r1
 8013b16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013b1e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	791b      	ldrb	r3, [r3, #4]
 8013b24:	2b01      	cmp	r3, #1
 8013b26:	d015      	beq.n	8013b54 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013b28:	68bb      	ldr	r3, [r7, #8]
 8013b2a:	691b      	ldr	r3, [r3, #16]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	f000 8152 	beq.w	8013dd6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	781b      	ldrb	r3, [r3, #0]
 8013b3e:	f003 030f 	and.w	r3, r3, #15
 8013b42:	2101      	movs	r1, #1
 8013b44:	fa01 f303 	lsl.w	r3, r1, r3
 8013b48:	69f9      	ldr	r1, [r7, #28]
 8013b4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b4e:	4313      	orrs	r3, r2
 8013b50:	634b      	str	r3, [r1, #52]	; 0x34
 8013b52:	e140      	b.n	8013dd6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d117      	bne.n	8013b94 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013b64:	69bb      	ldr	r3, [r7, #24]
 8013b66:	015a      	lsls	r2, r3, #5
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	69ba      	ldr	r2, [r7, #24]
 8013b74:	0151      	lsls	r1, r2, #5
 8013b76:	69fa      	ldr	r2, [r7, #28]
 8013b78:	440a      	add	r2, r1
 8013b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013b82:	6013      	str	r3, [r2, #0]
 8013b84:	e016      	b.n	8013bb4 <USB_EPStartXfer+0x308>
 8013b86:	bf00      	nop
 8013b88:	e007ffff 	.word	0xe007ffff
 8013b8c:	fff80000 	.word	0xfff80000
 8013b90:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013b94:	69bb      	ldr	r3, [r7, #24]
 8013b96:	015a      	lsls	r2, r3, #5
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	69ba      	ldr	r2, [r7, #24]
 8013ba4:	0151      	lsls	r1, r2, #5
 8013ba6:	69fa      	ldr	r2, [r7, #28]
 8013ba8:	440a      	add	r2, r1
 8013baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bb2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	68d9      	ldr	r1, [r3, #12]
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	781a      	ldrb	r2, [r3, #0]
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	691b      	ldr	r3, [r3, #16]
 8013bc0:	b298      	uxth	r0, r3
 8013bc2:	79fb      	ldrb	r3, [r7, #7]
 8013bc4:	9300      	str	r3, [sp, #0]
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f000 f9b9 	bl	8013f40 <USB_WritePacket>
 8013bce:	e102      	b.n	8013dd6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013bd0:	69bb      	ldr	r3, [r7, #24]
 8013bd2:	015a      	lsls	r2, r3, #5
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	4413      	add	r3, r2
 8013bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bdc:	691a      	ldr	r2, [r3, #16]
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	0159      	lsls	r1, r3, #5
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	440b      	add	r3, r1
 8013be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bea:	4619      	mov	r1, r3
 8013bec:	4b7c      	ldr	r3, [pc, #496]	; (8013de0 <USB_EPStartXfer+0x534>)
 8013bee:	4013      	ands	r3, r2
 8013bf0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013bf2:	69bb      	ldr	r3, [r7, #24]
 8013bf4:	015a      	lsls	r2, r3, #5
 8013bf6:	69fb      	ldr	r3, [r7, #28]
 8013bf8:	4413      	add	r3, r2
 8013bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bfe:	691a      	ldr	r2, [r3, #16]
 8013c00:	69bb      	ldr	r3, [r7, #24]
 8013c02:	0159      	lsls	r1, r3, #5
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	440b      	add	r3, r1
 8013c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	4b75      	ldr	r3, [pc, #468]	; (8013de4 <USB_EPStartXfer+0x538>)
 8013c10:	4013      	ands	r3, r2
 8013c12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013c14:	69bb      	ldr	r3, [r7, #24]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d12f      	bne.n	8013c7a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	691b      	ldr	r3, [r3, #16]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d003      	beq.n	8013c2a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	689a      	ldr	r2, [r3, #8]
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	689a      	ldr	r2, [r3, #8]
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013c32:	69bb      	ldr	r3, [r7, #24]
 8013c34:	015a      	lsls	r2, r3, #5
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	4413      	add	r3, r2
 8013c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c3e:	691a      	ldr	r2, [r3, #16]
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	6a1b      	ldr	r3, [r3, #32]
 8013c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c48:	69b9      	ldr	r1, [r7, #24]
 8013c4a:	0148      	lsls	r0, r1, #5
 8013c4c:	69f9      	ldr	r1, [r7, #28]
 8013c4e:	4401      	add	r1, r0
 8013c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013c54:	4313      	orrs	r3, r2
 8013c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013c58:	69bb      	ldr	r3, [r7, #24]
 8013c5a:	015a      	lsls	r2, r3, #5
 8013c5c:	69fb      	ldr	r3, [r7, #28]
 8013c5e:	4413      	add	r3, r2
 8013c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c64:	691b      	ldr	r3, [r3, #16]
 8013c66:	69ba      	ldr	r2, [r7, #24]
 8013c68:	0151      	lsls	r1, r2, #5
 8013c6a:	69fa      	ldr	r2, [r7, #28]
 8013c6c:	440a      	add	r2, r1
 8013c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013c76:	6113      	str	r3, [r2, #16]
 8013c78:	e05f      	b.n	8013d3a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	691b      	ldr	r3, [r3, #16]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d123      	bne.n	8013cca <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013c82:	69bb      	ldr	r3, [r7, #24]
 8013c84:	015a      	lsls	r2, r3, #5
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	4413      	add	r3, r2
 8013c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c8e:	691a      	ldr	r2, [r3, #16]
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	689b      	ldr	r3, [r3, #8]
 8013c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013c98:	69b9      	ldr	r1, [r7, #24]
 8013c9a:	0148      	lsls	r0, r1, #5
 8013c9c:	69f9      	ldr	r1, [r7, #28]
 8013c9e:	4401      	add	r1, r0
 8013ca0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ca4:	4313      	orrs	r3, r2
 8013ca6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ca8:	69bb      	ldr	r3, [r7, #24]
 8013caa:	015a      	lsls	r2, r3, #5
 8013cac:	69fb      	ldr	r3, [r7, #28]
 8013cae:	4413      	add	r3, r2
 8013cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cb4:	691b      	ldr	r3, [r3, #16]
 8013cb6:	69ba      	ldr	r2, [r7, #24]
 8013cb8:	0151      	lsls	r1, r2, #5
 8013cba:	69fa      	ldr	r2, [r7, #28]
 8013cbc:	440a      	add	r2, r1
 8013cbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013cc6:	6113      	str	r3, [r2, #16]
 8013cc8:	e037      	b.n	8013d3a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	691a      	ldr	r2, [r3, #16]
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	689b      	ldr	r3, [r3, #8]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	1e5a      	subs	r2, r3, #1
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8013cde:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	689b      	ldr	r3, [r3, #8]
 8013ce4:	8afa      	ldrh	r2, [r7, #22]
 8013ce6:	fb03 f202 	mul.w	r2, r3, r2
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	015a      	lsls	r2, r3, #5
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cfa:	691a      	ldr	r2, [r3, #16]
 8013cfc:	8afb      	ldrh	r3, [r7, #22]
 8013cfe:	04d9      	lsls	r1, r3, #19
 8013d00:	4b39      	ldr	r3, [pc, #228]	; (8013de8 <USB_EPStartXfer+0x53c>)
 8013d02:	400b      	ands	r3, r1
 8013d04:	69b9      	ldr	r1, [r7, #24]
 8013d06:	0148      	lsls	r0, r1, #5
 8013d08:	69f9      	ldr	r1, [r7, #28]
 8013d0a:	4401      	add	r1, r0
 8013d0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013d10:	4313      	orrs	r3, r2
 8013d12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	015a      	lsls	r2, r3, #5
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	4413      	add	r3, r2
 8013d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d20:	691a      	ldr	r2, [r3, #16]
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	6a1b      	ldr	r3, [r3, #32]
 8013d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013d2a:	69b9      	ldr	r1, [r7, #24]
 8013d2c:	0148      	lsls	r0, r1, #5
 8013d2e:	69f9      	ldr	r1, [r7, #28]
 8013d30:	4401      	add	r1, r0
 8013d32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013d36:	4313      	orrs	r3, r2
 8013d38:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013d3a:	79fb      	ldrb	r3, [r7, #7]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d10d      	bne.n	8013d5c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013d40:	68bb      	ldr	r3, [r7, #8]
 8013d42:	68db      	ldr	r3, [r3, #12]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d009      	beq.n	8013d5c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013d48:	68bb      	ldr	r3, [r7, #8]
 8013d4a:	68d9      	ldr	r1, [r3, #12]
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	015a      	lsls	r2, r3, #5
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	4413      	add	r3, r2
 8013d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d58:	460a      	mov	r2, r1
 8013d5a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	791b      	ldrb	r3, [r3, #4]
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d128      	bne.n	8013db6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d110      	bne.n	8013d96 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013d74:	69bb      	ldr	r3, [r7, #24]
 8013d76:	015a      	lsls	r2, r3, #5
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	4413      	add	r3, r2
 8013d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	69ba      	ldr	r2, [r7, #24]
 8013d84:	0151      	lsls	r1, r2, #5
 8013d86:	69fa      	ldr	r2, [r7, #28]
 8013d88:	440a      	add	r2, r1
 8013d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d92:	6013      	str	r3, [r2, #0]
 8013d94:	e00f      	b.n	8013db6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	015a      	lsls	r2, r3, #5
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	69ba      	ldr	r2, [r7, #24]
 8013da6:	0151      	lsls	r1, r2, #5
 8013da8:	69fa      	ldr	r2, [r7, #28]
 8013daa:	440a      	add	r2, r1
 8013dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013db4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013db6:	69bb      	ldr	r3, [r7, #24]
 8013db8:	015a      	lsls	r2, r3, #5
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	69ba      	ldr	r2, [r7, #24]
 8013dc6:	0151      	lsls	r1, r2, #5
 8013dc8:	69fa      	ldr	r2, [r7, #28]
 8013dca:	440a      	add	r2, r1
 8013dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013dd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013dd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013dd6:	2300      	movs	r3, #0
}
 8013dd8:	4618      	mov	r0, r3
 8013dda:	3720      	adds	r7, #32
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	fff80000 	.word	0xfff80000
 8013de4:	e007ffff 	.word	0xe007ffff
 8013de8:	1ff80000 	.word	0x1ff80000

08013dec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013dec:	b480      	push	{r7}
 8013dee:	b087      	sub	sp, #28
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013df6:	2300      	movs	r3, #0
 8013df8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	785b      	ldrb	r3, [r3, #1]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d14a      	bne.n	8013ea0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	781b      	ldrb	r3, [r3, #0]
 8013e0e:	015a      	lsls	r2, r3, #5
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	4413      	add	r3, r2
 8013e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e22:	f040 8086 	bne.w	8013f32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	015a      	lsls	r2, r3, #5
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	4413      	add	r3, r2
 8013e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	683a      	ldr	r2, [r7, #0]
 8013e38:	7812      	ldrb	r2, [r2, #0]
 8013e3a:	0151      	lsls	r1, r2, #5
 8013e3c:	693a      	ldr	r2, [r7, #16]
 8013e3e:	440a      	add	r2, r1
 8013e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013e48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013e4a:	683b      	ldr	r3, [r7, #0]
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	015a      	lsls	r2, r3, #5
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	4413      	add	r3, r2
 8013e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	683a      	ldr	r2, [r7, #0]
 8013e5c:	7812      	ldrb	r2, [r2, #0]
 8013e5e:	0151      	lsls	r1, r2, #5
 8013e60:	693a      	ldr	r2, [r7, #16]
 8013e62:	440a      	add	r2, r1
 8013e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013e6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	3301      	adds	r3, #1
 8013e72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	f242 7210 	movw	r2, #10000	; 0x2710
 8013e7a:	4293      	cmp	r3, r2
 8013e7c:	d902      	bls.n	8013e84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013e7e:	2301      	movs	r3, #1
 8013e80:	75fb      	strb	r3, [r7, #23]
          break;
 8013e82:	e056      	b.n	8013f32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	015a      	lsls	r2, r3, #5
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	4413      	add	r3, r2
 8013e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013e98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013e9c:	d0e7      	beq.n	8013e6e <USB_EPStopXfer+0x82>
 8013e9e:	e048      	b.n	8013f32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	015a      	lsls	r2, r3, #5
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013eb8:	d13b      	bne.n	8013f32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	781b      	ldrb	r3, [r3, #0]
 8013ebe:	015a      	lsls	r2, r3, #5
 8013ec0:	693b      	ldr	r3, [r7, #16]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	683a      	ldr	r2, [r7, #0]
 8013ecc:	7812      	ldrb	r2, [r2, #0]
 8013ece:	0151      	lsls	r1, r2, #5
 8013ed0:	693a      	ldr	r2, [r7, #16]
 8013ed2:	440a      	add	r2, r1
 8013ed4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013ed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013edc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	781b      	ldrb	r3, [r3, #0]
 8013ee2:	015a      	lsls	r2, r3, #5
 8013ee4:	693b      	ldr	r3, [r7, #16]
 8013ee6:	4413      	add	r3, r2
 8013ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	683a      	ldr	r2, [r7, #0]
 8013ef0:	7812      	ldrb	r2, [r2, #0]
 8013ef2:	0151      	lsls	r1, r2, #5
 8013ef4:	693a      	ldr	r2, [r7, #16]
 8013ef6:	440a      	add	r2, r1
 8013ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	3301      	adds	r3, #1
 8013f06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d902      	bls.n	8013f18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013f12:	2301      	movs	r3, #1
 8013f14:	75fb      	strb	r3, [r7, #23]
          break;
 8013f16:	e00c      	b.n	8013f32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	015a      	lsls	r2, r3, #5
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	4413      	add	r3, r2
 8013f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f30:	d0e7      	beq.n	8013f02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f34:	4618      	mov	r0, r3
 8013f36:	371c      	adds	r7, #28
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3e:	4770      	bx	lr

08013f40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b089      	sub	sp, #36	; 0x24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	60f8      	str	r0, [r7, #12]
 8013f48:	60b9      	str	r1, [r7, #8]
 8013f4a:	4611      	mov	r1, r2
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	460b      	mov	r3, r1
 8013f50:	71fb      	strb	r3, [r7, #7]
 8013f52:	4613      	mov	r3, r2
 8013f54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013f5a:	68bb      	ldr	r3, [r7, #8]
 8013f5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013f5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d123      	bne.n	8013fae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013f66:	88bb      	ldrh	r3, [r7, #4]
 8013f68:	3303      	adds	r3, #3
 8013f6a:	089b      	lsrs	r3, r3, #2
 8013f6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013f6e:	2300      	movs	r3, #0
 8013f70:	61bb      	str	r3, [r7, #24]
 8013f72:	e018      	b.n	8013fa6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013f74:	79fb      	ldrb	r3, [r7, #7]
 8013f76:	031a      	lsls	r2, r3, #12
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013f80:	461a      	mov	r2, r3
 8013f82:	69fb      	ldr	r3, [r7, #28]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013f88:	69fb      	ldr	r3, [r7, #28]
 8013f8a:	3301      	adds	r3, #1
 8013f8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013f8e:	69fb      	ldr	r3, [r7, #28]
 8013f90:	3301      	adds	r3, #1
 8013f92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013f94:	69fb      	ldr	r3, [r7, #28]
 8013f96:	3301      	adds	r3, #1
 8013f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013f9a:	69fb      	ldr	r3, [r7, #28]
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013fa0:	69bb      	ldr	r3, [r7, #24]
 8013fa2:	3301      	adds	r3, #1
 8013fa4:	61bb      	str	r3, [r7, #24]
 8013fa6:	69ba      	ldr	r2, [r7, #24]
 8013fa8:	693b      	ldr	r3, [r7, #16]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d3e2      	bcc.n	8013f74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013fae:	2300      	movs	r3, #0
}
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	3724      	adds	r7, #36	; 0x24
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fba:	4770      	bx	lr

08013fbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013fbc:	b480      	push	{r7}
 8013fbe:	b08b      	sub	sp, #44	; 0x2c
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	60f8      	str	r0, [r7, #12]
 8013fc4:	60b9      	str	r1, [r7, #8]
 8013fc6:	4613      	mov	r3, r2
 8013fc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013fd2:	88fb      	ldrh	r3, [r7, #6]
 8013fd4:	089b      	lsrs	r3, r3, #2
 8013fd6:	b29b      	uxth	r3, r3
 8013fd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013fda:	88fb      	ldrh	r3, [r7, #6]
 8013fdc:	f003 0303 	and.w	r3, r3, #3
 8013fe0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	623b      	str	r3, [r7, #32]
 8013fe6:	e014      	b.n	8014012 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013fe8:	69bb      	ldr	r3, [r7, #24]
 8013fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013fee:	681a      	ldr	r2, [r3, #0]
 8013ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff2:	601a      	str	r2, [r3, #0]
    pDest++;
 8013ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffc:	3301      	adds	r3, #1
 8013ffe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	3301      	adds	r3, #1
 8014004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014008:	3301      	adds	r3, #1
 801400a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801400c:	6a3b      	ldr	r3, [r7, #32]
 801400e:	3301      	adds	r3, #1
 8014010:	623b      	str	r3, [r7, #32]
 8014012:	6a3a      	ldr	r2, [r7, #32]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	429a      	cmp	r2, r3
 8014018:	d3e6      	bcc.n	8013fe8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801401a:	8bfb      	ldrh	r3, [r7, #30]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d01e      	beq.n	801405e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014020:	2300      	movs	r3, #0
 8014022:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801402a:	461a      	mov	r2, r3
 801402c:	f107 0310 	add.w	r3, r7, #16
 8014030:	6812      	ldr	r2, [r2, #0]
 8014032:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014034:	693a      	ldr	r2, [r7, #16]
 8014036:	6a3b      	ldr	r3, [r7, #32]
 8014038:	b2db      	uxtb	r3, r3
 801403a:	00db      	lsls	r3, r3, #3
 801403c:	fa22 f303 	lsr.w	r3, r2, r3
 8014040:	b2da      	uxtb	r2, r3
 8014042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014044:	701a      	strb	r2, [r3, #0]
      i++;
 8014046:	6a3b      	ldr	r3, [r7, #32]
 8014048:	3301      	adds	r3, #1
 801404a:	623b      	str	r3, [r7, #32]
      pDest++;
 801404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801404e:	3301      	adds	r3, #1
 8014050:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014052:	8bfb      	ldrh	r3, [r7, #30]
 8014054:	3b01      	subs	r3, #1
 8014056:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014058:	8bfb      	ldrh	r3, [r7, #30]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d1ea      	bne.n	8014034 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014060:	4618      	mov	r0, r3
 8014062:	372c      	adds	r7, #44	; 0x2c
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr

0801406c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801406c:	b480      	push	{r7}
 801406e:	b085      	sub	sp, #20
 8014070:	af00      	add	r7, sp, #0
 8014072:	6078      	str	r0, [r7, #4]
 8014074:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	785b      	ldrb	r3, [r3, #1]
 8014084:	2b01      	cmp	r3, #1
 8014086:	d12c      	bne.n	80140e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	015a      	lsls	r2, r3, #5
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	4413      	add	r3, r2
 8014090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	db12      	blt.n	80140c0 <USB_EPSetStall+0x54>
 801409a:	68bb      	ldr	r3, [r7, #8]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00f      	beq.n	80140c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80140a0:	68bb      	ldr	r3, [r7, #8]
 80140a2:	015a      	lsls	r2, r3, #5
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	4413      	add	r3, r2
 80140a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	68ba      	ldr	r2, [r7, #8]
 80140b0:	0151      	lsls	r1, r2, #5
 80140b2:	68fa      	ldr	r2, [r7, #12]
 80140b4:	440a      	add	r2, r1
 80140b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80140be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80140c0:	68bb      	ldr	r3, [r7, #8]
 80140c2:	015a      	lsls	r2, r3, #5
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	4413      	add	r3, r2
 80140c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	68ba      	ldr	r2, [r7, #8]
 80140d0:	0151      	lsls	r1, r2, #5
 80140d2:	68fa      	ldr	r2, [r7, #12]
 80140d4:	440a      	add	r2, r1
 80140d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80140de:	6013      	str	r3, [r2, #0]
 80140e0:	e02b      	b.n	801413a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	015a      	lsls	r2, r3, #5
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	4413      	add	r3, r2
 80140ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	db12      	blt.n	801411a <USB_EPSetStall+0xae>
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00f      	beq.n	801411a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	015a      	lsls	r2, r3, #5
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	4413      	add	r3, r2
 8014102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	68ba      	ldr	r2, [r7, #8]
 801410a:	0151      	lsls	r1, r2, #5
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	440a      	add	r2, r1
 8014110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014114:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014118:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	015a      	lsls	r2, r3, #5
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	4413      	add	r3, r2
 8014122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	68ba      	ldr	r2, [r7, #8]
 801412a:	0151      	lsls	r1, r2, #5
 801412c:	68fa      	ldr	r2, [r7, #12]
 801412e:	440a      	add	r2, r1
 8014130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014138:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801413a:	2300      	movs	r3, #0
}
 801413c:	4618      	mov	r0, r3
 801413e:	3714      	adds	r7, #20
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr

08014148 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014148:	b480      	push	{r7}
 801414a:	b085      	sub	sp, #20
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
 8014150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	781b      	ldrb	r3, [r3, #0]
 801415a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	785b      	ldrb	r3, [r3, #1]
 8014160:	2b01      	cmp	r3, #1
 8014162:	d128      	bne.n	80141b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014164:	68bb      	ldr	r3, [r7, #8]
 8014166:	015a      	lsls	r2, r3, #5
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	4413      	add	r3, r2
 801416c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	68ba      	ldr	r2, [r7, #8]
 8014174:	0151      	lsls	r1, r2, #5
 8014176:	68fa      	ldr	r2, [r7, #12]
 8014178:	440a      	add	r2, r1
 801417a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801417e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014182:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	791b      	ldrb	r3, [r3, #4]
 8014188:	2b03      	cmp	r3, #3
 801418a:	d003      	beq.n	8014194 <USB_EPClearStall+0x4c>
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	791b      	ldrb	r3, [r3, #4]
 8014190:	2b02      	cmp	r3, #2
 8014192:	d138      	bne.n	8014206 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	015a      	lsls	r2, r3, #5
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	4413      	add	r3, r2
 801419c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	68ba      	ldr	r2, [r7, #8]
 80141a4:	0151      	lsls	r1, r2, #5
 80141a6:	68fa      	ldr	r2, [r7, #12]
 80141a8:	440a      	add	r2, r1
 80141aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80141ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80141b2:	6013      	str	r3, [r2, #0]
 80141b4:	e027      	b.n	8014206 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	015a      	lsls	r2, r3, #5
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	4413      	add	r3, r2
 80141be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	68ba      	ldr	r2, [r7, #8]
 80141c6:	0151      	lsls	r1, r2, #5
 80141c8:	68fa      	ldr	r2, [r7, #12]
 80141ca:	440a      	add	r2, r1
 80141cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	791b      	ldrb	r3, [r3, #4]
 80141da:	2b03      	cmp	r3, #3
 80141dc:	d003      	beq.n	80141e6 <USB_EPClearStall+0x9e>
 80141de:	683b      	ldr	r3, [r7, #0]
 80141e0:	791b      	ldrb	r3, [r3, #4]
 80141e2:	2b02      	cmp	r3, #2
 80141e4:	d10f      	bne.n	8014206 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80141e6:	68bb      	ldr	r3, [r7, #8]
 80141e8:	015a      	lsls	r2, r3, #5
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	4413      	add	r3, r2
 80141ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	68ba      	ldr	r2, [r7, #8]
 80141f6:	0151      	lsls	r1, r2, #5
 80141f8:	68fa      	ldr	r2, [r7, #12]
 80141fa:	440a      	add	r2, r1
 80141fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014204:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014206:	2300      	movs	r3, #0
}
 8014208:	4618      	mov	r0, r3
 801420a:	3714      	adds	r7, #20
 801420c:	46bd      	mov	sp, r7
 801420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014212:	4770      	bx	lr

08014214 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014214:	b480      	push	{r7}
 8014216:	b085      	sub	sp, #20
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
 801421c:	460b      	mov	r3, r1
 801421e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	68fa      	ldr	r2, [r7, #12]
 801422e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014232:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014236:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	78fb      	ldrb	r3, [r7, #3]
 8014242:	011b      	lsls	r3, r3, #4
 8014244:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014248:	68f9      	ldr	r1, [r7, #12]
 801424a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801424e:	4313      	orrs	r3, r2
 8014250:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014252:	2300      	movs	r3, #0
}
 8014254:	4618      	mov	r0, r3
 8014256:	3714      	adds	r7, #20
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014260:	b480      	push	{r7}
 8014262:	b085      	sub	sp, #20
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	68fa      	ldr	r2, [r7, #12]
 8014276:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801427a:	f023 0303 	bic.w	r3, r3, #3
 801427e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014286:	685b      	ldr	r3, [r3, #4]
 8014288:	68fa      	ldr	r2, [r7, #12]
 801428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801428e:	f023 0302 	bic.w	r3, r3, #2
 8014292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014294:	2300      	movs	r3, #0
}
 8014296:	4618      	mov	r0, r3
 8014298:	3714      	adds	r7, #20
 801429a:	46bd      	mov	sp, r7
 801429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a0:	4770      	bx	lr

080142a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80142a2:	b480      	push	{r7}
 80142a4:	b085      	sub	sp, #20
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	68fa      	ldr	r2, [r7, #12]
 80142b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80142bc:	f023 0303 	bic.w	r3, r3, #3
 80142c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142c8:	685b      	ldr	r3, [r3, #4]
 80142ca:	68fa      	ldr	r2, [r7, #12]
 80142cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80142d0:	f043 0302 	orr.w	r3, r3, #2
 80142d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80142d6:	2300      	movs	r3, #0
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3714      	adds	r7, #20
 80142dc:	46bd      	mov	sp, r7
 80142de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e2:	4770      	bx	lr

080142e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80142e4:	b480      	push	{r7}
 80142e6:	b085      	sub	sp, #20
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	695b      	ldr	r3, [r3, #20]
 80142f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	699b      	ldr	r3, [r3, #24]
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	4013      	ands	r3, r2
 80142fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80142fc:	68fb      	ldr	r3, [r7, #12]
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3714      	adds	r7, #20
 8014302:	46bd      	mov	sp, r7
 8014304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014308:	4770      	bx	lr

0801430a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801430a:	b480      	push	{r7}
 801430c:	b085      	sub	sp, #20
 801430e:	af00      	add	r7, sp, #0
 8014310:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801431c:	699b      	ldr	r3, [r3, #24]
 801431e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014326:	69db      	ldr	r3, [r3, #28]
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	4013      	ands	r3, r2
 801432c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	0c1b      	lsrs	r3, r3, #16
}
 8014332:	4618      	mov	r0, r3
 8014334:	3714      	adds	r7, #20
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr

0801433e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801433e:	b480      	push	{r7}
 8014340:	b085      	sub	sp, #20
 8014342:	af00      	add	r7, sp, #0
 8014344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014350:	699b      	ldr	r3, [r3, #24]
 8014352:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801435a:	69db      	ldr	r3, [r3, #28]
 801435c:	68ba      	ldr	r2, [r7, #8]
 801435e:	4013      	ands	r3, r2
 8014360:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	b29b      	uxth	r3, r3
}
 8014366:	4618      	mov	r0, r3
 8014368:	3714      	adds	r7, #20
 801436a:	46bd      	mov	sp, r7
 801436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014370:	4770      	bx	lr

08014372 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014372:	b480      	push	{r7}
 8014374:	b085      	sub	sp, #20
 8014376:	af00      	add	r7, sp, #0
 8014378:	6078      	str	r0, [r7, #4]
 801437a:	460b      	mov	r3, r1
 801437c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014382:	78fb      	ldrb	r3, [r7, #3]
 8014384:	015a      	lsls	r2, r3, #5
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	4413      	add	r3, r2
 801438a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801438e:	689b      	ldr	r3, [r3, #8]
 8014390:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014398:	695b      	ldr	r3, [r3, #20]
 801439a:	68ba      	ldr	r2, [r7, #8]
 801439c:	4013      	ands	r3, r2
 801439e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80143a0:	68bb      	ldr	r3, [r7, #8]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80143ae:	b480      	push	{r7}
 80143b0:	b087      	sub	sp, #28
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
 80143b6:	460b      	mov	r3, r1
 80143b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143c4:	691b      	ldr	r3, [r3, #16]
 80143c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80143d2:	78fb      	ldrb	r3, [r7, #3]
 80143d4:	f003 030f 	and.w	r3, r3, #15
 80143d8:	68fa      	ldr	r2, [r7, #12]
 80143da:	fa22 f303 	lsr.w	r3, r2, r3
 80143de:	01db      	lsls	r3, r3, #7
 80143e0:	b2db      	uxtb	r3, r3
 80143e2:	693a      	ldr	r2, [r7, #16]
 80143e4:	4313      	orrs	r3, r2
 80143e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80143e8:	78fb      	ldrb	r3, [r7, #3]
 80143ea:	015a      	lsls	r2, r3, #5
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	4413      	add	r3, r2
 80143f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143f4:	689b      	ldr	r3, [r3, #8]
 80143f6:	693a      	ldr	r2, [r7, #16]
 80143f8:	4013      	ands	r3, r2
 80143fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80143fc:	68bb      	ldr	r3, [r7, #8]
}
 80143fe:	4618      	mov	r0, r3
 8014400:	371c      	adds	r7, #28
 8014402:	46bd      	mov	sp, r7
 8014404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014408:	4770      	bx	lr

0801440a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801440a:	b480      	push	{r7}
 801440c:	b083      	sub	sp, #12
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	695b      	ldr	r3, [r3, #20]
 8014416:	f003 0301 	and.w	r3, r3, #1
}
 801441a:	4618      	mov	r0, r3
 801441c:	370c      	adds	r7, #12
 801441e:	46bd      	mov	sp, r7
 8014420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014424:	4770      	bx	lr
	...

08014428 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014428:	b480      	push	{r7}
 801442a:	b085      	sub	sp, #20
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801443a:	681a      	ldr	r2, [r3, #0]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014442:	4619      	mov	r1, r3
 8014444:	4b09      	ldr	r3, [pc, #36]	; (801446c <USB_ActivateSetup+0x44>)
 8014446:	4013      	ands	r3, r2
 8014448:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014450:	685b      	ldr	r3, [r3, #4]
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801445c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801445e:	2300      	movs	r3, #0
}
 8014460:	4618      	mov	r0, r3
 8014462:	3714      	adds	r7, #20
 8014464:	46bd      	mov	sp, r7
 8014466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446a:	4770      	bx	lr
 801446c:	fffff800 	.word	0xfffff800

08014470 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014470:	b480      	push	{r7}
 8014472:	b087      	sub	sp, #28
 8014474:	af00      	add	r7, sp, #0
 8014476:	60f8      	str	r0, [r7, #12]
 8014478:	460b      	mov	r3, r1
 801447a:	607a      	str	r2, [r7, #4]
 801447c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	333c      	adds	r3, #60	; 0x3c
 8014486:	3304      	adds	r3, #4
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801448c:	693b      	ldr	r3, [r7, #16]
 801448e:	4a26      	ldr	r2, [pc, #152]	; (8014528 <USB_EP0_OutStart+0xb8>)
 8014490:	4293      	cmp	r3, r2
 8014492:	d90a      	bls.n	80144aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014494:	697b      	ldr	r3, [r7, #20]
 8014496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80144a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80144a4:	d101      	bne.n	80144aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80144a6:	2300      	movs	r3, #0
 80144a8:	e037      	b.n	801451a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144b0:	461a      	mov	r2, r3
 80144b2:	2300      	movs	r3, #0
 80144b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144bc:	691b      	ldr	r3, [r3, #16]
 80144be:	697a      	ldr	r2, [r7, #20]
 80144c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80144c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144d0:	691b      	ldr	r3, [r3, #16]
 80144d2:	697a      	ldr	r2, [r7, #20]
 80144d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144d8:	f043 0318 	orr.w	r3, r3, #24
 80144dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144e4:	691b      	ldr	r3, [r3, #16]
 80144e6:	697a      	ldr	r2, [r7, #20]
 80144e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80144f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80144f2:	7afb      	ldrb	r3, [r7, #11]
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d10f      	bne.n	8014518 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144fe:	461a      	mov	r2, r3
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	697a      	ldr	r2, [r7, #20]
 801450e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014512:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014518:	2300      	movs	r3, #0
}
 801451a:	4618      	mov	r0, r3
 801451c:	371c      	adds	r7, #28
 801451e:	46bd      	mov	sp, r7
 8014520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014524:	4770      	bx	lr
 8014526:	bf00      	nop
 8014528:	4f54300a 	.word	0x4f54300a

0801452c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014534:	2300      	movs	r3, #0
 8014536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	3301      	adds	r3, #1
 801453c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	4a13      	ldr	r2, [pc, #76]	; (8014590 <USB_CoreReset+0x64>)
 8014542:	4293      	cmp	r3, r2
 8014544:	d901      	bls.n	801454a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014546:	2303      	movs	r3, #3
 8014548:	e01b      	b.n	8014582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	691b      	ldr	r3, [r3, #16]
 801454e:	2b00      	cmp	r3, #0
 8014550:	daf2      	bge.n	8014538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014552:	2300      	movs	r3, #0
 8014554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	691b      	ldr	r3, [r3, #16]
 801455a:	f043 0201 	orr.w	r2, r3, #1
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	3301      	adds	r3, #1
 8014566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	4a09      	ldr	r2, [pc, #36]	; (8014590 <USB_CoreReset+0x64>)
 801456c:	4293      	cmp	r3, r2
 801456e:	d901      	bls.n	8014574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014570:	2303      	movs	r3, #3
 8014572:	e006      	b.n	8014582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	691b      	ldr	r3, [r3, #16]
 8014578:	f003 0301 	and.w	r3, r3, #1
 801457c:	2b01      	cmp	r3, #1
 801457e:	d0f0      	beq.n	8014562 <USB_CoreReset+0x36>

  return HAL_OK;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3714      	adds	r7, #20
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr
 801458e:	bf00      	nop
 8014590:	00030d40 	.word	0x00030d40

08014594 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014594:	b580      	push	{r7, lr}
 8014596:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014598:	4904      	ldr	r1, [pc, #16]	; (80145ac <MX_FATFS_Init+0x18>)
 801459a:	4805      	ldr	r0, [pc, #20]	; (80145b0 <MX_FATFS_Init+0x1c>)
 801459c:	f002 fa56 	bl	8016a4c <FATFS_LinkDriver>
 80145a0:	4603      	mov	r3, r0
 80145a2:	461a      	mov	r2, r3
 80145a4:	4b03      	ldr	r3, [pc, #12]	; (80145b4 <MX_FATFS_Init+0x20>)
 80145a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80145a8:	bf00      	nop
 80145aa:	bd80      	pop	{r7, pc}
 80145ac:	24001750 	.word	0x24001750
 80145b0:	0801c528 	.word	0x0801c528
 80145b4:	2400174c 	.word	0x2400174c

080145b8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80145be:	2300      	movs	r3, #0
 80145c0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80145c2:	f000 f885 	bl	80146d0 <BSP_SD_IsDetected>
 80145c6:	4603      	mov	r3, r0
 80145c8:	2b01      	cmp	r3, #1
 80145ca:	d001      	beq.n	80145d0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80145cc:	2302      	movs	r3, #2
 80145ce:	e012      	b.n	80145f6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80145d0:	480b      	ldr	r0, [pc, #44]	; (8014600 <BSP_SD_Init+0x48>)
 80145d2:	f7f8 ff41 	bl	800d458 <HAL_SD_Init>
 80145d6:	4603      	mov	r3, r0
 80145d8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80145da:	79fb      	ldrb	r3, [r7, #7]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d109      	bne.n	80145f4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80145e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80145e4:	4806      	ldr	r0, [pc, #24]	; (8014600 <BSP_SD_Init+0x48>)
 80145e6:	f7f9 fdf7 	bl	800e1d8 <HAL_SD_ConfigWideBusOperation>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d001      	beq.n	80145f4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80145f0:	2301      	movs	r3, #1
 80145f2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80145f4:	79fb      	ldrb	r3, [r7, #7]
}
 80145f6:	4618      	mov	r0, r3
 80145f8:	3708      	adds	r7, #8
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	24001034 	.word	0x24001034

08014604 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8014604:	b580      	push	{r7, lr}
 8014606:	b086      	sub	sp, #24
 8014608:	af00      	add	r7, sp, #0
 801460a:	60f8      	str	r0, [r7, #12]
 801460c:	60b9      	str	r1, [r7, #8]
 801460e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014610:	2300      	movs	r3, #0
 8014612:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	68ba      	ldr	r2, [r7, #8]
 8014618:	68f9      	ldr	r1, [r7, #12]
 801461a:	4806      	ldr	r0, [pc, #24]	; (8014634 <BSP_SD_ReadBlocks_DMA+0x30>)
 801461c:	f7f9 f83c 	bl	800d698 <HAL_SD_ReadBlocks_DMA>
 8014620:	4603      	mov	r3, r0
 8014622:	2b00      	cmp	r3, #0
 8014624:	d001      	beq.n	801462a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014626:	2301      	movs	r3, #1
 8014628:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801462a:	7dfb      	ldrb	r3, [r7, #23]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3718      	adds	r7, #24
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	24001034 	.word	0x24001034

08014638 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014638:	b580      	push	{r7, lr}
 801463a:	b086      	sub	sp, #24
 801463c:	af00      	add	r7, sp, #0
 801463e:	60f8      	str	r0, [r7, #12]
 8014640:	60b9      	str	r1, [r7, #8]
 8014642:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014644:	2300      	movs	r3, #0
 8014646:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	68ba      	ldr	r2, [r7, #8]
 801464c:	68f9      	ldr	r1, [r7, #12]
 801464e:	4806      	ldr	r0, [pc, #24]	; (8014668 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014650:	f7f9 f8ca 	bl	800d7e8 <HAL_SD_WriteBlocks_DMA>
 8014654:	4603      	mov	r3, r0
 8014656:	2b00      	cmp	r3, #0
 8014658:	d001      	beq.n	801465e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801465a:	2301      	movs	r3, #1
 801465c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801465e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014660:	4618      	mov	r0, r3
 8014662:	3718      	adds	r7, #24
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}
 8014668:	24001034 	.word	0x24001034

0801466c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014670:	4805      	ldr	r0, [pc, #20]	; (8014688 <BSP_SD_GetCardState+0x1c>)
 8014672:	f7f9 fec3 	bl	800e3fc <HAL_SD_GetCardState>
 8014676:	4603      	mov	r3, r0
 8014678:	2b04      	cmp	r3, #4
 801467a:	bf14      	ite	ne
 801467c:	2301      	movne	r3, #1
 801467e:	2300      	moveq	r3, #0
 8014680:	b2db      	uxtb	r3, r3
}
 8014682:	4618      	mov	r0, r3
 8014684:	bd80      	pop	{r7, pc}
 8014686:	bf00      	nop
 8014688:	24001034 	.word	0x24001034

0801468c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014694:	6879      	ldr	r1, [r7, #4]
 8014696:	4803      	ldr	r0, [pc, #12]	; (80146a4 <BSP_SD_GetCardInfo+0x18>)
 8014698:	f7f9 fd72 	bl	800e180 <HAL_SD_GetCardInfo>
}
 801469c:	bf00      	nop
 801469e:	3708      	adds	r7, #8
 80146a0:	46bd      	mov	sp, r7
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	24001034 	.word	0x24001034

080146a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80146b0:	f000 f9a0 	bl	80149f4 <BSP_SD_WriteCpltCallback>
}
 80146b4:	bf00      	nop
 80146b6:	3708      	adds	r7, #8
 80146b8:	46bd      	mov	sp, r7
 80146ba:	bd80      	pop	{r7, pc}

080146bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80146c4:	f000 f9a2 	bl	8014a0c <BSP_SD_ReadCpltCallback>
}
 80146c8:	bf00      	nop
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80146d0:	b580      	push	{r7, lr}
 80146d2:	b082      	sub	sp, #8
 80146d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80146d6:	2301      	movs	r3, #1
 80146d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80146da:	f000 f80b 	bl	80146f4 <BSP_PlatformIsDetected>
 80146de:	4603      	mov	r3, r0
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d101      	bne.n	80146e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80146e4:	2300      	movs	r3, #0
 80146e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80146e8:	79fb      	ldrb	r3, [r7, #7]
 80146ea:	b2db      	uxtb	r3, r3
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	3708      	adds	r7, #8
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}

080146f4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80146fa:	2301      	movs	r3, #1
 80146fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80146fe:	2104      	movs	r1, #4
 8014700:	4806      	ldr	r0, [pc, #24]	; (801471c <BSP_PlatformIsDetected+0x28>)
 8014702:	f7f3 fe7d 	bl	8008400 <HAL_GPIO_ReadPin>
 8014706:	4603      	mov	r3, r0
 8014708:	2b00      	cmp	r3, #0
 801470a:	d001      	beq.n	8014710 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801470c:	2300      	movs	r3, #0
 801470e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014710:	79fb      	ldrb	r3, [r7, #7]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3708      	adds	r7, #8
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}
 801471a:	bf00      	nop
 801471c:	58020400 	.word	0x58020400

08014720 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014728:	f7ef fbc4 	bl	8003eb4 <HAL_GetTick>
 801472c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801472e:	e006      	b.n	801473e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014730:	f7ff ff9c 	bl	801466c <BSP_SD_GetCardState>
 8014734:	4603      	mov	r3, r0
 8014736:	2b00      	cmp	r3, #0
 8014738:	d101      	bne.n	801473e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801473a:	2300      	movs	r3, #0
 801473c:	e009      	b.n	8014752 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801473e:	f7ef fbb9 	bl	8003eb4 <HAL_GetTick>
 8014742:	4602      	mov	r2, r0
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	1ad3      	subs	r3, r2, r3
 8014748:	687a      	ldr	r2, [r7, #4]
 801474a:	429a      	cmp	r2, r3
 801474c:	d8f0      	bhi.n	8014730 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801474e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014752:	4618      	mov	r0, r3
 8014754:	3710      	adds	r7, #16
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
	...

0801475c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801475c:	b580      	push	{r7, lr}
 801475e:	b082      	sub	sp, #8
 8014760:	af00      	add	r7, sp, #0
 8014762:	4603      	mov	r3, r0
 8014764:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014766:	4b0b      	ldr	r3, [pc, #44]	; (8014794 <SD_CheckStatus+0x38>)
 8014768:	2201      	movs	r2, #1
 801476a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801476c:	f7ff ff7e 	bl	801466c <BSP_SD_GetCardState>
 8014770:	4603      	mov	r3, r0
 8014772:	2b00      	cmp	r3, #0
 8014774:	d107      	bne.n	8014786 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014776:	4b07      	ldr	r3, [pc, #28]	; (8014794 <SD_CheckStatus+0x38>)
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	b2db      	uxtb	r3, r3
 801477c:	f023 0301 	bic.w	r3, r3, #1
 8014780:	b2da      	uxtb	r2, r3
 8014782:	4b04      	ldr	r3, [pc, #16]	; (8014794 <SD_CheckStatus+0x38>)
 8014784:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014786:	4b03      	ldr	r3, [pc, #12]	; (8014794 <SD_CheckStatus+0x38>)
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	b2db      	uxtb	r3, r3
}
 801478c:	4618      	mov	r0, r3
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	2400000d 	.word	0x2400000d

08014798 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	4603      	mov	r3, r0
 80147a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80147a2:	f7ff ff09 	bl	80145b8 <BSP_SD_Init>
 80147a6:	4603      	mov	r3, r0
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d107      	bne.n	80147bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80147ac:	79fb      	ldrb	r3, [r7, #7]
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7ff ffd4 	bl	801475c <SD_CheckStatus>
 80147b4:	4603      	mov	r3, r0
 80147b6:	461a      	mov	r2, r3
 80147b8:	4b04      	ldr	r3, [pc, #16]	; (80147cc <SD_initialize+0x34>)
 80147ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80147bc:	4b03      	ldr	r3, [pc, #12]	; (80147cc <SD_initialize+0x34>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	b2db      	uxtb	r3, r3
}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3708      	adds	r7, #8
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
 80147ca:	bf00      	nop
 80147cc:	2400000d 	.word	0x2400000d

080147d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	4603      	mov	r3, r0
 80147d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80147da:	79fb      	ldrb	r3, [r7, #7]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7ff ffbd 	bl	801475c <SD_CheckStatus>
 80147e2:	4603      	mov	r3, r0
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b086      	sub	sp, #24
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	60b9      	str	r1, [r7, #8]
 80147f4:	607a      	str	r2, [r7, #4]
 80147f6:	603b      	str	r3, [r7, #0]
 80147f8:	4603      	mov	r3, r0
 80147fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80147fc:	2301      	movs	r3, #1
 80147fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014800:	f247 5030 	movw	r0, #30000	; 0x7530
 8014804:	f7ff ff8c 	bl	8014720 <SD_CheckStatusWithTimeout>
 8014808:	4603      	mov	r3, r0
 801480a:	2b00      	cmp	r3, #0
 801480c:	da01      	bge.n	8014812 <SD_read+0x26>
  {
    return res;
 801480e:	7dfb      	ldrb	r3, [r7, #23]
 8014810:	e03b      	b.n	801488a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8014812:	683a      	ldr	r2, [r7, #0]
 8014814:	6879      	ldr	r1, [r7, #4]
 8014816:	68b8      	ldr	r0, [r7, #8]
 8014818:	f7ff fef4 	bl	8014604 <BSP_SD_ReadBlocks_DMA>
 801481c:	4603      	mov	r3, r0
 801481e:	2b00      	cmp	r3, #0
 8014820:	d132      	bne.n	8014888 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8014822:	4b1c      	ldr	r3, [pc, #112]	; (8014894 <SD_read+0xa8>)
 8014824:	2200      	movs	r2, #0
 8014826:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014828:	f7ef fb44 	bl	8003eb4 <HAL_GetTick>
 801482c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801482e:	bf00      	nop
 8014830:	4b18      	ldr	r3, [pc, #96]	; (8014894 <SD_read+0xa8>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	2b00      	cmp	r3, #0
 8014836:	d108      	bne.n	801484a <SD_read+0x5e>
 8014838:	f7ef fb3c 	bl	8003eb4 <HAL_GetTick>
 801483c:	4602      	mov	r2, r0
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	1ad3      	subs	r3, r2, r3
 8014842:	f247 522f 	movw	r2, #29999	; 0x752f
 8014846:	4293      	cmp	r3, r2
 8014848:	d9f2      	bls.n	8014830 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801484a:	4b12      	ldr	r3, [pc, #72]	; (8014894 <SD_read+0xa8>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d102      	bne.n	8014858 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014852:	2301      	movs	r3, #1
 8014854:	75fb      	strb	r3, [r7, #23]
 8014856:	e017      	b.n	8014888 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014858:	4b0e      	ldr	r3, [pc, #56]	; (8014894 <SD_read+0xa8>)
 801485a:	2200      	movs	r2, #0
 801485c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801485e:	f7ef fb29 	bl	8003eb4 <HAL_GetTick>
 8014862:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014864:	e007      	b.n	8014876 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014866:	f7ff ff01 	bl	801466c <BSP_SD_GetCardState>
 801486a:	4603      	mov	r3, r0
 801486c:	2b00      	cmp	r3, #0
 801486e:	d102      	bne.n	8014876 <SD_read+0x8a>
          {
            res = RES_OK;
 8014870:	2300      	movs	r3, #0
 8014872:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014874:	e008      	b.n	8014888 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014876:	f7ef fb1d 	bl	8003eb4 <HAL_GetTick>
 801487a:	4602      	mov	r2, r0
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	1ad3      	subs	r3, r2, r3
 8014880:	f247 522f 	movw	r2, #29999	; 0x752f
 8014884:	4293      	cmp	r3, r2
 8014886:	d9ee      	bls.n	8014866 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014888:	7dfb      	ldrb	r3, [r7, #23]
}
 801488a:	4618      	mov	r0, r3
 801488c:	3718      	adds	r7, #24
 801488e:	46bd      	mov	sp, r7
 8014890:	bd80      	pop	{r7, pc}
 8014892:	bf00      	nop
 8014894:	24001758 	.word	0x24001758

08014898 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014898:	b580      	push	{r7, lr}
 801489a:	b086      	sub	sp, #24
 801489c:	af00      	add	r7, sp, #0
 801489e:	60b9      	str	r1, [r7, #8]
 80148a0:	607a      	str	r2, [r7, #4]
 80148a2:	603b      	str	r3, [r7, #0]
 80148a4:	4603      	mov	r3, r0
 80148a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80148a8:	2301      	movs	r3, #1
 80148aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80148ac:	4b24      	ldr	r3, [pc, #144]	; (8014940 <SD_write+0xa8>)
 80148ae:	2200      	movs	r2, #0
 80148b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80148b2:	f247 5030 	movw	r0, #30000	; 0x7530
 80148b6:	f7ff ff33 	bl	8014720 <SD_CheckStatusWithTimeout>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	da01      	bge.n	80148c4 <SD_write+0x2c>
  {
    return res;
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
 80148c2:	e038      	b.n	8014936 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80148c4:	683a      	ldr	r2, [r7, #0]
 80148c6:	6879      	ldr	r1, [r7, #4]
 80148c8:	68b8      	ldr	r0, [r7, #8]
 80148ca:	f7ff feb5 	bl	8014638 <BSP_SD_WriteBlocks_DMA>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d12f      	bne.n	8014934 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80148d4:	f7ef faee 	bl	8003eb4 <HAL_GetTick>
 80148d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80148da:	bf00      	nop
 80148dc:	4b18      	ldr	r3, [pc, #96]	; (8014940 <SD_write+0xa8>)
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d108      	bne.n	80148f6 <SD_write+0x5e>
 80148e4:	f7ef fae6 	bl	8003eb4 <HAL_GetTick>
 80148e8:	4602      	mov	r2, r0
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	f247 522f 	movw	r2, #29999	; 0x752f
 80148f2:	4293      	cmp	r3, r2
 80148f4:	d9f2      	bls.n	80148dc <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80148f6:	4b12      	ldr	r3, [pc, #72]	; (8014940 <SD_write+0xa8>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d102      	bne.n	8014904 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80148fe:	2301      	movs	r3, #1
 8014900:	75fb      	strb	r3, [r7, #23]
 8014902:	e017      	b.n	8014934 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014904:	4b0e      	ldr	r3, [pc, #56]	; (8014940 <SD_write+0xa8>)
 8014906:	2200      	movs	r2, #0
 8014908:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801490a:	f7ef fad3 	bl	8003eb4 <HAL_GetTick>
 801490e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014910:	e007      	b.n	8014922 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014912:	f7ff feab 	bl	801466c <BSP_SD_GetCardState>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d102      	bne.n	8014922 <SD_write+0x8a>
          {
            res = RES_OK;
 801491c:	2300      	movs	r3, #0
 801491e:	75fb      	strb	r3, [r7, #23]
            break;
 8014920:	e008      	b.n	8014934 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014922:	f7ef fac7 	bl	8003eb4 <HAL_GetTick>
 8014926:	4602      	mov	r2, r0
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014930:	4293      	cmp	r3, r2
 8014932:	d9ee      	bls.n	8014912 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014934:	7dfb      	ldrb	r3, [r7, #23]
}
 8014936:	4618      	mov	r0, r3
 8014938:	3718      	adds	r7, #24
 801493a:	46bd      	mov	sp, r7
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	24001754 	.word	0x24001754

08014944 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	b08c      	sub	sp, #48	; 0x30
 8014948:	af00      	add	r7, sp, #0
 801494a:	4603      	mov	r3, r0
 801494c:	603a      	str	r2, [r7, #0]
 801494e:	71fb      	strb	r3, [r7, #7]
 8014950:	460b      	mov	r3, r1
 8014952:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014954:	2301      	movs	r3, #1
 8014956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801495a:	4b25      	ldr	r3, [pc, #148]	; (80149f0 <SD_ioctl+0xac>)
 801495c:	781b      	ldrb	r3, [r3, #0]
 801495e:	b2db      	uxtb	r3, r3
 8014960:	f003 0301 	and.w	r3, r3, #1
 8014964:	2b00      	cmp	r3, #0
 8014966:	d001      	beq.n	801496c <SD_ioctl+0x28>
 8014968:	2303      	movs	r3, #3
 801496a:	e03c      	b.n	80149e6 <SD_ioctl+0xa2>

  switch (cmd)
 801496c:	79bb      	ldrb	r3, [r7, #6]
 801496e:	2b03      	cmp	r3, #3
 8014970:	d834      	bhi.n	80149dc <SD_ioctl+0x98>
 8014972:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <SD_ioctl+0x34>)
 8014974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014978:	08014989 	.word	0x08014989
 801497c:	08014991 	.word	0x08014991
 8014980:	080149a9 	.word	0x080149a9
 8014984:	080149c3 	.word	0x080149c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014988:	2300      	movs	r3, #0
 801498a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801498e:	e028      	b.n	80149e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014990:	f107 0308 	add.w	r3, r7, #8
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff fe79 	bl	801468c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801499a:	6a3a      	ldr	r2, [r7, #32]
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80149a0:	2300      	movs	r3, #0
 80149a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80149a6:	e01c      	b.n	80149e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80149a8:	f107 0308 	add.w	r3, r7, #8
 80149ac:	4618      	mov	r0, r3
 80149ae:	f7ff fe6d 	bl	801468c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80149b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b4:	b29a      	uxth	r2, r3
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80149ba:	2300      	movs	r3, #0
 80149bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80149c0:	e00f      	b.n	80149e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80149c2:	f107 0308 	add.w	r3, r7, #8
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff fe60 	bl	801468c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80149cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ce:	0a5a      	lsrs	r2, r3, #9
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80149d4:	2300      	movs	r3, #0
 80149d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80149da:	e002      	b.n	80149e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80149dc:	2304      	movs	r3, #4
 80149de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80149e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3730      	adds	r7, #48	; 0x30
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	2400000d 	.word	0x2400000d

080149f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80149f4:	b480      	push	{r7}
 80149f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80149f8:	4b03      	ldr	r3, [pc, #12]	; (8014a08 <BSP_SD_WriteCpltCallback+0x14>)
 80149fa:	2201      	movs	r2, #1
 80149fc:	601a      	str	r2, [r3, #0]
}
 80149fe:	bf00      	nop
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr
 8014a08:	24001754 	.word	0x24001754

08014a0c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014a0c:	b480      	push	{r7}
 8014a0e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014a10:	4b03      	ldr	r3, [pc, #12]	; (8014a20 <BSP_SD_ReadCpltCallback+0x14>)
 8014a12:	2201      	movs	r2, #1
 8014a14:	601a      	str	r2, [r3, #0]
}
 8014a16:	bf00      	nop
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1e:	4770      	bx	lr
 8014a20:	24001758 	.word	0x24001758

08014a24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014a30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014a34:	f002 fd00 	bl	8017438 <USBD_static_malloc>
 8014a38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014a3a:	68fb      	ldr	r3, [r7, #12]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d109      	bne.n	8014a54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	32b0      	adds	r2, #176	; 0xb0
 8014a4a:	2100      	movs	r1, #0
 8014a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014a50:	2302      	movs	r3, #2
 8014a52:	e0d4      	b.n	8014bfe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014a54:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014a58:	2100      	movs	r1, #0
 8014a5a:	68f8      	ldr	r0, [r7, #12]
 8014a5c:	f003 fcc1 	bl	80183e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	32b0      	adds	r2, #176	; 0xb0
 8014a6a:	68f9      	ldr	r1, [r7, #12]
 8014a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	32b0      	adds	r2, #176	; 0xb0
 8014a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	7c1b      	ldrb	r3, [r3, #16]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d138      	bne.n	8014afe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014a8c:	4b5e      	ldr	r3, [pc, #376]	; (8014c08 <USBD_CDC_Init+0x1e4>)
 8014a8e:	7819      	ldrb	r1, [r3, #0]
 8014a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a94:	2202      	movs	r2, #2
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f002 fbab 	bl	80171f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014a9c:	4b5a      	ldr	r3, [pc, #360]	; (8014c08 <USBD_CDC_Init+0x1e4>)
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	f003 020f 	and.w	r2, r3, #15
 8014aa4:	6879      	ldr	r1, [r7, #4]
 8014aa6:	4613      	mov	r3, r2
 8014aa8:	009b      	lsls	r3, r3, #2
 8014aaa:	4413      	add	r3, r2
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	440b      	add	r3, r1
 8014ab0:	3324      	adds	r3, #36	; 0x24
 8014ab2:	2201      	movs	r2, #1
 8014ab4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014ab6:	4b55      	ldr	r3, [pc, #340]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014ab8:	7819      	ldrb	r1, [r3, #0]
 8014aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014abe:	2202      	movs	r2, #2
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f002 fb96 	bl	80171f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014ac6:	4b51      	ldr	r3, [pc, #324]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	f003 020f 	and.w	r2, r3, #15
 8014ace:	6879      	ldr	r1, [r7, #4]
 8014ad0:	4613      	mov	r3, r2
 8014ad2:	009b      	lsls	r3, r3, #2
 8014ad4:	4413      	add	r3, r2
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	440b      	add	r3, r1
 8014ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014ade:	2201      	movs	r2, #1
 8014ae0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014ae2:	4b4b      	ldr	r3, [pc, #300]	; (8014c10 <USBD_CDC_Init+0x1ec>)
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	f003 020f 	and.w	r2, r3, #15
 8014aea:	6879      	ldr	r1, [r7, #4]
 8014aec:	4613      	mov	r3, r2
 8014aee:	009b      	lsls	r3, r3, #2
 8014af0:	4413      	add	r3, r2
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	440b      	add	r3, r1
 8014af6:	3326      	adds	r3, #38	; 0x26
 8014af8:	2210      	movs	r2, #16
 8014afa:	801a      	strh	r2, [r3, #0]
 8014afc:	e035      	b.n	8014b6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014afe:	4b42      	ldr	r3, [pc, #264]	; (8014c08 <USBD_CDC_Init+0x1e4>)
 8014b00:	7819      	ldrb	r1, [r3, #0]
 8014b02:	2340      	movs	r3, #64	; 0x40
 8014b04:	2202      	movs	r2, #2
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f002 fb73 	bl	80171f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014b0c:	4b3e      	ldr	r3, [pc, #248]	; (8014c08 <USBD_CDC_Init+0x1e4>)
 8014b0e:	781b      	ldrb	r3, [r3, #0]
 8014b10:	f003 020f 	and.w	r2, r3, #15
 8014b14:	6879      	ldr	r1, [r7, #4]
 8014b16:	4613      	mov	r3, r2
 8014b18:	009b      	lsls	r3, r3, #2
 8014b1a:	4413      	add	r3, r2
 8014b1c:	009b      	lsls	r3, r3, #2
 8014b1e:	440b      	add	r3, r1
 8014b20:	3324      	adds	r3, #36	; 0x24
 8014b22:	2201      	movs	r2, #1
 8014b24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014b26:	4b39      	ldr	r3, [pc, #228]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014b28:	7819      	ldrb	r1, [r3, #0]
 8014b2a:	2340      	movs	r3, #64	; 0x40
 8014b2c:	2202      	movs	r2, #2
 8014b2e:	6878      	ldr	r0, [r7, #4]
 8014b30:	f002 fb5f 	bl	80171f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014b34:	4b35      	ldr	r3, [pc, #212]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	f003 020f 	and.w	r2, r3, #15
 8014b3c:	6879      	ldr	r1, [r7, #4]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	4413      	add	r3, r2
 8014b44:	009b      	lsls	r3, r3, #2
 8014b46:	440b      	add	r3, r1
 8014b48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014b50:	4b2f      	ldr	r3, [pc, #188]	; (8014c10 <USBD_CDC_Init+0x1ec>)
 8014b52:	781b      	ldrb	r3, [r3, #0]
 8014b54:	f003 020f 	and.w	r2, r3, #15
 8014b58:	6879      	ldr	r1, [r7, #4]
 8014b5a:	4613      	mov	r3, r2
 8014b5c:	009b      	lsls	r3, r3, #2
 8014b5e:	4413      	add	r3, r2
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	440b      	add	r3, r1
 8014b64:	3326      	adds	r3, #38	; 0x26
 8014b66:	2210      	movs	r2, #16
 8014b68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014b6a:	4b29      	ldr	r3, [pc, #164]	; (8014c10 <USBD_CDC_Init+0x1ec>)
 8014b6c:	7819      	ldrb	r1, [r3, #0]
 8014b6e:	2308      	movs	r3, #8
 8014b70:	2203      	movs	r2, #3
 8014b72:	6878      	ldr	r0, [r7, #4]
 8014b74:	f002 fb3d 	bl	80171f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014b78:	4b25      	ldr	r3, [pc, #148]	; (8014c10 <USBD_CDC_Init+0x1ec>)
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	f003 020f 	and.w	r2, r3, #15
 8014b80:	6879      	ldr	r1, [r7, #4]
 8014b82:	4613      	mov	r3, r2
 8014b84:	009b      	lsls	r3, r3, #2
 8014b86:	4413      	add	r3, r2
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	440b      	add	r3, r1
 8014b8c:	3324      	adds	r3, #36	; 0x24
 8014b8e:	2201      	movs	r2, #1
 8014b90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2200      	movs	r2, #0
 8014b96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	33b0      	adds	r3, #176	; 0xb0
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	4413      	add	r3, r2
 8014ba8:	685b      	ldr	r3, [r3, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014bae:	68fb      	ldr	r3, [r7, #12]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	2200      	movs	r2, #0
 8014bba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d101      	bne.n	8014bcc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014bc8:	2302      	movs	r3, #2
 8014bca:	e018      	b.n	8014bfe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	7c1b      	ldrb	r3, [r3, #16]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d10a      	bne.n	8014bea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bd4:	4b0d      	ldr	r3, [pc, #52]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014bd6:	7819      	ldrb	r1, [r3, #0]
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f002 fbf4 	bl	80173d0 <USBD_LL_PrepareReceive>
 8014be8:	e008      	b.n	8014bfc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014bea:	4b08      	ldr	r3, [pc, #32]	; (8014c0c <USBD_CDC_Init+0x1e8>)
 8014bec:	7819      	ldrb	r1, [r3, #0]
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014bf4:	2340      	movs	r3, #64	; 0x40
 8014bf6:	6878      	ldr	r0, [r7, #4]
 8014bf8:	f002 fbea 	bl	80173d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3710      	adds	r7, #16
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	24000097 	.word	0x24000097
 8014c0c:	24000098 	.word	0x24000098
 8014c10:	24000099 	.word	0x24000099

08014c14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014c14:	b580      	push	{r7, lr}
 8014c16:	b082      	sub	sp, #8
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014c20:	4b3a      	ldr	r3, [pc, #232]	; (8014d0c <USBD_CDC_DeInit+0xf8>)
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	4619      	mov	r1, r3
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f002 fb09 	bl	801723e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014c2c:	4b37      	ldr	r3, [pc, #220]	; (8014d0c <USBD_CDC_DeInit+0xf8>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	f003 020f 	and.w	r2, r3, #15
 8014c34:	6879      	ldr	r1, [r7, #4]
 8014c36:	4613      	mov	r3, r2
 8014c38:	009b      	lsls	r3, r3, #2
 8014c3a:	4413      	add	r3, r2
 8014c3c:	009b      	lsls	r3, r3, #2
 8014c3e:	440b      	add	r3, r1
 8014c40:	3324      	adds	r3, #36	; 0x24
 8014c42:	2200      	movs	r2, #0
 8014c44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014c46:	4b32      	ldr	r3, [pc, #200]	; (8014d10 <USBD_CDC_DeInit+0xfc>)
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f002 faf6 	bl	801723e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014c52:	4b2f      	ldr	r3, [pc, #188]	; (8014d10 <USBD_CDC_DeInit+0xfc>)
 8014c54:	781b      	ldrb	r3, [r3, #0]
 8014c56:	f003 020f 	and.w	r2, r3, #15
 8014c5a:	6879      	ldr	r1, [r7, #4]
 8014c5c:	4613      	mov	r3, r2
 8014c5e:	009b      	lsls	r3, r3, #2
 8014c60:	4413      	add	r3, r2
 8014c62:	009b      	lsls	r3, r3, #2
 8014c64:	440b      	add	r3, r1
 8014c66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014c6e:	4b29      	ldr	r3, [pc, #164]	; (8014d14 <USBD_CDC_DeInit+0x100>)
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	4619      	mov	r1, r3
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f002 fae2 	bl	801723e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014c7a:	4b26      	ldr	r3, [pc, #152]	; (8014d14 <USBD_CDC_DeInit+0x100>)
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	f003 020f 	and.w	r2, r3, #15
 8014c82:	6879      	ldr	r1, [r7, #4]
 8014c84:	4613      	mov	r3, r2
 8014c86:	009b      	lsls	r3, r3, #2
 8014c88:	4413      	add	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	440b      	add	r3, r1
 8014c8e:	3324      	adds	r3, #36	; 0x24
 8014c90:	2200      	movs	r2, #0
 8014c92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014c94:	4b1f      	ldr	r3, [pc, #124]	; (8014d14 <USBD_CDC_DeInit+0x100>)
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	f003 020f 	and.w	r2, r3, #15
 8014c9c:	6879      	ldr	r1, [r7, #4]
 8014c9e:	4613      	mov	r3, r2
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	4413      	add	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	440b      	add	r3, r1
 8014ca8:	3326      	adds	r3, #38	; 0x26
 8014caa:	2200      	movs	r2, #0
 8014cac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	32b0      	adds	r2, #176	; 0xb0
 8014cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d01f      	beq.n	8014d00 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014cc6:	687a      	ldr	r2, [r7, #4]
 8014cc8:	33b0      	adds	r3, #176	; 0xb0
 8014cca:	009b      	lsls	r3, r3, #2
 8014ccc:	4413      	add	r3, r2
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	32b0      	adds	r2, #176	; 0xb0
 8014cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ce2:	4618      	mov	r0, r3
 8014ce4:	f002 fbb6 	bl	8017454 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	32b0      	adds	r2, #176	; 0xb0
 8014cf2:	2100      	movs	r1, #0
 8014cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014d00:	2300      	movs	r3, #0
}
 8014d02:	4618      	mov	r0, r3
 8014d04:	3708      	adds	r7, #8
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	24000097 	.word	0x24000097
 8014d10:	24000098 	.word	0x24000098
 8014d14:	24000099 	.word	0x24000099

08014d18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b086      	sub	sp, #24
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
 8014d20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	32b0      	adds	r2, #176	; 0xb0
 8014d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d30:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014d32:	2300      	movs	r3, #0
 8014d34:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014d36:	2300      	movs	r3, #0
 8014d38:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014d3e:	693b      	ldr	r3, [r7, #16]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d101      	bne.n	8014d48 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014d44:	2303      	movs	r3, #3
 8014d46:	e0bf      	b.n	8014ec8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	781b      	ldrb	r3, [r3, #0]
 8014d4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d050      	beq.n	8014df6 <USBD_CDC_Setup+0xde>
 8014d54:	2b20      	cmp	r3, #32
 8014d56:	f040 80af 	bne.w	8014eb8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	88db      	ldrh	r3, [r3, #6]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d03a      	beq.n	8014dd8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	b25b      	sxtb	r3, r3
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	da1b      	bge.n	8014da4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d72:	687a      	ldr	r2, [r7, #4]
 8014d74:	33b0      	adds	r3, #176	; 0xb0
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	4413      	add	r3, r2
 8014d7a:	685b      	ldr	r3, [r3, #4]
 8014d7c:	689b      	ldr	r3, [r3, #8]
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014d82:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014d84:	683a      	ldr	r2, [r7, #0]
 8014d86:	88d2      	ldrh	r2, [r2, #6]
 8014d88:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	88db      	ldrh	r3, [r3, #6]
 8014d8e:	2b07      	cmp	r3, #7
 8014d90:	bf28      	it	cs
 8014d92:	2307      	movcs	r3, #7
 8014d94:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014d96:	693b      	ldr	r3, [r7, #16]
 8014d98:	89fa      	ldrh	r2, [r7, #14]
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f001 fd89 	bl	80168b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014da2:	e090      	b.n	8014ec6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	785a      	ldrb	r2, [r3, #1]
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014dae:	683b      	ldr	r3, [r7, #0]
 8014db0:	88db      	ldrh	r3, [r3, #6]
 8014db2:	2b3f      	cmp	r3, #63	; 0x3f
 8014db4:	d803      	bhi.n	8014dbe <USBD_CDC_Setup+0xa6>
 8014db6:	683b      	ldr	r3, [r7, #0]
 8014db8:	88db      	ldrh	r3, [r3, #6]
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	e000      	b.n	8014dc0 <USBD_CDC_Setup+0xa8>
 8014dbe:	2240      	movs	r2, #64	; 0x40
 8014dc0:	693b      	ldr	r3, [r7, #16]
 8014dc2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014dc6:	6939      	ldr	r1, [r7, #16]
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014dce:	461a      	mov	r2, r3
 8014dd0:	6878      	ldr	r0, [r7, #4]
 8014dd2:	f001 fd9b 	bl	801690c <USBD_CtlPrepareRx>
      break;
 8014dd6:	e076      	b.n	8014ec6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	33b0      	adds	r3, #176	; 0xb0
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	4413      	add	r3, r2
 8014de6:	685b      	ldr	r3, [r3, #4]
 8014de8:	689b      	ldr	r3, [r3, #8]
 8014dea:	683a      	ldr	r2, [r7, #0]
 8014dec:	7850      	ldrb	r0, [r2, #1]
 8014dee:	2200      	movs	r2, #0
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	4798      	blx	r3
      break;
 8014df4:	e067      	b.n	8014ec6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	785b      	ldrb	r3, [r3, #1]
 8014dfa:	2b0b      	cmp	r3, #11
 8014dfc:	d851      	bhi.n	8014ea2 <USBD_CDC_Setup+0x18a>
 8014dfe:	a201      	add	r2, pc, #4	; (adr r2, 8014e04 <USBD_CDC_Setup+0xec>)
 8014e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e04:	08014e35 	.word	0x08014e35
 8014e08:	08014eb1 	.word	0x08014eb1
 8014e0c:	08014ea3 	.word	0x08014ea3
 8014e10:	08014ea3 	.word	0x08014ea3
 8014e14:	08014ea3 	.word	0x08014ea3
 8014e18:	08014ea3 	.word	0x08014ea3
 8014e1c:	08014ea3 	.word	0x08014ea3
 8014e20:	08014ea3 	.word	0x08014ea3
 8014e24:	08014ea3 	.word	0x08014ea3
 8014e28:	08014ea3 	.word	0x08014ea3
 8014e2c:	08014e5f 	.word	0x08014e5f
 8014e30:	08014e89 	.word	0x08014e89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e3a:	b2db      	uxtb	r3, r3
 8014e3c:	2b03      	cmp	r3, #3
 8014e3e:	d107      	bne.n	8014e50 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014e40:	f107 030a 	add.w	r3, r7, #10
 8014e44:	2202      	movs	r2, #2
 8014e46:	4619      	mov	r1, r3
 8014e48:	6878      	ldr	r0, [r7, #4]
 8014e4a:	f001 fd33 	bl	80168b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e4e:	e032      	b.n	8014eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014e50:	6839      	ldr	r1, [r7, #0]
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f001 fcbd 	bl	80167d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	75fb      	strb	r3, [r7, #23]
          break;
 8014e5c:	e02b      	b.n	8014eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e64:	b2db      	uxtb	r3, r3
 8014e66:	2b03      	cmp	r3, #3
 8014e68:	d107      	bne.n	8014e7a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014e6a:	f107 030d 	add.w	r3, r7, #13
 8014e6e:	2201      	movs	r2, #1
 8014e70:	4619      	mov	r1, r3
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f001 fd1e 	bl	80168b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014e78:	e01d      	b.n	8014eb6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f001 fca8 	bl	80167d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e82:	2303      	movs	r3, #3
 8014e84:	75fb      	strb	r3, [r7, #23]
          break;
 8014e86:	e016      	b.n	8014eb6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e8e:	b2db      	uxtb	r3, r3
 8014e90:	2b03      	cmp	r3, #3
 8014e92:	d00f      	beq.n	8014eb4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014e94:	6839      	ldr	r1, [r7, #0]
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f001 fc9b 	bl	80167d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8014e9c:	2303      	movs	r3, #3
 8014e9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014ea0:	e008      	b.n	8014eb4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014ea2:	6839      	ldr	r1, [r7, #0]
 8014ea4:	6878      	ldr	r0, [r7, #4]
 8014ea6:	f001 fc94 	bl	80167d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8014eaa:	2303      	movs	r3, #3
 8014eac:	75fb      	strb	r3, [r7, #23]
          break;
 8014eae:	e002      	b.n	8014eb6 <USBD_CDC_Setup+0x19e>
          break;
 8014eb0:	bf00      	nop
 8014eb2:	e008      	b.n	8014ec6 <USBD_CDC_Setup+0x1ae>
          break;
 8014eb4:	bf00      	nop
      }
      break;
 8014eb6:	e006      	b.n	8014ec6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014eb8:	6839      	ldr	r1, [r7, #0]
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	f001 fc89 	bl	80167d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ec0:	2303      	movs	r3, #3
 8014ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8014ec4:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3718      	adds	r7, #24
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b084      	sub	sp, #16
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	460b      	mov	r3, r1
 8014eda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014ee2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	32b0      	adds	r2, #176	; 0xb0
 8014eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d101      	bne.n	8014efa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014ef6:	2303      	movs	r3, #3
 8014ef8:	e065      	b.n	8014fc6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	32b0      	adds	r2, #176	; 0xb0
 8014f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f08:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014f0a:	78fb      	ldrb	r3, [r7, #3]
 8014f0c:	f003 020f 	and.w	r2, r3, #15
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	4613      	mov	r3, r2
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	4413      	add	r3, r2
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	440b      	add	r3, r1
 8014f1c:	3318      	adds	r3, #24
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d02f      	beq.n	8014f84 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014f24:	78fb      	ldrb	r3, [r7, #3]
 8014f26:	f003 020f 	and.w	r2, r3, #15
 8014f2a:	6879      	ldr	r1, [r7, #4]
 8014f2c:	4613      	mov	r3, r2
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	4413      	add	r3, r2
 8014f32:	009b      	lsls	r3, r3, #2
 8014f34:	440b      	add	r3, r1
 8014f36:	3318      	adds	r3, #24
 8014f38:	681a      	ldr	r2, [r3, #0]
 8014f3a:	78fb      	ldrb	r3, [r7, #3]
 8014f3c:	f003 010f 	and.w	r1, r3, #15
 8014f40:	68f8      	ldr	r0, [r7, #12]
 8014f42:	460b      	mov	r3, r1
 8014f44:	00db      	lsls	r3, r3, #3
 8014f46:	440b      	add	r3, r1
 8014f48:	009b      	lsls	r3, r3, #2
 8014f4a:	4403      	add	r3, r0
 8014f4c:	3344      	adds	r3, #68	; 0x44
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	fbb2 f1f3 	udiv	r1, r2, r3
 8014f54:	fb01 f303 	mul.w	r3, r1, r3
 8014f58:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d112      	bne.n	8014f84 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014f5e:	78fb      	ldrb	r3, [r7, #3]
 8014f60:	f003 020f 	and.w	r2, r3, #15
 8014f64:	6879      	ldr	r1, [r7, #4]
 8014f66:	4613      	mov	r3, r2
 8014f68:	009b      	lsls	r3, r3, #2
 8014f6a:	4413      	add	r3, r2
 8014f6c:	009b      	lsls	r3, r3, #2
 8014f6e:	440b      	add	r3, r1
 8014f70:	3318      	adds	r3, #24
 8014f72:	2200      	movs	r2, #0
 8014f74:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014f76:	78f9      	ldrb	r1, [r7, #3]
 8014f78:	2300      	movs	r3, #0
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f002 fa06 	bl	801738e <USBD_LL_Transmit>
 8014f82:	e01f      	b.n	8014fc4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014f84:	68bb      	ldr	r3, [r7, #8]
 8014f86:	2200      	movs	r2, #0
 8014f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	33b0      	adds	r3, #176	; 0xb0
 8014f96:	009b      	lsls	r3, r3, #2
 8014f98:	4413      	add	r3, r2
 8014f9a:	685b      	ldr	r3, [r3, #4]
 8014f9c:	691b      	ldr	r3, [r3, #16]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d010      	beq.n	8014fc4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	33b0      	adds	r3, #176	; 0xb0
 8014fac:	009b      	lsls	r3, r3, #2
 8014fae:	4413      	add	r3, r2
 8014fb0:	685b      	ldr	r3, [r3, #4]
 8014fb2:	691b      	ldr	r3, [r3, #16]
 8014fb4:	68ba      	ldr	r2, [r7, #8]
 8014fb6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014fba:	68ba      	ldr	r2, [r7, #8]
 8014fbc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014fc0:	78fa      	ldrb	r2, [r7, #3]
 8014fc2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	3710      	adds	r7, #16
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	bd80      	pop	{r7, pc}

08014fce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014fce:	b580      	push	{r7, lr}
 8014fd0:	b084      	sub	sp, #16
 8014fd2:	af00      	add	r7, sp, #0
 8014fd4:	6078      	str	r0, [r7, #4]
 8014fd6:	460b      	mov	r3, r1
 8014fd8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	32b0      	adds	r2, #176	; 0xb0
 8014fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fe8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	32b0      	adds	r2, #176	; 0xb0
 8014ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d101      	bne.n	8015000 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014ffc:	2303      	movs	r3, #3
 8014ffe:	e01a      	b.n	8015036 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8015000:	78fb      	ldrb	r3, [r7, #3]
 8015002:	4619      	mov	r1, r3
 8015004:	6878      	ldr	r0, [r7, #4]
 8015006:	f002 fa04 	bl	8017412 <USBD_LL_GetRxDataSize>
 801500a:	4602      	mov	r2, r0
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	33b0      	adds	r3, #176	; 0xb0
 801501c:	009b      	lsls	r3, r3, #2
 801501e:	4413      	add	r3, r2
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	68fa      	ldr	r2, [r7, #12]
 8015026:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015030:	4611      	mov	r1, r2
 8015032:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015034:	2300      	movs	r3, #0
}
 8015036:	4618      	mov	r0, r3
 8015038:	3710      	adds	r7, #16
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b084      	sub	sp, #16
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	32b0      	adds	r2, #176	; 0xb0
 8015050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015054:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d101      	bne.n	8015060 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801505c:	2303      	movs	r3, #3
 801505e:	e025      	b.n	80150ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	33b0      	adds	r3, #176	; 0xb0
 801506a:	009b      	lsls	r3, r3, #2
 801506c:	4413      	add	r3, r2
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d01a      	beq.n	80150aa <USBD_CDC_EP0_RxReady+0x6c>
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801507a:	2bff      	cmp	r3, #255	; 0xff
 801507c:	d015      	beq.n	80150aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	33b0      	adds	r3, #176	; 0xb0
 8015088:	009b      	lsls	r3, r3, #2
 801508a:	4413      	add	r3, r2
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	689b      	ldr	r3, [r3, #8]
 8015090:	68fa      	ldr	r2, [r7, #12]
 8015092:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015096:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801509e:	b292      	uxth	r2, r2
 80150a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	22ff      	movs	r2, #255	; 0xff
 80150a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80150aa:	2300      	movs	r3, #0
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	3710      	adds	r7, #16
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}

080150b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80150bc:	2182      	movs	r1, #130	; 0x82
 80150be:	4818      	ldr	r0, [pc, #96]	; (8015120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80150c0:	f000 fd4f 	bl	8015b62 <USBD_GetEpDesc>
 80150c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80150c6:	2101      	movs	r1, #1
 80150c8:	4815      	ldr	r0, [pc, #84]	; (8015120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80150ca:	f000 fd4a 	bl	8015b62 <USBD_GetEpDesc>
 80150ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80150d0:	2181      	movs	r1, #129	; 0x81
 80150d2:	4813      	ldr	r0, [pc, #76]	; (8015120 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80150d4:	f000 fd45 	bl	8015b62 <USBD_GetEpDesc>
 80150d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d002      	beq.n	80150e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	2210      	movs	r2, #16
 80150e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80150e6:	693b      	ldr	r3, [r7, #16]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d006      	beq.n	80150fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80150f4:	711a      	strb	r2, [r3, #4]
 80150f6:	2200      	movs	r2, #0
 80150f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d006      	beq.n	801510e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	2200      	movs	r2, #0
 8015104:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015108:	711a      	strb	r2, [r3, #4]
 801510a:	2200      	movs	r2, #0
 801510c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	2243      	movs	r2, #67	; 0x43
 8015112:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015114:	4b02      	ldr	r3, [pc, #8]	; (8015120 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015116:	4618      	mov	r0, r3
 8015118:	3718      	adds	r7, #24
 801511a:	46bd      	mov	sp, r7
 801511c:	bd80      	pop	{r7, pc}
 801511e:	bf00      	nop
 8015120:	24000054 	.word	0x24000054

08015124 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b086      	sub	sp, #24
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801512c:	2182      	movs	r1, #130	; 0x82
 801512e:	4818      	ldr	r0, [pc, #96]	; (8015190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015130:	f000 fd17 	bl	8015b62 <USBD_GetEpDesc>
 8015134:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015136:	2101      	movs	r1, #1
 8015138:	4815      	ldr	r0, [pc, #84]	; (8015190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801513a:	f000 fd12 	bl	8015b62 <USBD_GetEpDesc>
 801513e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015140:	2181      	movs	r1, #129	; 0x81
 8015142:	4813      	ldr	r0, [pc, #76]	; (8015190 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015144:	f000 fd0d 	bl	8015b62 <USBD_GetEpDesc>
 8015148:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d002      	beq.n	8015156 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	2210      	movs	r2, #16
 8015154:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015156:	693b      	ldr	r3, [r7, #16]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d006      	beq.n	801516a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801515c:	693b      	ldr	r3, [r7, #16]
 801515e:	2200      	movs	r2, #0
 8015160:	711a      	strb	r2, [r3, #4]
 8015162:	2200      	movs	r2, #0
 8015164:	f042 0202 	orr.w	r2, r2, #2
 8015168:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d006      	beq.n	801517e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2200      	movs	r2, #0
 8015174:	711a      	strb	r2, [r3, #4]
 8015176:	2200      	movs	r2, #0
 8015178:	f042 0202 	orr.w	r2, r2, #2
 801517c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	2243      	movs	r2, #67	; 0x43
 8015182:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015184:	4b02      	ldr	r3, [pc, #8]	; (8015190 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015186:	4618      	mov	r0, r3
 8015188:	3718      	adds	r7, #24
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
 801518e:	bf00      	nop
 8015190:	24000054 	.word	0x24000054

08015194 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801519c:	2182      	movs	r1, #130	; 0x82
 801519e:	4818      	ldr	r0, [pc, #96]	; (8015200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151a0:	f000 fcdf 	bl	8015b62 <USBD_GetEpDesc>
 80151a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80151a6:	2101      	movs	r1, #1
 80151a8:	4815      	ldr	r0, [pc, #84]	; (8015200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151aa:	f000 fcda 	bl	8015b62 <USBD_GetEpDesc>
 80151ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80151b0:	2181      	movs	r1, #129	; 0x81
 80151b2:	4813      	ldr	r0, [pc, #76]	; (8015200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80151b4:	f000 fcd5 	bl	8015b62 <USBD_GetEpDesc>
 80151b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d002      	beq.n	80151c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	2210      	movs	r2, #16
 80151c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d006      	beq.n	80151da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	2200      	movs	r2, #0
 80151d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80151d4:	711a      	strb	r2, [r3, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80151da:	68fb      	ldr	r3, [r7, #12]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d006      	beq.n	80151ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	2200      	movs	r2, #0
 80151e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80151e8:	711a      	strb	r2, [r3, #4]
 80151ea:	2200      	movs	r2, #0
 80151ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2243      	movs	r2, #67	; 0x43
 80151f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80151f4:	4b02      	ldr	r3, [pc, #8]	; (8015200 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80151f6:	4618      	mov	r0, r3
 80151f8:	3718      	adds	r7, #24
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
 80151fe:	bf00      	nop
 8015200:	24000054 	.word	0x24000054

08015204 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015204:	b480      	push	{r7}
 8015206:	b083      	sub	sp, #12
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	220a      	movs	r2, #10
 8015210:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015212:	4b03      	ldr	r3, [pc, #12]	; (8015220 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015214:	4618      	mov	r0, r3
 8015216:	370c      	adds	r7, #12
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr
 8015220:	24000010 	.word	0x24000010

08015224 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015224:	b480      	push	{r7}
 8015226:	b083      	sub	sp, #12
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
 801522c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d101      	bne.n	8015238 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015234:	2303      	movs	r3, #3
 8015236:	e009      	b.n	801524c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801523e:	687a      	ldr	r2, [r7, #4]
 8015240:	33b0      	adds	r3, #176	; 0xb0
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	4413      	add	r3, r2
 8015246:	683a      	ldr	r2, [r7, #0]
 8015248:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801524a:	2300      	movs	r3, #0
}
 801524c:	4618      	mov	r0, r3
 801524e:	370c      	adds	r7, #12
 8015250:	46bd      	mov	sp, r7
 8015252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015256:	4770      	bx	lr

08015258 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015258:	b480      	push	{r7}
 801525a:	b087      	sub	sp, #28
 801525c:	af00      	add	r7, sp, #0
 801525e:	60f8      	str	r0, [r7, #12]
 8015260:	60b9      	str	r1, [r7, #8]
 8015262:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	32b0      	adds	r2, #176	; 0xb0
 801526e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015272:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	2b00      	cmp	r3, #0
 8015278:	d101      	bne.n	801527e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801527a:	2303      	movs	r3, #3
 801527c:	e008      	b.n	8015290 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801527e:	697b      	ldr	r3, [r7, #20]
 8015280:	68ba      	ldr	r2, [r7, #8]
 8015282:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015286:	697b      	ldr	r3, [r7, #20]
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801528e:	2300      	movs	r3, #0
}
 8015290:	4618      	mov	r0, r3
 8015292:	371c      	adds	r7, #28
 8015294:	46bd      	mov	sp, r7
 8015296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529a:	4770      	bx	lr

0801529c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801529c:	b480      	push	{r7}
 801529e:	b085      	sub	sp, #20
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
 80152a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	32b0      	adds	r2, #176	; 0xb0
 80152b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d101      	bne.n	80152c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80152bc:	2303      	movs	r3, #3
 80152be:	e004      	b.n	80152ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	683a      	ldr	r2, [r7, #0]
 80152c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80152c8:	2300      	movs	r3, #0
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3714      	adds	r7, #20
 80152ce:	46bd      	mov	sp, r7
 80152d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d4:	4770      	bx	lr
	...

080152d8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b084      	sub	sp, #16
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	32b0      	adds	r2, #176	; 0xb0
 80152ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152ee:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80152f0:	2301      	movs	r3, #1
 80152f2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d101      	bne.n	80152fe <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80152fa:	2303      	movs	r3, #3
 80152fc:	e025      	b.n	801534a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015304:	2b00      	cmp	r3, #0
 8015306:	d11f      	bne.n	8015348 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	2201      	movs	r2, #1
 801530c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015310:	4b10      	ldr	r3, [pc, #64]	; (8015354 <USBD_CDC_TransmitPacket+0x7c>)
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	f003 020f 	and.w	r2, r3, #15
 8015318:	68bb      	ldr	r3, [r7, #8]
 801531a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	4613      	mov	r3, r2
 8015322:	009b      	lsls	r3, r3, #2
 8015324:	4413      	add	r3, r2
 8015326:	009b      	lsls	r3, r3, #2
 8015328:	4403      	add	r3, r0
 801532a:	3318      	adds	r3, #24
 801532c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801532e:	4b09      	ldr	r3, [pc, #36]	; (8015354 <USBD_CDC_TransmitPacket+0x7c>)
 8015330:	7819      	ldrb	r1, [r3, #0]
 8015332:	68bb      	ldr	r3, [r7, #8]
 8015334:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f002 f825 	bl	801738e <USBD_LL_Transmit>

    ret = USBD_OK;
 8015344:	2300      	movs	r3, #0
 8015346:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015348:	7bfb      	ldrb	r3, [r7, #15]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
 8015352:	bf00      	nop
 8015354:	24000097 	.word	0x24000097

08015358 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015358:	b580      	push	{r7, lr}
 801535a:	b084      	sub	sp, #16
 801535c:	af00      	add	r7, sp, #0
 801535e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	32b0      	adds	r2, #176	; 0xb0
 801536a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801536e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	32b0      	adds	r2, #176	; 0xb0
 801537a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d101      	bne.n	8015386 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015382:	2303      	movs	r3, #3
 8015384:	e018      	b.n	80153b8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	7c1b      	ldrb	r3, [r3, #16]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d10a      	bne.n	80153a4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801538e:	4b0c      	ldr	r3, [pc, #48]	; (80153c0 <USBD_CDC_ReceivePacket+0x68>)
 8015390:	7819      	ldrb	r1, [r3, #0]
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015398:	f44f 7300 	mov.w	r3, #512	; 0x200
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f002 f817 	bl	80173d0 <USBD_LL_PrepareReceive>
 80153a2:	e008      	b.n	80153b6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80153a4:	4b06      	ldr	r3, [pc, #24]	; (80153c0 <USBD_CDC_ReceivePacket+0x68>)
 80153a6:	7819      	ldrb	r1, [r3, #0]
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80153ae:	2340      	movs	r3, #64	; 0x40
 80153b0:	6878      	ldr	r0, [r7, #4]
 80153b2:	f002 f80d 	bl	80173d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80153b6:	2300      	movs	r3, #0
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3710      	adds	r7, #16
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}
 80153c0:	24000098 	.word	0x24000098

080153c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80153c4:	b580      	push	{r7, lr}
 80153c6:	b086      	sub	sp, #24
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	4613      	mov	r3, r2
 80153d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d101      	bne.n	80153dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80153d8:	2303      	movs	r3, #3
 80153da:	e01f      	b.n	801541c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2200      	movs	r2, #0
 80153e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	2200      	movs	r2, #0
 80153e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	2200      	movs	r2, #0
 80153f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80153f4:	68bb      	ldr	r3, [r7, #8]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d003      	beq.n	8015402 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	68ba      	ldr	r2, [r7, #8]
 80153fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	2201      	movs	r2, #1
 8015406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	79fa      	ldrb	r2, [r7, #7]
 801540e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015410:	68f8      	ldr	r0, [r7, #12]
 8015412:	f001 fe81 	bl	8017118 <USBD_LL_Init>
 8015416:	4603      	mov	r3, r0
 8015418:	75fb      	strb	r3, [r7, #23]

  return ret;
 801541a:	7dfb      	ldrb	r3, [r7, #23]
}
 801541c:	4618      	mov	r0, r3
 801541e:	3718      	adds	r7, #24
 8015420:	46bd      	mov	sp, r7
 8015422:	bd80      	pop	{r7, pc}

08015424 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801542e:	2300      	movs	r3, #0
 8015430:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d101      	bne.n	801543c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015438:	2303      	movs	r3, #3
 801543a:	e025      	b.n	8015488 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	683a      	ldr	r2, [r7, #0]
 8015440:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	32ae      	adds	r2, #174	; 0xae
 801544e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015454:	2b00      	cmp	r3, #0
 8015456:	d00f      	beq.n	8015478 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	32ae      	adds	r2, #174	; 0xae
 8015462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015468:	f107 020e 	add.w	r2, r7, #14
 801546c:	4610      	mov	r0, r2
 801546e:	4798      	blx	r3
 8015470:	4602      	mov	r2, r0
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801547e:	1c5a      	adds	r2, r3, #1
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015486:	2300      	movs	r3, #0
}
 8015488:	4618      	mov	r0, r3
 801548a:	3710      	adds	r7, #16
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f001 fe8f 	bl	80171bc <USBD_LL_Start>
 801549e:	4603      	mov	r3, r0
}
 80154a0:	4618      	mov	r0, r3
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}

080154a8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80154a8:	b480      	push	{r7}
 80154aa:	b083      	sub	sp, #12
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80154b0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	370c      	adds	r7, #12
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr

080154be <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b084      	sub	sp, #16
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	6078      	str	r0, [r7, #4]
 80154c6:	460b      	mov	r3, r1
 80154c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80154ca:	2300      	movs	r3, #0
 80154cc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d009      	beq.n	80154ec <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	78fa      	ldrb	r2, [r7, #3]
 80154e2:	4611      	mov	r1, r2
 80154e4:	6878      	ldr	r0, [r7, #4]
 80154e6:	4798      	blx	r3
 80154e8:	4603      	mov	r3, r0
 80154ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ee:	4618      	mov	r0, r3
 80154f0:	3710      	adds	r7, #16
 80154f2:	46bd      	mov	sp, r7
 80154f4:	bd80      	pop	{r7, pc}

080154f6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b084      	sub	sp, #16
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	6078      	str	r0, [r7, #4]
 80154fe:	460b      	mov	r3, r1
 8015500:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015502:	2300      	movs	r3, #0
 8015504:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801550c:	685b      	ldr	r3, [r3, #4]
 801550e:	78fa      	ldrb	r2, [r7, #3]
 8015510:	4611      	mov	r1, r2
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	4798      	blx	r3
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	d001      	beq.n	8015520 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801551c:	2303      	movs	r3, #3
 801551e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015520:	7bfb      	ldrb	r3, [r7, #15]
}
 8015522:	4618      	mov	r0, r3
 8015524:	3710      	adds	r7, #16
 8015526:	46bd      	mov	sp, r7
 8015528:	bd80      	pop	{r7, pc}

0801552a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801552a:	b580      	push	{r7, lr}
 801552c:	b084      	sub	sp, #16
 801552e:	af00      	add	r7, sp, #0
 8015530:	6078      	str	r0, [r7, #4]
 8015532:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801553a:	6839      	ldr	r1, [r7, #0]
 801553c:	4618      	mov	r0, r3
 801553e:	f001 f90e 	bl	801675e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2201      	movs	r2, #1
 8015546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015550:	461a      	mov	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801555e:	f003 031f 	and.w	r3, r3, #31
 8015562:	2b02      	cmp	r3, #2
 8015564:	d01a      	beq.n	801559c <USBD_LL_SetupStage+0x72>
 8015566:	2b02      	cmp	r3, #2
 8015568:	d822      	bhi.n	80155b0 <USBD_LL_SetupStage+0x86>
 801556a:	2b00      	cmp	r3, #0
 801556c:	d002      	beq.n	8015574 <USBD_LL_SetupStage+0x4a>
 801556e:	2b01      	cmp	r3, #1
 8015570:	d00a      	beq.n	8015588 <USBD_LL_SetupStage+0x5e>
 8015572:	e01d      	b.n	80155b0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801557a:	4619      	mov	r1, r3
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 fb65 	bl	8015c4c <USBD_StdDevReq>
 8015582:	4603      	mov	r3, r0
 8015584:	73fb      	strb	r3, [r7, #15]
      break;
 8015586:	e020      	b.n	80155ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801558e:	4619      	mov	r1, r3
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	f000 fbcd 	bl	8015d30 <USBD_StdItfReq>
 8015596:	4603      	mov	r3, r0
 8015598:	73fb      	strb	r3, [r7, #15]
      break;
 801559a:	e016      	b.n	80155ca <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80155a2:	4619      	mov	r1, r3
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f000 fc2f 	bl	8015e08 <USBD_StdEPReq>
 80155aa:	4603      	mov	r3, r0
 80155ac:	73fb      	strb	r3, [r7, #15]
      break;
 80155ae:	e00c      	b.n	80155ca <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80155b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80155ba:	b2db      	uxtb	r3, r3
 80155bc:	4619      	mov	r1, r3
 80155be:	6878      	ldr	r0, [r7, #4]
 80155c0:	f001 fe5c 	bl	801727c <USBD_LL_StallEP>
 80155c4:	4603      	mov	r3, r0
 80155c6:	73fb      	strb	r3, [r7, #15]
      break;
 80155c8:	bf00      	nop
  }

  return ret;
 80155ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}

080155d4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b086      	sub	sp, #24
 80155d8:	af00      	add	r7, sp, #0
 80155da:	60f8      	str	r0, [r7, #12]
 80155dc:	460b      	mov	r3, r1
 80155de:	607a      	str	r2, [r7, #4]
 80155e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80155e2:	2300      	movs	r3, #0
 80155e4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80155e6:	7afb      	ldrb	r3, [r7, #11]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d16e      	bne.n	80156ca <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80155f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80155fa:	2b03      	cmp	r3, #3
 80155fc:	f040 8098 	bne.w	8015730 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015600:	693b      	ldr	r3, [r7, #16]
 8015602:	689a      	ldr	r2, [r3, #8]
 8015604:	693b      	ldr	r3, [r7, #16]
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	429a      	cmp	r2, r3
 801560a:	d913      	bls.n	8015634 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 801560c:	693b      	ldr	r3, [r7, #16]
 801560e:	689a      	ldr	r2, [r3, #8]
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	68db      	ldr	r3, [r3, #12]
 8015614:	1ad2      	subs	r2, r2, r3
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	68da      	ldr	r2, [r3, #12]
 801561e:	693b      	ldr	r3, [r7, #16]
 8015620:	689b      	ldr	r3, [r3, #8]
 8015622:	4293      	cmp	r3, r2
 8015624:	bf28      	it	cs
 8015626:	4613      	movcs	r3, r2
 8015628:	461a      	mov	r2, r3
 801562a:	6879      	ldr	r1, [r7, #4]
 801562c:	68f8      	ldr	r0, [r7, #12]
 801562e:	f001 f98a 	bl	8016946 <USBD_CtlContinueRx>
 8015632:	e07d      	b.n	8015730 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801563a:	f003 031f 	and.w	r3, r3, #31
 801563e:	2b02      	cmp	r3, #2
 8015640:	d014      	beq.n	801566c <USBD_LL_DataOutStage+0x98>
 8015642:	2b02      	cmp	r3, #2
 8015644:	d81d      	bhi.n	8015682 <USBD_LL_DataOutStage+0xae>
 8015646:	2b00      	cmp	r3, #0
 8015648:	d002      	beq.n	8015650 <USBD_LL_DataOutStage+0x7c>
 801564a:	2b01      	cmp	r3, #1
 801564c:	d003      	beq.n	8015656 <USBD_LL_DataOutStage+0x82>
 801564e:	e018      	b.n	8015682 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015650:	2300      	movs	r3, #0
 8015652:	75bb      	strb	r3, [r7, #22]
            break;
 8015654:	e018      	b.n	8015688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801565c:	b2db      	uxtb	r3, r3
 801565e:	4619      	mov	r1, r3
 8015660:	68f8      	ldr	r0, [r7, #12]
 8015662:	f000 fa64 	bl	8015b2e <USBD_CoreFindIF>
 8015666:	4603      	mov	r3, r0
 8015668:	75bb      	strb	r3, [r7, #22]
            break;
 801566a:	e00d      	b.n	8015688 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015672:	b2db      	uxtb	r3, r3
 8015674:	4619      	mov	r1, r3
 8015676:	68f8      	ldr	r0, [r7, #12]
 8015678:	f000 fa66 	bl	8015b48 <USBD_CoreFindEP>
 801567c:	4603      	mov	r3, r0
 801567e:	75bb      	strb	r3, [r7, #22]
            break;
 8015680:	e002      	b.n	8015688 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8015682:	2300      	movs	r3, #0
 8015684:	75bb      	strb	r3, [r7, #22]
            break;
 8015686:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015688:	7dbb      	ldrb	r3, [r7, #22]
 801568a:	2b00      	cmp	r3, #0
 801568c:	d119      	bne.n	80156c2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015694:	b2db      	uxtb	r3, r3
 8015696:	2b03      	cmp	r3, #3
 8015698:	d113      	bne.n	80156c2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801569a:	7dba      	ldrb	r2, [r7, #22]
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	32ae      	adds	r2, #174	; 0xae
 80156a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a4:	691b      	ldr	r3, [r3, #16]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d00b      	beq.n	80156c2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80156aa:	7dba      	ldrb	r2, [r7, #22]
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80156b2:	7dba      	ldrb	r2, [r7, #22]
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	32ae      	adds	r2, #174	; 0xae
 80156b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156bc:	691b      	ldr	r3, [r3, #16]
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80156c2:	68f8      	ldr	r0, [r7, #12]
 80156c4:	f001 f950 	bl	8016968 <USBD_CtlSendStatus>
 80156c8:	e032      	b.n	8015730 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80156ca:	7afb      	ldrb	r3, [r7, #11]
 80156cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80156d0:	b2db      	uxtb	r3, r3
 80156d2:	4619      	mov	r1, r3
 80156d4:	68f8      	ldr	r0, [r7, #12]
 80156d6:	f000 fa37 	bl	8015b48 <USBD_CoreFindEP>
 80156da:	4603      	mov	r3, r0
 80156dc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80156de:	7dbb      	ldrb	r3, [r7, #22]
 80156e0:	2bff      	cmp	r3, #255	; 0xff
 80156e2:	d025      	beq.n	8015730 <USBD_LL_DataOutStage+0x15c>
 80156e4:	7dbb      	ldrb	r3, [r7, #22]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d122      	bne.n	8015730 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f0:	b2db      	uxtb	r3, r3
 80156f2:	2b03      	cmp	r3, #3
 80156f4:	d117      	bne.n	8015726 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80156f6:	7dba      	ldrb	r2, [r7, #22]
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	32ae      	adds	r2, #174	; 0xae
 80156fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	2b00      	cmp	r3, #0
 8015704:	d00f      	beq.n	8015726 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015706:	7dba      	ldrb	r2, [r7, #22]
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801570e:	7dba      	ldrb	r2, [r7, #22]
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	32ae      	adds	r2, #174	; 0xae
 8015714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015718:	699b      	ldr	r3, [r3, #24]
 801571a:	7afa      	ldrb	r2, [r7, #11]
 801571c:	4611      	mov	r1, r2
 801571e:	68f8      	ldr	r0, [r7, #12]
 8015720:	4798      	blx	r3
 8015722:	4603      	mov	r3, r0
 8015724:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015726:	7dfb      	ldrb	r3, [r7, #23]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d001      	beq.n	8015730 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801572c:	7dfb      	ldrb	r3, [r7, #23]
 801572e:	e000      	b.n	8015732 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015730:	2300      	movs	r3, #0
}
 8015732:	4618      	mov	r0, r3
 8015734:	3718      	adds	r7, #24
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}

0801573a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801573a:	b580      	push	{r7, lr}
 801573c:	b086      	sub	sp, #24
 801573e:	af00      	add	r7, sp, #0
 8015740:	60f8      	str	r0, [r7, #12]
 8015742:	460b      	mov	r3, r1
 8015744:	607a      	str	r2, [r7, #4]
 8015746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015748:	7afb      	ldrb	r3, [r7, #11]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d16f      	bne.n	801582e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	3314      	adds	r3, #20
 8015752:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801575a:	2b02      	cmp	r3, #2
 801575c:	d15a      	bne.n	8015814 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801575e:	693b      	ldr	r3, [r7, #16]
 8015760:	689a      	ldr	r2, [r3, #8]
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	68db      	ldr	r3, [r3, #12]
 8015766:	429a      	cmp	r2, r3
 8015768:	d914      	bls.n	8015794 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	689a      	ldr	r2, [r3, #8]
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	68db      	ldr	r3, [r3, #12]
 8015772:	1ad2      	subs	r2, r2, r3
 8015774:	693b      	ldr	r3, [r7, #16]
 8015776:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	689b      	ldr	r3, [r3, #8]
 801577c:	461a      	mov	r2, r3
 801577e:	6879      	ldr	r1, [r7, #4]
 8015780:	68f8      	ldr	r0, [r7, #12]
 8015782:	f001 f8b2 	bl	80168ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015786:	2300      	movs	r3, #0
 8015788:	2200      	movs	r2, #0
 801578a:	2100      	movs	r1, #0
 801578c:	68f8      	ldr	r0, [r7, #12]
 801578e:	f001 fe1f 	bl	80173d0 <USBD_LL_PrepareReceive>
 8015792:	e03f      	b.n	8015814 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	68da      	ldr	r2, [r3, #12]
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	689b      	ldr	r3, [r3, #8]
 801579c:	429a      	cmp	r2, r3
 801579e:	d11c      	bne.n	80157da <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80157a0:	693b      	ldr	r3, [r7, #16]
 80157a2:	685a      	ldr	r2, [r3, #4]
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d316      	bcc.n	80157da <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80157ac:	693b      	ldr	r3, [r7, #16]
 80157ae:	685a      	ldr	r2, [r3, #4]
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80157b6:	429a      	cmp	r2, r3
 80157b8:	d20f      	bcs.n	80157da <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80157ba:	2200      	movs	r2, #0
 80157bc:	2100      	movs	r1, #0
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f001 f893 	bl	80168ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2200      	movs	r2, #0
 80157c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80157cc:	2300      	movs	r3, #0
 80157ce:	2200      	movs	r2, #0
 80157d0:	2100      	movs	r1, #0
 80157d2:	68f8      	ldr	r0, [r7, #12]
 80157d4:	f001 fdfc 	bl	80173d0 <USBD_LL_PrepareReceive>
 80157d8:	e01c      	b.n	8015814 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	2b03      	cmp	r3, #3
 80157e4:	d10f      	bne.n	8015806 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d009      	beq.n	8015806 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	2200      	movs	r2, #0
 80157f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015806:	2180      	movs	r1, #128	; 0x80
 8015808:	68f8      	ldr	r0, [r7, #12]
 801580a:	f001 fd37 	bl	801727c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801580e:	68f8      	ldr	r0, [r7, #12]
 8015810:	f001 f8bd 	bl	801698e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801581a:	2b00      	cmp	r3, #0
 801581c:	d03a      	beq.n	8015894 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801581e:	68f8      	ldr	r0, [r7, #12]
 8015820:	f7ff fe42 	bl	80154a8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	2200      	movs	r2, #0
 8015828:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801582c:	e032      	b.n	8015894 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801582e:	7afb      	ldrb	r3, [r7, #11]
 8015830:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015834:	b2db      	uxtb	r3, r3
 8015836:	4619      	mov	r1, r3
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f000 f985 	bl	8015b48 <USBD_CoreFindEP>
 801583e:	4603      	mov	r3, r0
 8015840:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015842:	7dfb      	ldrb	r3, [r7, #23]
 8015844:	2bff      	cmp	r3, #255	; 0xff
 8015846:	d025      	beq.n	8015894 <USBD_LL_DataInStage+0x15a>
 8015848:	7dfb      	ldrb	r3, [r7, #23]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d122      	bne.n	8015894 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015854:	b2db      	uxtb	r3, r3
 8015856:	2b03      	cmp	r3, #3
 8015858:	d11c      	bne.n	8015894 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801585a:	7dfa      	ldrb	r2, [r7, #23]
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	32ae      	adds	r2, #174	; 0xae
 8015860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015864:	695b      	ldr	r3, [r3, #20]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d014      	beq.n	8015894 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801586a:	7dfa      	ldrb	r2, [r7, #23]
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015872:	7dfa      	ldrb	r2, [r7, #23]
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	32ae      	adds	r2, #174	; 0xae
 8015878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801587c:	695b      	ldr	r3, [r3, #20]
 801587e:	7afa      	ldrb	r2, [r7, #11]
 8015880:	4611      	mov	r1, r2
 8015882:	68f8      	ldr	r0, [r7, #12]
 8015884:	4798      	blx	r3
 8015886:	4603      	mov	r3, r0
 8015888:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801588a:	7dbb      	ldrb	r3, [r7, #22]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d001      	beq.n	8015894 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015890:	7dbb      	ldrb	r3, [r7, #22]
 8015892:	e000      	b.n	8015896 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015894:	2300      	movs	r3, #0
}
 8015896:	4618      	mov	r0, r3
 8015898:	3718      	adds	r7, #24
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}

0801589e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801589e:	b580      	push	{r7, lr}
 80158a0:	b084      	sub	sp, #16
 80158a2:	af00      	add	r7, sp, #0
 80158a4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80158a6:	2300      	movs	r3, #0
 80158a8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2201      	movs	r2, #1
 80158ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2200      	movs	r2, #0
 80158b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	2200      	movs	r2, #0
 80158be:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2200      	movs	r2, #0
 80158cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d014      	beq.n	8015904 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158e0:	685b      	ldr	r3, [r3, #4]
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d00e      	beq.n	8015904 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	6852      	ldr	r2, [r2, #4]
 80158f2:	b2d2      	uxtb	r2, r2
 80158f4:	4611      	mov	r1, r2
 80158f6:	6878      	ldr	r0, [r7, #4]
 80158f8:	4798      	blx	r3
 80158fa:	4603      	mov	r3, r0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d001      	beq.n	8015904 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015900:	2303      	movs	r3, #3
 8015902:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015904:	2340      	movs	r3, #64	; 0x40
 8015906:	2200      	movs	r2, #0
 8015908:	2100      	movs	r1, #0
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f001 fc71 	bl	80171f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	2201      	movs	r2, #1
 8015914:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	2240      	movs	r2, #64	; 0x40
 801591c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015920:	2340      	movs	r3, #64	; 0x40
 8015922:	2200      	movs	r2, #0
 8015924:	2180      	movs	r1, #128	; 0x80
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f001 fc63 	bl	80171f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	2201      	movs	r2, #1
 8015930:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2240      	movs	r2, #64	; 0x40
 8015936:	621a      	str	r2, [r3, #32]

  return ret;
 8015938:	7bfb      	ldrb	r3, [r7, #15]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3710      	adds	r7, #16
 801593e:	46bd      	mov	sp, r7
 8015940:	bd80      	pop	{r7, pc}

08015942 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015942:	b480      	push	{r7}
 8015944:	b083      	sub	sp, #12
 8015946:	af00      	add	r7, sp, #0
 8015948:	6078      	str	r0, [r7, #4]
 801594a:	460b      	mov	r3, r1
 801594c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	78fa      	ldrb	r2, [r7, #3]
 8015952:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015954:	2300      	movs	r3, #0
}
 8015956:	4618      	mov	r0, r3
 8015958:	370c      	adds	r7, #12
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr

08015962 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015962:	b480      	push	{r7}
 8015964:	b083      	sub	sp, #12
 8015966:	af00      	add	r7, sp, #0
 8015968:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015970:	b2db      	uxtb	r3, r3
 8015972:	2b04      	cmp	r3, #4
 8015974:	d006      	beq.n	8015984 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801597c:	b2da      	uxtb	r2, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2204      	movs	r2, #4
 8015988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801598c:	2300      	movs	r3, #0
}
 801598e:	4618      	mov	r0, r3
 8015990:	370c      	adds	r7, #12
 8015992:	46bd      	mov	sp, r7
 8015994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015998:	4770      	bx	lr

0801599a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801599a:	b480      	push	{r7}
 801599c:	b083      	sub	sp, #12
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159a8:	b2db      	uxtb	r3, r3
 80159aa:	2b04      	cmp	r3, #4
 80159ac:	d106      	bne.n	80159bc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80159b4:	b2da      	uxtb	r2, r3
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80159bc:	2300      	movs	r3, #0
}
 80159be:	4618      	mov	r0, r3
 80159c0:	370c      	adds	r7, #12
 80159c2:	46bd      	mov	sp, r7
 80159c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c8:	4770      	bx	lr

080159ca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80159ca:	b580      	push	{r7, lr}
 80159cc:	b082      	sub	sp, #8
 80159ce:	af00      	add	r7, sp, #0
 80159d0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159d8:	b2db      	uxtb	r3, r3
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d110      	bne.n	8015a00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80159de:	687b      	ldr	r3, [r7, #4]
 80159e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d00b      	beq.n	8015a00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159ee:	69db      	ldr	r3, [r3, #28]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d005      	beq.n	8015a00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159fa:	69db      	ldr	r3, [r3, #28]
 80159fc:	6878      	ldr	r0, [r7, #4]
 80159fe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3708      	adds	r7, #8
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}

08015a0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015a0a:	b580      	push	{r7, lr}
 8015a0c:	b082      	sub	sp, #8
 8015a0e:	af00      	add	r7, sp, #0
 8015a10:	6078      	str	r0, [r7, #4]
 8015a12:	460b      	mov	r3, r1
 8015a14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	32ae      	adds	r2, #174	; 0xae
 8015a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d101      	bne.n	8015a2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015a28:	2303      	movs	r3, #3
 8015a2a:	e01c      	b.n	8015a66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	2b03      	cmp	r3, #3
 8015a36:	d115      	bne.n	8015a64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	32ae      	adds	r2, #174	; 0xae
 8015a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a46:	6a1b      	ldr	r3, [r3, #32]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d00b      	beq.n	8015a64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	32ae      	adds	r2, #174	; 0xae
 8015a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a5a:	6a1b      	ldr	r3, [r3, #32]
 8015a5c:	78fa      	ldrb	r2, [r7, #3]
 8015a5e:	4611      	mov	r1, r2
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015a64:	2300      	movs	r3, #0
}
 8015a66:	4618      	mov	r0, r3
 8015a68:	3708      	adds	r7, #8
 8015a6a:	46bd      	mov	sp, r7
 8015a6c:	bd80      	pop	{r7, pc}

08015a6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b082      	sub	sp, #8
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	6078      	str	r0, [r7, #4]
 8015a76:	460b      	mov	r3, r1
 8015a78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	32ae      	adds	r2, #174	; 0xae
 8015a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015a8c:	2303      	movs	r3, #3
 8015a8e:	e01c      	b.n	8015aca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	2b03      	cmp	r3, #3
 8015a9a:	d115      	bne.n	8015ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	32ae      	adds	r2, #174	; 0xae
 8015aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d00b      	beq.n	8015ac8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	32ae      	adds	r2, #174	; 0xae
 8015aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac0:	78fa      	ldrb	r2, [r7, #3]
 8015ac2:	4611      	mov	r1, r2
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015ac8:	2300      	movs	r3, #0
}
 8015aca:	4618      	mov	r0, r3
 8015acc:	3708      	adds	r7, #8
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}

08015ad2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015ad2:	b480      	push	{r7}
 8015ad4:	b083      	sub	sp, #12
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ada:	2300      	movs	r3, #0
}
 8015adc:	4618      	mov	r0, r3
 8015ade:	370c      	adds	r7, #12
 8015ae0:	46bd      	mov	sp, r7
 8015ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae6:	4770      	bx	lr

08015ae8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b084      	sub	sp, #16
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015af0:	2300      	movs	r3, #0
 8015af2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	2201      	movs	r2, #1
 8015af8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d00e      	beq.n	8015b24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b0c:	685b      	ldr	r3, [r3, #4]
 8015b0e:	687a      	ldr	r2, [r7, #4]
 8015b10:	6852      	ldr	r2, [r2, #4]
 8015b12:	b2d2      	uxtb	r2, r2
 8015b14:	4611      	mov	r1, r2
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	4798      	blx	r3
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d001      	beq.n	8015b24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015b20:	2303      	movs	r3, #3
 8015b22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3710      	adds	r7, #16
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}

08015b2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015b2e:	b480      	push	{r7}
 8015b30:	b083      	sub	sp, #12
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	6078      	str	r0, [r7, #4]
 8015b36:	460b      	mov	r3, r1
 8015b38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015b3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	370c      	adds	r7, #12
 8015b40:	46bd      	mov	sp, r7
 8015b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b46:	4770      	bx	lr

08015b48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b083      	sub	sp, #12
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	460b      	mov	r3, r1
 8015b52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015b54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015b56:	4618      	mov	r0, r3
 8015b58:	370c      	adds	r7, #12
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b60:	4770      	bx	lr

08015b62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b086      	sub	sp, #24
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
 8015b6a:	460b      	mov	r3, r1
 8015b6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015b76:	2300      	movs	r3, #0
 8015b78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	885b      	ldrh	r3, [r3, #2]
 8015b7e:	b29a      	uxth	r2, r3
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	b29b      	uxth	r3, r3
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d920      	bls.n	8015bcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	b29b      	uxth	r3, r3
 8015b90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015b92:	e013      	b.n	8015bbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015b94:	f107 030a 	add.w	r3, r7, #10
 8015b98:	4619      	mov	r1, r3
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f000 f81b 	bl	8015bd6 <USBD_GetNextDesc>
 8015ba0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015ba2:	697b      	ldr	r3, [r7, #20]
 8015ba4:	785b      	ldrb	r3, [r3, #1]
 8015ba6:	2b05      	cmp	r3, #5
 8015ba8:	d108      	bne.n	8015bbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	789b      	ldrb	r3, [r3, #2]
 8015bb2:	78fa      	ldrb	r2, [r7, #3]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d008      	beq.n	8015bca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	885b      	ldrh	r3, [r3, #2]
 8015bc0:	b29a      	uxth	r2, r3
 8015bc2:	897b      	ldrh	r3, [r7, #10]
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d8e5      	bhi.n	8015b94 <USBD_GetEpDesc+0x32>
 8015bc8:	e000      	b.n	8015bcc <USBD_GetEpDesc+0x6a>
          break;
 8015bca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015bcc:	693b      	ldr	r3, [r7, #16]
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	3718      	adds	r7, #24
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bd80      	pop	{r7, pc}

08015bd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015bd6:	b480      	push	{r7}
 8015bd8:	b085      	sub	sp, #20
 8015bda:	af00      	add	r7, sp, #0
 8015bdc:	6078      	str	r0, [r7, #4]
 8015bde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	881a      	ldrh	r2, [r3, #0]
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	b29b      	uxth	r3, r3
 8015bee:	4413      	add	r3, r2
 8015bf0:	b29a      	uxth	r2, r3
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	4413      	add	r3, r2
 8015c00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015c02:	68fb      	ldr	r3, [r7, #12]
}
 8015c04:	4618      	mov	r0, r3
 8015c06:	3714      	adds	r7, #20
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c0e:	4770      	bx	lr

08015c10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015c10:	b480      	push	{r7}
 8015c12:	b087      	sub	sp, #28
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	3301      	adds	r3, #1
 8015c26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	781b      	ldrb	r3, [r3, #0]
 8015c2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015c2e:	8a3b      	ldrh	r3, [r7, #16]
 8015c30:	021b      	lsls	r3, r3, #8
 8015c32:	b21a      	sxth	r2, r3
 8015c34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c38:	4313      	orrs	r3, r2
 8015c3a:	b21b      	sxth	r3, r3
 8015c3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	371c      	adds	r7, #28
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015c56:	2300      	movs	r3, #0
 8015c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015c5a:	683b      	ldr	r3, [r7, #0]
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015c62:	2b40      	cmp	r3, #64	; 0x40
 8015c64:	d005      	beq.n	8015c72 <USBD_StdDevReq+0x26>
 8015c66:	2b40      	cmp	r3, #64	; 0x40
 8015c68:	d857      	bhi.n	8015d1a <USBD_StdDevReq+0xce>
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d00f      	beq.n	8015c8e <USBD_StdDevReq+0x42>
 8015c6e:	2b20      	cmp	r3, #32
 8015c70:	d153      	bne.n	8015d1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	32ae      	adds	r2, #174	; 0xae
 8015c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c80:	689b      	ldr	r3, [r3, #8]
 8015c82:	6839      	ldr	r1, [r7, #0]
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	4798      	blx	r3
 8015c88:	4603      	mov	r3, r0
 8015c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8015c8c:	e04a      	b.n	8015d24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	785b      	ldrb	r3, [r3, #1]
 8015c92:	2b09      	cmp	r3, #9
 8015c94:	d83b      	bhi.n	8015d0e <USBD_StdDevReq+0xc2>
 8015c96:	a201      	add	r2, pc, #4	; (adr r2, 8015c9c <USBD_StdDevReq+0x50>)
 8015c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c9c:	08015cf1 	.word	0x08015cf1
 8015ca0:	08015d05 	.word	0x08015d05
 8015ca4:	08015d0f 	.word	0x08015d0f
 8015ca8:	08015cfb 	.word	0x08015cfb
 8015cac:	08015d0f 	.word	0x08015d0f
 8015cb0:	08015ccf 	.word	0x08015ccf
 8015cb4:	08015cc5 	.word	0x08015cc5
 8015cb8:	08015d0f 	.word	0x08015d0f
 8015cbc:	08015ce7 	.word	0x08015ce7
 8015cc0:	08015cd9 	.word	0x08015cd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fa3c 	bl	8016144 <USBD_GetDescriptor>
          break;
 8015ccc:	e024      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015cce:	6839      	ldr	r1, [r7, #0]
 8015cd0:	6878      	ldr	r0, [r7, #4]
 8015cd2:	f000 fba1 	bl	8016418 <USBD_SetAddress>
          break;
 8015cd6:	e01f      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6878      	ldr	r0, [r7, #4]
 8015cdc:	f000 fbe0 	bl	80164a0 <USBD_SetConfig>
 8015ce0:	4603      	mov	r3, r0
 8015ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8015ce4:	e018      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015ce6:	6839      	ldr	r1, [r7, #0]
 8015ce8:	6878      	ldr	r0, [r7, #4]
 8015cea:	f000 fc83 	bl	80165f4 <USBD_GetConfig>
          break;
 8015cee:	e013      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015cf0:	6839      	ldr	r1, [r7, #0]
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f000 fcb4 	bl	8016660 <USBD_GetStatus>
          break;
 8015cf8:	e00e      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f000 fce3 	bl	80166c8 <USBD_SetFeature>
          break;
 8015d02:	e009      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015d04:	6839      	ldr	r1, [r7, #0]
 8015d06:	6878      	ldr	r0, [r7, #4]
 8015d08:	f000 fd07 	bl	801671a <USBD_ClrFeature>
          break;
 8015d0c:	e004      	b.n	8015d18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015d0e:	6839      	ldr	r1, [r7, #0]
 8015d10:	6878      	ldr	r0, [r7, #4]
 8015d12:	f000 fd5e 	bl	80167d2 <USBD_CtlError>
          break;
 8015d16:	bf00      	nop
      }
      break;
 8015d18:	e004      	b.n	8015d24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015d1a:	6839      	ldr	r1, [r7, #0]
 8015d1c:	6878      	ldr	r0, [r7, #4]
 8015d1e:	f000 fd58 	bl	80167d2 <USBD_CtlError>
      break;
 8015d22:	bf00      	nop
  }

  return ret;
 8015d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3710      	adds	r7, #16
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop

08015d30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b084      	sub	sp, #16
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015d46:	2b40      	cmp	r3, #64	; 0x40
 8015d48:	d005      	beq.n	8015d56 <USBD_StdItfReq+0x26>
 8015d4a:	2b40      	cmp	r3, #64	; 0x40
 8015d4c:	d852      	bhi.n	8015df4 <USBD_StdItfReq+0xc4>
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d001      	beq.n	8015d56 <USBD_StdItfReq+0x26>
 8015d52:	2b20      	cmp	r3, #32
 8015d54:	d14e      	bne.n	8015df4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d5c:	b2db      	uxtb	r3, r3
 8015d5e:	3b01      	subs	r3, #1
 8015d60:	2b02      	cmp	r3, #2
 8015d62:	d840      	bhi.n	8015de6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015d64:	683b      	ldr	r3, [r7, #0]
 8015d66:	889b      	ldrh	r3, [r3, #4]
 8015d68:	b2db      	uxtb	r3, r3
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	d836      	bhi.n	8015ddc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015d6e:	683b      	ldr	r3, [r7, #0]
 8015d70:	889b      	ldrh	r3, [r3, #4]
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	4619      	mov	r1, r3
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7ff fed9 	bl	8015b2e <USBD_CoreFindIF>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015d80:	7bbb      	ldrb	r3, [r7, #14]
 8015d82:	2bff      	cmp	r3, #255	; 0xff
 8015d84:	d01d      	beq.n	8015dc2 <USBD_StdItfReq+0x92>
 8015d86:	7bbb      	ldrb	r3, [r7, #14]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d11a      	bne.n	8015dc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015d8c:	7bba      	ldrb	r2, [r7, #14]
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	32ae      	adds	r2, #174	; 0xae
 8015d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d96:	689b      	ldr	r3, [r3, #8]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d00f      	beq.n	8015dbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015d9c:	7bba      	ldrb	r2, [r7, #14]
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015da4:	7bba      	ldrb	r2, [r7, #14]
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	32ae      	adds	r2, #174	; 0xae
 8015daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015dae:	689b      	ldr	r3, [r3, #8]
 8015db0:	6839      	ldr	r1, [r7, #0]
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	4798      	blx	r3
 8015db6:	4603      	mov	r3, r0
 8015db8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015dba:	e004      	b.n	8015dc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015dbc:	2303      	movs	r3, #3
 8015dbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015dc0:	e001      	b.n	8015dc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015dc2:	2303      	movs	r3, #3
 8015dc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	88db      	ldrh	r3, [r3, #6]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d110      	bne.n	8015df0 <USBD_StdItfReq+0xc0>
 8015dce:	7bfb      	ldrb	r3, [r7, #15]
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10d      	bne.n	8015df0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f000 fdc7 	bl	8016968 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015dda:	e009      	b.n	8015df0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f000 fcf7 	bl	80167d2 <USBD_CtlError>
          break;
 8015de4:	e004      	b.n	8015df0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015de6:	6839      	ldr	r1, [r7, #0]
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f000 fcf2 	bl	80167d2 <USBD_CtlError>
          break;
 8015dee:	e000      	b.n	8015df2 <USBD_StdItfReq+0xc2>
          break;
 8015df0:	bf00      	nop
      }
      break;
 8015df2:	e004      	b.n	8015dfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015df4:	6839      	ldr	r1, [r7, #0]
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f000 fceb 	bl	80167d2 <USBD_CtlError>
      break;
 8015dfc:	bf00      	nop
  }

  return ret;
 8015dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e00:	4618      	mov	r0, r3
 8015e02:	3710      	adds	r7, #16
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b084      	sub	sp, #16
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
 8015e10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015e12:	2300      	movs	r3, #0
 8015e14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	889b      	ldrh	r3, [r3, #4]
 8015e1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e1c:	683b      	ldr	r3, [r7, #0]
 8015e1e:	781b      	ldrb	r3, [r3, #0]
 8015e20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e24:	2b40      	cmp	r3, #64	; 0x40
 8015e26:	d007      	beq.n	8015e38 <USBD_StdEPReq+0x30>
 8015e28:	2b40      	cmp	r3, #64	; 0x40
 8015e2a:	f200 817f 	bhi.w	801612c <USBD_StdEPReq+0x324>
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d02a      	beq.n	8015e88 <USBD_StdEPReq+0x80>
 8015e32:	2b20      	cmp	r3, #32
 8015e34:	f040 817a 	bne.w	801612c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015e38:	7bbb      	ldrb	r3, [r7, #14]
 8015e3a:	4619      	mov	r1, r3
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	f7ff fe83 	bl	8015b48 <USBD_CoreFindEP>
 8015e42:	4603      	mov	r3, r0
 8015e44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015e46:	7b7b      	ldrb	r3, [r7, #13]
 8015e48:	2bff      	cmp	r3, #255	; 0xff
 8015e4a:	f000 8174 	beq.w	8016136 <USBD_StdEPReq+0x32e>
 8015e4e:	7b7b      	ldrb	r3, [r7, #13]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	f040 8170 	bne.w	8016136 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8015e56:	7b7a      	ldrb	r2, [r7, #13]
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015e5e:	7b7a      	ldrb	r2, [r7, #13]
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	32ae      	adds	r2, #174	; 0xae
 8015e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e68:	689b      	ldr	r3, [r3, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	f000 8163 	beq.w	8016136 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015e70:	7b7a      	ldrb	r2, [r7, #13]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	32ae      	adds	r2, #174	; 0xae
 8015e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e7a:	689b      	ldr	r3, [r3, #8]
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	4798      	blx	r3
 8015e82:	4603      	mov	r3, r0
 8015e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015e86:	e156      	b.n	8016136 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e88:	683b      	ldr	r3, [r7, #0]
 8015e8a:	785b      	ldrb	r3, [r3, #1]
 8015e8c:	2b03      	cmp	r3, #3
 8015e8e:	d008      	beq.n	8015ea2 <USBD_StdEPReq+0x9a>
 8015e90:	2b03      	cmp	r3, #3
 8015e92:	f300 8145 	bgt.w	8016120 <USBD_StdEPReq+0x318>
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	f000 809b 	beq.w	8015fd2 <USBD_StdEPReq+0x1ca>
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d03c      	beq.n	8015f1a <USBD_StdEPReq+0x112>
 8015ea0:	e13e      	b.n	8016120 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	2b02      	cmp	r3, #2
 8015eac:	d002      	beq.n	8015eb4 <USBD_StdEPReq+0xac>
 8015eae:	2b03      	cmp	r3, #3
 8015eb0:	d016      	beq.n	8015ee0 <USBD_StdEPReq+0xd8>
 8015eb2:	e02c      	b.n	8015f0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015eb4:	7bbb      	ldrb	r3, [r7, #14]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d00d      	beq.n	8015ed6 <USBD_StdEPReq+0xce>
 8015eba:	7bbb      	ldrb	r3, [r7, #14]
 8015ebc:	2b80      	cmp	r3, #128	; 0x80
 8015ebe:	d00a      	beq.n	8015ed6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ec0:	7bbb      	ldrb	r3, [r7, #14]
 8015ec2:	4619      	mov	r1, r3
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f001 f9d9 	bl	801727c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015eca:	2180      	movs	r1, #128	; 0x80
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	f001 f9d5 	bl	801727c <USBD_LL_StallEP>
 8015ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ed4:	e020      	b.n	8015f18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015ed6:	6839      	ldr	r1, [r7, #0]
 8015ed8:	6878      	ldr	r0, [r7, #4]
 8015eda:	f000 fc7a 	bl	80167d2 <USBD_CtlError>
              break;
 8015ede:	e01b      	b.n	8015f18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015ee0:	683b      	ldr	r3, [r7, #0]
 8015ee2:	885b      	ldrh	r3, [r3, #2]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d10e      	bne.n	8015f06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015ee8:	7bbb      	ldrb	r3, [r7, #14]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d00b      	beq.n	8015f06 <USBD_StdEPReq+0xfe>
 8015eee:	7bbb      	ldrb	r3, [r7, #14]
 8015ef0:	2b80      	cmp	r3, #128	; 0x80
 8015ef2:	d008      	beq.n	8015f06 <USBD_StdEPReq+0xfe>
 8015ef4:	683b      	ldr	r3, [r7, #0]
 8015ef6:	88db      	ldrh	r3, [r3, #6]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d104      	bne.n	8015f06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015efc:	7bbb      	ldrb	r3, [r7, #14]
 8015efe:	4619      	mov	r1, r3
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f001 f9bb 	bl	801727c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f000 fd2e 	bl	8016968 <USBD_CtlSendStatus>

              break;
 8015f0c:	e004      	b.n	8015f18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f000 fc5e 	bl	80167d2 <USBD_CtlError>
              break;
 8015f16:	bf00      	nop
          }
          break;
 8015f18:	e107      	b.n	801612a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f20:	b2db      	uxtb	r3, r3
 8015f22:	2b02      	cmp	r3, #2
 8015f24:	d002      	beq.n	8015f2c <USBD_StdEPReq+0x124>
 8015f26:	2b03      	cmp	r3, #3
 8015f28:	d016      	beq.n	8015f58 <USBD_StdEPReq+0x150>
 8015f2a:	e04b      	b.n	8015fc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015f2c:	7bbb      	ldrb	r3, [r7, #14]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d00d      	beq.n	8015f4e <USBD_StdEPReq+0x146>
 8015f32:	7bbb      	ldrb	r3, [r7, #14]
 8015f34:	2b80      	cmp	r3, #128	; 0x80
 8015f36:	d00a      	beq.n	8015f4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015f38:	7bbb      	ldrb	r3, [r7, #14]
 8015f3a:	4619      	mov	r1, r3
 8015f3c:	6878      	ldr	r0, [r7, #4]
 8015f3e:	f001 f99d 	bl	801727c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015f42:	2180      	movs	r1, #128	; 0x80
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f001 f999 	bl	801727c <USBD_LL_StallEP>
 8015f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015f4c:	e040      	b.n	8015fd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015f4e:	6839      	ldr	r1, [r7, #0]
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 fc3e 	bl	80167d2 <USBD_CtlError>
              break;
 8015f56:	e03b      	b.n	8015fd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015f58:	683b      	ldr	r3, [r7, #0]
 8015f5a:	885b      	ldrh	r3, [r3, #2]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d136      	bne.n	8015fce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015f60:	7bbb      	ldrb	r3, [r7, #14]
 8015f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d004      	beq.n	8015f74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015f6a:	7bbb      	ldrb	r3, [r7, #14]
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	6878      	ldr	r0, [r7, #4]
 8015f70:	f001 f9a3 	bl	80172ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f000 fcf7 	bl	8016968 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015f7a:	7bbb      	ldrb	r3, [r7, #14]
 8015f7c:	4619      	mov	r1, r3
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f7ff fde2 	bl	8015b48 <USBD_CoreFindEP>
 8015f84:	4603      	mov	r3, r0
 8015f86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f88:	7b7b      	ldrb	r3, [r7, #13]
 8015f8a:	2bff      	cmp	r3, #255	; 0xff
 8015f8c:	d01f      	beq.n	8015fce <USBD_StdEPReq+0x1c6>
 8015f8e:	7b7b      	ldrb	r3, [r7, #13]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d11c      	bne.n	8015fce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015f94:	7b7a      	ldrb	r2, [r7, #13]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015f9c:	7b7a      	ldrb	r2, [r7, #13]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	32ae      	adds	r2, #174	; 0xae
 8015fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fa6:	689b      	ldr	r3, [r3, #8]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d010      	beq.n	8015fce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015fac:	7b7a      	ldrb	r2, [r7, #13]
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	32ae      	adds	r2, #174	; 0xae
 8015fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fb6:	689b      	ldr	r3, [r3, #8]
 8015fb8:	6839      	ldr	r1, [r7, #0]
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	4798      	blx	r3
 8015fbe:	4603      	mov	r3, r0
 8015fc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015fc2:	e004      	b.n	8015fce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 fc03 	bl	80167d2 <USBD_CtlError>
              break;
 8015fcc:	e000      	b.n	8015fd0 <USBD_StdEPReq+0x1c8>
              break;
 8015fce:	bf00      	nop
          }
          break;
 8015fd0:	e0ab      	b.n	801612a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b02      	cmp	r3, #2
 8015fdc:	d002      	beq.n	8015fe4 <USBD_StdEPReq+0x1dc>
 8015fde:	2b03      	cmp	r3, #3
 8015fe0:	d032      	beq.n	8016048 <USBD_StdEPReq+0x240>
 8015fe2:	e097      	b.n	8016114 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015fe4:	7bbb      	ldrb	r3, [r7, #14]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d007      	beq.n	8015ffa <USBD_StdEPReq+0x1f2>
 8015fea:	7bbb      	ldrb	r3, [r7, #14]
 8015fec:	2b80      	cmp	r3, #128	; 0x80
 8015fee:	d004      	beq.n	8015ffa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015ff0:	6839      	ldr	r1, [r7, #0]
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 fbed 	bl	80167d2 <USBD_CtlError>
                break;
 8015ff8:	e091      	b.n	801611e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	da0b      	bge.n	801601a <USBD_StdEPReq+0x212>
 8016002:	7bbb      	ldrb	r3, [r7, #14]
 8016004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016008:	4613      	mov	r3, r2
 801600a:	009b      	lsls	r3, r3, #2
 801600c:	4413      	add	r3, r2
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	3310      	adds	r3, #16
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	4413      	add	r3, r2
 8016016:	3304      	adds	r3, #4
 8016018:	e00b      	b.n	8016032 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801601a:	7bbb      	ldrb	r3, [r7, #14]
 801601c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016020:	4613      	mov	r3, r2
 8016022:	009b      	lsls	r3, r3, #2
 8016024:	4413      	add	r3, r2
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801602c:	687a      	ldr	r2, [r7, #4]
 801602e:	4413      	add	r3, r2
 8016030:	3304      	adds	r3, #4
 8016032:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	2200      	movs	r2, #0
 8016038:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	2202      	movs	r2, #2
 801603e:	4619      	mov	r1, r3
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f000 fc37 	bl	80168b4 <USBD_CtlSendData>
              break;
 8016046:	e06a      	b.n	801611e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801604c:	2b00      	cmp	r3, #0
 801604e:	da11      	bge.n	8016074 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016050:	7bbb      	ldrb	r3, [r7, #14]
 8016052:	f003 020f 	and.w	r2, r3, #15
 8016056:	6879      	ldr	r1, [r7, #4]
 8016058:	4613      	mov	r3, r2
 801605a:	009b      	lsls	r3, r3, #2
 801605c:	4413      	add	r3, r2
 801605e:	009b      	lsls	r3, r3, #2
 8016060:	440b      	add	r3, r1
 8016062:	3324      	adds	r3, #36	; 0x24
 8016064:	881b      	ldrh	r3, [r3, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d117      	bne.n	801609a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801606a:	6839      	ldr	r1, [r7, #0]
 801606c:	6878      	ldr	r0, [r7, #4]
 801606e:	f000 fbb0 	bl	80167d2 <USBD_CtlError>
                  break;
 8016072:	e054      	b.n	801611e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016074:	7bbb      	ldrb	r3, [r7, #14]
 8016076:	f003 020f 	and.w	r2, r3, #15
 801607a:	6879      	ldr	r1, [r7, #4]
 801607c:	4613      	mov	r3, r2
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	4413      	add	r3, r2
 8016082:	009b      	lsls	r3, r3, #2
 8016084:	440b      	add	r3, r1
 8016086:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801608a:	881b      	ldrh	r3, [r3, #0]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d104      	bne.n	801609a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016090:	6839      	ldr	r1, [r7, #0]
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f000 fb9d 	bl	80167d2 <USBD_CtlError>
                  break;
 8016098:	e041      	b.n	801611e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801609a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	da0b      	bge.n	80160ba <USBD_StdEPReq+0x2b2>
 80160a2:	7bbb      	ldrb	r3, [r7, #14]
 80160a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80160a8:	4613      	mov	r3, r2
 80160aa:	009b      	lsls	r3, r3, #2
 80160ac:	4413      	add	r3, r2
 80160ae:	009b      	lsls	r3, r3, #2
 80160b0:	3310      	adds	r3, #16
 80160b2:	687a      	ldr	r2, [r7, #4]
 80160b4:	4413      	add	r3, r2
 80160b6:	3304      	adds	r3, #4
 80160b8:	e00b      	b.n	80160d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80160ba:	7bbb      	ldrb	r3, [r7, #14]
 80160bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80160c0:	4613      	mov	r3, r2
 80160c2:	009b      	lsls	r3, r3, #2
 80160c4:	4413      	add	r3, r2
 80160c6:	009b      	lsls	r3, r3, #2
 80160c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80160cc:	687a      	ldr	r2, [r7, #4]
 80160ce:	4413      	add	r3, r2
 80160d0:	3304      	adds	r3, #4
 80160d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80160d4:	7bbb      	ldrb	r3, [r7, #14]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d002      	beq.n	80160e0 <USBD_StdEPReq+0x2d8>
 80160da:	7bbb      	ldrb	r3, [r7, #14]
 80160dc:	2b80      	cmp	r3, #128	; 0x80
 80160de:	d103      	bne.n	80160e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	2200      	movs	r2, #0
 80160e4:	601a      	str	r2, [r3, #0]
 80160e6:	e00e      	b.n	8016106 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80160e8:	7bbb      	ldrb	r3, [r7, #14]
 80160ea:	4619      	mov	r1, r3
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f001 f903 	bl	80172f8 <USBD_LL_IsStallEP>
 80160f2:	4603      	mov	r3, r0
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d003      	beq.n	8016100 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	2201      	movs	r2, #1
 80160fc:	601a      	str	r2, [r3, #0]
 80160fe:	e002      	b.n	8016106 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	2200      	movs	r2, #0
 8016104:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	2202      	movs	r2, #2
 801610a:	4619      	mov	r1, r3
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 fbd1 	bl	80168b4 <USBD_CtlSendData>
              break;
 8016112:	e004      	b.n	801611e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016114:	6839      	ldr	r1, [r7, #0]
 8016116:	6878      	ldr	r0, [r7, #4]
 8016118:	f000 fb5b 	bl	80167d2 <USBD_CtlError>
              break;
 801611c:	bf00      	nop
          }
          break;
 801611e:	e004      	b.n	801612a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016120:	6839      	ldr	r1, [r7, #0]
 8016122:	6878      	ldr	r0, [r7, #4]
 8016124:	f000 fb55 	bl	80167d2 <USBD_CtlError>
          break;
 8016128:	bf00      	nop
      }
      break;
 801612a:	e005      	b.n	8016138 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801612c:	6839      	ldr	r1, [r7, #0]
 801612e:	6878      	ldr	r0, [r7, #4]
 8016130:	f000 fb4f 	bl	80167d2 <USBD_CtlError>
      break;
 8016134:	e000      	b.n	8016138 <USBD_StdEPReq+0x330>
      break;
 8016136:	bf00      	nop
  }

  return ret;
 8016138:	7bfb      	ldrb	r3, [r7, #15]
}
 801613a:	4618      	mov	r0, r3
 801613c:	3710      	adds	r7, #16
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
	...

08016144 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016144:	b580      	push	{r7, lr}
 8016146:	b084      	sub	sp, #16
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
 801614c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801614e:	2300      	movs	r3, #0
 8016150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016152:	2300      	movs	r3, #0
 8016154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016156:	2300      	movs	r3, #0
 8016158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	885b      	ldrh	r3, [r3, #2]
 801615e:	0a1b      	lsrs	r3, r3, #8
 8016160:	b29b      	uxth	r3, r3
 8016162:	3b01      	subs	r3, #1
 8016164:	2b06      	cmp	r3, #6
 8016166:	f200 8128 	bhi.w	80163ba <USBD_GetDescriptor+0x276>
 801616a:	a201      	add	r2, pc, #4	; (adr r2, 8016170 <USBD_GetDescriptor+0x2c>)
 801616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016170:	0801618d 	.word	0x0801618d
 8016174:	080161a5 	.word	0x080161a5
 8016178:	080161e5 	.word	0x080161e5
 801617c:	080163bb 	.word	0x080163bb
 8016180:	080163bb 	.word	0x080163bb
 8016184:	0801635b 	.word	0x0801635b
 8016188:	08016387 	.word	0x08016387
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	7c12      	ldrb	r2, [r2, #16]
 8016198:	f107 0108 	add.w	r1, r7, #8
 801619c:	4610      	mov	r0, r2
 801619e:	4798      	blx	r3
 80161a0:	60f8      	str	r0, [r7, #12]
      break;
 80161a2:	e112      	b.n	80163ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	7c1b      	ldrb	r3, [r3, #16]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d10d      	bne.n	80161c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161b4:	f107 0208 	add.w	r2, r7, #8
 80161b8:	4610      	mov	r0, r2
 80161ba:	4798      	blx	r3
 80161bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3301      	adds	r3, #1
 80161c2:	2202      	movs	r2, #2
 80161c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80161c6:	e100      	b.n	80163ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161d0:	f107 0208 	add.w	r2, r7, #8
 80161d4:	4610      	mov	r0, r2
 80161d6:	4798      	blx	r3
 80161d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	3301      	adds	r3, #1
 80161de:	2202      	movs	r2, #2
 80161e0:	701a      	strb	r2, [r3, #0]
      break;
 80161e2:	e0f2      	b.n	80163ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	885b      	ldrh	r3, [r3, #2]
 80161e8:	b2db      	uxtb	r3, r3
 80161ea:	2b05      	cmp	r3, #5
 80161ec:	f200 80ac 	bhi.w	8016348 <USBD_GetDescriptor+0x204>
 80161f0:	a201      	add	r2, pc, #4	; (adr r2, 80161f8 <USBD_GetDescriptor+0xb4>)
 80161f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161f6:	bf00      	nop
 80161f8:	08016211 	.word	0x08016211
 80161fc:	08016245 	.word	0x08016245
 8016200:	08016279 	.word	0x08016279
 8016204:	080162ad 	.word	0x080162ad
 8016208:	080162e1 	.word	0x080162e1
 801620c:	08016315 	.word	0x08016315
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016216:	685b      	ldr	r3, [r3, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d00b      	beq.n	8016234 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	687a      	ldr	r2, [r7, #4]
 8016226:	7c12      	ldrb	r2, [r2, #16]
 8016228:	f107 0108 	add.w	r1, r7, #8
 801622c:	4610      	mov	r0, r2
 801622e:	4798      	blx	r3
 8016230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016232:	e091      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016234:	6839      	ldr	r1, [r7, #0]
 8016236:	6878      	ldr	r0, [r7, #4]
 8016238:	f000 facb 	bl	80167d2 <USBD_CtlError>
            err++;
 801623c:	7afb      	ldrb	r3, [r7, #11]
 801623e:	3301      	adds	r3, #1
 8016240:	72fb      	strb	r3, [r7, #11]
          break;
 8016242:	e089      	b.n	8016358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801624a:	689b      	ldr	r3, [r3, #8]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00b      	beq.n	8016268 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016256:	689b      	ldr	r3, [r3, #8]
 8016258:	687a      	ldr	r2, [r7, #4]
 801625a:	7c12      	ldrb	r2, [r2, #16]
 801625c:	f107 0108 	add.w	r1, r7, #8
 8016260:	4610      	mov	r0, r2
 8016262:	4798      	blx	r3
 8016264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016266:	e077      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016268:	6839      	ldr	r1, [r7, #0]
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	f000 fab1 	bl	80167d2 <USBD_CtlError>
            err++;
 8016270:	7afb      	ldrb	r3, [r7, #11]
 8016272:	3301      	adds	r3, #1
 8016274:	72fb      	strb	r3, [r7, #11]
          break;
 8016276:	e06f      	b.n	8016358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801627e:	68db      	ldr	r3, [r3, #12]
 8016280:	2b00      	cmp	r3, #0
 8016282:	d00b      	beq.n	801629c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801628a:	68db      	ldr	r3, [r3, #12]
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	7c12      	ldrb	r2, [r2, #16]
 8016290:	f107 0108 	add.w	r1, r7, #8
 8016294:	4610      	mov	r0, r2
 8016296:	4798      	blx	r3
 8016298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801629a:	e05d      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801629c:	6839      	ldr	r1, [r7, #0]
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 fa97 	bl	80167d2 <USBD_CtlError>
            err++;
 80162a4:	7afb      	ldrb	r3, [r7, #11]
 80162a6:	3301      	adds	r3, #1
 80162a8:	72fb      	strb	r3, [r7, #11]
          break;
 80162aa:	e055      	b.n	8016358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162b2:	691b      	ldr	r3, [r3, #16]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d00b      	beq.n	80162d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162be:	691b      	ldr	r3, [r3, #16]
 80162c0:	687a      	ldr	r2, [r7, #4]
 80162c2:	7c12      	ldrb	r2, [r2, #16]
 80162c4:	f107 0108 	add.w	r1, r7, #8
 80162c8:	4610      	mov	r0, r2
 80162ca:	4798      	blx	r3
 80162cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80162ce:	e043      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80162d0:	6839      	ldr	r1, [r7, #0]
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f000 fa7d 	bl	80167d2 <USBD_CtlError>
            err++;
 80162d8:	7afb      	ldrb	r3, [r7, #11]
 80162da:	3301      	adds	r3, #1
 80162dc:	72fb      	strb	r3, [r7, #11]
          break;
 80162de:	e03b      	b.n	8016358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162e6:	695b      	ldr	r3, [r3, #20]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d00b      	beq.n	8016304 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80162f2:	695b      	ldr	r3, [r3, #20]
 80162f4:	687a      	ldr	r2, [r7, #4]
 80162f6:	7c12      	ldrb	r2, [r2, #16]
 80162f8:	f107 0108 	add.w	r1, r7, #8
 80162fc:	4610      	mov	r0, r2
 80162fe:	4798      	blx	r3
 8016300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016302:	e029      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016304:	6839      	ldr	r1, [r7, #0]
 8016306:	6878      	ldr	r0, [r7, #4]
 8016308:	f000 fa63 	bl	80167d2 <USBD_CtlError>
            err++;
 801630c:	7afb      	ldrb	r3, [r7, #11]
 801630e:	3301      	adds	r3, #1
 8016310:	72fb      	strb	r3, [r7, #11]
          break;
 8016312:	e021      	b.n	8016358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801631a:	699b      	ldr	r3, [r3, #24]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00b      	beq.n	8016338 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016326:	699b      	ldr	r3, [r3, #24]
 8016328:	687a      	ldr	r2, [r7, #4]
 801632a:	7c12      	ldrb	r2, [r2, #16]
 801632c:	f107 0108 	add.w	r1, r7, #8
 8016330:	4610      	mov	r0, r2
 8016332:	4798      	blx	r3
 8016334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016336:	e00f      	b.n	8016358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016338:	6839      	ldr	r1, [r7, #0]
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f000 fa49 	bl	80167d2 <USBD_CtlError>
            err++;
 8016340:	7afb      	ldrb	r3, [r7, #11]
 8016342:	3301      	adds	r3, #1
 8016344:	72fb      	strb	r3, [r7, #11]
          break;
 8016346:	e007      	b.n	8016358 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 fa41 	bl	80167d2 <USBD_CtlError>
          err++;
 8016350:	7afb      	ldrb	r3, [r7, #11]
 8016352:	3301      	adds	r3, #1
 8016354:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016356:	bf00      	nop
      }
      break;
 8016358:	e037      	b.n	80163ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	7c1b      	ldrb	r3, [r3, #16]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d109      	bne.n	8016376 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801636a:	f107 0208 	add.w	r2, r7, #8
 801636e:	4610      	mov	r0, r2
 8016370:	4798      	blx	r3
 8016372:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016374:	e029      	b.n	80163ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016376:	6839      	ldr	r1, [r7, #0]
 8016378:	6878      	ldr	r0, [r7, #4]
 801637a:	f000 fa2a 	bl	80167d2 <USBD_CtlError>
        err++;
 801637e:	7afb      	ldrb	r3, [r7, #11]
 8016380:	3301      	adds	r3, #1
 8016382:	72fb      	strb	r3, [r7, #11]
      break;
 8016384:	e021      	b.n	80163ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	7c1b      	ldrb	r3, [r3, #16]
 801638a:	2b00      	cmp	r3, #0
 801638c:	d10d      	bne.n	80163aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016396:	f107 0208 	add.w	r2, r7, #8
 801639a:	4610      	mov	r0, r2
 801639c:	4798      	blx	r3
 801639e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	3301      	adds	r3, #1
 80163a4:	2207      	movs	r2, #7
 80163a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80163a8:	e00f      	b.n	80163ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80163aa:	6839      	ldr	r1, [r7, #0]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fa10 	bl	80167d2 <USBD_CtlError>
        err++;
 80163b2:	7afb      	ldrb	r3, [r7, #11]
 80163b4:	3301      	adds	r3, #1
 80163b6:	72fb      	strb	r3, [r7, #11]
      break;
 80163b8:	e007      	b.n	80163ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80163ba:	6839      	ldr	r1, [r7, #0]
 80163bc:	6878      	ldr	r0, [r7, #4]
 80163be:	f000 fa08 	bl	80167d2 <USBD_CtlError>
      err++;
 80163c2:	7afb      	ldrb	r3, [r7, #11]
 80163c4:	3301      	adds	r3, #1
 80163c6:	72fb      	strb	r3, [r7, #11]
      break;
 80163c8:	bf00      	nop
  }

  if (err != 0U)
 80163ca:	7afb      	ldrb	r3, [r7, #11]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d11e      	bne.n	801640e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	88db      	ldrh	r3, [r3, #6]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d016      	beq.n	8016406 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80163d8:	893b      	ldrh	r3, [r7, #8]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d00e      	beq.n	80163fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	88da      	ldrh	r2, [r3, #6]
 80163e2:	893b      	ldrh	r3, [r7, #8]
 80163e4:	4293      	cmp	r3, r2
 80163e6:	bf28      	it	cs
 80163e8:	4613      	movcs	r3, r2
 80163ea:	b29b      	uxth	r3, r3
 80163ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80163ee:	893b      	ldrh	r3, [r7, #8]
 80163f0:	461a      	mov	r2, r3
 80163f2:	68f9      	ldr	r1, [r7, #12]
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f000 fa5d 	bl	80168b4 <USBD_CtlSendData>
 80163fa:	e009      	b.n	8016410 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80163fc:	6839      	ldr	r1, [r7, #0]
 80163fe:	6878      	ldr	r0, [r7, #4]
 8016400:	f000 f9e7 	bl	80167d2 <USBD_CtlError>
 8016404:	e004      	b.n	8016410 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f000 faae 	bl	8016968 <USBD_CtlSendStatus>
 801640c:	e000      	b.n	8016410 <USBD_GetDescriptor+0x2cc>
    return;
 801640e:	bf00      	nop
  }
}
 8016410:	3710      	adds	r7, #16
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
 8016416:	bf00      	nop

08016418 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
 8016420:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016422:	683b      	ldr	r3, [r7, #0]
 8016424:	889b      	ldrh	r3, [r3, #4]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d131      	bne.n	801648e <USBD_SetAddress+0x76>
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	88db      	ldrh	r3, [r3, #6]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d12d      	bne.n	801648e <USBD_SetAddress+0x76>
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	885b      	ldrh	r3, [r3, #2]
 8016436:	2b7f      	cmp	r3, #127	; 0x7f
 8016438:	d829      	bhi.n	801648e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801643a:	683b      	ldr	r3, [r7, #0]
 801643c:	885b      	ldrh	r3, [r3, #2]
 801643e:	b2db      	uxtb	r3, r3
 8016440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016444:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801644c:	b2db      	uxtb	r3, r3
 801644e:	2b03      	cmp	r3, #3
 8016450:	d104      	bne.n	801645c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016452:	6839      	ldr	r1, [r7, #0]
 8016454:	6878      	ldr	r0, [r7, #4]
 8016456:	f000 f9bc 	bl	80167d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801645a:	e01d      	b.n	8016498 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	7bfa      	ldrb	r2, [r7, #15]
 8016460:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016464:	7bfb      	ldrb	r3, [r7, #15]
 8016466:	4619      	mov	r1, r3
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f000 ff71 	bl	8017350 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801646e:	6878      	ldr	r0, [r7, #4]
 8016470:	f000 fa7a 	bl	8016968 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016474:	7bfb      	ldrb	r3, [r7, #15]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d004      	beq.n	8016484 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	2202      	movs	r2, #2
 801647e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016482:	e009      	b.n	8016498 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2201      	movs	r2, #1
 8016488:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801648c:	e004      	b.n	8016498 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801648e:	6839      	ldr	r1, [r7, #0]
 8016490:	6878      	ldr	r0, [r7, #4]
 8016492:	f000 f99e 	bl	80167d2 <USBD_CtlError>
  }
}
 8016496:	bf00      	nop
 8016498:	bf00      	nop
 801649a:	3710      	adds	r7, #16
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}

080164a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b084      	sub	sp, #16
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
 80164a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80164aa:	2300      	movs	r3, #0
 80164ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80164ae:	683b      	ldr	r3, [r7, #0]
 80164b0:	885b      	ldrh	r3, [r3, #2]
 80164b2:	b2da      	uxtb	r2, r3
 80164b4:	4b4e      	ldr	r3, [pc, #312]	; (80165f0 <USBD_SetConfig+0x150>)
 80164b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80164b8:	4b4d      	ldr	r3, [pc, #308]	; (80165f0 <USBD_SetConfig+0x150>)
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	2b01      	cmp	r3, #1
 80164be:	d905      	bls.n	80164cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80164c0:	6839      	ldr	r1, [r7, #0]
 80164c2:	6878      	ldr	r0, [r7, #4]
 80164c4:	f000 f985 	bl	80167d2 <USBD_CtlError>
    return USBD_FAIL;
 80164c8:	2303      	movs	r3, #3
 80164ca:	e08c      	b.n	80165e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164d2:	b2db      	uxtb	r3, r3
 80164d4:	2b02      	cmp	r3, #2
 80164d6:	d002      	beq.n	80164de <USBD_SetConfig+0x3e>
 80164d8:	2b03      	cmp	r3, #3
 80164da:	d029      	beq.n	8016530 <USBD_SetConfig+0x90>
 80164dc:	e075      	b.n	80165ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80164de:	4b44      	ldr	r3, [pc, #272]	; (80165f0 <USBD_SetConfig+0x150>)
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d020      	beq.n	8016528 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80164e6:	4b42      	ldr	r3, [pc, #264]	; (80165f0 <USBD_SetConfig+0x150>)
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	461a      	mov	r2, r3
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80164f0:	4b3f      	ldr	r3, [pc, #252]	; (80165f0 <USBD_SetConfig+0x150>)
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	4619      	mov	r1, r3
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f7fe ffe1 	bl	80154be <USBD_SetClassConfig>
 80164fc:	4603      	mov	r3, r0
 80164fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016500:	7bfb      	ldrb	r3, [r7, #15]
 8016502:	2b00      	cmp	r3, #0
 8016504:	d008      	beq.n	8016518 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016506:	6839      	ldr	r1, [r7, #0]
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f000 f962 	bl	80167d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	2202      	movs	r2, #2
 8016512:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016516:	e065      	b.n	80165e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f000 fa25 	bl	8016968 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	2203      	movs	r2, #3
 8016522:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016526:	e05d      	b.n	80165e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016528:	6878      	ldr	r0, [r7, #4]
 801652a:	f000 fa1d 	bl	8016968 <USBD_CtlSendStatus>
      break;
 801652e:	e059      	b.n	80165e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016530:	4b2f      	ldr	r3, [pc, #188]	; (80165f0 <USBD_SetConfig+0x150>)
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d112      	bne.n	801655e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2202      	movs	r2, #2
 801653c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016540:	4b2b      	ldr	r3, [pc, #172]	; (80165f0 <USBD_SetConfig+0x150>)
 8016542:	781b      	ldrb	r3, [r3, #0]
 8016544:	461a      	mov	r2, r3
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801654a:	4b29      	ldr	r3, [pc, #164]	; (80165f0 <USBD_SetConfig+0x150>)
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	4619      	mov	r1, r3
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f7fe ffd0 	bl	80154f6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa06 	bl	8016968 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801655c:	e042      	b.n	80165e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801655e:	4b24      	ldr	r3, [pc, #144]	; (80165f0 <USBD_SetConfig+0x150>)
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	461a      	mov	r2, r3
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	685b      	ldr	r3, [r3, #4]
 8016568:	429a      	cmp	r2, r3
 801656a:	d02a      	beq.n	80165c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	b2db      	uxtb	r3, r3
 8016572:	4619      	mov	r1, r3
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f7fe ffbe 	bl	80154f6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801657a:	4b1d      	ldr	r3, [pc, #116]	; (80165f0 <USBD_SetConfig+0x150>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	461a      	mov	r2, r3
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016584:	4b1a      	ldr	r3, [pc, #104]	; (80165f0 <USBD_SetConfig+0x150>)
 8016586:	781b      	ldrb	r3, [r3, #0]
 8016588:	4619      	mov	r1, r3
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f7fe ff97 	bl	80154be <USBD_SetClassConfig>
 8016590:	4603      	mov	r3, r0
 8016592:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016594:	7bfb      	ldrb	r3, [r7, #15]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00f      	beq.n	80165ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801659a:	6839      	ldr	r1, [r7, #0]
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f000 f918 	bl	80167d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	685b      	ldr	r3, [r3, #4]
 80165a6:	b2db      	uxtb	r3, r3
 80165a8:	4619      	mov	r1, r3
 80165aa:	6878      	ldr	r0, [r7, #4]
 80165ac:	f7fe ffa3 	bl	80154f6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2202      	movs	r2, #2
 80165b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80165b8:	e014      	b.n	80165e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80165ba:	6878      	ldr	r0, [r7, #4]
 80165bc:	f000 f9d4 	bl	8016968 <USBD_CtlSendStatus>
      break;
 80165c0:	e010      	b.n	80165e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f000 f9d0 	bl	8016968 <USBD_CtlSendStatus>
      break;
 80165c8:	e00c      	b.n	80165e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80165ca:	6839      	ldr	r1, [r7, #0]
 80165cc:	6878      	ldr	r0, [r7, #4]
 80165ce:	f000 f900 	bl	80167d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80165d2:	4b07      	ldr	r3, [pc, #28]	; (80165f0 <USBD_SetConfig+0x150>)
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	4619      	mov	r1, r3
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f7fe ff8c 	bl	80154f6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80165de:	2303      	movs	r3, #3
 80165e0:	73fb      	strb	r3, [r7, #15]
      break;
 80165e2:	bf00      	nop
  }

  return ret;
 80165e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3710      	adds	r7, #16
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	2400175c 	.word	0x2400175c

080165f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b082      	sub	sp, #8
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	88db      	ldrh	r3, [r3, #6]
 8016602:	2b01      	cmp	r3, #1
 8016604:	d004      	beq.n	8016610 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016606:	6839      	ldr	r1, [r7, #0]
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f000 f8e2 	bl	80167d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801660e:	e023      	b.n	8016658 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016616:	b2db      	uxtb	r3, r3
 8016618:	2b02      	cmp	r3, #2
 801661a:	dc02      	bgt.n	8016622 <USBD_GetConfig+0x2e>
 801661c:	2b00      	cmp	r3, #0
 801661e:	dc03      	bgt.n	8016628 <USBD_GetConfig+0x34>
 8016620:	e015      	b.n	801664e <USBD_GetConfig+0x5a>
 8016622:	2b03      	cmp	r3, #3
 8016624:	d00b      	beq.n	801663e <USBD_GetConfig+0x4a>
 8016626:	e012      	b.n	801664e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	2200      	movs	r2, #0
 801662c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	3308      	adds	r3, #8
 8016632:	2201      	movs	r2, #1
 8016634:	4619      	mov	r1, r3
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	f000 f93c 	bl	80168b4 <USBD_CtlSendData>
        break;
 801663c:	e00c      	b.n	8016658 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	3304      	adds	r3, #4
 8016642:	2201      	movs	r2, #1
 8016644:	4619      	mov	r1, r3
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 f934 	bl	80168b4 <USBD_CtlSendData>
        break;
 801664c:	e004      	b.n	8016658 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801664e:	6839      	ldr	r1, [r7, #0]
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f000 f8be 	bl	80167d2 <USBD_CtlError>
        break;
 8016656:	bf00      	nop
}
 8016658:	bf00      	nop
 801665a:	3708      	adds	r7, #8
 801665c:	46bd      	mov	sp, r7
 801665e:	bd80      	pop	{r7, pc}

08016660 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016660:	b580      	push	{r7, lr}
 8016662:	b082      	sub	sp, #8
 8016664:	af00      	add	r7, sp, #0
 8016666:	6078      	str	r0, [r7, #4]
 8016668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016670:	b2db      	uxtb	r3, r3
 8016672:	3b01      	subs	r3, #1
 8016674:	2b02      	cmp	r3, #2
 8016676:	d81e      	bhi.n	80166b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016678:	683b      	ldr	r3, [r7, #0]
 801667a:	88db      	ldrh	r3, [r3, #6]
 801667c:	2b02      	cmp	r3, #2
 801667e:	d004      	beq.n	801668a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8016680:	6839      	ldr	r1, [r7, #0]
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f000 f8a5 	bl	80167d2 <USBD_CtlError>
        break;
 8016688:	e01a      	b.n	80166c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2201      	movs	r2, #1
 801668e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016696:	2b00      	cmp	r3, #0
 8016698:	d005      	beq.n	80166a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	68db      	ldr	r3, [r3, #12]
 801669e:	f043 0202 	orr.w	r2, r3, #2
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	330c      	adds	r3, #12
 80166aa:	2202      	movs	r2, #2
 80166ac:	4619      	mov	r1, r3
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	f000 f900 	bl	80168b4 <USBD_CtlSendData>
      break;
 80166b4:	e004      	b.n	80166c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80166b6:	6839      	ldr	r1, [r7, #0]
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 f88a 	bl	80167d2 <USBD_CtlError>
      break;
 80166be:	bf00      	nop
  }
}
 80166c0:	bf00      	nop
 80166c2:	3708      	adds	r7, #8
 80166c4:	46bd      	mov	sp, r7
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
 80166d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80166d2:	683b      	ldr	r3, [r7, #0]
 80166d4:	885b      	ldrh	r3, [r3, #2]
 80166d6:	2b01      	cmp	r3, #1
 80166d8:	d107      	bne.n	80166ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2201      	movs	r2, #1
 80166de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 f940 	bl	8016968 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80166e8:	e013      	b.n	8016712 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80166ea:	683b      	ldr	r3, [r7, #0]
 80166ec:	885b      	ldrh	r3, [r3, #2]
 80166ee:	2b02      	cmp	r3, #2
 80166f0:	d10b      	bne.n	801670a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80166f2:	683b      	ldr	r3, [r7, #0]
 80166f4:	889b      	ldrh	r3, [r3, #4]
 80166f6:	0a1b      	lsrs	r3, r3, #8
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	b2da      	uxtb	r2, r3
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 f930 	bl	8016968 <USBD_CtlSendStatus>
}
 8016708:	e003      	b.n	8016712 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801670a:	6839      	ldr	r1, [r7, #0]
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f000 f860 	bl	80167d2 <USBD_CtlError>
}
 8016712:	bf00      	nop
 8016714:	3708      	adds	r7, #8
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}

0801671a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801671a:	b580      	push	{r7, lr}
 801671c:	b082      	sub	sp, #8
 801671e:	af00      	add	r7, sp, #0
 8016720:	6078      	str	r0, [r7, #4]
 8016722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801672a:	b2db      	uxtb	r3, r3
 801672c:	3b01      	subs	r3, #1
 801672e:	2b02      	cmp	r3, #2
 8016730:	d80b      	bhi.n	801674a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	885b      	ldrh	r3, [r3, #2]
 8016736:	2b01      	cmp	r3, #1
 8016738:	d10c      	bne.n	8016754 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	2200      	movs	r2, #0
 801673e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f000 f910 	bl	8016968 <USBD_CtlSendStatus>
      }
      break;
 8016748:	e004      	b.n	8016754 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801674a:	6839      	ldr	r1, [r7, #0]
 801674c:	6878      	ldr	r0, [r7, #4]
 801674e:	f000 f840 	bl	80167d2 <USBD_CtlError>
      break;
 8016752:	e000      	b.n	8016756 <USBD_ClrFeature+0x3c>
      break;
 8016754:	bf00      	nop
  }
}
 8016756:	bf00      	nop
 8016758:	3708      	adds	r7, #8
 801675a:	46bd      	mov	sp, r7
 801675c:	bd80      	pop	{r7, pc}

0801675e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801675e:	b580      	push	{r7, lr}
 8016760:	b084      	sub	sp, #16
 8016762:	af00      	add	r7, sp, #0
 8016764:	6078      	str	r0, [r7, #4]
 8016766:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	781a      	ldrb	r2, [r3, #0]
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	3301      	adds	r3, #1
 8016778:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801677a:	68fb      	ldr	r3, [r7, #12]
 801677c:	781a      	ldrb	r2, [r3, #0]
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	3301      	adds	r3, #1
 8016786:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f7ff fa41 	bl	8015c10 <SWAPBYTE>
 801678e:	4603      	mov	r3, r0
 8016790:	461a      	mov	r2, r3
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	3301      	adds	r3, #1
 801679a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801679c:	68fb      	ldr	r3, [r7, #12]
 801679e:	3301      	adds	r3, #1
 80167a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80167a2:	68f8      	ldr	r0, [r7, #12]
 80167a4:	f7ff fa34 	bl	8015c10 <SWAPBYTE>
 80167a8:	4603      	mov	r3, r0
 80167aa:	461a      	mov	r2, r3
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	3301      	adds	r3, #1
 80167b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	3301      	adds	r3, #1
 80167ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80167bc:	68f8      	ldr	r0, [r7, #12]
 80167be:	f7ff fa27 	bl	8015c10 <SWAPBYTE>
 80167c2:	4603      	mov	r3, r0
 80167c4:	461a      	mov	r2, r3
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	80da      	strh	r2, [r3, #6]
}
 80167ca:	bf00      	nop
 80167cc:	3710      	adds	r7, #16
 80167ce:	46bd      	mov	sp, r7
 80167d0:	bd80      	pop	{r7, pc}

080167d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167d2:	b580      	push	{r7, lr}
 80167d4:	b082      	sub	sp, #8
 80167d6:	af00      	add	r7, sp, #0
 80167d8:	6078      	str	r0, [r7, #4]
 80167da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80167dc:	2180      	movs	r1, #128	; 0x80
 80167de:	6878      	ldr	r0, [r7, #4]
 80167e0:	f000 fd4c 	bl	801727c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80167e4:	2100      	movs	r1, #0
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f000 fd48 	bl	801727c <USBD_LL_StallEP>
}
 80167ec:	bf00      	nop
 80167ee:	3708      	adds	r7, #8
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b086      	sub	sp, #24
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016800:	2300      	movs	r3, #0
 8016802:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	2b00      	cmp	r3, #0
 8016808:	d036      	beq.n	8016878 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801680e:	6938      	ldr	r0, [r7, #16]
 8016810:	f000 f836 	bl	8016880 <USBD_GetLen>
 8016814:	4603      	mov	r3, r0
 8016816:	3301      	adds	r3, #1
 8016818:	b29b      	uxth	r3, r3
 801681a:	005b      	lsls	r3, r3, #1
 801681c:	b29a      	uxth	r2, r3
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016822:	7dfb      	ldrb	r3, [r7, #23]
 8016824:	68ba      	ldr	r2, [r7, #8]
 8016826:	4413      	add	r3, r2
 8016828:	687a      	ldr	r2, [r7, #4]
 801682a:	7812      	ldrb	r2, [r2, #0]
 801682c:	701a      	strb	r2, [r3, #0]
  idx++;
 801682e:	7dfb      	ldrb	r3, [r7, #23]
 8016830:	3301      	adds	r3, #1
 8016832:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016834:	7dfb      	ldrb	r3, [r7, #23]
 8016836:	68ba      	ldr	r2, [r7, #8]
 8016838:	4413      	add	r3, r2
 801683a:	2203      	movs	r2, #3
 801683c:	701a      	strb	r2, [r3, #0]
  idx++;
 801683e:	7dfb      	ldrb	r3, [r7, #23]
 8016840:	3301      	adds	r3, #1
 8016842:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016844:	e013      	b.n	801686e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016846:	7dfb      	ldrb	r3, [r7, #23]
 8016848:	68ba      	ldr	r2, [r7, #8]
 801684a:	4413      	add	r3, r2
 801684c:	693a      	ldr	r2, [r7, #16]
 801684e:	7812      	ldrb	r2, [r2, #0]
 8016850:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	3301      	adds	r3, #1
 8016856:	613b      	str	r3, [r7, #16]
    idx++;
 8016858:	7dfb      	ldrb	r3, [r7, #23]
 801685a:	3301      	adds	r3, #1
 801685c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801685e:	7dfb      	ldrb	r3, [r7, #23]
 8016860:	68ba      	ldr	r2, [r7, #8]
 8016862:	4413      	add	r3, r2
 8016864:	2200      	movs	r2, #0
 8016866:	701a      	strb	r2, [r3, #0]
    idx++;
 8016868:	7dfb      	ldrb	r3, [r7, #23]
 801686a:	3301      	adds	r3, #1
 801686c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	781b      	ldrb	r3, [r3, #0]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d1e7      	bne.n	8016846 <USBD_GetString+0x52>
 8016876:	e000      	b.n	801687a <USBD_GetString+0x86>
    return;
 8016878:	bf00      	nop
  }
}
 801687a:	3718      	adds	r7, #24
 801687c:	46bd      	mov	sp, r7
 801687e:	bd80      	pop	{r7, pc}

08016880 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016880:	b480      	push	{r7}
 8016882:	b085      	sub	sp, #20
 8016884:	af00      	add	r7, sp, #0
 8016886:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016888:	2300      	movs	r3, #0
 801688a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016890:	e005      	b.n	801689e <USBD_GetLen+0x1e>
  {
    len++;
 8016892:	7bfb      	ldrb	r3, [r7, #15]
 8016894:	3301      	adds	r3, #1
 8016896:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016898:	68bb      	ldr	r3, [r7, #8]
 801689a:	3301      	adds	r3, #1
 801689c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	781b      	ldrb	r3, [r3, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d1f5      	bne.n	8016892 <USBD_GetLen+0x12>
  }

  return len;
 80168a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3714      	adds	r7, #20
 80168ac:	46bd      	mov	sp, r7
 80168ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b2:	4770      	bx	lr

080168b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	60f8      	str	r0, [r7, #12]
 80168bc:	60b9      	str	r1, [r7, #8]
 80168be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	2202      	movs	r2, #2
 80168c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80168ce:	68fb      	ldr	r3, [r7, #12]
 80168d0:	687a      	ldr	r2, [r7, #4]
 80168d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	68ba      	ldr	r2, [r7, #8]
 80168d8:	2100      	movs	r1, #0
 80168da:	68f8      	ldr	r0, [r7, #12]
 80168dc:	f000 fd57 	bl	801738e <USBD_LL_Transmit>

  return USBD_OK;
 80168e0:	2300      	movs	r3, #0
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3710      	adds	r7, #16
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}

080168ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80168ea:	b580      	push	{r7, lr}
 80168ec:	b084      	sub	sp, #16
 80168ee:	af00      	add	r7, sp, #0
 80168f0:	60f8      	str	r0, [r7, #12]
 80168f2:	60b9      	str	r1, [r7, #8]
 80168f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	68ba      	ldr	r2, [r7, #8]
 80168fa:	2100      	movs	r1, #0
 80168fc:	68f8      	ldr	r0, [r7, #12]
 80168fe:	f000 fd46 	bl	801738e <USBD_LL_Transmit>

  return USBD_OK;
 8016902:	2300      	movs	r3, #0
}
 8016904:	4618      	mov	r0, r3
 8016906:	3710      	adds	r7, #16
 8016908:	46bd      	mov	sp, r7
 801690a:	bd80      	pop	{r7, pc}

0801690c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	60f8      	str	r0, [r7, #12]
 8016914:	60b9      	str	r1, [r7, #8]
 8016916:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	2203      	movs	r2, #3
 801691c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	687a      	ldr	r2, [r7, #4]
 801692c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	68ba      	ldr	r2, [r7, #8]
 8016934:	2100      	movs	r1, #0
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f000 fd4a 	bl	80173d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801693c:	2300      	movs	r3, #0
}
 801693e:	4618      	mov	r0, r3
 8016940:	3710      	adds	r7, #16
 8016942:	46bd      	mov	sp, r7
 8016944:	bd80      	pop	{r7, pc}

08016946 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016946:	b580      	push	{r7, lr}
 8016948:	b084      	sub	sp, #16
 801694a:	af00      	add	r7, sp, #0
 801694c:	60f8      	str	r0, [r7, #12]
 801694e:	60b9      	str	r1, [r7, #8]
 8016950:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	68ba      	ldr	r2, [r7, #8]
 8016956:	2100      	movs	r1, #0
 8016958:	68f8      	ldr	r0, [r7, #12]
 801695a:	f000 fd39 	bl	80173d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801695e:	2300      	movs	r3, #0
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2204      	movs	r2, #4
 8016974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016978:	2300      	movs	r3, #0
 801697a:	2200      	movs	r2, #0
 801697c:	2100      	movs	r1, #0
 801697e:	6878      	ldr	r0, [r7, #4]
 8016980:	f000 fd05 	bl	801738e <USBD_LL_Transmit>

  return USBD_OK;
 8016984:	2300      	movs	r3, #0
}
 8016986:	4618      	mov	r0, r3
 8016988:	3708      	adds	r7, #8
 801698a:	46bd      	mov	sp, r7
 801698c:	bd80      	pop	{r7, pc}

0801698e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801698e:	b580      	push	{r7, lr}
 8016990:	b082      	sub	sp, #8
 8016992:	af00      	add	r7, sp, #0
 8016994:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	2205      	movs	r2, #5
 801699a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801699e:	2300      	movs	r3, #0
 80169a0:	2200      	movs	r2, #0
 80169a2:	2100      	movs	r1, #0
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f000 fd13 	bl	80173d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80169aa:	2300      	movs	r3, #0
}
 80169ac:	4618      	mov	r0, r3
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80169b4:	b480      	push	{r7}
 80169b6:	b087      	sub	sp, #28
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	60f8      	str	r0, [r7, #12]
 80169bc:	60b9      	str	r1, [r7, #8]
 80169be:	4613      	mov	r3, r2
 80169c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80169c2:	2301      	movs	r3, #1
 80169c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80169c6:	2300      	movs	r3, #0
 80169c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80169ca:	4b1f      	ldr	r3, [pc, #124]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169cc:	7a5b      	ldrb	r3, [r3, #9]
 80169ce:	b2db      	uxtb	r3, r3
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d131      	bne.n	8016a38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80169d4:	4b1c      	ldr	r3, [pc, #112]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169d6:	7a5b      	ldrb	r3, [r3, #9]
 80169d8:	b2db      	uxtb	r3, r3
 80169da:	461a      	mov	r2, r3
 80169dc:	4b1a      	ldr	r3, [pc, #104]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169de:	2100      	movs	r1, #0
 80169e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80169e2:	4b19      	ldr	r3, [pc, #100]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169e4:	7a5b      	ldrb	r3, [r3, #9]
 80169e6:	b2db      	uxtb	r3, r3
 80169e8:	4a17      	ldr	r2, [pc, #92]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	4413      	add	r3, r2
 80169ee:	68fa      	ldr	r2, [r7, #12]
 80169f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80169f2:	4b15      	ldr	r3, [pc, #84]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169f4:	7a5b      	ldrb	r3, [r3, #9]
 80169f6:	b2db      	uxtb	r3, r3
 80169f8:	461a      	mov	r2, r3
 80169fa:	4b13      	ldr	r3, [pc, #76]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 80169fc:	4413      	add	r3, r2
 80169fe:	79fa      	ldrb	r2, [r7, #7]
 8016a00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016a02:	4b11      	ldr	r3, [pc, #68]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 8016a04:	7a5b      	ldrb	r3, [r3, #9]
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	1c5a      	adds	r2, r3, #1
 8016a0a:	b2d1      	uxtb	r1, r2
 8016a0c:	4a0e      	ldr	r2, [pc, #56]	; (8016a48 <FATFS_LinkDriverEx+0x94>)
 8016a0e:	7251      	strb	r1, [r2, #9]
 8016a10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016a12:	7dbb      	ldrb	r3, [r7, #22]
 8016a14:	3330      	adds	r3, #48	; 0x30
 8016a16:	b2da      	uxtb	r2, r3
 8016a18:	68bb      	ldr	r3, [r7, #8]
 8016a1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016a1c:	68bb      	ldr	r3, [r7, #8]
 8016a1e:	3301      	adds	r3, #1
 8016a20:	223a      	movs	r2, #58	; 0x3a
 8016a22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016a24:	68bb      	ldr	r3, [r7, #8]
 8016a26:	3302      	adds	r3, #2
 8016a28:	222f      	movs	r2, #47	; 0x2f
 8016a2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016a2c:	68bb      	ldr	r3, [r7, #8]
 8016a2e:	3303      	adds	r3, #3
 8016a30:	2200      	movs	r2, #0
 8016a32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	371c      	adds	r7, #28
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a44:	4770      	bx	lr
 8016a46:	bf00      	nop
 8016a48:	24001760 	.word	0x24001760

08016a4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
 8016a54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016a56:	2200      	movs	r2, #0
 8016a58:	6839      	ldr	r1, [r7, #0]
 8016a5a:	6878      	ldr	r0, [r7, #4]
 8016a5c:	f7ff ffaa 	bl	80169b4 <FATFS_LinkDriverEx>
 8016a60:	4603      	mov	r3, r0
}
 8016a62:	4618      	mov	r0, r3
 8016a64:	3708      	adds	r7, #8
 8016a66:	46bd      	mov	sp, r7
 8016a68:	bd80      	pop	{r7, pc}
	...

08016a6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016a6c:	b580      	push	{r7, lr}
 8016a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016a70:	2201      	movs	r2, #1
 8016a72:	4913      	ldr	r1, [pc, #76]	; (8016ac0 <MX_USB_DEVICE_Init+0x54>)
 8016a74:	4813      	ldr	r0, [pc, #76]	; (8016ac4 <MX_USB_DEVICE_Init+0x58>)
 8016a76:	f7fe fca5 	bl	80153c4 <USBD_Init>
 8016a7a:	4603      	mov	r3, r0
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d001      	beq.n	8016a84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016a80:	f7ec f8f6 	bl	8002c70 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016a84:	4910      	ldr	r1, [pc, #64]	; (8016ac8 <MX_USB_DEVICE_Init+0x5c>)
 8016a86:	480f      	ldr	r0, [pc, #60]	; (8016ac4 <MX_USB_DEVICE_Init+0x58>)
 8016a88:	f7fe fccc 	bl	8015424 <USBD_RegisterClass>
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d001      	beq.n	8016a96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016a92:	f7ec f8ed 	bl	8002c70 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016a96:	490d      	ldr	r1, [pc, #52]	; (8016acc <MX_USB_DEVICE_Init+0x60>)
 8016a98:	480a      	ldr	r0, [pc, #40]	; (8016ac4 <MX_USB_DEVICE_Init+0x58>)
 8016a9a:	f7fe fbc3 	bl	8015224 <USBD_CDC_RegisterInterface>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d001      	beq.n	8016aa8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016aa4:	f7ec f8e4 	bl	8002c70 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016aa8:	4806      	ldr	r0, [pc, #24]	; (8016ac4 <MX_USB_DEVICE_Init+0x58>)
 8016aaa:	f7fe fcf1 	bl	8015490 <USBD_Start>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d001      	beq.n	8016ab8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ab4:	f7ec f8dc 	bl	8002c70 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016ab8:	f7f3 f908 	bl	8009ccc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016abc:	bf00      	nop
 8016abe:	bd80      	pop	{r7, pc}
 8016ac0:	240000b0 	.word	0x240000b0
 8016ac4:	2400176c 	.word	0x2400176c
 8016ac8:	2400001c 	.word	0x2400001c
 8016acc:	2400009c 	.word	0x2400009c

08016ad0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	4905      	ldr	r1, [pc, #20]	; (8016aec <CDC_Init_HS+0x1c>)
 8016ad8:	4805      	ldr	r0, [pc, #20]	; (8016af0 <CDC_Init_HS+0x20>)
 8016ada:	f7fe fbbd 	bl	8015258 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016ade:	4905      	ldr	r1, [pc, #20]	; (8016af4 <CDC_Init_HS+0x24>)
 8016ae0:	4803      	ldr	r0, [pc, #12]	; (8016af0 <CDC_Init_HS+0x20>)
 8016ae2:	f7fe fbdb 	bl	801529c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016ae6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016ae8:	4618      	mov	r0, r3
 8016aea:	bd80      	pop	{r7, pc}
 8016aec:	24002248 	.word	0x24002248
 8016af0:	2400176c 	.word	0x2400176c
 8016af4:	24001a48 	.word	0x24001a48

08016af8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016af8:	b480      	push	{r7}
 8016afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016afc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016afe:	4618      	mov	r0, r3
 8016b00:	46bd      	mov	sp, r7
 8016b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b06:	4770      	bx	lr

08016b08 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b083      	sub	sp, #12
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	4603      	mov	r3, r0
 8016b10:	6039      	str	r1, [r7, #0]
 8016b12:	71fb      	strb	r3, [r7, #7]
 8016b14:	4613      	mov	r3, r2
 8016b16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016b18:	79fb      	ldrb	r3, [r7, #7]
 8016b1a:	2b23      	cmp	r3, #35	; 0x23
 8016b1c:	d84a      	bhi.n	8016bb4 <CDC_Control_HS+0xac>
 8016b1e:	a201      	add	r2, pc, #4	; (adr r2, 8016b24 <CDC_Control_HS+0x1c>)
 8016b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b24:	08016bb5 	.word	0x08016bb5
 8016b28:	08016bb5 	.word	0x08016bb5
 8016b2c:	08016bb5 	.word	0x08016bb5
 8016b30:	08016bb5 	.word	0x08016bb5
 8016b34:	08016bb5 	.word	0x08016bb5
 8016b38:	08016bb5 	.word	0x08016bb5
 8016b3c:	08016bb5 	.word	0x08016bb5
 8016b40:	08016bb5 	.word	0x08016bb5
 8016b44:	08016bb5 	.word	0x08016bb5
 8016b48:	08016bb5 	.word	0x08016bb5
 8016b4c:	08016bb5 	.word	0x08016bb5
 8016b50:	08016bb5 	.word	0x08016bb5
 8016b54:	08016bb5 	.word	0x08016bb5
 8016b58:	08016bb5 	.word	0x08016bb5
 8016b5c:	08016bb5 	.word	0x08016bb5
 8016b60:	08016bb5 	.word	0x08016bb5
 8016b64:	08016bb5 	.word	0x08016bb5
 8016b68:	08016bb5 	.word	0x08016bb5
 8016b6c:	08016bb5 	.word	0x08016bb5
 8016b70:	08016bb5 	.word	0x08016bb5
 8016b74:	08016bb5 	.word	0x08016bb5
 8016b78:	08016bb5 	.word	0x08016bb5
 8016b7c:	08016bb5 	.word	0x08016bb5
 8016b80:	08016bb5 	.word	0x08016bb5
 8016b84:	08016bb5 	.word	0x08016bb5
 8016b88:	08016bb5 	.word	0x08016bb5
 8016b8c:	08016bb5 	.word	0x08016bb5
 8016b90:	08016bb5 	.word	0x08016bb5
 8016b94:	08016bb5 	.word	0x08016bb5
 8016b98:	08016bb5 	.word	0x08016bb5
 8016b9c:	08016bb5 	.word	0x08016bb5
 8016ba0:	08016bb5 	.word	0x08016bb5
 8016ba4:	08016bb5 	.word	0x08016bb5
 8016ba8:	08016bb5 	.word	0x08016bb5
 8016bac:	08016bb5 	.word	0x08016bb5
 8016bb0:	08016bb5 	.word	0x08016bb5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016bb4:	bf00      	nop
  }

  return (USBD_OK);
 8016bb6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	370c      	adds	r7, #12
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc2:	4770      	bx	lr

08016bc4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
 8016bcc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016bce:	6879      	ldr	r1, [r7, #4]
 8016bd0:	480e      	ldr	r0, [pc, #56]	; (8016c0c <CDC_Receive_HS+0x48>)
 8016bd2:	f7fe fb63 	bl	801529c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016bd6:	480d      	ldr	r0, [pc, #52]	; (8016c0c <CDC_Receive_HS+0x48>)
 8016bd8:	f7fe fbbe 	bl	8015358 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	60fb      	str	r3, [r7, #12]
  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016be2:	4b0b      	ldr	r3, [pc, #44]	; (8016c10 <CDC_Receive_HS+0x4c>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4a0b      	ldr	r2, [pc, #44]	; (8016c14 <CDC_Receive_HS+0x50>)
 8016be8:	4413      	add	r3, r2
 8016bea:	68fa      	ldr	r2, [r7, #12]
 8016bec:	6879      	ldr	r1, [r7, #4]
 8016bee:	4618      	mov	r0, r3
 8016bf0:	f001 fc7f 	bl	80184f2 <memcpy>
  usbBytesReady += cpyLen;
 8016bf4:	4b06      	ldr	r3, [pc, #24]	; (8016c10 <CDC_Receive_HS+0x4c>)
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	4413      	add	r3, r2
 8016bfc:	4a04      	ldr	r2, [pc, #16]	; (8016c10 <CDC_Receive_HS+0x4c>)
 8016bfe:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016c00:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016c02:	4618      	mov	r0, r3
 8016c04:	3710      	adds	r7, #16
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}
 8016c0a:	bf00      	nop
 8016c0c:	2400176c 	.word	0x2400176c
 8016c10:	240003e4 	.word	0x240003e4
 8016c14:	240002e4 	.word	0x240002e4

08016c18 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b084      	sub	sp, #16
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
 8016c20:	460b      	mov	r3, r1
 8016c22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016c24:	2300      	movs	r3, #0
 8016c26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016c28:	4b0d      	ldr	r3, [pc, #52]	; (8016c60 <CDC_Transmit_HS+0x48>)
 8016c2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d001      	beq.n	8016c3e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	e00b      	b.n	8016c56 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016c3e:	887b      	ldrh	r3, [r7, #2]
 8016c40:	461a      	mov	r2, r3
 8016c42:	6879      	ldr	r1, [r7, #4]
 8016c44:	4806      	ldr	r0, [pc, #24]	; (8016c60 <CDC_Transmit_HS+0x48>)
 8016c46:	f7fe fb07 	bl	8015258 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016c4a:	4805      	ldr	r0, [pc, #20]	; (8016c60 <CDC_Transmit_HS+0x48>)
 8016c4c:	f7fe fb44 	bl	80152d8 <USBD_CDC_TransmitPacket>
 8016c50:	4603      	mov	r3, r0
 8016c52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3710      	adds	r7, #16
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	2400176c 	.word	0x2400176c

08016c64 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016c64:	b480      	push	{r7}
 8016c66:	b087      	sub	sp, #28
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	60f8      	str	r0, [r7, #12]
 8016c6c:	60b9      	str	r1, [r7, #8]
 8016c6e:	4613      	mov	r3, r2
 8016c70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016c72:	2300      	movs	r3, #0
 8016c74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	371c      	adds	r7, #28
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c84:	4770      	bx	lr
	...

08016c88 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b083      	sub	sp, #12
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	4603      	mov	r3, r0
 8016c90:	6039      	str	r1, [r7, #0]
 8016c92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	2212      	movs	r2, #18
 8016c98:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016c9a:	4b03      	ldr	r3, [pc, #12]	; (8016ca8 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	370c      	adds	r7, #12
 8016ca0:	46bd      	mov	sp, r7
 8016ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca6:	4770      	bx	lr
 8016ca8:	240000cc 	.word	0x240000cc

08016cac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cac:	b480      	push	{r7}
 8016cae:	b083      	sub	sp, #12
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	6039      	str	r1, [r7, #0]
 8016cb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	2204      	movs	r2, #4
 8016cbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016cbe:	4b03      	ldr	r3, [pc, #12]	; (8016ccc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr
 8016ccc:	240000e0 	.word	0x240000e0

08016cd0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016cd0:	b580      	push	{r7, lr}
 8016cd2:	b082      	sub	sp, #8
 8016cd4:	af00      	add	r7, sp, #0
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	6039      	str	r1, [r7, #0]
 8016cda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016cdc:	79fb      	ldrb	r3, [r7, #7]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d105      	bne.n	8016cee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016ce2:	683a      	ldr	r2, [r7, #0]
 8016ce4:	4907      	ldr	r1, [pc, #28]	; (8016d04 <USBD_HS_ProductStrDescriptor+0x34>)
 8016ce6:	4808      	ldr	r0, [pc, #32]	; (8016d08 <USBD_HS_ProductStrDescriptor+0x38>)
 8016ce8:	f7ff fd84 	bl	80167f4 <USBD_GetString>
 8016cec:	e004      	b.n	8016cf8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016cee:	683a      	ldr	r2, [r7, #0]
 8016cf0:	4904      	ldr	r1, [pc, #16]	; (8016d04 <USBD_HS_ProductStrDescriptor+0x34>)
 8016cf2:	4805      	ldr	r0, [pc, #20]	; (8016d08 <USBD_HS_ProductStrDescriptor+0x38>)
 8016cf4:	f7ff fd7e 	bl	80167f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016cf8:	4b02      	ldr	r3, [pc, #8]	; (8016d04 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	3708      	adds	r7, #8
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	bd80      	pop	{r7, pc}
 8016d02:	bf00      	nop
 8016d04:	24002a48 	.word	0x24002a48
 8016d08:	0801c430 	.word	0x0801c430

08016d0c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	4603      	mov	r3, r0
 8016d14:	6039      	str	r1, [r7, #0]
 8016d16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016d18:	683a      	ldr	r2, [r7, #0]
 8016d1a:	4904      	ldr	r1, [pc, #16]	; (8016d2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016d1c:	4804      	ldr	r0, [pc, #16]	; (8016d30 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016d1e:	f7ff fd69 	bl	80167f4 <USBD_GetString>
  return USBD_StrDesc;
 8016d22:	4b02      	ldr	r3, [pc, #8]	; (8016d2c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}
 8016d2c:	24002a48 	.word	0x24002a48
 8016d30:	0801c44c 	.word	0x0801c44c

08016d34 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	4603      	mov	r3, r0
 8016d3c:	6039      	str	r1, [r7, #0]
 8016d3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	221a      	movs	r2, #26
 8016d44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016d46:	f000 f843 	bl	8016dd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016d4a:	4b02      	ldr	r3, [pc, #8]	; (8016d54 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	3708      	adds	r7, #8
 8016d50:	46bd      	mov	sp, r7
 8016d52:	bd80      	pop	{r7, pc}
 8016d54:	240000e4 	.word	0x240000e4

08016d58 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	4603      	mov	r3, r0
 8016d60:	6039      	str	r1, [r7, #0]
 8016d62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016d64:	79fb      	ldrb	r3, [r7, #7]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d105      	bne.n	8016d76 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016d6a:	683a      	ldr	r2, [r7, #0]
 8016d6c:	4907      	ldr	r1, [pc, #28]	; (8016d8c <USBD_HS_ConfigStrDescriptor+0x34>)
 8016d6e:	4808      	ldr	r0, [pc, #32]	; (8016d90 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016d70:	f7ff fd40 	bl	80167f4 <USBD_GetString>
 8016d74:	e004      	b.n	8016d80 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016d76:	683a      	ldr	r2, [r7, #0]
 8016d78:	4904      	ldr	r1, [pc, #16]	; (8016d8c <USBD_HS_ConfigStrDescriptor+0x34>)
 8016d7a:	4805      	ldr	r0, [pc, #20]	; (8016d90 <USBD_HS_ConfigStrDescriptor+0x38>)
 8016d7c:	f7ff fd3a 	bl	80167f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d80:	4b02      	ldr	r3, [pc, #8]	; (8016d8c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3708      	adds	r7, #8
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
 8016d8a:	bf00      	nop
 8016d8c:	24002a48 	.word	0x24002a48
 8016d90:	0801c450 	.word	0x0801c450

08016d94 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b082      	sub	sp, #8
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	6039      	str	r1, [r7, #0]
 8016d9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016da0:	79fb      	ldrb	r3, [r7, #7]
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d105      	bne.n	8016db2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016da6:	683a      	ldr	r2, [r7, #0]
 8016da8:	4907      	ldr	r1, [pc, #28]	; (8016dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016daa:	4808      	ldr	r0, [pc, #32]	; (8016dcc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016dac:	f7ff fd22 	bl	80167f4 <USBD_GetString>
 8016db0:	e004      	b.n	8016dbc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016db2:	683a      	ldr	r2, [r7, #0]
 8016db4:	4904      	ldr	r1, [pc, #16]	; (8016dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016db6:	4805      	ldr	r0, [pc, #20]	; (8016dcc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016db8:	f7ff fd1c 	bl	80167f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016dbc:	4b02      	ldr	r3, [pc, #8]	; (8016dc8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016dbe:	4618      	mov	r0, r3
 8016dc0:	3708      	adds	r7, #8
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	bf00      	nop
 8016dc8:	24002a48 	.word	0x24002a48
 8016dcc:	0801c45c 	.word	0x0801c45c

08016dd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016dd6:	4b0f      	ldr	r3, [pc, #60]	; (8016e14 <Get_SerialNum+0x44>)
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016ddc:	4b0e      	ldr	r3, [pc, #56]	; (8016e18 <Get_SerialNum+0x48>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016de2:	4b0e      	ldr	r3, [pc, #56]	; (8016e1c <Get_SerialNum+0x4c>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	4413      	add	r3, r2
 8016dee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d009      	beq.n	8016e0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016df6:	2208      	movs	r2, #8
 8016df8:	4909      	ldr	r1, [pc, #36]	; (8016e20 <Get_SerialNum+0x50>)
 8016dfa:	68f8      	ldr	r0, [r7, #12]
 8016dfc:	f000 f814 	bl	8016e28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e00:	2204      	movs	r2, #4
 8016e02:	4908      	ldr	r1, [pc, #32]	; (8016e24 <Get_SerialNum+0x54>)
 8016e04:	68b8      	ldr	r0, [r7, #8]
 8016e06:	f000 f80f 	bl	8016e28 <IntToUnicode>
  }
}
 8016e0a:	bf00      	nop
 8016e0c:	3710      	adds	r7, #16
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	1ff1e800 	.word	0x1ff1e800
 8016e18:	1ff1e804 	.word	0x1ff1e804
 8016e1c:	1ff1e808 	.word	0x1ff1e808
 8016e20:	240000e6 	.word	0x240000e6
 8016e24:	240000f6 	.word	0x240000f6

08016e28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b087      	sub	sp, #28
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	60f8      	str	r0, [r7, #12]
 8016e30:	60b9      	str	r1, [r7, #8]
 8016e32:	4613      	mov	r3, r2
 8016e34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	75fb      	strb	r3, [r7, #23]
 8016e3e:	e027      	b.n	8016e90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	0f1b      	lsrs	r3, r3, #28
 8016e44:	2b09      	cmp	r3, #9
 8016e46:	d80b      	bhi.n	8016e60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	0f1b      	lsrs	r3, r3, #28
 8016e4c:	b2da      	uxtb	r2, r3
 8016e4e:	7dfb      	ldrb	r3, [r7, #23]
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	4619      	mov	r1, r3
 8016e54:	68bb      	ldr	r3, [r7, #8]
 8016e56:	440b      	add	r3, r1
 8016e58:	3230      	adds	r2, #48	; 0x30
 8016e5a:	b2d2      	uxtb	r2, r2
 8016e5c:	701a      	strb	r2, [r3, #0]
 8016e5e:	e00a      	b.n	8016e76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016e60:	68fb      	ldr	r3, [r7, #12]
 8016e62:	0f1b      	lsrs	r3, r3, #28
 8016e64:	b2da      	uxtb	r2, r3
 8016e66:	7dfb      	ldrb	r3, [r7, #23]
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	440b      	add	r3, r1
 8016e70:	3237      	adds	r2, #55	; 0x37
 8016e72:	b2d2      	uxtb	r2, r2
 8016e74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	011b      	lsls	r3, r3, #4
 8016e7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016e7c:	7dfb      	ldrb	r3, [r7, #23]
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	3301      	adds	r3, #1
 8016e82:	68ba      	ldr	r2, [r7, #8]
 8016e84:	4413      	add	r3, r2
 8016e86:	2200      	movs	r2, #0
 8016e88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016e8a:	7dfb      	ldrb	r3, [r7, #23]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	75fb      	strb	r3, [r7, #23]
 8016e90:	7dfa      	ldrb	r2, [r7, #23]
 8016e92:	79fb      	ldrb	r3, [r7, #7]
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d3d3      	bcc.n	8016e40 <IntToUnicode+0x18>
  }
}
 8016e98:	bf00      	nop
 8016e9a:	bf00      	nop
 8016e9c:	371c      	adds	r7, #28
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr
	...

08016ea8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b0b2      	sub	sp, #200	; 0xc8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016eb0:	f107 0310 	add.w	r3, r7, #16
 8016eb4:	22b8      	movs	r2, #184	; 0xb8
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f001 fa92 	bl	80183e2 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	4a1a      	ldr	r2, [pc, #104]	; (8016f2c <HAL_PCD_MspInit+0x84>)
 8016ec4:	4293      	cmp	r3, r2
 8016ec6:	d12c      	bne.n	8016f22 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016ec8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016ecc:	f04f 0300 	mov.w	r3, #0
 8016ed0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016ed4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016ed8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016edc:	f107 0310 	add.w	r3, r7, #16
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7f3 fed3 	bl	800ac8c <HAL_RCCEx_PeriphCLKConfig>
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d001      	beq.n	8016ef0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016eec:	f7eb fec0 	bl	8002c70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016ef0:	f7f2 feec 	bl	8009ccc <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016ef4:	4b0e      	ldr	r3, [pc, #56]	; (8016f30 <HAL_PCD_MspInit+0x88>)
 8016ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016efa:	4a0d      	ldr	r2, [pc, #52]	; (8016f30 <HAL_PCD_MspInit+0x88>)
 8016efc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016f00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016f04:	4b0a      	ldr	r3, [pc, #40]	; (8016f30 <HAL_PCD_MspInit+0x88>)
 8016f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016f0e:	60fb      	str	r3, [r7, #12]
 8016f10:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016f12:	2200      	movs	r2, #0
 8016f14:	2100      	movs	r1, #0
 8016f16:	204d      	movs	r0, #77	; 0x4d
 8016f18:	f7ee fc5d 	bl	80057d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016f1c:	204d      	movs	r0, #77	; 0x4d
 8016f1e:	f7ee fc74 	bl	800580a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016f22:	bf00      	nop
 8016f24:	37c8      	adds	r7, #200	; 0xc8
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	40040000 	.word	0x40040000
 8016f30:	58024400 	.word	0x58024400

08016f34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016f48:	4619      	mov	r1, r3
 8016f4a:	4610      	mov	r0, r2
 8016f4c:	f7fe faed 	bl	801552a <USBD_LL_SetupStage>
}
 8016f50:	bf00      	nop
 8016f52:	3708      	adds	r7, #8
 8016f54:	46bd      	mov	sp, r7
 8016f56:	bd80      	pop	{r7, pc}

08016f58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b082      	sub	sp, #8
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]
 8016f60:	460b      	mov	r3, r1
 8016f62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016f6a:	78fa      	ldrb	r2, [r7, #3]
 8016f6c:	6879      	ldr	r1, [r7, #4]
 8016f6e:	4613      	mov	r3, r2
 8016f70:	00db      	lsls	r3, r3, #3
 8016f72:	4413      	add	r3, r2
 8016f74:	009b      	lsls	r3, r3, #2
 8016f76:	440b      	add	r3, r1
 8016f78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016f7c:	681a      	ldr	r2, [r3, #0]
 8016f7e:	78fb      	ldrb	r3, [r7, #3]
 8016f80:	4619      	mov	r1, r3
 8016f82:	f7fe fb27 	bl	80155d4 <USBD_LL_DataOutStage>
}
 8016f86:	bf00      	nop
 8016f88:	3708      	adds	r7, #8
 8016f8a:	46bd      	mov	sp, r7
 8016f8c:	bd80      	pop	{r7, pc}

08016f8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016f8e:	b580      	push	{r7, lr}
 8016f90:	b082      	sub	sp, #8
 8016f92:	af00      	add	r7, sp, #0
 8016f94:	6078      	str	r0, [r7, #4]
 8016f96:	460b      	mov	r3, r1
 8016f98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016fa0:	78fa      	ldrb	r2, [r7, #3]
 8016fa2:	6879      	ldr	r1, [r7, #4]
 8016fa4:	4613      	mov	r3, r2
 8016fa6:	00db      	lsls	r3, r3, #3
 8016fa8:	4413      	add	r3, r2
 8016faa:	009b      	lsls	r3, r3, #2
 8016fac:	440b      	add	r3, r1
 8016fae:	3348      	adds	r3, #72	; 0x48
 8016fb0:	681a      	ldr	r2, [r3, #0]
 8016fb2:	78fb      	ldrb	r3, [r7, #3]
 8016fb4:	4619      	mov	r1, r3
 8016fb6:	f7fe fbc0 	bl	801573a <USBD_LL_DataInStage>
}
 8016fba:	bf00      	nop
 8016fbc:	3708      	adds	r7, #8
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}

08016fc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fc2:	b580      	push	{r7, lr}
 8016fc4:	b082      	sub	sp, #8
 8016fc6:	af00      	add	r7, sp, #0
 8016fc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7fe fcfa 	bl	80159ca <USBD_LL_SOF>
}
 8016fd6:	bf00      	nop
 8016fd8:	3708      	adds	r7, #8
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b084      	sub	sp, #16
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016fe6:	2301      	movs	r3, #1
 8016fe8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	691b      	ldr	r3, [r3, #16]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d102      	bne.n	8016ff8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	73fb      	strb	r3, [r7, #15]
 8016ff6:	e008      	b.n	801700a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	691b      	ldr	r3, [r3, #16]
 8016ffc:	2b02      	cmp	r3, #2
 8016ffe:	d102      	bne.n	8017006 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017000:	2301      	movs	r3, #1
 8017002:	73fb      	strb	r3, [r7, #15]
 8017004:	e001      	b.n	801700a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017006:	f7eb fe33 	bl	8002c70 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017010:	7bfa      	ldrb	r2, [r7, #15]
 8017012:	4611      	mov	r1, r2
 8017014:	4618      	mov	r0, r3
 8017016:	f7fe fc94 	bl	8015942 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017020:	4618      	mov	r0, r3
 8017022:	f7fe fc3c 	bl	801589e <USBD_LL_Reset>
}
 8017026:	bf00      	nop
 8017028:	3710      	adds	r7, #16
 801702a:	46bd      	mov	sp, r7
 801702c:	bd80      	pop	{r7, pc}
	...

08017030 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801703e:	4618      	mov	r0, r3
 8017040:	f7fe fc8f 	bl	8015962 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	6812      	ldr	r2, [r2, #0]
 8017052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017056:	f043 0301 	orr.w	r3, r3, #1
 801705a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6a1b      	ldr	r3, [r3, #32]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d005      	beq.n	8017070 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017064:	4b04      	ldr	r3, [pc, #16]	; (8017078 <HAL_PCD_SuspendCallback+0x48>)
 8017066:	691b      	ldr	r3, [r3, #16]
 8017068:	4a03      	ldr	r2, [pc, #12]	; (8017078 <HAL_PCD_SuspendCallback+0x48>)
 801706a:	f043 0306 	orr.w	r3, r3, #6
 801706e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017070:	bf00      	nop
 8017072:	3708      	adds	r7, #8
 8017074:	46bd      	mov	sp, r7
 8017076:	bd80      	pop	{r7, pc}
 8017078:	e000ed00 	.word	0xe000ed00

0801707c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801708a:	4618      	mov	r0, r3
 801708c:	f7fe fc85 	bl	801599a <USBD_LL_Resume>
}
 8017090:	bf00      	nop
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}

08017098 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	460b      	mov	r3, r1
 80170a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80170aa:	78fa      	ldrb	r2, [r7, #3]
 80170ac:	4611      	mov	r1, r2
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7fe fcdd 	bl	8015a6e <USBD_LL_IsoOUTIncomplete>
}
 80170b4:	bf00      	nop
 80170b6:	3708      	adds	r7, #8
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}

080170bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	b082      	sub	sp, #8
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]
 80170c4:	460b      	mov	r3, r1
 80170c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80170ce:	78fa      	ldrb	r2, [r7, #3]
 80170d0:	4611      	mov	r1, r2
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7fe fc99 	bl	8015a0a <USBD_LL_IsoINIncomplete>
}
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80170ee:	4618      	mov	r0, r3
 80170f0:	f7fe fcef 	bl	8015ad2 <USBD_LL_DevConnected>
}
 80170f4:	bf00      	nop
 80170f6:	3708      	adds	r7, #8
 80170f8:	46bd      	mov	sp, r7
 80170fa:	bd80      	pop	{r7, pc}

080170fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801710a:	4618      	mov	r0, r3
 801710c:	f7fe fcec 	bl	8015ae8 <USBD_LL_DevDisconnected>
}
 8017110:	bf00      	nop
 8017112:	3708      	adds	r7, #8
 8017114:	46bd      	mov	sp, r7
 8017116:	bd80      	pop	{r7, pc}

08017118 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	781b      	ldrb	r3, [r3, #0]
 8017124:	2b01      	cmp	r3, #1
 8017126:	d140      	bne.n	80171aa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017128:	4a22      	ldr	r2, [pc, #136]	; (80171b4 <USBD_LL_Init+0x9c>)
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	4a20      	ldr	r2, [pc, #128]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017134:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017138:	4b1e      	ldr	r3, [pc, #120]	; (80171b4 <USBD_LL_Init+0x9c>)
 801713a:	4a1f      	ldr	r2, [pc, #124]	; (80171b8 <USBD_LL_Init+0xa0>)
 801713c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801713e:	4b1d      	ldr	r3, [pc, #116]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017140:	2209      	movs	r2, #9
 8017142:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017144:	4b1b      	ldr	r3, [pc, #108]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017146:	2202      	movs	r2, #2
 8017148:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801714a:	4b1a      	ldr	r3, [pc, #104]	; (80171b4 <USBD_LL_Init+0x9c>)
 801714c:	2200      	movs	r2, #0
 801714e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8017150:	4b18      	ldr	r3, [pc, #96]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017152:	2202      	movs	r2, #2
 8017154:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017156:	4b17      	ldr	r3, [pc, #92]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017158:	2200      	movs	r2, #0
 801715a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801715c:	4b15      	ldr	r3, [pc, #84]	; (80171b4 <USBD_LL_Init+0x9c>)
 801715e:	2200      	movs	r2, #0
 8017160:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8017162:	4b14      	ldr	r3, [pc, #80]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017164:	2200      	movs	r2, #0
 8017166:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017168:	4b12      	ldr	r3, [pc, #72]	; (80171b4 <USBD_LL_Init+0x9c>)
 801716a:	2200      	movs	r2, #0
 801716c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801716e:	4b11      	ldr	r3, [pc, #68]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017170:	2200      	movs	r2, #0
 8017172:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017174:	4b0f      	ldr	r3, [pc, #60]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017176:	2200      	movs	r2, #0
 8017178:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801717a:	480e      	ldr	r0, [pc, #56]	; (80171b4 <USBD_LL_Init+0x9c>)
 801717c:	f7f1 fab3 	bl	80086e6 <HAL_PCD_Init>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017186:	f7eb fd73 	bl	8002c70 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801718a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801718e:	4809      	ldr	r0, [pc, #36]	; (80171b4 <USBD_LL_Init+0x9c>)
 8017190:	f7f2 fd21 	bl	8009bd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017194:	2280      	movs	r2, #128	; 0x80
 8017196:	2100      	movs	r1, #0
 8017198:	4806      	ldr	r0, [pc, #24]	; (80171b4 <USBD_LL_Init+0x9c>)
 801719a:	f7f2 fcd5 	bl	8009b48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801719e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80171a2:	2101      	movs	r1, #1
 80171a4:	4803      	ldr	r0, [pc, #12]	; (80171b4 <USBD_LL_Init+0x9c>)
 80171a6:	f7f2 fccf 	bl	8009b48 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80171aa:	2300      	movs	r3, #0
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3708      	adds	r7, #8
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	24002c48 	.word	0x24002c48
 80171b8:	40040000 	.word	0x40040000

080171bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b084      	sub	sp, #16
 80171c0:	af00      	add	r7, sp, #0
 80171c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80171c4:	2300      	movs	r3, #0
 80171c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80171c8:	2300      	movs	r3, #0
 80171ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7f1 fbab 	bl	800892e <HAL_PCD_Start>
 80171d8:	4603      	mov	r3, r0
 80171da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80171dc:	7bfb      	ldrb	r3, [r7, #15]
 80171de:	4618      	mov	r0, r3
 80171e0:	f000 f942 	bl	8017468 <USBD_Get_USB_Status>
 80171e4:	4603      	mov	r3, r0
 80171e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80171e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	3710      	adds	r7, #16
 80171ee:	46bd      	mov	sp, r7
 80171f0:	bd80      	pop	{r7, pc}

080171f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80171f2:	b580      	push	{r7, lr}
 80171f4:	b084      	sub	sp, #16
 80171f6:	af00      	add	r7, sp, #0
 80171f8:	6078      	str	r0, [r7, #4]
 80171fa:	4608      	mov	r0, r1
 80171fc:	4611      	mov	r1, r2
 80171fe:	461a      	mov	r2, r3
 8017200:	4603      	mov	r3, r0
 8017202:	70fb      	strb	r3, [r7, #3]
 8017204:	460b      	mov	r3, r1
 8017206:	70bb      	strb	r3, [r7, #2]
 8017208:	4613      	mov	r3, r2
 801720a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801720c:	2300      	movs	r3, #0
 801720e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017210:	2300      	movs	r3, #0
 8017212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801721a:	78bb      	ldrb	r3, [r7, #2]
 801721c:	883a      	ldrh	r2, [r7, #0]
 801721e:	78f9      	ldrb	r1, [r7, #3]
 8017220:	f7f2 f8ab 	bl	800937a <HAL_PCD_EP_Open>
 8017224:	4603      	mov	r3, r0
 8017226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	4618      	mov	r0, r3
 801722c:	f000 f91c 	bl	8017468 <USBD_Get_USB_Status>
 8017230:	4603      	mov	r3, r0
 8017232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017234:	7bbb      	ldrb	r3, [r7, #14]
}
 8017236:	4618      	mov	r0, r3
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}

0801723e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801723e:	b580      	push	{r7, lr}
 8017240:	b084      	sub	sp, #16
 8017242:	af00      	add	r7, sp, #0
 8017244:	6078      	str	r0, [r7, #4]
 8017246:	460b      	mov	r3, r1
 8017248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801724a:	2300      	movs	r3, #0
 801724c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801724e:	2300      	movs	r3, #0
 8017250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017258:	78fa      	ldrb	r2, [r7, #3]
 801725a:	4611      	mov	r1, r2
 801725c:	4618      	mov	r0, r3
 801725e:	f7f2 f8f4 	bl	800944a <HAL_PCD_EP_Close>
 8017262:	4603      	mov	r3, r0
 8017264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017266:	7bfb      	ldrb	r3, [r7, #15]
 8017268:	4618      	mov	r0, r3
 801726a:	f000 f8fd 	bl	8017468 <USBD_Get_USB_Status>
 801726e:	4603      	mov	r3, r0
 8017270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017272:	7bbb      	ldrb	r3, [r7, #14]
}
 8017274:	4618      	mov	r0, r3
 8017276:	3710      	adds	r7, #16
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b084      	sub	sp, #16
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	460b      	mov	r3, r1
 8017286:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017288:	2300      	movs	r3, #0
 801728a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801728c:	2300      	movs	r3, #0
 801728e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017296:	78fa      	ldrb	r2, [r7, #3]
 8017298:	4611      	mov	r1, r2
 801729a:	4618      	mov	r0, r3
 801729c:	f7f2 f9ae 	bl	80095fc <HAL_PCD_EP_SetStall>
 80172a0:	4603      	mov	r3, r0
 80172a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172a4:	7bfb      	ldrb	r3, [r7, #15]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f000 f8de 	bl	8017468 <USBD_Get_USB_Status>
 80172ac:	4603      	mov	r3, r0
 80172ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80172b2:	4618      	mov	r0, r3
 80172b4:	3710      	adds	r7, #16
 80172b6:	46bd      	mov	sp, r7
 80172b8:	bd80      	pop	{r7, pc}

080172ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172ba:	b580      	push	{r7, lr}
 80172bc:	b084      	sub	sp, #16
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
 80172c2:	460b      	mov	r3, r1
 80172c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80172c6:	2300      	movs	r3, #0
 80172c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80172ca:	2300      	movs	r3, #0
 80172cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80172d4:	78fa      	ldrb	r2, [r7, #3]
 80172d6:	4611      	mov	r1, r2
 80172d8:	4618      	mov	r0, r3
 80172da:	f7f2 f9f3 	bl	80096c4 <HAL_PCD_EP_ClrStall>
 80172de:	4603      	mov	r3, r0
 80172e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80172e2:	7bfb      	ldrb	r3, [r7, #15]
 80172e4:	4618      	mov	r0, r3
 80172e6:	f000 f8bf 	bl	8017468 <USBD_Get_USB_Status>
 80172ea:	4603      	mov	r3, r0
 80172ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80172ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	3710      	adds	r7, #16
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}

080172f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80172f8:	b480      	push	{r7}
 80172fa:	b085      	sub	sp, #20
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	6078      	str	r0, [r7, #4]
 8017300:	460b      	mov	r3, r1
 8017302:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801730a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801730c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017310:	2b00      	cmp	r3, #0
 8017312:	da0b      	bge.n	801732c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017314:	78fb      	ldrb	r3, [r7, #3]
 8017316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801731a:	68f9      	ldr	r1, [r7, #12]
 801731c:	4613      	mov	r3, r2
 801731e:	00db      	lsls	r3, r3, #3
 8017320:	4413      	add	r3, r2
 8017322:	009b      	lsls	r3, r3, #2
 8017324:	440b      	add	r3, r1
 8017326:	333e      	adds	r3, #62	; 0x3e
 8017328:	781b      	ldrb	r3, [r3, #0]
 801732a:	e00b      	b.n	8017344 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801732c:	78fb      	ldrb	r3, [r7, #3]
 801732e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017332:	68f9      	ldr	r1, [r7, #12]
 8017334:	4613      	mov	r3, r2
 8017336:	00db      	lsls	r3, r3, #3
 8017338:	4413      	add	r3, r2
 801733a:	009b      	lsls	r3, r3, #2
 801733c:	440b      	add	r3, r1
 801733e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017342:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017344:	4618      	mov	r0, r3
 8017346:	3714      	adds	r7, #20
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr

08017350 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b084      	sub	sp, #16
 8017354:	af00      	add	r7, sp, #0
 8017356:	6078      	str	r0, [r7, #4]
 8017358:	460b      	mov	r3, r1
 801735a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801735c:	2300      	movs	r3, #0
 801735e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017360:	2300      	movs	r3, #0
 8017362:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801736a:	78fa      	ldrb	r2, [r7, #3]
 801736c:	4611      	mov	r1, r2
 801736e:	4618      	mov	r0, r3
 8017370:	f7f1 ffde 	bl	8009330 <HAL_PCD_SetAddress>
 8017374:	4603      	mov	r3, r0
 8017376:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017378:	7bfb      	ldrb	r3, [r7, #15]
 801737a:	4618      	mov	r0, r3
 801737c:	f000 f874 	bl	8017468 <USBD_Get_USB_Status>
 8017380:	4603      	mov	r3, r0
 8017382:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017384:	7bbb      	ldrb	r3, [r7, #14]
}
 8017386:	4618      	mov	r0, r3
 8017388:	3710      	adds	r7, #16
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}

0801738e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801738e:	b580      	push	{r7, lr}
 8017390:	b086      	sub	sp, #24
 8017392:	af00      	add	r7, sp, #0
 8017394:	60f8      	str	r0, [r7, #12]
 8017396:	607a      	str	r2, [r7, #4]
 8017398:	603b      	str	r3, [r7, #0]
 801739a:	460b      	mov	r3, r1
 801739c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801739e:	2300      	movs	r3, #0
 80173a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173a2:	2300      	movs	r3, #0
 80173a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80173ac:	7af9      	ldrb	r1, [r7, #11]
 80173ae:	683b      	ldr	r3, [r7, #0]
 80173b0:	687a      	ldr	r2, [r7, #4]
 80173b2:	f7f2 f8e8 	bl	8009586 <HAL_PCD_EP_Transmit>
 80173b6:	4603      	mov	r3, r0
 80173b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173ba:	7dfb      	ldrb	r3, [r7, #23]
 80173bc:	4618      	mov	r0, r3
 80173be:	f000 f853 	bl	8017468 <USBD_Get_USB_Status>
 80173c2:	4603      	mov	r3, r0
 80173c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80173c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3718      	adds	r7, #24
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b086      	sub	sp, #24
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	60f8      	str	r0, [r7, #12]
 80173d8:	607a      	str	r2, [r7, #4]
 80173da:	603b      	str	r3, [r7, #0]
 80173dc:	460b      	mov	r3, r1
 80173de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173e0:	2300      	movs	r3, #0
 80173e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173e4:	2300      	movs	r3, #0
 80173e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80173ee:	7af9      	ldrb	r1, [r7, #11]
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	687a      	ldr	r2, [r7, #4]
 80173f4:	f7f2 f873 	bl	80094de <HAL_PCD_EP_Receive>
 80173f8:	4603      	mov	r3, r0
 80173fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173fc:	7dfb      	ldrb	r3, [r7, #23]
 80173fe:	4618      	mov	r0, r3
 8017400:	f000 f832 	bl	8017468 <USBD_Get_USB_Status>
 8017404:	4603      	mov	r3, r0
 8017406:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017408:	7dbb      	ldrb	r3, [r7, #22]
}
 801740a:	4618      	mov	r0, r3
 801740c:	3718      	adds	r7, #24
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}

08017412 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017412:	b580      	push	{r7, lr}
 8017414:	b082      	sub	sp, #8
 8017416:	af00      	add	r7, sp, #0
 8017418:	6078      	str	r0, [r7, #4]
 801741a:	460b      	mov	r3, r1
 801741c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017424:	78fa      	ldrb	r2, [r7, #3]
 8017426:	4611      	mov	r1, r2
 8017428:	4618      	mov	r0, r3
 801742a:	f7f2 f894 	bl	8009556 <HAL_PCD_EP_GetRxCount>
 801742e:	4603      	mov	r3, r0
}
 8017430:	4618      	mov	r0, r3
 8017432:	3708      	adds	r7, #8
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017438:	b480      	push	{r7}
 801743a:	b083      	sub	sp, #12
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017440:	4b03      	ldr	r3, [pc, #12]	; (8017450 <USBD_static_malloc+0x18>)
}
 8017442:	4618      	mov	r0, r3
 8017444:	370c      	adds	r7, #12
 8017446:	46bd      	mov	sp, r7
 8017448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744c:	4770      	bx	lr
 801744e:	bf00      	nop
 8017450:	24003154 	.word	0x24003154

08017454 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017454:	b480      	push	{r7}
 8017456:	b083      	sub	sp, #12
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801745c:	bf00      	nop
 801745e:	370c      	adds	r7, #12
 8017460:	46bd      	mov	sp, r7
 8017462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017466:	4770      	bx	lr

08017468 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
 801746e:	4603      	mov	r3, r0
 8017470:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017472:	2300      	movs	r3, #0
 8017474:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017476:	79fb      	ldrb	r3, [r7, #7]
 8017478:	2b03      	cmp	r3, #3
 801747a:	d817      	bhi.n	80174ac <USBD_Get_USB_Status+0x44>
 801747c:	a201      	add	r2, pc, #4	; (adr r2, 8017484 <USBD_Get_USB_Status+0x1c>)
 801747e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017482:	bf00      	nop
 8017484:	08017495 	.word	0x08017495
 8017488:	0801749b 	.word	0x0801749b
 801748c:	080174a1 	.word	0x080174a1
 8017490:	080174a7 	.word	0x080174a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017494:	2300      	movs	r3, #0
 8017496:	73fb      	strb	r3, [r7, #15]
    break;
 8017498:	e00b      	b.n	80174b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801749a:	2303      	movs	r3, #3
 801749c:	73fb      	strb	r3, [r7, #15]
    break;
 801749e:	e008      	b.n	80174b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80174a0:	2301      	movs	r3, #1
 80174a2:	73fb      	strb	r3, [r7, #15]
    break;
 80174a4:	e005      	b.n	80174b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80174a6:	2303      	movs	r3, #3
 80174a8:	73fb      	strb	r3, [r7, #15]
    break;
 80174aa:	e002      	b.n	80174b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80174ac:	2303      	movs	r3, #3
 80174ae:	73fb      	strb	r3, [r7, #15]
    break;
 80174b0:	bf00      	nop
  }
  return usb_status;
 80174b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3714      	adds	r7, #20
 80174b8:	46bd      	mov	sp, r7
 80174ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174be:	4770      	bx	lr

080174c0 <__cvt>:
 80174c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80174c2:	ed2d 8b02 	vpush	{d8}
 80174c6:	eeb0 8b40 	vmov.f64	d8, d0
 80174ca:	b085      	sub	sp, #20
 80174cc:	4617      	mov	r7, r2
 80174ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80174d0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80174d2:	ee18 2a90 	vmov	r2, s17
 80174d6:	f025 0520 	bic.w	r5, r5, #32
 80174da:	2a00      	cmp	r2, #0
 80174dc:	bfb6      	itet	lt
 80174de:	222d      	movlt	r2, #45	; 0x2d
 80174e0:	2200      	movge	r2, #0
 80174e2:	eeb1 8b40 	vneglt.f64	d8, d0
 80174e6:	2d46      	cmp	r5, #70	; 0x46
 80174e8:	460c      	mov	r4, r1
 80174ea:	701a      	strb	r2, [r3, #0]
 80174ec:	d004      	beq.n	80174f8 <__cvt+0x38>
 80174ee:	2d45      	cmp	r5, #69	; 0x45
 80174f0:	d100      	bne.n	80174f4 <__cvt+0x34>
 80174f2:	3401      	adds	r4, #1
 80174f4:	2102      	movs	r1, #2
 80174f6:	e000      	b.n	80174fa <__cvt+0x3a>
 80174f8:	2103      	movs	r1, #3
 80174fa:	ab03      	add	r3, sp, #12
 80174fc:	9301      	str	r3, [sp, #4]
 80174fe:	ab02      	add	r3, sp, #8
 8017500:	9300      	str	r3, [sp, #0]
 8017502:	4622      	mov	r2, r4
 8017504:	4633      	mov	r3, r6
 8017506:	eeb0 0b48 	vmov.f64	d0, d8
 801750a:	f001 f891 	bl	8018630 <_dtoa_r>
 801750e:	2d47      	cmp	r5, #71	; 0x47
 8017510:	d101      	bne.n	8017516 <__cvt+0x56>
 8017512:	07fb      	lsls	r3, r7, #31
 8017514:	d51a      	bpl.n	801754c <__cvt+0x8c>
 8017516:	2d46      	cmp	r5, #70	; 0x46
 8017518:	eb00 0204 	add.w	r2, r0, r4
 801751c:	d10c      	bne.n	8017538 <__cvt+0x78>
 801751e:	7803      	ldrb	r3, [r0, #0]
 8017520:	2b30      	cmp	r3, #48	; 0x30
 8017522:	d107      	bne.n	8017534 <__cvt+0x74>
 8017524:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752c:	bf1c      	itt	ne
 801752e:	f1c4 0401 	rsbne	r4, r4, #1
 8017532:	6034      	strne	r4, [r6, #0]
 8017534:	6833      	ldr	r3, [r6, #0]
 8017536:	441a      	add	r2, r3
 8017538:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801753c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017540:	bf08      	it	eq
 8017542:	9203      	streq	r2, [sp, #12]
 8017544:	2130      	movs	r1, #48	; 0x30
 8017546:	9b03      	ldr	r3, [sp, #12]
 8017548:	4293      	cmp	r3, r2
 801754a:	d307      	bcc.n	801755c <__cvt+0x9c>
 801754c:	9b03      	ldr	r3, [sp, #12]
 801754e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017550:	1a1b      	subs	r3, r3, r0
 8017552:	6013      	str	r3, [r2, #0]
 8017554:	b005      	add	sp, #20
 8017556:	ecbd 8b02 	vpop	{d8}
 801755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801755c:	1c5c      	adds	r4, r3, #1
 801755e:	9403      	str	r4, [sp, #12]
 8017560:	7019      	strb	r1, [r3, #0]
 8017562:	e7f0      	b.n	8017546 <__cvt+0x86>

08017564 <__exponent>:
 8017564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017566:	4603      	mov	r3, r0
 8017568:	2900      	cmp	r1, #0
 801756a:	bfb8      	it	lt
 801756c:	4249      	neglt	r1, r1
 801756e:	f803 2b02 	strb.w	r2, [r3], #2
 8017572:	bfb4      	ite	lt
 8017574:	222d      	movlt	r2, #45	; 0x2d
 8017576:	222b      	movge	r2, #43	; 0x2b
 8017578:	2909      	cmp	r1, #9
 801757a:	7042      	strb	r2, [r0, #1]
 801757c:	dd2a      	ble.n	80175d4 <__exponent+0x70>
 801757e:	f10d 0207 	add.w	r2, sp, #7
 8017582:	4617      	mov	r7, r2
 8017584:	260a      	movs	r6, #10
 8017586:	4694      	mov	ip, r2
 8017588:	fb91 f5f6 	sdiv	r5, r1, r6
 801758c:	fb06 1415 	mls	r4, r6, r5, r1
 8017590:	3430      	adds	r4, #48	; 0x30
 8017592:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017596:	460c      	mov	r4, r1
 8017598:	2c63      	cmp	r4, #99	; 0x63
 801759a:	f102 32ff 	add.w	r2, r2, #4294967295
 801759e:	4629      	mov	r1, r5
 80175a0:	dcf1      	bgt.n	8017586 <__exponent+0x22>
 80175a2:	3130      	adds	r1, #48	; 0x30
 80175a4:	f1ac 0402 	sub.w	r4, ip, #2
 80175a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80175ac:	1c41      	adds	r1, r0, #1
 80175ae:	4622      	mov	r2, r4
 80175b0:	42ba      	cmp	r2, r7
 80175b2:	d30a      	bcc.n	80175ca <__exponent+0x66>
 80175b4:	f10d 0209 	add.w	r2, sp, #9
 80175b8:	eba2 020c 	sub.w	r2, r2, ip
 80175bc:	42bc      	cmp	r4, r7
 80175be:	bf88      	it	hi
 80175c0:	2200      	movhi	r2, #0
 80175c2:	4413      	add	r3, r2
 80175c4:	1a18      	subs	r0, r3, r0
 80175c6:	b003      	add	sp, #12
 80175c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80175ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80175d2:	e7ed      	b.n	80175b0 <__exponent+0x4c>
 80175d4:	2330      	movs	r3, #48	; 0x30
 80175d6:	3130      	adds	r1, #48	; 0x30
 80175d8:	7083      	strb	r3, [r0, #2]
 80175da:	70c1      	strb	r1, [r0, #3]
 80175dc:	1d03      	adds	r3, r0, #4
 80175de:	e7f1      	b.n	80175c4 <__exponent+0x60>

080175e0 <_printf_float>:
 80175e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e4:	b08b      	sub	sp, #44	; 0x2c
 80175e6:	460c      	mov	r4, r1
 80175e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80175ec:	4616      	mov	r6, r2
 80175ee:	461f      	mov	r7, r3
 80175f0:	4605      	mov	r5, r0
 80175f2:	f000 feff 	bl	80183f4 <_localeconv_r>
 80175f6:	f8d0 b000 	ldr.w	fp, [r0]
 80175fa:	4658      	mov	r0, fp
 80175fc:	f7e8 fee8 	bl	80003d0 <strlen>
 8017600:	2300      	movs	r3, #0
 8017602:	9308      	str	r3, [sp, #32]
 8017604:	f8d8 3000 	ldr.w	r3, [r8]
 8017608:	f894 9018 	ldrb.w	r9, [r4, #24]
 801760c:	6822      	ldr	r2, [r4, #0]
 801760e:	3307      	adds	r3, #7
 8017610:	f023 0307 	bic.w	r3, r3, #7
 8017614:	f103 0108 	add.w	r1, r3, #8
 8017618:	f8c8 1000 	str.w	r1, [r8]
 801761c:	ed93 0b00 	vldr	d0, [r3]
 8017620:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8017880 <_printf_float+0x2a0>
 8017624:	eeb0 7bc0 	vabs.f64	d7, d0
 8017628:	eeb4 7b46 	vcmp.f64	d7, d6
 801762c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017630:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8017634:	4682      	mov	sl, r0
 8017636:	dd24      	ble.n	8017682 <_printf_float+0xa2>
 8017638:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801763c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017640:	d502      	bpl.n	8017648 <_printf_float+0x68>
 8017642:	232d      	movs	r3, #45	; 0x2d
 8017644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017648:	498f      	ldr	r1, [pc, #572]	; (8017888 <_printf_float+0x2a8>)
 801764a:	4b90      	ldr	r3, [pc, #576]	; (801788c <_printf_float+0x2ac>)
 801764c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8017650:	bf94      	ite	ls
 8017652:	4688      	movls	r8, r1
 8017654:	4698      	movhi	r8, r3
 8017656:	2303      	movs	r3, #3
 8017658:	6123      	str	r3, [r4, #16]
 801765a:	f022 0204 	bic.w	r2, r2, #4
 801765e:	2300      	movs	r3, #0
 8017660:	6022      	str	r2, [r4, #0]
 8017662:	9304      	str	r3, [sp, #16]
 8017664:	9700      	str	r7, [sp, #0]
 8017666:	4633      	mov	r3, r6
 8017668:	aa09      	add	r2, sp, #36	; 0x24
 801766a:	4621      	mov	r1, r4
 801766c:	4628      	mov	r0, r5
 801766e:	f000 f9d1 	bl	8017a14 <_printf_common>
 8017672:	3001      	adds	r0, #1
 8017674:	f040 808a 	bne.w	801778c <_printf_float+0x1ac>
 8017678:	f04f 30ff 	mov.w	r0, #4294967295
 801767c:	b00b      	add	sp, #44	; 0x2c
 801767e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017682:	eeb4 0b40 	vcmp.f64	d0, d0
 8017686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801768a:	d709      	bvc.n	80176a0 <_printf_float+0xc0>
 801768c:	ee10 3a90 	vmov	r3, s1
 8017690:	2b00      	cmp	r3, #0
 8017692:	bfbc      	itt	lt
 8017694:	232d      	movlt	r3, #45	; 0x2d
 8017696:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801769a:	497d      	ldr	r1, [pc, #500]	; (8017890 <_printf_float+0x2b0>)
 801769c:	4b7d      	ldr	r3, [pc, #500]	; (8017894 <_printf_float+0x2b4>)
 801769e:	e7d5      	b.n	801764c <_printf_float+0x6c>
 80176a0:	6863      	ldr	r3, [r4, #4]
 80176a2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80176a6:	9104      	str	r1, [sp, #16]
 80176a8:	1c59      	adds	r1, r3, #1
 80176aa:	d13c      	bne.n	8017726 <_printf_float+0x146>
 80176ac:	2306      	movs	r3, #6
 80176ae:	6063      	str	r3, [r4, #4]
 80176b0:	2300      	movs	r3, #0
 80176b2:	9303      	str	r3, [sp, #12]
 80176b4:	ab08      	add	r3, sp, #32
 80176b6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80176ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80176be:	ab07      	add	r3, sp, #28
 80176c0:	6861      	ldr	r1, [r4, #4]
 80176c2:	9300      	str	r3, [sp, #0]
 80176c4:	6022      	str	r2, [r4, #0]
 80176c6:	f10d 031b 	add.w	r3, sp, #27
 80176ca:	4628      	mov	r0, r5
 80176cc:	f7ff fef8 	bl	80174c0 <__cvt>
 80176d0:	9b04      	ldr	r3, [sp, #16]
 80176d2:	9907      	ldr	r1, [sp, #28]
 80176d4:	2b47      	cmp	r3, #71	; 0x47
 80176d6:	4680      	mov	r8, r0
 80176d8:	d108      	bne.n	80176ec <_printf_float+0x10c>
 80176da:	1cc8      	adds	r0, r1, #3
 80176dc:	db02      	blt.n	80176e4 <_printf_float+0x104>
 80176de:	6863      	ldr	r3, [r4, #4]
 80176e0:	4299      	cmp	r1, r3
 80176e2:	dd41      	ble.n	8017768 <_printf_float+0x188>
 80176e4:	f1a9 0902 	sub.w	r9, r9, #2
 80176e8:	fa5f f989 	uxtb.w	r9, r9
 80176ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80176f0:	d820      	bhi.n	8017734 <_printf_float+0x154>
 80176f2:	3901      	subs	r1, #1
 80176f4:	464a      	mov	r2, r9
 80176f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80176fa:	9107      	str	r1, [sp, #28]
 80176fc:	f7ff ff32 	bl	8017564 <__exponent>
 8017700:	9a08      	ldr	r2, [sp, #32]
 8017702:	9004      	str	r0, [sp, #16]
 8017704:	1813      	adds	r3, r2, r0
 8017706:	2a01      	cmp	r2, #1
 8017708:	6123      	str	r3, [r4, #16]
 801770a:	dc02      	bgt.n	8017712 <_printf_float+0x132>
 801770c:	6822      	ldr	r2, [r4, #0]
 801770e:	07d2      	lsls	r2, r2, #31
 8017710:	d501      	bpl.n	8017716 <_printf_float+0x136>
 8017712:	3301      	adds	r3, #1
 8017714:	6123      	str	r3, [r4, #16]
 8017716:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d0a2      	beq.n	8017664 <_printf_float+0x84>
 801771e:	232d      	movs	r3, #45	; 0x2d
 8017720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017724:	e79e      	b.n	8017664 <_printf_float+0x84>
 8017726:	9904      	ldr	r1, [sp, #16]
 8017728:	2947      	cmp	r1, #71	; 0x47
 801772a:	d1c1      	bne.n	80176b0 <_printf_float+0xd0>
 801772c:	2b00      	cmp	r3, #0
 801772e:	d1bf      	bne.n	80176b0 <_printf_float+0xd0>
 8017730:	2301      	movs	r3, #1
 8017732:	e7bc      	b.n	80176ae <_printf_float+0xce>
 8017734:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017738:	d118      	bne.n	801776c <_printf_float+0x18c>
 801773a:	2900      	cmp	r1, #0
 801773c:	6863      	ldr	r3, [r4, #4]
 801773e:	dd0b      	ble.n	8017758 <_printf_float+0x178>
 8017740:	6121      	str	r1, [r4, #16]
 8017742:	b913      	cbnz	r3, 801774a <_printf_float+0x16a>
 8017744:	6822      	ldr	r2, [r4, #0]
 8017746:	07d0      	lsls	r0, r2, #31
 8017748:	d502      	bpl.n	8017750 <_printf_float+0x170>
 801774a:	3301      	adds	r3, #1
 801774c:	440b      	add	r3, r1
 801774e:	6123      	str	r3, [r4, #16]
 8017750:	2300      	movs	r3, #0
 8017752:	65a1      	str	r1, [r4, #88]	; 0x58
 8017754:	9304      	str	r3, [sp, #16]
 8017756:	e7de      	b.n	8017716 <_printf_float+0x136>
 8017758:	b913      	cbnz	r3, 8017760 <_printf_float+0x180>
 801775a:	6822      	ldr	r2, [r4, #0]
 801775c:	07d2      	lsls	r2, r2, #31
 801775e:	d501      	bpl.n	8017764 <_printf_float+0x184>
 8017760:	3302      	adds	r3, #2
 8017762:	e7f4      	b.n	801774e <_printf_float+0x16e>
 8017764:	2301      	movs	r3, #1
 8017766:	e7f2      	b.n	801774e <_printf_float+0x16e>
 8017768:	f04f 0967 	mov.w	r9, #103	; 0x67
 801776c:	9b08      	ldr	r3, [sp, #32]
 801776e:	4299      	cmp	r1, r3
 8017770:	db05      	blt.n	801777e <_printf_float+0x19e>
 8017772:	6823      	ldr	r3, [r4, #0]
 8017774:	6121      	str	r1, [r4, #16]
 8017776:	07d8      	lsls	r0, r3, #31
 8017778:	d5ea      	bpl.n	8017750 <_printf_float+0x170>
 801777a:	1c4b      	adds	r3, r1, #1
 801777c:	e7e7      	b.n	801774e <_printf_float+0x16e>
 801777e:	2900      	cmp	r1, #0
 8017780:	bfd4      	ite	le
 8017782:	f1c1 0202 	rsble	r2, r1, #2
 8017786:	2201      	movgt	r2, #1
 8017788:	4413      	add	r3, r2
 801778a:	e7e0      	b.n	801774e <_printf_float+0x16e>
 801778c:	6823      	ldr	r3, [r4, #0]
 801778e:	055a      	lsls	r2, r3, #21
 8017790:	d407      	bmi.n	80177a2 <_printf_float+0x1c2>
 8017792:	6923      	ldr	r3, [r4, #16]
 8017794:	4642      	mov	r2, r8
 8017796:	4631      	mov	r1, r6
 8017798:	4628      	mov	r0, r5
 801779a:	47b8      	blx	r7
 801779c:	3001      	adds	r0, #1
 801779e:	d12a      	bne.n	80177f6 <_printf_float+0x216>
 80177a0:	e76a      	b.n	8017678 <_printf_float+0x98>
 80177a2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80177a6:	f240 80e0 	bls.w	801796a <_printf_float+0x38a>
 80177aa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80177ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80177b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177b6:	d133      	bne.n	8017820 <_printf_float+0x240>
 80177b8:	4a37      	ldr	r2, [pc, #220]	; (8017898 <_printf_float+0x2b8>)
 80177ba:	2301      	movs	r3, #1
 80177bc:	4631      	mov	r1, r6
 80177be:	4628      	mov	r0, r5
 80177c0:	47b8      	blx	r7
 80177c2:	3001      	adds	r0, #1
 80177c4:	f43f af58 	beq.w	8017678 <_printf_float+0x98>
 80177c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	db02      	blt.n	80177d6 <_printf_float+0x1f6>
 80177d0:	6823      	ldr	r3, [r4, #0]
 80177d2:	07d8      	lsls	r0, r3, #31
 80177d4:	d50f      	bpl.n	80177f6 <_printf_float+0x216>
 80177d6:	4653      	mov	r3, sl
 80177d8:	465a      	mov	r2, fp
 80177da:	4631      	mov	r1, r6
 80177dc:	4628      	mov	r0, r5
 80177de:	47b8      	blx	r7
 80177e0:	3001      	adds	r0, #1
 80177e2:	f43f af49 	beq.w	8017678 <_printf_float+0x98>
 80177e6:	f04f 0800 	mov.w	r8, #0
 80177ea:	f104 091a 	add.w	r9, r4, #26
 80177ee:	9b08      	ldr	r3, [sp, #32]
 80177f0:	3b01      	subs	r3, #1
 80177f2:	4543      	cmp	r3, r8
 80177f4:	dc09      	bgt.n	801780a <_printf_float+0x22a>
 80177f6:	6823      	ldr	r3, [r4, #0]
 80177f8:	079b      	lsls	r3, r3, #30
 80177fa:	f100 8106 	bmi.w	8017a0a <_printf_float+0x42a>
 80177fe:	68e0      	ldr	r0, [r4, #12]
 8017800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017802:	4298      	cmp	r0, r3
 8017804:	bfb8      	it	lt
 8017806:	4618      	movlt	r0, r3
 8017808:	e738      	b.n	801767c <_printf_float+0x9c>
 801780a:	2301      	movs	r3, #1
 801780c:	464a      	mov	r2, r9
 801780e:	4631      	mov	r1, r6
 8017810:	4628      	mov	r0, r5
 8017812:	47b8      	blx	r7
 8017814:	3001      	adds	r0, #1
 8017816:	f43f af2f 	beq.w	8017678 <_printf_float+0x98>
 801781a:	f108 0801 	add.w	r8, r8, #1
 801781e:	e7e6      	b.n	80177ee <_printf_float+0x20e>
 8017820:	9b07      	ldr	r3, [sp, #28]
 8017822:	2b00      	cmp	r3, #0
 8017824:	dc3a      	bgt.n	801789c <_printf_float+0x2bc>
 8017826:	4a1c      	ldr	r2, [pc, #112]	; (8017898 <_printf_float+0x2b8>)
 8017828:	2301      	movs	r3, #1
 801782a:	4631      	mov	r1, r6
 801782c:	4628      	mov	r0, r5
 801782e:	47b8      	blx	r7
 8017830:	3001      	adds	r0, #1
 8017832:	f43f af21 	beq.w	8017678 <_printf_float+0x98>
 8017836:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801783a:	4313      	orrs	r3, r2
 801783c:	d102      	bne.n	8017844 <_printf_float+0x264>
 801783e:	6823      	ldr	r3, [r4, #0]
 8017840:	07d9      	lsls	r1, r3, #31
 8017842:	d5d8      	bpl.n	80177f6 <_printf_float+0x216>
 8017844:	4653      	mov	r3, sl
 8017846:	465a      	mov	r2, fp
 8017848:	4631      	mov	r1, r6
 801784a:	4628      	mov	r0, r5
 801784c:	47b8      	blx	r7
 801784e:	3001      	adds	r0, #1
 8017850:	f43f af12 	beq.w	8017678 <_printf_float+0x98>
 8017854:	f04f 0900 	mov.w	r9, #0
 8017858:	f104 0a1a 	add.w	sl, r4, #26
 801785c:	9b07      	ldr	r3, [sp, #28]
 801785e:	425b      	negs	r3, r3
 8017860:	454b      	cmp	r3, r9
 8017862:	dc01      	bgt.n	8017868 <_printf_float+0x288>
 8017864:	9b08      	ldr	r3, [sp, #32]
 8017866:	e795      	b.n	8017794 <_printf_float+0x1b4>
 8017868:	2301      	movs	r3, #1
 801786a:	4652      	mov	r2, sl
 801786c:	4631      	mov	r1, r6
 801786e:	4628      	mov	r0, r5
 8017870:	47b8      	blx	r7
 8017872:	3001      	adds	r0, #1
 8017874:	f43f af00 	beq.w	8017678 <_printf_float+0x98>
 8017878:	f109 0901 	add.w	r9, r9, #1
 801787c:	e7ee      	b.n	801785c <_printf_float+0x27c>
 801787e:	bf00      	nop
 8017880:	ffffffff 	.word	0xffffffff
 8017884:	7fefffff 	.word	0x7fefffff
 8017888:	0801c53c 	.word	0x0801c53c
 801788c:	0801c540 	.word	0x0801c540
 8017890:	0801c544 	.word	0x0801c544
 8017894:	0801c548 	.word	0x0801c548
 8017898:	0801c8d8 	.word	0x0801c8d8
 801789c:	9a08      	ldr	r2, [sp, #32]
 801789e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80178a0:	429a      	cmp	r2, r3
 80178a2:	bfa8      	it	ge
 80178a4:	461a      	movge	r2, r3
 80178a6:	2a00      	cmp	r2, #0
 80178a8:	4691      	mov	r9, r2
 80178aa:	dc38      	bgt.n	801791e <_printf_float+0x33e>
 80178ac:	2300      	movs	r3, #0
 80178ae:	9305      	str	r3, [sp, #20]
 80178b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80178b4:	f104 021a 	add.w	r2, r4, #26
 80178b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80178ba:	9905      	ldr	r1, [sp, #20]
 80178bc:	9304      	str	r3, [sp, #16]
 80178be:	eba3 0309 	sub.w	r3, r3, r9
 80178c2:	428b      	cmp	r3, r1
 80178c4:	dc33      	bgt.n	801792e <_printf_float+0x34e>
 80178c6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	db3c      	blt.n	8017948 <_printf_float+0x368>
 80178ce:	6823      	ldr	r3, [r4, #0]
 80178d0:	07da      	lsls	r2, r3, #31
 80178d2:	d439      	bmi.n	8017948 <_printf_float+0x368>
 80178d4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80178d8:	eba2 0903 	sub.w	r9, r2, r3
 80178dc:	9b04      	ldr	r3, [sp, #16]
 80178de:	1ad2      	subs	r2, r2, r3
 80178e0:	4591      	cmp	r9, r2
 80178e2:	bfa8      	it	ge
 80178e4:	4691      	movge	r9, r2
 80178e6:	f1b9 0f00 	cmp.w	r9, #0
 80178ea:	dc35      	bgt.n	8017958 <_printf_float+0x378>
 80178ec:	f04f 0800 	mov.w	r8, #0
 80178f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80178f4:	f104 0a1a 	add.w	sl, r4, #26
 80178f8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80178fc:	1a9b      	subs	r3, r3, r2
 80178fe:	eba3 0309 	sub.w	r3, r3, r9
 8017902:	4543      	cmp	r3, r8
 8017904:	f77f af77 	ble.w	80177f6 <_printf_float+0x216>
 8017908:	2301      	movs	r3, #1
 801790a:	4652      	mov	r2, sl
 801790c:	4631      	mov	r1, r6
 801790e:	4628      	mov	r0, r5
 8017910:	47b8      	blx	r7
 8017912:	3001      	adds	r0, #1
 8017914:	f43f aeb0 	beq.w	8017678 <_printf_float+0x98>
 8017918:	f108 0801 	add.w	r8, r8, #1
 801791c:	e7ec      	b.n	80178f8 <_printf_float+0x318>
 801791e:	4613      	mov	r3, r2
 8017920:	4631      	mov	r1, r6
 8017922:	4642      	mov	r2, r8
 8017924:	4628      	mov	r0, r5
 8017926:	47b8      	blx	r7
 8017928:	3001      	adds	r0, #1
 801792a:	d1bf      	bne.n	80178ac <_printf_float+0x2cc>
 801792c:	e6a4      	b.n	8017678 <_printf_float+0x98>
 801792e:	2301      	movs	r3, #1
 8017930:	4631      	mov	r1, r6
 8017932:	4628      	mov	r0, r5
 8017934:	9204      	str	r2, [sp, #16]
 8017936:	47b8      	blx	r7
 8017938:	3001      	adds	r0, #1
 801793a:	f43f ae9d 	beq.w	8017678 <_printf_float+0x98>
 801793e:	9b05      	ldr	r3, [sp, #20]
 8017940:	9a04      	ldr	r2, [sp, #16]
 8017942:	3301      	adds	r3, #1
 8017944:	9305      	str	r3, [sp, #20]
 8017946:	e7b7      	b.n	80178b8 <_printf_float+0x2d8>
 8017948:	4653      	mov	r3, sl
 801794a:	465a      	mov	r2, fp
 801794c:	4631      	mov	r1, r6
 801794e:	4628      	mov	r0, r5
 8017950:	47b8      	blx	r7
 8017952:	3001      	adds	r0, #1
 8017954:	d1be      	bne.n	80178d4 <_printf_float+0x2f4>
 8017956:	e68f      	b.n	8017678 <_printf_float+0x98>
 8017958:	9a04      	ldr	r2, [sp, #16]
 801795a:	464b      	mov	r3, r9
 801795c:	4442      	add	r2, r8
 801795e:	4631      	mov	r1, r6
 8017960:	4628      	mov	r0, r5
 8017962:	47b8      	blx	r7
 8017964:	3001      	adds	r0, #1
 8017966:	d1c1      	bne.n	80178ec <_printf_float+0x30c>
 8017968:	e686      	b.n	8017678 <_printf_float+0x98>
 801796a:	9a08      	ldr	r2, [sp, #32]
 801796c:	2a01      	cmp	r2, #1
 801796e:	dc01      	bgt.n	8017974 <_printf_float+0x394>
 8017970:	07db      	lsls	r3, r3, #31
 8017972:	d537      	bpl.n	80179e4 <_printf_float+0x404>
 8017974:	2301      	movs	r3, #1
 8017976:	4642      	mov	r2, r8
 8017978:	4631      	mov	r1, r6
 801797a:	4628      	mov	r0, r5
 801797c:	47b8      	blx	r7
 801797e:	3001      	adds	r0, #1
 8017980:	f43f ae7a 	beq.w	8017678 <_printf_float+0x98>
 8017984:	4653      	mov	r3, sl
 8017986:	465a      	mov	r2, fp
 8017988:	4631      	mov	r1, r6
 801798a:	4628      	mov	r0, r5
 801798c:	47b8      	blx	r7
 801798e:	3001      	adds	r0, #1
 8017990:	f43f ae72 	beq.w	8017678 <_printf_float+0x98>
 8017994:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017998:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801799c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179a0:	9b08      	ldr	r3, [sp, #32]
 80179a2:	d01a      	beq.n	80179da <_printf_float+0x3fa>
 80179a4:	3b01      	subs	r3, #1
 80179a6:	f108 0201 	add.w	r2, r8, #1
 80179aa:	4631      	mov	r1, r6
 80179ac:	4628      	mov	r0, r5
 80179ae:	47b8      	blx	r7
 80179b0:	3001      	adds	r0, #1
 80179b2:	d10e      	bne.n	80179d2 <_printf_float+0x3f2>
 80179b4:	e660      	b.n	8017678 <_printf_float+0x98>
 80179b6:	2301      	movs	r3, #1
 80179b8:	464a      	mov	r2, r9
 80179ba:	4631      	mov	r1, r6
 80179bc:	4628      	mov	r0, r5
 80179be:	47b8      	blx	r7
 80179c0:	3001      	adds	r0, #1
 80179c2:	f43f ae59 	beq.w	8017678 <_printf_float+0x98>
 80179c6:	f108 0801 	add.w	r8, r8, #1
 80179ca:	9b08      	ldr	r3, [sp, #32]
 80179cc:	3b01      	subs	r3, #1
 80179ce:	4543      	cmp	r3, r8
 80179d0:	dcf1      	bgt.n	80179b6 <_printf_float+0x3d6>
 80179d2:	9b04      	ldr	r3, [sp, #16]
 80179d4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80179d8:	e6dd      	b.n	8017796 <_printf_float+0x1b6>
 80179da:	f04f 0800 	mov.w	r8, #0
 80179de:	f104 091a 	add.w	r9, r4, #26
 80179e2:	e7f2      	b.n	80179ca <_printf_float+0x3ea>
 80179e4:	2301      	movs	r3, #1
 80179e6:	4642      	mov	r2, r8
 80179e8:	e7df      	b.n	80179aa <_printf_float+0x3ca>
 80179ea:	2301      	movs	r3, #1
 80179ec:	464a      	mov	r2, r9
 80179ee:	4631      	mov	r1, r6
 80179f0:	4628      	mov	r0, r5
 80179f2:	47b8      	blx	r7
 80179f4:	3001      	adds	r0, #1
 80179f6:	f43f ae3f 	beq.w	8017678 <_printf_float+0x98>
 80179fa:	f108 0801 	add.w	r8, r8, #1
 80179fe:	68e3      	ldr	r3, [r4, #12]
 8017a00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017a02:	1a5b      	subs	r3, r3, r1
 8017a04:	4543      	cmp	r3, r8
 8017a06:	dcf0      	bgt.n	80179ea <_printf_float+0x40a>
 8017a08:	e6f9      	b.n	80177fe <_printf_float+0x21e>
 8017a0a:	f04f 0800 	mov.w	r8, #0
 8017a0e:	f104 0919 	add.w	r9, r4, #25
 8017a12:	e7f4      	b.n	80179fe <_printf_float+0x41e>

08017a14 <_printf_common>:
 8017a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a18:	4616      	mov	r6, r2
 8017a1a:	4699      	mov	r9, r3
 8017a1c:	688a      	ldr	r2, [r1, #8]
 8017a1e:	690b      	ldr	r3, [r1, #16]
 8017a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017a24:	4293      	cmp	r3, r2
 8017a26:	bfb8      	it	lt
 8017a28:	4613      	movlt	r3, r2
 8017a2a:	6033      	str	r3, [r6, #0]
 8017a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017a30:	4607      	mov	r7, r0
 8017a32:	460c      	mov	r4, r1
 8017a34:	b10a      	cbz	r2, 8017a3a <_printf_common+0x26>
 8017a36:	3301      	adds	r3, #1
 8017a38:	6033      	str	r3, [r6, #0]
 8017a3a:	6823      	ldr	r3, [r4, #0]
 8017a3c:	0699      	lsls	r1, r3, #26
 8017a3e:	bf42      	ittt	mi
 8017a40:	6833      	ldrmi	r3, [r6, #0]
 8017a42:	3302      	addmi	r3, #2
 8017a44:	6033      	strmi	r3, [r6, #0]
 8017a46:	6825      	ldr	r5, [r4, #0]
 8017a48:	f015 0506 	ands.w	r5, r5, #6
 8017a4c:	d106      	bne.n	8017a5c <_printf_common+0x48>
 8017a4e:	f104 0a19 	add.w	sl, r4, #25
 8017a52:	68e3      	ldr	r3, [r4, #12]
 8017a54:	6832      	ldr	r2, [r6, #0]
 8017a56:	1a9b      	subs	r3, r3, r2
 8017a58:	42ab      	cmp	r3, r5
 8017a5a:	dc26      	bgt.n	8017aaa <_printf_common+0x96>
 8017a5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a60:	1e13      	subs	r3, r2, #0
 8017a62:	6822      	ldr	r2, [r4, #0]
 8017a64:	bf18      	it	ne
 8017a66:	2301      	movne	r3, #1
 8017a68:	0692      	lsls	r2, r2, #26
 8017a6a:	d42b      	bmi.n	8017ac4 <_printf_common+0xb0>
 8017a6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a70:	4649      	mov	r1, r9
 8017a72:	4638      	mov	r0, r7
 8017a74:	47c0      	blx	r8
 8017a76:	3001      	adds	r0, #1
 8017a78:	d01e      	beq.n	8017ab8 <_printf_common+0xa4>
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	6922      	ldr	r2, [r4, #16]
 8017a7e:	f003 0306 	and.w	r3, r3, #6
 8017a82:	2b04      	cmp	r3, #4
 8017a84:	bf02      	ittt	eq
 8017a86:	68e5      	ldreq	r5, [r4, #12]
 8017a88:	6833      	ldreq	r3, [r6, #0]
 8017a8a:	1aed      	subeq	r5, r5, r3
 8017a8c:	68a3      	ldr	r3, [r4, #8]
 8017a8e:	bf0c      	ite	eq
 8017a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a94:	2500      	movne	r5, #0
 8017a96:	4293      	cmp	r3, r2
 8017a98:	bfc4      	itt	gt
 8017a9a:	1a9b      	subgt	r3, r3, r2
 8017a9c:	18ed      	addgt	r5, r5, r3
 8017a9e:	2600      	movs	r6, #0
 8017aa0:	341a      	adds	r4, #26
 8017aa2:	42b5      	cmp	r5, r6
 8017aa4:	d11a      	bne.n	8017adc <_printf_common+0xc8>
 8017aa6:	2000      	movs	r0, #0
 8017aa8:	e008      	b.n	8017abc <_printf_common+0xa8>
 8017aaa:	2301      	movs	r3, #1
 8017aac:	4652      	mov	r2, sl
 8017aae:	4649      	mov	r1, r9
 8017ab0:	4638      	mov	r0, r7
 8017ab2:	47c0      	blx	r8
 8017ab4:	3001      	adds	r0, #1
 8017ab6:	d103      	bne.n	8017ac0 <_printf_common+0xac>
 8017ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8017abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ac0:	3501      	adds	r5, #1
 8017ac2:	e7c6      	b.n	8017a52 <_printf_common+0x3e>
 8017ac4:	18e1      	adds	r1, r4, r3
 8017ac6:	1c5a      	adds	r2, r3, #1
 8017ac8:	2030      	movs	r0, #48	; 0x30
 8017aca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017ace:	4422      	add	r2, r4
 8017ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017ad4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017ad8:	3302      	adds	r3, #2
 8017ada:	e7c7      	b.n	8017a6c <_printf_common+0x58>
 8017adc:	2301      	movs	r3, #1
 8017ade:	4622      	mov	r2, r4
 8017ae0:	4649      	mov	r1, r9
 8017ae2:	4638      	mov	r0, r7
 8017ae4:	47c0      	blx	r8
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	d0e6      	beq.n	8017ab8 <_printf_common+0xa4>
 8017aea:	3601      	adds	r6, #1
 8017aec:	e7d9      	b.n	8017aa2 <_printf_common+0x8e>
	...

08017af0 <_printf_i>:
 8017af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017af4:	7e0f      	ldrb	r7, [r1, #24]
 8017af6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017af8:	2f78      	cmp	r7, #120	; 0x78
 8017afa:	4691      	mov	r9, r2
 8017afc:	4680      	mov	r8, r0
 8017afe:	460c      	mov	r4, r1
 8017b00:	469a      	mov	sl, r3
 8017b02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017b06:	d807      	bhi.n	8017b18 <_printf_i+0x28>
 8017b08:	2f62      	cmp	r7, #98	; 0x62
 8017b0a:	d80a      	bhi.n	8017b22 <_printf_i+0x32>
 8017b0c:	2f00      	cmp	r7, #0
 8017b0e:	f000 80d4 	beq.w	8017cba <_printf_i+0x1ca>
 8017b12:	2f58      	cmp	r7, #88	; 0x58
 8017b14:	f000 80c0 	beq.w	8017c98 <_printf_i+0x1a8>
 8017b18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017b20:	e03a      	b.n	8017b98 <_printf_i+0xa8>
 8017b22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017b26:	2b15      	cmp	r3, #21
 8017b28:	d8f6      	bhi.n	8017b18 <_printf_i+0x28>
 8017b2a:	a101      	add	r1, pc, #4	; (adr r1, 8017b30 <_printf_i+0x40>)
 8017b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017b30:	08017b89 	.word	0x08017b89
 8017b34:	08017b9d 	.word	0x08017b9d
 8017b38:	08017b19 	.word	0x08017b19
 8017b3c:	08017b19 	.word	0x08017b19
 8017b40:	08017b19 	.word	0x08017b19
 8017b44:	08017b19 	.word	0x08017b19
 8017b48:	08017b9d 	.word	0x08017b9d
 8017b4c:	08017b19 	.word	0x08017b19
 8017b50:	08017b19 	.word	0x08017b19
 8017b54:	08017b19 	.word	0x08017b19
 8017b58:	08017b19 	.word	0x08017b19
 8017b5c:	08017ca1 	.word	0x08017ca1
 8017b60:	08017bc9 	.word	0x08017bc9
 8017b64:	08017c5b 	.word	0x08017c5b
 8017b68:	08017b19 	.word	0x08017b19
 8017b6c:	08017b19 	.word	0x08017b19
 8017b70:	08017cc3 	.word	0x08017cc3
 8017b74:	08017b19 	.word	0x08017b19
 8017b78:	08017bc9 	.word	0x08017bc9
 8017b7c:	08017b19 	.word	0x08017b19
 8017b80:	08017b19 	.word	0x08017b19
 8017b84:	08017c63 	.word	0x08017c63
 8017b88:	682b      	ldr	r3, [r5, #0]
 8017b8a:	1d1a      	adds	r2, r3, #4
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	602a      	str	r2, [r5, #0]
 8017b90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b98:	2301      	movs	r3, #1
 8017b9a:	e09f      	b.n	8017cdc <_printf_i+0x1ec>
 8017b9c:	6820      	ldr	r0, [r4, #0]
 8017b9e:	682b      	ldr	r3, [r5, #0]
 8017ba0:	0607      	lsls	r7, r0, #24
 8017ba2:	f103 0104 	add.w	r1, r3, #4
 8017ba6:	6029      	str	r1, [r5, #0]
 8017ba8:	d501      	bpl.n	8017bae <_printf_i+0xbe>
 8017baa:	681e      	ldr	r6, [r3, #0]
 8017bac:	e003      	b.n	8017bb6 <_printf_i+0xc6>
 8017bae:	0646      	lsls	r6, r0, #25
 8017bb0:	d5fb      	bpl.n	8017baa <_printf_i+0xba>
 8017bb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017bb6:	2e00      	cmp	r6, #0
 8017bb8:	da03      	bge.n	8017bc2 <_printf_i+0xd2>
 8017bba:	232d      	movs	r3, #45	; 0x2d
 8017bbc:	4276      	negs	r6, r6
 8017bbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017bc2:	485a      	ldr	r0, [pc, #360]	; (8017d2c <_printf_i+0x23c>)
 8017bc4:	230a      	movs	r3, #10
 8017bc6:	e012      	b.n	8017bee <_printf_i+0xfe>
 8017bc8:	682b      	ldr	r3, [r5, #0]
 8017bca:	6820      	ldr	r0, [r4, #0]
 8017bcc:	1d19      	adds	r1, r3, #4
 8017bce:	6029      	str	r1, [r5, #0]
 8017bd0:	0605      	lsls	r5, r0, #24
 8017bd2:	d501      	bpl.n	8017bd8 <_printf_i+0xe8>
 8017bd4:	681e      	ldr	r6, [r3, #0]
 8017bd6:	e002      	b.n	8017bde <_printf_i+0xee>
 8017bd8:	0641      	lsls	r1, r0, #25
 8017bda:	d5fb      	bpl.n	8017bd4 <_printf_i+0xe4>
 8017bdc:	881e      	ldrh	r6, [r3, #0]
 8017bde:	4853      	ldr	r0, [pc, #332]	; (8017d2c <_printf_i+0x23c>)
 8017be0:	2f6f      	cmp	r7, #111	; 0x6f
 8017be2:	bf0c      	ite	eq
 8017be4:	2308      	moveq	r3, #8
 8017be6:	230a      	movne	r3, #10
 8017be8:	2100      	movs	r1, #0
 8017bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017bee:	6865      	ldr	r5, [r4, #4]
 8017bf0:	60a5      	str	r5, [r4, #8]
 8017bf2:	2d00      	cmp	r5, #0
 8017bf4:	bfa2      	ittt	ge
 8017bf6:	6821      	ldrge	r1, [r4, #0]
 8017bf8:	f021 0104 	bicge.w	r1, r1, #4
 8017bfc:	6021      	strge	r1, [r4, #0]
 8017bfe:	b90e      	cbnz	r6, 8017c04 <_printf_i+0x114>
 8017c00:	2d00      	cmp	r5, #0
 8017c02:	d04b      	beq.n	8017c9c <_printf_i+0x1ac>
 8017c04:	4615      	mov	r5, r2
 8017c06:	fbb6 f1f3 	udiv	r1, r6, r3
 8017c0a:	fb03 6711 	mls	r7, r3, r1, r6
 8017c0e:	5dc7      	ldrb	r7, [r0, r7]
 8017c10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017c14:	4637      	mov	r7, r6
 8017c16:	42bb      	cmp	r3, r7
 8017c18:	460e      	mov	r6, r1
 8017c1a:	d9f4      	bls.n	8017c06 <_printf_i+0x116>
 8017c1c:	2b08      	cmp	r3, #8
 8017c1e:	d10b      	bne.n	8017c38 <_printf_i+0x148>
 8017c20:	6823      	ldr	r3, [r4, #0]
 8017c22:	07de      	lsls	r6, r3, #31
 8017c24:	d508      	bpl.n	8017c38 <_printf_i+0x148>
 8017c26:	6923      	ldr	r3, [r4, #16]
 8017c28:	6861      	ldr	r1, [r4, #4]
 8017c2a:	4299      	cmp	r1, r3
 8017c2c:	bfde      	ittt	le
 8017c2e:	2330      	movle	r3, #48	; 0x30
 8017c30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017c34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017c38:	1b52      	subs	r2, r2, r5
 8017c3a:	6122      	str	r2, [r4, #16]
 8017c3c:	f8cd a000 	str.w	sl, [sp]
 8017c40:	464b      	mov	r3, r9
 8017c42:	aa03      	add	r2, sp, #12
 8017c44:	4621      	mov	r1, r4
 8017c46:	4640      	mov	r0, r8
 8017c48:	f7ff fee4 	bl	8017a14 <_printf_common>
 8017c4c:	3001      	adds	r0, #1
 8017c4e:	d14a      	bne.n	8017ce6 <_printf_i+0x1f6>
 8017c50:	f04f 30ff 	mov.w	r0, #4294967295
 8017c54:	b004      	add	sp, #16
 8017c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c5a:	6823      	ldr	r3, [r4, #0]
 8017c5c:	f043 0320 	orr.w	r3, r3, #32
 8017c60:	6023      	str	r3, [r4, #0]
 8017c62:	4833      	ldr	r0, [pc, #204]	; (8017d30 <_printf_i+0x240>)
 8017c64:	2778      	movs	r7, #120	; 0x78
 8017c66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c6a:	6823      	ldr	r3, [r4, #0]
 8017c6c:	6829      	ldr	r1, [r5, #0]
 8017c6e:	061f      	lsls	r7, r3, #24
 8017c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c74:	d402      	bmi.n	8017c7c <_printf_i+0x18c>
 8017c76:	065f      	lsls	r7, r3, #25
 8017c78:	bf48      	it	mi
 8017c7a:	b2b6      	uxthmi	r6, r6
 8017c7c:	07df      	lsls	r7, r3, #31
 8017c7e:	bf48      	it	mi
 8017c80:	f043 0320 	orrmi.w	r3, r3, #32
 8017c84:	6029      	str	r1, [r5, #0]
 8017c86:	bf48      	it	mi
 8017c88:	6023      	strmi	r3, [r4, #0]
 8017c8a:	b91e      	cbnz	r6, 8017c94 <_printf_i+0x1a4>
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	f023 0320 	bic.w	r3, r3, #32
 8017c92:	6023      	str	r3, [r4, #0]
 8017c94:	2310      	movs	r3, #16
 8017c96:	e7a7      	b.n	8017be8 <_printf_i+0xf8>
 8017c98:	4824      	ldr	r0, [pc, #144]	; (8017d2c <_printf_i+0x23c>)
 8017c9a:	e7e4      	b.n	8017c66 <_printf_i+0x176>
 8017c9c:	4615      	mov	r5, r2
 8017c9e:	e7bd      	b.n	8017c1c <_printf_i+0x12c>
 8017ca0:	682b      	ldr	r3, [r5, #0]
 8017ca2:	6826      	ldr	r6, [r4, #0]
 8017ca4:	6961      	ldr	r1, [r4, #20]
 8017ca6:	1d18      	adds	r0, r3, #4
 8017ca8:	6028      	str	r0, [r5, #0]
 8017caa:	0635      	lsls	r5, r6, #24
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	d501      	bpl.n	8017cb4 <_printf_i+0x1c4>
 8017cb0:	6019      	str	r1, [r3, #0]
 8017cb2:	e002      	b.n	8017cba <_printf_i+0x1ca>
 8017cb4:	0670      	lsls	r0, r6, #25
 8017cb6:	d5fb      	bpl.n	8017cb0 <_printf_i+0x1c0>
 8017cb8:	8019      	strh	r1, [r3, #0]
 8017cba:	2300      	movs	r3, #0
 8017cbc:	6123      	str	r3, [r4, #16]
 8017cbe:	4615      	mov	r5, r2
 8017cc0:	e7bc      	b.n	8017c3c <_printf_i+0x14c>
 8017cc2:	682b      	ldr	r3, [r5, #0]
 8017cc4:	1d1a      	adds	r2, r3, #4
 8017cc6:	602a      	str	r2, [r5, #0]
 8017cc8:	681d      	ldr	r5, [r3, #0]
 8017cca:	6862      	ldr	r2, [r4, #4]
 8017ccc:	2100      	movs	r1, #0
 8017cce:	4628      	mov	r0, r5
 8017cd0:	f7e8 fb2e 	bl	8000330 <memchr>
 8017cd4:	b108      	cbz	r0, 8017cda <_printf_i+0x1ea>
 8017cd6:	1b40      	subs	r0, r0, r5
 8017cd8:	6060      	str	r0, [r4, #4]
 8017cda:	6863      	ldr	r3, [r4, #4]
 8017cdc:	6123      	str	r3, [r4, #16]
 8017cde:	2300      	movs	r3, #0
 8017ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ce4:	e7aa      	b.n	8017c3c <_printf_i+0x14c>
 8017ce6:	6923      	ldr	r3, [r4, #16]
 8017ce8:	462a      	mov	r2, r5
 8017cea:	4649      	mov	r1, r9
 8017cec:	4640      	mov	r0, r8
 8017cee:	47d0      	blx	sl
 8017cf0:	3001      	adds	r0, #1
 8017cf2:	d0ad      	beq.n	8017c50 <_printf_i+0x160>
 8017cf4:	6823      	ldr	r3, [r4, #0]
 8017cf6:	079b      	lsls	r3, r3, #30
 8017cf8:	d413      	bmi.n	8017d22 <_printf_i+0x232>
 8017cfa:	68e0      	ldr	r0, [r4, #12]
 8017cfc:	9b03      	ldr	r3, [sp, #12]
 8017cfe:	4298      	cmp	r0, r3
 8017d00:	bfb8      	it	lt
 8017d02:	4618      	movlt	r0, r3
 8017d04:	e7a6      	b.n	8017c54 <_printf_i+0x164>
 8017d06:	2301      	movs	r3, #1
 8017d08:	4632      	mov	r2, r6
 8017d0a:	4649      	mov	r1, r9
 8017d0c:	4640      	mov	r0, r8
 8017d0e:	47d0      	blx	sl
 8017d10:	3001      	adds	r0, #1
 8017d12:	d09d      	beq.n	8017c50 <_printf_i+0x160>
 8017d14:	3501      	adds	r5, #1
 8017d16:	68e3      	ldr	r3, [r4, #12]
 8017d18:	9903      	ldr	r1, [sp, #12]
 8017d1a:	1a5b      	subs	r3, r3, r1
 8017d1c:	42ab      	cmp	r3, r5
 8017d1e:	dcf2      	bgt.n	8017d06 <_printf_i+0x216>
 8017d20:	e7eb      	b.n	8017cfa <_printf_i+0x20a>
 8017d22:	2500      	movs	r5, #0
 8017d24:	f104 0619 	add.w	r6, r4, #25
 8017d28:	e7f5      	b.n	8017d16 <_printf_i+0x226>
 8017d2a:	bf00      	nop
 8017d2c:	0801c54c 	.word	0x0801c54c
 8017d30:	0801c55d 	.word	0x0801c55d

08017d34 <_scanf_float>:
 8017d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d38:	b087      	sub	sp, #28
 8017d3a:	4617      	mov	r7, r2
 8017d3c:	9303      	str	r3, [sp, #12]
 8017d3e:	688b      	ldr	r3, [r1, #8]
 8017d40:	1e5a      	subs	r2, r3, #1
 8017d42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017d46:	bf83      	ittte	hi
 8017d48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017d4c:	195b      	addhi	r3, r3, r5
 8017d4e:	9302      	strhi	r3, [sp, #8]
 8017d50:	2300      	movls	r3, #0
 8017d52:	bf86      	itte	hi
 8017d54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017d58:	608b      	strhi	r3, [r1, #8]
 8017d5a:	9302      	strls	r3, [sp, #8]
 8017d5c:	680b      	ldr	r3, [r1, #0]
 8017d5e:	468b      	mov	fp, r1
 8017d60:	2500      	movs	r5, #0
 8017d62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017d66:	f84b 3b1c 	str.w	r3, [fp], #28
 8017d6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017d6e:	4680      	mov	r8, r0
 8017d70:	460c      	mov	r4, r1
 8017d72:	465e      	mov	r6, fp
 8017d74:	46aa      	mov	sl, r5
 8017d76:	46a9      	mov	r9, r5
 8017d78:	9501      	str	r5, [sp, #4]
 8017d7a:	68a2      	ldr	r2, [r4, #8]
 8017d7c:	b152      	cbz	r2, 8017d94 <_scanf_float+0x60>
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	781b      	ldrb	r3, [r3, #0]
 8017d82:	2b4e      	cmp	r3, #78	; 0x4e
 8017d84:	d864      	bhi.n	8017e50 <_scanf_float+0x11c>
 8017d86:	2b40      	cmp	r3, #64	; 0x40
 8017d88:	d83c      	bhi.n	8017e04 <_scanf_float+0xd0>
 8017d8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017d8e:	b2c8      	uxtb	r0, r1
 8017d90:	280e      	cmp	r0, #14
 8017d92:	d93a      	bls.n	8017e0a <_scanf_float+0xd6>
 8017d94:	f1b9 0f00 	cmp.w	r9, #0
 8017d98:	d003      	beq.n	8017da2 <_scanf_float+0x6e>
 8017d9a:	6823      	ldr	r3, [r4, #0]
 8017d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017da0:	6023      	str	r3, [r4, #0]
 8017da2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017da6:	f1ba 0f01 	cmp.w	sl, #1
 8017daa:	f200 8113 	bhi.w	8017fd4 <_scanf_float+0x2a0>
 8017dae:	455e      	cmp	r6, fp
 8017db0:	f200 8105 	bhi.w	8017fbe <_scanf_float+0x28a>
 8017db4:	2501      	movs	r5, #1
 8017db6:	4628      	mov	r0, r5
 8017db8:	b007      	add	sp, #28
 8017dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dbe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017dc2:	2a0d      	cmp	r2, #13
 8017dc4:	d8e6      	bhi.n	8017d94 <_scanf_float+0x60>
 8017dc6:	a101      	add	r1, pc, #4	; (adr r1, 8017dcc <_scanf_float+0x98>)
 8017dc8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017dcc:	08017f0b 	.word	0x08017f0b
 8017dd0:	08017d95 	.word	0x08017d95
 8017dd4:	08017d95 	.word	0x08017d95
 8017dd8:	08017d95 	.word	0x08017d95
 8017ddc:	08017f6b 	.word	0x08017f6b
 8017de0:	08017f43 	.word	0x08017f43
 8017de4:	08017d95 	.word	0x08017d95
 8017de8:	08017d95 	.word	0x08017d95
 8017dec:	08017f19 	.word	0x08017f19
 8017df0:	08017d95 	.word	0x08017d95
 8017df4:	08017d95 	.word	0x08017d95
 8017df8:	08017d95 	.word	0x08017d95
 8017dfc:	08017d95 	.word	0x08017d95
 8017e00:	08017ed1 	.word	0x08017ed1
 8017e04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017e08:	e7db      	b.n	8017dc2 <_scanf_float+0x8e>
 8017e0a:	290e      	cmp	r1, #14
 8017e0c:	d8c2      	bhi.n	8017d94 <_scanf_float+0x60>
 8017e0e:	a001      	add	r0, pc, #4	; (adr r0, 8017e14 <_scanf_float+0xe0>)
 8017e10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017e14:	08017ec3 	.word	0x08017ec3
 8017e18:	08017d95 	.word	0x08017d95
 8017e1c:	08017ec3 	.word	0x08017ec3
 8017e20:	08017f57 	.word	0x08017f57
 8017e24:	08017d95 	.word	0x08017d95
 8017e28:	08017e71 	.word	0x08017e71
 8017e2c:	08017ead 	.word	0x08017ead
 8017e30:	08017ead 	.word	0x08017ead
 8017e34:	08017ead 	.word	0x08017ead
 8017e38:	08017ead 	.word	0x08017ead
 8017e3c:	08017ead 	.word	0x08017ead
 8017e40:	08017ead 	.word	0x08017ead
 8017e44:	08017ead 	.word	0x08017ead
 8017e48:	08017ead 	.word	0x08017ead
 8017e4c:	08017ead 	.word	0x08017ead
 8017e50:	2b6e      	cmp	r3, #110	; 0x6e
 8017e52:	d809      	bhi.n	8017e68 <_scanf_float+0x134>
 8017e54:	2b60      	cmp	r3, #96	; 0x60
 8017e56:	d8b2      	bhi.n	8017dbe <_scanf_float+0x8a>
 8017e58:	2b54      	cmp	r3, #84	; 0x54
 8017e5a:	d077      	beq.n	8017f4c <_scanf_float+0x218>
 8017e5c:	2b59      	cmp	r3, #89	; 0x59
 8017e5e:	d199      	bne.n	8017d94 <_scanf_float+0x60>
 8017e60:	2d07      	cmp	r5, #7
 8017e62:	d197      	bne.n	8017d94 <_scanf_float+0x60>
 8017e64:	2508      	movs	r5, #8
 8017e66:	e029      	b.n	8017ebc <_scanf_float+0x188>
 8017e68:	2b74      	cmp	r3, #116	; 0x74
 8017e6a:	d06f      	beq.n	8017f4c <_scanf_float+0x218>
 8017e6c:	2b79      	cmp	r3, #121	; 0x79
 8017e6e:	e7f6      	b.n	8017e5e <_scanf_float+0x12a>
 8017e70:	6821      	ldr	r1, [r4, #0]
 8017e72:	05c8      	lsls	r0, r1, #23
 8017e74:	d51a      	bpl.n	8017eac <_scanf_float+0x178>
 8017e76:	9b02      	ldr	r3, [sp, #8]
 8017e78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017e7c:	6021      	str	r1, [r4, #0]
 8017e7e:	f109 0901 	add.w	r9, r9, #1
 8017e82:	b11b      	cbz	r3, 8017e8c <_scanf_float+0x158>
 8017e84:	3b01      	subs	r3, #1
 8017e86:	3201      	adds	r2, #1
 8017e88:	9302      	str	r3, [sp, #8]
 8017e8a:	60a2      	str	r2, [r4, #8]
 8017e8c:	68a3      	ldr	r3, [r4, #8]
 8017e8e:	3b01      	subs	r3, #1
 8017e90:	60a3      	str	r3, [r4, #8]
 8017e92:	6923      	ldr	r3, [r4, #16]
 8017e94:	3301      	adds	r3, #1
 8017e96:	6123      	str	r3, [r4, #16]
 8017e98:	687b      	ldr	r3, [r7, #4]
 8017e9a:	3b01      	subs	r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	607b      	str	r3, [r7, #4]
 8017ea0:	f340 8084 	ble.w	8017fac <_scanf_float+0x278>
 8017ea4:	683b      	ldr	r3, [r7, #0]
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	603b      	str	r3, [r7, #0]
 8017eaa:	e766      	b.n	8017d7a <_scanf_float+0x46>
 8017eac:	eb1a 0f05 	cmn.w	sl, r5
 8017eb0:	f47f af70 	bne.w	8017d94 <_scanf_float+0x60>
 8017eb4:	6822      	ldr	r2, [r4, #0]
 8017eb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017eba:	6022      	str	r2, [r4, #0]
 8017ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8017ec0:	e7e4      	b.n	8017e8c <_scanf_float+0x158>
 8017ec2:	6822      	ldr	r2, [r4, #0]
 8017ec4:	0610      	lsls	r0, r2, #24
 8017ec6:	f57f af65 	bpl.w	8017d94 <_scanf_float+0x60>
 8017eca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017ece:	e7f4      	b.n	8017eba <_scanf_float+0x186>
 8017ed0:	f1ba 0f00 	cmp.w	sl, #0
 8017ed4:	d10e      	bne.n	8017ef4 <_scanf_float+0x1c0>
 8017ed6:	f1b9 0f00 	cmp.w	r9, #0
 8017eda:	d10e      	bne.n	8017efa <_scanf_float+0x1c6>
 8017edc:	6822      	ldr	r2, [r4, #0]
 8017ede:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017ee2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017ee6:	d108      	bne.n	8017efa <_scanf_float+0x1c6>
 8017ee8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017eec:	6022      	str	r2, [r4, #0]
 8017eee:	f04f 0a01 	mov.w	sl, #1
 8017ef2:	e7e3      	b.n	8017ebc <_scanf_float+0x188>
 8017ef4:	f1ba 0f02 	cmp.w	sl, #2
 8017ef8:	d055      	beq.n	8017fa6 <_scanf_float+0x272>
 8017efa:	2d01      	cmp	r5, #1
 8017efc:	d002      	beq.n	8017f04 <_scanf_float+0x1d0>
 8017efe:	2d04      	cmp	r5, #4
 8017f00:	f47f af48 	bne.w	8017d94 <_scanf_float+0x60>
 8017f04:	3501      	adds	r5, #1
 8017f06:	b2ed      	uxtb	r5, r5
 8017f08:	e7d8      	b.n	8017ebc <_scanf_float+0x188>
 8017f0a:	f1ba 0f01 	cmp.w	sl, #1
 8017f0e:	f47f af41 	bne.w	8017d94 <_scanf_float+0x60>
 8017f12:	f04f 0a02 	mov.w	sl, #2
 8017f16:	e7d1      	b.n	8017ebc <_scanf_float+0x188>
 8017f18:	b97d      	cbnz	r5, 8017f3a <_scanf_float+0x206>
 8017f1a:	f1b9 0f00 	cmp.w	r9, #0
 8017f1e:	f47f af3c 	bne.w	8017d9a <_scanf_float+0x66>
 8017f22:	6822      	ldr	r2, [r4, #0]
 8017f24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017f28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017f2c:	f47f af39 	bne.w	8017da2 <_scanf_float+0x6e>
 8017f30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017f34:	6022      	str	r2, [r4, #0]
 8017f36:	2501      	movs	r5, #1
 8017f38:	e7c0      	b.n	8017ebc <_scanf_float+0x188>
 8017f3a:	2d03      	cmp	r5, #3
 8017f3c:	d0e2      	beq.n	8017f04 <_scanf_float+0x1d0>
 8017f3e:	2d05      	cmp	r5, #5
 8017f40:	e7de      	b.n	8017f00 <_scanf_float+0x1cc>
 8017f42:	2d02      	cmp	r5, #2
 8017f44:	f47f af26 	bne.w	8017d94 <_scanf_float+0x60>
 8017f48:	2503      	movs	r5, #3
 8017f4a:	e7b7      	b.n	8017ebc <_scanf_float+0x188>
 8017f4c:	2d06      	cmp	r5, #6
 8017f4e:	f47f af21 	bne.w	8017d94 <_scanf_float+0x60>
 8017f52:	2507      	movs	r5, #7
 8017f54:	e7b2      	b.n	8017ebc <_scanf_float+0x188>
 8017f56:	6822      	ldr	r2, [r4, #0]
 8017f58:	0591      	lsls	r1, r2, #22
 8017f5a:	f57f af1b 	bpl.w	8017d94 <_scanf_float+0x60>
 8017f5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017f62:	6022      	str	r2, [r4, #0]
 8017f64:	f8cd 9004 	str.w	r9, [sp, #4]
 8017f68:	e7a8      	b.n	8017ebc <_scanf_float+0x188>
 8017f6a:	6822      	ldr	r2, [r4, #0]
 8017f6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017f70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017f74:	d006      	beq.n	8017f84 <_scanf_float+0x250>
 8017f76:	0550      	lsls	r0, r2, #21
 8017f78:	f57f af0c 	bpl.w	8017d94 <_scanf_float+0x60>
 8017f7c:	f1b9 0f00 	cmp.w	r9, #0
 8017f80:	f43f af0f 	beq.w	8017da2 <_scanf_float+0x6e>
 8017f84:	0591      	lsls	r1, r2, #22
 8017f86:	bf58      	it	pl
 8017f88:	9901      	ldrpl	r1, [sp, #4]
 8017f8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017f8e:	bf58      	it	pl
 8017f90:	eba9 0101 	subpl.w	r1, r9, r1
 8017f94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017f98:	bf58      	it	pl
 8017f9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017f9e:	6022      	str	r2, [r4, #0]
 8017fa0:	f04f 0900 	mov.w	r9, #0
 8017fa4:	e78a      	b.n	8017ebc <_scanf_float+0x188>
 8017fa6:	f04f 0a03 	mov.w	sl, #3
 8017faa:	e787      	b.n	8017ebc <_scanf_float+0x188>
 8017fac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017fb0:	4639      	mov	r1, r7
 8017fb2:	4640      	mov	r0, r8
 8017fb4:	4798      	blx	r3
 8017fb6:	2800      	cmp	r0, #0
 8017fb8:	f43f aedf 	beq.w	8017d7a <_scanf_float+0x46>
 8017fbc:	e6ea      	b.n	8017d94 <_scanf_float+0x60>
 8017fbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017fc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017fc6:	463a      	mov	r2, r7
 8017fc8:	4640      	mov	r0, r8
 8017fca:	4798      	blx	r3
 8017fcc:	6923      	ldr	r3, [r4, #16]
 8017fce:	3b01      	subs	r3, #1
 8017fd0:	6123      	str	r3, [r4, #16]
 8017fd2:	e6ec      	b.n	8017dae <_scanf_float+0x7a>
 8017fd4:	1e6b      	subs	r3, r5, #1
 8017fd6:	2b06      	cmp	r3, #6
 8017fd8:	d825      	bhi.n	8018026 <_scanf_float+0x2f2>
 8017fda:	2d02      	cmp	r5, #2
 8017fdc:	d836      	bhi.n	801804c <_scanf_float+0x318>
 8017fde:	455e      	cmp	r6, fp
 8017fe0:	f67f aee8 	bls.w	8017db4 <_scanf_float+0x80>
 8017fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017fe8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017fec:	463a      	mov	r2, r7
 8017fee:	4640      	mov	r0, r8
 8017ff0:	4798      	blx	r3
 8017ff2:	6923      	ldr	r3, [r4, #16]
 8017ff4:	3b01      	subs	r3, #1
 8017ff6:	6123      	str	r3, [r4, #16]
 8017ff8:	e7f1      	b.n	8017fde <_scanf_float+0x2aa>
 8017ffa:	9802      	ldr	r0, [sp, #8]
 8017ffc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018000:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8018004:	9002      	str	r0, [sp, #8]
 8018006:	463a      	mov	r2, r7
 8018008:	4640      	mov	r0, r8
 801800a:	4798      	blx	r3
 801800c:	6923      	ldr	r3, [r4, #16]
 801800e:	3b01      	subs	r3, #1
 8018010:	6123      	str	r3, [r4, #16]
 8018012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018016:	fa5f fa8a 	uxtb.w	sl, sl
 801801a:	f1ba 0f02 	cmp.w	sl, #2
 801801e:	d1ec      	bne.n	8017ffa <_scanf_float+0x2c6>
 8018020:	3d03      	subs	r5, #3
 8018022:	b2ed      	uxtb	r5, r5
 8018024:	1b76      	subs	r6, r6, r5
 8018026:	6823      	ldr	r3, [r4, #0]
 8018028:	05da      	lsls	r2, r3, #23
 801802a:	d52f      	bpl.n	801808c <_scanf_float+0x358>
 801802c:	055b      	lsls	r3, r3, #21
 801802e:	d510      	bpl.n	8018052 <_scanf_float+0x31e>
 8018030:	455e      	cmp	r6, fp
 8018032:	f67f aebf 	bls.w	8017db4 <_scanf_float+0x80>
 8018036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801803a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801803e:	463a      	mov	r2, r7
 8018040:	4640      	mov	r0, r8
 8018042:	4798      	blx	r3
 8018044:	6923      	ldr	r3, [r4, #16]
 8018046:	3b01      	subs	r3, #1
 8018048:	6123      	str	r3, [r4, #16]
 801804a:	e7f1      	b.n	8018030 <_scanf_float+0x2fc>
 801804c:	46aa      	mov	sl, r5
 801804e:	9602      	str	r6, [sp, #8]
 8018050:	e7df      	b.n	8018012 <_scanf_float+0x2de>
 8018052:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8018056:	6923      	ldr	r3, [r4, #16]
 8018058:	2965      	cmp	r1, #101	; 0x65
 801805a:	f103 33ff 	add.w	r3, r3, #4294967295
 801805e:	f106 35ff 	add.w	r5, r6, #4294967295
 8018062:	6123      	str	r3, [r4, #16]
 8018064:	d00c      	beq.n	8018080 <_scanf_float+0x34c>
 8018066:	2945      	cmp	r1, #69	; 0x45
 8018068:	d00a      	beq.n	8018080 <_scanf_float+0x34c>
 801806a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801806e:	463a      	mov	r2, r7
 8018070:	4640      	mov	r0, r8
 8018072:	4798      	blx	r3
 8018074:	6923      	ldr	r3, [r4, #16]
 8018076:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801807a:	3b01      	subs	r3, #1
 801807c:	1eb5      	subs	r5, r6, #2
 801807e:	6123      	str	r3, [r4, #16]
 8018080:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018084:	463a      	mov	r2, r7
 8018086:	4640      	mov	r0, r8
 8018088:	4798      	blx	r3
 801808a:	462e      	mov	r6, r5
 801808c:	6825      	ldr	r5, [r4, #0]
 801808e:	f015 0510 	ands.w	r5, r5, #16
 8018092:	d14d      	bne.n	8018130 <_scanf_float+0x3fc>
 8018094:	7035      	strb	r5, [r6, #0]
 8018096:	6823      	ldr	r3, [r4, #0]
 8018098:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801809c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80180a0:	d11a      	bne.n	80180d8 <_scanf_float+0x3a4>
 80180a2:	9b01      	ldr	r3, [sp, #4]
 80180a4:	454b      	cmp	r3, r9
 80180a6:	eba3 0209 	sub.w	r2, r3, r9
 80180aa:	d122      	bne.n	80180f2 <_scanf_float+0x3be>
 80180ac:	2200      	movs	r2, #0
 80180ae:	4659      	mov	r1, fp
 80180b0:	4640      	mov	r0, r8
 80180b2:	f002 fb9f 	bl	801a7f4 <_strtod_r>
 80180b6:	9b03      	ldr	r3, [sp, #12]
 80180b8:	6821      	ldr	r1, [r4, #0]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	f011 0f02 	tst.w	r1, #2
 80180c0:	f103 0204 	add.w	r2, r3, #4
 80180c4:	d020      	beq.n	8018108 <_scanf_float+0x3d4>
 80180c6:	9903      	ldr	r1, [sp, #12]
 80180c8:	600a      	str	r2, [r1, #0]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	ed83 0b00 	vstr	d0, [r3]
 80180d0:	68e3      	ldr	r3, [r4, #12]
 80180d2:	3301      	adds	r3, #1
 80180d4:	60e3      	str	r3, [r4, #12]
 80180d6:	e66e      	b.n	8017db6 <_scanf_float+0x82>
 80180d8:	9b04      	ldr	r3, [sp, #16]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d0e6      	beq.n	80180ac <_scanf_float+0x378>
 80180de:	9905      	ldr	r1, [sp, #20]
 80180e0:	230a      	movs	r3, #10
 80180e2:	462a      	mov	r2, r5
 80180e4:	3101      	adds	r1, #1
 80180e6:	4640      	mov	r0, r8
 80180e8:	f002 fc0c 	bl	801a904 <_strtol_r>
 80180ec:	9b04      	ldr	r3, [sp, #16]
 80180ee:	9e05      	ldr	r6, [sp, #20]
 80180f0:	1ac2      	subs	r2, r0, r3
 80180f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80180f6:	429e      	cmp	r6, r3
 80180f8:	bf28      	it	cs
 80180fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80180fe:	490d      	ldr	r1, [pc, #52]	; (8018134 <_scanf_float+0x400>)
 8018100:	4630      	mov	r0, r6
 8018102:	f000 f8dd 	bl	80182c0 <siprintf>
 8018106:	e7d1      	b.n	80180ac <_scanf_float+0x378>
 8018108:	f011 0f04 	tst.w	r1, #4
 801810c:	9903      	ldr	r1, [sp, #12]
 801810e:	600a      	str	r2, [r1, #0]
 8018110:	d1db      	bne.n	80180ca <_scanf_float+0x396>
 8018112:	eeb4 0b40 	vcmp.f64	d0, d0
 8018116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811a:	681e      	ldr	r6, [r3, #0]
 801811c:	d705      	bvc.n	801812a <_scanf_float+0x3f6>
 801811e:	4806      	ldr	r0, [pc, #24]	; (8018138 <_scanf_float+0x404>)
 8018120:	f000 f9f6 	bl	8018510 <nanf>
 8018124:	ed86 0a00 	vstr	s0, [r6]
 8018128:	e7d2      	b.n	80180d0 <_scanf_float+0x39c>
 801812a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801812e:	e7f9      	b.n	8018124 <_scanf_float+0x3f0>
 8018130:	2500      	movs	r5, #0
 8018132:	e640      	b.n	8017db6 <_scanf_float+0x82>
 8018134:	0801c56e 	.word	0x0801c56e
 8018138:	0801c920 	.word	0x0801c920

0801813c <std>:
 801813c:	2300      	movs	r3, #0
 801813e:	b510      	push	{r4, lr}
 8018140:	4604      	mov	r4, r0
 8018142:	e9c0 3300 	strd	r3, r3, [r0]
 8018146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801814a:	6083      	str	r3, [r0, #8]
 801814c:	8181      	strh	r1, [r0, #12]
 801814e:	6643      	str	r3, [r0, #100]	; 0x64
 8018150:	81c2      	strh	r2, [r0, #14]
 8018152:	6183      	str	r3, [r0, #24]
 8018154:	4619      	mov	r1, r3
 8018156:	2208      	movs	r2, #8
 8018158:	305c      	adds	r0, #92	; 0x5c
 801815a:	f000 f942 	bl	80183e2 <memset>
 801815e:	4b0d      	ldr	r3, [pc, #52]	; (8018194 <std+0x58>)
 8018160:	6263      	str	r3, [r4, #36]	; 0x24
 8018162:	4b0d      	ldr	r3, [pc, #52]	; (8018198 <std+0x5c>)
 8018164:	62a3      	str	r3, [r4, #40]	; 0x28
 8018166:	4b0d      	ldr	r3, [pc, #52]	; (801819c <std+0x60>)
 8018168:	62e3      	str	r3, [r4, #44]	; 0x2c
 801816a:	4b0d      	ldr	r3, [pc, #52]	; (80181a0 <std+0x64>)
 801816c:	6323      	str	r3, [r4, #48]	; 0x30
 801816e:	4b0d      	ldr	r3, [pc, #52]	; (80181a4 <std+0x68>)
 8018170:	6224      	str	r4, [r4, #32]
 8018172:	429c      	cmp	r4, r3
 8018174:	d006      	beq.n	8018184 <std+0x48>
 8018176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801817a:	4294      	cmp	r4, r2
 801817c:	d002      	beq.n	8018184 <std+0x48>
 801817e:	33d0      	adds	r3, #208	; 0xd0
 8018180:	429c      	cmp	r4, r3
 8018182:	d105      	bne.n	8018190 <std+0x54>
 8018184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801818c:	f000 b9a6 	b.w	80184dc <__retarget_lock_init_recursive>
 8018190:	bd10      	pop	{r4, pc}
 8018192:	bf00      	nop
 8018194:	08018359 	.word	0x08018359
 8018198:	0801837f 	.word	0x0801837f
 801819c:	080183b7 	.word	0x080183b7
 80181a0:	080183db 	.word	0x080183db
 80181a4:	24003374 	.word	0x24003374

080181a8 <stdio_exit_handler>:
 80181a8:	4a02      	ldr	r2, [pc, #8]	; (80181b4 <stdio_exit_handler+0xc>)
 80181aa:	4903      	ldr	r1, [pc, #12]	; (80181b8 <stdio_exit_handler+0x10>)
 80181ac:	4803      	ldr	r0, [pc, #12]	; (80181bc <stdio_exit_handler+0x14>)
 80181ae:	f000 b869 	b.w	8018284 <_fwalk_sglue>
 80181b2:	bf00      	nop
 80181b4:	24000100 	.word	0x24000100
 80181b8:	0801b305 	.word	0x0801b305
 80181bc:	2400010c 	.word	0x2400010c

080181c0 <cleanup_stdio>:
 80181c0:	6841      	ldr	r1, [r0, #4]
 80181c2:	4b0c      	ldr	r3, [pc, #48]	; (80181f4 <cleanup_stdio+0x34>)
 80181c4:	4299      	cmp	r1, r3
 80181c6:	b510      	push	{r4, lr}
 80181c8:	4604      	mov	r4, r0
 80181ca:	d001      	beq.n	80181d0 <cleanup_stdio+0x10>
 80181cc:	f003 f89a 	bl	801b304 <_fflush_r>
 80181d0:	68a1      	ldr	r1, [r4, #8]
 80181d2:	4b09      	ldr	r3, [pc, #36]	; (80181f8 <cleanup_stdio+0x38>)
 80181d4:	4299      	cmp	r1, r3
 80181d6:	d002      	beq.n	80181de <cleanup_stdio+0x1e>
 80181d8:	4620      	mov	r0, r4
 80181da:	f003 f893 	bl	801b304 <_fflush_r>
 80181de:	68e1      	ldr	r1, [r4, #12]
 80181e0:	4b06      	ldr	r3, [pc, #24]	; (80181fc <cleanup_stdio+0x3c>)
 80181e2:	4299      	cmp	r1, r3
 80181e4:	d004      	beq.n	80181f0 <cleanup_stdio+0x30>
 80181e6:	4620      	mov	r0, r4
 80181e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ec:	f003 b88a 	b.w	801b304 <_fflush_r>
 80181f0:	bd10      	pop	{r4, pc}
 80181f2:	bf00      	nop
 80181f4:	24003374 	.word	0x24003374
 80181f8:	240033dc 	.word	0x240033dc
 80181fc:	24003444 	.word	0x24003444

08018200 <global_stdio_init.part.0>:
 8018200:	b510      	push	{r4, lr}
 8018202:	4b0b      	ldr	r3, [pc, #44]	; (8018230 <global_stdio_init.part.0+0x30>)
 8018204:	4c0b      	ldr	r4, [pc, #44]	; (8018234 <global_stdio_init.part.0+0x34>)
 8018206:	4a0c      	ldr	r2, [pc, #48]	; (8018238 <global_stdio_init.part.0+0x38>)
 8018208:	601a      	str	r2, [r3, #0]
 801820a:	4620      	mov	r0, r4
 801820c:	2200      	movs	r2, #0
 801820e:	2104      	movs	r1, #4
 8018210:	f7ff ff94 	bl	801813c <std>
 8018214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018218:	2201      	movs	r2, #1
 801821a:	2109      	movs	r1, #9
 801821c:	f7ff ff8e 	bl	801813c <std>
 8018220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018224:	2202      	movs	r2, #2
 8018226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801822a:	2112      	movs	r1, #18
 801822c:	f7ff bf86 	b.w	801813c <std>
 8018230:	240034ac 	.word	0x240034ac
 8018234:	24003374 	.word	0x24003374
 8018238:	080181a9 	.word	0x080181a9

0801823c <__sfp_lock_acquire>:
 801823c:	4801      	ldr	r0, [pc, #4]	; (8018244 <__sfp_lock_acquire+0x8>)
 801823e:	f000 b94e 	b.w	80184de <__retarget_lock_acquire_recursive>
 8018242:	bf00      	nop
 8018244:	240034b5 	.word	0x240034b5

08018248 <__sfp_lock_release>:
 8018248:	4801      	ldr	r0, [pc, #4]	; (8018250 <__sfp_lock_release+0x8>)
 801824a:	f000 b949 	b.w	80184e0 <__retarget_lock_release_recursive>
 801824e:	bf00      	nop
 8018250:	240034b5 	.word	0x240034b5

08018254 <__sinit>:
 8018254:	b510      	push	{r4, lr}
 8018256:	4604      	mov	r4, r0
 8018258:	f7ff fff0 	bl	801823c <__sfp_lock_acquire>
 801825c:	6a23      	ldr	r3, [r4, #32]
 801825e:	b11b      	cbz	r3, 8018268 <__sinit+0x14>
 8018260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018264:	f7ff bff0 	b.w	8018248 <__sfp_lock_release>
 8018268:	4b04      	ldr	r3, [pc, #16]	; (801827c <__sinit+0x28>)
 801826a:	6223      	str	r3, [r4, #32]
 801826c:	4b04      	ldr	r3, [pc, #16]	; (8018280 <__sinit+0x2c>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d1f5      	bne.n	8018260 <__sinit+0xc>
 8018274:	f7ff ffc4 	bl	8018200 <global_stdio_init.part.0>
 8018278:	e7f2      	b.n	8018260 <__sinit+0xc>
 801827a:	bf00      	nop
 801827c:	080181c1 	.word	0x080181c1
 8018280:	240034ac 	.word	0x240034ac

08018284 <_fwalk_sglue>:
 8018284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018288:	4607      	mov	r7, r0
 801828a:	4688      	mov	r8, r1
 801828c:	4614      	mov	r4, r2
 801828e:	2600      	movs	r6, #0
 8018290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018294:	f1b9 0901 	subs.w	r9, r9, #1
 8018298:	d505      	bpl.n	80182a6 <_fwalk_sglue+0x22>
 801829a:	6824      	ldr	r4, [r4, #0]
 801829c:	2c00      	cmp	r4, #0
 801829e:	d1f7      	bne.n	8018290 <_fwalk_sglue+0xc>
 80182a0:	4630      	mov	r0, r6
 80182a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182a6:	89ab      	ldrh	r3, [r5, #12]
 80182a8:	2b01      	cmp	r3, #1
 80182aa:	d907      	bls.n	80182bc <_fwalk_sglue+0x38>
 80182ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182b0:	3301      	adds	r3, #1
 80182b2:	d003      	beq.n	80182bc <_fwalk_sglue+0x38>
 80182b4:	4629      	mov	r1, r5
 80182b6:	4638      	mov	r0, r7
 80182b8:	47c0      	blx	r8
 80182ba:	4306      	orrs	r6, r0
 80182bc:	3568      	adds	r5, #104	; 0x68
 80182be:	e7e9      	b.n	8018294 <_fwalk_sglue+0x10>

080182c0 <siprintf>:
 80182c0:	b40e      	push	{r1, r2, r3}
 80182c2:	b500      	push	{lr}
 80182c4:	b09c      	sub	sp, #112	; 0x70
 80182c6:	ab1d      	add	r3, sp, #116	; 0x74
 80182c8:	9002      	str	r0, [sp, #8]
 80182ca:	9006      	str	r0, [sp, #24]
 80182cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80182d0:	4809      	ldr	r0, [pc, #36]	; (80182f8 <siprintf+0x38>)
 80182d2:	9107      	str	r1, [sp, #28]
 80182d4:	9104      	str	r1, [sp, #16]
 80182d6:	4909      	ldr	r1, [pc, #36]	; (80182fc <siprintf+0x3c>)
 80182d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80182dc:	9105      	str	r1, [sp, #20]
 80182de:	6800      	ldr	r0, [r0, #0]
 80182e0:	9301      	str	r3, [sp, #4]
 80182e2:	a902      	add	r1, sp, #8
 80182e4:	f002 fb6a 	bl	801a9bc <_svfiprintf_r>
 80182e8:	9b02      	ldr	r3, [sp, #8]
 80182ea:	2200      	movs	r2, #0
 80182ec:	701a      	strb	r2, [r3, #0]
 80182ee:	b01c      	add	sp, #112	; 0x70
 80182f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80182f4:	b003      	add	sp, #12
 80182f6:	4770      	bx	lr
 80182f8:	24000158 	.word	0x24000158
 80182fc:	ffff0208 	.word	0xffff0208

08018300 <siscanf>:
 8018300:	b40e      	push	{r1, r2, r3}
 8018302:	b510      	push	{r4, lr}
 8018304:	b09f      	sub	sp, #124	; 0x7c
 8018306:	ac21      	add	r4, sp, #132	; 0x84
 8018308:	f44f 7101 	mov.w	r1, #516	; 0x204
 801830c:	f854 2b04 	ldr.w	r2, [r4], #4
 8018310:	9201      	str	r2, [sp, #4]
 8018312:	f8ad 101c 	strh.w	r1, [sp, #28]
 8018316:	9004      	str	r0, [sp, #16]
 8018318:	9008      	str	r0, [sp, #32]
 801831a:	f7e8 f859 	bl	80003d0 <strlen>
 801831e:	4b0c      	ldr	r3, [pc, #48]	; (8018350 <siscanf+0x50>)
 8018320:	9005      	str	r0, [sp, #20]
 8018322:	9009      	str	r0, [sp, #36]	; 0x24
 8018324:	930d      	str	r3, [sp, #52]	; 0x34
 8018326:	480b      	ldr	r0, [pc, #44]	; (8018354 <siscanf+0x54>)
 8018328:	9a01      	ldr	r2, [sp, #4]
 801832a:	6800      	ldr	r0, [r0, #0]
 801832c:	9403      	str	r4, [sp, #12]
 801832e:	2300      	movs	r3, #0
 8018330:	9311      	str	r3, [sp, #68]	; 0x44
 8018332:	9316      	str	r3, [sp, #88]	; 0x58
 8018334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018338:	f8ad 301e 	strh.w	r3, [sp, #30]
 801833c:	a904      	add	r1, sp, #16
 801833e:	4623      	mov	r3, r4
 8018340:	f002 fc94 	bl	801ac6c <__ssvfiscanf_r>
 8018344:	b01f      	add	sp, #124	; 0x7c
 8018346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801834a:	b003      	add	sp, #12
 801834c:	4770      	bx	lr
 801834e:	bf00      	nop
 8018350:	0801837b 	.word	0x0801837b
 8018354:	24000158 	.word	0x24000158

08018358 <__sread>:
 8018358:	b510      	push	{r4, lr}
 801835a:	460c      	mov	r4, r1
 801835c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018360:	f000 f86e 	bl	8018440 <_read_r>
 8018364:	2800      	cmp	r0, #0
 8018366:	bfab      	itete	ge
 8018368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801836a:	89a3      	ldrhlt	r3, [r4, #12]
 801836c:	181b      	addge	r3, r3, r0
 801836e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018372:	bfac      	ite	ge
 8018374:	6563      	strge	r3, [r4, #84]	; 0x54
 8018376:	81a3      	strhlt	r3, [r4, #12]
 8018378:	bd10      	pop	{r4, pc}

0801837a <__seofread>:
 801837a:	2000      	movs	r0, #0
 801837c:	4770      	bx	lr

0801837e <__swrite>:
 801837e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018382:	461f      	mov	r7, r3
 8018384:	898b      	ldrh	r3, [r1, #12]
 8018386:	05db      	lsls	r3, r3, #23
 8018388:	4605      	mov	r5, r0
 801838a:	460c      	mov	r4, r1
 801838c:	4616      	mov	r6, r2
 801838e:	d505      	bpl.n	801839c <__swrite+0x1e>
 8018390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018394:	2302      	movs	r3, #2
 8018396:	2200      	movs	r2, #0
 8018398:	f000 f840 	bl	801841c <_lseek_r>
 801839c:	89a3      	ldrh	r3, [r4, #12]
 801839e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80183a6:	81a3      	strh	r3, [r4, #12]
 80183a8:	4632      	mov	r2, r6
 80183aa:	463b      	mov	r3, r7
 80183ac:	4628      	mov	r0, r5
 80183ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183b2:	f000 b857 	b.w	8018464 <_write_r>

080183b6 <__sseek>:
 80183b6:	b510      	push	{r4, lr}
 80183b8:	460c      	mov	r4, r1
 80183ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183be:	f000 f82d 	bl	801841c <_lseek_r>
 80183c2:	1c43      	adds	r3, r0, #1
 80183c4:	89a3      	ldrh	r3, [r4, #12]
 80183c6:	bf15      	itete	ne
 80183c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80183ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80183ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80183d2:	81a3      	strheq	r3, [r4, #12]
 80183d4:	bf18      	it	ne
 80183d6:	81a3      	strhne	r3, [r4, #12]
 80183d8:	bd10      	pop	{r4, pc}

080183da <__sclose>:
 80183da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183de:	f000 b80d 	b.w	80183fc <_close_r>

080183e2 <memset>:
 80183e2:	4402      	add	r2, r0
 80183e4:	4603      	mov	r3, r0
 80183e6:	4293      	cmp	r3, r2
 80183e8:	d100      	bne.n	80183ec <memset+0xa>
 80183ea:	4770      	bx	lr
 80183ec:	f803 1b01 	strb.w	r1, [r3], #1
 80183f0:	e7f9      	b.n	80183e6 <memset+0x4>
	...

080183f4 <_localeconv_r>:
 80183f4:	4800      	ldr	r0, [pc, #0]	; (80183f8 <_localeconv_r+0x4>)
 80183f6:	4770      	bx	lr
 80183f8:	2400024c 	.word	0x2400024c

080183fc <_close_r>:
 80183fc:	b538      	push	{r3, r4, r5, lr}
 80183fe:	4d06      	ldr	r5, [pc, #24]	; (8018418 <_close_r+0x1c>)
 8018400:	2300      	movs	r3, #0
 8018402:	4604      	mov	r4, r0
 8018404:	4608      	mov	r0, r1
 8018406:	602b      	str	r3, [r5, #0]
 8018408:	f7eb fbc1 	bl	8003b8e <_close>
 801840c:	1c43      	adds	r3, r0, #1
 801840e:	d102      	bne.n	8018416 <_close_r+0x1a>
 8018410:	682b      	ldr	r3, [r5, #0]
 8018412:	b103      	cbz	r3, 8018416 <_close_r+0x1a>
 8018414:	6023      	str	r3, [r4, #0]
 8018416:	bd38      	pop	{r3, r4, r5, pc}
 8018418:	240034b0 	.word	0x240034b0

0801841c <_lseek_r>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4d07      	ldr	r5, [pc, #28]	; (801843c <_lseek_r+0x20>)
 8018420:	4604      	mov	r4, r0
 8018422:	4608      	mov	r0, r1
 8018424:	4611      	mov	r1, r2
 8018426:	2200      	movs	r2, #0
 8018428:	602a      	str	r2, [r5, #0]
 801842a:	461a      	mov	r2, r3
 801842c:	f7eb fbd6 	bl	8003bdc <_lseek>
 8018430:	1c43      	adds	r3, r0, #1
 8018432:	d102      	bne.n	801843a <_lseek_r+0x1e>
 8018434:	682b      	ldr	r3, [r5, #0]
 8018436:	b103      	cbz	r3, 801843a <_lseek_r+0x1e>
 8018438:	6023      	str	r3, [r4, #0]
 801843a:	bd38      	pop	{r3, r4, r5, pc}
 801843c:	240034b0 	.word	0x240034b0

08018440 <_read_r>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	4d07      	ldr	r5, [pc, #28]	; (8018460 <_read_r+0x20>)
 8018444:	4604      	mov	r4, r0
 8018446:	4608      	mov	r0, r1
 8018448:	4611      	mov	r1, r2
 801844a:	2200      	movs	r2, #0
 801844c:	602a      	str	r2, [r5, #0]
 801844e:	461a      	mov	r2, r3
 8018450:	f7eb fb64 	bl	8003b1c <_read>
 8018454:	1c43      	adds	r3, r0, #1
 8018456:	d102      	bne.n	801845e <_read_r+0x1e>
 8018458:	682b      	ldr	r3, [r5, #0]
 801845a:	b103      	cbz	r3, 801845e <_read_r+0x1e>
 801845c:	6023      	str	r3, [r4, #0]
 801845e:	bd38      	pop	{r3, r4, r5, pc}
 8018460:	240034b0 	.word	0x240034b0

08018464 <_write_r>:
 8018464:	b538      	push	{r3, r4, r5, lr}
 8018466:	4d07      	ldr	r5, [pc, #28]	; (8018484 <_write_r+0x20>)
 8018468:	4604      	mov	r4, r0
 801846a:	4608      	mov	r0, r1
 801846c:	4611      	mov	r1, r2
 801846e:	2200      	movs	r2, #0
 8018470:	602a      	str	r2, [r5, #0]
 8018472:	461a      	mov	r2, r3
 8018474:	f7eb fb6f 	bl	8003b56 <_write>
 8018478:	1c43      	adds	r3, r0, #1
 801847a:	d102      	bne.n	8018482 <_write_r+0x1e>
 801847c:	682b      	ldr	r3, [r5, #0]
 801847e:	b103      	cbz	r3, 8018482 <_write_r+0x1e>
 8018480:	6023      	str	r3, [r4, #0]
 8018482:	bd38      	pop	{r3, r4, r5, pc}
 8018484:	240034b0 	.word	0x240034b0

08018488 <__errno>:
 8018488:	4b01      	ldr	r3, [pc, #4]	; (8018490 <__errno+0x8>)
 801848a:	6818      	ldr	r0, [r3, #0]
 801848c:	4770      	bx	lr
 801848e:	bf00      	nop
 8018490:	24000158 	.word	0x24000158

08018494 <__libc_init_array>:
 8018494:	b570      	push	{r4, r5, r6, lr}
 8018496:	4d0d      	ldr	r5, [pc, #52]	; (80184cc <__libc_init_array+0x38>)
 8018498:	4c0d      	ldr	r4, [pc, #52]	; (80184d0 <__libc_init_array+0x3c>)
 801849a:	1b64      	subs	r4, r4, r5
 801849c:	10a4      	asrs	r4, r4, #2
 801849e:	2600      	movs	r6, #0
 80184a0:	42a6      	cmp	r6, r4
 80184a2:	d109      	bne.n	80184b8 <__libc_init_array+0x24>
 80184a4:	4d0b      	ldr	r5, [pc, #44]	; (80184d4 <__libc_init_array+0x40>)
 80184a6:	4c0c      	ldr	r4, [pc, #48]	; (80184d8 <__libc_init_array+0x44>)
 80184a8:	f003 ff1e 	bl	801c2e8 <_init>
 80184ac:	1b64      	subs	r4, r4, r5
 80184ae:	10a4      	asrs	r4, r4, #2
 80184b0:	2600      	movs	r6, #0
 80184b2:	42a6      	cmp	r6, r4
 80184b4:	d105      	bne.n	80184c2 <__libc_init_array+0x2e>
 80184b6:	bd70      	pop	{r4, r5, r6, pc}
 80184b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80184bc:	4798      	blx	r3
 80184be:	3601      	adds	r6, #1
 80184c0:	e7ee      	b.n	80184a0 <__libc_init_array+0xc>
 80184c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80184c6:	4798      	blx	r3
 80184c8:	3601      	adds	r6, #1
 80184ca:	e7f2      	b.n	80184b2 <__libc_init_array+0x1e>
 80184cc:	0801c98c 	.word	0x0801c98c
 80184d0:	0801c98c 	.word	0x0801c98c
 80184d4:	0801c98c 	.word	0x0801c98c
 80184d8:	0801c990 	.word	0x0801c990

080184dc <__retarget_lock_init_recursive>:
 80184dc:	4770      	bx	lr

080184de <__retarget_lock_acquire_recursive>:
 80184de:	4770      	bx	lr

080184e0 <__retarget_lock_release_recursive>:
 80184e0:	4770      	bx	lr

080184e2 <strcpy>:
 80184e2:	4603      	mov	r3, r0
 80184e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80184e8:	f803 2b01 	strb.w	r2, [r3], #1
 80184ec:	2a00      	cmp	r2, #0
 80184ee:	d1f9      	bne.n	80184e4 <strcpy+0x2>
 80184f0:	4770      	bx	lr

080184f2 <memcpy>:
 80184f2:	440a      	add	r2, r1
 80184f4:	4291      	cmp	r1, r2
 80184f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80184fa:	d100      	bne.n	80184fe <memcpy+0xc>
 80184fc:	4770      	bx	lr
 80184fe:	b510      	push	{r4, lr}
 8018500:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018504:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018508:	4291      	cmp	r1, r2
 801850a:	d1f9      	bne.n	8018500 <memcpy+0xe>
 801850c:	bd10      	pop	{r4, pc}
	...

08018510 <nanf>:
 8018510:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018518 <nanf+0x8>
 8018514:	4770      	bx	lr
 8018516:	bf00      	nop
 8018518:	7fc00000 	.word	0x7fc00000

0801851c <quorem>:
 801851c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018520:	6903      	ldr	r3, [r0, #16]
 8018522:	690c      	ldr	r4, [r1, #16]
 8018524:	42a3      	cmp	r3, r4
 8018526:	4607      	mov	r7, r0
 8018528:	db7e      	blt.n	8018628 <quorem+0x10c>
 801852a:	3c01      	subs	r4, #1
 801852c:	f101 0814 	add.w	r8, r1, #20
 8018530:	f100 0514 	add.w	r5, r0, #20
 8018534:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018538:	9301      	str	r3, [sp, #4]
 801853a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801853e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018542:	3301      	adds	r3, #1
 8018544:	429a      	cmp	r2, r3
 8018546:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801854a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801854e:	fbb2 f6f3 	udiv	r6, r2, r3
 8018552:	d331      	bcc.n	80185b8 <quorem+0x9c>
 8018554:	f04f 0e00 	mov.w	lr, #0
 8018558:	4640      	mov	r0, r8
 801855a:	46ac      	mov	ip, r5
 801855c:	46f2      	mov	sl, lr
 801855e:	f850 2b04 	ldr.w	r2, [r0], #4
 8018562:	b293      	uxth	r3, r2
 8018564:	fb06 e303 	mla	r3, r6, r3, lr
 8018568:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801856c:	0c1a      	lsrs	r2, r3, #16
 801856e:	b29b      	uxth	r3, r3
 8018570:	ebaa 0303 	sub.w	r3, sl, r3
 8018574:	f8dc a000 	ldr.w	sl, [ip]
 8018578:	fa13 f38a 	uxtah	r3, r3, sl
 801857c:	fb06 220e 	mla	r2, r6, lr, r2
 8018580:	9300      	str	r3, [sp, #0]
 8018582:	9b00      	ldr	r3, [sp, #0]
 8018584:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018588:	b292      	uxth	r2, r2
 801858a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801858e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018592:	f8bd 3000 	ldrh.w	r3, [sp]
 8018596:	4581      	cmp	r9, r0
 8018598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801859c:	f84c 3b04 	str.w	r3, [ip], #4
 80185a0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80185a4:	d2db      	bcs.n	801855e <quorem+0x42>
 80185a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80185aa:	b92b      	cbnz	r3, 80185b8 <quorem+0x9c>
 80185ac:	9b01      	ldr	r3, [sp, #4]
 80185ae:	3b04      	subs	r3, #4
 80185b0:	429d      	cmp	r5, r3
 80185b2:	461a      	mov	r2, r3
 80185b4:	d32c      	bcc.n	8018610 <quorem+0xf4>
 80185b6:	613c      	str	r4, [r7, #16]
 80185b8:	4638      	mov	r0, r7
 80185ba:	f001 f96b 	bl	8019894 <__mcmp>
 80185be:	2800      	cmp	r0, #0
 80185c0:	db22      	blt.n	8018608 <quorem+0xec>
 80185c2:	3601      	adds	r6, #1
 80185c4:	4629      	mov	r1, r5
 80185c6:	2000      	movs	r0, #0
 80185c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80185cc:	f8d1 c000 	ldr.w	ip, [r1]
 80185d0:	b293      	uxth	r3, r2
 80185d2:	1ac3      	subs	r3, r0, r3
 80185d4:	0c12      	lsrs	r2, r2, #16
 80185d6:	fa13 f38c 	uxtah	r3, r3, ip
 80185da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80185de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80185e2:	b29b      	uxth	r3, r3
 80185e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80185e8:	45c1      	cmp	r9, r8
 80185ea:	f841 3b04 	str.w	r3, [r1], #4
 80185ee:	ea4f 4022 	mov.w	r0, r2, asr #16
 80185f2:	d2e9      	bcs.n	80185c8 <quorem+0xac>
 80185f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80185fc:	b922      	cbnz	r2, 8018608 <quorem+0xec>
 80185fe:	3b04      	subs	r3, #4
 8018600:	429d      	cmp	r5, r3
 8018602:	461a      	mov	r2, r3
 8018604:	d30a      	bcc.n	801861c <quorem+0x100>
 8018606:	613c      	str	r4, [r7, #16]
 8018608:	4630      	mov	r0, r6
 801860a:	b003      	add	sp, #12
 801860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018610:	6812      	ldr	r2, [r2, #0]
 8018612:	3b04      	subs	r3, #4
 8018614:	2a00      	cmp	r2, #0
 8018616:	d1ce      	bne.n	80185b6 <quorem+0x9a>
 8018618:	3c01      	subs	r4, #1
 801861a:	e7c9      	b.n	80185b0 <quorem+0x94>
 801861c:	6812      	ldr	r2, [r2, #0]
 801861e:	3b04      	subs	r3, #4
 8018620:	2a00      	cmp	r2, #0
 8018622:	d1f0      	bne.n	8018606 <quorem+0xea>
 8018624:	3c01      	subs	r4, #1
 8018626:	e7eb      	b.n	8018600 <quorem+0xe4>
 8018628:	2000      	movs	r0, #0
 801862a:	e7ee      	b.n	801860a <quorem+0xee>
 801862c:	0000      	movs	r0, r0
	...

08018630 <_dtoa_r>:
 8018630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018634:	ed2d 8b02 	vpush	{d8}
 8018638:	69c5      	ldr	r5, [r0, #28]
 801863a:	b091      	sub	sp, #68	; 0x44
 801863c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018640:	ec59 8b10 	vmov	r8, r9, d0
 8018644:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018646:	9106      	str	r1, [sp, #24]
 8018648:	4606      	mov	r6, r0
 801864a:	9208      	str	r2, [sp, #32]
 801864c:	930c      	str	r3, [sp, #48]	; 0x30
 801864e:	b975      	cbnz	r5, 801866e <_dtoa_r+0x3e>
 8018650:	2010      	movs	r0, #16
 8018652:	f000 fda5 	bl	80191a0 <malloc>
 8018656:	4602      	mov	r2, r0
 8018658:	61f0      	str	r0, [r6, #28]
 801865a:	b920      	cbnz	r0, 8018666 <_dtoa_r+0x36>
 801865c:	4ba6      	ldr	r3, [pc, #664]	; (80188f8 <_dtoa_r+0x2c8>)
 801865e:	21ef      	movs	r1, #239	; 0xef
 8018660:	48a6      	ldr	r0, [pc, #664]	; (80188fc <_dtoa_r+0x2cc>)
 8018662:	f002 ff31 	bl	801b4c8 <__assert_func>
 8018666:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801866a:	6005      	str	r5, [r0, #0]
 801866c:	60c5      	str	r5, [r0, #12]
 801866e:	69f3      	ldr	r3, [r6, #28]
 8018670:	6819      	ldr	r1, [r3, #0]
 8018672:	b151      	cbz	r1, 801868a <_dtoa_r+0x5a>
 8018674:	685a      	ldr	r2, [r3, #4]
 8018676:	604a      	str	r2, [r1, #4]
 8018678:	2301      	movs	r3, #1
 801867a:	4093      	lsls	r3, r2
 801867c:	608b      	str	r3, [r1, #8]
 801867e:	4630      	mov	r0, r6
 8018680:	f000 fe82 	bl	8019388 <_Bfree>
 8018684:	69f3      	ldr	r3, [r6, #28]
 8018686:	2200      	movs	r2, #0
 8018688:	601a      	str	r2, [r3, #0]
 801868a:	f1b9 0300 	subs.w	r3, r9, #0
 801868e:	bfbb      	ittet	lt
 8018690:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018694:	9303      	strlt	r3, [sp, #12]
 8018696:	2300      	movge	r3, #0
 8018698:	2201      	movlt	r2, #1
 801869a:	bfac      	ite	ge
 801869c:	6023      	strge	r3, [r4, #0]
 801869e:	6022      	strlt	r2, [r4, #0]
 80186a0:	4b97      	ldr	r3, [pc, #604]	; (8018900 <_dtoa_r+0x2d0>)
 80186a2:	9c03      	ldr	r4, [sp, #12]
 80186a4:	43a3      	bics	r3, r4
 80186a6:	d11c      	bne.n	80186e2 <_dtoa_r+0xb2>
 80186a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80186ae:	6013      	str	r3, [r2, #0]
 80186b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80186b4:	ea53 0308 	orrs.w	r3, r3, r8
 80186b8:	f000 84fb 	beq.w	80190b2 <_dtoa_r+0xa82>
 80186bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186be:	b963      	cbnz	r3, 80186da <_dtoa_r+0xaa>
 80186c0:	4b90      	ldr	r3, [pc, #576]	; (8018904 <_dtoa_r+0x2d4>)
 80186c2:	e020      	b.n	8018706 <_dtoa_r+0xd6>
 80186c4:	4b90      	ldr	r3, [pc, #576]	; (8018908 <_dtoa_r+0x2d8>)
 80186c6:	9301      	str	r3, [sp, #4]
 80186c8:	3308      	adds	r3, #8
 80186ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80186cc:	6013      	str	r3, [r2, #0]
 80186ce:	9801      	ldr	r0, [sp, #4]
 80186d0:	b011      	add	sp, #68	; 0x44
 80186d2:	ecbd 8b02 	vpop	{d8}
 80186d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186da:	4b8a      	ldr	r3, [pc, #552]	; (8018904 <_dtoa_r+0x2d4>)
 80186dc:	9301      	str	r3, [sp, #4]
 80186de:	3303      	adds	r3, #3
 80186e0:	e7f3      	b.n	80186ca <_dtoa_r+0x9a>
 80186e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80186e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80186ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ee:	d10c      	bne.n	801870a <_dtoa_r+0xda>
 80186f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186f2:	2301      	movs	r3, #1
 80186f4:	6013      	str	r3, [r2, #0]
 80186f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	f000 84d7 	beq.w	80190ac <_dtoa_r+0xa7c>
 80186fe:	4b83      	ldr	r3, [pc, #524]	; (801890c <_dtoa_r+0x2dc>)
 8018700:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018702:	6013      	str	r3, [r2, #0]
 8018704:	3b01      	subs	r3, #1
 8018706:	9301      	str	r3, [sp, #4]
 8018708:	e7e1      	b.n	80186ce <_dtoa_r+0x9e>
 801870a:	aa0e      	add	r2, sp, #56	; 0x38
 801870c:	a90f      	add	r1, sp, #60	; 0x3c
 801870e:	4630      	mov	r0, r6
 8018710:	eeb0 0b48 	vmov.f64	d0, d8
 8018714:	f001 f9d4 	bl	8019ac0 <__d2b>
 8018718:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801871c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801871e:	4605      	mov	r5, r0
 8018720:	2b00      	cmp	r3, #0
 8018722:	d046      	beq.n	80187b2 <_dtoa_r+0x182>
 8018724:	eeb0 7b48 	vmov.f64	d7, d8
 8018728:	ee18 1a90 	vmov	r1, s17
 801872c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018730:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018734:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018738:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801873c:	2000      	movs	r0, #0
 801873e:	ee07 1a90 	vmov	s15, r1
 8018742:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8018746:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80188e0 <_dtoa_r+0x2b0>
 801874a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801874e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80188e8 <_dtoa_r+0x2b8>
 8018752:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018756:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80188f0 <_dtoa_r+0x2c0>
 801875a:	ee07 3a90 	vmov	s15, r3
 801875e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8018762:	eeb0 7b46 	vmov.f64	d7, d6
 8018766:	eea4 7b05 	vfma.f64	d7, d4, d5
 801876a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801876e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8018772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018776:	ee16 ba90 	vmov	fp, s13
 801877a:	9009      	str	r0, [sp, #36]	; 0x24
 801877c:	d508      	bpl.n	8018790 <_dtoa_r+0x160>
 801877e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8018782:	eeb4 6b47 	vcmp.f64	d6, d7
 8018786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801878a:	bf18      	it	ne
 801878c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8018790:	f1bb 0f16 	cmp.w	fp, #22
 8018794:	d82b      	bhi.n	80187ee <_dtoa_r+0x1be>
 8018796:	495e      	ldr	r1, [pc, #376]	; (8018910 <_dtoa_r+0x2e0>)
 8018798:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801879c:	ed91 7b00 	vldr	d7, [r1]
 80187a0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80187a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a8:	d501      	bpl.n	80187ae <_dtoa_r+0x17e>
 80187aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80187ae:	2100      	movs	r1, #0
 80187b0:	e01e      	b.n	80187f0 <_dtoa_r+0x1c0>
 80187b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80187b4:	4413      	add	r3, r2
 80187b6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80187ba:	2920      	cmp	r1, #32
 80187bc:	bfc1      	itttt	gt
 80187be:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80187c2:	408c      	lslgt	r4, r1
 80187c4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80187c8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80187cc:	bfd6      	itet	le
 80187ce:	f1c1 0120 	rsble	r1, r1, #32
 80187d2:	4321      	orrgt	r1, r4
 80187d4:	fa08 f101 	lslle.w	r1, r8, r1
 80187d8:	ee07 1a90 	vmov	s15, r1
 80187dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80187e0:	3b01      	subs	r3, #1
 80187e2:	ee17 1a90 	vmov	r1, s15
 80187e6:	2001      	movs	r0, #1
 80187e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80187ec:	e7a7      	b.n	801873e <_dtoa_r+0x10e>
 80187ee:	2101      	movs	r1, #1
 80187f0:	1ad2      	subs	r2, r2, r3
 80187f2:	1e53      	subs	r3, r2, #1
 80187f4:	9305      	str	r3, [sp, #20]
 80187f6:	bf45      	ittet	mi
 80187f8:	f1c2 0301 	rsbmi	r3, r2, #1
 80187fc:	9304      	strmi	r3, [sp, #16]
 80187fe:	2300      	movpl	r3, #0
 8018800:	2300      	movmi	r3, #0
 8018802:	bf4c      	ite	mi
 8018804:	9305      	strmi	r3, [sp, #20]
 8018806:	9304      	strpl	r3, [sp, #16]
 8018808:	f1bb 0f00 	cmp.w	fp, #0
 801880c:	910b      	str	r1, [sp, #44]	; 0x2c
 801880e:	db18      	blt.n	8018842 <_dtoa_r+0x212>
 8018810:	9b05      	ldr	r3, [sp, #20]
 8018812:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8018816:	445b      	add	r3, fp
 8018818:	9305      	str	r3, [sp, #20]
 801881a:	2300      	movs	r3, #0
 801881c:	9a06      	ldr	r2, [sp, #24]
 801881e:	2a09      	cmp	r2, #9
 8018820:	d848      	bhi.n	80188b4 <_dtoa_r+0x284>
 8018822:	2a05      	cmp	r2, #5
 8018824:	bfc4      	itt	gt
 8018826:	3a04      	subgt	r2, #4
 8018828:	9206      	strgt	r2, [sp, #24]
 801882a:	9a06      	ldr	r2, [sp, #24]
 801882c:	f1a2 0202 	sub.w	r2, r2, #2
 8018830:	bfcc      	ite	gt
 8018832:	2400      	movgt	r4, #0
 8018834:	2401      	movle	r4, #1
 8018836:	2a03      	cmp	r2, #3
 8018838:	d847      	bhi.n	80188ca <_dtoa_r+0x29a>
 801883a:	e8df f002 	tbb	[pc, r2]
 801883e:	2d0b      	.short	0x2d0b
 8018840:	392b      	.short	0x392b
 8018842:	9b04      	ldr	r3, [sp, #16]
 8018844:	2200      	movs	r2, #0
 8018846:	eba3 030b 	sub.w	r3, r3, fp
 801884a:	9304      	str	r3, [sp, #16]
 801884c:	920a      	str	r2, [sp, #40]	; 0x28
 801884e:	f1cb 0300 	rsb	r3, fp, #0
 8018852:	e7e3      	b.n	801881c <_dtoa_r+0x1ec>
 8018854:	2200      	movs	r2, #0
 8018856:	9207      	str	r2, [sp, #28]
 8018858:	9a08      	ldr	r2, [sp, #32]
 801885a:	2a00      	cmp	r2, #0
 801885c:	dc38      	bgt.n	80188d0 <_dtoa_r+0x2a0>
 801885e:	f04f 0a01 	mov.w	sl, #1
 8018862:	46d1      	mov	r9, sl
 8018864:	4652      	mov	r2, sl
 8018866:	f8cd a020 	str.w	sl, [sp, #32]
 801886a:	69f7      	ldr	r7, [r6, #28]
 801886c:	2100      	movs	r1, #0
 801886e:	2004      	movs	r0, #4
 8018870:	f100 0c14 	add.w	ip, r0, #20
 8018874:	4594      	cmp	ip, r2
 8018876:	d930      	bls.n	80188da <_dtoa_r+0x2aa>
 8018878:	6079      	str	r1, [r7, #4]
 801887a:	4630      	mov	r0, r6
 801887c:	930d      	str	r3, [sp, #52]	; 0x34
 801887e:	f000 fd43 	bl	8019308 <_Balloc>
 8018882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018884:	9001      	str	r0, [sp, #4]
 8018886:	4602      	mov	r2, r0
 8018888:	2800      	cmp	r0, #0
 801888a:	d145      	bne.n	8018918 <_dtoa_r+0x2e8>
 801888c:	4b21      	ldr	r3, [pc, #132]	; (8018914 <_dtoa_r+0x2e4>)
 801888e:	f240 11af 	movw	r1, #431	; 0x1af
 8018892:	e6e5      	b.n	8018660 <_dtoa_r+0x30>
 8018894:	2201      	movs	r2, #1
 8018896:	e7de      	b.n	8018856 <_dtoa_r+0x226>
 8018898:	2200      	movs	r2, #0
 801889a:	9207      	str	r2, [sp, #28]
 801889c:	9a08      	ldr	r2, [sp, #32]
 801889e:	eb0b 0a02 	add.w	sl, fp, r2
 80188a2:	f10a 0901 	add.w	r9, sl, #1
 80188a6:	464a      	mov	r2, r9
 80188a8:	2a01      	cmp	r2, #1
 80188aa:	bfb8      	it	lt
 80188ac:	2201      	movlt	r2, #1
 80188ae:	e7dc      	b.n	801886a <_dtoa_r+0x23a>
 80188b0:	2201      	movs	r2, #1
 80188b2:	e7f2      	b.n	801889a <_dtoa_r+0x26a>
 80188b4:	2401      	movs	r4, #1
 80188b6:	2200      	movs	r2, #0
 80188b8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80188bc:	f04f 3aff 	mov.w	sl, #4294967295
 80188c0:	2100      	movs	r1, #0
 80188c2:	46d1      	mov	r9, sl
 80188c4:	2212      	movs	r2, #18
 80188c6:	9108      	str	r1, [sp, #32]
 80188c8:	e7cf      	b.n	801886a <_dtoa_r+0x23a>
 80188ca:	2201      	movs	r2, #1
 80188cc:	9207      	str	r2, [sp, #28]
 80188ce:	e7f5      	b.n	80188bc <_dtoa_r+0x28c>
 80188d0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80188d4:	46d1      	mov	r9, sl
 80188d6:	4652      	mov	r2, sl
 80188d8:	e7c7      	b.n	801886a <_dtoa_r+0x23a>
 80188da:	3101      	adds	r1, #1
 80188dc:	0040      	lsls	r0, r0, #1
 80188de:	e7c7      	b.n	8018870 <_dtoa_r+0x240>
 80188e0:	636f4361 	.word	0x636f4361
 80188e4:	3fd287a7 	.word	0x3fd287a7
 80188e8:	8b60c8b3 	.word	0x8b60c8b3
 80188ec:	3fc68a28 	.word	0x3fc68a28
 80188f0:	509f79fb 	.word	0x509f79fb
 80188f4:	3fd34413 	.word	0x3fd34413
 80188f8:	0801c580 	.word	0x0801c580
 80188fc:	0801c597 	.word	0x0801c597
 8018900:	7ff00000 	.word	0x7ff00000
 8018904:	0801c57c 	.word	0x0801c57c
 8018908:	0801c573 	.word	0x0801c573
 801890c:	0801c8d9 	.word	0x0801c8d9
 8018910:	0801c688 	.word	0x0801c688
 8018914:	0801c5ef 	.word	0x0801c5ef
 8018918:	69f2      	ldr	r2, [r6, #28]
 801891a:	9901      	ldr	r1, [sp, #4]
 801891c:	6011      	str	r1, [r2, #0]
 801891e:	f1b9 0f0e 	cmp.w	r9, #14
 8018922:	d86c      	bhi.n	80189fe <_dtoa_r+0x3ce>
 8018924:	2c00      	cmp	r4, #0
 8018926:	d06a      	beq.n	80189fe <_dtoa_r+0x3ce>
 8018928:	f1bb 0f00 	cmp.w	fp, #0
 801892c:	f340 80a0 	ble.w	8018a70 <_dtoa_r+0x440>
 8018930:	4ac1      	ldr	r2, [pc, #772]	; (8018c38 <_dtoa_r+0x608>)
 8018932:	f00b 010f 	and.w	r1, fp, #15
 8018936:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801893a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801893e:	ed92 7b00 	vldr	d7, [r2]
 8018942:	ea4f 122b 	mov.w	r2, fp, asr #4
 8018946:	f000 8087 	beq.w	8018a58 <_dtoa_r+0x428>
 801894a:	49bc      	ldr	r1, [pc, #752]	; (8018c3c <_dtoa_r+0x60c>)
 801894c:	ed91 6b08 	vldr	d6, [r1, #32]
 8018950:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018954:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018958:	f002 020f 	and.w	r2, r2, #15
 801895c:	2103      	movs	r1, #3
 801895e:	48b7      	ldr	r0, [pc, #732]	; (8018c3c <_dtoa_r+0x60c>)
 8018960:	2a00      	cmp	r2, #0
 8018962:	d17b      	bne.n	8018a5c <_dtoa_r+0x42c>
 8018964:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018968:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801896c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018972:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018976:	2a00      	cmp	r2, #0
 8018978:	f000 80a0 	beq.w	8018abc <_dtoa_r+0x48c>
 801897c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018980:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018988:	f140 8098 	bpl.w	8018abc <_dtoa_r+0x48c>
 801898c:	f1b9 0f00 	cmp.w	r9, #0
 8018990:	f000 8094 	beq.w	8018abc <_dtoa_r+0x48c>
 8018994:	f1ba 0f00 	cmp.w	sl, #0
 8018998:	dd2f      	ble.n	80189fa <_dtoa_r+0x3ca>
 801899a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801899e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80189a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80189a6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80189aa:	3101      	adds	r1, #1
 80189ac:	4654      	mov	r4, sl
 80189ae:	ed9d 6b02 	vldr	d6, [sp, #8]
 80189b2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80189b6:	ee07 1a90 	vmov	s15, r1
 80189ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80189be:	eea7 5b06 	vfma.f64	d5, d7, d6
 80189c2:	ee15 7a90 	vmov	r7, s11
 80189c6:	ec51 0b15 	vmov	r0, r1, d5
 80189ca:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80189ce:	2c00      	cmp	r4, #0
 80189d0:	d177      	bne.n	8018ac2 <_dtoa_r+0x492>
 80189d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80189d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80189da:	ec41 0b17 	vmov	d7, r0, r1
 80189de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80189e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189e6:	f300 826a 	bgt.w	8018ebe <_dtoa_r+0x88e>
 80189ea:	eeb1 7b47 	vneg.f64	d7, d7
 80189ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80189f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189f6:	f100 8260 	bmi.w	8018eba <_dtoa_r+0x88a>
 80189fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80189fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018a00:	2a00      	cmp	r2, #0
 8018a02:	f2c0 811d 	blt.w	8018c40 <_dtoa_r+0x610>
 8018a06:	f1bb 0f0e 	cmp.w	fp, #14
 8018a0a:	f300 8119 	bgt.w	8018c40 <_dtoa_r+0x610>
 8018a0e:	4b8a      	ldr	r3, [pc, #552]	; (8018c38 <_dtoa_r+0x608>)
 8018a10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8018a14:	ed93 6b00 	vldr	d6, [r3]
 8018a18:	9b08      	ldr	r3, [sp, #32]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	f280 80b7 	bge.w	8018b8e <_dtoa_r+0x55e>
 8018a20:	f1b9 0f00 	cmp.w	r9, #0
 8018a24:	f300 80b3 	bgt.w	8018b8e <_dtoa_r+0x55e>
 8018a28:	f040 8246 	bne.w	8018eb8 <_dtoa_r+0x888>
 8018a2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8018a30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018a34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018a38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a40:	464c      	mov	r4, r9
 8018a42:	464f      	mov	r7, r9
 8018a44:	f280 821c 	bge.w	8018e80 <_dtoa_r+0x850>
 8018a48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018a4c:	2331      	movs	r3, #49	; 0x31
 8018a4e:	f808 3b01 	strb.w	r3, [r8], #1
 8018a52:	f10b 0b01 	add.w	fp, fp, #1
 8018a56:	e218      	b.n	8018e8a <_dtoa_r+0x85a>
 8018a58:	2102      	movs	r1, #2
 8018a5a:	e780      	b.n	801895e <_dtoa_r+0x32e>
 8018a5c:	07d4      	lsls	r4, r2, #31
 8018a5e:	d504      	bpl.n	8018a6a <_dtoa_r+0x43a>
 8018a60:	ed90 6b00 	vldr	d6, [r0]
 8018a64:	3101      	adds	r1, #1
 8018a66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018a6a:	1052      	asrs	r2, r2, #1
 8018a6c:	3008      	adds	r0, #8
 8018a6e:	e777      	b.n	8018960 <_dtoa_r+0x330>
 8018a70:	d022      	beq.n	8018ab8 <_dtoa_r+0x488>
 8018a72:	f1cb 0200 	rsb	r2, fp, #0
 8018a76:	4970      	ldr	r1, [pc, #448]	; (8018c38 <_dtoa_r+0x608>)
 8018a78:	f002 000f 	and.w	r0, r2, #15
 8018a7c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8018a80:	ed91 7b00 	vldr	d7, [r1]
 8018a84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018a88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018a8c:	486b      	ldr	r0, [pc, #428]	; (8018c3c <_dtoa_r+0x60c>)
 8018a8e:	1112      	asrs	r2, r2, #4
 8018a90:	2400      	movs	r4, #0
 8018a92:	2102      	movs	r1, #2
 8018a94:	b92a      	cbnz	r2, 8018aa2 <_dtoa_r+0x472>
 8018a96:	2c00      	cmp	r4, #0
 8018a98:	f43f af6a 	beq.w	8018970 <_dtoa_r+0x340>
 8018a9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018aa0:	e766      	b.n	8018970 <_dtoa_r+0x340>
 8018aa2:	07d7      	lsls	r7, r2, #31
 8018aa4:	d505      	bpl.n	8018ab2 <_dtoa_r+0x482>
 8018aa6:	ed90 6b00 	vldr	d6, [r0]
 8018aaa:	3101      	adds	r1, #1
 8018aac:	2401      	movs	r4, #1
 8018aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018ab2:	1052      	asrs	r2, r2, #1
 8018ab4:	3008      	adds	r0, #8
 8018ab6:	e7ed      	b.n	8018a94 <_dtoa_r+0x464>
 8018ab8:	2102      	movs	r1, #2
 8018aba:	e759      	b.n	8018970 <_dtoa_r+0x340>
 8018abc:	465a      	mov	r2, fp
 8018abe:	464c      	mov	r4, r9
 8018ac0:	e775      	b.n	80189ae <_dtoa_r+0x37e>
 8018ac2:	ec41 0b17 	vmov	d7, r0, r1
 8018ac6:	495c      	ldr	r1, [pc, #368]	; (8018c38 <_dtoa_r+0x608>)
 8018ac8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8018acc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8018ad0:	9901      	ldr	r1, [sp, #4]
 8018ad2:	440c      	add	r4, r1
 8018ad4:	9907      	ldr	r1, [sp, #28]
 8018ad6:	b351      	cbz	r1, 8018b2e <_dtoa_r+0x4fe>
 8018ad8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018adc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018ae0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018ae4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018ae8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018aec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018af0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018af4:	ee14 1a90 	vmov	r1, s9
 8018af8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018afc:	3130      	adds	r1, #48	; 0x30
 8018afe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018b02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b0a:	f808 1b01 	strb.w	r1, [r8], #1
 8018b0e:	d439      	bmi.n	8018b84 <_dtoa_r+0x554>
 8018b10:	ee32 5b46 	vsub.f64	d5, d2, d6
 8018b14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b1c:	d472      	bmi.n	8018c04 <_dtoa_r+0x5d4>
 8018b1e:	45a0      	cmp	r8, r4
 8018b20:	f43f af6b 	beq.w	80189fa <_dtoa_r+0x3ca>
 8018b24:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018b28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018b2c:	e7e0      	b.n	8018af0 <_dtoa_r+0x4c0>
 8018b2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018b32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018b36:	4620      	mov	r0, r4
 8018b38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8018b3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018b40:	ee14 1a90 	vmov	r1, s9
 8018b44:	3130      	adds	r1, #48	; 0x30
 8018b46:	f808 1b01 	strb.w	r1, [r8], #1
 8018b4a:	45a0      	cmp	r8, r4
 8018b4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018b50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8018b54:	d118      	bne.n	8018b88 <_dtoa_r+0x558>
 8018b56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018b5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018b5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b66:	dc4d      	bgt.n	8018c04 <_dtoa_r+0x5d4>
 8018b68:	ee35 5b47 	vsub.f64	d5, d5, d7
 8018b6c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8018b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b74:	f57f af41 	bpl.w	80189fa <_dtoa_r+0x3ca>
 8018b78:	4680      	mov	r8, r0
 8018b7a:	3801      	subs	r0, #1
 8018b7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018b80:	2b30      	cmp	r3, #48	; 0x30
 8018b82:	d0f9      	beq.n	8018b78 <_dtoa_r+0x548>
 8018b84:	4693      	mov	fp, r2
 8018b86:	e02a      	b.n	8018bde <_dtoa_r+0x5ae>
 8018b88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018b8c:	e7d6      	b.n	8018b3c <_dtoa_r+0x50c>
 8018b8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8018b96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018b9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018b9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8018ba2:	ee15 3a10 	vmov	r3, s10
 8018ba6:	3330      	adds	r3, #48	; 0x30
 8018ba8:	f808 3b01 	strb.w	r3, [r8], #1
 8018bac:	9b01      	ldr	r3, [sp, #4]
 8018bae:	eba8 0303 	sub.w	r3, r8, r3
 8018bb2:	4599      	cmp	r9, r3
 8018bb4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018bb8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018bbc:	d133      	bne.n	8018c26 <_dtoa_r+0x5f6>
 8018bbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8018bc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bca:	dc1a      	bgt.n	8018c02 <_dtoa_r+0x5d2>
 8018bcc:	eeb4 7b46 	vcmp.f64	d7, d6
 8018bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bd4:	d103      	bne.n	8018bde <_dtoa_r+0x5ae>
 8018bd6:	ee15 3a10 	vmov	r3, s10
 8018bda:	07d9      	lsls	r1, r3, #31
 8018bdc:	d411      	bmi.n	8018c02 <_dtoa_r+0x5d2>
 8018bde:	4629      	mov	r1, r5
 8018be0:	4630      	mov	r0, r6
 8018be2:	f000 fbd1 	bl	8019388 <_Bfree>
 8018be6:	2300      	movs	r3, #0
 8018be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018bea:	f888 3000 	strb.w	r3, [r8]
 8018bee:	f10b 0301 	add.w	r3, fp, #1
 8018bf2:	6013      	str	r3, [r2, #0]
 8018bf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	f43f ad69 	beq.w	80186ce <_dtoa_r+0x9e>
 8018bfc:	f8c3 8000 	str.w	r8, [r3]
 8018c00:	e565      	b.n	80186ce <_dtoa_r+0x9e>
 8018c02:	465a      	mov	r2, fp
 8018c04:	4643      	mov	r3, r8
 8018c06:	4698      	mov	r8, r3
 8018c08:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8018c0c:	2939      	cmp	r1, #57	; 0x39
 8018c0e:	d106      	bne.n	8018c1e <_dtoa_r+0x5ee>
 8018c10:	9901      	ldr	r1, [sp, #4]
 8018c12:	4299      	cmp	r1, r3
 8018c14:	d1f7      	bne.n	8018c06 <_dtoa_r+0x5d6>
 8018c16:	9801      	ldr	r0, [sp, #4]
 8018c18:	2130      	movs	r1, #48	; 0x30
 8018c1a:	3201      	adds	r2, #1
 8018c1c:	7001      	strb	r1, [r0, #0]
 8018c1e:	7819      	ldrb	r1, [r3, #0]
 8018c20:	3101      	adds	r1, #1
 8018c22:	7019      	strb	r1, [r3, #0]
 8018c24:	e7ae      	b.n	8018b84 <_dtoa_r+0x554>
 8018c26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8018c2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c32:	d1b2      	bne.n	8018b9a <_dtoa_r+0x56a>
 8018c34:	e7d3      	b.n	8018bde <_dtoa_r+0x5ae>
 8018c36:	bf00      	nop
 8018c38:	0801c688 	.word	0x0801c688
 8018c3c:	0801c660 	.word	0x0801c660
 8018c40:	9907      	ldr	r1, [sp, #28]
 8018c42:	2900      	cmp	r1, #0
 8018c44:	f000 80d0 	beq.w	8018de8 <_dtoa_r+0x7b8>
 8018c48:	9906      	ldr	r1, [sp, #24]
 8018c4a:	2901      	cmp	r1, #1
 8018c4c:	f300 80b4 	bgt.w	8018db8 <_dtoa_r+0x788>
 8018c50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018c52:	2900      	cmp	r1, #0
 8018c54:	f000 80ac 	beq.w	8018db0 <_dtoa_r+0x780>
 8018c58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018c5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018c60:	461c      	mov	r4, r3
 8018c62:	9309      	str	r3, [sp, #36]	; 0x24
 8018c64:	9b04      	ldr	r3, [sp, #16]
 8018c66:	4413      	add	r3, r2
 8018c68:	9304      	str	r3, [sp, #16]
 8018c6a:	9b05      	ldr	r3, [sp, #20]
 8018c6c:	2101      	movs	r1, #1
 8018c6e:	4413      	add	r3, r2
 8018c70:	4630      	mov	r0, r6
 8018c72:	9305      	str	r3, [sp, #20]
 8018c74:	f000 fc88 	bl	8019588 <__i2b>
 8018c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c7a:	4607      	mov	r7, r0
 8018c7c:	f1b8 0f00 	cmp.w	r8, #0
 8018c80:	d00d      	beq.n	8018c9e <_dtoa_r+0x66e>
 8018c82:	9a05      	ldr	r2, [sp, #20]
 8018c84:	2a00      	cmp	r2, #0
 8018c86:	dd0a      	ble.n	8018c9e <_dtoa_r+0x66e>
 8018c88:	4542      	cmp	r2, r8
 8018c8a:	9904      	ldr	r1, [sp, #16]
 8018c8c:	bfa8      	it	ge
 8018c8e:	4642      	movge	r2, r8
 8018c90:	1a89      	subs	r1, r1, r2
 8018c92:	9104      	str	r1, [sp, #16]
 8018c94:	9905      	ldr	r1, [sp, #20]
 8018c96:	eba8 0802 	sub.w	r8, r8, r2
 8018c9a:	1a8a      	subs	r2, r1, r2
 8018c9c:	9205      	str	r2, [sp, #20]
 8018c9e:	b303      	cbz	r3, 8018ce2 <_dtoa_r+0x6b2>
 8018ca0:	9a07      	ldr	r2, [sp, #28]
 8018ca2:	2a00      	cmp	r2, #0
 8018ca4:	f000 80a5 	beq.w	8018df2 <_dtoa_r+0x7c2>
 8018ca8:	2c00      	cmp	r4, #0
 8018caa:	dd13      	ble.n	8018cd4 <_dtoa_r+0x6a4>
 8018cac:	4639      	mov	r1, r7
 8018cae:	4622      	mov	r2, r4
 8018cb0:	4630      	mov	r0, r6
 8018cb2:	930d      	str	r3, [sp, #52]	; 0x34
 8018cb4:	f000 fd28 	bl	8019708 <__pow5mult>
 8018cb8:	462a      	mov	r2, r5
 8018cba:	4601      	mov	r1, r0
 8018cbc:	4607      	mov	r7, r0
 8018cbe:	4630      	mov	r0, r6
 8018cc0:	f000 fc78 	bl	80195b4 <__multiply>
 8018cc4:	4629      	mov	r1, r5
 8018cc6:	9009      	str	r0, [sp, #36]	; 0x24
 8018cc8:	4630      	mov	r0, r6
 8018cca:	f000 fb5d 	bl	8019388 <_Bfree>
 8018cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018cd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018cd2:	4615      	mov	r5, r2
 8018cd4:	1b1a      	subs	r2, r3, r4
 8018cd6:	d004      	beq.n	8018ce2 <_dtoa_r+0x6b2>
 8018cd8:	4629      	mov	r1, r5
 8018cda:	4630      	mov	r0, r6
 8018cdc:	f000 fd14 	bl	8019708 <__pow5mult>
 8018ce0:	4605      	mov	r5, r0
 8018ce2:	2101      	movs	r1, #1
 8018ce4:	4630      	mov	r0, r6
 8018ce6:	f000 fc4f 	bl	8019588 <__i2b>
 8018cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	4604      	mov	r4, r0
 8018cf0:	f340 8081 	ble.w	8018df6 <_dtoa_r+0x7c6>
 8018cf4:	461a      	mov	r2, r3
 8018cf6:	4601      	mov	r1, r0
 8018cf8:	4630      	mov	r0, r6
 8018cfa:	f000 fd05 	bl	8019708 <__pow5mult>
 8018cfe:	9b06      	ldr	r3, [sp, #24]
 8018d00:	2b01      	cmp	r3, #1
 8018d02:	4604      	mov	r4, r0
 8018d04:	dd7a      	ble.n	8018dfc <_dtoa_r+0x7cc>
 8018d06:	2300      	movs	r3, #0
 8018d08:	9309      	str	r3, [sp, #36]	; 0x24
 8018d0a:	6922      	ldr	r2, [r4, #16]
 8018d0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018d10:	6910      	ldr	r0, [r2, #16]
 8018d12:	f000 fbeb 	bl	80194ec <__hi0bits>
 8018d16:	f1c0 0020 	rsb	r0, r0, #32
 8018d1a:	9b05      	ldr	r3, [sp, #20]
 8018d1c:	4418      	add	r0, r3
 8018d1e:	f010 001f 	ands.w	r0, r0, #31
 8018d22:	f000 8093 	beq.w	8018e4c <_dtoa_r+0x81c>
 8018d26:	f1c0 0220 	rsb	r2, r0, #32
 8018d2a:	2a04      	cmp	r2, #4
 8018d2c:	f340 8085 	ble.w	8018e3a <_dtoa_r+0x80a>
 8018d30:	9b04      	ldr	r3, [sp, #16]
 8018d32:	f1c0 001c 	rsb	r0, r0, #28
 8018d36:	4403      	add	r3, r0
 8018d38:	9304      	str	r3, [sp, #16]
 8018d3a:	9b05      	ldr	r3, [sp, #20]
 8018d3c:	4480      	add	r8, r0
 8018d3e:	4403      	add	r3, r0
 8018d40:	9305      	str	r3, [sp, #20]
 8018d42:	9b04      	ldr	r3, [sp, #16]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	dd05      	ble.n	8018d54 <_dtoa_r+0x724>
 8018d48:	4629      	mov	r1, r5
 8018d4a:	461a      	mov	r2, r3
 8018d4c:	4630      	mov	r0, r6
 8018d4e:	f000 fd35 	bl	80197bc <__lshift>
 8018d52:	4605      	mov	r5, r0
 8018d54:	9b05      	ldr	r3, [sp, #20]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	dd05      	ble.n	8018d66 <_dtoa_r+0x736>
 8018d5a:	4621      	mov	r1, r4
 8018d5c:	461a      	mov	r2, r3
 8018d5e:	4630      	mov	r0, r6
 8018d60:	f000 fd2c 	bl	80197bc <__lshift>
 8018d64:	4604      	mov	r4, r0
 8018d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d071      	beq.n	8018e50 <_dtoa_r+0x820>
 8018d6c:	4621      	mov	r1, r4
 8018d6e:	4628      	mov	r0, r5
 8018d70:	f000 fd90 	bl	8019894 <__mcmp>
 8018d74:	2800      	cmp	r0, #0
 8018d76:	da6b      	bge.n	8018e50 <_dtoa_r+0x820>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	4629      	mov	r1, r5
 8018d7c:	220a      	movs	r2, #10
 8018d7e:	4630      	mov	r0, r6
 8018d80:	f000 fb24 	bl	80193cc <__multadd>
 8018d84:	9b07      	ldr	r3, [sp, #28]
 8018d86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018d8a:	4605      	mov	r5, r0
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	f000 8197 	beq.w	80190c0 <_dtoa_r+0xa90>
 8018d92:	4639      	mov	r1, r7
 8018d94:	2300      	movs	r3, #0
 8018d96:	220a      	movs	r2, #10
 8018d98:	4630      	mov	r0, r6
 8018d9a:	f000 fb17 	bl	80193cc <__multadd>
 8018d9e:	f1ba 0f00 	cmp.w	sl, #0
 8018da2:	4607      	mov	r7, r0
 8018da4:	f300 8093 	bgt.w	8018ece <_dtoa_r+0x89e>
 8018da8:	9b06      	ldr	r3, [sp, #24]
 8018daa:	2b02      	cmp	r3, #2
 8018dac:	dc57      	bgt.n	8018e5e <_dtoa_r+0x82e>
 8018dae:	e08e      	b.n	8018ece <_dtoa_r+0x89e>
 8018db0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018db2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8018db6:	e751      	b.n	8018c5c <_dtoa_r+0x62c>
 8018db8:	f109 34ff 	add.w	r4, r9, #4294967295
 8018dbc:	42a3      	cmp	r3, r4
 8018dbe:	bfbf      	itttt	lt
 8018dc0:	1ae2      	sublt	r2, r4, r3
 8018dc2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018dc4:	189b      	addlt	r3, r3, r2
 8018dc6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8018dc8:	bfae      	itee	ge
 8018dca:	1b1c      	subge	r4, r3, r4
 8018dcc:	4623      	movlt	r3, r4
 8018dce:	2400      	movlt	r4, #0
 8018dd0:	f1b9 0f00 	cmp.w	r9, #0
 8018dd4:	bfb5      	itete	lt
 8018dd6:	9a04      	ldrlt	r2, [sp, #16]
 8018dd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018ddc:	eba2 0809 	sublt.w	r8, r2, r9
 8018de0:	464a      	movge	r2, r9
 8018de2:	bfb8      	it	lt
 8018de4:	2200      	movlt	r2, #0
 8018de6:	e73c      	b.n	8018c62 <_dtoa_r+0x632>
 8018de8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018dec:	9f07      	ldr	r7, [sp, #28]
 8018dee:	461c      	mov	r4, r3
 8018df0:	e744      	b.n	8018c7c <_dtoa_r+0x64c>
 8018df2:	461a      	mov	r2, r3
 8018df4:	e770      	b.n	8018cd8 <_dtoa_r+0x6a8>
 8018df6:	9b06      	ldr	r3, [sp, #24]
 8018df8:	2b01      	cmp	r3, #1
 8018dfa:	dc18      	bgt.n	8018e2e <_dtoa_r+0x7fe>
 8018dfc:	9b02      	ldr	r3, [sp, #8]
 8018dfe:	b9b3      	cbnz	r3, 8018e2e <_dtoa_r+0x7fe>
 8018e00:	9b03      	ldr	r3, [sp, #12]
 8018e02:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8018e06:	b9a2      	cbnz	r2, 8018e32 <_dtoa_r+0x802>
 8018e08:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018e0c:	0d12      	lsrs	r2, r2, #20
 8018e0e:	0512      	lsls	r2, r2, #20
 8018e10:	b18a      	cbz	r2, 8018e36 <_dtoa_r+0x806>
 8018e12:	9b04      	ldr	r3, [sp, #16]
 8018e14:	3301      	adds	r3, #1
 8018e16:	9304      	str	r3, [sp, #16]
 8018e18:	9b05      	ldr	r3, [sp, #20]
 8018e1a:	3301      	adds	r3, #1
 8018e1c:	9305      	str	r3, [sp, #20]
 8018e1e:	2301      	movs	r3, #1
 8018e20:	9309      	str	r3, [sp, #36]	; 0x24
 8018e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	f47f af70 	bne.w	8018d0a <_dtoa_r+0x6da>
 8018e2a:	2001      	movs	r0, #1
 8018e2c:	e775      	b.n	8018d1a <_dtoa_r+0x6ea>
 8018e2e:	2300      	movs	r3, #0
 8018e30:	e7f6      	b.n	8018e20 <_dtoa_r+0x7f0>
 8018e32:	9b02      	ldr	r3, [sp, #8]
 8018e34:	e7f4      	b.n	8018e20 <_dtoa_r+0x7f0>
 8018e36:	9209      	str	r2, [sp, #36]	; 0x24
 8018e38:	e7f3      	b.n	8018e22 <_dtoa_r+0x7f2>
 8018e3a:	d082      	beq.n	8018d42 <_dtoa_r+0x712>
 8018e3c:	9b04      	ldr	r3, [sp, #16]
 8018e3e:	321c      	adds	r2, #28
 8018e40:	4413      	add	r3, r2
 8018e42:	9304      	str	r3, [sp, #16]
 8018e44:	9b05      	ldr	r3, [sp, #20]
 8018e46:	4490      	add	r8, r2
 8018e48:	4413      	add	r3, r2
 8018e4a:	e779      	b.n	8018d40 <_dtoa_r+0x710>
 8018e4c:	4602      	mov	r2, r0
 8018e4e:	e7f5      	b.n	8018e3c <_dtoa_r+0x80c>
 8018e50:	f1b9 0f00 	cmp.w	r9, #0
 8018e54:	dc36      	bgt.n	8018ec4 <_dtoa_r+0x894>
 8018e56:	9b06      	ldr	r3, [sp, #24]
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	dd33      	ble.n	8018ec4 <_dtoa_r+0x894>
 8018e5c:	46ca      	mov	sl, r9
 8018e5e:	f1ba 0f00 	cmp.w	sl, #0
 8018e62:	d10d      	bne.n	8018e80 <_dtoa_r+0x850>
 8018e64:	4621      	mov	r1, r4
 8018e66:	4653      	mov	r3, sl
 8018e68:	2205      	movs	r2, #5
 8018e6a:	4630      	mov	r0, r6
 8018e6c:	f000 faae 	bl	80193cc <__multadd>
 8018e70:	4601      	mov	r1, r0
 8018e72:	4604      	mov	r4, r0
 8018e74:	4628      	mov	r0, r5
 8018e76:	f000 fd0d 	bl	8019894 <__mcmp>
 8018e7a:	2800      	cmp	r0, #0
 8018e7c:	f73f ade4 	bgt.w	8018a48 <_dtoa_r+0x418>
 8018e80:	9b08      	ldr	r3, [sp, #32]
 8018e82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018e86:	ea6f 0b03 	mvn.w	fp, r3
 8018e8a:	f04f 0900 	mov.w	r9, #0
 8018e8e:	4621      	mov	r1, r4
 8018e90:	4630      	mov	r0, r6
 8018e92:	f000 fa79 	bl	8019388 <_Bfree>
 8018e96:	2f00      	cmp	r7, #0
 8018e98:	f43f aea1 	beq.w	8018bde <_dtoa_r+0x5ae>
 8018e9c:	f1b9 0f00 	cmp.w	r9, #0
 8018ea0:	d005      	beq.n	8018eae <_dtoa_r+0x87e>
 8018ea2:	45b9      	cmp	r9, r7
 8018ea4:	d003      	beq.n	8018eae <_dtoa_r+0x87e>
 8018ea6:	4649      	mov	r1, r9
 8018ea8:	4630      	mov	r0, r6
 8018eaa:	f000 fa6d 	bl	8019388 <_Bfree>
 8018eae:	4639      	mov	r1, r7
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	f000 fa69 	bl	8019388 <_Bfree>
 8018eb6:	e692      	b.n	8018bde <_dtoa_r+0x5ae>
 8018eb8:	2400      	movs	r4, #0
 8018eba:	4627      	mov	r7, r4
 8018ebc:	e7e0      	b.n	8018e80 <_dtoa_r+0x850>
 8018ebe:	4693      	mov	fp, r2
 8018ec0:	4627      	mov	r7, r4
 8018ec2:	e5c1      	b.n	8018a48 <_dtoa_r+0x418>
 8018ec4:	9b07      	ldr	r3, [sp, #28]
 8018ec6:	46ca      	mov	sl, r9
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	f000 8100 	beq.w	80190ce <_dtoa_r+0xa9e>
 8018ece:	f1b8 0f00 	cmp.w	r8, #0
 8018ed2:	dd05      	ble.n	8018ee0 <_dtoa_r+0x8b0>
 8018ed4:	4639      	mov	r1, r7
 8018ed6:	4642      	mov	r2, r8
 8018ed8:	4630      	mov	r0, r6
 8018eda:	f000 fc6f 	bl	80197bc <__lshift>
 8018ede:	4607      	mov	r7, r0
 8018ee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d05d      	beq.n	8018fa2 <_dtoa_r+0x972>
 8018ee6:	6879      	ldr	r1, [r7, #4]
 8018ee8:	4630      	mov	r0, r6
 8018eea:	f000 fa0d 	bl	8019308 <_Balloc>
 8018eee:	4680      	mov	r8, r0
 8018ef0:	b928      	cbnz	r0, 8018efe <_dtoa_r+0x8ce>
 8018ef2:	4b82      	ldr	r3, [pc, #520]	; (80190fc <_dtoa_r+0xacc>)
 8018ef4:	4602      	mov	r2, r0
 8018ef6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018efa:	f7ff bbb1 	b.w	8018660 <_dtoa_r+0x30>
 8018efe:	693a      	ldr	r2, [r7, #16]
 8018f00:	3202      	adds	r2, #2
 8018f02:	0092      	lsls	r2, r2, #2
 8018f04:	f107 010c 	add.w	r1, r7, #12
 8018f08:	300c      	adds	r0, #12
 8018f0a:	f7ff faf2 	bl	80184f2 <memcpy>
 8018f0e:	2201      	movs	r2, #1
 8018f10:	4641      	mov	r1, r8
 8018f12:	4630      	mov	r0, r6
 8018f14:	f000 fc52 	bl	80197bc <__lshift>
 8018f18:	9b01      	ldr	r3, [sp, #4]
 8018f1a:	3301      	adds	r3, #1
 8018f1c:	9304      	str	r3, [sp, #16]
 8018f1e:	9b01      	ldr	r3, [sp, #4]
 8018f20:	4453      	add	r3, sl
 8018f22:	9308      	str	r3, [sp, #32]
 8018f24:	9b02      	ldr	r3, [sp, #8]
 8018f26:	f003 0301 	and.w	r3, r3, #1
 8018f2a:	46b9      	mov	r9, r7
 8018f2c:	9307      	str	r3, [sp, #28]
 8018f2e:	4607      	mov	r7, r0
 8018f30:	9b04      	ldr	r3, [sp, #16]
 8018f32:	4621      	mov	r1, r4
 8018f34:	3b01      	subs	r3, #1
 8018f36:	4628      	mov	r0, r5
 8018f38:	9302      	str	r3, [sp, #8]
 8018f3a:	f7ff faef 	bl	801851c <quorem>
 8018f3e:	4603      	mov	r3, r0
 8018f40:	3330      	adds	r3, #48	; 0x30
 8018f42:	9005      	str	r0, [sp, #20]
 8018f44:	4649      	mov	r1, r9
 8018f46:	4628      	mov	r0, r5
 8018f48:	9309      	str	r3, [sp, #36]	; 0x24
 8018f4a:	f000 fca3 	bl	8019894 <__mcmp>
 8018f4e:	463a      	mov	r2, r7
 8018f50:	4682      	mov	sl, r0
 8018f52:	4621      	mov	r1, r4
 8018f54:	4630      	mov	r0, r6
 8018f56:	f000 fcb9 	bl	80198cc <__mdiff>
 8018f5a:	68c2      	ldr	r2, [r0, #12]
 8018f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f5e:	4680      	mov	r8, r0
 8018f60:	bb0a      	cbnz	r2, 8018fa6 <_dtoa_r+0x976>
 8018f62:	4601      	mov	r1, r0
 8018f64:	4628      	mov	r0, r5
 8018f66:	f000 fc95 	bl	8019894 <__mcmp>
 8018f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f6c:	4602      	mov	r2, r0
 8018f6e:	4641      	mov	r1, r8
 8018f70:	4630      	mov	r0, r6
 8018f72:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018f76:	f000 fa07 	bl	8019388 <_Bfree>
 8018f7a:	9b06      	ldr	r3, [sp, #24]
 8018f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018f7e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018f82:	ea43 0102 	orr.w	r1, r3, r2
 8018f86:	9b07      	ldr	r3, [sp, #28]
 8018f88:	4319      	orrs	r1, r3
 8018f8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f8c:	d10d      	bne.n	8018faa <_dtoa_r+0x97a>
 8018f8e:	2b39      	cmp	r3, #57	; 0x39
 8018f90:	d029      	beq.n	8018fe6 <_dtoa_r+0x9b6>
 8018f92:	f1ba 0f00 	cmp.w	sl, #0
 8018f96:	dd01      	ble.n	8018f9c <_dtoa_r+0x96c>
 8018f98:	9b05      	ldr	r3, [sp, #20]
 8018f9a:	3331      	adds	r3, #49	; 0x31
 8018f9c:	9a02      	ldr	r2, [sp, #8]
 8018f9e:	7013      	strb	r3, [r2, #0]
 8018fa0:	e775      	b.n	8018e8e <_dtoa_r+0x85e>
 8018fa2:	4638      	mov	r0, r7
 8018fa4:	e7b8      	b.n	8018f18 <_dtoa_r+0x8e8>
 8018fa6:	2201      	movs	r2, #1
 8018fa8:	e7e1      	b.n	8018f6e <_dtoa_r+0x93e>
 8018faa:	f1ba 0f00 	cmp.w	sl, #0
 8018fae:	db06      	blt.n	8018fbe <_dtoa_r+0x98e>
 8018fb0:	9906      	ldr	r1, [sp, #24]
 8018fb2:	ea41 0a0a 	orr.w	sl, r1, sl
 8018fb6:	9907      	ldr	r1, [sp, #28]
 8018fb8:	ea5a 0a01 	orrs.w	sl, sl, r1
 8018fbc:	d120      	bne.n	8019000 <_dtoa_r+0x9d0>
 8018fbe:	2a00      	cmp	r2, #0
 8018fc0:	ddec      	ble.n	8018f9c <_dtoa_r+0x96c>
 8018fc2:	4629      	mov	r1, r5
 8018fc4:	2201      	movs	r2, #1
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	9304      	str	r3, [sp, #16]
 8018fca:	f000 fbf7 	bl	80197bc <__lshift>
 8018fce:	4621      	mov	r1, r4
 8018fd0:	4605      	mov	r5, r0
 8018fd2:	f000 fc5f 	bl	8019894 <__mcmp>
 8018fd6:	2800      	cmp	r0, #0
 8018fd8:	9b04      	ldr	r3, [sp, #16]
 8018fda:	dc02      	bgt.n	8018fe2 <_dtoa_r+0x9b2>
 8018fdc:	d1de      	bne.n	8018f9c <_dtoa_r+0x96c>
 8018fde:	07da      	lsls	r2, r3, #31
 8018fe0:	d5dc      	bpl.n	8018f9c <_dtoa_r+0x96c>
 8018fe2:	2b39      	cmp	r3, #57	; 0x39
 8018fe4:	d1d8      	bne.n	8018f98 <_dtoa_r+0x968>
 8018fe6:	9a02      	ldr	r2, [sp, #8]
 8018fe8:	2339      	movs	r3, #57	; 0x39
 8018fea:	7013      	strb	r3, [r2, #0]
 8018fec:	4643      	mov	r3, r8
 8018fee:	4698      	mov	r8, r3
 8018ff0:	3b01      	subs	r3, #1
 8018ff2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8018ff6:	2a39      	cmp	r2, #57	; 0x39
 8018ff8:	d051      	beq.n	801909e <_dtoa_r+0xa6e>
 8018ffa:	3201      	adds	r2, #1
 8018ffc:	701a      	strb	r2, [r3, #0]
 8018ffe:	e746      	b.n	8018e8e <_dtoa_r+0x85e>
 8019000:	2a00      	cmp	r2, #0
 8019002:	dd03      	ble.n	801900c <_dtoa_r+0x9dc>
 8019004:	2b39      	cmp	r3, #57	; 0x39
 8019006:	d0ee      	beq.n	8018fe6 <_dtoa_r+0x9b6>
 8019008:	3301      	adds	r3, #1
 801900a:	e7c7      	b.n	8018f9c <_dtoa_r+0x96c>
 801900c:	9a04      	ldr	r2, [sp, #16]
 801900e:	9908      	ldr	r1, [sp, #32]
 8019010:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019014:	428a      	cmp	r2, r1
 8019016:	d02b      	beq.n	8019070 <_dtoa_r+0xa40>
 8019018:	4629      	mov	r1, r5
 801901a:	2300      	movs	r3, #0
 801901c:	220a      	movs	r2, #10
 801901e:	4630      	mov	r0, r6
 8019020:	f000 f9d4 	bl	80193cc <__multadd>
 8019024:	45b9      	cmp	r9, r7
 8019026:	4605      	mov	r5, r0
 8019028:	f04f 0300 	mov.w	r3, #0
 801902c:	f04f 020a 	mov.w	r2, #10
 8019030:	4649      	mov	r1, r9
 8019032:	4630      	mov	r0, r6
 8019034:	d107      	bne.n	8019046 <_dtoa_r+0xa16>
 8019036:	f000 f9c9 	bl	80193cc <__multadd>
 801903a:	4681      	mov	r9, r0
 801903c:	4607      	mov	r7, r0
 801903e:	9b04      	ldr	r3, [sp, #16]
 8019040:	3301      	adds	r3, #1
 8019042:	9304      	str	r3, [sp, #16]
 8019044:	e774      	b.n	8018f30 <_dtoa_r+0x900>
 8019046:	f000 f9c1 	bl	80193cc <__multadd>
 801904a:	4639      	mov	r1, r7
 801904c:	4681      	mov	r9, r0
 801904e:	2300      	movs	r3, #0
 8019050:	220a      	movs	r2, #10
 8019052:	4630      	mov	r0, r6
 8019054:	f000 f9ba 	bl	80193cc <__multadd>
 8019058:	4607      	mov	r7, r0
 801905a:	e7f0      	b.n	801903e <_dtoa_r+0xa0e>
 801905c:	f1ba 0f00 	cmp.w	sl, #0
 8019060:	9a01      	ldr	r2, [sp, #4]
 8019062:	bfcc      	ite	gt
 8019064:	46d0      	movgt	r8, sl
 8019066:	f04f 0801 	movle.w	r8, #1
 801906a:	4490      	add	r8, r2
 801906c:	f04f 0900 	mov.w	r9, #0
 8019070:	4629      	mov	r1, r5
 8019072:	2201      	movs	r2, #1
 8019074:	4630      	mov	r0, r6
 8019076:	9302      	str	r3, [sp, #8]
 8019078:	f000 fba0 	bl	80197bc <__lshift>
 801907c:	4621      	mov	r1, r4
 801907e:	4605      	mov	r5, r0
 8019080:	f000 fc08 	bl	8019894 <__mcmp>
 8019084:	2800      	cmp	r0, #0
 8019086:	dcb1      	bgt.n	8018fec <_dtoa_r+0x9bc>
 8019088:	d102      	bne.n	8019090 <_dtoa_r+0xa60>
 801908a:	9b02      	ldr	r3, [sp, #8]
 801908c:	07db      	lsls	r3, r3, #31
 801908e:	d4ad      	bmi.n	8018fec <_dtoa_r+0x9bc>
 8019090:	4643      	mov	r3, r8
 8019092:	4698      	mov	r8, r3
 8019094:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019098:	2a30      	cmp	r2, #48	; 0x30
 801909a:	d0fa      	beq.n	8019092 <_dtoa_r+0xa62>
 801909c:	e6f7      	b.n	8018e8e <_dtoa_r+0x85e>
 801909e:	9a01      	ldr	r2, [sp, #4]
 80190a0:	429a      	cmp	r2, r3
 80190a2:	d1a4      	bne.n	8018fee <_dtoa_r+0x9be>
 80190a4:	f10b 0b01 	add.w	fp, fp, #1
 80190a8:	2331      	movs	r3, #49	; 0x31
 80190aa:	e778      	b.n	8018f9e <_dtoa_r+0x96e>
 80190ac:	4b14      	ldr	r3, [pc, #80]	; (8019100 <_dtoa_r+0xad0>)
 80190ae:	f7ff bb2a 	b.w	8018706 <_dtoa_r+0xd6>
 80190b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	f47f ab05 	bne.w	80186c4 <_dtoa_r+0x94>
 80190ba:	4b12      	ldr	r3, [pc, #72]	; (8019104 <_dtoa_r+0xad4>)
 80190bc:	f7ff bb23 	b.w	8018706 <_dtoa_r+0xd6>
 80190c0:	f1ba 0f00 	cmp.w	sl, #0
 80190c4:	dc03      	bgt.n	80190ce <_dtoa_r+0xa9e>
 80190c6:	9b06      	ldr	r3, [sp, #24]
 80190c8:	2b02      	cmp	r3, #2
 80190ca:	f73f aec8 	bgt.w	8018e5e <_dtoa_r+0x82e>
 80190ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80190d2:	4621      	mov	r1, r4
 80190d4:	4628      	mov	r0, r5
 80190d6:	f7ff fa21 	bl	801851c <quorem>
 80190da:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80190de:	f808 3b01 	strb.w	r3, [r8], #1
 80190e2:	9a01      	ldr	r2, [sp, #4]
 80190e4:	eba8 0202 	sub.w	r2, r8, r2
 80190e8:	4592      	cmp	sl, r2
 80190ea:	ddb7      	ble.n	801905c <_dtoa_r+0xa2c>
 80190ec:	4629      	mov	r1, r5
 80190ee:	2300      	movs	r3, #0
 80190f0:	220a      	movs	r2, #10
 80190f2:	4630      	mov	r0, r6
 80190f4:	f000 f96a 	bl	80193cc <__multadd>
 80190f8:	4605      	mov	r5, r0
 80190fa:	e7ea      	b.n	80190d2 <_dtoa_r+0xaa2>
 80190fc:	0801c5ef 	.word	0x0801c5ef
 8019100:	0801c8d8 	.word	0x0801c8d8
 8019104:	0801c573 	.word	0x0801c573

08019108 <_free_r>:
 8019108:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801910a:	2900      	cmp	r1, #0
 801910c:	d044      	beq.n	8019198 <_free_r+0x90>
 801910e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019112:	9001      	str	r0, [sp, #4]
 8019114:	2b00      	cmp	r3, #0
 8019116:	f1a1 0404 	sub.w	r4, r1, #4
 801911a:	bfb8      	it	lt
 801911c:	18e4      	addlt	r4, r4, r3
 801911e:	f000 f8e7 	bl	80192f0 <__malloc_lock>
 8019122:	4a1e      	ldr	r2, [pc, #120]	; (801919c <_free_r+0x94>)
 8019124:	9801      	ldr	r0, [sp, #4]
 8019126:	6813      	ldr	r3, [r2, #0]
 8019128:	b933      	cbnz	r3, 8019138 <_free_r+0x30>
 801912a:	6063      	str	r3, [r4, #4]
 801912c:	6014      	str	r4, [r2, #0]
 801912e:	b003      	add	sp, #12
 8019130:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019134:	f000 b8e2 	b.w	80192fc <__malloc_unlock>
 8019138:	42a3      	cmp	r3, r4
 801913a:	d908      	bls.n	801914e <_free_r+0x46>
 801913c:	6825      	ldr	r5, [r4, #0]
 801913e:	1961      	adds	r1, r4, r5
 8019140:	428b      	cmp	r3, r1
 8019142:	bf01      	itttt	eq
 8019144:	6819      	ldreq	r1, [r3, #0]
 8019146:	685b      	ldreq	r3, [r3, #4]
 8019148:	1949      	addeq	r1, r1, r5
 801914a:	6021      	streq	r1, [r4, #0]
 801914c:	e7ed      	b.n	801912a <_free_r+0x22>
 801914e:	461a      	mov	r2, r3
 8019150:	685b      	ldr	r3, [r3, #4]
 8019152:	b10b      	cbz	r3, 8019158 <_free_r+0x50>
 8019154:	42a3      	cmp	r3, r4
 8019156:	d9fa      	bls.n	801914e <_free_r+0x46>
 8019158:	6811      	ldr	r1, [r2, #0]
 801915a:	1855      	adds	r5, r2, r1
 801915c:	42a5      	cmp	r5, r4
 801915e:	d10b      	bne.n	8019178 <_free_r+0x70>
 8019160:	6824      	ldr	r4, [r4, #0]
 8019162:	4421      	add	r1, r4
 8019164:	1854      	adds	r4, r2, r1
 8019166:	42a3      	cmp	r3, r4
 8019168:	6011      	str	r1, [r2, #0]
 801916a:	d1e0      	bne.n	801912e <_free_r+0x26>
 801916c:	681c      	ldr	r4, [r3, #0]
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	6053      	str	r3, [r2, #4]
 8019172:	440c      	add	r4, r1
 8019174:	6014      	str	r4, [r2, #0]
 8019176:	e7da      	b.n	801912e <_free_r+0x26>
 8019178:	d902      	bls.n	8019180 <_free_r+0x78>
 801917a:	230c      	movs	r3, #12
 801917c:	6003      	str	r3, [r0, #0]
 801917e:	e7d6      	b.n	801912e <_free_r+0x26>
 8019180:	6825      	ldr	r5, [r4, #0]
 8019182:	1961      	adds	r1, r4, r5
 8019184:	428b      	cmp	r3, r1
 8019186:	bf04      	itt	eq
 8019188:	6819      	ldreq	r1, [r3, #0]
 801918a:	685b      	ldreq	r3, [r3, #4]
 801918c:	6063      	str	r3, [r4, #4]
 801918e:	bf04      	itt	eq
 8019190:	1949      	addeq	r1, r1, r5
 8019192:	6021      	streq	r1, [r4, #0]
 8019194:	6054      	str	r4, [r2, #4]
 8019196:	e7ca      	b.n	801912e <_free_r+0x26>
 8019198:	b003      	add	sp, #12
 801919a:	bd30      	pop	{r4, r5, pc}
 801919c:	240034b8 	.word	0x240034b8

080191a0 <malloc>:
 80191a0:	4b02      	ldr	r3, [pc, #8]	; (80191ac <malloc+0xc>)
 80191a2:	4601      	mov	r1, r0
 80191a4:	6818      	ldr	r0, [r3, #0]
 80191a6:	f000 b823 	b.w	80191f0 <_malloc_r>
 80191aa:	bf00      	nop
 80191ac:	24000158 	.word	0x24000158

080191b0 <sbrk_aligned>:
 80191b0:	b570      	push	{r4, r5, r6, lr}
 80191b2:	4e0e      	ldr	r6, [pc, #56]	; (80191ec <sbrk_aligned+0x3c>)
 80191b4:	460c      	mov	r4, r1
 80191b6:	6831      	ldr	r1, [r6, #0]
 80191b8:	4605      	mov	r5, r0
 80191ba:	b911      	cbnz	r1, 80191c2 <sbrk_aligned+0x12>
 80191bc:	f002 f96a 	bl	801b494 <_sbrk_r>
 80191c0:	6030      	str	r0, [r6, #0]
 80191c2:	4621      	mov	r1, r4
 80191c4:	4628      	mov	r0, r5
 80191c6:	f002 f965 	bl	801b494 <_sbrk_r>
 80191ca:	1c43      	adds	r3, r0, #1
 80191cc:	d00a      	beq.n	80191e4 <sbrk_aligned+0x34>
 80191ce:	1cc4      	adds	r4, r0, #3
 80191d0:	f024 0403 	bic.w	r4, r4, #3
 80191d4:	42a0      	cmp	r0, r4
 80191d6:	d007      	beq.n	80191e8 <sbrk_aligned+0x38>
 80191d8:	1a21      	subs	r1, r4, r0
 80191da:	4628      	mov	r0, r5
 80191dc:	f002 f95a 	bl	801b494 <_sbrk_r>
 80191e0:	3001      	adds	r0, #1
 80191e2:	d101      	bne.n	80191e8 <sbrk_aligned+0x38>
 80191e4:	f04f 34ff 	mov.w	r4, #4294967295
 80191e8:	4620      	mov	r0, r4
 80191ea:	bd70      	pop	{r4, r5, r6, pc}
 80191ec:	240034bc 	.word	0x240034bc

080191f0 <_malloc_r>:
 80191f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191f4:	1ccd      	adds	r5, r1, #3
 80191f6:	f025 0503 	bic.w	r5, r5, #3
 80191fa:	3508      	adds	r5, #8
 80191fc:	2d0c      	cmp	r5, #12
 80191fe:	bf38      	it	cc
 8019200:	250c      	movcc	r5, #12
 8019202:	2d00      	cmp	r5, #0
 8019204:	4607      	mov	r7, r0
 8019206:	db01      	blt.n	801920c <_malloc_r+0x1c>
 8019208:	42a9      	cmp	r1, r5
 801920a:	d905      	bls.n	8019218 <_malloc_r+0x28>
 801920c:	230c      	movs	r3, #12
 801920e:	603b      	str	r3, [r7, #0]
 8019210:	2600      	movs	r6, #0
 8019212:	4630      	mov	r0, r6
 8019214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80192ec <_malloc_r+0xfc>
 801921c:	f000 f868 	bl	80192f0 <__malloc_lock>
 8019220:	f8d8 3000 	ldr.w	r3, [r8]
 8019224:	461c      	mov	r4, r3
 8019226:	bb5c      	cbnz	r4, 8019280 <_malloc_r+0x90>
 8019228:	4629      	mov	r1, r5
 801922a:	4638      	mov	r0, r7
 801922c:	f7ff ffc0 	bl	80191b0 <sbrk_aligned>
 8019230:	1c43      	adds	r3, r0, #1
 8019232:	4604      	mov	r4, r0
 8019234:	d155      	bne.n	80192e2 <_malloc_r+0xf2>
 8019236:	f8d8 4000 	ldr.w	r4, [r8]
 801923a:	4626      	mov	r6, r4
 801923c:	2e00      	cmp	r6, #0
 801923e:	d145      	bne.n	80192cc <_malloc_r+0xdc>
 8019240:	2c00      	cmp	r4, #0
 8019242:	d048      	beq.n	80192d6 <_malloc_r+0xe6>
 8019244:	6823      	ldr	r3, [r4, #0]
 8019246:	4631      	mov	r1, r6
 8019248:	4638      	mov	r0, r7
 801924a:	eb04 0903 	add.w	r9, r4, r3
 801924e:	f002 f921 	bl	801b494 <_sbrk_r>
 8019252:	4581      	cmp	r9, r0
 8019254:	d13f      	bne.n	80192d6 <_malloc_r+0xe6>
 8019256:	6821      	ldr	r1, [r4, #0]
 8019258:	1a6d      	subs	r5, r5, r1
 801925a:	4629      	mov	r1, r5
 801925c:	4638      	mov	r0, r7
 801925e:	f7ff ffa7 	bl	80191b0 <sbrk_aligned>
 8019262:	3001      	adds	r0, #1
 8019264:	d037      	beq.n	80192d6 <_malloc_r+0xe6>
 8019266:	6823      	ldr	r3, [r4, #0]
 8019268:	442b      	add	r3, r5
 801926a:	6023      	str	r3, [r4, #0]
 801926c:	f8d8 3000 	ldr.w	r3, [r8]
 8019270:	2b00      	cmp	r3, #0
 8019272:	d038      	beq.n	80192e6 <_malloc_r+0xf6>
 8019274:	685a      	ldr	r2, [r3, #4]
 8019276:	42a2      	cmp	r2, r4
 8019278:	d12b      	bne.n	80192d2 <_malloc_r+0xe2>
 801927a:	2200      	movs	r2, #0
 801927c:	605a      	str	r2, [r3, #4]
 801927e:	e00f      	b.n	80192a0 <_malloc_r+0xb0>
 8019280:	6822      	ldr	r2, [r4, #0]
 8019282:	1b52      	subs	r2, r2, r5
 8019284:	d41f      	bmi.n	80192c6 <_malloc_r+0xd6>
 8019286:	2a0b      	cmp	r2, #11
 8019288:	d917      	bls.n	80192ba <_malloc_r+0xca>
 801928a:	1961      	adds	r1, r4, r5
 801928c:	42a3      	cmp	r3, r4
 801928e:	6025      	str	r5, [r4, #0]
 8019290:	bf18      	it	ne
 8019292:	6059      	strne	r1, [r3, #4]
 8019294:	6863      	ldr	r3, [r4, #4]
 8019296:	bf08      	it	eq
 8019298:	f8c8 1000 	streq.w	r1, [r8]
 801929c:	5162      	str	r2, [r4, r5]
 801929e:	604b      	str	r3, [r1, #4]
 80192a0:	4638      	mov	r0, r7
 80192a2:	f104 060b 	add.w	r6, r4, #11
 80192a6:	f000 f829 	bl	80192fc <__malloc_unlock>
 80192aa:	f026 0607 	bic.w	r6, r6, #7
 80192ae:	1d23      	adds	r3, r4, #4
 80192b0:	1af2      	subs	r2, r6, r3
 80192b2:	d0ae      	beq.n	8019212 <_malloc_r+0x22>
 80192b4:	1b9b      	subs	r3, r3, r6
 80192b6:	50a3      	str	r3, [r4, r2]
 80192b8:	e7ab      	b.n	8019212 <_malloc_r+0x22>
 80192ba:	42a3      	cmp	r3, r4
 80192bc:	6862      	ldr	r2, [r4, #4]
 80192be:	d1dd      	bne.n	801927c <_malloc_r+0x8c>
 80192c0:	f8c8 2000 	str.w	r2, [r8]
 80192c4:	e7ec      	b.n	80192a0 <_malloc_r+0xb0>
 80192c6:	4623      	mov	r3, r4
 80192c8:	6864      	ldr	r4, [r4, #4]
 80192ca:	e7ac      	b.n	8019226 <_malloc_r+0x36>
 80192cc:	4634      	mov	r4, r6
 80192ce:	6876      	ldr	r6, [r6, #4]
 80192d0:	e7b4      	b.n	801923c <_malloc_r+0x4c>
 80192d2:	4613      	mov	r3, r2
 80192d4:	e7cc      	b.n	8019270 <_malloc_r+0x80>
 80192d6:	230c      	movs	r3, #12
 80192d8:	603b      	str	r3, [r7, #0]
 80192da:	4638      	mov	r0, r7
 80192dc:	f000 f80e 	bl	80192fc <__malloc_unlock>
 80192e0:	e797      	b.n	8019212 <_malloc_r+0x22>
 80192e2:	6025      	str	r5, [r4, #0]
 80192e4:	e7dc      	b.n	80192a0 <_malloc_r+0xb0>
 80192e6:	605b      	str	r3, [r3, #4]
 80192e8:	deff      	udf	#255	; 0xff
 80192ea:	bf00      	nop
 80192ec:	240034b8 	.word	0x240034b8

080192f0 <__malloc_lock>:
 80192f0:	4801      	ldr	r0, [pc, #4]	; (80192f8 <__malloc_lock+0x8>)
 80192f2:	f7ff b8f4 	b.w	80184de <__retarget_lock_acquire_recursive>
 80192f6:	bf00      	nop
 80192f8:	240034b4 	.word	0x240034b4

080192fc <__malloc_unlock>:
 80192fc:	4801      	ldr	r0, [pc, #4]	; (8019304 <__malloc_unlock+0x8>)
 80192fe:	f7ff b8ef 	b.w	80184e0 <__retarget_lock_release_recursive>
 8019302:	bf00      	nop
 8019304:	240034b4 	.word	0x240034b4

08019308 <_Balloc>:
 8019308:	b570      	push	{r4, r5, r6, lr}
 801930a:	69c6      	ldr	r6, [r0, #28]
 801930c:	4604      	mov	r4, r0
 801930e:	460d      	mov	r5, r1
 8019310:	b976      	cbnz	r6, 8019330 <_Balloc+0x28>
 8019312:	2010      	movs	r0, #16
 8019314:	f7ff ff44 	bl	80191a0 <malloc>
 8019318:	4602      	mov	r2, r0
 801931a:	61e0      	str	r0, [r4, #28]
 801931c:	b920      	cbnz	r0, 8019328 <_Balloc+0x20>
 801931e:	4b18      	ldr	r3, [pc, #96]	; (8019380 <_Balloc+0x78>)
 8019320:	4818      	ldr	r0, [pc, #96]	; (8019384 <_Balloc+0x7c>)
 8019322:	216b      	movs	r1, #107	; 0x6b
 8019324:	f002 f8d0 	bl	801b4c8 <__assert_func>
 8019328:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801932c:	6006      	str	r6, [r0, #0]
 801932e:	60c6      	str	r6, [r0, #12]
 8019330:	69e6      	ldr	r6, [r4, #28]
 8019332:	68f3      	ldr	r3, [r6, #12]
 8019334:	b183      	cbz	r3, 8019358 <_Balloc+0x50>
 8019336:	69e3      	ldr	r3, [r4, #28]
 8019338:	68db      	ldr	r3, [r3, #12]
 801933a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801933e:	b9b8      	cbnz	r0, 8019370 <_Balloc+0x68>
 8019340:	2101      	movs	r1, #1
 8019342:	fa01 f605 	lsl.w	r6, r1, r5
 8019346:	1d72      	adds	r2, r6, #5
 8019348:	0092      	lsls	r2, r2, #2
 801934a:	4620      	mov	r0, r4
 801934c:	f002 f8da 	bl	801b504 <_calloc_r>
 8019350:	b160      	cbz	r0, 801936c <_Balloc+0x64>
 8019352:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019356:	e00e      	b.n	8019376 <_Balloc+0x6e>
 8019358:	2221      	movs	r2, #33	; 0x21
 801935a:	2104      	movs	r1, #4
 801935c:	4620      	mov	r0, r4
 801935e:	f002 f8d1 	bl	801b504 <_calloc_r>
 8019362:	69e3      	ldr	r3, [r4, #28]
 8019364:	60f0      	str	r0, [r6, #12]
 8019366:	68db      	ldr	r3, [r3, #12]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d1e4      	bne.n	8019336 <_Balloc+0x2e>
 801936c:	2000      	movs	r0, #0
 801936e:	bd70      	pop	{r4, r5, r6, pc}
 8019370:	6802      	ldr	r2, [r0, #0]
 8019372:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019376:	2300      	movs	r3, #0
 8019378:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801937c:	e7f7      	b.n	801936e <_Balloc+0x66>
 801937e:	bf00      	nop
 8019380:	0801c580 	.word	0x0801c580
 8019384:	0801c600 	.word	0x0801c600

08019388 <_Bfree>:
 8019388:	b570      	push	{r4, r5, r6, lr}
 801938a:	69c6      	ldr	r6, [r0, #28]
 801938c:	4605      	mov	r5, r0
 801938e:	460c      	mov	r4, r1
 8019390:	b976      	cbnz	r6, 80193b0 <_Bfree+0x28>
 8019392:	2010      	movs	r0, #16
 8019394:	f7ff ff04 	bl	80191a0 <malloc>
 8019398:	4602      	mov	r2, r0
 801939a:	61e8      	str	r0, [r5, #28]
 801939c:	b920      	cbnz	r0, 80193a8 <_Bfree+0x20>
 801939e:	4b09      	ldr	r3, [pc, #36]	; (80193c4 <_Bfree+0x3c>)
 80193a0:	4809      	ldr	r0, [pc, #36]	; (80193c8 <_Bfree+0x40>)
 80193a2:	218f      	movs	r1, #143	; 0x8f
 80193a4:	f002 f890 	bl	801b4c8 <__assert_func>
 80193a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80193ac:	6006      	str	r6, [r0, #0]
 80193ae:	60c6      	str	r6, [r0, #12]
 80193b0:	b13c      	cbz	r4, 80193c2 <_Bfree+0x3a>
 80193b2:	69eb      	ldr	r3, [r5, #28]
 80193b4:	6862      	ldr	r2, [r4, #4]
 80193b6:	68db      	ldr	r3, [r3, #12]
 80193b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80193bc:	6021      	str	r1, [r4, #0]
 80193be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80193c2:	bd70      	pop	{r4, r5, r6, pc}
 80193c4:	0801c580 	.word	0x0801c580
 80193c8:	0801c600 	.word	0x0801c600

080193cc <__multadd>:
 80193cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193d0:	690d      	ldr	r5, [r1, #16]
 80193d2:	4607      	mov	r7, r0
 80193d4:	460c      	mov	r4, r1
 80193d6:	461e      	mov	r6, r3
 80193d8:	f101 0c14 	add.w	ip, r1, #20
 80193dc:	2000      	movs	r0, #0
 80193de:	f8dc 3000 	ldr.w	r3, [ip]
 80193e2:	b299      	uxth	r1, r3
 80193e4:	fb02 6101 	mla	r1, r2, r1, r6
 80193e8:	0c1e      	lsrs	r6, r3, #16
 80193ea:	0c0b      	lsrs	r3, r1, #16
 80193ec:	fb02 3306 	mla	r3, r2, r6, r3
 80193f0:	b289      	uxth	r1, r1
 80193f2:	3001      	adds	r0, #1
 80193f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80193f8:	4285      	cmp	r5, r0
 80193fa:	f84c 1b04 	str.w	r1, [ip], #4
 80193fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019402:	dcec      	bgt.n	80193de <__multadd+0x12>
 8019404:	b30e      	cbz	r6, 801944a <__multadd+0x7e>
 8019406:	68a3      	ldr	r3, [r4, #8]
 8019408:	42ab      	cmp	r3, r5
 801940a:	dc19      	bgt.n	8019440 <__multadd+0x74>
 801940c:	6861      	ldr	r1, [r4, #4]
 801940e:	4638      	mov	r0, r7
 8019410:	3101      	adds	r1, #1
 8019412:	f7ff ff79 	bl	8019308 <_Balloc>
 8019416:	4680      	mov	r8, r0
 8019418:	b928      	cbnz	r0, 8019426 <__multadd+0x5a>
 801941a:	4602      	mov	r2, r0
 801941c:	4b0c      	ldr	r3, [pc, #48]	; (8019450 <__multadd+0x84>)
 801941e:	480d      	ldr	r0, [pc, #52]	; (8019454 <__multadd+0x88>)
 8019420:	21ba      	movs	r1, #186	; 0xba
 8019422:	f002 f851 	bl	801b4c8 <__assert_func>
 8019426:	6922      	ldr	r2, [r4, #16]
 8019428:	3202      	adds	r2, #2
 801942a:	f104 010c 	add.w	r1, r4, #12
 801942e:	0092      	lsls	r2, r2, #2
 8019430:	300c      	adds	r0, #12
 8019432:	f7ff f85e 	bl	80184f2 <memcpy>
 8019436:	4621      	mov	r1, r4
 8019438:	4638      	mov	r0, r7
 801943a:	f7ff ffa5 	bl	8019388 <_Bfree>
 801943e:	4644      	mov	r4, r8
 8019440:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019444:	3501      	adds	r5, #1
 8019446:	615e      	str	r6, [r3, #20]
 8019448:	6125      	str	r5, [r4, #16]
 801944a:	4620      	mov	r0, r4
 801944c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019450:	0801c5ef 	.word	0x0801c5ef
 8019454:	0801c600 	.word	0x0801c600

08019458 <__s2b>:
 8019458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801945c:	460c      	mov	r4, r1
 801945e:	4615      	mov	r5, r2
 8019460:	461f      	mov	r7, r3
 8019462:	2209      	movs	r2, #9
 8019464:	3308      	adds	r3, #8
 8019466:	4606      	mov	r6, r0
 8019468:	fb93 f3f2 	sdiv	r3, r3, r2
 801946c:	2100      	movs	r1, #0
 801946e:	2201      	movs	r2, #1
 8019470:	429a      	cmp	r2, r3
 8019472:	db09      	blt.n	8019488 <__s2b+0x30>
 8019474:	4630      	mov	r0, r6
 8019476:	f7ff ff47 	bl	8019308 <_Balloc>
 801947a:	b940      	cbnz	r0, 801948e <__s2b+0x36>
 801947c:	4602      	mov	r2, r0
 801947e:	4b19      	ldr	r3, [pc, #100]	; (80194e4 <__s2b+0x8c>)
 8019480:	4819      	ldr	r0, [pc, #100]	; (80194e8 <__s2b+0x90>)
 8019482:	21d3      	movs	r1, #211	; 0xd3
 8019484:	f002 f820 	bl	801b4c8 <__assert_func>
 8019488:	0052      	lsls	r2, r2, #1
 801948a:	3101      	adds	r1, #1
 801948c:	e7f0      	b.n	8019470 <__s2b+0x18>
 801948e:	9b08      	ldr	r3, [sp, #32]
 8019490:	6143      	str	r3, [r0, #20]
 8019492:	2d09      	cmp	r5, #9
 8019494:	f04f 0301 	mov.w	r3, #1
 8019498:	6103      	str	r3, [r0, #16]
 801949a:	dd16      	ble.n	80194ca <__s2b+0x72>
 801949c:	f104 0909 	add.w	r9, r4, #9
 80194a0:	46c8      	mov	r8, r9
 80194a2:	442c      	add	r4, r5
 80194a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80194a8:	4601      	mov	r1, r0
 80194aa:	3b30      	subs	r3, #48	; 0x30
 80194ac:	220a      	movs	r2, #10
 80194ae:	4630      	mov	r0, r6
 80194b0:	f7ff ff8c 	bl	80193cc <__multadd>
 80194b4:	45a0      	cmp	r8, r4
 80194b6:	d1f5      	bne.n	80194a4 <__s2b+0x4c>
 80194b8:	f1a5 0408 	sub.w	r4, r5, #8
 80194bc:	444c      	add	r4, r9
 80194be:	1b2d      	subs	r5, r5, r4
 80194c0:	1963      	adds	r3, r4, r5
 80194c2:	42bb      	cmp	r3, r7
 80194c4:	db04      	blt.n	80194d0 <__s2b+0x78>
 80194c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80194ca:	340a      	adds	r4, #10
 80194cc:	2509      	movs	r5, #9
 80194ce:	e7f6      	b.n	80194be <__s2b+0x66>
 80194d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80194d4:	4601      	mov	r1, r0
 80194d6:	3b30      	subs	r3, #48	; 0x30
 80194d8:	220a      	movs	r2, #10
 80194da:	4630      	mov	r0, r6
 80194dc:	f7ff ff76 	bl	80193cc <__multadd>
 80194e0:	e7ee      	b.n	80194c0 <__s2b+0x68>
 80194e2:	bf00      	nop
 80194e4:	0801c5ef 	.word	0x0801c5ef
 80194e8:	0801c600 	.word	0x0801c600

080194ec <__hi0bits>:
 80194ec:	0c03      	lsrs	r3, r0, #16
 80194ee:	041b      	lsls	r3, r3, #16
 80194f0:	b9d3      	cbnz	r3, 8019528 <__hi0bits+0x3c>
 80194f2:	0400      	lsls	r0, r0, #16
 80194f4:	2310      	movs	r3, #16
 80194f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80194fa:	bf04      	itt	eq
 80194fc:	0200      	lsleq	r0, r0, #8
 80194fe:	3308      	addeq	r3, #8
 8019500:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019504:	bf04      	itt	eq
 8019506:	0100      	lsleq	r0, r0, #4
 8019508:	3304      	addeq	r3, #4
 801950a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801950e:	bf04      	itt	eq
 8019510:	0080      	lsleq	r0, r0, #2
 8019512:	3302      	addeq	r3, #2
 8019514:	2800      	cmp	r0, #0
 8019516:	db05      	blt.n	8019524 <__hi0bits+0x38>
 8019518:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801951c:	f103 0301 	add.w	r3, r3, #1
 8019520:	bf08      	it	eq
 8019522:	2320      	moveq	r3, #32
 8019524:	4618      	mov	r0, r3
 8019526:	4770      	bx	lr
 8019528:	2300      	movs	r3, #0
 801952a:	e7e4      	b.n	80194f6 <__hi0bits+0xa>

0801952c <__lo0bits>:
 801952c:	6803      	ldr	r3, [r0, #0]
 801952e:	f013 0207 	ands.w	r2, r3, #7
 8019532:	d00c      	beq.n	801954e <__lo0bits+0x22>
 8019534:	07d9      	lsls	r1, r3, #31
 8019536:	d422      	bmi.n	801957e <__lo0bits+0x52>
 8019538:	079a      	lsls	r2, r3, #30
 801953a:	bf49      	itett	mi
 801953c:	085b      	lsrmi	r3, r3, #1
 801953e:	089b      	lsrpl	r3, r3, #2
 8019540:	6003      	strmi	r3, [r0, #0]
 8019542:	2201      	movmi	r2, #1
 8019544:	bf5c      	itt	pl
 8019546:	6003      	strpl	r3, [r0, #0]
 8019548:	2202      	movpl	r2, #2
 801954a:	4610      	mov	r0, r2
 801954c:	4770      	bx	lr
 801954e:	b299      	uxth	r1, r3
 8019550:	b909      	cbnz	r1, 8019556 <__lo0bits+0x2a>
 8019552:	0c1b      	lsrs	r3, r3, #16
 8019554:	2210      	movs	r2, #16
 8019556:	b2d9      	uxtb	r1, r3
 8019558:	b909      	cbnz	r1, 801955e <__lo0bits+0x32>
 801955a:	3208      	adds	r2, #8
 801955c:	0a1b      	lsrs	r3, r3, #8
 801955e:	0719      	lsls	r1, r3, #28
 8019560:	bf04      	itt	eq
 8019562:	091b      	lsreq	r3, r3, #4
 8019564:	3204      	addeq	r2, #4
 8019566:	0799      	lsls	r1, r3, #30
 8019568:	bf04      	itt	eq
 801956a:	089b      	lsreq	r3, r3, #2
 801956c:	3202      	addeq	r2, #2
 801956e:	07d9      	lsls	r1, r3, #31
 8019570:	d403      	bmi.n	801957a <__lo0bits+0x4e>
 8019572:	085b      	lsrs	r3, r3, #1
 8019574:	f102 0201 	add.w	r2, r2, #1
 8019578:	d003      	beq.n	8019582 <__lo0bits+0x56>
 801957a:	6003      	str	r3, [r0, #0]
 801957c:	e7e5      	b.n	801954a <__lo0bits+0x1e>
 801957e:	2200      	movs	r2, #0
 8019580:	e7e3      	b.n	801954a <__lo0bits+0x1e>
 8019582:	2220      	movs	r2, #32
 8019584:	e7e1      	b.n	801954a <__lo0bits+0x1e>
	...

08019588 <__i2b>:
 8019588:	b510      	push	{r4, lr}
 801958a:	460c      	mov	r4, r1
 801958c:	2101      	movs	r1, #1
 801958e:	f7ff febb 	bl	8019308 <_Balloc>
 8019592:	4602      	mov	r2, r0
 8019594:	b928      	cbnz	r0, 80195a2 <__i2b+0x1a>
 8019596:	4b05      	ldr	r3, [pc, #20]	; (80195ac <__i2b+0x24>)
 8019598:	4805      	ldr	r0, [pc, #20]	; (80195b0 <__i2b+0x28>)
 801959a:	f240 1145 	movw	r1, #325	; 0x145
 801959e:	f001 ff93 	bl	801b4c8 <__assert_func>
 80195a2:	2301      	movs	r3, #1
 80195a4:	6144      	str	r4, [r0, #20]
 80195a6:	6103      	str	r3, [r0, #16]
 80195a8:	bd10      	pop	{r4, pc}
 80195aa:	bf00      	nop
 80195ac:	0801c5ef 	.word	0x0801c5ef
 80195b0:	0801c600 	.word	0x0801c600

080195b4 <__multiply>:
 80195b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195b8:	4691      	mov	r9, r2
 80195ba:	690a      	ldr	r2, [r1, #16]
 80195bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80195c0:	429a      	cmp	r2, r3
 80195c2:	bfb8      	it	lt
 80195c4:	460b      	movlt	r3, r1
 80195c6:	460c      	mov	r4, r1
 80195c8:	bfbc      	itt	lt
 80195ca:	464c      	movlt	r4, r9
 80195cc:	4699      	movlt	r9, r3
 80195ce:	6927      	ldr	r7, [r4, #16]
 80195d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80195d4:	68a3      	ldr	r3, [r4, #8]
 80195d6:	6861      	ldr	r1, [r4, #4]
 80195d8:	eb07 060a 	add.w	r6, r7, sl
 80195dc:	42b3      	cmp	r3, r6
 80195de:	b085      	sub	sp, #20
 80195e0:	bfb8      	it	lt
 80195e2:	3101      	addlt	r1, #1
 80195e4:	f7ff fe90 	bl	8019308 <_Balloc>
 80195e8:	b930      	cbnz	r0, 80195f8 <__multiply+0x44>
 80195ea:	4602      	mov	r2, r0
 80195ec:	4b44      	ldr	r3, [pc, #272]	; (8019700 <__multiply+0x14c>)
 80195ee:	4845      	ldr	r0, [pc, #276]	; (8019704 <__multiply+0x150>)
 80195f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80195f4:	f001 ff68 	bl	801b4c8 <__assert_func>
 80195f8:	f100 0514 	add.w	r5, r0, #20
 80195fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019600:	462b      	mov	r3, r5
 8019602:	2200      	movs	r2, #0
 8019604:	4543      	cmp	r3, r8
 8019606:	d321      	bcc.n	801964c <__multiply+0x98>
 8019608:	f104 0314 	add.w	r3, r4, #20
 801960c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019610:	f109 0314 	add.w	r3, r9, #20
 8019614:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019618:	9202      	str	r2, [sp, #8]
 801961a:	1b3a      	subs	r2, r7, r4
 801961c:	3a15      	subs	r2, #21
 801961e:	f022 0203 	bic.w	r2, r2, #3
 8019622:	3204      	adds	r2, #4
 8019624:	f104 0115 	add.w	r1, r4, #21
 8019628:	428f      	cmp	r7, r1
 801962a:	bf38      	it	cc
 801962c:	2204      	movcc	r2, #4
 801962e:	9201      	str	r2, [sp, #4]
 8019630:	9a02      	ldr	r2, [sp, #8]
 8019632:	9303      	str	r3, [sp, #12]
 8019634:	429a      	cmp	r2, r3
 8019636:	d80c      	bhi.n	8019652 <__multiply+0x9e>
 8019638:	2e00      	cmp	r6, #0
 801963a:	dd03      	ble.n	8019644 <__multiply+0x90>
 801963c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019640:	2b00      	cmp	r3, #0
 8019642:	d05b      	beq.n	80196fc <__multiply+0x148>
 8019644:	6106      	str	r6, [r0, #16]
 8019646:	b005      	add	sp, #20
 8019648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801964c:	f843 2b04 	str.w	r2, [r3], #4
 8019650:	e7d8      	b.n	8019604 <__multiply+0x50>
 8019652:	f8b3 a000 	ldrh.w	sl, [r3]
 8019656:	f1ba 0f00 	cmp.w	sl, #0
 801965a:	d024      	beq.n	80196a6 <__multiply+0xf2>
 801965c:	f104 0e14 	add.w	lr, r4, #20
 8019660:	46a9      	mov	r9, r5
 8019662:	f04f 0c00 	mov.w	ip, #0
 8019666:	f85e 2b04 	ldr.w	r2, [lr], #4
 801966a:	f8d9 1000 	ldr.w	r1, [r9]
 801966e:	fa1f fb82 	uxth.w	fp, r2
 8019672:	b289      	uxth	r1, r1
 8019674:	fb0a 110b 	mla	r1, sl, fp, r1
 8019678:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801967c:	f8d9 2000 	ldr.w	r2, [r9]
 8019680:	4461      	add	r1, ip
 8019682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019686:	fb0a c20b 	mla	r2, sl, fp, ip
 801968a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801968e:	b289      	uxth	r1, r1
 8019690:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019694:	4577      	cmp	r7, lr
 8019696:	f849 1b04 	str.w	r1, [r9], #4
 801969a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801969e:	d8e2      	bhi.n	8019666 <__multiply+0xb2>
 80196a0:	9a01      	ldr	r2, [sp, #4]
 80196a2:	f845 c002 	str.w	ip, [r5, r2]
 80196a6:	9a03      	ldr	r2, [sp, #12]
 80196a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80196ac:	3304      	adds	r3, #4
 80196ae:	f1b9 0f00 	cmp.w	r9, #0
 80196b2:	d021      	beq.n	80196f8 <__multiply+0x144>
 80196b4:	6829      	ldr	r1, [r5, #0]
 80196b6:	f104 0c14 	add.w	ip, r4, #20
 80196ba:	46ae      	mov	lr, r5
 80196bc:	f04f 0a00 	mov.w	sl, #0
 80196c0:	f8bc b000 	ldrh.w	fp, [ip]
 80196c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80196c8:	fb09 220b 	mla	r2, r9, fp, r2
 80196cc:	4452      	add	r2, sl
 80196ce:	b289      	uxth	r1, r1
 80196d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80196d4:	f84e 1b04 	str.w	r1, [lr], #4
 80196d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80196dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80196e0:	f8be 1000 	ldrh.w	r1, [lr]
 80196e4:	fb09 110a 	mla	r1, r9, sl, r1
 80196e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80196ec:	4567      	cmp	r7, ip
 80196ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80196f2:	d8e5      	bhi.n	80196c0 <__multiply+0x10c>
 80196f4:	9a01      	ldr	r2, [sp, #4]
 80196f6:	50a9      	str	r1, [r5, r2]
 80196f8:	3504      	adds	r5, #4
 80196fa:	e799      	b.n	8019630 <__multiply+0x7c>
 80196fc:	3e01      	subs	r6, #1
 80196fe:	e79b      	b.n	8019638 <__multiply+0x84>
 8019700:	0801c5ef 	.word	0x0801c5ef
 8019704:	0801c600 	.word	0x0801c600

08019708 <__pow5mult>:
 8019708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801970c:	4615      	mov	r5, r2
 801970e:	f012 0203 	ands.w	r2, r2, #3
 8019712:	4606      	mov	r6, r0
 8019714:	460f      	mov	r7, r1
 8019716:	d007      	beq.n	8019728 <__pow5mult+0x20>
 8019718:	4c25      	ldr	r4, [pc, #148]	; (80197b0 <__pow5mult+0xa8>)
 801971a:	3a01      	subs	r2, #1
 801971c:	2300      	movs	r3, #0
 801971e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019722:	f7ff fe53 	bl	80193cc <__multadd>
 8019726:	4607      	mov	r7, r0
 8019728:	10ad      	asrs	r5, r5, #2
 801972a:	d03d      	beq.n	80197a8 <__pow5mult+0xa0>
 801972c:	69f4      	ldr	r4, [r6, #28]
 801972e:	b97c      	cbnz	r4, 8019750 <__pow5mult+0x48>
 8019730:	2010      	movs	r0, #16
 8019732:	f7ff fd35 	bl	80191a0 <malloc>
 8019736:	4602      	mov	r2, r0
 8019738:	61f0      	str	r0, [r6, #28]
 801973a:	b928      	cbnz	r0, 8019748 <__pow5mult+0x40>
 801973c:	4b1d      	ldr	r3, [pc, #116]	; (80197b4 <__pow5mult+0xac>)
 801973e:	481e      	ldr	r0, [pc, #120]	; (80197b8 <__pow5mult+0xb0>)
 8019740:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019744:	f001 fec0 	bl	801b4c8 <__assert_func>
 8019748:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801974c:	6004      	str	r4, [r0, #0]
 801974e:	60c4      	str	r4, [r0, #12]
 8019750:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019754:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019758:	b94c      	cbnz	r4, 801976e <__pow5mult+0x66>
 801975a:	f240 2171 	movw	r1, #625	; 0x271
 801975e:	4630      	mov	r0, r6
 8019760:	f7ff ff12 	bl	8019588 <__i2b>
 8019764:	2300      	movs	r3, #0
 8019766:	f8c8 0008 	str.w	r0, [r8, #8]
 801976a:	4604      	mov	r4, r0
 801976c:	6003      	str	r3, [r0, #0]
 801976e:	f04f 0900 	mov.w	r9, #0
 8019772:	07eb      	lsls	r3, r5, #31
 8019774:	d50a      	bpl.n	801978c <__pow5mult+0x84>
 8019776:	4639      	mov	r1, r7
 8019778:	4622      	mov	r2, r4
 801977a:	4630      	mov	r0, r6
 801977c:	f7ff ff1a 	bl	80195b4 <__multiply>
 8019780:	4639      	mov	r1, r7
 8019782:	4680      	mov	r8, r0
 8019784:	4630      	mov	r0, r6
 8019786:	f7ff fdff 	bl	8019388 <_Bfree>
 801978a:	4647      	mov	r7, r8
 801978c:	106d      	asrs	r5, r5, #1
 801978e:	d00b      	beq.n	80197a8 <__pow5mult+0xa0>
 8019790:	6820      	ldr	r0, [r4, #0]
 8019792:	b938      	cbnz	r0, 80197a4 <__pow5mult+0x9c>
 8019794:	4622      	mov	r2, r4
 8019796:	4621      	mov	r1, r4
 8019798:	4630      	mov	r0, r6
 801979a:	f7ff ff0b 	bl	80195b4 <__multiply>
 801979e:	6020      	str	r0, [r4, #0]
 80197a0:	f8c0 9000 	str.w	r9, [r0]
 80197a4:	4604      	mov	r4, r0
 80197a6:	e7e4      	b.n	8019772 <__pow5mult+0x6a>
 80197a8:	4638      	mov	r0, r7
 80197aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197ae:	bf00      	nop
 80197b0:	0801c750 	.word	0x0801c750
 80197b4:	0801c580 	.word	0x0801c580
 80197b8:	0801c600 	.word	0x0801c600

080197bc <__lshift>:
 80197bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80197c0:	460c      	mov	r4, r1
 80197c2:	6849      	ldr	r1, [r1, #4]
 80197c4:	6923      	ldr	r3, [r4, #16]
 80197c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80197ca:	68a3      	ldr	r3, [r4, #8]
 80197cc:	4607      	mov	r7, r0
 80197ce:	4691      	mov	r9, r2
 80197d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80197d4:	f108 0601 	add.w	r6, r8, #1
 80197d8:	42b3      	cmp	r3, r6
 80197da:	db0b      	blt.n	80197f4 <__lshift+0x38>
 80197dc:	4638      	mov	r0, r7
 80197de:	f7ff fd93 	bl	8019308 <_Balloc>
 80197e2:	4605      	mov	r5, r0
 80197e4:	b948      	cbnz	r0, 80197fa <__lshift+0x3e>
 80197e6:	4602      	mov	r2, r0
 80197e8:	4b28      	ldr	r3, [pc, #160]	; (801988c <__lshift+0xd0>)
 80197ea:	4829      	ldr	r0, [pc, #164]	; (8019890 <__lshift+0xd4>)
 80197ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80197f0:	f001 fe6a 	bl	801b4c8 <__assert_func>
 80197f4:	3101      	adds	r1, #1
 80197f6:	005b      	lsls	r3, r3, #1
 80197f8:	e7ee      	b.n	80197d8 <__lshift+0x1c>
 80197fa:	2300      	movs	r3, #0
 80197fc:	f100 0114 	add.w	r1, r0, #20
 8019800:	f100 0210 	add.w	r2, r0, #16
 8019804:	4618      	mov	r0, r3
 8019806:	4553      	cmp	r3, sl
 8019808:	db33      	blt.n	8019872 <__lshift+0xb6>
 801980a:	6920      	ldr	r0, [r4, #16]
 801980c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019810:	f104 0314 	add.w	r3, r4, #20
 8019814:	f019 091f 	ands.w	r9, r9, #31
 8019818:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801981c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019820:	d02b      	beq.n	801987a <__lshift+0xbe>
 8019822:	f1c9 0e20 	rsb	lr, r9, #32
 8019826:	468a      	mov	sl, r1
 8019828:	2200      	movs	r2, #0
 801982a:	6818      	ldr	r0, [r3, #0]
 801982c:	fa00 f009 	lsl.w	r0, r0, r9
 8019830:	4310      	orrs	r0, r2
 8019832:	f84a 0b04 	str.w	r0, [sl], #4
 8019836:	f853 2b04 	ldr.w	r2, [r3], #4
 801983a:	459c      	cmp	ip, r3
 801983c:	fa22 f20e 	lsr.w	r2, r2, lr
 8019840:	d8f3      	bhi.n	801982a <__lshift+0x6e>
 8019842:	ebac 0304 	sub.w	r3, ip, r4
 8019846:	3b15      	subs	r3, #21
 8019848:	f023 0303 	bic.w	r3, r3, #3
 801984c:	3304      	adds	r3, #4
 801984e:	f104 0015 	add.w	r0, r4, #21
 8019852:	4584      	cmp	ip, r0
 8019854:	bf38      	it	cc
 8019856:	2304      	movcc	r3, #4
 8019858:	50ca      	str	r2, [r1, r3]
 801985a:	b10a      	cbz	r2, 8019860 <__lshift+0xa4>
 801985c:	f108 0602 	add.w	r6, r8, #2
 8019860:	3e01      	subs	r6, #1
 8019862:	4638      	mov	r0, r7
 8019864:	612e      	str	r6, [r5, #16]
 8019866:	4621      	mov	r1, r4
 8019868:	f7ff fd8e 	bl	8019388 <_Bfree>
 801986c:	4628      	mov	r0, r5
 801986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019872:	f842 0f04 	str.w	r0, [r2, #4]!
 8019876:	3301      	adds	r3, #1
 8019878:	e7c5      	b.n	8019806 <__lshift+0x4a>
 801987a:	3904      	subs	r1, #4
 801987c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019880:	f841 2f04 	str.w	r2, [r1, #4]!
 8019884:	459c      	cmp	ip, r3
 8019886:	d8f9      	bhi.n	801987c <__lshift+0xc0>
 8019888:	e7ea      	b.n	8019860 <__lshift+0xa4>
 801988a:	bf00      	nop
 801988c:	0801c5ef 	.word	0x0801c5ef
 8019890:	0801c600 	.word	0x0801c600

08019894 <__mcmp>:
 8019894:	b530      	push	{r4, r5, lr}
 8019896:	6902      	ldr	r2, [r0, #16]
 8019898:	690c      	ldr	r4, [r1, #16]
 801989a:	1b12      	subs	r2, r2, r4
 801989c:	d10e      	bne.n	80198bc <__mcmp+0x28>
 801989e:	f100 0314 	add.w	r3, r0, #20
 80198a2:	3114      	adds	r1, #20
 80198a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80198a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80198ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80198b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80198b4:	42a5      	cmp	r5, r4
 80198b6:	d003      	beq.n	80198c0 <__mcmp+0x2c>
 80198b8:	d305      	bcc.n	80198c6 <__mcmp+0x32>
 80198ba:	2201      	movs	r2, #1
 80198bc:	4610      	mov	r0, r2
 80198be:	bd30      	pop	{r4, r5, pc}
 80198c0:	4283      	cmp	r3, r0
 80198c2:	d3f3      	bcc.n	80198ac <__mcmp+0x18>
 80198c4:	e7fa      	b.n	80198bc <__mcmp+0x28>
 80198c6:	f04f 32ff 	mov.w	r2, #4294967295
 80198ca:	e7f7      	b.n	80198bc <__mcmp+0x28>

080198cc <__mdiff>:
 80198cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198d0:	460c      	mov	r4, r1
 80198d2:	4606      	mov	r6, r0
 80198d4:	4611      	mov	r1, r2
 80198d6:	4620      	mov	r0, r4
 80198d8:	4690      	mov	r8, r2
 80198da:	f7ff ffdb 	bl	8019894 <__mcmp>
 80198de:	1e05      	subs	r5, r0, #0
 80198e0:	d110      	bne.n	8019904 <__mdiff+0x38>
 80198e2:	4629      	mov	r1, r5
 80198e4:	4630      	mov	r0, r6
 80198e6:	f7ff fd0f 	bl	8019308 <_Balloc>
 80198ea:	b930      	cbnz	r0, 80198fa <__mdiff+0x2e>
 80198ec:	4b3a      	ldr	r3, [pc, #232]	; (80199d8 <__mdiff+0x10c>)
 80198ee:	4602      	mov	r2, r0
 80198f0:	f240 2137 	movw	r1, #567	; 0x237
 80198f4:	4839      	ldr	r0, [pc, #228]	; (80199dc <__mdiff+0x110>)
 80198f6:	f001 fde7 	bl	801b4c8 <__assert_func>
 80198fa:	2301      	movs	r3, #1
 80198fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019904:	bfa4      	itt	ge
 8019906:	4643      	movge	r3, r8
 8019908:	46a0      	movge	r8, r4
 801990a:	4630      	mov	r0, r6
 801990c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019910:	bfa6      	itte	ge
 8019912:	461c      	movge	r4, r3
 8019914:	2500      	movge	r5, #0
 8019916:	2501      	movlt	r5, #1
 8019918:	f7ff fcf6 	bl	8019308 <_Balloc>
 801991c:	b920      	cbnz	r0, 8019928 <__mdiff+0x5c>
 801991e:	4b2e      	ldr	r3, [pc, #184]	; (80199d8 <__mdiff+0x10c>)
 8019920:	4602      	mov	r2, r0
 8019922:	f240 2145 	movw	r1, #581	; 0x245
 8019926:	e7e5      	b.n	80198f4 <__mdiff+0x28>
 8019928:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801992c:	6926      	ldr	r6, [r4, #16]
 801992e:	60c5      	str	r5, [r0, #12]
 8019930:	f104 0914 	add.w	r9, r4, #20
 8019934:	f108 0514 	add.w	r5, r8, #20
 8019938:	f100 0e14 	add.w	lr, r0, #20
 801993c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019940:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019944:	f108 0210 	add.w	r2, r8, #16
 8019948:	46f2      	mov	sl, lr
 801994a:	2100      	movs	r1, #0
 801994c:	f859 3b04 	ldr.w	r3, [r9], #4
 8019950:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019954:	fa11 f88b 	uxtah	r8, r1, fp
 8019958:	b299      	uxth	r1, r3
 801995a:	0c1b      	lsrs	r3, r3, #16
 801995c:	eba8 0801 	sub.w	r8, r8, r1
 8019960:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019964:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019968:	fa1f f888 	uxth.w	r8, r8
 801996c:	1419      	asrs	r1, r3, #16
 801996e:	454e      	cmp	r6, r9
 8019970:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019974:	f84a 3b04 	str.w	r3, [sl], #4
 8019978:	d8e8      	bhi.n	801994c <__mdiff+0x80>
 801997a:	1b33      	subs	r3, r6, r4
 801997c:	3b15      	subs	r3, #21
 801997e:	f023 0303 	bic.w	r3, r3, #3
 8019982:	3304      	adds	r3, #4
 8019984:	3415      	adds	r4, #21
 8019986:	42a6      	cmp	r6, r4
 8019988:	bf38      	it	cc
 801998a:	2304      	movcc	r3, #4
 801998c:	441d      	add	r5, r3
 801998e:	4473      	add	r3, lr
 8019990:	469e      	mov	lr, r3
 8019992:	462e      	mov	r6, r5
 8019994:	4566      	cmp	r6, ip
 8019996:	d30e      	bcc.n	80199b6 <__mdiff+0xea>
 8019998:	f10c 0203 	add.w	r2, ip, #3
 801999c:	1b52      	subs	r2, r2, r5
 801999e:	f022 0203 	bic.w	r2, r2, #3
 80199a2:	3d03      	subs	r5, #3
 80199a4:	45ac      	cmp	ip, r5
 80199a6:	bf38      	it	cc
 80199a8:	2200      	movcc	r2, #0
 80199aa:	4413      	add	r3, r2
 80199ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80199b0:	b17a      	cbz	r2, 80199d2 <__mdiff+0x106>
 80199b2:	6107      	str	r7, [r0, #16]
 80199b4:	e7a4      	b.n	8019900 <__mdiff+0x34>
 80199b6:	f856 8b04 	ldr.w	r8, [r6], #4
 80199ba:	fa11 f288 	uxtah	r2, r1, r8
 80199be:	1414      	asrs	r4, r2, #16
 80199c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80199c4:	b292      	uxth	r2, r2
 80199c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80199ca:	f84e 2b04 	str.w	r2, [lr], #4
 80199ce:	1421      	asrs	r1, r4, #16
 80199d0:	e7e0      	b.n	8019994 <__mdiff+0xc8>
 80199d2:	3f01      	subs	r7, #1
 80199d4:	e7ea      	b.n	80199ac <__mdiff+0xe0>
 80199d6:	bf00      	nop
 80199d8:	0801c5ef 	.word	0x0801c5ef
 80199dc:	0801c600 	.word	0x0801c600

080199e0 <__ulp>:
 80199e0:	b082      	sub	sp, #8
 80199e2:	ed8d 0b00 	vstr	d0, [sp]
 80199e6:	9a01      	ldr	r2, [sp, #4]
 80199e8:	4b0f      	ldr	r3, [pc, #60]	; (8019a28 <__ulp+0x48>)
 80199ea:	4013      	ands	r3, r2
 80199ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	dc08      	bgt.n	8019a06 <__ulp+0x26>
 80199f4:	425b      	negs	r3, r3
 80199f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80199fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80199fe:	da04      	bge.n	8019a0a <__ulp+0x2a>
 8019a00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019a04:	4113      	asrs	r3, r2
 8019a06:	2200      	movs	r2, #0
 8019a08:	e008      	b.n	8019a1c <__ulp+0x3c>
 8019a0a:	f1a2 0314 	sub.w	r3, r2, #20
 8019a0e:	2b1e      	cmp	r3, #30
 8019a10:	bfda      	itte	le
 8019a12:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019a16:	40da      	lsrle	r2, r3
 8019a18:	2201      	movgt	r2, #1
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	4619      	mov	r1, r3
 8019a1e:	4610      	mov	r0, r2
 8019a20:	ec41 0b10 	vmov	d0, r0, r1
 8019a24:	b002      	add	sp, #8
 8019a26:	4770      	bx	lr
 8019a28:	7ff00000 	.word	0x7ff00000

08019a2c <__b2d>:
 8019a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a30:	6906      	ldr	r6, [r0, #16]
 8019a32:	f100 0814 	add.w	r8, r0, #20
 8019a36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019a3a:	1f37      	subs	r7, r6, #4
 8019a3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8019a40:	4610      	mov	r0, r2
 8019a42:	f7ff fd53 	bl	80194ec <__hi0bits>
 8019a46:	f1c0 0320 	rsb	r3, r0, #32
 8019a4a:	280a      	cmp	r0, #10
 8019a4c:	600b      	str	r3, [r1, #0]
 8019a4e:	491b      	ldr	r1, [pc, #108]	; (8019abc <__b2d+0x90>)
 8019a50:	dc15      	bgt.n	8019a7e <__b2d+0x52>
 8019a52:	f1c0 0c0b 	rsb	ip, r0, #11
 8019a56:	fa22 f30c 	lsr.w	r3, r2, ip
 8019a5a:	45b8      	cmp	r8, r7
 8019a5c:	ea43 0501 	orr.w	r5, r3, r1
 8019a60:	bf34      	ite	cc
 8019a62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019a66:	2300      	movcs	r3, #0
 8019a68:	3015      	adds	r0, #21
 8019a6a:	fa02 f000 	lsl.w	r0, r2, r0
 8019a6e:	fa23 f30c 	lsr.w	r3, r3, ip
 8019a72:	4303      	orrs	r3, r0
 8019a74:	461c      	mov	r4, r3
 8019a76:	ec45 4b10 	vmov	d0, r4, r5
 8019a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a7e:	45b8      	cmp	r8, r7
 8019a80:	bf3a      	itte	cc
 8019a82:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019a86:	f1a6 0708 	subcc.w	r7, r6, #8
 8019a8a:	2300      	movcs	r3, #0
 8019a8c:	380b      	subs	r0, #11
 8019a8e:	d012      	beq.n	8019ab6 <__b2d+0x8a>
 8019a90:	f1c0 0120 	rsb	r1, r0, #32
 8019a94:	fa23 f401 	lsr.w	r4, r3, r1
 8019a98:	4082      	lsls	r2, r0
 8019a9a:	4322      	orrs	r2, r4
 8019a9c:	4547      	cmp	r7, r8
 8019a9e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019aa2:	bf8c      	ite	hi
 8019aa4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019aa8:	2200      	movls	r2, #0
 8019aaa:	4083      	lsls	r3, r0
 8019aac:	40ca      	lsrs	r2, r1
 8019aae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019ab2:	4313      	orrs	r3, r2
 8019ab4:	e7de      	b.n	8019a74 <__b2d+0x48>
 8019ab6:	ea42 0501 	orr.w	r5, r2, r1
 8019aba:	e7db      	b.n	8019a74 <__b2d+0x48>
 8019abc:	3ff00000 	.word	0x3ff00000

08019ac0 <__d2b>:
 8019ac0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ac4:	460f      	mov	r7, r1
 8019ac6:	2101      	movs	r1, #1
 8019ac8:	ec59 8b10 	vmov	r8, r9, d0
 8019acc:	4616      	mov	r6, r2
 8019ace:	f7ff fc1b 	bl	8019308 <_Balloc>
 8019ad2:	4604      	mov	r4, r0
 8019ad4:	b930      	cbnz	r0, 8019ae4 <__d2b+0x24>
 8019ad6:	4602      	mov	r2, r0
 8019ad8:	4b24      	ldr	r3, [pc, #144]	; (8019b6c <__d2b+0xac>)
 8019ada:	4825      	ldr	r0, [pc, #148]	; (8019b70 <__d2b+0xb0>)
 8019adc:	f240 310f 	movw	r1, #783	; 0x30f
 8019ae0:	f001 fcf2 	bl	801b4c8 <__assert_func>
 8019ae4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019ae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019aec:	bb2d      	cbnz	r5, 8019b3a <__d2b+0x7a>
 8019aee:	9301      	str	r3, [sp, #4]
 8019af0:	f1b8 0300 	subs.w	r3, r8, #0
 8019af4:	d026      	beq.n	8019b44 <__d2b+0x84>
 8019af6:	4668      	mov	r0, sp
 8019af8:	9300      	str	r3, [sp, #0]
 8019afa:	f7ff fd17 	bl	801952c <__lo0bits>
 8019afe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019b02:	b1e8      	cbz	r0, 8019b40 <__d2b+0x80>
 8019b04:	f1c0 0320 	rsb	r3, r0, #32
 8019b08:	fa02 f303 	lsl.w	r3, r2, r3
 8019b0c:	430b      	orrs	r3, r1
 8019b0e:	40c2      	lsrs	r2, r0
 8019b10:	6163      	str	r3, [r4, #20]
 8019b12:	9201      	str	r2, [sp, #4]
 8019b14:	9b01      	ldr	r3, [sp, #4]
 8019b16:	61a3      	str	r3, [r4, #24]
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	bf14      	ite	ne
 8019b1c:	2202      	movne	r2, #2
 8019b1e:	2201      	moveq	r2, #1
 8019b20:	6122      	str	r2, [r4, #16]
 8019b22:	b1bd      	cbz	r5, 8019b54 <__d2b+0x94>
 8019b24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019b28:	4405      	add	r5, r0
 8019b2a:	603d      	str	r5, [r7, #0]
 8019b2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019b30:	6030      	str	r0, [r6, #0]
 8019b32:	4620      	mov	r0, r4
 8019b34:	b003      	add	sp, #12
 8019b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019b3e:	e7d6      	b.n	8019aee <__d2b+0x2e>
 8019b40:	6161      	str	r1, [r4, #20]
 8019b42:	e7e7      	b.n	8019b14 <__d2b+0x54>
 8019b44:	a801      	add	r0, sp, #4
 8019b46:	f7ff fcf1 	bl	801952c <__lo0bits>
 8019b4a:	9b01      	ldr	r3, [sp, #4]
 8019b4c:	6163      	str	r3, [r4, #20]
 8019b4e:	3020      	adds	r0, #32
 8019b50:	2201      	movs	r2, #1
 8019b52:	e7e5      	b.n	8019b20 <__d2b+0x60>
 8019b54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019b58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019b5c:	6038      	str	r0, [r7, #0]
 8019b5e:	6918      	ldr	r0, [r3, #16]
 8019b60:	f7ff fcc4 	bl	80194ec <__hi0bits>
 8019b64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019b68:	e7e2      	b.n	8019b30 <__d2b+0x70>
 8019b6a:	bf00      	nop
 8019b6c:	0801c5ef 	.word	0x0801c5ef
 8019b70:	0801c600 	.word	0x0801c600

08019b74 <__ratio>:
 8019b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b78:	4688      	mov	r8, r1
 8019b7a:	4669      	mov	r1, sp
 8019b7c:	4681      	mov	r9, r0
 8019b7e:	f7ff ff55 	bl	8019a2c <__b2d>
 8019b82:	a901      	add	r1, sp, #4
 8019b84:	4640      	mov	r0, r8
 8019b86:	ec55 4b10 	vmov	r4, r5, d0
 8019b8a:	ee10 aa10 	vmov	sl, s0
 8019b8e:	f7ff ff4d 	bl	8019a2c <__b2d>
 8019b92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019b96:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8019b9a:	1ad2      	subs	r2, r2, r3
 8019b9c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8019ba0:	1a5b      	subs	r3, r3, r1
 8019ba2:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8019ba6:	ec57 6b10 	vmov	r6, r7, d0
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	bfd6      	itet	le
 8019bae:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019bb2:	462a      	movgt	r2, r5
 8019bb4:	463a      	movle	r2, r7
 8019bb6:	46ab      	mov	fp, r5
 8019bb8:	bfd6      	itet	le
 8019bba:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8019bbe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8019bc2:	ee00 3a90 	vmovle	s1, r3
 8019bc6:	ec4b ab17 	vmov	d7, sl, fp
 8019bca:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8019bce:	b003      	add	sp, #12
 8019bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019bd4 <__copybits>:
 8019bd4:	3901      	subs	r1, #1
 8019bd6:	b570      	push	{r4, r5, r6, lr}
 8019bd8:	1149      	asrs	r1, r1, #5
 8019bda:	6914      	ldr	r4, [r2, #16]
 8019bdc:	3101      	adds	r1, #1
 8019bde:	f102 0314 	add.w	r3, r2, #20
 8019be2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019be6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019bea:	1f05      	subs	r5, r0, #4
 8019bec:	42a3      	cmp	r3, r4
 8019bee:	d30c      	bcc.n	8019c0a <__copybits+0x36>
 8019bf0:	1aa3      	subs	r3, r4, r2
 8019bf2:	3b11      	subs	r3, #17
 8019bf4:	f023 0303 	bic.w	r3, r3, #3
 8019bf8:	3211      	adds	r2, #17
 8019bfa:	42a2      	cmp	r2, r4
 8019bfc:	bf88      	it	hi
 8019bfe:	2300      	movhi	r3, #0
 8019c00:	4418      	add	r0, r3
 8019c02:	2300      	movs	r3, #0
 8019c04:	4288      	cmp	r0, r1
 8019c06:	d305      	bcc.n	8019c14 <__copybits+0x40>
 8019c08:	bd70      	pop	{r4, r5, r6, pc}
 8019c0a:	f853 6b04 	ldr.w	r6, [r3], #4
 8019c0e:	f845 6f04 	str.w	r6, [r5, #4]!
 8019c12:	e7eb      	b.n	8019bec <__copybits+0x18>
 8019c14:	f840 3b04 	str.w	r3, [r0], #4
 8019c18:	e7f4      	b.n	8019c04 <__copybits+0x30>

08019c1a <__any_on>:
 8019c1a:	f100 0214 	add.w	r2, r0, #20
 8019c1e:	6900      	ldr	r0, [r0, #16]
 8019c20:	114b      	asrs	r3, r1, #5
 8019c22:	4298      	cmp	r0, r3
 8019c24:	b510      	push	{r4, lr}
 8019c26:	db11      	blt.n	8019c4c <__any_on+0x32>
 8019c28:	dd0a      	ble.n	8019c40 <__any_on+0x26>
 8019c2a:	f011 011f 	ands.w	r1, r1, #31
 8019c2e:	d007      	beq.n	8019c40 <__any_on+0x26>
 8019c30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019c34:	fa24 f001 	lsr.w	r0, r4, r1
 8019c38:	fa00 f101 	lsl.w	r1, r0, r1
 8019c3c:	428c      	cmp	r4, r1
 8019c3e:	d10b      	bne.n	8019c58 <__any_on+0x3e>
 8019c40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019c44:	4293      	cmp	r3, r2
 8019c46:	d803      	bhi.n	8019c50 <__any_on+0x36>
 8019c48:	2000      	movs	r0, #0
 8019c4a:	bd10      	pop	{r4, pc}
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	e7f7      	b.n	8019c40 <__any_on+0x26>
 8019c50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019c54:	2900      	cmp	r1, #0
 8019c56:	d0f5      	beq.n	8019c44 <__any_on+0x2a>
 8019c58:	2001      	movs	r0, #1
 8019c5a:	e7f6      	b.n	8019c4a <__any_on+0x30>

08019c5c <sulp>:
 8019c5c:	b570      	push	{r4, r5, r6, lr}
 8019c5e:	4604      	mov	r4, r0
 8019c60:	460d      	mov	r5, r1
 8019c62:	4616      	mov	r6, r2
 8019c64:	ec45 4b10 	vmov	d0, r4, r5
 8019c68:	f7ff feba 	bl	80199e0 <__ulp>
 8019c6c:	b17e      	cbz	r6, 8019c8e <sulp+0x32>
 8019c6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019c72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	dd09      	ble.n	8019c8e <sulp+0x32>
 8019c7a:	051b      	lsls	r3, r3, #20
 8019c7c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8019c80:	2000      	movs	r0, #0
 8019c82:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8019c86:	ec41 0b17 	vmov	d7, r0, r1
 8019c8a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019c8e:	bd70      	pop	{r4, r5, r6, pc}

08019c90 <_strtod_l>:
 8019c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c94:	ed2d 8b0e 	vpush	{d8-d14}
 8019c98:	b097      	sub	sp, #92	; 0x5c
 8019c9a:	4604      	mov	r4, r0
 8019c9c:	920d      	str	r2, [sp, #52]	; 0x34
 8019c9e:	2200      	movs	r2, #0
 8019ca0:	9212      	str	r2, [sp, #72]	; 0x48
 8019ca2:	468a      	mov	sl, r1
 8019ca4:	f04f 0800 	mov.w	r8, #0
 8019ca8:	f04f 0900 	mov.w	r9, #0
 8019cac:	460a      	mov	r2, r1
 8019cae:	9211      	str	r2, [sp, #68]	; 0x44
 8019cb0:	7811      	ldrb	r1, [r2, #0]
 8019cb2:	292b      	cmp	r1, #43	; 0x2b
 8019cb4:	d04c      	beq.n	8019d50 <_strtod_l+0xc0>
 8019cb6:	d839      	bhi.n	8019d2c <_strtod_l+0x9c>
 8019cb8:	290d      	cmp	r1, #13
 8019cba:	d833      	bhi.n	8019d24 <_strtod_l+0x94>
 8019cbc:	2908      	cmp	r1, #8
 8019cbe:	d833      	bhi.n	8019d28 <_strtod_l+0x98>
 8019cc0:	2900      	cmp	r1, #0
 8019cc2:	d03c      	beq.n	8019d3e <_strtod_l+0xae>
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	9208      	str	r2, [sp, #32]
 8019cc8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019cca:	7832      	ldrb	r2, [r6, #0]
 8019ccc:	2a30      	cmp	r2, #48	; 0x30
 8019cce:	f040 80b8 	bne.w	8019e42 <_strtod_l+0x1b2>
 8019cd2:	7872      	ldrb	r2, [r6, #1]
 8019cd4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019cd8:	2a58      	cmp	r2, #88	; 0x58
 8019cda:	d170      	bne.n	8019dbe <_strtod_l+0x12e>
 8019cdc:	9302      	str	r3, [sp, #8]
 8019cde:	9b08      	ldr	r3, [sp, #32]
 8019ce0:	9301      	str	r3, [sp, #4]
 8019ce2:	ab12      	add	r3, sp, #72	; 0x48
 8019ce4:	9300      	str	r3, [sp, #0]
 8019ce6:	4a91      	ldr	r2, [pc, #580]	; (8019f2c <_strtod_l+0x29c>)
 8019ce8:	ab13      	add	r3, sp, #76	; 0x4c
 8019cea:	a911      	add	r1, sp, #68	; 0x44
 8019cec:	4620      	mov	r0, r4
 8019cee:	f001 fc87 	bl	801b600 <__gethex>
 8019cf2:	f010 070f 	ands.w	r7, r0, #15
 8019cf6:	4605      	mov	r5, r0
 8019cf8:	d005      	beq.n	8019d06 <_strtod_l+0x76>
 8019cfa:	2f06      	cmp	r7, #6
 8019cfc:	d12a      	bne.n	8019d54 <_strtod_l+0xc4>
 8019cfe:	3601      	adds	r6, #1
 8019d00:	2300      	movs	r3, #0
 8019d02:	9611      	str	r6, [sp, #68]	; 0x44
 8019d04:	9308      	str	r3, [sp, #32]
 8019d06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	f040 8555 	bne.w	801a7b8 <_strtod_l+0xb28>
 8019d0e:	9b08      	ldr	r3, [sp, #32]
 8019d10:	ec49 8b10 	vmov	d0, r8, r9
 8019d14:	b1cb      	cbz	r3, 8019d4a <_strtod_l+0xba>
 8019d16:	eeb1 0b40 	vneg.f64	d0, d0
 8019d1a:	b017      	add	sp, #92	; 0x5c
 8019d1c:	ecbd 8b0e 	vpop	{d8-d14}
 8019d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d24:	2920      	cmp	r1, #32
 8019d26:	d1cd      	bne.n	8019cc4 <_strtod_l+0x34>
 8019d28:	3201      	adds	r2, #1
 8019d2a:	e7c0      	b.n	8019cae <_strtod_l+0x1e>
 8019d2c:	292d      	cmp	r1, #45	; 0x2d
 8019d2e:	d1c9      	bne.n	8019cc4 <_strtod_l+0x34>
 8019d30:	2101      	movs	r1, #1
 8019d32:	9108      	str	r1, [sp, #32]
 8019d34:	1c51      	adds	r1, r2, #1
 8019d36:	9111      	str	r1, [sp, #68]	; 0x44
 8019d38:	7852      	ldrb	r2, [r2, #1]
 8019d3a:	2a00      	cmp	r2, #0
 8019d3c:	d1c4      	bne.n	8019cc8 <_strtod_l+0x38>
 8019d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d40:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	f040 8535 	bne.w	801a7b4 <_strtod_l+0xb24>
 8019d4a:	ec49 8b10 	vmov	d0, r8, r9
 8019d4e:	e7e4      	b.n	8019d1a <_strtod_l+0x8a>
 8019d50:	2100      	movs	r1, #0
 8019d52:	e7ee      	b.n	8019d32 <_strtod_l+0xa2>
 8019d54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d56:	b13a      	cbz	r2, 8019d68 <_strtod_l+0xd8>
 8019d58:	2135      	movs	r1, #53	; 0x35
 8019d5a:	a814      	add	r0, sp, #80	; 0x50
 8019d5c:	f7ff ff3a 	bl	8019bd4 <__copybits>
 8019d60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019d62:	4620      	mov	r0, r4
 8019d64:	f7ff fb10 	bl	8019388 <_Bfree>
 8019d68:	1e7b      	subs	r3, r7, #1
 8019d6a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019d6c:	2b04      	cmp	r3, #4
 8019d6e:	d806      	bhi.n	8019d7e <_strtod_l+0xee>
 8019d70:	e8df f003 	tbb	[pc, r3]
 8019d74:	201d0314 	.word	0x201d0314
 8019d78:	14          	.byte	0x14
 8019d79:	00          	.byte	0x00
 8019d7a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8019d7e:	05eb      	lsls	r3, r5, #23
 8019d80:	bf48      	it	mi
 8019d82:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8019d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019d8a:	0d1b      	lsrs	r3, r3, #20
 8019d8c:	051b      	lsls	r3, r3, #20
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d1b9      	bne.n	8019d06 <_strtod_l+0x76>
 8019d92:	f7fe fb79 	bl	8018488 <__errno>
 8019d96:	2322      	movs	r3, #34	; 0x22
 8019d98:	6003      	str	r3, [r0, #0]
 8019d9a:	e7b4      	b.n	8019d06 <_strtod_l+0x76>
 8019d9c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8019da0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019da4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019da8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019dac:	e7e7      	b.n	8019d7e <_strtod_l+0xee>
 8019dae:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8019f34 <_strtod_l+0x2a4>
 8019db2:	e7e4      	b.n	8019d7e <_strtod_l+0xee>
 8019db4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019db8:	f04f 38ff 	mov.w	r8, #4294967295
 8019dbc:	e7df      	b.n	8019d7e <_strtod_l+0xee>
 8019dbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019dc0:	1c5a      	adds	r2, r3, #1
 8019dc2:	9211      	str	r2, [sp, #68]	; 0x44
 8019dc4:	785b      	ldrb	r3, [r3, #1]
 8019dc6:	2b30      	cmp	r3, #48	; 0x30
 8019dc8:	d0f9      	beq.n	8019dbe <_strtod_l+0x12e>
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d09b      	beq.n	8019d06 <_strtod_l+0x76>
 8019dce:	2301      	movs	r3, #1
 8019dd0:	9306      	str	r3, [sp, #24]
 8019dd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8019dd6:	2300      	movs	r3, #0
 8019dd8:	9305      	str	r3, [sp, #20]
 8019dda:	9307      	str	r3, [sp, #28]
 8019ddc:	461e      	mov	r6, r3
 8019dde:	220a      	movs	r2, #10
 8019de0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019de2:	7805      	ldrb	r5, [r0, #0]
 8019de4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8019de8:	b2d9      	uxtb	r1, r3
 8019dea:	2909      	cmp	r1, #9
 8019dec:	d92b      	bls.n	8019e46 <_strtod_l+0x1b6>
 8019dee:	4950      	ldr	r1, [pc, #320]	; (8019f30 <_strtod_l+0x2a0>)
 8019df0:	2201      	movs	r2, #1
 8019df2:	f001 fb3c 	bl	801b46e <strncmp>
 8019df6:	2800      	cmp	r0, #0
 8019df8:	d035      	beq.n	8019e66 <_strtod_l+0x1d6>
 8019dfa:	2000      	movs	r0, #0
 8019dfc:	462a      	mov	r2, r5
 8019dfe:	4633      	mov	r3, r6
 8019e00:	4683      	mov	fp, r0
 8019e02:	4601      	mov	r1, r0
 8019e04:	2a65      	cmp	r2, #101	; 0x65
 8019e06:	d001      	beq.n	8019e0c <_strtod_l+0x17c>
 8019e08:	2a45      	cmp	r2, #69	; 0x45
 8019e0a:	d118      	bne.n	8019e3e <_strtod_l+0x1ae>
 8019e0c:	b91b      	cbnz	r3, 8019e16 <_strtod_l+0x186>
 8019e0e:	9b06      	ldr	r3, [sp, #24]
 8019e10:	4303      	orrs	r3, r0
 8019e12:	d094      	beq.n	8019d3e <_strtod_l+0xae>
 8019e14:	2300      	movs	r3, #0
 8019e16:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8019e1a:	f10a 0201 	add.w	r2, sl, #1
 8019e1e:	9211      	str	r2, [sp, #68]	; 0x44
 8019e20:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8019e24:	2a2b      	cmp	r2, #43	; 0x2b
 8019e26:	d075      	beq.n	8019f14 <_strtod_l+0x284>
 8019e28:	2a2d      	cmp	r2, #45	; 0x2d
 8019e2a:	d07b      	beq.n	8019f24 <_strtod_l+0x294>
 8019e2c:	f04f 0e00 	mov.w	lr, #0
 8019e30:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8019e34:	2d09      	cmp	r5, #9
 8019e36:	f240 8083 	bls.w	8019f40 <_strtod_l+0x2b0>
 8019e3a:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8019e3e:	2500      	movs	r5, #0
 8019e40:	e09e      	b.n	8019f80 <_strtod_l+0x2f0>
 8019e42:	2300      	movs	r3, #0
 8019e44:	e7c4      	b.n	8019dd0 <_strtod_l+0x140>
 8019e46:	2e08      	cmp	r6, #8
 8019e48:	bfd5      	itete	le
 8019e4a:	9907      	ldrle	r1, [sp, #28]
 8019e4c:	9905      	ldrgt	r1, [sp, #20]
 8019e4e:	fb02 3301 	mlale	r3, r2, r1, r3
 8019e52:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019e56:	f100 0001 	add.w	r0, r0, #1
 8019e5a:	bfd4      	ite	le
 8019e5c:	9307      	strle	r3, [sp, #28]
 8019e5e:	9305      	strgt	r3, [sp, #20]
 8019e60:	3601      	adds	r6, #1
 8019e62:	9011      	str	r0, [sp, #68]	; 0x44
 8019e64:	e7bc      	b.n	8019de0 <_strtod_l+0x150>
 8019e66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e68:	1c5a      	adds	r2, r3, #1
 8019e6a:	9211      	str	r2, [sp, #68]	; 0x44
 8019e6c:	785a      	ldrb	r2, [r3, #1]
 8019e6e:	b3ae      	cbz	r6, 8019edc <_strtod_l+0x24c>
 8019e70:	4683      	mov	fp, r0
 8019e72:	4633      	mov	r3, r6
 8019e74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019e78:	2909      	cmp	r1, #9
 8019e7a:	d912      	bls.n	8019ea2 <_strtod_l+0x212>
 8019e7c:	2101      	movs	r1, #1
 8019e7e:	e7c1      	b.n	8019e04 <_strtod_l+0x174>
 8019e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e82:	1c5a      	adds	r2, r3, #1
 8019e84:	9211      	str	r2, [sp, #68]	; 0x44
 8019e86:	785a      	ldrb	r2, [r3, #1]
 8019e88:	3001      	adds	r0, #1
 8019e8a:	2a30      	cmp	r2, #48	; 0x30
 8019e8c:	d0f8      	beq.n	8019e80 <_strtod_l+0x1f0>
 8019e8e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019e92:	2b08      	cmp	r3, #8
 8019e94:	f200 8495 	bhi.w	801a7c2 <_strtod_l+0xb32>
 8019e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e9c:	4683      	mov	fp, r0
 8019e9e:	2000      	movs	r0, #0
 8019ea0:	4603      	mov	r3, r0
 8019ea2:	3a30      	subs	r2, #48	; 0x30
 8019ea4:	f100 0101 	add.w	r1, r0, #1
 8019ea8:	d012      	beq.n	8019ed0 <_strtod_l+0x240>
 8019eaa:	448b      	add	fp, r1
 8019eac:	eb00 0c03 	add.w	ip, r0, r3
 8019eb0:	4619      	mov	r1, r3
 8019eb2:	250a      	movs	r5, #10
 8019eb4:	4561      	cmp	r1, ip
 8019eb6:	d113      	bne.n	8019ee0 <_strtod_l+0x250>
 8019eb8:	1819      	adds	r1, r3, r0
 8019eba:	2908      	cmp	r1, #8
 8019ebc:	f103 0301 	add.w	r3, r3, #1
 8019ec0:	4403      	add	r3, r0
 8019ec2:	dc1b      	bgt.n	8019efc <_strtod_l+0x26c>
 8019ec4:	9807      	ldr	r0, [sp, #28]
 8019ec6:	210a      	movs	r1, #10
 8019ec8:	fb01 2200 	mla	r2, r1, r0, r2
 8019ecc:	9207      	str	r2, [sp, #28]
 8019ece:	2100      	movs	r1, #0
 8019ed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019ed2:	1c50      	adds	r0, r2, #1
 8019ed4:	9011      	str	r0, [sp, #68]	; 0x44
 8019ed6:	7852      	ldrb	r2, [r2, #1]
 8019ed8:	4608      	mov	r0, r1
 8019eda:	e7cb      	b.n	8019e74 <_strtod_l+0x1e4>
 8019edc:	4630      	mov	r0, r6
 8019ede:	e7d4      	b.n	8019e8a <_strtod_l+0x1fa>
 8019ee0:	2908      	cmp	r1, #8
 8019ee2:	f101 0101 	add.w	r1, r1, #1
 8019ee6:	dc03      	bgt.n	8019ef0 <_strtod_l+0x260>
 8019ee8:	9f07      	ldr	r7, [sp, #28]
 8019eea:	436f      	muls	r7, r5
 8019eec:	9707      	str	r7, [sp, #28]
 8019eee:	e7e1      	b.n	8019eb4 <_strtod_l+0x224>
 8019ef0:	2910      	cmp	r1, #16
 8019ef2:	bfde      	ittt	le
 8019ef4:	9f05      	ldrle	r7, [sp, #20]
 8019ef6:	436f      	mulle	r7, r5
 8019ef8:	9705      	strle	r7, [sp, #20]
 8019efa:	e7db      	b.n	8019eb4 <_strtod_l+0x224>
 8019efc:	2b10      	cmp	r3, #16
 8019efe:	bfdf      	itttt	le
 8019f00:	9805      	ldrle	r0, [sp, #20]
 8019f02:	210a      	movle	r1, #10
 8019f04:	fb01 2200 	mlale	r2, r1, r0, r2
 8019f08:	9205      	strle	r2, [sp, #20]
 8019f0a:	e7e0      	b.n	8019ece <_strtod_l+0x23e>
 8019f0c:	f04f 0b00 	mov.w	fp, #0
 8019f10:	2101      	movs	r1, #1
 8019f12:	e77c      	b.n	8019e0e <_strtod_l+0x17e>
 8019f14:	f04f 0e00 	mov.w	lr, #0
 8019f18:	f10a 0202 	add.w	r2, sl, #2
 8019f1c:	9211      	str	r2, [sp, #68]	; 0x44
 8019f1e:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8019f22:	e785      	b.n	8019e30 <_strtod_l+0x1a0>
 8019f24:	f04f 0e01 	mov.w	lr, #1
 8019f28:	e7f6      	b.n	8019f18 <_strtod_l+0x288>
 8019f2a:	bf00      	nop
 8019f2c:	0801c760 	.word	0x0801c760
 8019f30:	0801c75c 	.word	0x0801c75c
 8019f34:	7ff00000 	.word	0x7ff00000
 8019f38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f3a:	1c55      	adds	r5, r2, #1
 8019f3c:	9511      	str	r5, [sp, #68]	; 0x44
 8019f3e:	7852      	ldrb	r2, [r2, #1]
 8019f40:	2a30      	cmp	r2, #48	; 0x30
 8019f42:	d0f9      	beq.n	8019f38 <_strtod_l+0x2a8>
 8019f44:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8019f48:	2d08      	cmp	r5, #8
 8019f4a:	f63f af78 	bhi.w	8019e3e <_strtod_l+0x1ae>
 8019f4e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8019f52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f54:	920a      	str	r2, [sp, #40]	; 0x28
 8019f56:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019f58:	1c55      	adds	r5, r2, #1
 8019f5a:	9511      	str	r5, [sp, #68]	; 0x44
 8019f5c:	7852      	ldrb	r2, [r2, #1]
 8019f5e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8019f62:	2f09      	cmp	r7, #9
 8019f64:	d937      	bls.n	8019fd6 <_strtod_l+0x346>
 8019f66:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019f68:	1bed      	subs	r5, r5, r7
 8019f6a:	2d08      	cmp	r5, #8
 8019f6c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8019f70:	dc02      	bgt.n	8019f78 <_strtod_l+0x2e8>
 8019f72:	4565      	cmp	r5, ip
 8019f74:	bfa8      	it	ge
 8019f76:	4665      	movge	r5, ip
 8019f78:	f1be 0f00 	cmp.w	lr, #0
 8019f7c:	d000      	beq.n	8019f80 <_strtod_l+0x2f0>
 8019f7e:	426d      	negs	r5, r5
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d14d      	bne.n	801a020 <_strtod_l+0x390>
 8019f84:	9b06      	ldr	r3, [sp, #24]
 8019f86:	4303      	orrs	r3, r0
 8019f88:	f47f aebd 	bne.w	8019d06 <_strtod_l+0x76>
 8019f8c:	2900      	cmp	r1, #0
 8019f8e:	f47f aed6 	bne.w	8019d3e <_strtod_l+0xae>
 8019f92:	2a69      	cmp	r2, #105	; 0x69
 8019f94:	d027      	beq.n	8019fe6 <_strtod_l+0x356>
 8019f96:	dc24      	bgt.n	8019fe2 <_strtod_l+0x352>
 8019f98:	2a49      	cmp	r2, #73	; 0x49
 8019f9a:	d024      	beq.n	8019fe6 <_strtod_l+0x356>
 8019f9c:	2a4e      	cmp	r2, #78	; 0x4e
 8019f9e:	f47f aece 	bne.w	8019d3e <_strtod_l+0xae>
 8019fa2:	4995      	ldr	r1, [pc, #596]	; (801a1f8 <_strtod_l+0x568>)
 8019fa4:	a811      	add	r0, sp, #68	; 0x44
 8019fa6:	f001 fd6b 	bl	801ba80 <__match>
 8019faa:	2800      	cmp	r0, #0
 8019fac:	f43f aec7 	beq.w	8019d3e <_strtod_l+0xae>
 8019fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	2b28      	cmp	r3, #40	; 0x28
 8019fb6:	d12d      	bne.n	801a014 <_strtod_l+0x384>
 8019fb8:	4990      	ldr	r1, [pc, #576]	; (801a1fc <_strtod_l+0x56c>)
 8019fba:	aa14      	add	r2, sp, #80	; 0x50
 8019fbc:	a811      	add	r0, sp, #68	; 0x44
 8019fbe:	f001 fd73 	bl	801baa8 <__hexnan>
 8019fc2:	2805      	cmp	r0, #5
 8019fc4:	d126      	bne.n	801a014 <_strtod_l+0x384>
 8019fc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8019fc8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8019fcc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019fd0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019fd4:	e697      	b.n	8019d06 <_strtod_l+0x76>
 8019fd6:	250a      	movs	r5, #10
 8019fd8:	fb05 2c0c 	mla	ip, r5, ip, r2
 8019fdc:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8019fe0:	e7b9      	b.n	8019f56 <_strtod_l+0x2c6>
 8019fe2:	2a6e      	cmp	r2, #110	; 0x6e
 8019fe4:	e7db      	b.n	8019f9e <_strtod_l+0x30e>
 8019fe6:	4986      	ldr	r1, [pc, #536]	; (801a200 <_strtod_l+0x570>)
 8019fe8:	a811      	add	r0, sp, #68	; 0x44
 8019fea:	f001 fd49 	bl	801ba80 <__match>
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	f43f aea5 	beq.w	8019d3e <_strtod_l+0xae>
 8019ff4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019ff6:	4983      	ldr	r1, [pc, #524]	; (801a204 <_strtod_l+0x574>)
 8019ff8:	3b01      	subs	r3, #1
 8019ffa:	a811      	add	r0, sp, #68	; 0x44
 8019ffc:	9311      	str	r3, [sp, #68]	; 0x44
 8019ffe:	f001 fd3f 	bl	801ba80 <__match>
 801a002:	b910      	cbnz	r0, 801a00a <_strtod_l+0x37a>
 801a004:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a006:	3301      	adds	r3, #1
 801a008:	9311      	str	r3, [sp, #68]	; 0x44
 801a00a:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801a218 <_strtod_l+0x588>
 801a00e:	f04f 0800 	mov.w	r8, #0
 801a012:	e678      	b.n	8019d06 <_strtod_l+0x76>
 801a014:	487c      	ldr	r0, [pc, #496]	; (801a208 <_strtod_l+0x578>)
 801a016:	f001 fa4f 	bl	801b4b8 <nan>
 801a01a:	ec59 8b10 	vmov	r8, r9, d0
 801a01e:	e672      	b.n	8019d06 <_strtod_l+0x76>
 801a020:	eddd 7a07 	vldr	s15, [sp, #28]
 801a024:	eba5 020b 	sub.w	r2, r5, fp
 801a028:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a02c:	2e00      	cmp	r6, #0
 801a02e:	bf08      	it	eq
 801a030:	461e      	moveq	r6, r3
 801a032:	2b10      	cmp	r3, #16
 801a034:	9206      	str	r2, [sp, #24]
 801a036:	461a      	mov	r2, r3
 801a038:	bfa8      	it	ge
 801a03a:	2210      	movge	r2, #16
 801a03c:	2b09      	cmp	r3, #9
 801a03e:	ec59 8b17 	vmov	r8, r9, d7
 801a042:	dd0c      	ble.n	801a05e <_strtod_l+0x3ce>
 801a044:	4971      	ldr	r1, [pc, #452]	; (801a20c <_strtod_l+0x57c>)
 801a046:	eddd 6a05 	vldr	s13, [sp, #20]
 801a04a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a04e:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801a052:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801a056:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a05a:	ec59 8b16 	vmov	r8, r9, d6
 801a05e:	2b0f      	cmp	r3, #15
 801a060:	dc37      	bgt.n	801a0d2 <_strtod_l+0x442>
 801a062:	9906      	ldr	r1, [sp, #24]
 801a064:	2900      	cmp	r1, #0
 801a066:	f43f ae4e 	beq.w	8019d06 <_strtod_l+0x76>
 801a06a:	dd23      	ble.n	801a0b4 <_strtod_l+0x424>
 801a06c:	2916      	cmp	r1, #22
 801a06e:	dc0b      	bgt.n	801a088 <_strtod_l+0x3f8>
 801a070:	4b66      	ldr	r3, [pc, #408]	; (801a20c <_strtod_l+0x57c>)
 801a072:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801a076:	ed93 7b00 	vldr	d7, [r3]
 801a07a:	ec49 8b16 	vmov	d6, r8, r9
 801a07e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a082:	ec59 8b17 	vmov	r8, r9, d7
 801a086:	e63e      	b.n	8019d06 <_strtod_l+0x76>
 801a088:	9806      	ldr	r0, [sp, #24]
 801a08a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801a08e:	4281      	cmp	r1, r0
 801a090:	db1f      	blt.n	801a0d2 <_strtod_l+0x442>
 801a092:	4a5e      	ldr	r2, [pc, #376]	; (801a20c <_strtod_l+0x57c>)
 801a094:	f1c3 030f 	rsb	r3, r3, #15
 801a098:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801a09c:	ed91 7b00 	vldr	d7, [r1]
 801a0a0:	ec49 8b16 	vmov	d6, r8, r9
 801a0a4:	1ac3      	subs	r3, r0, r3
 801a0a6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a0aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0ae:	ed92 6b00 	vldr	d6, [r2]
 801a0b2:	e7e4      	b.n	801a07e <_strtod_l+0x3ee>
 801a0b4:	9906      	ldr	r1, [sp, #24]
 801a0b6:	3116      	adds	r1, #22
 801a0b8:	db0b      	blt.n	801a0d2 <_strtod_l+0x442>
 801a0ba:	4b54      	ldr	r3, [pc, #336]	; (801a20c <_strtod_l+0x57c>)
 801a0bc:	ebab 0505 	sub.w	r5, fp, r5
 801a0c0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a0c4:	ed95 7b00 	vldr	d7, [r5]
 801a0c8:	ec49 8b16 	vmov	d6, r8, r9
 801a0cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a0d0:	e7d7      	b.n	801a082 <_strtod_l+0x3f2>
 801a0d2:	9906      	ldr	r1, [sp, #24]
 801a0d4:	1a9a      	subs	r2, r3, r2
 801a0d6:	440a      	add	r2, r1
 801a0d8:	2a00      	cmp	r2, #0
 801a0da:	dd6e      	ble.n	801a1ba <_strtod_l+0x52a>
 801a0dc:	f012 000f 	ands.w	r0, r2, #15
 801a0e0:	d00a      	beq.n	801a0f8 <_strtod_l+0x468>
 801a0e2:	494a      	ldr	r1, [pc, #296]	; (801a20c <_strtod_l+0x57c>)
 801a0e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a0e8:	ed91 7b00 	vldr	d7, [r1]
 801a0ec:	ec49 8b16 	vmov	d6, r8, r9
 801a0f0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a0f4:	ec59 8b17 	vmov	r8, r9, d7
 801a0f8:	f032 020f 	bics.w	r2, r2, #15
 801a0fc:	d04e      	beq.n	801a19c <_strtod_l+0x50c>
 801a0fe:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801a102:	dd22      	ble.n	801a14a <_strtod_l+0x4ba>
 801a104:	2500      	movs	r5, #0
 801a106:	462e      	mov	r6, r5
 801a108:	9507      	str	r5, [sp, #28]
 801a10a:	462f      	mov	r7, r5
 801a10c:	2322      	movs	r3, #34	; 0x22
 801a10e:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801a218 <_strtod_l+0x588>
 801a112:	6023      	str	r3, [r4, #0]
 801a114:	f04f 0800 	mov.w	r8, #0
 801a118:	9b07      	ldr	r3, [sp, #28]
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f43f adf3 	beq.w	8019d06 <_strtod_l+0x76>
 801a120:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a122:	4620      	mov	r0, r4
 801a124:	f7ff f930 	bl	8019388 <_Bfree>
 801a128:	4639      	mov	r1, r7
 801a12a:	4620      	mov	r0, r4
 801a12c:	f7ff f92c 	bl	8019388 <_Bfree>
 801a130:	4631      	mov	r1, r6
 801a132:	4620      	mov	r0, r4
 801a134:	f7ff f928 	bl	8019388 <_Bfree>
 801a138:	9907      	ldr	r1, [sp, #28]
 801a13a:	4620      	mov	r0, r4
 801a13c:	f7ff f924 	bl	8019388 <_Bfree>
 801a140:	4629      	mov	r1, r5
 801a142:	4620      	mov	r0, r4
 801a144:	f7ff f920 	bl	8019388 <_Bfree>
 801a148:	e5dd      	b.n	8019d06 <_strtod_l+0x76>
 801a14a:	2000      	movs	r0, #0
 801a14c:	ec49 8b17 	vmov	d7, r8, r9
 801a150:	4f2f      	ldr	r7, [pc, #188]	; (801a210 <_strtod_l+0x580>)
 801a152:	1112      	asrs	r2, r2, #4
 801a154:	4601      	mov	r1, r0
 801a156:	2a01      	cmp	r2, #1
 801a158:	dc23      	bgt.n	801a1a2 <_strtod_l+0x512>
 801a15a:	b108      	cbz	r0, 801a160 <_strtod_l+0x4d0>
 801a15c:	ec59 8b17 	vmov	r8, r9, d7
 801a160:	4a2b      	ldr	r2, [pc, #172]	; (801a210 <_strtod_l+0x580>)
 801a162:	482c      	ldr	r0, [pc, #176]	; (801a214 <_strtod_l+0x584>)
 801a164:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a168:	ed92 7b00 	vldr	d7, [r2]
 801a16c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801a170:	ec49 8b16 	vmov	d6, r8, r9
 801a174:	4a28      	ldr	r2, [pc, #160]	; (801a218 <_strtod_l+0x588>)
 801a176:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a17a:	ee17 1a90 	vmov	r1, s15
 801a17e:	400a      	ands	r2, r1
 801a180:	4282      	cmp	r2, r0
 801a182:	ec59 8b17 	vmov	r8, r9, d7
 801a186:	d8bd      	bhi.n	801a104 <_strtod_l+0x474>
 801a188:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801a18c:	4282      	cmp	r2, r0
 801a18e:	bf86      	itte	hi
 801a190:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 801a21c <_strtod_l+0x58c>
 801a194:	f04f 38ff 	movhi.w	r8, #4294967295
 801a198:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801a19c:	2200      	movs	r2, #0
 801a19e:	9205      	str	r2, [sp, #20]
 801a1a0:	e076      	b.n	801a290 <_strtod_l+0x600>
 801a1a2:	f012 0f01 	tst.w	r2, #1
 801a1a6:	d004      	beq.n	801a1b2 <_strtod_l+0x522>
 801a1a8:	ed97 6b00 	vldr	d6, [r7]
 801a1ac:	2001      	movs	r0, #1
 801a1ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a1b2:	3101      	adds	r1, #1
 801a1b4:	1052      	asrs	r2, r2, #1
 801a1b6:	3708      	adds	r7, #8
 801a1b8:	e7cd      	b.n	801a156 <_strtod_l+0x4c6>
 801a1ba:	d0ef      	beq.n	801a19c <_strtod_l+0x50c>
 801a1bc:	4252      	negs	r2, r2
 801a1be:	f012 000f 	ands.w	r0, r2, #15
 801a1c2:	d00a      	beq.n	801a1da <_strtod_l+0x54a>
 801a1c4:	4911      	ldr	r1, [pc, #68]	; (801a20c <_strtod_l+0x57c>)
 801a1c6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a1ca:	ed91 7b00 	vldr	d7, [r1]
 801a1ce:	ec49 8b16 	vmov	d6, r8, r9
 801a1d2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a1d6:	ec59 8b17 	vmov	r8, r9, d7
 801a1da:	1112      	asrs	r2, r2, #4
 801a1dc:	d0de      	beq.n	801a19c <_strtod_l+0x50c>
 801a1de:	2a1f      	cmp	r2, #31
 801a1e0:	dd1e      	ble.n	801a220 <_strtod_l+0x590>
 801a1e2:	2500      	movs	r5, #0
 801a1e4:	462e      	mov	r6, r5
 801a1e6:	9507      	str	r5, [sp, #28]
 801a1e8:	462f      	mov	r7, r5
 801a1ea:	2322      	movs	r3, #34	; 0x22
 801a1ec:	f04f 0800 	mov.w	r8, #0
 801a1f0:	f04f 0900 	mov.w	r9, #0
 801a1f4:	6023      	str	r3, [r4, #0]
 801a1f6:	e78f      	b.n	801a118 <_strtod_l+0x488>
 801a1f8:	0801c549 	.word	0x0801c549
 801a1fc:	0801c774 	.word	0x0801c774
 801a200:	0801c541 	.word	0x0801c541
 801a204:	0801c576 	.word	0x0801c576
 801a208:	0801c920 	.word	0x0801c920
 801a20c:	0801c688 	.word	0x0801c688
 801a210:	0801c660 	.word	0x0801c660
 801a214:	7ca00000 	.word	0x7ca00000
 801a218:	7ff00000 	.word	0x7ff00000
 801a21c:	7fefffff 	.word	0x7fefffff
 801a220:	f012 0110 	ands.w	r1, r2, #16
 801a224:	bf18      	it	ne
 801a226:	216a      	movne	r1, #106	; 0x6a
 801a228:	9105      	str	r1, [sp, #20]
 801a22a:	ec49 8b17 	vmov	d7, r8, r9
 801a22e:	49be      	ldr	r1, [pc, #760]	; (801a528 <_strtod_l+0x898>)
 801a230:	2000      	movs	r0, #0
 801a232:	07d7      	lsls	r7, r2, #31
 801a234:	d504      	bpl.n	801a240 <_strtod_l+0x5b0>
 801a236:	ed91 6b00 	vldr	d6, [r1]
 801a23a:	2001      	movs	r0, #1
 801a23c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a240:	1052      	asrs	r2, r2, #1
 801a242:	f101 0108 	add.w	r1, r1, #8
 801a246:	d1f4      	bne.n	801a232 <_strtod_l+0x5a2>
 801a248:	b108      	cbz	r0, 801a24e <_strtod_l+0x5be>
 801a24a:	ec59 8b17 	vmov	r8, r9, d7
 801a24e:	9a05      	ldr	r2, [sp, #20]
 801a250:	b1ba      	cbz	r2, 801a282 <_strtod_l+0x5f2>
 801a252:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801a256:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801a25a:	2a00      	cmp	r2, #0
 801a25c:	4648      	mov	r0, r9
 801a25e:	dd10      	ble.n	801a282 <_strtod_l+0x5f2>
 801a260:	2a1f      	cmp	r2, #31
 801a262:	f340 812c 	ble.w	801a4be <_strtod_l+0x82e>
 801a266:	2a34      	cmp	r2, #52	; 0x34
 801a268:	bfde      	ittt	le
 801a26a:	f04f 32ff 	movle.w	r2, #4294967295
 801a26e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801a272:	408a      	lslle	r2, r1
 801a274:	f04f 0800 	mov.w	r8, #0
 801a278:	bfcc      	ite	gt
 801a27a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801a27e:	ea02 0900 	andle.w	r9, r2, r0
 801a282:	ec49 8b17 	vmov	d7, r8, r9
 801a286:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a28e:	d0a8      	beq.n	801a1e2 <_strtod_l+0x552>
 801a290:	9a07      	ldr	r2, [sp, #28]
 801a292:	9200      	str	r2, [sp, #0]
 801a294:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a296:	4632      	mov	r2, r6
 801a298:	4620      	mov	r0, r4
 801a29a:	f7ff f8dd 	bl	8019458 <__s2b>
 801a29e:	9007      	str	r0, [sp, #28]
 801a2a0:	2800      	cmp	r0, #0
 801a2a2:	f43f af2f 	beq.w	801a104 <_strtod_l+0x474>
 801a2a6:	9a06      	ldr	r2, [sp, #24]
 801a2a8:	2a00      	cmp	r2, #0
 801a2aa:	ebab 0305 	sub.w	r3, fp, r5
 801a2ae:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801a508 <_strtod_l+0x878>
 801a2b2:	bfa8      	it	ge
 801a2b4:	2300      	movge	r3, #0
 801a2b6:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a510 <_strtod_l+0x880>
 801a2ba:	ed9f bb97 	vldr	d11, [pc, #604]	; 801a518 <_strtod_l+0x888>
 801a2be:	9309      	str	r3, [sp, #36]	; 0x24
 801a2c0:	2500      	movs	r5, #0
 801a2c2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a2c6:	930c      	str	r3, [sp, #48]	; 0x30
 801a2c8:	462e      	mov	r6, r5
 801a2ca:	9b07      	ldr	r3, [sp, #28]
 801a2cc:	4620      	mov	r0, r4
 801a2ce:	6859      	ldr	r1, [r3, #4]
 801a2d0:	f7ff f81a 	bl	8019308 <_Balloc>
 801a2d4:	4607      	mov	r7, r0
 801a2d6:	2800      	cmp	r0, #0
 801a2d8:	f43f af18 	beq.w	801a10c <_strtod_l+0x47c>
 801a2dc:	9b07      	ldr	r3, [sp, #28]
 801a2de:	691a      	ldr	r2, [r3, #16]
 801a2e0:	3202      	adds	r2, #2
 801a2e2:	f103 010c 	add.w	r1, r3, #12
 801a2e6:	0092      	lsls	r2, r2, #2
 801a2e8:	300c      	adds	r0, #12
 801a2ea:	f7fe f902 	bl	80184f2 <memcpy>
 801a2ee:	ec49 8b10 	vmov	d0, r8, r9
 801a2f2:	aa14      	add	r2, sp, #80	; 0x50
 801a2f4:	a913      	add	r1, sp, #76	; 0x4c
 801a2f6:	4620      	mov	r0, r4
 801a2f8:	f7ff fbe2 	bl	8019ac0 <__d2b>
 801a2fc:	ec49 8b18 	vmov	d8, r8, r9
 801a300:	9012      	str	r0, [sp, #72]	; 0x48
 801a302:	2800      	cmp	r0, #0
 801a304:	f43f af02 	beq.w	801a10c <_strtod_l+0x47c>
 801a308:	2101      	movs	r1, #1
 801a30a:	4620      	mov	r0, r4
 801a30c:	f7ff f93c 	bl	8019588 <__i2b>
 801a310:	4606      	mov	r6, r0
 801a312:	2800      	cmp	r0, #0
 801a314:	f43f aefa 	beq.w	801a10c <_strtod_l+0x47c>
 801a318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a31a:	9914      	ldr	r1, [sp, #80]	; 0x50
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	bfab      	itete	ge
 801a320:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801a322:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801a324:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801a328:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801a32c:	bfac      	ite	ge
 801a32e:	eb03 0b02 	addge.w	fp, r3, r2
 801a332:	eba2 0a03 	sublt.w	sl, r2, r3
 801a336:	9a05      	ldr	r2, [sp, #20]
 801a338:	1a9b      	subs	r3, r3, r2
 801a33a:	440b      	add	r3, r1
 801a33c:	4a7b      	ldr	r2, [pc, #492]	; (801a52c <_strtod_l+0x89c>)
 801a33e:	3b01      	subs	r3, #1
 801a340:	4293      	cmp	r3, r2
 801a342:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801a346:	f280 80cd 	bge.w	801a4e4 <_strtod_l+0x854>
 801a34a:	1ad2      	subs	r2, r2, r3
 801a34c:	2a1f      	cmp	r2, #31
 801a34e:	eba1 0102 	sub.w	r1, r1, r2
 801a352:	f04f 0001 	mov.w	r0, #1
 801a356:	f300 80b9 	bgt.w	801a4cc <_strtod_l+0x83c>
 801a35a:	fa00 f302 	lsl.w	r3, r0, r2
 801a35e:	930b      	str	r3, [sp, #44]	; 0x2c
 801a360:	2300      	movs	r3, #0
 801a362:	930a      	str	r3, [sp, #40]	; 0x28
 801a364:	eb0b 0301 	add.w	r3, fp, r1
 801a368:	9a05      	ldr	r2, [sp, #20]
 801a36a:	459b      	cmp	fp, r3
 801a36c:	448a      	add	sl, r1
 801a36e:	4492      	add	sl, r2
 801a370:	465a      	mov	r2, fp
 801a372:	bfa8      	it	ge
 801a374:	461a      	movge	r2, r3
 801a376:	4552      	cmp	r2, sl
 801a378:	bfa8      	it	ge
 801a37a:	4652      	movge	r2, sl
 801a37c:	2a00      	cmp	r2, #0
 801a37e:	bfc2      	ittt	gt
 801a380:	1a9b      	subgt	r3, r3, r2
 801a382:	ebaa 0a02 	subgt.w	sl, sl, r2
 801a386:	ebab 0b02 	subgt.w	fp, fp, r2
 801a38a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a38c:	2a00      	cmp	r2, #0
 801a38e:	dd18      	ble.n	801a3c2 <_strtod_l+0x732>
 801a390:	4631      	mov	r1, r6
 801a392:	4620      	mov	r0, r4
 801a394:	930f      	str	r3, [sp, #60]	; 0x3c
 801a396:	f7ff f9b7 	bl	8019708 <__pow5mult>
 801a39a:	4606      	mov	r6, r0
 801a39c:	2800      	cmp	r0, #0
 801a39e:	f43f aeb5 	beq.w	801a10c <_strtod_l+0x47c>
 801a3a2:	4601      	mov	r1, r0
 801a3a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a3a6:	4620      	mov	r0, r4
 801a3a8:	f7ff f904 	bl	80195b4 <__multiply>
 801a3ac:	900e      	str	r0, [sp, #56]	; 0x38
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	f43f aeac 	beq.w	801a10c <_strtod_l+0x47c>
 801a3b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f7fe ffe6 	bl	8019388 <_Bfree>
 801a3bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a3be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a3c0:	9212      	str	r2, [sp, #72]	; 0x48
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	f300 8093 	bgt.w	801a4ee <_strtod_l+0x85e>
 801a3c8:	9b06      	ldr	r3, [sp, #24]
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	dd08      	ble.n	801a3e0 <_strtod_l+0x750>
 801a3ce:	4639      	mov	r1, r7
 801a3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a3d2:	4620      	mov	r0, r4
 801a3d4:	f7ff f998 	bl	8019708 <__pow5mult>
 801a3d8:	4607      	mov	r7, r0
 801a3da:	2800      	cmp	r0, #0
 801a3dc:	f43f ae96 	beq.w	801a10c <_strtod_l+0x47c>
 801a3e0:	f1ba 0f00 	cmp.w	sl, #0
 801a3e4:	dd08      	ble.n	801a3f8 <_strtod_l+0x768>
 801a3e6:	4639      	mov	r1, r7
 801a3e8:	4652      	mov	r2, sl
 801a3ea:	4620      	mov	r0, r4
 801a3ec:	f7ff f9e6 	bl	80197bc <__lshift>
 801a3f0:	4607      	mov	r7, r0
 801a3f2:	2800      	cmp	r0, #0
 801a3f4:	f43f ae8a 	beq.w	801a10c <_strtod_l+0x47c>
 801a3f8:	f1bb 0f00 	cmp.w	fp, #0
 801a3fc:	dd08      	ble.n	801a410 <_strtod_l+0x780>
 801a3fe:	4631      	mov	r1, r6
 801a400:	465a      	mov	r2, fp
 801a402:	4620      	mov	r0, r4
 801a404:	f7ff f9da 	bl	80197bc <__lshift>
 801a408:	4606      	mov	r6, r0
 801a40a:	2800      	cmp	r0, #0
 801a40c:	f43f ae7e 	beq.w	801a10c <_strtod_l+0x47c>
 801a410:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a412:	463a      	mov	r2, r7
 801a414:	4620      	mov	r0, r4
 801a416:	f7ff fa59 	bl	80198cc <__mdiff>
 801a41a:	4605      	mov	r5, r0
 801a41c:	2800      	cmp	r0, #0
 801a41e:	f43f ae75 	beq.w	801a10c <_strtod_l+0x47c>
 801a422:	2300      	movs	r3, #0
 801a424:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801a428:	60c3      	str	r3, [r0, #12]
 801a42a:	4631      	mov	r1, r6
 801a42c:	f7ff fa32 	bl	8019894 <__mcmp>
 801a430:	2800      	cmp	r0, #0
 801a432:	da7f      	bge.n	801a534 <_strtod_l+0x8a4>
 801a434:	ea5a 0a08 	orrs.w	sl, sl, r8
 801a438:	f040 80a5 	bne.w	801a586 <_strtod_l+0x8f6>
 801a43c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a440:	2b00      	cmp	r3, #0
 801a442:	f040 80a0 	bne.w	801a586 <_strtod_l+0x8f6>
 801a446:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a44a:	0d1b      	lsrs	r3, r3, #20
 801a44c:	051b      	lsls	r3, r3, #20
 801a44e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a452:	f240 8098 	bls.w	801a586 <_strtod_l+0x8f6>
 801a456:	696b      	ldr	r3, [r5, #20]
 801a458:	b91b      	cbnz	r3, 801a462 <_strtod_l+0x7d2>
 801a45a:	692b      	ldr	r3, [r5, #16]
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	f340 8092 	ble.w	801a586 <_strtod_l+0x8f6>
 801a462:	4629      	mov	r1, r5
 801a464:	2201      	movs	r2, #1
 801a466:	4620      	mov	r0, r4
 801a468:	f7ff f9a8 	bl	80197bc <__lshift>
 801a46c:	4631      	mov	r1, r6
 801a46e:	4605      	mov	r5, r0
 801a470:	f7ff fa10 	bl	8019894 <__mcmp>
 801a474:	2800      	cmp	r0, #0
 801a476:	f340 8086 	ble.w	801a586 <_strtod_l+0x8f6>
 801a47a:	9905      	ldr	r1, [sp, #20]
 801a47c:	4a2c      	ldr	r2, [pc, #176]	; (801a530 <_strtod_l+0x8a0>)
 801a47e:	464b      	mov	r3, r9
 801a480:	2900      	cmp	r1, #0
 801a482:	f000 809f 	beq.w	801a5c4 <_strtod_l+0x934>
 801a486:	ea02 0109 	and.w	r1, r2, r9
 801a48a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a48e:	f300 8099 	bgt.w	801a5c4 <_strtod_l+0x934>
 801a492:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a496:	f77f aea8 	ble.w	801a1ea <_strtod_l+0x55a>
 801a49a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801a520 <_strtod_l+0x890>
 801a49e:	ec49 8b16 	vmov	d6, r8, r9
 801a4a2:	4b23      	ldr	r3, [pc, #140]	; (801a530 <_strtod_l+0x8a0>)
 801a4a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a4a8:	ee17 2a90 	vmov	r2, s15
 801a4ac:	4013      	ands	r3, r2
 801a4ae:	ec59 8b17 	vmov	r8, r9, d7
 801a4b2:	2b00      	cmp	r3, #0
 801a4b4:	f47f ae34 	bne.w	801a120 <_strtod_l+0x490>
 801a4b8:	2322      	movs	r3, #34	; 0x22
 801a4ba:	6023      	str	r3, [r4, #0]
 801a4bc:	e630      	b.n	801a120 <_strtod_l+0x490>
 801a4be:	f04f 31ff 	mov.w	r1, #4294967295
 801a4c2:	fa01 f202 	lsl.w	r2, r1, r2
 801a4c6:	ea02 0808 	and.w	r8, r2, r8
 801a4ca:	e6da      	b.n	801a282 <_strtod_l+0x5f2>
 801a4cc:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801a4d0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801a4d4:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801a4d8:	33e2      	adds	r3, #226	; 0xe2
 801a4da:	fa00 f303 	lsl.w	r3, r0, r3
 801a4de:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801a4e2:	e73f      	b.n	801a364 <_strtod_l+0x6d4>
 801a4e4:	2200      	movs	r2, #0
 801a4e6:	2301      	movs	r3, #1
 801a4e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a4ec:	e73a      	b.n	801a364 <_strtod_l+0x6d4>
 801a4ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a4f0:	461a      	mov	r2, r3
 801a4f2:	4620      	mov	r0, r4
 801a4f4:	f7ff f962 	bl	80197bc <__lshift>
 801a4f8:	9012      	str	r0, [sp, #72]	; 0x48
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	f47f af64 	bne.w	801a3c8 <_strtod_l+0x738>
 801a500:	e604      	b.n	801a10c <_strtod_l+0x47c>
 801a502:	bf00      	nop
 801a504:	f3af 8000 	nop.w
 801a508:	94a03595 	.word	0x94a03595
 801a50c:	3fcfffff 	.word	0x3fcfffff
 801a510:	94a03595 	.word	0x94a03595
 801a514:	3fdfffff 	.word	0x3fdfffff
 801a518:	35afe535 	.word	0x35afe535
 801a51c:	3fe00000 	.word	0x3fe00000
 801a520:	00000000 	.word	0x00000000
 801a524:	39500000 	.word	0x39500000
 801a528:	0801c788 	.word	0x0801c788
 801a52c:	fffffc02 	.word	0xfffffc02
 801a530:	7ff00000 	.word	0x7ff00000
 801a534:	46cb      	mov	fp, r9
 801a536:	d15f      	bne.n	801a5f8 <_strtod_l+0x968>
 801a538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a53c:	f1ba 0f00 	cmp.w	sl, #0
 801a540:	d02a      	beq.n	801a598 <_strtod_l+0x908>
 801a542:	4aa7      	ldr	r2, [pc, #668]	; (801a7e0 <_strtod_l+0xb50>)
 801a544:	4293      	cmp	r3, r2
 801a546:	d12b      	bne.n	801a5a0 <_strtod_l+0x910>
 801a548:	9b05      	ldr	r3, [sp, #20]
 801a54a:	4642      	mov	r2, r8
 801a54c:	b1fb      	cbz	r3, 801a58e <_strtod_l+0x8fe>
 801a54e:	4ba5      	ldr	r3, [pc, #660]	; (801a7e4 <_strtod_l+0xb54>)
 801a550:	ea09 0303 	and.w	r3, r9, r3
 801a554:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a558:	f04f 31ff 	mov.w	r1, #4294967295
 801a55c:	d81a      	bhi.n	801a594 <_strtod_l+0x904>
 801a55e:	0d1b      	lsrs	r3, r3, #20
 801a560:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a564:	fa01 f303 	lsl.w	r3, r1, r3
 801a568:	429a      	cmp	r2, r3
 801a56a:	d119      	bne.n	801a5a0 <_strtod_l+0x910>
 801a56c:	4b9e      	ldr	r3, [pc, #632]	; (801a7e8 <_strtod_l+0xb58>)
 801a56e:	459b      	cmp	fp, r3
 801a570:	d102      	bne.n	801a578 <_strtod_l+0x8e8>
 801a572:	3201      	adds	r2, #1
 801a574:	f43f adca 	beq.w	801a10c <_strtod_l+0x47c>
 801a578:	4b9a      	ldr	r3, [pc, #616]	; (801a7e4 <_strtod_l+0xb54>)
 801a57a:	ea0b 0303 	and.w	r3, fp, r3
 801a57e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a582:	f04f 0800 	mov.w	r8, #0
 801a586:	9b05      	ldr	r3, [sp, #20]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d186      	bne.n	801a49a <_strtod_l+0x80a>
 801a58c:	e5c8      	b.n	801a120 <_strtod_l+0x490>
 801a58e:	f04f 33ff 	mov.w	r3, #4294967295
 801a592:	e7e9      	b.n	801a568 <_strtod_l+0x8d8>
 801a594:	460b      	mov	r3, r1
 801a596:	e7e7      	b.n	801a568 <_strtod_l+0x8d8>
 801a598:	ea53 0308 	orrs.w	r3, r3, r8
 801a59c:	f43f af6d 	beq.w	801a47a <_strtod_l+0x7ea>
 801a5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5a2:	b1cb      	cbz	r3, 801a5d8 <_strtod_l+0x948>
 801a5a4:	ea13 0f0b 	tst.w	r3, fp
 801a5a8:	d0ed      	beq.n	801a586 <_strtod_l+0x8f6>
 801a5aa:	9a05      	ldr	r2, [sp, #20]
 801a5ac:	4640      	mov	r0, r8
 801a5ae:	4649      	mov	r1, r9
 801a5b0:	f1ba 0f00 	cmp.w	sl, #0
 801a5b4:	d014      	beq.n	801a5e0 <_strtod_l+0x950>
 801a5b6:	f7ff fb51 	bl	8019c5c <sulp>
 801a5ba:	ee38 7b00 	vadd.f64	d7, d8, d0
 801a5be:	ec59 8b17 	vmov	r8, r9, d7
 801a5c2:	e7e0      	b.n	801a586 <_strtod_l+0x8f6>
 801a5c4:	4013      	ands	r3, r2
 801a5c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a5ca:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a5ce:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a5d2:	f04f 38ff 	mov.w	r8, #4294967295
 801a5d6:	e7d6      	b.n	801a586 <_strtod_l+0x8f6>
 801a5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a5da:	ea13 0f08 	tst.w	r3, r8
 801a5de:	e7e3      	b.n	801a5a8 <_strtod_l+0x918>
 801a5e0:	f7ff fb3c 	bl	8019c5c <sulp>
 801a5e4:	ee38 0b40 	vsub.f64	d0, d8, d0
 801a5e8:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f0:	ec59 8b10 	vmov	r8, r9, d0
 801a5f4:	d1c7      	bne.n	801a586 <_strtod_l+0x8f6>
 801a5f6:	e5f8      	b.n	801a1ea <_strtod_l+0x55a>
 801a5f8:	4631      	mov	r1, r6
 801a5fa:	4628      	mov	r0, r5
 801a5fc:	f7ff faba 	bl	8019b74 <__ratio>
 801a600:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801a604:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a60c:	d85f      	bhi.n	801a6ce <_strtod_l+0xa3e>
 801a60e:	f1ba 0f00 	cmp.w	sl, #0
 801a612:	d166      	bne.n	801a6e2 <_strtod_l+0xa52>
 801a614:	f1b8 0f00 	cmp.w	r8, #0
 801a618:	d14d      	bne.n	801a6b6 <_strtod_l+0xa26>
 801a61a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a61e:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a622:	2b00      	cmp	r3, #0
 801a624:	d162      	bne.n	801a6ec <_strtod_l+0xa5c>
 801a626:	eeb4 0bcd 	vcmpe.f64	d0, d13
 801a62a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a632:	d401      	bmi.n	801a638 <_strtod_l+0x9a8>
 801a634:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a638:	eeb1 cb4d 	vneg.f64	d12, d13
 801a63c:	4869      	ldr	r0, [pc, #420]	; (801a7e4 <_strtod_l+0xb54>)
 801a63e:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 801a7f0 <_strtod_l+0xb60>
 801a642:	ea0b 0100 	and.w	r1, fp, r0
 801a646:	4561      	cmp	r1, ip
 801a648:	ec53 2b1c 	vmov	r2, r3, d12
 801a64c:	d17a      	bne.n	801a744 <_strtod_l+0xab4>
 801a64e:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801a652:	ec49 8b10 	vmov	d0, r8, r9
 801a656:	910a      	str	r1, [sp, #40]	; 0x28
 801a658:	f7ff f9c2 	bl	80199e0 <__ulp>
 801a65c:	ec49 8b1e 	vmov	d14, r8, r9
 801a660:	4860      	ldr	r0, [pc, #384]	; (801a7e4 <_strtod_l+0xb54>)
 801a662:	eea0 eb0c 	vfma.f64	d14, d0, d12
 801a666:	ee1e 3a90 	vmov	r3, s29
 801a66a:	4a60      	ldr	r2, [pc, #384]	; (801a7ec <_strtod_l+0xb5c>)
 801a66c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a66e:	4018      	ands	r0, r3
 801a670:	4290      	cmp	r0, r2
 801a672:	ec59 8b1e 	vmov	r8, r9, d14
 801a676:	d93c      	bls.n	801a6f2 <_strtod_l+0xa62>
 801a678:	ee18 2a90 	vmov	r2, s17
 801a67c:	4b5a      	ldr	r3, [pc, #360]	; (801a7e8 <_strtod_l+0xb58>)
 801a67e:	429a      	cmp	r2, r3
 801a680:	d104      	bne.n	801a68c <_strtod_l+0x9fc>
 801a682:	ee18 3a10 	vmov	r3, s16
 801a686:	3301      	adds	r3, #1
 801a688:	f43f ad40 	beq.w	801a10c <_strtod_l+0x47c>
 801a68c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 801a7e8 <_strtod_l+0xb58>
 801a690:	f04f 38ff 	mov.w	r8, #4294967295
 801a694:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a696:	4620      	mov	r0, r4
 801a698:	f7fe fe76 	bl	8019388 <_Bfree>
 801a69c:	4639      	mov	r1, r7
 801a69e:	4620      	mov	r0, r4
 801a6a0:	f7fe fe72 	bl	8019388 <_Bfree>
 801a6a4:	4631      	mov	r1, r6
 801a6a6:	4620      	mov	r0, r4
 801a6a8:	f7fe fe6e 	bl	8019388 <_Bfree>
 801a6ac:	4629      	mov	r1, r5
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f7fe fe6a 	bl	8019388 <_Bfree>
 801a6b4:	e609      	b.n	801a2ca <_strtod_l+0x63a>
 801a6b6:	f1b8 0f01 	cmp.w	r8, #1
 801a6ba:	d103      	bne.n	801a6c4 <_strtod_l+0xa34>
 801a6bc:	f1b9 0f00 	cmp.w	r9, #0
 801a6c0:	f43f ad93 	beq.w	801a1ea <_strtod_l+0x55a>
 801a6c4:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a6c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801a6cc:	e7b6      	b.n	801a63c <_strtod_l+0x9ac>
 801a6ce:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801a6d2:	ee20 db0d 	vmul.f64	d13, d0, d13
 801a6d6:	f1ba 0f00 	cmp.w	sl, #0
 801a6da:	d0ad      	beq.n	801a638 <_strtod_l+0x9a8>
 801a6dc:	eeb0 cb4d 	vmov.f64	d12, d13
 801a6e0:	e7ac      	b.n	801a63c <_strtod_l+0x9ac>
 801a6e2:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801a6e6:	eeb0 db4c 	vmov.f64	d13, d12
 801a6ea:	e7a7      	b.n	801a63c <_strtod_l+0x9ac>
 801a6ec:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 801a6f0:	e7a4      	b.n	801a63c <_strtod_l+0x9ac>
 801a6f2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801a6f6:	9b05      	ldr	r3, [sp, #20]
 801a6f8:	46cb      	mov	fp, r9
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d1ca      	bne.n	801a694 <_strtod_l+0xa04>
 801a6fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a702:	0d1b      	lsrs	r3, r3, #20
 801a704:	051b      	lsls	r3, r3, #20
 801a706:	4299      	cmp	r1, r3
 801a708:	d1c4      	bne.n	801a694 <_strtod_l+0xa04>
 801a70a:	ec51 0b1d 	vmov	r0, r1, d13
 801a70e:	f7e6 f83b 	bl	8000788 <__aeabi_d2lz>
 801a712:	f7e5 fff3 	bl	80006fc <__aeabi_l2d>
 801a716:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 801a71a:	ec41 0b17 	vmov	d7, r0, r1
 801a71e:	ea4b 0b08 	orr.w	fp, fp, r8
 801a722:	ea5b 0b0a 	orrs.w	fp, fp, sl
 801a726:	ee3d db47 	vsub.f64	d13, d13, d7
 801a72a:	d03c      	beq.n	801a7a6 <_strtod_l+0xb16>
 801a72c:	eeb4 dbca 	vcmpe.f64	d13, d10
 801a730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a734:	f53f acf4 	bmi.w	801a120 <_strtod_l+0x490>
 801a738:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a740:	dda8      	ble.n	801a694 <_strtod_l+0xa04>
 801a742:	e4ed      	b.n	801a120 <_strtod_l+0x490>
 801a744:	9805      	ldr	r0, [sp, #20]
 801a746:	b1f0      	cbz	r0, 801a786 <_strtod_l+0xaf6>
 801a748:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801a74c:	d81b      	bhi.n	801a786 <_strtod_l+0xaf6>
 801a74e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a7d8 <_strtod_l+0xb48>
 801a752:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801a756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a75a:	d811      	bhi.n	801a780 <_strtod_l+0xaf0>
 801a75c:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801a760:	ee1d 3a10 	vmov	r3, s26
 801a764:	2b01      	cmp	r3, #1
 801a766:	bf38      	it	cc
 801a768:	2301      	movcc	r3, #1
 801a76a:	ee0d 3a10 	vmov	s26, r3
 801a76e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801a772:	f1ba 0f00 	cmp.w	sl, #0
 801a776:	d113      	bne.n	801a7a0 <_strtod_l+0xb10>
 801a778:	eeb1 7b4d 	vneg.f64	d7, d13
 801a77c:	ec53 2b17 	vmov	r2, r3, d7
 801a780:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801a784:	1a43      	subs	r3, r0, r1
 801a786:	eeb0 0b48 	vmov.f64	d0, d8
 801a78a:	ec43 2b1c 	vmov	d12, r2, r3
 801a78e:	910a      	str	r1, [sp, #40]	; 0x28
 801a790:	f7ff f926 	bl	80199e0 <__ulp>
 801a794:	990a      	ldr	r1, [sp, #40]	; 0x28
 801a796:	eeac 8b00 	vfma.f64	d8, d12, d0
 801a79a:	ec59 8b18 	vmov	r8, r9, d8
 801a79e:	e7aa      	b.n	801a6f6 <_strtod_l+0xa66>
 801a7a0:	eeb0 7b4d 	vmov.f64	d7, d13
 801a7a4:	e7ea      	b.n	801a77c <_strtod_l+0xaec>
 801a7a6:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801a7aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ae:	f57f af71 	bpl.w	801a694 <_strtod_l+0xa04>
 801a7b2:	e4b5      	b.n	801a120 <_strtod_l+0x490>
 801a7b4:	2300      	movs	r3, #0
 801a7b6:	9308      	str	r3, [sp, #32]
 801a7b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a7ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a7bc:	6013      	str	r3, [r2, #0]
 801a7be:	f7ff baa6 	b.w	8019d0e <_strtod_l+0x7e>
 801a7c2:	2a65      	cmp	r2, #101	; 0x65
 801a7c4:	f43f aba2 	beq.w	8019f0c <_strtod_l+0x27c>
 801a7c8:	2a45      	cmp	r2, #69	; 0x45
 801a7ca:	f43f ab9f 	beq.w	8019f0c <_strtod_l+0x27c>
 801a7ce:	2101      	movs	r1, #1
 801a7d0:	f7ff bbd8 	b.w	8019f84 <_strtod_l+0x2f4>
 801a7d4:	f3af 8000 	nop.w
 801a7d8:	ffc00000 	.word	0xffc00000
 801a7dc:	41dfffff 	.word	0x41dfffff
 801a7e0:	000fffff 	.word	0x000fffff
 801a7e4:	7ff00000 	.word	0x7ff00000
 801a7e8:	7fefffff 	.word	0x7fefffff
 801a7ec:	7c9fffff 	.word	0x7c9fffff
 801a7f0:	7fe00000 	.word	0x7fe00000

0801a7f4 <_strtod_r>:
 801a7f4:	4b01      	ldr	r3, [pc, #4]	; (801a7fc <_strtod_r+0x8>)
 801a7f6:	f7ff ba4b 	b.w	8019c90 <_strtod_l>
 801a7fa:	bf00      	nop
 801a7fc:	2400015c 	.word	0x2400015c

0801a800 <_strtol_l.constprop.0>:
 801a800:	2b01      	cmp	r3, #1
 801a802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a806:	d001      	beq.n	801a80c <_strtol_l.constprop.0+0xc>
 801a808:	2b24      	cmp	r3, #36	; 0x24
 801a80a:	d906      	bls.n	801a81a <_strtol_l.constprop.0+0x1a>
 801a80c:	f7fd fe3c 	bl	8018488 <__errno>
 801a810:	2316      	movs	r3, #22
 801a812:	6003      	str	r3, [r0, #0]
 801a814:	2000      	movs	r0, #0
 801a816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a81a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801a900 <_strtol_l.constprop.0+0x100>
 801a81e:	460d      	mov	r5, r1
 801a820:	462e      	mov	r6, r5
 801a822:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a826:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801a82a:	f017 0708 	ands.w	r7, r7, #8
 801a82e:	d1f7      	bne.n	801a820 <_strtol_l.constprop.0+0x20>
 801a830:	2c2d      	cmp	r4, #45	; 0x2d
 801a832:	d132      	bne.n	801a89a <_strtol_l.constprop.0+0x9a>
 801a834:	782c      	ldrb	r4, [r5, #0]
 801a836:	2701      	movs	r7, #1
 801a838:	1cb5      	adds	r5, r6, #2
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d05b      	beq.n	801a8f6 <_strtol_l.constprop.0+0xf6>
 801a83e:	2b10      	cmp	r3, #16
 801a840:	d109      	bne.n	801a856 <_strtol_l.constprop.0+0x56>
 801a842:	2c30      	cmp	r4, #48	; 0x30
 801a844:	d107      	bne.n	801a856 <_strtol_l.constprop.0+0x56>
 801a846:	782c      	ldrb	r4, [r5, #0]
 801a848:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801a84c:	2c58      	cmp	r4, #88	; 0x58
 801a84e:	d14d      	bne.n	801a8ec <_strtol_l.constprop.0+0xec>
 801a850:	786c      	ldrb	r4, [r5, #1]
 801a852:	2310      	movs	r3, #16
 801a854:	3502      	adds	r5, #2
 801a856:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801a85a:	f108 38ff 	add.w	r8, r8, #4294967295
 801a85e:	f04f 0e00 	mov.w	lr, #0
 801a862:	fbb8 f9f3 	udiv	r9, r8, r3
 801a866:	4676      	mov	r6, lr
 801a868:	fb03 8a19 	mls	sl, r3, r9, r8
 801a86c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a870:	f1bc 0f09 	cmp.w	ip, #9
 801a874:	d816      	bhi.n	801a8a4 <_strtol_l.constprop.0+0xa4>
 801a876:	4664      	mov	r4, ip
 801a878:	42a3      	cmp	r3, r4
 801a87a:	dd24      	ble.n	801a8c6 <_strtol_l.constprop.0+0xc6>
 801a87c:	f1be 3fff 	cmp.w	lr, #4294967295
 801a880:	d008      	beq.n	801a894 <_strtol_l.constprop.0+0x94>
 801a882:	45b1      	cmp	r9, r6
 801a884:	d31c      	bcc.n	801a8c0 <_strtol_l.constprop.0+0xc0>
 801a886:	d101      	bne.n	801a88c <_strtol_l.constprop.0+0x8c>
 801a888:	45a2      	cmp	sl, r4
 801a88a:	db19      	blt.n	801a8c0 <_strtol_l.constprop.0+0xc0>
 801a88c:	fb06 4603 	mla	r6, r6, r3, r4
 801a890:	f04f 0e01 	mov.w	lr, #1
 801a894:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a898:	e7e8      	b.n	801a86c <_strtol_l.constprop.0+0x6c>
 801a89a:	2c2b      	cmp	r4, #43	; 0x2b
 801a89c:	bf04      	itt	eq
 801a89e:	782c      	ldrbeq	r4, [r5, #0]
 801a8a0:	1cb5      	addeq	r5, r6, #2
 801a8a2:	e7ca      	b.n	801a83a <_strtol_l.constprop.0+0x3a>
 801a8a4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a8a8:	f1bc 0f19 	cmp.w	ip, #25
 801a8ac:	d801      	bhi.n	801a8b2 <_strtol_l.constprop.0+0xb2>
 801a8ae:	3c37      	subs	r4, #55	; 0x37
 801a8b0:	e7e2      	b.n	801a878 <_strtol_l.constprop.0+0x78>
 801a8b2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a8b6:	f1bc 0f19 	cmp.w	ip, #25
 801a8ba:	d804      	bhi.n	801a8c6 <_strtol_l.constprop.0+0xc6>
 801a8bc:	3c57      	subs	r4, #87	; 0x57
 801a8be:	e7db      	b.n	801a878 <_strtol_l.constprop.0+0x78>
 801a8c0:	f04f 3eff 	mov.w	lr, #4294967295
 801a8c4:	e7e6      	b.n	801a894 <_strtol_l.constprop.0+0x94>
 801a8c6:	f1be 3fff 	cmp.w	lr, #4294967295
 801a8ca:	d105      	bne.n	801a8d8 <_strtol_l.constprop.0+0xd8>
 801a8cc:	2322      	movs	r3, #34	; 0x22
 801a8ce:	6003      	str	r3, [r0, #0]
 801a8d0:	4646      	mov	r6, r8
 801a8d2:	b942      	cbnz	r2, 801a8e6 <_strtol_l.constprop.0+0xe6>
 801a8d4:	4630      	mov	r0, r6
 801a8d6:	e79e      	b.n	801a816 <_strtol_l.constprop.0+0x16>
 801a8d8:	b107      	cbz	r7, 801a8dc <_strtol_l.constprop.0+0xdc>
 801a8da:	4276      	negs	r6, r6
 801a8dc:	2a00      	cmp	r2, #0
 801a8de:	d0f9      	beq.n	801a8d4 <_strtol_l.constprop.0+0xd4>
 801a8e0:	f1be 0f00 	cmp.w	lr, #0
 801a8e4:	d000      	beq.n	801a8e8 <_strtol_l.constprop.0+0xe8>
 801a8e6:	1e69      	subs	r1, r5, #1
 801a8e8:	6011      	str	r1, [r2, #0]
 801a8ea:	e7f3      	b.n	801a8d4 <_strtol_l.constprop.0+0xd4>
 801a8ec:	2430      	movs	r4, #48	; 0x30
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d1b1      	bne.n	801a856 <_strtol_l.constprop.0+0x56>
 801a8f2:	2308      	movs	r3, #8
 801a8f4:	e7af      	b.n	801a856 <_strtol_l.constprop.0+0x56>
 801a8f6:	2c30      	cmp	r4, #48	; 0x30
 801a8f8:	d0a5      	beq.n	801a846 <_strtol_l.constprop.0+0x46>
 801a8fa:	230a      	movs	r3, #10
 801a8fc:	e7ab      	b.n	801a856 <_strtol_l.constprop.0+0x56>
 801a8fe:	bf00      	nop
 801a900:	0801c7b1 	.word	0x0801c7b1

0801a904 <_strtol_r>:
 801a904:	f7ff bf7c 	b.w	801a800 <_strtol_l.constprop.0>

0801a908 <__ssputs_r>:
 801a908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a90c:	688e      	ldr	r6, [r1, #8]
 801a90e:	461f      	mov	r7, r3
 801a910:	42be      	cmp	r6, r7
 801a912:	680b      	ldr	r3, [r1, #0]
 801a914:	4682      	mov	sl, r0
 801a916:	460c      	mov	r4, r1
 801a918:	4690      	mov	r8, r2
 801a91a:	d82c      	bhi.n	801a976 <__ssputs_r+0x6e>
 801a91c:	898a      	ldrh	r2, [r1, #12]
 801a91e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a922:	d026      	beq.n	801a972 <__ssputs_r+0x6a>
 801a924:	6965      	ldr	r5, [r4, #20]
 801a926:	6909      	ldr	r1, [r1, #16]
 801a928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a92c:	eba3 0901 	sub.w	r9, r3, r1
 801a930:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a934:	1c7b      	adds	r3, r7, #1
 801a936:	444b      	add	r3, r9
 801a938:	106d      	asrs	r5, r5, #1
 801a93a:	429d      	cmp	r5, r3
 801a93c:	bf38      	it	cc
 801a93e:	461d      	movcc	r5, r3
 801a940:	0553      	lsls	r3, r2, #21
 801a942:	d527      	bpl.n	801a994 <__ssputs_r+0x8c>
 801a944:	4629      	mov	r1, r5
 801a946:	f7fe fc53 	bl	80191f0 <_malloc_r>
 801a94a:	4606      	mov	r6, r0
 801a94c:	b360      	cbz	r0, 801a9a8 <__ssputs_r+0xa0>
 801a94e:	6921      	ldr	r1, [r4, #16]
 801a950:	464a      	mov	r2, r9
 801a952:	f7fd fdce 	bl	80184f2 <memcpy>
 801a956:	89a3      	ldrh	r3, [r4, #12]
 801a958:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a960:	81a3      	strh	r3, [r4, #12]
 801a962:	6126      	str	r6, [r4, #16]
 801a964:	6165      	str	r5, [r4, #20]
 801a966:	444e      	add	r6, r9
 801a968:	eba5 0509 	sub.w	r5, r5, r9
 801a96c:	6026      	str	r6, [r4, #0]
 801a96e:	60a5      	str	r5, [r4, #8]
 801a970:	463e      	mov	r6, r7
 801a972:	42be      	cmp	r6, r7
 801a974:	d900      	bls.n	801a978 <__ssputs_r+0x70>
 801a976:	463e      	mov	r6, r7
 801a978:	6820      	ldr	r0, [r4, #0]
 801a97a:	4632      	mov	r2, r6
 801a97c:	4641      	mov	r1, r8
 801a97e:	f000 fd5c 	bl	801b43a <memmove>
 801a982:	68a3      	ldr	r3, [r4, #8]
 801a984:	1b9b      	subs	r3, r3, r6
 801a986:	60a3      	str	r3, [r4, #8]
 801a988:	6823      	ldr	r3, [r4, #0]
 801a98a:	4433      	add	r3, r6
 801a98c:	6023      	str	r3, [r4, #0]
 801a98e:	2000      	movs	r0, #0
 801a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a994:	462a      	mov	r2, r5
 801a996:	f001 f934 	bl	801bc02 <_realloc_r>
 801a99a:	4606      	mov	r6, r0
 801a99c:	2800      	cmp	r0, #0
 801a99e:	d1e0      	bne.n	801a962 <__ssputs_r+0x5a>
 801a9a0:	6921      	ldr	r1, [r4, #16]
 801a9a2:	4650      	mov	r0, sl
 801a9a4:	f7fe fbb0 	bl	8019108 <_free_r>
 801a9a8:	230c      	movs	r3, #12
 801a9aa:	f8ca 3000 	str.w	r3, [sl]
 801a9ae:	89a3      	ldrh	r3, [r4, #12]
 801a9b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a9b4:	81a3      	strh	r3, [r4, #12]
 801a9b6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ba:	e7e9      	b.n	801a990 <__ssputs_r+0x88>

0801a9bc <_svfiprintf_r>:
 801a9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9c0:	4698      	mov	r8, r3
 801a9c2:	898b      	ldrh	r3, [r1, #12]
 801a9c4:	061b      	lsls	r3, r3, #24
 801a9c6:	b09d      	sub	sp, #116	; 0x74
 801a9c8:	4607      	mov	r7, r0
 801a9ca:	460d      	mov	r5, r1
 801a9cc:	4614      	mov	r4, r2
 801a9ce:	d50e      	bpl.n	801a9ee <_svfiprintf_r+0x32>
 801a9d0:	690b      	ldr	r3, [r1, #16]
 801a9d2:	b963      	cbnz	r3, 801a9ee <_svfiprintf_r+0x32>
 801a9d4:	2140      	movs	r1, #64	; 0x40
 801a9d6:	f7fe fc0b 	bl	80191f0 <_malloc_r>
 801a9da:	6028      	str	r0, [r5, #0]
 801a9dc:	6128      	str	r0, [r5, #16]
 801a9de:	b920      	cbnz	r0, 801a9ea <_svfiprintf_r+0x2e>
 801a9e0:	230c      	movs	r3, #12
 801a9e2:	603b      	str	r3, [r7, #0]
 801a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a9e8:	e0d0      	b.n	801ab8c <_svfiprintf_r+0x1d0>
 801a9ea:	2340      	movs	r3, #64	; 0x40
 801a9ec:	616b      	str	r3, [r5, #20]
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	9309      	str	r3, [sp, #36]	; 0x24
 801a9f2:	2320      	movs	r3, #32
 801a9f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9f8:	f8cd 800c 	str.w	r8, [sp, #12]
 801a9fc:	2330      	movs	r3, #48	; 0x30
 801a9fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aba4 <_svfiprintf_r+0x1e8>
 801aa02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aa06:	f04f 0901 	mov.w	r9, #1
 801aa0a:	4623      	mov	r3, r4
 801aa0c:	469a      	mov	sl, r3
 801aa0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa12:	b10a      	cbz	r2, 801aa18 <_svfiprintf_r+0x5c>
 801aa14:	2a25      	cmp	r2, #37	; 0x25
 801aa16:	d1f9      	bne.n	801aa0c <_svfiprintf_r+0x50>
 801aa18:	ebba 0b04 	subs.w	fp, sl, r4
 801aa1c:	d00b      	beq.n	801aa36 <_svfiprintf_r+0x7a>
 801aa1e:	465b      	mov	r3, fp
 801aa20:	4622      	mov	r2, r4
 801aa22:	4629      	mov	r1, r5
 801aa24:	4638      	mov	r0, r7
 801aa26:	f7ff ff6f 	bl	801a908 <__ssputs_r>
 801aa2a:	3001      	adds	r0, #1
 801aa2c:	f000 80a9 	beq.w	801ab82 <_svfiprintf_r+0x1c6>
 801aa30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa32:	445a      	add	r2, fp
 801aa34:	9209      	str	r2, [sp, #36]	; 0x24
 801aa36:	f89a 3000 	ldrb.w	r3, [sl]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	f000 80a1 	beq.w	801ab82 <_svfiprintf_r+0x1c6>
 801aa40:	2300      	movs	r3, #0
 801aa42:	f04f 32ff 	mov.w	r2, #4294967295
 801aa46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa4a:	f10a 0a01 	add.w	sl, sl, #1
 801aa4e:	9304      	str	r3, [sp, #16]
 801aa50:	9307      	str	r3, [sp, #28]
 801aa52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa56:	931a      	str	r3, [sp, #104]	; 0x68
 801aa58:	4654      	mov	r4, sl
 801aa5a:	2205      	movs	r2, #5
 801aa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa60:	4850      	ldr	r0, [pc, #320]	; (801aba4 <_svfiprintf_r+0x1e8>)
 801aa62:	f7e5 fc65 	bl	8000330 <memchr>
 801aa66:	9a04      	ldr	r2, [sp, #16]
 801aa68:	b9d8      	cbnz	r0, 801aaa2 <_svfiprintf_r+0xe6>
 801aa6a:	06d0      	lsls	r0, r2, #27
 801aa6c:	bf44      	itt	mi
 801aa6e:	2320      	movmi	r3, #32
 801aa70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa74:	0711      	lsls	r1, r2, #28
 801aa76:	bf44      	itt	mi
 801aa78:	232b      	movmi	r3, #43	; 0x2b
 801aa7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aa7e:	f89a 3000 	ldrb.w	r3, [sl]
 801aa82:	2b2a      	cmp	r3, #42	; 0x2a
 801aa84:	d015      	beq.n	801aab2 <_svfiprintf_r+0xf6>
 801aa86:	9a07      	ldr	r2, [sp, #28]
 801aa88:	4654      	mov	r4, sl
 801aa8a:	2000      	movs	r0, #0
 801aa8c:	f04f 0c0a 	mov.w	ip, #10
 801aa90:	4621      	mov	r1, r4
 801aa92:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa96:	3b30      	subs	r3, #48	; 0x30
 801aa98:	2b09      	cmp	r3, #9
 801aa9a:	d94d      	bls.n	801ab38 <_svfiprintf_r+0x17c>
 801aa9c:	b1b0      	cbz	r0, 801aacc <_svfiprintf_r+0x110>
 801aa9e:	9207      	str	r2, [sp, #28]
 801aaa0:	e014      	b.n	801aacc <_svfiprintf_r+0x110>
 801aaa2:	eba0 0308 	sub.w	r3, r0, r8
 801aaa6:	fa09 f303 	lsl.w	r3, r9, r3
 801aaaa:	4313      	orrs	r3, r2
 801aaac:	9304      	str	r3, [sp, #16]
 801aaae:	46a2      	mov	sl, r4
 801aab0:	e7d2      	b.n	801aa58 <_svfiprintf_r+0x9c>
 801aab2:	9b03      	ldr	r3, [sp, #12]
 801aab4:	1d19      	adds	r1, r3, #4
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	9103      	str	r1, [sp, #12]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	bfbb      	ittet	lt
 801aabe:	425b      	neglt	r3, r3
 801aac0:	f042 0202 	orrlt.w	r2, r2, #2
 801aac4:	9307      	strge	r3, [sp, #28]
 801aac6:	9307      	strlt	r3, [sp, #28]
 801aac8:	bfb8      	it	lt
 801aaca:	9204      	strlt	r2, [sp, #16]
 801aacc:	7823      	ldrb	r3, [r4, #0]
 801aace:	2b2e      	cmp	r3, #46	; 0x2e
 801aad0:	d10c      	bne.n	801aaec <_svfiprintf_r+0x130>
 801aad2:	7863      	ldrb	r3, [r4, #1]
 801aad4:	2b2a      	cmp	r3, #42	; 0x2a
 801aad6:	d134      	bne.n	801ab42 <_svfiprintf_r+0x186>
 801aad8:	9b03      	ldr	r3, [sp, #12]
 801aada:	1d1a      	adds	r2, r3, #4
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	9203      	str	r2, [sp, #12]
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	bfb8      	it	lt
 801aae4:	f04f 33ff 	movlt.w	r3, #4294967295
 801aae8:	3402      	adds	r4, #2
 801aaea:	9305      	str	r3, [sp, #20]
 801aaec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801abb4 <_svfiprintf_r+0x1f8>
 801aaf0:	7821      	ldrb	r1, [r4, #0]
 801aaf2:	2203      	movs	r2, #3
 801aaf4:	4650      	mov	r0, sl
 801aaf6:	f7e5 fc1b 	bl	8000330 <memchr>
 801aafa:	b138      	cbz	r0, 801ab0c <_svfiprintf_r+0x150>
 801aafc:	9b04      	ldr	r3, [sp, #16]
 801aafe:	eba0 000a 	sub.w	r0, r0, sl
 801ab02:	2240      	movs	r2, #64	; 0x40
 801ab04:	4082      	lsls	r2, r0
 801ab06:	4313      	orrs	r3, r2
 801ab08:	3401      	adds	r4, #1
 801ab0a:	9304      	str	r3, [sp, #16]
 801ab0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab10:	4825      	ldr	r0, [pc, #148]	; (801aba8 <_svfiprintf_r+0x1ec>)
 801ab12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab16:	2206      	movs	r2, #6
 801ab18:	f7e5 fc0a 	bl	8000330 <memchr>
 801ab1c:	2800      	cmp	r0, #0
 801ab1e:	d038      	beq.n	801ab92 <_svfiprintf_r+0x1d6>
 801ab20:	4b22      	ldr	r3, [pc, #136]	; (801abac <_svfiprintf_r+0x1f0>)
 801ab22:	bb1b      	cbnz	r3, 801ab6c <_svfiprintf_r+0x1b0>
 801ab24:	9b03      	ldr	r3, [sp, #12]
 801ab26:	3307      	adds	r3, #7
 801ab28:	f023 0307 	bic.w	r3, r3, #7
 801ab2c:	3308      	adds	r3, #8
 801ab2e:	9303      	str	r3, [sp, #12]
 801ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab32:	4433      	add	r3, r6
 801ab34:	9309      	str	r3, [sp, #36]	; 0x24
 801ab36:	e768      	b.n	801aa0a <_svfiprintf_r+0x4e>
 801ab38:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	2001      	movs	r0, #1
 801ab40:	e7a6      	b.n	801aa90 <_svfiprintf_r+0xd4>
 801ab42:	2300      	movs	r3, #0
 801ab44:	3401      	adds	r4, #1
 801ab46:	9305      	str	r3, [sp, #20]
 801ab48:	4619      	mov	r1, r3
 801ab4a:	f04f 0c0a 	mov.w	ip, #10
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab54:	3a30      	subs	r2, #48	; 0x30
 801ab56:	2a09      	cmp	r2, #9
 801ab58:	d903      	bls.n	801ab62 <_svfiprintf_r+0x1a6>
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	d0c6      	beq.n	801aaec <_svfiprintf_r+0x130>
 801ab5e:	9105      	str	r1, [sp, #20]
 801ab60:	e7c4      	b.n	801aaec <_svfiprintf_r+0x130>
 801ab62:	fb0c 2101 	mla	r1, ip, r1, r2
 801ab66:	4604      	mov	r4, r0
 801ab68:	2301      	movs	r3, #1
 801ab6a:	e7f0      	b.n	801ab4e <_svfiprintf_r+0x192>
 801ab6c:	ab03      	add	r3, sp, #12
 801ab6e:	9300      	str	r3, [sp, #0]
 801ab70:	462a      	mov	r2, r5
 801ab72:	4b0f      	ldr	r3, [pc, #60]	; (801abb0 <_svfiprintf_r+0x1f4>)
 801ab74:	a904      	add	r1, sp, #16
 801ab76:	4638      	mov	r0, r7
 801ab78:	f7fc fd32 	bl	80175e0 <_printf_float>
 801ab7c:	1c42      	adds	r2, r0, #1
 801ab7e:	4606      	mov	r6, r0
 801ab80:	d1d6      	bne.n	801ab30 <_svfiprintf_r+0x174>
 801ab82:	89ab      	ldrh	r3, [r5, #12]
 801ab84:	065b      	lsls	r3, r3, #25
 801ab86:	f53f af2d 	bmi.w	801a9e4 <_svfiprintf_r+0x28>
 801ab8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab8c:	b01d      	add	sp, #116	; 0x74
 801ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab92:	ab03      	add	r3, sp, #12
 801ab94:	9300      	str	r3, [sp, #0]
 801ab96:	462a      	mov	r2, r5
 801ab98:	4b05      	ldr	r3, [pc, #20]	; (801abb0 <_svfiprintf_r+0x1f4>)
 801ab9a:	a904      	add	r1, sp, #16
 801ab9c:	4638      	mov	r0, r7
 801ab9e:	f7fc ffa7 	bl	8017af0 <_printf_i>
 801aba2:	e7eb      	b.n	801ab7c <_svfiprintf_r+0x1c0>
 801aba4:	0801c8b1 	.word	0x0801c8b1
 801aba8:	0801c8bb 	.word	0x0801c8bb
 801abac:	080175e1 	.word	0x080175e1
 801abb0:	0801a909 	.word	0x0801a909
 801abb4:	0801c8b7 	.word	0x0801c8b7

0801abb8 <_sungetc_r>:
 801abb8:	b538      	push	{r3, r4, r5, lr}
 801abba:	1c4b      	adds	r3, r1, #1
 801abbc:	4614      	mov	r4, r2
 801abbe:	d103      	bne.n	801abc8 <_sungetc_r+0x10>
 801abc0:	f04f 35ff 	mov.w	r5, #4294967295
 801abc4:	4628      	mov	r0, r5
 801abc6:	bd38      	pop	{r3, r4, r5, pc}
 801abc8:	8993      	ldrh	r3, [r2, #12]
 801abca:	f023 0320 	bic.w	r3, r3, #32
 801abce:	8193      	strh	r3, [r2, #12]
 801abd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801abd2:	6852      	ldr	r2, [r2, #4]
 801abd4:	b2cd      	uxtb	r5, r1
 801abd6:	b18b      	cbz	r3, 801abfc <_sungetc_r+0x44>
 801abd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801abda:	4293      	cmp	r3, r2
 801abdc:	dd08      	ble.n	801abf0 <_sungetc_r+0x38>
 801abde:	6823      	ldr	r3, [r4, #0]
 801abe0:	1e5a      	subs	r2, r3, #1
 801abe2:	6022      	str	r2, [r4, #0]
 801abe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 801abe8:	6863      	ldr	r3, [r4, #4]
 801abea:	3301      	adds	r3, #1
 801abec:	6063      	str	r3, [r4, #4]
 801abee:	e7e9      	b.n	801abc4 <_sungetc_r+0xc>
 801abf0:	4621      	mov	r1, r4
 801abf2:	f000 fbe8 	bl	801b3c6 <__submore>
 801abf6:	2800      	cmp	r0, #0
 801abf8:	d0f1      	beq.n	801abde <_sungetc_r+0x26>
 801abfa:	e7e1      	b.n	801abc0 <_sungetc_r+0x8>
 801abfc:	6921      	ldr	r1, [r4, #16]
 801abfe:	6823      	ldr	r3, [r4, #0]
 801ac00:	b151      	cbz	r1, 801ac18 <_sungetc_r+0x60>
 801ac02:	4299      	cmp	r1, r3
 801ac04:	d208      	bcs.n	801ac18 <_sungetc_r+0x60>
 801ac06:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ac0a:	42a9      	cmp	r1, r5
 801ac0c:	d104      	bne.n	801ac18 <_sungetc_r+0x60>
 801ac0e:	3b01      	subs	r3, #1
 801ac10:	3201      	adds	r2, #1
 801ac12:	6023      	str	r3, [r4, #0]
 801ac14:	6062      	str	r2, [r4, #4]
 801ac16:	e7d5      	b.n	801abc4 <_sungetc_r+0xc>
 801ac18:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ac1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac20:	6363      	str	r3, [r4, #52]	; 0x34
 801ac22:	2303      	movs	r3, #3
 801ac24:	63a3      	str	r3, [r4, #56]	; 0x38
 801ac26:	4623      	mov	r3, r4
 801ac28:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ac2c:	6023      	str	r3, [r4, #0]
 801ac2e:	2301      	movs	r3, #1
 801ac30:	e7dc      	b.n	801abec <_sungetc_r+0x34>

0801ac32 <__ssrefill_r>:
 801ac32:	b510      	push	{r4, lr}
 801ac34:	460c      	mov	r4, r1
 801ac36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ac38:	b169      	cbz	r1, 801ac56 <__ssrefill_r+0x24>
 801ac3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ac3e:	4299      	cmp	r1, r3
 801ac40:	d001      	beq.n	801ac46 <__ssrefill_r+0x14>
 801ac42:	f7fe fa61 	bl	8019108 <_free_r>
 801ac46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac48:	6063      	str	r3, [r4, #4]
 801ac4a:	2000      	movs	r0, #0
 801ac4c:	6360      	str	r0, [r4, #52]	; 0x34
 801ac4e:	b113      	cbz	r3, 801ac56 <__ssrefill_r+0x24>
 801ac50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ac52:	6023      	str	r3, [r4, #0]
 801ac54:	bd10      	pop	{r4, pc}
 801ac56:	6923      	ldr	r3, [r4, #16]
 801ac58:	6023      	str	r3, [r4, #0]
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	6063      	str	r3, [r4, #4]
 801ac5e:	89a3      	ldrh	r3, [r4, #12]
 801ac60:	f043 0320 	orr.w	r3, r3, #32
 801ac64:	81a3      	strh	r3, [r4, #12]
 801ac66:	f04f 30ff 	mov.w	r0, #4294967295
 801ac6a:	e7f3      	b.n	801ac54 <__ssrefill_r+0x22>

0801ac6c <__ssvfiscanf_r>:
 801ac6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac70:	460c      	mov	r4, r1
 801ac72:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ac76:	2100      	movs	r1, #0
 801ac78:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801ac7c:	49a6      	ldr	r1, [pc, #664]	; (801af18 <__ssvfiscanf_r+0x2ac>)
 801ac7e:	91a0      	str	r1, [sp, #640]	; 0x280
 801ac80:	f10d 0804 	add.w	r8, sp, #4
 801ac84:	49a5      	ldr	r1, [pc, #660]	; (801af1c <__ssvfiscanf_r+0x2b0>)
 801ac86:	4fa6      	ldr	r7, [pc, #664]	; (801af20 <__ssvfiscanf_r+0x2b4>)
 801ac88:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801af24 <__ssvfiscanf_r+0x2b8>
 801ac8c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801ac90:	4606      	mov	r6, r0
 801ac92:	91a1      	str	r1, [sp, #644]	; 0x284
 801ac94:	9300      	str	r3, [sp, #0]
 801ac96:	7813      	ldrb	r3, [r2, #0]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	f000 815a 	beq.w	801af52 <__ssvfiscanf_r+0x2e6>
 801ac9e:	5cf9      	ldrb	r1, [r7, r3]
 801aca0:	f011 0108 	ands.w	r1, r1, #8
 801aca4:	f102 0501 	add.w	r5, r2, #1
 801aca8:	d019      	beq.n	801acde <__ssvfiscanf_r+0x72>
 801acaa:	6863      	ldr	r3, [r4, #4]
 801acac:	2b00      	cmp	r3, #0
 801acae:	dd0f      	ble.n	801acd0 <__ssvfiscanf_r+0x64>
 801acb0:	6823      	ldr	r3, [r4, #0]
 801acb2:	781a      	ldrb	r2, [r3, #0]
 801acb4:	5cba      	ldrb	r2, [r7, r2]
 801acb6:	0712      	lsls	r2, r2, #28
 801acb8:	d401      	bmi.n	801acbe <__ssvfiscanf_r+0x52>
 801acba:	462a      	mov	r2, r5
 801acbc:	e7eb      	b.n	801ac96 <__ssvfiscanf_r+0x2a>
 801acbe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801acc0:	3201      	adds	r2, #1
 801acc2:	9245      	str	r2, [sp, #276]	; 0x114
 801acc4:	6862      	ldr	r2, [r4, #4]
 801acc6:	3301      	adds	r3, #1
 801acc8:	3a01      	subs	r2, #1
 801acca:	6062      	str	r2, [r4, #4]
 801accc:	6023      	str	r3, [r4, #0]
 801acce:	e7ec      	b.n	801acaa <__ssvfiscanf_r+0x3e>
 801acd0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801acd2:	4621      	mov	r1, r4
 801acd4:	4630      	mov	r0, r6
 801acd6:	4798      	blx	r3
 801acd8:	2800      	cmp	r0, #0
 801acda:	d0e9      	beq.n	801acb0 <__ssvfiscanf_r+0x44>
 801acdc:	e7ed      	b.n	801acba <__ssvfiscanf_r+0x4e>
 801acde:	2b25      	cmp	r3, #37	; 0x25
 801ace0:	d012      	beq.n	801ad08 <__ssvfiscanf_r+0x9c>
 801ace2:	469a      	mov	sl, r3
 801ace4:	6863      	ldr	r3, [r4, #4]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	f340 8091 	ble.w	801ae0e <__ssvfiscanf_r+0x1a2>
 801acec:	6822      	ldr	r2, [r4, #0]
 801acee:	7813      	ldrb	r3, [r2, #0]
 801acf0:	4553      	cmp	r3, sl
 801acf2:	f040 812e 	bne.w	801af52 <__ssvfiscanf_r+0x2e6>
 801acf6:	6863      	ldr	r3, [r4, #4]
 801acf8:	3b01      	subs	r3, #1
 801acfa:	6063      	str	r3, [r4, #4]
 801acfc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801acfe:	3201      	adds	r2, #1
 801ad00:	3301      	adds	r3, #1
 801ad02:	6022      	str	r2, [r4, #0]
 801ad04:	9345      	str	r3, [sp, #276]	; 0x114
 801ad06:	e7d8      	b.n	801acba <__ssvfiscanf_r+0x4e>
 801ad08:	9141      	str	r1, [sp, #260]	; 0x104
 801ad0a:	9143      	str	r1, [sp, #268]	; 0x10c
 801ad0c:	7853      	ldrb	r3, [r2, #1]
 801ad0e:	2b2a      	cmp	r3, #42	; 0x2a
 801ad10:	bf02      	ittt	eq
 801ad12:	2310      	moveq	r3, #16
 801ad14:	1c95      	addeq	r5, r2, #2
 801ad16:	9341      	streq	r3, [sp, #260]	; 0x104
 801ad18:	220a      	movs	r2, #10
 801ad1a:	46aa      	mov	sl, r5
 801ad1c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ad20:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ad24:	2b09      	cmp	r3, #9
 801ad26:	d91c      	bls.n	801ad62 <__ssvfiscanf_r+0xf6>
 801ad28:	487e      	ldr	r0, [pc, #504]	; (801af24 <__ssvfiscanf_r+0x2b8>)
 801ad2a:	2203      	movs	r2, #3
 801ad2c:	f7e5 fb00 	bl	8000330 <memchr>
 801ad30:	b138      	cbz	r0, 801ad42 <__ssvfiscanf_r+0xd6>
 801ad32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ad34:	eba0 0009 	sub.w	r0, r0, r9
 801ad38:	2301      	movs	r3, #1
 801ad3a:	4083      	lsls	r3, r0
 801ad3c:	4313      	orrs	r3, r2
 801ad3e:	9341      	str	r3, [sp, #260]	; 0x104
 801ad40:	4655      	mov	r5, sl
 801ad42:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ad46:	2b78      	cmp	r3, #120	; 0x78
 801ad48:	d806      	bhi.n	801ad58 <__ssvfiscanf_r+0xec>
 801ad4a:	2b57      	cmp	r3, #87	; 0x57
 801ad4c:	d810      	bhi.n	801ad70 <__ssvfiscanf_r+0x104>
 801ad4e:	2b25      	cmp	r3, #37	; 0x25
 801ad50:	d0c7      	beq.n	801ace2 <__ssvfiscanf_r+0x76>
 801ad52:	d857      	bhi.n	801ae04 <__ssvfiscanf_r+0x198>
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d065      	beq.n	801ae24 <__ssvfiscanf_r+0x1b8>
 801ad58:	2303      	movs	r3, #3
 801ad5a:	9347      	str	r3, [sp, #284]	; 0x11c
 801ad5c:	230a      	movs	r3, #10
 801ad5e:	9342      	str	r3, [sp, #264]	; 0x108
 801ad60:	e076      	b.n	801ae50 <__ssvfiscanf_r+0x1e4>
 801ad62:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ad64:	fb02 1103 	mla	r1, r2, r3, r1
 801ad68:	3930      	subs	r1, #48	; 0x30
 801ad6a:	9143      	str	r1, [sp, #268]	; 0x10c
 801ad6c:	4655      	mov	r5, sl
 801ad6e:	e7d4      	b.n	801ad1a <__ssvfiscanf_r+0xae>
 801ad70:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ad74:	2a20      	cmp	r2, #32
 801ad76:	d8ef      	bhi.n	801ad58 <__ssvfiscanf_r+0xec>
 801ad78:	a101      	add	r1, pc, #4	; (adr r1, 801ad80 <__ssvfiscanf_r+0x114>)
 801ad7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ad7e:	bf00      	nop
 801ad80:	0801ae33 	.word	0x0801ae33
 801ad84:	0801ad59 	.word	0x0801ad59
 801ad88:	0801ad59 	.word	0x0801ad59
 801ad8c:	0801ae91 	.word	0x0801ae91
 801ad90:	0801ad59 	.word	0x0801ad59
 801ad94:	0801ad59 	.word	0x0801ad59
 801ad98:	0801ad59 	.word	0x0801ad59
 801ad9c:	0801ad59 	.word	0x0801ad59
 801ada0:	0801ad59 	.word	0x0801ad59
 801ada4:	0801ad59 	.word	0x0801ad59
 801ada8:	0801ad59 	.word	0x0801ad59
 801adac:	0801aea7 	.word	0x0801aea7
 801adb0:	0801ae8d 	.word	0x0801ae8d
 801adb4:	0801ae0b 	.word	0x0801ae0b
 801adb8:	0801ae0b 	.word	0x0801ae0b
 801adbc:	0801ae0b 	.word	0x0801ae0b
 801adc0:	0801ad59 	.word	0x0801ad59
 801adc4:	0801ae49 	.word	0x0801ae49
 801adc8:	0801ad59 	.word	0x0801ad59
 801adcc:	0801ad59 	.word	0x0801ad59
 801add0:	0801ad59 	.word	0x0801ad59
 801add4:	0801ad59 	.word	0x0801ad59
 801add8:	0801aeb7 	.word	0x0801aeb7
 801addc:	0801ae85 	.word	0x0801ae85
 801ade0:	0801ae2b 	.word	0x0801ae2b
 801ade4:	0801ad59 	.word	0x0801ad59
 801ade8:	0801ad59 	.word	0x0801ad59
 801adec:	0801aeb3 	.word	0x0801aeb3
 801adf0:	0801ad59 	.word	0x0801ad59
 801adf4:	0801ae8d 	.word	0x0801ae8d
 801adf8:	0801ad59 	.word	0x0801ad59
 801adfc:	0801ad59 	.word	0x0801ad59
 801ae00:	0801ae33 	.word	0x0801ae33
 801ae04:	3b45      	subs	r3, #69	; 0x45
 801ae06:	2b02      	cmp	r3, #2
 801ae08:	d8a6      	bhi.n	801ad58 <__ssvfiscanf_r+0xec>
 801ae0a:	2305      	movs	r3, #5
 801ae0c:	e01f      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801ae0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ae10:	4621      	mov	r1, r4
 801ae12:	4630      	mov	r0, r6
 801ae14:	4798      	blx	r3
 801ae16:	2800      	cmp	r0, #0
 801ae18:	f43f af68 	beq.w	801acec <__ssvfiscanf_r+0x80>
 801ae1c:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ae1e:	2800      	cmp	r0, #0
 801ae20:	f040 808d 	bne.w	801af3e <__ssvfiscanf_r+0x2d2>
 801ae24:	f04f 30ff 	mov.w	r0, #4294967295
 801ae28:	e08f      	b.n	801af4a <__ssvfiscanf_r+0x2de>
 801ae2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ae2c:	f042 0220 	orr.w	r2, r2, #32
 801ae30:	9241      	str	r2, [sp, #260]	; 0x104
 801ae32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ae34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ae38:	9241      	str	r2, [sp, #260]	; 0x104
 801ae3a:	2210      	movs	r2, #16
 801ae3c:	2b6f      	cmp	r3, #111	; 0x6f
 801ae3e:	9242      	str	r2, [sp, #264]	; 0x108
 801ae40:	bf34      	ite	cc
 801ae42:	2303      	movcc	r3, #3
 801ae44:	2304      	movcs	r3, #4
 801ae46:	e002      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801ae48:	2300      	movs	r3, #0
 801ae4a:	9342      	str	r3, [sp, #264]	; 0x108
 801ae4c:	2303      	movs	r3, #3
 801ae4e:	9347      	str	r3, [sp, #284]	; 0x11c
 801ae50:	6863      	ldr	r3, [r4, #4]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	dd3d      	ble.n	801aed2 <__ssvfiscanf_r+0x266>
 801ae56:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae58:	0659      	lsls	r1, r3, #25
 801ae5a:	d404      	bmi.n	801ae66 <__ssvfiscanf_r+0x1fa>
 801ae5c:	6823      	ldr	r3, [r4, #0]
 801ae5e:	781a      	ldrb	r2, [r3, #0]
 801ae60:	5cba      	ldrb	r2, [r7, r2]
 801ae62:	0712      	lsls	r2, r2, #28
 801ae64:	d43c      	bmi.n	801aee0 <__ssvfiscanf_r+0x274>
 801ae66:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ae68:	2b02      	cmp	r3, #2
 801ae6a:	dc4b      	bgt.n	801af04 <__ssvfiscanf_r+0x298>
 801ae6c:	466b      	mov	r3, sp
 801ae6e:	4622      	mov	r2, r4
 801ae70:	a941      	add	r1, sp, #260	; 0x104
 801ae72:	4630      	mov	r0, r6
 801ae74:	f000 f872 	bl	801af5c <_scanf_chars>
 801ae78:	2801      	cmp	r0, #1
 801ae7a:	d06a      	beq.n	801af52 <__ssvfiscanf_r+0x2e6>
 801ae7c:	2802      	cmp	r0, #2
 801ae7e:	f47f af1c 	bne.w	801acba <__ssvfiscanf_r+0x4e>
 801ae82:	e7cb      	b.n	801ae1c <__ssvfiscanf_r+0x1b0>
 801ae84:	2308      	movs	r3, #8
 801ae86:	9342      	str	r3, [sp, #264]	; 0x108
 801ae88:	2304      	movs	r3, #4
 801ae8a:	e7e0      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801ae8c:	220a      	movs	r2, #10
 801ae8e:	e7d5      	b.n	801ae3c <__ssvfiscanf_r+0x1d0>
 801ae90:	4629      	mov	r1, r5
 801ae92:	4640      	mov	r0, r8
 801ae94:	f000 fa5e 	bl	801b354 <__sccl>
 801ae98:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ae9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae9e:	9341      	str	r3, [sp, #260]	; 0x104
 801aea0:	4605      	mov	r5, r0
 801aea2:	2301      	movs	r3, #1
 801aea4:	e7d3      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801aea6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801aea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aeac:	9341      	str	r3, [sp, #260]	; 0x104
 801aeae:	2300      	movs	r3, #0
 801aeb0:	e7cd      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801aeb2:	2302      	movs	r3, #2
 801aeb4:	e7cb      	b.n	801ae4e <__ssvfiscanf_r+0x1e2>
 801aeb6:	9841      	ldr	r0, [sp, #260]	; 0x104
 801aeb8:	06c3      	lsls	r3, r0, #27
 801aeba:	f53f aefe 	bmi.w	801acba <__ssvfiscanf_r+0x4e>
 801aebe:	9b00      	ldr	r3, [sp, #0]
 801aec0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801aec2:	1d19      	adds	r1, r3, #4
 801aec4:	9100      	str	r1, [sp, #0]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	07c0      	lsls	r0, r0, #31
 801aeca:	bf4c      	ite	mi
 801aecc:	801a      	strhmi	r2, [r3, #0]
 801aece:	601a      	strpl	r2, [r3, #0]
 801aed0:	e6f3      	b.n	801acba <__ssvfiscanf_r+0x4e>
 801aed2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801aed4:	4621      	mov	r1, r4
 801aed6:	4630      	mov	r0, r6
 801aed8:	4798      	blx	r3
 801aeda:	2800      	cmp	r0, #0
 801aedc:	d0bb      	beq.n	801ae56 <__ssvfiscanf_r+0x1ea>
 801aede:	e79d      	b.n	801ae1c <__ssvfiscanf_r+0x1b0>
 801aee0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801aee2:	3201      	adds	r2, #1
 801aee4:	9245      	str	r2, [sp, #276]	; 0x114
 801aee6:	6862      	ldr	r2, [r4, #4]
 801aee8:	3a01      	subs	r2, #1
 801aeea:	2a00      	cmp	r2, #0
 801aeec:	6062      	str	r2, [r4, #4]
 801aeee:	dd02      	ble.n	801aef6 <__ssvfiscanf_r+0x28a>
 801aef0:	3301      	adds	r3, #1
 801aef2:	6023      	str	r3, [r4, #0]
 801aef4:	e7b2      	b.n	801ae5c <__ssvfiscanf_r+0x1f0>
 801aef6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801aef8:	4621      	mov	r1, r4
 801aefa:	4630      	mov	r0, r6
 801aefc:	4798      	blx	r3
 801aefe:	2800      	cmp	r0, #0
 801af00:	d0ac      	beq.n	801ae5c <__ssvfiscanf_r+0x1f0>
 801af02:	e78b      	b.n	801ae1c <__ssvfiscanf_r+0x1b0>
 801af04:	2b04      	cmp	r3, #4
 801af06:	dc0f      	bgt.n	801af28 <__ssvfiscanf_r+0x2bc>
 801af08:	466b      	mov	r3, sp
 801af0a:	4622      	mov	r2, r4
 801af0c:	a941      	add	r1, sp, #260	; 0x104
 801af0e:	4630      	mov	r0, r6
 801af10:	f000 f87e 	bl	801b010 <_scanf_i>
 801af14:	e7b0      	b.n	801ae78 <__ssvfiscanf_r+0x20c>
 801af16:	bf00      	nop
 801af18:	0801abb9 	.word	0x0801abb9
 801af1c:	0801ac33 	.word	0x0801ac33
 801af20:	0801c7b1 	.word	0x0801c7b1
 801af24:	0801c8b7 	.word	0x0801c8b7
 801af28:	4b0b      	ldr	r3, [pc, #44]	; (801af58 <__ssvfiscanf_r+0x2ec>)
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	f43f aec5 	beq.w	801acba <__ssvfiscanf_r+0x4e>
 801af30:	466b      	mov	r3, sp
 801af32:	4622      	mov	r2, r4
 801af34:	a941      	add	r1, sp, #260	; 0x104
 801af36:	4630      	mov	r0, r6
 801af38:	f7fc fefc 	bl	8017d34 <_scanf_float>
 801af3c:	e79c      	b.n	801ae78 <__ssvfiscanf_r+0x20c>
 801af3e:	89a3      	ldrh	r3, [r4, #12]
 801af40:	f013 0f40 	tst.w	r3, #64	; 0x40
 801af44:	bf18      	it	ne
 801af46:	f04f 30ff 	movne.w	r0, #4294967295
 801af4a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801af4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af52:	9844      	ldr	r0, [sp, #272]	; 0x110
 801af54:	e7f9      	b.n	801af4a <__ssvfiscanf_r+0x2de>
 801af56:	bf00      	nop
 801af58:	08017d35 	.word	0x08017d35

0801af5c <_scanf_chars>:
 801af5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801af60:	4615      	mov	r5, r2
 801af62:	688a      	ldr	r2, [r1, #8]
 801af64:	4680      	mov	r8, r0
 801af66:	460c      	mov	r4, r1
 801af68:	b932      	cbnz	r2, 801af78 <_scanf_chars+0x1c>
 801af6a:	698a      	ldr	r2, [r1, #24]
 801af6c:	2a00      	cmp	r2, #0
 801af6e:	bf0c      	ite	eq
 801af70:	2201      	moveq	r2, #1
 801af72:	f04f 32ff 	movne.w	r2, #4294967295
 801af76:	608a      	str	r2, [r1, #8]
 801af78:	6822      	ldr	r2, [r4, #0]
 801af7a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801b00c <_scanf_chars+0xb0>
 801af7e:	06d1      	lsls	r1, r2, #27
 801af80:	bf5f      	itttt	pl
 801af82:	681a      	ldrpl	r2, [r3, #0]
 801af84:	1d11      	addpl	r1, r2, #4
 801af86:	6019      	strpl	r1, [r3, #0]
 801af88:	6816      	ldrpl	r6, [r2, #0]
 801af8a:	2700      	movs	r7, #0
 801af8c:	69a0      	ldr	r0, [r4, #24]
 801af8e:	b188      	cbz	r0, 801afb4 <_scanf_chars+0x58>
 801af90:	2801      	cmp	r0, #1
 801af92:	d107      	bne.n	801afa4 <_scanf_chars+0x48>
 801af94:	682a      	ldr	r2, [r5, #0]
 801af96:	7811      	ldrb	r1, [r2, #0]
 801af98:	6962      	ldr	r2, [r4, #20]
 801af9a:	5c52      	ldrb	r2, [r2, r1]
 801af9c:	b952      	cbnz	r2, 801afb4 <_scanf_chars+0x58>
 801af9e:	2f00      	cmp	r7, #0
 801afa0:	d031      	beq.n	801b006 <_scanf_chars+0xaa>
 801afa2:	e022      	b.n	801afea <_scanf_chars+0x8e>
 801afa4:	2802      	cmp	r0, #2
 801afa6:	d120      	bne.n	801afea <_scanf_chars+0x8e>
 801afa8:	682b      	ldr	r3, [r5, #0]
 801afaa:	781b      	ldrb	r3, [r3, #0]
 801afac:	f819 3003 	ldrb.w	r3, [r9, r3]
 801afb0:	071b      	lsls	r3, r3, #28
 801afb2:	d41a      	bmi.n	801afea <_scanf_chars+0x8e>
 801afb4:	6823      	ldr	r3, [r4, #0]
 801afb6:	06da      	lsls	r2, r3, #27
 801afb8:	bf5e      	ittt	pl
 801afba:	682b      	ldrpl	r3, [r5, #0]
 801afbc:	781b      	ldrbpl	r3, [r3, #0]
 801afbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 801afc2:	682a      	ldr	r2, [r5, #0]
 801afc4:	686b      	ldr	r3, [r5, #4]
 801afc6:	3201      	adds	r2, #1
 801afc8:	602a      	str	r2, [r5, #0]
 801afca:	68a2      	ldr	r2, [r4, #8]
 801afcc:	3b01      	subs	r3, #1
 801afce:	3a01      	subs	r2, #1
 801afd0:	606b      	str	r3, [r5, #4]
 801afd2:	3701      	adds	r7, #1
 801afd4:	60a2      	str	r2, [r4, #8]
 801afd6:	b142      	cbz	r2, 801afea <_scanf_chars+0x8e>
 801afd8:	2b00      	cmp	r3, #0
 801afda:	dcd7      	bgt.n	801af8c <_scanf_chars+0x30>
 801afdc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801afe0:	4629      	mov	r1, r5
 801afe2:	4640      	mov	r0, r8
 801afe4:	4798      	blx	r3
 801afe6:	2800      	cmp	r0, #0
 801afe8:	d0d0      	beq.n	801af8c <_scanf_chars+0x30>
 801afea:	6823      	ldr	r3, [r4, #0]
 801afec:	f013 0310 	ands.w	r3, r3, #16
 801aff0:	d105      	bne.n	801affe <_scanf_chars+0xa2>
 801aff2:	68e2      	ldr	r2, [r4, #12]
 801aff4:	3201      	adds	r2, #1
 801aff6:	60e2      	str	r2, [r4, #12]
 801aff8:	69a2      	ldr	r2, [r4, #24]
 801affa:	b102      	cbz	r2, 801affe <_scanf_chars+0xa2>
 801affc:	7033      	strb	r3, [r6, #0]
 801affe:	6923      	ldr	r3, [r4, #16]
 801b000:	443b      	add	r3, r7
 801b002:	6123      	str	r3, [r4, #16]
 801b004:	2000      	movs	r0, #0
 801b006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b00a:	bf00      	nop
 801b00c:	0801c7b1 	.word	0x0801c7b1

0801b010 <_scanf_i>:
 801b010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b014:	4698      	mov	r8, r3
 801b016:	4b74      	ldr	r3, [pc, #464]	; (801b1e8 <_scanf_i+0x1d8>)
 801b018:	460c      	mov	r4, r1
 801b01a:	4682      	mov	sl, r0
 801b01c:	4616      	mov	r6, r2
 801b01e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b022:	b087      	sub	sp, #28
 801b024:	ab03      	add	r3, sp, #12
 801b026:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b02a:	4b70      	ldr	r3, [pc, #448]	; (801b1ec <_scanf_i+0x1dc>)
 801b02c:	69a1      	ldr	r1, [r4, #24]
 801b02e:	4a70      	ldr	r2, [pc, #448]	; (801b1f0 <_scanf_i+0x1e0>)
 801b030:	2903      	cmp	r1, #3
 801b032:	bf18      	it	ne
 801b034:	461a      	movne	r2, r3
 801b036:	68a3      	ldr	r3, [r4, #8]
 801b038:	9201      	str	r2, [sp, #4]
 801b03a:	1e5a      	subs	r2, r3, #1
 801b03c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b040:	bf88      	it	hi
 801b042:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b046:	4627      	mov	r7, r4
 801b048:	bf82      	ittt	hi
 801b04a:	eb03 0905 	addhi.w	r9, r3, r5
 801b04e:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b052:	60a3      	strhi	r3, [r4, #8]
 801b054:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b058:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b05c:	bf98      	it	ls
 801b05e:	f04f 0900 	movls.w	r9, #0
 801b062:	6023      	str	r3, [r4, #0]
 801b064:	463d      	mov	r5, r7
 801b066:	f04f 0b00 	mov.w	fp, #0
 801b06a:	6831      	ldr	r1, [r6, #0]
 801b06c:	ab03      	add	r3, sp, #12
 801b06e:	7809      	ldrb	r1, [r1, #0]
 801b070:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b074:	2202      	movs	r2, #2
 801b076:	f7e5 f95b 	bl	8000330 <memchr>
 801b07a:	b328      	cbz	r0, 801b0c8 <_scanf_i+0xb8>
 801b07c:	f1bb 0f01 	cmp.w	fp, #1
 801b080:	d159      	bne.n	801b136 <_scanf_i+0x126>
 801b082:	6862      	ldr	r2, [r4, #4]
 801b084:	b92a      	cbnz	r2, 801b092 <_scanf_i+0x82>
 801b086:	6822      	ldr	r2, [r4, #0]
 801b088:	2308      	movs	r3, #8
 801b08a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b08e:	6063      	str	r3, [r4, #4]
 801b090:	6022      	str	r2, [r4, #0]
 801b092:	6822      	ldr	r2, [r4, #0]
 801b094:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b098:	6022      	str	r2, [r4, #0]
 801b09a:	68a2      	ldr	r2, [r4, #8]
 801b09c:	1e51      	subs	r1, r2, #1
 801b09e:	60a1      	str	r1, [r4, #8]
 801b0a0:	b192      	cbz	r2, 801b0c8 <_scanf_i+0xb8>
 801b0a2:	6832      	ldr	r2, [r6, #0]
 801b0a4:	1c51      	adds	r1, r2, #1
 801b0a6:	6031      	str	r1, [r6, #0]
 801b0a8:	7812      	ldrb	r2, [r2, #0]
 801b0aa:	f805 2b01 	strb.w	r2, [r5], #1
 801b0ae:	6872      	ldr	r2, [r6, #4]
 801b0b0:	3a01      	subs	r2, #1
 801b0b2:	2a00      	cmp	r2, #0
 801b0b4:	6072      	str	r2, [r6, #4]
 801b0b6:	dc07      	bgt.n	801b0c8 <_scanf_i+0xb8>
 801b0b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b0bc:	4631      	mov	r1, r6
 801b0be:	4650      	mov	r0, sl
 801b0c0:	4790      	blx	r2
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	f040 8085 	bne.w	801b1d2 <_scanf_i+0x1c2>
 801b0c8:	f10b 0b01 	add.w	fp, fp, #1
 801b0cc:	f1bb 0f03 	cmp.w	fp, #3
 801b0d0:	d1cb      	bne.n	801b06a <_scanf_i+0x5a>
 801b0d2:	6863      	ldr	r3, [r4, #4]
 801b0d4:	b90b      	cbnz	r3, 801b0da <_scanf_i+0xca>
 801b0d6:	230a      	movs	r3, #10
 801b0d8:	6063      	str	r3, [r4, #4]
 801b0da:	6863      	ldr	r3, [r4, #4]
 801b0dc:	4945      	ldr	r1, [pc, #276]	; (801b1f4 <_scanf_i+0x1e4>)
 801b0de:	6960      	ldr	r0, [r4, #20]
 801b0e0:	1ac9      	subs	r1, r1, r3
 801b0e2:	f000 f937 	bl	801b354 <__sccl>
 801b0e6:	f04f 0b00 	mov.w	fp, #0
 801b0ea:	68a3      	ldr	r3, [r4, #8]
 801b0ec:	6822      	ldr	r2, [r4, #0]
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d03d      	beq.n	801b16e <_scanf_i+0x15e>
 801b0f2:	6831      	ldr	r1, [r6, #0]
 801b0f4:	6960      	ldr	r0, [r4, #20]
 801b0f6:	f891 c000 	ldrb.w	ip, [r1]
 801b0fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b0fe:	2800      	cmp	r0, #0
 801b100:	d035      	beq.n	801b16e <_scanf_i+0x15e>
 801b102:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b106:	d124      	bne.n	801b152 <_scanf_i+0x142>
 801b108:	0510      	lsls	r0, r2, #20
 801b10a:	d522      	bpl.n	801b152 <_scanf_i+0x142>
 801b10c:	f10b 0b01 	add.w	fp, fp, #1
 801b110:	f1b9 0f00 	cmp.w	r9, #0
 801b114:	d003      	beq.n	801b11e <_scanf_i+0x10e>
 801b116:	3301      	adds	r3, #1
 801b118:	f109 39ff 	add.w	r9, r9, #4294967295
 801b11c:	60a3      	str	r3, [r4, #8]
 801b11e:	6873      	ldr	r3, [r6, #4]
 801b120:	3b01      	subs	r3, #1
 801b122:	2b00      	cmp	r3, #0
 801b124:	6073      	str	r3, [r6, #4]
 801b126:	dd1b      	ble.n	801b160 <_scanf_i+0x150>
 801b128:	6833      	ldr	r3, [r6, #0]
 801b12a:	3301      	adds	r3, #1
 801b12c:	6033      	str	r3, [r6, #0]
 801b12e:	68a3      	ldr	r3, [r4, #8]
 801b130:	3b01      	subs	r3, #1
 801b132:	60a3      	str	r3, [r4, #8]
 801b134:	e7d9      	b.n	801b0ea <_scanf_i+0xda>
 801b136:	f1bb 0f02 	cmp.w	fp, #2
 801b13a:	d1ae      	bne.n	801b09a <_scanf_i+0x8a>
 801b13c:	6822      	ldr	r2, [r4, #0]
 801b13e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b142:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b146:	d1bf      	bne.n	801b0c8 <_scanf_i+0xb8>
 801b148:	2310      	movs	r3, #16
 801b14a:	6063      	str	r3, [r4, #4]
 801b14c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b150:	e7a2      	b.n	801b098 <_scanf_i+0x88>
 801b152:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b156:	6022      	str	r2, [r4, #0]
 801b158:	780b      	ldrb	r3, [r1, #0]
 801b15a:	f805 3b01 	strb.w	r3, [r5], #1
 801b15e:	e7de      	b.n	801b11e <_scanf_i+0x10e>
 801b160:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b164:	4631      	mov	r1, r6
 801b166:	4650      	mov	r0, sl
 801b168:	4798      	blx	r3
 801b16a:	2800      	cmp	r0, #0
 801b16c:	d0df      	beq.n	801b12e <_scanf_i+0x11e>
 801b16e:	6823      	ldr	r3, [r4, #0]
 801b170:	05d9      	lsls	r1, r3, #23
 801b172:	d50d      	bpl.n	801b190 <_scanf_i+0x180>
 801b174:	42bd      	cmp	r5, r7
 801b176:	d909      	bls.n	801b18c <_scanf_i+0x17c>
 801b178:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b17c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b180:	4632      	mov	r2, r6
 801b182:	4650      	mov	r0, sl
 801b184:	4798      	blx	r3
 801b186:	f105 39ff 	add.w	r9, r5, #4294967295
 801b18a:	464d      	mov	r5, r9
 801b18c:	42bd      	cmp	r5, r7
 801b18e:	d028      	beq.n	801b1e2 <_scanf_i+0x1d2>
 801b190:	6822      	ldr	r2, [r4, #0]
 801b192:	f012 0210 	ands.w	r2, r2, #16
 801b196:	d113      	bne.n	801b1c0 <_scanf_i+0x1b0>
 801b198:	702a      	strb	r2, [r5, #0]
 801b19a:	6863      	ldr	r3, [r4, #4]
 801b19c:	9e01      	ldr	r6, [sp, #4]
 801b19e:	4639      	mov	r1, r7
 801b1a0:	4650      	mov	r0, sl
 801b1a2:	47b0      	blx	r6
 801b1a4:	f8d8 3000 	ldr.w	r3, [r8]
 801b1a8:	6821      	ldr	r1, [r4, #0]
 801b1aa:	1d1a      	adds	r2, r3, #4
 801b1ac:	f8c8 2000 	str.w	r2, [r8]
 801b1b0:	f011 0f20 	tst.w	r1, #32
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	d00f      	beq.n	801b1d8 <_scanf_i+0x1c8>
 801b1b8:	6018      	str	r0, [r3, #0]
 801b1ba:	68e3      	ldr	r3, [r4, #12]
 801b1bc:	3301      	adds	r3, #1
 801b1be:	60e3      	str	r3, [r4, #12]
 801b1c0:	6923      	ldr	r3, [r4, #16]
 801b1c2:	1bed      	subs	r5, r5, r7
 801b1c4:	445d      	add	r5, fp
 801b1c6:	442b      	add	r3, r5
 801b1c8:	6123      	str	r3, [r4, #16]
 801b1ca:	2000      	movs	r0, #0
 801b1cc:	b007      	add	sp, #28
 801b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1d2:	f04f 0b00 	mov.w	fp, #0
 801b1d6:	e7ca      	b.n	801b16e <_scanf_i+0x15e>
 801b1d8:	07ca      	lsls	r2, r1, #31
 801b1da:	bf4c      	ite	mi
 801b1dc:	8018      	strhmi	r0, [r3, #0]
 801b1de:	6018      	strpl	r0, [r3, #0]
 801b1e0:	e7eb      	b.n	801b1ba <_scanf_i+0x1aa>
 801b1e2:	2001      	movs	r0, #1
 801b1e4:	e7f2      	b.n	801b1cc <_scanf_i+0x1bc>
 801b1e6:	bf00      	nop
 801b1e8:	0801c46c 	.word	0x0801c46c
 801b1ec:	0801bd45 	.word	0x0801bd45
 801b1f0:	0801a905 	.word	0x0801a905
 801b1f4:	0801c8d2 	.word	0x0801c8d2

0801b1f8 <__sflush_r>:
 801b1f8:	898a      	ldrh	r2, [r1, #12]
 801b1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1fe:	4605      	mov	r5, r0
 801b200:	0710      	lsls	r0, r2, #28
 801b202:	460c      	mov	r4, r1
 801b204:	d458      	bmi.n	801b2b8 <__sflush_r+0xc0>
 801b206:	684b      	ldr	r3, [r1, #4]
 801b208:	2b00      	cmp	r3, #0
 801b20a:	dc05      	bgt.n	801b218 <__sflush_r+0x20>
 801b20c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b20e:	2b00      	cmp	r3, #0
 801b210:	dc02      	bgt.n	801b218 <__sflush_r+0x20>
 801b212:	2000      	movs	r0, #0
 801b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b21a:	2e00      	cmp	r6, #0
 801b21c:	d0f9      	beq.n	801b212 <__sflush_r+0x1a>
 801b21e:	2300      	movs	r3, #0
 801b220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b224:	682f      	ldr	r7, [r5, #0]
 801b226:	6a21      	ldr	r1, [r4, #32]
 801b228:	602b      	str	r3, [r5, #0]
 801b22a:	d032      	beq.n	801b292 <__sflush_r+0x9a>
 801b22c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b22e:	89a3      	ldrh	r3, [r4, #12]
 801b230:	075a      	lsls	r2, r3, #29
 801b232:	d505      	bpl.n	801b240 <__sflush_r+0x48>
 801b234:	6863      	ldr	r3, [r4, #4]
 801b236:	1ac0      	subs	r0, r0, r3
 801b238:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b23a:	b10b      	cbz	r3, 801b240 <__sflush_r+0x48>
 801b23c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b23e:	1ac0      	subs	r0, r0, r3
 801b240:	2300      	movs	r3, #0
 801b242:	4602      	mov	r2, r0
 801b244:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b246:	6a21      	ldr	r1, [r4, #32]
 801b248:	4628      	mov	r0, r5
 801b24a:	47b0      	blx	r6
 801b24c:	1c43      	adds	r3, r0, #1
 801b24e:	89a3      	ldrh	r3, [r4, #12]
 801b250:	d106      	bne.n	801b260 <__sflush_r+0x68>
 801b252:	6829      	ldr	r1, [r5, #0]
 801b254:	291d      	cmp	r1, #29
 801b256:	d82b      	bhi.n	801b2b0 <__sflush_r+0xb8>
 801b258:	4a29      	ldr	r2, [pc, #164]	; (801b300 <__sflush_r+0x108>)
 801b25a:	410a      	asrs	r2, r1
 801b25c:	07d6      	lsls	r6, r2, #31
 801b25e:	d427      	bmi.n	801b2b0 <__sflush_r+0xb8>
 801b260:	2200      	movs	r2, #0
 801b262:	6062      	str	r2, [r4, #4]
 801b264:	04d9      	lsls	r1, r3, #19
 801b266:	6922      	ldr	r2, [r4, #16]
 801b268:	6022      	str	r2, [r4, #0]
 801b26a:	d504      	bpl.n	801b276 <__sflush_r+0x7e>
 801b26c:	1c42      	adds	r2, r0, #1
 801b26e:	d101      	bne.n	801b274 <__sflush_r+0x7c>
 801b270:	682b      	ldr	r3, [r5, #0]
 801b272:	b903      	cbnz	r3, 801b276 <__sflush_r+0x7e>
 801b274:	6560      	str	r0, [r4, #84]	; 0x54
 801b276:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b278:	602f      	str	r7, [r5, #0]
 801b27a:	2900      	cmp	r1, #0
 801b27c:	d0c9      	beq.n	801b212 <__sflush_r+0x1a>
 801b27e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b282:	4299      	cmp	r1, r3
 801b284:	d002      	beq.n	801b28c <__sflush_r+0x94>
 801b286:	4628      	mov	r0, r5
 801b288:	f7fd ff3e 	bl	8019108 <_free_r>
 801b28c:	2000      	movs	r0, #0
 801b28e:	6360      	str	r0, [r4, #52]	; 0x34
 801b290:	e7c0      	b.n	801b214 <__sflush_r+0x1c>
 801b292:	2301      	movs	r3, #1
 801b294:	4628      	mov	r0, r5
 801b296:	47b0      	blx	r6
 801b298:	1c41      	adds	r1, r0, #1
 801b29a:	d1c8      	bne.n	801b22e <__sflush_r+0x36>
 801b29c:	682b      	ldr	r3, [r5, #0]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d0c5      	beq.n	801b22e <__sflush_r+0x36>
 801b2a2:	2b1d      	cmp	r3, #29
 801b2a4:	d001      	beq.n	801b2aa <__sflush_r+0xb2>
 801b2a6:	2b16      	cmp	r3, #22
 801b2a8:	d101      	bne.n	801b2ae <__sflush_r+0xb6>
 801b2aa:	602f      	str	r7, [r5, #0]
 801b2ac:	e7b1      	b.n	801b212 <__sflush_r+0x1a>
 801b2ae:	89a3      	ldrh	r3, [r4, #12]
 801b2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2b4:	81a3      	strh	r3, [r4, #12]
 801b2b6:	e7ad      	b.n	801b214 <__sflush_r+0x1c>
 801b2b8:	690f      	ldr	r7, [r1, #16]
 801b2ba:	2f00      	cmp	r7, #0
 801b2bc:	d0a9      	beq.n	801b212 <__sflush_r+0x1a>
 801b2be:	0793      	lsls	r3, r2, #30
 801b2c0:	680e      	ldr	r6, [r1, #0]
 801b2c2:	bf08      	it	eq
 801b2c4:	694b      	ldreq	r3, [r1, #20]
 801b2c6:	600f      	str	r7, [r1, #0]
 801b2c8:	bf18      	it	ne
 801b2ca:	2300      	movne	r3, #0
 801b2cc:	eba6 0807 	sub.w	r8, r6, r7
 801b2d0:	608b      	str	r3, [r1, #8]
 801b2d2:	f1b8 0f00 	cmp.w	r8, #0
 801b2d6:	dd9c      	ble.n	801b212 <__sflush_r+0x1a>
 801b2d8:	6a21      	ldr	r1, [r4, #32]
 801b2da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b2dc:	4643      	mov	r3, r8
 801b2de:	463a      	mov	r2, r7
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	47b0      	blx	r6
 801b2e4:	2800      	cmp	r0, #0
 801b2e6:	dc06      	bgt.n	801b2f6 <__sflush_r+0xfe>
 801b2e8:	89a3      	ldrh	r3, [r4, #12]
 801b2ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b2ee:	81a3      	strh	r3, [r4, #12]
 801b2f0:	f04f 30ff 	mov.w	r0, #4294967295
 801b2f4:	e78e      	b.n	801b214 <__sflush_r+0x1c>
 801b2f6:	4407      	add	r7, r0
 801b2f8:	eba8 0800 	sub.w	r8, r8, r0
 801b2fc:	e7e9      	b.n	801b2d2 <__sflush_r+0xda>
 801b2fe:	bf00      	nop
 801b300:	dfbffffe 	.word	0xdfbffffe

0801b304 <_fflush_r>:
 801b304:	b538      	push	{r3, r4, r5, lr}
 801b306:	690b      	ldr	r3, [r1, #16]
 801b308:	4605      	mov	r5, r0
 801b30a:	460c      	mov	r4, r1
 801b30c:	b913      	cbnz	r3, 801b314 <_fflush_r+0x10>
 801b30e:	2500      	movs	r5, #0
 801b310:	4628      	mov	r0, r5
 801b312:	bd38      	pop	{r3, r4, r5, pc}
 801b314:	b118      	cbz	r0, 801b31e <_fflush_r+0x1a>
 801b316:	6a03      	ldr	r3, [r0, #32]
 801b318:	b90b      	cbnz	r3, 801b31e <_fflush_r+0x1a>
 801b31a:	f7fc ff9b 	bl	8018254 <__sinit>
 801b31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d0f3      	beq.n	801b30e <_fflush_r+0xa>
 801b326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b328:	07d0      	lsls	r0, r2, #31
 801b32a:	d404      	bmi.n	801b336 <_fflush_r+0x32>
 801b32c:	0599      	lsls	r1, r3, #22
 801b32e:	d402      	bmi.n	801b336 <_fflush_r+0x32>
 801b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b332:	f7fd f8d4 	bl	80184de <__retarget_lock_acquire_recursive>
 801b336:	4628      	mov	r0, r5
 801b338:	4621      	mov	r1, r4
 801b33a:	f7ff ff5d 	bl	801b1f8 <__sflush_r>
 801b33e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b340:	07da      	lsls	r2, r3, #31
 801b342:	4605      	mov	r5, r0
 801b344:	d4e4      	bmi.n	801b310 <_fflush_r+0xc>
 801b346:	89a3      	ldrh	r3, [r4, #12]
 801b348:	059b      	lsls	r3, r3, #22
 801b34a:	d4e1      	bmi.n	801b310 <_fflush_r+0xc>
 801b34c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b34e:	f7fd f8c7 	bl	80184e0 <__retarget_lock_release_recursive>
 801b352:	e7dd      	b.n	801b310 <_fflush_r+0xc>

0801b354 <__sccl>:
 801b354:	b570      	push	{r4, r5, r6, lr}
 801b356:	780b      	ldrb	r3, [r1, #0]
 801b358:	4604      	mov	r4, r0
 801b35a:	2b5e      	cmp	r3, #94	; 0x5e
 801b35c:	bf0b      	itete	eq
 801b35e:	784b      	ldrbeq	r3, [r1, #1]
 801b360:	1c4a      	addne	r2, r1, #1
 801b362:	1c8a      	addeq	r2, r1, #2
 801b364:	2100      	movne	r1, #0
 801b366:	bf08      	it	eq
 801b368:	2101      	moveq	r1, #1
 801b36a:	3801      	subs	r0, #1
 801b36c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b370:	f800 1f01 	strb.w	r1, [r0, #1]!
 801b374:	42a8      	cmp	r0, r5
 801b376:	d1fb      	bne.n	801b370 <__sccl+0x1c>
 801b378:	b90b      	cbnz	r3, 801b37e <__sccl+0x2a>
 801b37a:	1e50      	subs	r0, r2, #1
 801b37c:	bd70      	pop	{r4, r5, r6, pc}
 801b37e:	f081 0101 	eor.w	r1, r1, #1
 801b382:	54e1      	strb	r1, [r4, r3]
 801b384:	4610      	mov	r0, r2
 801b386:	4602      	mov	r2, r0
 801b388:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b38c:	2d2d      	cmp	r5, #45	; 0x2d
 801b38e:	d005      	beq.n	801b39c <__sccl+0x48>
 801b390:	2d5d      	cmp	r5, #93	; 0x5d
 801b392:	d016      	beq.n	801b3c2 <__sccl+0x6e>
 801b394:	2d00      	cmp	r5, #0
 801b396:	d0f1      	beq.n	801b37c <__sccl+0x28>
 801b398:	462b      	mov	r3, r5
 801b39a:	e7f2      	b.n	801b382 <__sccl+0x2e>
 801b39c:	7846      	ldrb	r6, [r0, #1]
 801b39e:	2e5d      	cmp	r6, #93	; 0x5d
 801b3a0:	d0fa      	beq.n	801b398 <__sccl+0x44>
 801b3a2:	42b3      	cmp	r3, r6
 801b3a4:	dcf8      	bgt.n	801b398 <__sccl+0x44>
 801b3a6:	3002      	adds	r0, #2
 801b3a8:	461a      	mov	r2, r3
 801b3aa:	3201      	adds	r2, #1
 801b3ac:	4296      	cmp	r6, r2
 801b3ae:	54a1      	strb	r1, [r4, r2]
 801b3b0:	dcfb      	bgt.n	801b3aa <__sccl+0x56>
 801b3b2:	1af2      	subs	r2, r6, r3
 801b3b4:	3a01      	subs	r2, #1
 801b3b6:	1c5d      	adds	r5, r3, #1
 801b3b8:	42b3      	cmp	r3, r6
 801b3ba:	bfa8      	it	ge
 801b3bc:	2200      	movge	r2, #0
 801b3be:	18ab      	adds	r3, r5, r2
 801b3c0:	e7e1      	b.n	801b386 <__sccl+0x32>
 801b3c2:	4610      	mov	r0, r2
 801b3c4:	e7da      	b.n	801b37c <__sccl+0x28>

0801b3c6 <__submore>:
 801b3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3ca:	460c      	mov	r4, r1
 801b3cc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b3ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3d2:	4299      	cmp	r1, r3
 801b3d4:	d11d      	bne.n	801b412 <__submore+0x4c>
 801b3d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b3da:	f7fd ff09 	bl	80191f0 <_malloc_r>
 801b3de:	b918      	cbnz	r0, 801b3e8 <__submore+0x22>
 801b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b3e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b3e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b3ec:	63a3      	str	r3, [r4, #56]	; 0x38
 801b3ee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b3f2:	6360      	str	r0, [r4, #52]	; 0x34
 801b3f4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b3f8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b3fc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b400:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b404:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b408:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b40c:	6020      	str	r0, [r4, #0]
 801b40e:	2000      	movs	r0, #0
 801b410:	e7e8      	b.n	801b3e4 <__submore+0x1e>
 801b412:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b414:	0077      	lsls	r7, r6, #1
 801b416:	463a      	mov	r2, r7
 801b418:	f000 fbf3 	bl	801bc02 <_realloc_r>
 801b41c:	4605      	mov	r5, r0
 801b41e:	2800      	cmp	r0, #0
 801b420:	d0de      	beq.n	801b3e0 <__submore+0x1a>
 801b422:	eb00 0806 	add.w	r8, r0, r6
 801b426:	4601      	mov	r1, r0
 801b428:	4632      	mov	r2, r6
 801b42a:	4640      	mov	r0, r8
 801b42c:	f7fd f861 	bl	80184f2 <memcpy>
 801b430:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b434:	f8c4 8000 	str.w	r8, [r4]
 801b438:	e7e9      	b.n	801b40e <__submore+0x48>

0801b43a <memmove>:
 801b43a:	4288      	cmp	r0, r1
 801b43c:	b510      	push	{r4, lr}
 801b43e:	eb01 0402 	add.w	r4, r1, r2
 801b442:	d902      	bls.n	801b44a <memmove+0x10>
 801b444:	4284      	cmp	r4, r0
 801b446:	4623      	mov	r3, r4
 801b448:	d807      	bhi.n	801b45a <memmove+0x20>
 801b44a:	1e43      	subs	r3, r0, #1
 801b44c:	42a1      	cmp	r1, r4
 801b44e:	d008      	beq.n	801b462 <memmove+0x28>
 801b450:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b454:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b458:	e7f8      	b.n	801b44c <memmove+0x12>
 801b45a:	4402      	add	r2, r0
 801b45c:	4601      	mov	r1, r0
 801b45e:	428a      	cmp	r2, r1
 801b460:	d100      	bne.n	801b464 <memmove+0x2a>
 801b462:	bd10      	pop	{r4, pc}
 801b464:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b468:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b46c:	e7f7      	b.n	801b45e <memmove+0x24>

0801b46e <strncmp>:
 801b46e:	b510      	push	{r4, lr}
 801b470:	b16a      	cbz	r2, 801b48e <strncmp+0x20>
 801b472:	3901      	subs	r1, #1
 801b474:	1884      	adds	r4, r0, r2
 801b476:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b47a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b47e:	429a      	cmp	r2, r3
 801b480:	d103      	bne.n	801b48a <strncmp+0x1c>
 801b482:	42a0      	cmp	r0, r4
 801b484:	d001      	beq.n	801b48a <strncmp+0x1c>
 801b486:	2a00      	cmp	r2, #0
 801b488:	d1f5      	bne.n	801b476 <strncmp+0x8>
 801b48a:	1ad0      	subs	r0, r2, r3
 801b48c:	bd10      	pop	{r4, pc}
 801b48e:	4610      	mov	r0, r2
 801b490:	e7fc      	b.n	801b48c <strncmp+0x1e>
	...

0801b494 <_sbrk_r>:
 801b494:	b538      	push	{r3, r4, r5, lr}
 801b496:	4d06      	ldr	r5, [pc, #24]	; (801b4b0 <_sbrk_r+0x1c>)
 801b498:	2300      	movs	r3, #0
 801b49a:	4604      	mov	r4, r0
 801b49c:	4608      	mov	r0, r1
 801b49e:	602b      	str	r3, [r5, #0]
 801b4a0:	f7e8 fbaa 	bl	8003bf8 <_sbrk>
 801b4a4:	1c43      	adds	r3, r0, #1
 801b4a6:	d102      	bne.n	801b4ae <_sbrk_r+0x1a>
 801b4a8:	682b      	ldr	r3, [r5, #0]
 801b4aa:	b103      	cbz	r3, 801b4ae <_sbrk_r+0x1a>
 801b4ac:	6023      	str	r3, [r4, #0]
 801b4ae:	bd38      	pop	{r3, r4, r5, pc}
 801b4b0:	240034b0 	.word	0x240034b0
 801b4b4:	00000000 	.word	0x00000000

0801b4b8 <nan>:
 801b4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801b4c0 <nan+0x8>
 801b4bc:	4770      	bx	lr
 801b4be:	bf00      	nop
 801b4c0:	00000000 	.word	0x00000000
 801b4c4:	7ff80000 	.word	0x7ff80000

0801b4c8 <__assert_func>:
 801b4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b4ca:	4614      	mov	r4, r2
 801b4cc:	461a      	mov	r2, r3
 801b4ce:	4b09      	ldr	r3, [pc, #36]	; (801b4f4 <__assert_func+0x2c>)
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	4605      	mov	r5, r0
 801b4d4:	68d8      	ldr	r0, [r3, #12]
 801b4d6:	b14c      	cbz	r4, 801b4ec <__assert_func+0x24>
 801b4d8:	4b07      	ldr	r3, [pc, #28]	; (801b4f8 <__assert_func+0x30>)
 801b4da:	9100      	str	r1, [sp, #0]
 801b4dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b4e0:	4906      	ldr	r1, [pc, #24]	; (801b4fc <__assert_func+0x34>)
 801b4e2:	462b      	mov	r3, r5
 801b4e4:	f000 fc3e 	bl	801bd64 <fiprintf>
 801b4e8:	f000 fc4e 	bl	801bd88 <abort>
 801b4ec:	4b04      	ldr	r3, [pc, #16]	; (801b500 <__assert_func+0x38>)
 801b4ee:	461c      	mov	r4, r3
 801b4f0:	e7f3      	b.n	801b4da <__assert_func+0x12>
 801b4f2:	bf00      	nop
 801b4f4:	24000158 	.word	0x24000158
 801b4f8:	0801c8e5 	.word	0x0801c8e5
 801b4fc:	0801c8f2 	.word	0x0801c8f2
 801b500:	0801c920 	.word	0x0801c920

0801b504 <_calloc_r>:
 801b504:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b506:	fba1 2402 	umull	r2, r4, r1, r2
 801b50a:	b94c      	cbnz	r4, 801b520 <_calloc_r+0x1c>
 801b50c:	4611      	mov	r1, r2
 801b50e:	9201      	str	r2, [sp, #4]
 801b510:	f7fd fe6e 	bl	80191f0 <_malloc_r>
 801b514:	9a01      	ldr	r2, [sp, #4]
 801b516:	4605      	mov	r5, r0
 801b518:	b930      	cbnz	r0, 801b528 <_calloc_r+0x24>
 801b51a:	4628      	mov	r0, r5
 801b51c:	b003      	add	sp, #12
 801b51e:	bd30      	pop	{r4, r5, pc}
 801b520:	220c      	movs	r2, #12
 801b522:	6002      	str	r2, [r0, #0]
 801b524:	2500      	movs	r5, #0
 801b526:	e7f8      	b.n	801b51a <_calloc_r+0x16>
 801b528:	4621      	mov	r1, r4
 801b52a:	f7fc ff5a 	bl	80183e2 <memset>
 801b52e:	e7f4      	b.n	801b51a <_calloc_r+0x16>

0801b530 <rshift>:
 801b530:	6903      	ldr	r3, [r0, #16]
 801b532:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b53a:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b53e:	f100 0414 	add.w	r4, r0, #20
 801b542:	dd45      	ble.n	801b5d0 <rshift+0xa0>
 801b544:	f011 011f 	ands.w	r1, r1, #31
 801b548:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b54c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b550:	d10c      	bne.n	801b56c <rshift+0x3c>
 801b552:	f100 0710 	add.w	r7, r0, #16
 801b556:	4629      	mov	r1, r5
 801b558:	42b1      	cmp	r1, r6
 801b55a:	d334      	bcc.n	801b5c6 <rshift+0x96>
 801b55c:	1a9b      	subs	r3, r3, r2
 801b55e:	009b      	lsls	r3, r3, #2
 801b560:	1eea      	subs	r2, r5, #3
 801b562:	4296      	cmp	r6, r2
 801b564:	bf38      	it	cc
 801b566:	2300      	movcc	r3, #0
 801b568:	4423      	add	r3, r4
 801b56a:	e015      	b.n	801b598 <rshift+0x68>
 801b56c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b570:	f1c1 0820 	rsb	r8, r1, #32
 801b574:	40cf      	lsrs	r7, r1
 801b576:	f105 0e04 	add.w	lr, r5, #4
 801b57a:	46a1      	mov	r9, r4
 801b57c:	4576      	cmp	r6, lr
 801b57e:	46f4      	mov	ip, lr
 801b580:	d815      	bhi.n	801b5ae <rshift+0x7e>
 801b582:	1a9a      	subs	r2, r3, r2
 801b584:	0092      	lsls	r2, r2, #2
 801b586:	3a04      	subs	r2, #4
 801b588:	3501      	adds	r5, #1
 801b58a:	42ae      	cmp	r6, r5
 801b58c:	bf38      	it	cc
 801b58e:	2200      	movcc	r2, #0
 801b590:	18a3      	adds	r3, r4, r2
 801b592:	50a7      	str	r7, [r4, r2]
 801b594:	b107      	cbz	r7, 801b598 <rshift+0x68>
 801b596:	3304      	adds	r3, #4
 801b598:	1b1a      	subs	r2, r3, r4
 801b59a:	42a3      	cmp	r3, r4
 801b59c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b5a0:	bf08      	it	eq
 801b5a2:	2300      	moveq	r3, #0
 801b5a4:	6102      	str	r2, [r0, #16]
 801b5a6:	bf08      	it	eq
 801b5a8:	6143      	streq	r3, [r0, #20]
 801b5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b5ae:	f8dc c000 	ldr.w	ip, [ip]
 801b5b2:	fa0c fc08 	lsl.w	ip, ip, r8
 801b5b6:	ea4c 0707 	orr.w	r7, ip, r7
 801b5ba:	f849 7b04 	str.w	r7, [r9], #4
 801b5be:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b5c2:	40cf      	lsrs	r7, r1
 801b5c4:	e7da      	b.n	801b57c <rshift+0x4c>
 801b5c6:	f851 cb04 	ldr.w	ip, [r1], #4
 801b5ca:	f847 cf04 	str.w	ip, [r7, #4]!
 801b5ce:	e7c3      	b.n	801b558 <rshift+0x28>
 801b5d0:	4623      	mov	r3, r4
 801b5d2:	e7e1      	b.n	801b598 <rshift+0x68>

0801b5d4 <__hexdig_fun>:
 801b5d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b5d8:	2b09      	cmp	r3, #9
 801b5da:	d802      	bhi.n	801b5e2 <__hexdig_fun+0xe>
 801b5dc:	3820      	subs	r0, #32
 801b5de:	b2c0      	uxtb	r0, r0
 801b5e0:	4770      	bx	lr
 801b5e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b5e6:	2b05      	cmp	r3, #5
 801b5e8:	d801      	bhi.n	801b5ee <__hexdig_fun+0x1a>
 801b5ea:	3847      	subs	r0, #71	; 0x47
 801b5ec:	e7f7      	b.n	801b5de <__hexdig_fun+0xa>
 801b5ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b5f2:	2b05      	cmp	r3, #5
 801b5f4:	d801      	bhi.n	801b5fa <__hexdig_fun+0x26>
 801b5f6:	3827      	subs	r0, #39	; 0x27
 801b5f8:	e7f1      	b.n	801b5de <__hexdig_fun+0xa>
 801b5fa:	2000      	movs	r0, #0
 801b5fc:	4770      	bx	lr
	...

0801b600 <__gethex>:
 801b600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b604:	4617      	mov	r7, r2
 801b606:	680a      	ldr	r2, [r1, #0]
 801b608:	b085      	sub	sp, #20
 801b60a:	f102 0b02 	add.w	fp, r2, #2
 801b60e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b612:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b616:	4681      	mov	r9, r0
 801b618:	468a      	mov	sl, r1
 801b61a:	9302      	str	r3, [sp, #8]
 801b61c:	32fe      	adds	r2, #254	; 0xfe
 801b61e:	eb02 030b 	add.w	r3, r2, fp
 801b622:	46d8      	mov	r8, fp
 801b624:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801b628:	9301      	str	r3, [sp, #4]
 801b62a:	2830      	cmp	r0, #48	; 0x30
 801b62c:	d0f7      	beq.n	801b61e <__gethex+0x1e>
 801b62e:	f7ff ffd1 	bl	801b5d4 <__hexdig_fun>
 801b632:	4604      	mov	r4, r0
 801b634:	2800      	cmp	r0, #0
 801b636:	d138      	bne.n	801b6aa <__gethex+0xaa>
 801b638:	49a7      	ldr	r1, [pc, #668]	; (801b8d8 <__gethex+0x2d8>)
 801b63a:	2201      	movs	r2, #1
 801b63c:	4640      	mov	r0, r8
 801b63e:	f7ff ff16 	bl	801b46e <strncmp>
 801b642:	4606      	mov	r6, r0
 801b644:	2800      	cmp	r0, #0
 801b646:	d169      	bne.n	801b71c <__gethex+0x11c>
 801b648:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b64c:	465d      	mov	r5, fp
 801b64e:	f7ff ffc1 	bl	801b5d4 <__hexdig_fun>
 801b652:	2800      	cmp	r0, #0
 801b654:	d064      	beq.n	801b720 <__gethex+0x120>
 801b656:	465a      	mov	r2, fp
 801b658:	7810      	ldrb	r0, [r2, #0]
 801b65a:	2830      	cmp	r0, #48	; 0x30
 801b65c:	4690      	mov	r8, r2
 801b65e:	f102 0201 	add.w	r2, r2, #1
 801b662:	d0f9      	beq.n	801b658 <__gethex+0x58>
 801b664:	f7ff ffb6 	bl	801b5d4 <__hexdig_fun>
 801b668:	2301      	movs	r3, #1
 801b66a:	fab0 f480 	clz	r4, r0
 801b66e:	0964      	lsrs	r4, r4, #5
 801b670:	465e      	mov	r6, fp
 801b672:	9301      	str	r3, [sp, #4]
 801b674:	4642      	mov	r2, r8
 801b676:	4615      	mov	r5, r2
 801b678:	3201      	adds	r2, #1
 801b67a:	7828      	ldrb	r0, [r5, #0]
 801b67c:	f7ff ffaa 	bl	801b5d4 <__hexdig_fun>
 801b680:	2800      	cmp	r0, #0
 801b682:	d1f8      	bne.n	801b676 <__gethex+0x76>
 801b684:	4994      	ldr	r1, [pc, #592]	; (801b8d8 <__gethex+0x2d8>)
 801b686:	2201      	movs	r2, #1
 801b688:	4628      	mov	r0, r5
 801b68a:	f7ff fef0 	bl	801b46e <strncmp>
 801b68e:	b978      	cbnz	r0, 801b6b0 <__gethex+0xb0>
 801b690:	b946      	cbnz	r6, 801b6a4 <__gethex+0xa4>
 801b692:	1c6e      	adds	r6, r5, #1
 801b694:	4632      	mov	r2, r6
 801b696:	4615      	mov	r5, r2
 801b698:	3201      	adds	r2, #1
 801b69a:	7828      	ldrb	r0, [r5, #0]
 801b69c:	f7ff ff9a 	bl	801b5d4 <__hexdig_fun>
 801b6a0:	2800      	cmp	r0, #0
 801b6a2:	d1f8      	bne.n	801b696 <__gethex+0x96>
 801b6a4:	1b73      	subs	r3, r6, r5
 801b6a6:	009e      	lsls	r6, r3, #2
 801b6a8:	e004      	b.n	801b6b4 <__gethex+0xb4>
 801b6aa:	2400      	movs	r4, #0
 801b6ac:	4626      	mov	r6, r4
 801b6ae:	e7e1      	b.n	801b674 <__gethex+0x74>
 801b6b0:	2e00      	cmp	r6, #0
 801b6b2:	d1f7      	bne.n	801b6a4 <__gethex+0xa4>
 801b6b4:	782b      	ldrb	r3, [r5, #0]
 801b6b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b6ba:	2b50      	cmp	r3, #80	; 0x50
 801b6bc:	d13d      	bne.n	801b73a <__gethex+0x13a>
 801b6be:	786b      	ldrb	r3, [r5, #1]
 801b6c0:	2b2b      	cmp	r3, #43	; 0x2b
 801b6c2:	d02f      	beq.n	801b724 <__gethex+0x124>
 801b6c4:	2b2d      	cmp	r3, #45	; 0x2d
 801b6c6:	d031      	beq.n	801b72c <__gethex+0x12c>
 801b6c8:	1c69      	adds	r1, r5, #1
 801b6ca:	f04f 0b00 	mov.w	fp, #0
 801b6ce:	7808      	ldrb	r0, [r1, #0]
 801b6d0:	f7ff ff80 	bl	801b5d4 <__hexdig_fun>
 801b6d4:	1e42      	subs	r2, r0, #1
 801b6d6:	b2d2      	uxtb	r2, r2
 801b6d8:	2a18      	cmp	r2, #24
 801b6da:	d82e      	bhi.n	801b73a <__gethex+0x13a>
 801b6dc:	f1a0 0210 	sub.w	r2, r0, #16
 801b6e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b6e4:	f7ff ff76 	bl	801b5d4 <__hexdig_fun>
 801b6e8:	f100 3cff 	add.w	ip, r0, #4294967295
 801b6ec:	fa5f fc8c 	uxtb.w	ip, ip
 801b6f0:	f1bc 0f18 	cmp.w	ip, #24
 801b6f4:	d91d      	bls.n	801b732 <__gethex+0x132>
 801b6f6:	f1bb 0f00 	cmp.w	fp, #0
 801b6fa:	d000      	beq.n	801b6fe <__gethex+0xfe>
 801b6fc:	4252      	negs	r2, r2
 801b6fe:	4416      	add	r6, r2
 801b700:	f8ca 1000 	str.w	r1, [sl]
 801b704:	b1dc      	cbz	r4, 801b73e <__gethex+0x13e>
 801b706:	9b01      	ldr	r3, [sp, #4]
 801b708:	2b00      	cmp	r3, #0
 801b70a:	bf14      	ite	ne
 801b70c:	f04f 0800 	movne.w	r8, #0
 801b710:	f04f 0806 	moveq.w	r8, #6
 801b714:	4640      	mov	r0, r8
 801b716:	b005      	add	sp, #20
 801b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b71c:	4645      	mov	r5, r8
 801b71e:	4626      	mov	r6, r4
 801b720:	2401      	movs	r4, #1
 801b722:	e7c7      	b.n	801b6b4 <__gethex+0xb4>
 801b724:	f04f 0b00 	mov.w	fp, #0
 801b728:	1ca9      	adds	r1, r5, #2
 801b72a:	e7d0      	b.n	801b6ce <__gethex+0xce>
 801b72c:	f04f 0b01 	mov.w	fp, #1
 801b730:	e7fa      	b.n	801b728 <__gethex+0x128>
 801b732:	230a      	movs	r3, #10
 801b734:	fb03 0002 	mla	r0, r3, r2, r0
 801b738:	e7d0      	b.n	801b6dc <__gethex+0xdc>
 801b73a:	4629      	mov	r1, r5
 801b73c:	e7e0      	b.n	801b700 <__gethex+0x100>
 801b73e:	eba5 0308 	sub.w	r3, r5, r8
 801b742:	3b01      	subs	r3, #1
 801b744:	4621      	mov	r1, r4
 801b746:	2b07      	cmp	r3, #7
 801b748:	dc0a      	bgt.n	801b760 <__gethex+0x160>
 801b74a:	4648      	mov	r0, r9
 801b74c:	f7fd fddc 	bl	8019308 <_Balloc>
 801b750:	4604      	mov	r4, r0
 801b752:	b940      	cbnz	r0, 801b766 <__gethex+0x166>
 801b754:	4b61      	ldr	r3, [pc, #388]	; (801b8dc <__gethex+0x2dc>)
 801b756:	4602      	mov	r2, r0
 801b758:	21e4      	movs	r1, #228	; 0xe4
 801b75a:	4861      	ldr	r0, [pc, #388]	; (801b8e0 <__gethex+0x2e0>)
 801b75c:	f7ff feb4 	bl	801b4c8 <__assert_func>
 801b760:	3101      	adds	r1, #1
 801b762:	105b      	asrs	r3, r3, #1
 801b764:	e7ef      	b.n	801b746 <__gethex+0x146>
 801b766:	f100 0a14 	add.w	sl, r0, #20
 801b76a:	2300      	movs	r3, #0
 801b76c:	495a      	ldr	r1, [pc, #360]	; (801b8d8 <__gethex+0x2d8>)
 801b76e:	f8cd a004 	str.w	sl, [sp, #4]
 801b772:	469b      	mov	fp, r3
 801b774:	45a8      	cmp	r8, r5
 801b776:	d342      	bcc.n	801b7fe <__gethex+0x1fe>
 801b778:	9801      	ldr	r0, [sp, #4]
 801b77a:	f840 bb04 	str.w	fp, [r0], #4
 801b77e:	eba0 000a 	sub.w	r0, r0, sl
 801b782:	1080      	asrs	r0, r0, #2
 801b784:	6120      	str	r0, [r4, #16]
 801b786:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801b78a:	4658      	mov	r0, fp
 801b78c:	f7fd feae 	bl	80194ec <__hi0bits>
 801b790:	683d      	ldr	r5, [r7, #0]
 801b792:	eba8 0000 	sub.w	r0, r8, r0
 801b796:	42a8      	cmp	r0, r5
 801b798:	dd59      	ble.n	801b84e <__gethex+0x24e>
 801b79a:	eba0 0805 	sub.w	r8, r0, r5
 801b79e:	4641      	mov	r1, r8
 801b7a0:	4620      	mov	r0, r4
 801b7a2:	f7fe fa3a 	bl	8019c1a <__any_on>
 801b7a6:	4683      	mov	fp, r0
 801b7a8:	b1b8      	cbz	r0, 801b7da <__gethex+0x1da>
 801b7aa:	f108 33ff 	add.w	r3, r8, #4294967295
 801b7ae:	1159      	asrs	r1, r3, #5
 801b7b0:	f003 021f 	and.w	r2, r3, #31
 801b7b4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801b7b8:	f04f 0b01 	mov.w	fp, #1
 801b7bc:	fa0b f202 	lsl.w	r2, fp, r2
 801b7c0:	420a      	tst	r2, r1
 801b7c2:	d00a      	beq.n	801b7da <__gethex+0x1da>
 801b7c4:	455b      	cmp	r3, fp
 801b7c6:	dd06      	ble.n	801b7d6 <__gethex+0x1d6>
 801b7c8:	f1a8 0102 	sub.w	r1, r8, #2
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	f7fe fa24 	bl	8019c1a <__any_on>
 801b7d2:	2800      	cmp	r0, #0
 801b7d4:	d138      	bne.n	801b848 <__gethex+0x248>
 801b7d6:	f04f 0b02 	mov.w	fp, #2
 801b7da:	4641      	mov	r1, r8
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f7ff fea7 	bl	801b530 <rshift>
 801b7e2:	4446      	add	r6, r8
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	42b3      	cmp	r3, r6
 801b7e8:	da41      	bge.n	801b86e <__gethex+0x26e>
 801b7ea:	4621      	mov	r1, r4
 801b7ec:	4648      	mov	r0, r9
 801b7ee:	f7fd fdcb 	bl	8019388 <_Bfree>
 801b7f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	6013      	str	r3, [r2, #0]
 801b7f8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801b7fc:	e78a      	b.n	801b714 <__gethex+0x114>
 801b7fe:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801b802:	2a2e      	cmp	r2, #46	; 0x2e
 801b804:	d014      	beq.n	801b830 <__gethex+0x230>
 801b806:	2b20      	cmp	r3, #32
 801b808:	d106      	bne.n	801b818 <__gethex+0x218>
 801b80a:	9b01      	ldr	r3, [sp, #4]
 801b80c:	f843 bb04 	str.w	fp, [r3], #4
 801b810:	f04f 0b00 	mov.w	fp, #0
 801b814:	9301      	str	r3, [sp, #4]
 801b816:	465b      	mov	r3, fp
 801b818:	7828      	ldrb	r0, [r5, #0]
 801b81a:	9303      	str	r3, [sp, #12]
 801b81c:	f7ff feda 	bl	801b5d4 <__hexdig_fun>
 801b820:	9b03      	ldr	r3, [sp, #12]
 801b822:	f000 000f 	and.w	r0, r0, #15
 801b826:	4098      	lsls	r0, r3
 801b828:	ea4b 0b00 	orr.w	fp, fp, r0
 801b82c:	3304      	adds	r3, #4
 801b82e:	e7a1      	b.n	801b774 <__gethex+0x174>
 801b830:	45a8      	cmp	r8, r5
 801b832:	d8e8      	bhi.n	801b806 <__gethex+0x206>
 801b834:	2201      	movs	r2, #1
 801b836:	4628      	mov	r0, r5
 801b838:	9303      	str	r3, [sp, #12]
 801b83a:	f7ff fe18 	bl	801b46e <strncmp>
 801b83e:	4926      	ldr	r1, [pc, #152]	; (801b8d8 <__gethex+0x2d8>)
 801b840:	9b03      	ldr	r3, [sp, #12]
 801b842:	2800      	cmp	r0, #0
 801b844:	d1df      	bne.n	801b806 <__gethex+0x206>
 801b846:	e795      	b.n	801b774 <__gethex+0x174>
 801b848:	f04f 0b03 	mov.w	fp, #3
 801b84c:	e7c5      	b.n	801b7da <__gethex+0x1da>
 801b84e:	da0b      	bge.n	801b868 <__gethex+0x268>
 801b850:	eba5 0800 	sub.w	r8, r5, r0
 801b854:	4621      	mov	r1, r4
 801b856:	4642      	mov	r2, r8
 801b858:	4648      	mov	r0, r9
 801b85a:	f7fd ffaf 	bl	80197bc <__lshift>
 801b85e:	eba6 0608 	sub.w	r6, r6, r8
 801b862:	4604      	mov	r4, r0
 801b864:	f100 0a14 	add.w	sl, r0, #20
 801b868:	f04f 0b00 	mov.w	fp, #0
 801b86c:	e7ba      	b.n	801b7e4 <__gethex+0x1e4>
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	42b3      	cmp	r3, r6
 801b872:	dd73      	ble.n	801b95c <__gethex+0x35c>
 801b874:	1b9e      	subs	r6, r3, r6
 801b876:	42b5      	cmp	r5, r6
 801b878:	dc34      	bgt.n	801b8e4 <__gethex+0x2e4>
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	2b02      	cmp	r3, #2
 801b87e:	d023      	beq.n	801b8c8 <__gethex+0x2c8>
 801b880:	2b03      	cmp	r3, #3
 801b882:	d025      	beq.n	801b8d0 <__gethex+0x2d0>
 801b884:	2b01      	cmp	r3, #1
 801b886:	d115      	bne.n	801b8b4 <__gethex+0x2b4>
 801b888:	42b5      	cmp	r5, r6
 801b88a:	d113      	bne.n	801b8b4 <__gethex+0x2b4>
 801b88c:	2d01      	cmp	r5, #1
 801b88e:	d10b      	bne.n	801b8a8 <__gethex+0x2a8>
 801b890:	9a02      	ldr	r2, [sp, #8]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	6013      	str	r3, [r2, #0]
 801b896:	2301      	movs	r3, #1
 801b898:	6123      	str	r3, [r4, #16]
 801b89a:	f8ca 3000 	str.w	r3, [sl]
 801b89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b8a0:	f04f 0862 	mov.w	r8, #98	; 0x62
 801b8a4:	601c      	str	r4, [r3, #0]
 801b8a6:	e735      	b.n	801b714 <__gethex+0x114>
 801b8a8:	1e69      	subs	r1, r5, #1
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f7fe f9b5 	bl	8019c1a <__any_on>
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	d1ed      	bne.n	801b890 <__gethex+0x290>
 801b8b4:	4621      	mov	r1, r4
 801b8b6:	4648      	mov	r0, r9
 801b8b8:	f7fd fd66 	bl	8019388 <_Bfree>
 801b8bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b8be:	2300      	movs	r3, #0
 801b8c0:	6013      	str	r3, [r2, #0]
 801b8c2:	f04f 0850 	mov.w	r8, #80	; 0x50
 801b8c6:	e725      	b.n	801b714 <__gethex+0x114>
 801b8c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d1f2      	bne.n	801b8b4 <__gethex+0x2b4>
 801b8ce:	e7df      	b.n	801b890 <__gethex+0x290>
 801b8d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d1dc      	bne.n	801b890 <__gethex+0x290>
 801b8d6:	e7ed      	b.n	801b8b4 <__gethex+0x2b4>
 801b8d8:	0801c75c 	.word	0x0801c75c
 801b8dc:	0801c5ef 	.word	0x0801c5ef
 801b8e0:	0801c921 	.word	0x0801c921
 801b8e4:	f106 38ff 	add.w	r8, r6, #4294967295
 801b8e8:	f1bb 0f00 	cmp.w	fp, #0
 801b8ec:	d133      	bne.n	801b956 <__gethex+0x356>
 801b8ee:	f1b8 0f00 	cmp.w	r8, #0
 801b8f2:	d004      	beq.n	801b8fe <__gethex+0x2fe>
 801b8f4:	4641      	mov	r1, r8
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	f7fe f98f 	bl	8019c1a <__any_on>
 801b8fc:	4683      	mov	fp, r0
 801b8fe:	ea4f 1268 	mov.w	r2, r8, asr #5
 801b902:	2301      	movs	r3, #1
 801b904:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801b908:	f008 081f 	and.w	r8, r8, #31
 801b90c:	fa03 f308 	lsl.w	r3, r3, r8
 801b910:	4213      	tst	r3, r2
 801b912:	4631      	mov	r1, r6
 801b914:	4620      	mov	r0, r4
 801b916:	bf18      	it	ne
 801b918:	f04b 0b02 	orrne.w	fp, fp, #2
 801b91c:	1bad      	subs	r5, r5, r6
 801b91e:	f7ff fe07 	bl	801b530 <rshift>
 801b922:	687e      	ldr	r6, [r7, #4]
 801b924:	f04f 0802 	mov.w	r8, #2
 801b928:	f1bb 0f00 	cmp.w	fp, #0
 801b92c:	d04a      	beq.n	801b9c4 <__gethex+0x3c4>
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	2b02      	cmp	r3, #2
 801b932:	d016      	beq.n	801b962 <__gethex+0x362>
 801b934:	2b03      	cmp	r3, #3
 801b936:	d018      	beq.n	801b96a <__gethex+0x36a>
 801b938:	2b01      	cmp	r3, #1
 801b93a:	d109      	bne.n	801b950 <__gethex+0x350>
 801b93c:	f01b 0f02 	tst.w	fp, #2
 801b940:	d006      	beq.n	801b950 <__gethex+0x350>
 801b942:	f8da 3000 	ldr.w	r3, [sl]
 801b946:	ea4b 0b03 	orr.w	fp, fp, r3
 801b94a:	f01b 0f01 	tst.w	fp, #1
 801b94e:	d10f      	bne.n	801b970 <__gethex+0x370>
 801b950:	f048 0810 	orr.w	r8, r8, #16
 801b954:	e036      	b.n	801b9c4 <__gethex+0x3c4>
 801b956:	f04f 0b01 	mov.w	fp, #1
 801b95a:	e7d0      	b.n	801b8fe <__gethex+0x2fe>
 801b95c:	f04f 0801 	mov.w	r8, #1
 801b960:	e7e2      	b.n	801b928 <__gethex+0x328>
 801b962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b964:	f1c3 0301 	rsb	r3, r3, #1
 801b968:	930f      	str	r3, [sp, #60]	; 0x3c
 801b96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b96c:	2b00      	cmp	r3, #0
 801b96e:	d0ef      	beq.n	801b950 <__gethex+0x350>
 801b970:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801b974:	f104 0214 	add.w	r2, r4, #20
 801b978:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801b97c:	9301      	str	r3, [sp, #4]
 801b97e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801b982:	2300      	movs	r3, #0
 801b984:	4694      	mov	ip, r2
 801b986:	f852 1b04 	ldr.w	r1, [r2], #4
 801b98a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801b98e:	d01e      	beq.n	801b9ce <__gethex+0x3ce>
 801b990:	3101      	adds	r1, #1
 801b992:	f8cc 1000 	str.w	r1, [ip]
 801b996:	f1b8 0f02 	cmp.w	r8, #2
 801b99a:	f104 0214 	add.w	r2, r4, #20
 801b99e:	d13d      	bne.n	801ba1c <__gethex+0x41c>
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	3b01      	subs	r3, #1
 801b9a4:	42ab      	cmp	r3, r5
 801b9a6:	d10b      	bne.n	801b9c0 <__gethex+0x3c0>
 801b9a8:	1169      	asrs	r1, r5, #5
 801b9aa:	2301      	movs	r3, #1
 801b9ac:	f005 051f 	and.w	r5, r5, #31
 801b9b0:	fa03 f505 	lsl.w	r5, r3, r5
 801b9b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b9b8:	421d      	tst	r5, r3
 801b9ba:	bf18      	it	ne
 801b9bc:	f04f 0801 	movne.w	r8, #1
 801b9c0:	f048 0820 	orr.w	r8, r8, #32
 801b9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b9c6:	601c      	str	r4, [r3, #0]
 801b9c8:	9b02      	ldr	r3, [sp, #8]
 801b9ca:	601e      	str	r6, [r3, #0]
 801b9cc:	e6a2      	b.n	801b714 <__gethex+0x114>
 801b9ce:	4290      	cmp	r0, r2
 801b9d0:	f842 3c04 	str.w	r3, [r2, #-4]
 801b9d4:	d8d6      	bhi.n	801b984 <__gethex+0x384>
 801b9d6:	68a2      	ldr	r2, [r4, #8]
 801b9d8:	4593      	cmp	fp, r2
 801b9da:	db17      	blt.n	801ba0c <__gethex+0x40c>
 801b9dc:	6861      	ldr	r1, [r4, #4]
 801b9de:	4648      	mov	r0, r9
 801b9e0:	3101      	adds	r1, #1
 801b9e2:	f7fd fc91 	bl	8019308 <_Balloc>
 801b9e6:	4682      	mov	sl, r0
 801b9e8:	b918      	cbnz	r0, 801b9f2 <__gethex+0x3f2>
 801b9ea:	4b1b      	ldr	r3, [pc, #108]	; (801ba58 <__gethex+0x458>)
 801b9ec:	4602      	mov	r2, r0
 801b9ee:	2184      	movs	r1, #132	; 0x84
 801b9f0:	e6b3      	b.n	801b75a <__gethex+0x15a>
 801b9f2:	6922      	ldr	r2, [r4, #16]
 801b9f4:	3202      	adds	r2, #2
 801b9f6:	f104 010c 	add.w	r1, r4, #12
 801b9fa:	0092      	lsls	r2, r2, #2
 801b9fc:	300c      	adds	r0, #12
 801b9fe:	f7fc fd78 	bl	80184f2 <memcpy>
 801ba02:	4621      	mov	r1, r4
 801ba04:	4648      	mov	r0, r9
 801ba06:	f7fd fcbf 	bl	8019388 <_Bfree>
 801ba0a:	4654      	mov	r4, sl
 801ba0c:	6922      	ldr	r2, [r4, #16]
 801ba0e:	1c51      	adds	r1, r2, #1
 801ba10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ba14:	6121      	str	r1, [r4, #16]
 801ba16:	2101      	movs	r1, #1
 801ba18:	6151      	str	r1, [r2, #20]
 801ba1a:	e7bc      	b.n	801b996 <__gethex+0x396>
 801ba1c:	6921      	ldr	r1, [r4, #16]
 801ba1e:	4559      	cmp	r1, fp
 801ba20:	dd0b      	ble.n	801ba3a <__gethex+0x43a>
 801ba22:	2101      	movs	r1, #1
 801ba24:	4620      	mov	r0, r4
 801ba26:	f7ff fd83 	bl	801b530 <rshift>
 801ba2a:	68bb      	ldr	r3, [r7, #8]
 801ba2c:	3601      	adds	r6, #1
 801ba2e:	42b3      	cmp	r3, r6
 801ba30:	f6ff aedb 	blt.w	801b7ea <__gethex+0x1ea>
 801ba34:	f04f 0801 	mov.w	r8, #1
 801ba38:	e7c2      	b.n	801b9c0 <__gethex+0x3c0>
 801ba3a:	f015 051f 	ands.w	r5, r5, #31
 801ba3e:	d0f9      	beq.n	801ba34 <__gethex+0x434>
 801ba40:	9b01      	ldr	r3, [sp, #4]
 801ba42:	441a      	add	r2, r3
 801ba44:	f1c5 0520 	rsb	r5, r5, #32
 801ba48:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801ba4c:	f7fd fd4e 	bl	80194ec <__hi0bits>
 801ba50:	42a8      	cmp	r0, r5
 801ba52:	dbe6      	blt.n	801ba22 <__gethex+0x422>
 801ba54:	e7ee      	b.n	801ba34 <__gethex+0x434>
 801ba56:	bf00      	nop
 801ba58:	0801c5ef 	.word	0x0801c5ef

0801ba5c <L_shift>:
 801ba5c:	f1c2 0208 	rsb	r2, r2, #8
 801ba60:	0092      	lsls	r2, r2, #2
 801ba62:	b570      	push	{r4, r5, r6, lr}
 801ba64:	f1c2 0620 	rsb	r6, r2, #32
 801ba68:	6843      	ldr	r3, [r0, #4]
 801ba6a:	6804      	ldr	r4, [r0, #0]
 801ba6c:	fa03 f506 	lsl.w	r5, r3, r6
 801ba70:	432c      	orrs	r4, r5
 801ba72:	40d3      	lsrs	r3, r2
 801ba74:	6004      	str	r4, [r0, #0]
 801ba76:	f840 3f04 	str.w	r3, [r0, #4]!
 801ba7a:	4288      	cmp	r0, r1
 801ba7c:	d3f4      	bcc.n	801ba68 <L_shift+0xc>
 801ba7e:	bd70      	pop	{r4, r5, r6, pc}

0801ba80 <__match>:
 801ba80:	b530      	push	{r4, r5, lr}
 801ba82:	6803      	ldr	r3, [r0, #0]
 801ba84:	3301      	adds	r3, #1
 801ba86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba8a:	b914      	cbnz	r4, 801ba92 <__match+0x12>
 801ba8c:	6003      	str	r3, [r0, #0]
 801ba8e:	2001      	movs	r0, #1
 801ba90:	bd30      	pop	{r4, r5, pc}
 801ba92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ba96:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801ba9a:	2d19      	cmp	r5, #25
 801ba9c:	bf98      	it	ls
 801ba9e:	3220      	addls	r2, #32
 801baa0:	42a2      	cmp	r2, r4
 801baa2:	d0f0      	beq.n	801ba86 <__match+0x6>
 801baa4:	2000      	movs	r0, #0
 801baa6:	e7f3      	b.n	801ba90 <__match+0x10>

0801baa8 <__hexnan>:
 801baa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801baac:	680b      	ldr	r3, [r1, #0]
 801baae:	6801      	ldr	r1, [r0, #0]
 801bab0:	115e      	asrs	r6, r3, #5
 801bab2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bab6:	f013 031f 	ands.w	r3, r3, #31
 801baba:	b087      	sub	sp, #28
 801babc:	bf18      	it	ne
 801babe:	3604      	addne	r6, #4
 801bac0:	2500      	movs	r5, #0
 801bac2:	1f37      	subs	r7, r6, #4
 801bac4:	4682      	mov	sl, r0
 801bac6:	4690      	mov	r8, r2
 801bac8:	9301      	str	r3, [sp, #4]
 801baca:	f846 5c04 	str.w	r5, [r6, #-4]
 801bace:	46b9      	mov	r9, r7
 801bad0:	463c      	mov	r4, r7
 801bad2:	9502      	str	r5, [sp, #8]
 801bad4:	46ab      	mov	fp, r5
 801bad6:	784a      	ldrb	r2, [r1, #1]
 801bad8:	1c4b      	adds	r3, r1, #1
 801bada:	9303      	str	r3, [sp, #12]
 801badc:	b342      	cbz	r2, 801bb30 <__hexnan+0x88>
 801bade:	4610      	mov	r0, r2
 801bae0:	9105      	str	r1, [sp, #20]
 801bae2:	9204      	str	r2, [sp, #16]
 801bae4:	f7ff fd76 	bl	801b5d4 <__hexdig_fun>
 801bae8:	2800      	cmp	r0, #0
 801baea:	d14f      	bne.n	801bb8c <__hexnan+0xe4>
 801baec:	9a04      	ldr	r2, [sp, #16]
 801baee:	9905      	ldr	r1, [sp, #20]
 801baf0:	2a20      	cmp	r2, #32
 801baf2:	d818      	bhi.n	801bb26 <__hexnan+0x7e>
 801baf4:	9b02      	ldr	r3, [sp, #8]
 801baf6:	459b      	cmp	fp, r3
 801baf8:	dd13      	ble.n	801bb22 <__hexnan+0x7a>
 801bafa:	454c      	cmp	r4, r9
 801bafc:	d206      	bcs.n	801bb0c <__hexnan+0x64>
 801bafe:	2d07      	cmp	r5, #7
 801bb00:	dc04      	bgt.n	801bb0c <__hexnan+0x64>
 801bb02:	462a      	mov	r2, r5
 801bb04:	4649      	mov	r1, r9
 801bb06:	4620      	mov	r0, r4
 801bb08:	f7ff ffa8 	bl	801ba5c <L_shift>
 801bb0c:	4544      	cmp	r4, r8
 801bb0e:	d950      	bls.n	801bbb2 <__hexnan+0x10a>
 801bb10:	2300      	movs	r3, #0
 801bb12:	f1a4 0904 	sub.w	r9, r4, #4
 801bb16:	f844 3c04 	str.w	r3, [r4, #-4]
 801bb1a:	f8cd b008 	str.w	fp, [sp, #8]
 801bb1e:	464c      	mov	r4, r9
 801bb20:	461d      	mov	r5, r3
 801bb22:	9903      	ldr	r1, [sp, #12]
 801bb24:	e7d7      	b.n	801bad6 <__hexnan+0x2e>
 801bb26:	2a29      	cmp	r2, #41	; 0x29
 801bb28:	d155      	bne.n	801bbd6 <__hexnan+0x12e>
 801bb2a:	3102      	adds	r1, #2
 801bb2c:	f8ca 1000 	str.w	r1, [sl]
 801bb30:	f1bb 0f00 	cmp.w	fp, #0
 801bb34:	d04f      	beq.n	801bbd6 <__hexnan+0x12e>
 801bb36:	454c      	cmp	r4, r9
 801bb38:	d206      	bcs.n	801bb48 <__hexnan+0xa0>
 801bb3a:	2d07      	cmp	r5, #7
 801bb3c:	dc04      	bgt.n	801bb48 <__hexnan+0xa0>
 801bb3e:	462a      	mov	r2, r5
 801bb40:	4649      	mov	r1, r9
 801bb42:	4620      	mov	r0, r4
 801bb44:	f7ff ff8a 	bl	801ba5c <L_shift>
 801bb48:	4544      	cmp	r4, r8
 801bb4a:	d934      	bls.n	801bbb6 <__hexnan+0x10e>
 801bb4c:	f1a8 0204 	sub.w	r2, r8, #4
 801bb50:	4623      	mov	r3, r4
 801bb52:	f853 1b04 	ldr.w	r1, [r3], #4
 801bb56:	f842 1f04 	str.w	r1, [r2, #4]!
 801bb5a:	429f      	cmp	r7, r3
 801bb5c:	d2f9      	bcs.n	801bb52 <__hexnan+0xaa>
 801bb5e:	1b3b      	subs	r3, r7, r4
 801bb60:	f023 0303 	bic.w	r3, r3, #3
 801bb64:	3304      	adds	r3, #4
 801bb66:	3e03      	subs	r6, #3
 801bb68:	3401      	adds	r4, #1
 801bb6a:	42a6      	cmp	r6, r4
 801bb6c:	bf38      	it	cc
 801bb6e:	2304      	movcc	r3, #4
 801bb70:	4443      	add	r3, r8
 801bb72:	2200      	movs	r2, #0
 801bb74:	f843 2b04 	str.w	r2, [r3], #4
 801bb78:	429f      	cmp	r7, r3
 801bb7a:	d2fb      	bcs.n	801bb74 <__hexnan+0xcc>
 801bb7c:	683b      	ldr	r3, [r7, #0]
 801bb7e:	b91b      	cbnz	r3, 801bb88 <__hexnan+0xe0>
 801bb80:	4547      	cmp	r7, r8
 801bb82:	d126      	bne.n	801bbd2 <__hexnan+0x12a>
 801bb84:	2301      	movs	r3, #1
 801bb86:	603b      	str	r3, [r7, #0]
 801bb88:	2005      	movs	r0, #5
 801bb8a:	e025      	b.n	801bbd8 <__hexnan+0x130>
 801bb8c:	3501      	adds	r5, #1
 801bb8e:	2d08      	cmp	r5, #8
 801bb90:	f10b 0b01 	add.w	fp, fp, #1
 801bb94:	dd06      	ble.n	801bba4 <__hexnan+0xfc>
 801bb96:	4544      	cmp	r4, r8
 801bb98:	d9c3      	bls.n	801bb22 <__hexnan+0x7a>
 801bb9a:	2300      	movs	r3, #0
 801bb9c:	f844 3c04 	str.w	r3, [r4, #-4]
 801bba0:	2501      	movs	r5, #1
 801bba2:	3c04      	subs	r4, #4
 801bba4:	6822      	ldr	r2, [r4, #0]
 801bba6:	f000 000f 	and.w	r0, r0, #15
 801bbaa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801bbae:	6020      	str	r0, [r4, #0]
 801bbb0:	e7b7      	b.n	801bb22 <__hexnan+0x7a>
 801bbb2:	2508      	movs	r5, #8
 801bbb4:	e7b5      	b.n	801bb22 <__hexnan+0x7a>
 801bbb6:	9b01      	ldr	r3, [sp, #4]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d0df      	beq.n	801bb7c <__hexnan+0xd4>
 801bbbc:	f1c3 0320 	rsb	r3, r3, #32
 801bbc0:	f04f 32ff 	mov.w	r2, #4294967295
 801bbc4:	40da      	lsrs	r2, r3
 801bbc6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801bbca:	4013      	ands	r3, r2
 801bbcc:	f846 3c04 	str.w	r3, [r6, #-4]
 801bbd0:	e7d4      	b.n	801bb7c <__hexnan+0xd4>
 801bbd2:	3f04      	subs	r7, #4
 801bbd4:	e7d2      	b.n	801bb7c <__hexnan+0xd4>
 801bbd6:	2004      	movs	r0, #4
 801bbd8:	b007      	add	sp, #28
 801bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bbde <__ascii_mbtowc>:
 801bbde:	b082      	sub	sp, #8
 801bbe0:	b901      	cbnz	r1, 801bbe4 <__ascii_mbtowc+0x6>
 801bbe2:	a901      	add	r1, sp, #4
 801bbe4:	b142      	cbz	r2, 801bbf8 <__ascii_mbtowc+0x1a>
 801bbe6:	b14b      	cbz	r3, 801bbfc <__ascii_mbtowc+0x1e>
 801bbe8:	7813      	ldrb	r3, [r2, #0]
 801bbea:	600b      	str	r3, [r1, #0]
 801bbec:	7812      	ldrb	r2, [r2, #0]
 801bbee:	1e10      	subs	r0, r2, #0
 801bbf0:	bf18      	it	ne
 801bbf2:	2001      	movne	r0, #1
 801bbf4:	b002      	add	sp, #8
 801bbf6:	4770      	bx	lr
 801bbf8:	4610      	mov	r0, r2
 801bbfa:	e7fb      	b.n	801bbf4 <__ascii_mbtowc+0x16>
 801bbfc:	f06f 0001 	mvn.w	r0, #1
 801bc00:	e7f8      	b.n	801bbf4 <__ascii_mbtowc+0x16>

0801bc02 <_realloc_r>:
 801bc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc06:	4680      	mov	r8, r0
 801bc08:	4614      	mov	r4, r2
 801bc0a:	460e      	mov	r6, r1
 801bc0c:	b921      	cbnz	r1, 801bc18 <_realloc_r+0x16>
 801bc0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc12:	4611      	mov	r1, r2
 801bc14:	f7fd baec 	b.w	80191f0 <_malloc_r>
 801bc18:	b92a      	cbnz	r2, 801bc26 <_realloc_r+0x24>
 801bc1a:	f7fd fa75 	bl	8019108 <_free_r>
 801bc1e:	4625      	mov	r5, r4
 801bc20:	4628      	mov	r0, r5
 801bc22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc26:	f000 f8b6 	bl	801bd96 <_malloc_usable_size_r>
 801bc2a:	4284      	cmp	r4, r0
 801bc2c:	4607      	mov	r7, r0
 801bc2e:	d802      	bhi.n	801bc36 <_realloc_r+0x34>
 801bc30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bc34:	d812      	bhi.n	801bc5c <_realloc_r+0x5a>
 801bc36:	4621      	mov	r1, r4
 801bc38:	4640      	mov	r0, r8
 801bc3a:	f7fd fad9 	bl	80191f0 <_malloc_r>
 801bc3e:	4605      	mov	r5, r0
 801bc40:	2800      	cmp	r0, #0
 801bc42:	d0ed      	beq.n	801bc20 <_realloc_r+0x1e>
 801bc44:	42bc      	cmp	r4, r7
 801bc46:	4622      	mov	r2, r4
 801bc48:	4631      	mov	r1, r6
 801bc4a:	bf28      	it	cs
 801bc4c:	463a      	movcs	r2, r7
 801bc4e:	f7fc fc50 	bl	80184f2 <memcpy>
 801bc52:	4631      	mov	r1, r6
 801bc54:	4640      	mov	r0, r8
 801bc56:	f7fd fa57 	bl	8019108 <_free_r>
 801bc5a:	e7e1      	b.n	801bc20 <_realloc_r+0x1e>
 801bc5c:	4635      	mov	r5, r6
 801bc5e:	e7df      	b.n	801bc20 <_realloc_r+0x1e>

0801bc60 <_strtoul_l.constprop.0>:
 801bc60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc64:	4f36      	ldr	r7, [pc, #216]	; (801bd40 <_strtoul_l.constprop.0+0xe0>)
 801bc66:	4686      	mov	lr, r0
 801bc68:	460d      	mov	r5, r1
 801bc6a:	4628      	mov	r0, r5
 801bc6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bc70:	5d3e      	ldrb	r6, [r7, r4]
 801bc72:	f016 0608 	ands.w	r6, r6, #8
 801bc76:	d1f8      	bne.n	801bc6a <_strtoul_l.constprop.0+0xa>
 801bc78:	2c2d      	cmp	r4, #45	; 0x2d
 801bc7a:	d130      	bne.n	801bcde <_strtoul_l.constprop.0+0x7e>
 801bc7c:	782c      	ldrb	r4, [r5, #0]
 801bc7e:	2601      	movs	r6, #1
 801bc80:	1c85      	adds	r5, r0, #2
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d057      	beq.n	801bd36 <_strtoul_l.constprop.0+0xd6>
 801bc86:	2b10      	cmp	r3, #16
 801bc88:	d109      	bne.n	801bc9e <_strtoul_l.constprop.0+0x3e>
 801bc8a:	2c30      	cmp	r4, #48	; 0x30
 801bc8c:	d107      	bne.n	801bc9e <_strtoul_l.constprop.0+0x3e>
 801bc8e:	7828      	ldrb	r0, [r5, #0]
 801bc90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bc94:	2858      	cmp	r0, #88	; 0x58
 801bc96:	d149      	bne.n	801bd2c <_strtoul_l.constprop.0+0xcc>
 801bc98:	786c      	ldrb	r4, [r5, #1]
 801bc9a:	2310      	movs	r3, #16
 801bc9c:	3502      	adds	r5, #2
 801bc9e:	f04f 38ff 	mov.w	r8, #4294967295
 801bca2:	2700      	movs	r7, #0
 801bca4:	fbb8 f8f3 	udiv	r8, r8, r3
 801bca8:	fb03 f908 	mul.w	r9, r3, r8
 801bcac:	ea6f 0909 	mvn.w	r9, r9
 801bcb0:	4638      	mov	r0, r7
 801bcb2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bcb6:	f1bc 0f09 	cmp.w	ip, #9
 801bcba:	d815      	bhi.n	801bce8 <_strtoul_l.constprop.0+0x88>
 801bcbc:	4664      	mov	r4, ip
 801bcbe:	42a3      	cmp	r3, r4
 801bcc0:	dd23      	ble.n	801bd0a <_strtoul_l.constprop.0+0xaa>
 801bcc2:	f1b7 3fff 	cmp.w	r7, #4294967295
 801bcc6:	d007      	beq.n	801bcd8 <_strtoul_l.constprop.0+0x78>
 801bcc8:	4580      	cmp	r8, r0
 801bcca:	d31b      	bcc.n	801bd04 <_strtoul_l.constprop.0+0xa4>
 801bccc:	d101      	bne.n	801bcd2 <_strtoul_l.constprop.0+0x72>
 801bcce:	45a1      	cmp	r9, r4
 801bcd0:	db18      	blt.n	801bd04 <_strtoul_l.constprop.0+0xa4>
 801bcd2:	fb00 4003 	mla	r0, r0, r3, r4
 801bcd6:	2701      	movs	r7, #1
 801bcd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bcdc:	e7e9      	b.n	801bcb2 <_strtoul_l.constprop.0+0x52>
 801bcde:	2c2b      	cmp	r4, #43	; 0x2b
 801bce0:	bf04      	itt	eq
 801bce2:	782c      	ldrbeq	r4, [r5, #0]
 801bce4:	1c85      	addeq	r5, r0, #2
 801bce6:	e7cc      	b.n	801bc82 <_strtoul_l.constprop.0+0x22>
 801bce8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bcec:	f1bc 0f19 	cmp.w	ip, #25
 801bcf0:	d801      	bhi.n	801bcf6 <_strtoul_l.constprop.0+0x96>
 801bcf2:	3c37      	subs	r4, #55	; 0x37
 801bcf4:	e7e3      	b.n	801bcbe <_strtoul_l.constprop.0+0x5e>
 801bcf6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bcfa:	f1bc 0f19 	cmp.w	ip, #25
 801bcfe:	d804      	bhi.n	801bd0a <_strtoul_l.constprop.0+0xaa>
 801bd00:	3c57      	subs	r4, #87	; 0x57
 801bd02:	e7dc      	b.n	801bcbe <_strtoul_l.constprop.0+0x5e>
 801bd04:	f04f 37ff 	mov.w	r7, #4294967295
 801bd08:	e7e6      	b.n	801bcd8 <_strtoul_l.constprop.0+0x78>
 801bd0a:	1c7b      	adds	r3, r7, #1
 801bd0c:	d106      	bne.n	801bd1c <_strtoul_l.constprop.0+0xbc>
 801bd0e:	2322      	movs	r3, #34	; 0x22
 801bd10:	f8ce 3000 	str.w	r3, [lr]
 801bd14:	4638      	mov	r0, r7
 801bd16:	b932      	cbnz	r2, 801bd26 <_strtoul_l.constprop.0+0xc6>
 801bd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd1c:	b106      	cbz	r6, 801bd20 <_strtoul_l.constprop.0+0xc0>
 801bd1e:	4240      	negs	r0, r0
 801bd20:	2a00      	cmp	r2, #0
 801bd22:	d0f9      	beq.n	801bd18 <_strtoul_l.constprop.0+0xb8>
 801bd24:	b107      	cbz	r7, 801bd28 <_strtoul_l.constprop.0+0xc8>
 801bd26:	1e69      	subs	r1, r5, #1
 801bd28:	6011      	str	r1, [r2, #0]
 801bd2a:	e7f5      	b.n	801bd18 <_strtoul_l.constprop.0+0xb8>
 801bd2c:	2430      	movs	r4, #48	; 0x30
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d1b5      	bne.n	801bc9e <_strtoul_l.constprop.0+0x3e>
 801bd32:	2308      	movs	r3, #8
 801bd34:	e7b3      	b.n	801bc9e <_strtoul_l.constprop.0+0x3e>
 801bd36:	2c30      	cmp	r4, #48	; 0x30
 801bd38:	d0a9      	beq.n	801bc8e <_strtoul_l.constprop.0+0x2e>
 801bd3a:	230a      	movs	r3, #10
 801bd3c:	e7af      	b.n	801bc9e <_strtoul_l.constprop.0+0x3e>
 801bd3e:	bf00      	nop
 801bd40:	0801c7b1 	.word	0x0801c7b1

0801bd44 <_strtoul_r>:
 801bd44:	f7ff bf8c 	b.w	801bc60 <_strtoul_l.constprop.0>

0801bd48 <__ascii_wctomb>:
 801bd48:	b149      	cbz	r1, 801bd5e <__ascii_wctomb+0x16>
 801bd4a:	2aff      	cmp	r2, #255	; 0xff
 801bd4c:	bf85      	ittet	hi
 801bd4e:	238a      	movhi	r3, #138	; 0x8a
 801bd50:	6003      	strhi	r3, [r0, #0]
 801bd52:	700a      	strbls	r2, [r1, #0]
 801bd54:	f04f 30ff 	movhi.w	r0, #4294967295
 801bd58:	bf98      	it	ls
 801bd5a:	2001      	movls	r0, #1
 801bd5c:	4770      	bx	lr
 801bd5e:	4608      	mov	r0, r1
 801bd60:	4770      	bx	lr
	...

0801bd64 <fiprintf>:
 801bd64:	b40e      	push	{r1, r2, r3}
 801bd66:	b503      	push	{r0, r1, lr}
 801bd68:	4601      	mov	r1, r0
 801bd6a:	ab03      	add	r3, sp, #12
 801bd6c:	4805      	ldr	r0, [pc, #20]	; (801bd84 <fiprintf+0x20>)
 801bd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd72:	6800      	ldr	r0, [r0, #0]
 801bd74:	9301      	str	r3, [sp, #4]
 801bd76:	f000 f83f 	bl	801bdf8 <_vfiprintf_r>
 801bd7a:	b002      	add	sp, #8
 801bd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 801bd80:	b003      	add	sp, #12
 801bd82:	4770      	bx	lr
 801bd84:	24000158 	.word	0x24000158

0801bd88 <abort>:
 801bd88:	b508      	push	{r3, lr}
 801bd8a:	2006      	movs	r0, #6
 801bd8c:	f000 fa0c 	bl	801c1a8 <raise>
 801bd90:	2001      	movs	r0, #1
 801bd92:	f7e7 feb9 	bl	8003b08 <_exit>

0801bd96 <_malloc_usable_size_r>:
 801bd96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd9a:	1f18      	subs	r0, r3, #4
 801bd9c:	2b00      	cmp	r3, #0
 801bd9e:	bfbc      	itt	lt
 801bda0:	580b      	ldrlt	r3, [r1, r0]
 801bda2:	18c0      	addlt	r0, r0, r3
 801bda4:	4770      	bx	lr

0801bda6 <__sfputc_r>:
 801bda6:	6893      	ldr	r3, [r2, #8]
 801bda8:	3b01      	subs	r3, #1
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	b410      	push	{r4}
 801bdae:	6093      	str	r3, [r2, #8]
 801bdb0:	da08      	bge.n	801bdc4 <__sfputc_r+0x1e>
 801bdb2:	6994      	ldr	r4, [r2, #24]
 801bdb4:	42a3      	cmp	r3, r4
 801bdb6:	db01      	blt.n	801bdbc <__sfputc_r+0x16>
 801bdb8:	290a      	cmp	r1, #10
 801bdba:	d103      	bne.n	801bdc4 <__sfputc_r+0x1e>
 801bdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdc0:	f000 b934 	b.w	801c02c <__swbuf_r>
 801bdc4:	6813      	ldr	r3, [r2, #0]
 801bdc6:	1c58      	adds	r0, r3, #1
 801bdc8:	6010      	str	r0, [r2, #0]
 801bdca:	7019      	strb	r1, [r3, #0]
 801bdcc:	4608      	mov	r0, r1
 801bdce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bdd2:	4770      	bx	lr

0801bdd4 <__sfputs_r>:
 801bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdd6:	4606      	mov	r6, r0
 801bdd8:	460f      	mov	r7, r1
 801bdda:	4614      	mov	r4, r2
 801bddc:	18d5      	adds	r5, r2, r3
 801bdde:	42ac      	cmp	r4, r5
 801bde0:	d101      	bne.n	801bde6 <__sfputs_r+0x12>
 801bde2:	2000      	movs	r0, #0
 801bde4:	e007      	b.n	801bdf6 <__sfputs_r+0x22>
 801bde6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bdea:	463a      	mov	r2, r7
 801bdec:	4630      	mov	r0, r6
 801bdee:	f7ff ffda 	bl	801bda6 <__sfputc_r>
 801bdf2:	1c43      	adds	r3, r0, #1
 801bdf4:	d1f3      	bne.n	801bdde <__sfputs_r+0xa>
 801bdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801bdf8 <_vfiprintf_r>:
 801bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdfc:	460d      	mov	r5, r1
 801bdfe:	b09d      	sub	sp, #116	; 0x74
 801be00:	4614      	mov	r4, r2
 801be02:	4698      	mov	r8, r3
 801be04:	4606      	mov	r6, r0
 801be06:	b118      	cbz	r0, 801be10 <_vfiprintf_r+0x18>
 801be08:	6a03      	ldr	r3, [r0, #32]
 801be0a:	b90b      	cbnz	r3, 801be10 <_vfiprintf_r+0x18>
 801be0c:	f7fc fa22 	bl	8018254 <__sinit>
 801be10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be12:	07d9      	lsls	r1, r3, #31
 801be14:	d405      	bmi.n	801be22 <_vfiprintf_r+0x2a>
 801be16:	89ab      	ldrh	r3, [r5, #12]
 801be18:	059a      	lsls	r2, r3, #22
 801be1a:	d402      	bmi.n	801be22 <_vfiprintf_r+0x2a>
 801be1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be1e:	f7fc fb5e 	bl	80184de <__retarget_lock_acquire_recursive>
 801be22:	89ab      	ldrh	r3, [r5, #12]
 801be24:	071b      	lsls	r3, r3, #28
 801be26:	d501      	bpl.n	801be2c <_vfiprintf_r+0x34>
 801be28:	692b      	ldr	r3, [r5, #16]
 801be2a:	b99b      	cbnz	r3, 801be54 <_vfiprintf_r+0x5c>
 801be2c:	4629      	mov	r1, r5
 801be2e:	4630      	mov	r0, r6
 801be30:	f000 f93a 	bl	801c0a8 <__swsetup_r>
 801be34:	b170      	cbz	r0, 801be54 <_vfiprintf_r+0x5c>
 801be36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be38:	07dc      	lsls	r4, r3, #31
 801be3a:	d504      	bpl.n	801be46 <_vfiprintf_r+0x4e>
 801be3c:	f04f 30ff 	mov.w	r0, #4294967295
 801be40:	b01d      	add	sp, #116	; 0x74
 801be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be46:	89ab      	ldrh	r3, [r5, #12]
 801be48:	0598      	lsls	r0, r3, #22
 801be4a:	d4f7      	bmi.n	801be3c <_vfiprintf_r+0x44>
 801be4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be4e:	f7fc fb47 	bl	80184e0 <__retarget_lock_release_recursive>
 801be52:	e7f3      	b.n	801be3c <_vfiprintf_r+0x44>
 801be54:	2300      	movs	r3, #0
 801be56:	9309      	str	r3, [sp, #36]	; 0x24
 801be58:	2320      	movs	r3, #32
 801be5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be5e:	f8cd 800c 	str.w	r8, [sp, #12]
 801be62:	2330      	movs	r3, #48	; 0x30
 801be64:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c018 <_vfiprintf_r+0x220>
 801be68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be6c:	f04f 0901 	mov.w	r9, #1
 801be70:	4623      	mov	r3, r4
 801be72:	469a      	mov	sl, r3
 801be74:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be78:	b10a      	cbz	r2, 801be7e <_vfiprintf_r+0x86>
 801be7a:	2a25      	cmp	r2, #37	; 0x25
 801be7c:	d1f9      	bne.n	801be72 <_vfiprintf_r+0x7a>
 801be7e:	ebba 0b04 	subs.w	fp, sl, r4
 801be82:	d00b      	beq.n	801be9c <_vfiprintf_r+0xa4>
 801be84:	465b      	mov	r3, fp
 801be86:	4622      	mov	r2, r4
 801be88:	4629      	mov	r1, r5
 801be8a:	4630      	mov	r0, r6
 801be8c:	f7ff ffa2 	bl	801bdd4 <__sfputs_r>
 801be90:	3001      	adds	r0, #1
 801be92:	f000 80a9 	beq.w	801bfe8 <_vfiprintf_r+0x1f0>
 801be96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be98:	445a      	add	r2, fp
 801be9a:	9209      	str	r2, [sp, #36]	; 0x24
 801be9c:	f89a 3000 	ldrb.w	r3, [sl]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	f000 80a1 	beq.w	801bfe8 <_vfiprintf_r+0x1f0>
 801bea6:	2300      	movs	r3, #0
 801bea8:	f04f 32ff 	mov.w	r2, #4294967295
 801beac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801beb0:	f10a 0a01 	add.w	sl, sl, #1
 801beb4:	9304      	str	r3, [sp, #16]
 801beb6:	9307      	str	r3, [sp, #28]
 801beb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bebc:	931a      	str	r3, [sp, #104]	; 0x68
 801bebe:	4654      	mov	r4, sl
 801bec0:	2205      	movs	r2, #5
 801bec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bec6:	4854      	ldr	r0, [pc, #336]	; (801c018 <_vfiprintf_r+0x220>)
 801bec8:	f7e4 fa32 	bl	8000330 <memchr>
 801becc:	9a04      	ldr	r2, [sp, #16]
 801bece:	b9d8      	cbnz	r0, 801bf08 <_vfiprintf_r+0x110>
 801bed0:	06d1      	lsls	r1, r2, #27
 801bed2:	bf44      	itt	mi
 801bed4:	2320      	movmi	r3, #32
 801bed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801beda:	0713      	lsls	r3, r2, #28
 801bedc:	bf44      	itt	mi
 801bede:	232b      	movmi	r3, #43	; 0x2b
 801bee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bee4:	f89a 3000 	ldrb.w	r3, [sl]
 801bee8:	2b2a      	cmp	r3, #42	; 0x2a
 801beea:	d015      	beq.n	801bf18 <_vfiprintf_r+0x120>
 801beec:	9a07      	ldr	r2, [sp, #28]
 801beee:	4654      	mov	r4, sl
 801bef0:	2000      	movs	r0, #0
 801bef2:	f04f 0c0a 	mov.w	ip, #10
 801bef6:	4621      	mov	r1, r4
 801bef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801befc:	3b30      	subs	r3, #48	; 0x30
 801befe:	2b09      	cmp	r3, #9
 801bf00:	d94d      	bls.n	801bf9e <_vfiprintf_r+0x1a6>
 801bf02:	b1b0      	cbz	r0, 801bf32 <_vfiprintf_r+0x13a>
 801bf04:	9207      	str	r2, [sp, #28]
 801bf06:	e014      	b.n	801bf32 <_vfiprintf_r+0x13a>
 801bf08:	eba0 0308 	sub.w	r3, r0, r8
 801bf0c:	fa09 f303 	lsl.w	r3, r9, r3
 801bf10:	4313      	orrs	r3, r2
 801bf12:	9304      	str	r3, [sp, #16]
 801bf14:	46a2      	mov	sl, r4
 801bf16:	e7d2      	b.n	801bebe <_vfiprintf_r+0xc6>
 801bf18:	9b03      	ldr	r3, [sp, #12]
 801bf1a:	1d19      	adds	r1, r3, #4
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	9103      	str	r1, [sp, #12]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	bfbb      	ittet	lt
 801bf24:	425b      	neglt	r3, r3
 801bf26:	f042 0202 	orrlt.w	r2, r2, #2
 801bf2a:	9307      	strge	r3, [sp, #28]
 801bf2c:	9307      	strlt	r3, [sp, #28]
 801bf2e:	bfb8      	it	lt
 801bf30:	9204      	strlt	r2, [sp, #16]
 801bf32:	7823      	ldrb	r3, [r4, #0]
 801bf34:	2b2e      	cmp	r3, #46	; 0x2e
 801bf36:	d10c      	bne.n	801bf52 <_vfiprintf_r+0x15a>
 801bf38:	7863      	ldrb	r3, [r4, #1]
 801bf3a:	2b2a      	cmp	r3, #42	; 0x2a
 801bf3c:	d134      	bne.n	801bfa8 <_vfiprintf_r+0x1b0>
 801bf3e:	9b03      	ldr	r3, [sp, #12]
 801bf40:	1d1a      	adds	r2, r3, #4
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	9203      	str	r2, [sp, #12]
 801bf46:	2b00      	cmp	r3, #0
 801bf48:	bfb8      	it	lt
 801bf4a:	f04f 33ff 	movlt.w	r3, #4294967295
 801bf4e:	3402      	adds	r4, #2
 801bf50:	9305      	str	r3, [sp, #20]
 801bf52:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c028 <_vfiprintf_r+0x230>
 801bf56:	7821      	ldrb	r1, [r4, #0]
 801bf58:	2203      	movs	r2, #3
 801bf5a:	4650      	mov	r0, sl
 801bf5c:	f7e4 f9e8 	bl	8000330 <memchr>
 801bf60:	b138      	cbz	r0, 801bf72 <_vfiprintf_r+0x17a>
 801bf62:	9b04      	ldr	r3, [sp, #16]
 801bf64:	eba0 000a 	sub.w	r0, r0, sl
 801bf68:	2240      	movs	r2, #64	; 0x40
 801bf6a:	4082      	lsls	r2, r0
 801bf6c:	4313      	orrs	r3, r2
 801bf6e:	3401      	adds	r4, #1
 801bf70:	9304      	str	r3, [sp, #16]
 801bf72:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf76:	4829      	ldr	r0, [pc, #164]	; (801c01c <_vfiprintf_r+0x224>)
 801bf78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf7c:	2206      	movs	r2, #6
 801bf7e:	f7e4 f9d7 	bl	8000330 <memchr>
 801bf82:	2800      	cmp	r0, #0
 801bf84:	d03f      	beq.n	801c006 <_vfiprintf_r+0x20e>
 801bf86:	4b26      	ldr	r3, [pc, #152]	; (801c020 <_vfiprintf_r+0x228>)
 801bf88:	bb1b      	cbnz	r3, 801bfd2 <_vfiprintf_r+0x1da>
 801bf8a:	9b03      	ldr	r3, [sp, #12]
 801bf8c:	3307      	adds	r3, #7
 801bf8e:	f023 0307 	bic.w	r3, r3, #7
 801bf92:	3308      	adds	r3, #8
 801bf94:	9303      	str	r3, [sp, #12]
 801bf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf98:	443b      	add	r3, r7
 801bf9a:	9309      	str	r3, [sp, #36]	; 0x24
 801bf9c:	e768      	b.n	801be70 <_vfiprintf_r+0x78>
 801bf9e:	fb0c 3202 	mla	r2, ip, r2, r3
 801bfa2:	460c      	mov	r4, r1
 801bfa4:	2001      	movs	r0, #1
 801bfa6:	e7a6      	b.n	801bef6 <_vfiprintf_r+0xfe>
 801bfa8:	2300      	movs	r3, #0
 801bfaa:	3401      	adds	r4, #1
 801bfac:	9305      	str	r3, [sp, #20]
 801bfae:	4619      	mov	r1, r3
 801bfb0:	f04f 0c0a 	mov.w	ip, #10
 801bfb4:	4620      	mov	r0, r4
 801bfb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bfba:	3a30      	subs	r2, #48	; 0x30
 801bfbc:	2a09      	cmp	r2, #9
 801bfbe:	d903      	bls.n	801bfc8 <_vfiprintf_r+0x1d0>
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d0c6      	beq.n	801bf52 <_vfiprintf_r+0x15a>
 801bfc4:	9105      	str	r1, [sp, #20]
 801bfc6:	e7c4      	b.n	801bf52 <_vfiprintf_r+0x15a>
 801bfc8:	fb0c 2101 	mla	r1, ip, r1, r2
 801bfcc:	4604      	mov	r4, r0
 801bfce:	2301      	movs	r3, #1
 801bfd0:	e7f0      	b.n	801bfb4 <_vfiprintf_r+0x1bc>
 801bfd2:	ab03      	add	r3, sp, #12
 801bfd4:	9300      	str	r3, [sp, #0]
 801bfd6:	462a      	mov	r2, r5
 801bfd8:	4b12      	ldr	r3, [pc, #72]	; (801c024 <_vfiprintf_r+0x22c>)
 801bfda:	a904      	add	r1, sp, #16
 801bfdc:	4630      	mov	r0, r6
 801bfde:	f7fb faff 	bl	80175e0 <_printf_float>
 801bfe2:	4607      	mov	r7, r0
 801bfe4:	1c78      	adds	r0, r7, #1
 801bfe6:	d1d6      	bne.n	801bf96 <_vfiprintf_r+0x19e>
 801bfe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bfea:	07d9      	lsls	r1, r3, #31
 801bfec:	d405      	bmi.n	801bffa <_vfiprintf_r+0x202>
 801bfee:	89ab      	ldrh	r3, [r5, #12]
 801bff0:	059a      	lsls	r2, r3, #22
 801bff2:	d402      	bmi.n	801bffa <_vfiprintf_r+0x202>
 801bff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bff6:	f7fc fa73 	bl	80184e0 <__retarget_lock_release_recursive>
 801bffa:	89ab      	ldrh	r3, [r5, #12]
 801bffc:	065b      	lsls	r3, r3, #25
 801bffe:	f53f af1d 	bmi.w	801be3c <_vfiprintf_r+0x44>
 801c002:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c004:	e71c      	b.n	801be40 <_vfiprintf_r+0x48>
 801c006:	ab03      	add	r3, sp, #12
 801c008:	9300      	str	r3, [sp, #0]
 801c00a:	462a      	mov	r2, r5
 801c00c:	4b05      	ldr	r3, [pc, #20]	; (801c024 <_vfiprintf_r+0x22c>)
 801c00e:	a904      	add	r1, sp, #16
 801c010:	4630      	mov	r0, r6
 801c012:	f7fb fd6d 	bl	8017af0 <_printf_i>
 801c016:	e7e4      	b.n	801bfe2 <_vfiprintf_r+0x1ea>
 801c018:	0801c8b1 	.word	0x0801c8b1
 801c01c:	0801c8bb 	.word	0x0801c8bb
 801c020:	080175e1 	.word	0x080175e1
 801c024:	0801bdd5 	.word	0x0801bdd5
 801c028:	0801c8b7 	.word	0x0801c8b7

0801c02c <__swbuf_r>:
 801c02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c02e:	460e      	mov	r6, r1
 801c030:	4614      	mov	r4, r2
 801c032:	4605      	mov	r5, r0
 801c034:	b118      	cbz	r0, 801c03e <__swbuf_r+0x12>
 801c036:	6a03      	ldr	r3, [r0, #32]
 801c038:	b90b      	cbnz	r3, 801c03e <__swbuf_r+0x12>
 801c03a:	f7fc f90b 	bl	8018254 <__sinit>
 801c03e:	69a3      	ldr	r3, [r4, #24]
 801c040:	60a3      	str	r3, [r4, #8]
 801c042:	89a3      	ldrh	r3, [r4, #12]
 801c044:	071a      	lsls	r2, r3, #28
 801c046:	d525      	bpl.n	801c094 <__swbuf_r+0x68>
 801c048:	6923      	ldr	r3, [r4, #16]
 801c04a:	b31b      	cbz	r3, 801c094 <__swbuf_r+0x68>
 801c04c:	6823      	ldr	r3, [r4, #0]
 801c04e:	6922      	ldr	r2, [r4, #16]
 801c050:	1a98      	subs	r0, r3, r2
 801c052:	6963      	ldr	r3, [r4, #20]
 801c054:	b2f6      	uxtb	r6, r6
 801c056:	4283      	cmp	r3, r0
 801c058:	4637      	mov	r7, r6
 801c05a:	dc04      	bgt.n	801c066 <__swbuf_r+0x3a>
 801c05c:	4621      	mov	r1, r4
 801c05e:	4628      	mov	r0, r5
 801c060:	f7ff f950 	bl	801b304 <_fflush_r>
 801c064:	b9e0      	cbnz	r0, 801c0a0 <__swbuf_r+0x74>
 801c066:	68a3      	ldr	r3, [r4, #8]
 801c068:	3b01      	subs	r3, #1
 801c06a:	60a3      	str	r3, [r4, #8]
 801c06c:	6823      	ldr	r3, [r4, #0]
 801c06e:	1c5a      	adds	r2, r3, #1
 801c070:	6022      	str	r2, [r4, #0]
 801c072:	701e      	strb	r6, [r3, #0]
 801c074:	6962      	ldr	r2, [r4, #20]
 801c076:	1c43      	adds	r3, r0, #1
 801c078:	429a      	cmp	r2, r3
 801c07a:	d004      	beq.n	801c086 <__swbuf_r+0x5a>
 801c07c:	89a3      	ldrh	r3, [r4, #12]
 801c07e:	07db      	lsls	r3, r3, #31
 801c080:	d506      	bpl.n	801c090 <__swbuf_r+0x64>
 801c082:	2e0a      	cmp	r6, #10
 801c084:	d104      	bne.n	801c090 <__swbuf_r+0x64>
 801c086:	4621      	mov	r1, r4
 801c088:	4628      	mov	r0, r5
 801c08a:	f7ff f93b 	bl	801b304 <_fflush_r>
 801c08e:	b938      	cbnz	r0, 801c0a0 <__swbuf_r+0x74>
 801c090:	4638      	mov	r0, r7
 801c092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c094:	4621      	mov	r1, r4
 801c096:	4628      	mov	r0, r5
 801c098:	f000 f806 	bl	801c0a8 <__swsetup_r>
 801c09c:	2800      	cmp	r0, #0
 801c09e:	d0d5      	beq.n	801c04c <__swbuf_r+0x20>
 801c0a0:	f04f 37ff 	mov.w	r7, #4294967295
 801c0a4:	e7f4      	b.n	801c090 <__swbuf_r+0x64>
	...

0801c0a8 <__swsetup_r>:
 801c0a8:	b538      	push	{r3, r4, r5, lr}
 801c0aa:	4b2a      	ldr	r3, [pc, #168]	; (801c154 <__swsetup_r+0xac>)
 801c0ac:	4605      	mov	r5, r0
 801c0ae:	6818      	ldr	r0, [r3, #0]
 801c0b0:	460c      	mov	r4, r1
 801c0b2:	b118      	cbz	r0, 801c0bc <__swsetup_r+0x14>
 801c0b4:	6a03      	ldr	r3, [r0, #32]
 801c0b6:	b90b      	cbnz	r3, 801c0bc <__swsetup_r+0x14>
 801c0b8:	f7fc f8cc 	bl	8018254 <__sinit>
 801c0bc:	89a3      	ldrh	r3, [r4, #12]
 801c0be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c0c2:	0718      	lsls	r0, r3, #28
 801c0c4:	d422      	bmi.n	801c10c <__swsetup_r+0x64>
 801c0c6:	06d9      	lsls	r1, r3, #27
 801c0c8:	d407      	bmi.n	801c0da <__swsetup_r+0x32>
 801c0ca:	2309      	movs	r3, #9
 801c0cc:	602b      	str	r3, [r5, #0]
 801c0ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c0d2:	81a3      	strh	r3, [r4, #12]
 801c0d4:	f04f 30ff 	mov.w	r0, #4294967295
 801c0d8:	e034      	b.n	801c144 <__swsetup_r+0x9c>
 801c0da:	0758      	lsls	r0, r3, #29
 801c0dc:	d512      	bpl.n	801c104 <__swsetup_r+0x5c>
 801c0de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c0e0:	b141      	cbz	r1, 801c0f4 <__swsetup_r+0x4c>
 801c0e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c0e6:	4299      	cmp	r1, r3
 801c0e8:	d002      	beq.n	801c0f0 <__swsetup_r+0x48>
 801c0ea:	4628      	mov	r0, r5
 801c0ec:	f7fd f80c 	bl	8019108 <_free_r>
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	6363      	str	r3, [r4, #52]	; 0x34
 801c0f4:	89a3      	ldrh	r3, [r4, #12]
 801c0f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c0fa:	81a3      	strh	r3, [r4, #12]
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	6063      	str	r3, [r4, #4]
 801c100:	6923      	ldr	r3, [r4, #16]
 801c102:	6023      	str	r3, [r4, #0]
 801c104:	89a3      	ldrh	r3, [r4, #12]
 801c106:	f043 0308 	orr.w	r3, r3, #8
 801c10a:	81a3      	strh	r3, [r4, #12]
 801c10c:	6923      	ldr	r3, [r4, #16]
 801c10e:	b94b      	cbnz	r3, 801c124 <__swsetup_r+0x7c>
 801c110:	89a3      	ldrh	r3, [r4, #12]
 801c112:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c11a:	d003      	beq.n	801c124 <__swsetup_r+0x7c>
 801c11c:	4621      	mov	r1, r4
 801c11e:	4628      	mov	r0, r5
 801c120:	f000 f884 	bl	801c22c <__smakebuf_r>
 801c124:	89a0      	ldrh	r0, [r4, #12]
 801c126:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c12a:	f010 0301 	ands.w	r3, r0, #1
 801c12e:	d00a      	beq.n	801c146 <__swsetup_r+0x9e>
 801c130:	2300      	movs	r3, #0
 801c132:	60a3      	str	r3, [r4, #8]
 801c134:	6963      	ldr	r3, [r4, #20]
 801c136:	425b      	negs	r3, r3
 801c138:	61a3      	str	r3, [r4, #24]
 801c13a:	6923      	ldr	r3, [r4, #16]
 801c13c:	b943      	cbnz	r3, 801c150 <__swsetup_r+0xa8>
 801c13e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c142:	d1c4      	bne.n	801c0ce <__swsetup_r+0x26>
 801c144:	bd38      	pop	{r3, r4, r5, pc}
 801c146:	0781      	lsls	r1, r0, #30
 801c148:	bf58      	it	pl
 801c14a:	6963      	ldrpl	r3, [r4, #20]
 801c14c:	60a3      	str	r3, [r4, #8]
 801c14e:	e7f4      	b.n	801c13a <__swsetup_r+0x92>
 801c150:	2000      	movs	r0, #0
 801c152:	e7f7      	b.n	801c144 <__swsetup_r+0x9c>
 801c154:	24000158 	.word	0x24000158

0801c158 <_raise_r>:
 801c158:	291f      	cmp	r1, #31
 801c15a:	b538      	push	{r3, r4, r5, lr}
 801c15c:	4604      	mov	r4, r0
 801c15e:	460d      	mov	r5, r1
 801c160:	d904      	bls.n	801c16c <_raise_r+0x14>
 801c162:	2316      	movs	r3, #22
 801c164:	6003      	str	r3, [r0, #0]
 801c166:	f04f 30ff 	mov.w	r0, #4294967295
 801c16a:	bd38      	pop	{r3, r4, r5, pc}
 801c16c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c16e:	b112      	cbz	r2, 801c176 <_raise_r+0x1e>
 801c170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c174:	b94b      	cbnz	r3, 801c18a <_raise_r+0x32>
 801c176:	4620      	mov	r0, r4
 801c178:	f000 f830 	bl	801c1dc <_getpid_r>
 801c17c:	462a      	mov	r2, r5
 801c17e:	4601      	mov	r1, r0
 801c180:	4620      	mov	r0, r4
 801c182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c186:	f000 b817 	b.w	801c1b8 <_kill_r>
 801c18a:	2b01      	cmp	r3, #1
 801c18c:	d00a      	beq.n	801c1a4 <_raise_r+0x4c>
 801c18e:	1c59      	adds	r1, r3, #1
 801c190:	d103      	bne.n	801c19a <_raise_r+0x42>
 801c192:	2316      	movs	r3, #22
 801c194:	6003      	str	r3, [r0, #0]
 801c196:	2001      	movs	r0, #1
 801c198:	e7e7      	b.n	801c16a <_raise_r+0x12>
 801c19a:	2400      	movs	r4, #0
 801c19c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c1a0:	4628      	mov	r0, r5
 801c1a2:	4798      	blx	r3
 801c1a4:	2000      	movs	r0, #0
 801c1a6:	e7e0      	b.n	801c16a <_raise_r+0x12>

0801c1a8 <raise>:
 801c1a8:	4b02      	ldr	r3, [pc, #8]	; (801c1b4 <raise+0xc>)
 801c1aa:	4601      	mov	r1, r0
 801c1ac:	6818      	ldr	r0, [r3, #0]
 801c1ae:	f7ff bfd3 	b.w	801c158 <_raise_r>
 801c1b2:	bf00      	nop
 801c1b4:	24000158 	.word	0x24000158

0801c1b8 <_kill_r>:
 801c1b8:	b538      	push	{r3, r4, r5, lr}
 801c1ba:	4d07      	ldr	r5, [pc, #28]	; (801c1d8 <_kill_r+0x20>)
 801c1bc:	2300      	movs	r3, #0
 801c1be:	4604      	mov	r4, r0
 801c1c0:	4608      	mov	r0, r1
 801c1c2:	4611      	mov	r1, r2
 801c1c4:	602b      	str	r3, [r5, #0]
 801c1c6:	f7e7 fc8f 	bl	8003ae8 <_kill>
 801c1ca:	1c43      	adds	r3, r0, #1
 801c1cc:	d102      	bne.n	801c1d4 <_kill_r+0x1c>
 801c1ce:	682b      	ldr	r3, [r5, #0]
 801c1d0:	b103      	cbz	r3, 801c1d4 <_kill_r+0x1c>
 801c1d2:	6023      	str	r3, [r4, #0]
 801c1d4:	bd38      	pop	{r3, r4, r5, pc}
 801c1d6:	bf00      	nop
 801c1d8:	240034b0 	.word	0x240034b0

0801c1dc <_getpid_r>:
 801c1dc:	f7e7 bc7c 	b.w	8003ad8 <_getpid>

0801c1e0 <__swhatbuf_r>:
 801c1e0:	b570      	push	{r4, r5, r6, lr}
 801c1e2:	460c      	mov	r4, r1
 801c1e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1e8:	2900      	cmp	r1, #0
 801c1ea:	b096      	sub	sp, #88	; 0x58
 801c1ec:	4615      	mov	r5, r2
 801c1ee:	461e      	mov	r6, r3
 801c1f0:	da0d      	bge.n	801c20e <__swhatbuf_r+0x2e>
 801c1f2:	89a3      	ldrh	r3, [r4, #12]
 801c1f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c1f8:	f04f 0100 	mov.w	r1, #0
 801c1fc:	bf0c      	ite	eq
 801c1fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c202:	2340      	movne	r3, #64	; 0x40
 801c204:	2000      	movs	r0, #0
 801c206:	6031      	str	r1, [r6, #0]
 801c208:	602b      	str	r3, [r5, #0]
 801c20a:	b016      	add	sp, #88	; 0x58
 801c20c:	bd70      	pop	{r4, r5, r6, pc}
 801c20e:	466a      	mov	r2, sp
 801c210:	f000 f848 	bl	801c2a4 <_fstat_r>
 801c214:	2800      	cmp	r0, #0
 801c216:	dbec      	blt.n	801c1f2 <__swhatbuf_r+0x12>
 801c218:	9901      	ldr	r1, [sp, #4]
 801c21a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c21e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c222:	4259      	negs	r1, r3
 801c224:	4159      	adcs	r1, r3
 801c226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c22a:	e7eb      	b.n	801c204 <__swhatbuf_r+0x24>

0801c22c <__smakebuf_r>:
 801c22c:	898b      	ldrh	r3, [r1, #12]
 801c22e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c230:	079d      	lsls	r5, r3, #30
 801c232:	4606      	mov	r6, r0
 801c234:	460c      	mov	r4, r1
 801c236:	d507      	bpl.n	801c248 <__smakebuf_r+0x1c>
 801c238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c23c:	6023      	str	r3, [r4, #0]
 801c23e:	6123      	str	r3, [r4, #16]
 801c240:	2301      	movs	r3, #1
 801c242:	6163      	str	r3, [r4, #20]
 801c244:	b002      	add	sp, #8
 801c246:	bd70      	pop	{r4, r5, r6, pc}
 801c248:	ab01      	add	r3, sp, #4
 801c24a:	466a      	mov	r2, sp
 801c24c:	f7ff ffc8 	bl	801c1e0 <__swhatbuf_r>
 801c250:	9900      	ldr	r1, [sp, #0]
 801c252:	4605      	mov	r5, r0
 801c254:	4630      	mov	r0, r6
 801c256:	f7fc ffcb 	bl	80191f0 <_malloc_r>
 801c25a:	b948      	cbnz	r0, 801c270 <__smakebuf_r+0x44>
 801c25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c260:	059a      	lsls	r2, r3, #22
 801c262:	d4ef      	bmi.n	801c244 <__smakebuf_r+0x18>
 801c264:	f023 0303 	bic.w	r3, r3, #3
 801c268:	f043 0302 	orr.w	r3, r3, #2
 801c26c:	81a3      	strh	r3, [r4, #12]
 801c26e:	e7e3      	b.n	801c238 <__smakebuf_r+0xc>
 801c270:	89a3      	ldrh	r3, [r4, #12]
 801c272:	6020      	str	r0, [r4, #0]
 801c274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c278:	81a3      	strh	r3, [r4, #12]
 801c27a:	9b00      	ldr	r3, [sp, #0]
 801c27c:	6163      	str	r3, [r4, #20]
 801c27e:	9b01      	ldr	r3, [sp, #4]
 801c280:	6120      	str	r0, [r4, #16]
 801c282:	b15b      	cbz	r3, 801c29c <__smakebuf_r+0x70>
 801c284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c288:	4630      	mov	r0, r6
 801c28a:	f000 f81d 	bl	801c2c8 <_isatty_r>
 801c28e:	b128      	cbz	r0, 801c29c <__smakebuf_r+0x70>
 801c290:	89a3      	ldrh	r3, [r4, #12]
 801c292:	f023 0303 	bic.w	r3, r3, #3
 801c296:	f043 0301 	orr.w	r3, r3, #1
 801c29a:	81a3      	strh	r3, [r4, #12]
 801c29c:	89a3      	ldrh	r3, [r4, #12]
 801c29e:	431d      	orrs	r5, r3
 801c2a0:	81a5      	strh	r5, [r4, #12]
 801c2a2:	e7cf      	b.n	801c244 <__smakebuf_r+0x18>

0801c2a4 <_fstat_r>:
 801c2a4:	b538      	push	{r3, r4, r5, lr}
 801c2a6:	4d07      	ldr	r5, [pc, #28]	; (801c2c4 <_fstat_r+0x20>)
 801c2a8:	2300      	movs	r3, #0
 801c2aa:	4604      	mov	r4, r0
 801c2ac:	4608      	mov	r0, r1
 801c2ae:	4611      	mov	r1, r2
 801c2b0:	602b      	str	r3, [r5, #0]
 801c2b2:	f7e7 fc78 	bl	8003ba6 <_fstat>
 801c2b6:	1c43      	adds	r3, r0, #1
 801c2b8:	d102      	bne.n	801c2c0 <_fstat_r+0x1c>
 801c2ba:	682b      	ldr	r3, [r5, #0]
 801c2bc:	b103      	cbz	r3, 801c2c0 <_fstat_r+0x1c>
 801c2be:	6023      	str	r3, [r4, #0]
 801c2c0:	bd38      	pop	{r3, r4, r5, pc}
 801c2c2:	bf00      	nop
 801c2c4:	240034b0 	.word	0x240034b0

0801c2c8 <_isatty_r>:
 801c2c8:	b538      	push	{r3, r4, r5, lr}
 801c2ca:	4d06      	ldr	r5, [pc, #24]	; (801c2e4 <_isatty_r+0x1c>)
 801c2cc:	2300      	movs	r3, #0
 801c2ce:	4604      	mov	r4, r0
 801c2d0:	4608      	mov	r0, r1
 801c2d2:	602b      	str	r3, [r5, #0]
 801c2d4:	f7e7 fc77 	bl	8003bc6 <_isatty>
 801c2d8:	1c43      	adds	r3, r0, #1
 801c2da:	d102      	bne.n	801c2e2 <_isatty_r+0x1a>
 801c2dc:	682b      	ldr	r3, [r5, #0]
 801c2de:	b103      	cbz	r3, 801c2e2 <_isatty_r+0x1a>
 801c2e0:	6023      	str	r3, [r4, #0]
 801c2e2:	bd38      	pop	{r3, r4, r5, pc}
 801c2e4:	240034b0 	.word	0x240034b0

0801c2e8 <_init>:
 801c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2ea:	bf00      	nop
 801c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2ee:	bc08      	pop	{r3}
 801c2f0:	469e      	mov	lr, r3
 801c2f2:	4770      	bx	lr

0801c2f4 <_fini>:
 801c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2f6:	bf00      	nop
 801c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c2fa:	bc08      	pop	{r3}
 801c2fc:	469e      	mov	lr, r3
 801c2fe:	4770      	bx	lr
