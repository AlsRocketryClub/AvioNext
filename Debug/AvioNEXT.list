
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d670  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800d93c  0800d93c  0001d93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800da38  0800da38  0001da38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800da40  0800da40  0001da40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800da44  0800da44  0001da44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800da48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001710  24000010  0800da58  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001720  0800da58  00021720  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029b3b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003bff  00000000  00000000  00049b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000020a8  00000000  00000000  0004d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001f50  00000000  00000000  0004f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037da0  00000000  00000000  00051770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000292b1  00000000  00000000  00089510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172c35  00000000  00000000  000b27c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002253f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000091ac  00000000  00000000  00225448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800d924 	.word	0x0800d924

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800d924 	.word	0x0800d924

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b974 	b.w	800060c <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	4604      	mov	r4, r0
 8000344:	468e      	mov	lr, r1
 8000346:	2b00      	cmp	r3, #0
 8000348:	d14d      	bne.n	80003e6 <__udivmoddi4+0xaa>
 800034a:	428a      	cmp	r2, r1
 800034c:	4694      	mov	ip, r2
 800034e:	d969      	bls.n	8000424 <__udivmoddi4+0xe8>
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	b152      	cbz	r2, 800036c <__udivmoddi4+0x30>
 8000356:	fa01 f302 	lsl.w	r3, r1, r2
 800035a:	f1c2 0120 	rsb	r1, r2, #32
 800035e:	fa20 f101 	lsr.w	r1, r0, r1
 8000362:	fa0c fc02 	lsl.w	ip, ip, r2
 8000366:	ea41 0e03 	orr.w	lr, r1, r3
 800036a:	4094      	lsls	r4, r2
 800036c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000370:	0c21      	lsrs	r1, r4, #16
 8000372:	fbbe f6f8 	udiv	r6, lr, r8
 8000376:	fa1f f78c 	uxth.w	r7, ip
 800037a:	fb08 e316 	mls	r3, r8, r6, lr
 800037e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000382:	fb06 f107 	mul.w	r1, r6, r7
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 811f 	bcs.w	80005d4 <__udivmoddi4+0x298>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 811c 	bls.w	80005d4 <__udivmoddi4+0x298>
 800039c:	3e02      	subs	r6, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	42a7      	cmp	r7, r4
 80003b6:	d90a      	bls.n	80003ce <__udivmoddi4+0x92>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c0:	f080 810a 	bcs.w	80005d8 <__udivmoddi4+0x29c>
 80003c4:	42a7      	cmp	r7, r4
 80003c6:	f240 8107 	bls.w	80005d8 <__udivmoddi4+0x29c>
 80003ca:	4464      	add	r4, ip
 80003cc:	3802      	subs	r0, #2
 80003ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d2:	1be4      	subs	r4, r4, r7
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa4>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xc2>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80ef 	beq.w	80005ce <__udivmoddi4+0x292>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x160>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd4>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80f9 	bhi.w	8000602 <__udivmoddi4+0x2c6>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	469e      	mov	lr, r3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa4>
 800041e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa4>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xec>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 8092 	bne.w	8000556 <__udivmoddi4+0x21a>
 8000432:	eba1 010c 	sub.w	r1, r1, ip
 8000436:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	2601      	movs	r6, #1
 8000440:	0c20      	lsrs	r0, r4, #16
 8000442:	fbb1 f3f7 	udiv	r3, r1, r7
 8000446:	fb07 1113 	mls	r1, r7, r3, r1
 800044a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044e:	fb0e f003 	mul.w	r0, lr, r3
 8000452:	4288      	cmp	r0, r1
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x12c>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f103 38ff 	add.w	r8, r3, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x12a>
 8000460:	4288      	cmp	r0, r1
 8000462:	f200 80cb 	bhi.w	80005fc <__udivmoddi4+0x2c0>
 8000466:	4643      	mov	r3, r8
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1110 	mls	r1, r7, r0, r1
 8000474:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000478:	fb0e fe00 	mul.w	lr, lr, r0
 800047c:	45a6      	cmp	lr, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x156>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f100 31ff 	add.w	r1, r0, #4294967295
 8000488:	d202      	bcs.n	8000490 <__udivmoddi4+0x154>
 800048a:	45a6      	cmp	lr, r4
 800048c:	f200 80bb 	bhi.w	8000606 <__udivmoddi4+0x2ca>
 8000490:	4608      	mov	r0, r1
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049a:	e79c      	b.n	80003d6 <__udivmoddi4+0x9a>
 800049c:	f1c6 0720 	rsb	r7, r6, #32
 80004a0:	40b3      	lsls	r3, r6
 80004a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80004aa:	fa20 f407 	lsr.w	r4, r0, r7
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	431c      	orrs	r4, r3
 80004b4:	40f9      	lsrs	r1, r7
 80004b6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ba:	fa00 f306 	lsl.w	r3, r0, r6
 80004be:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c2:	0c20      	lsrs	r0, r4, #16
 80004c4:	fa1f fe8c 	uxth.w	lr, ip
 80004c8:	fb09 1118 	mls	r1, r9, r8, r1
 80004cc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d0:	fb08 f00e 	mul.w	r0, r8, lr
 80004d4:	4288      	cmp	r0, r1
 80004d6:	fa02 f206 	lsl.w	r2, r2, r6
 80004da:	d90b      	bls.n	80004f4 <__udivmoddi4+0x1b8>
 80004dc:	eb1c 0101 	adds.w	r1, ip, r1
 80004e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e4:	f080 8088 	bcs.w	80005f8 <__udivmoddi4+0x2bc>
 80004e8:	4288      	cmp	r0, r1
 80004ea:	f240 8085 	bls.w	80005f8 <__udivmoddi4+0x2bc>
 80004ee:	f1a8 0802 	sub.w	r8, r8, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004fc:	fb09 1110 	mls	r1, r9, r0, r1
 8000500:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000504:	fb00 fe0e 	mul.w	lr, r0, lr
 8000508:	458e      	cmp	lr, r1
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x1e2>
 800050c:	eb1c 0101 	adds.w	r1, ip, r1
 8000510:	f100 34ff 	add.w	r4, r0, #4294967295
 8000514:	d26c      	bcs.n	80005f0 <__udivmoddi4+0x2b4>
 8000516:	458e      	cmp	lr, r1
 8000518:	d96a      	bls.n	80005f0 <__udivmoddi4+0x2b4>
 800051a:	3802      	subs	r0, #2
 800051c:	4461      	add	r1, ip
 800051e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000522:	fba0 9402 	umull	r9, r4, r0, r2
 8000526:	eba1 010e 	sub.w	r1, r1, lr
 800052a:	42a1      	cmp	r1, r4
 800052c:	46c8      	mov	r8, r9
 800052e:	46a6      	mov	lr, r4
 8000530:	d356      	bcc.n	80005e0 <__udivmoddi4+0x2a4>
 8000532:	d053      	beq.n	80005dc <__udivmoddi4+0x2a0>
 8000534:	b15d      	cbz	r5, 800054e <__udivmoddi4+0x212>
 8000536:	ebb3 0208 	subs.w	r2, r3, r8
 800053a:	eb61 010e 	sbc.w	r1, r1, lr
 800053e:	fa01 f707 	lsl.w	r7, r1, r7
 8000542:	fa22 f306 	lsr.w	r3, r2, r6
 8000546:	40f1      	lsrs	r1, r6
 8000548:	431f      	orrs	r7, r3
 800054a:	e9c5 7100 	strd	r7, r1, [r5]
 800054e:	2600      	movs	r6, #0
 8000550:	4631      	mov	r1, r6
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	40d8      	lsrs	r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa21 f303 	lsr.w	r3, r1, r3
 8000564:	4091      	lsls	r1, r2
 8000566:	4301      	orrs	r1, r0
 8000568:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800056c:	fa1f fe8c 	uxth.w	lr, ip
 8000570:	fbb3 f0f7 	udiv	r0, r3, r7
 8000574:	fb07 3610 	mls	r6, r7, r0, r3
 8000578:	0c0b      	lsrs	r3, r1, #16
 800057a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800057e:	fb00 f60e 	mul.w	r6, r0, lr
 8000582:	429e      	cmp	r6, r3
 8000584:	fa04 f402 	lsl.w	r4, r4, r2
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x260>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000592:	d22f      	bcs.n	80005f4 <__udivmoddi4+0x2b8>
 8000594:	429e      	cmp	r6, r3
 8000596:	d92d      	bls.n	80005f4 <__udivmoddi4+0x2b8>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1b9b      	subs	r3, r3, r6
 800059e:	b289      	uxth	r1, r1
 80005a0:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a4:	fb07 3316 	mls	r3, r7, r6, r3
 80005a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ac:	fb06 f30e 	mul.w	r3, r6, lr
 80005b0:	428b      	cmp	r3, r1
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x28a>
 80005b4:	eb1c 0101 	adds.w	r1, ip, r1
 80005b8:	f106 38ff 	add.w	r8, r6, #4294967295
 80005bc:	d216      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d914      	bls.n	80005ec <__udivmoddi4+0x2b0>
 80005c2:	3e02      	subs	r6, #2
 80005c4:	4461      	add	r1, ip
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005cc:	e738      	b.n	8000440 <__udivmoddi4+0x104>
 80005ce:	462e      	mov	r6, r5
 80005d0:	4628      	mov	r0, r5
 80005d2:	e705      	b.n	80003e0 <__udivmoddi4+0xa4>
 80005d4:	4606      	mov	r6, r0
 80005d6:	e6e3      	b.n	80003a0 <__udivmoddi4+0x64>
 80005d8:	4618      	mov	r0, r3
 80005da:	e6f8      	b.n	80003ce <__udivmoddi4+0x92>
 80005dc:	454b      	cmp	r3, r9
 80005de:	d2a9      	bcs.n	8000534 <__udivmoddi4+0x1f8>
 80005e0:	ebb9 0802 	subs.w	r8, r9, r2
 80005e4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e8:	3801      	subs	r0, #1
 80005ea:	e7a3      	b.n	8000534 <__udivmoddi4+0x1f8>
 80005ec:	4646      	mov	r6, r8
 80005ee:	e7ea      	b.n	80005c6 <__udivmoddi4+0x28a>
 80005f0:	4620      	mov	r0, r4
 80005f2:	e794      	b.n	800051e <__udivmoddi4+0x1e2>
 80005f4:	4640      	mov	r0, r8
 80005f6:	e7d1      	b.n	800059c <__udivmoddi4+0x260>
 80005f8:	46d0      	mov	r8, sl
 80005fa:	e77b      	b.n	80004f4 <__udivmoddi4+0x1b8>
 80005fc:	3b02      	subs	r3, #2
 80005fe:	4461      	add	r1, ip
 8000600:	e732      	b.n	8000468 <__udivmoddi4+0x12c>
 8000602:	4630      	mov	r0, r6
 8000604:	e709      	b.n	800041a <__udivmoddi4+0xde>
 8000606:	4464      	add	r4, ip
 8000608:	3802      	subs	r0, #2
 800060a:	e742      	b.n	8000492 <__udivmoddi4+0x156>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <setLEDs>:
/* USER CODE BEGIN 0 */
uint32_t LED_Data_2[NUM_LEDS_1][3];

volatile int datasentflag = 0;

void setLEDs(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b08e      	sub	sp, #56	; 0x38
 8000614:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000616:	2300      	movs	r3, #0
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
 800061a:	e181      	b.n	8000920 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 800061c:	4aa1      	ldr	r2, [pc, #644]	; (80008a4 <setLEDs+0x294>)
 800061e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000620:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000624:	2b03      	cmp	r3, #3
 8000626:	f200 8177 	bhi.w	8000918 <setLEDs+0x308>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <setLEDs+0x20>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000641 	.word	0x08000641
 8000634:	080006f1 	.word	0x080006f1
 8000638:	080007a1 	.word	0x080007a1
 800063c:	08000851 	.word	0x08000851
		case 0:
			for (int j = 0; j < 3; j++) {
 8000640:	2300      	movs	r3, #0
 8000642:	633b      	str	r3, [r7, #48]	; 0x30
 8000644:	e042      	b.n	80006cc <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000646:	2300      	movs	r3, #0
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800064a:	e039      	b.n	80006c0 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800064c:	4996      	ldr	r1, [pc, #600]	; (80008a8 <setLEDs+0x298>)
 800064e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000650:	4613      	mov	r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	4413      	add	r3, r2
 8000656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000658:	4413      	add	r3, r2
 800065a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800065e:	2180      	movs	r1, #128	; 0x80
 8000660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000662:	fa41 f202 	asr.w	r2, r1, r2
 8000666:	4013      	ands	r3, r2
 8000668:	2b00      	cmp	r3, #0
 800066a:	d013      	beq.n	8000694 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 800066c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800066e:	00da      	lsls	r2, r3, #3
 8000670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000672:	18d1      	adds	r1, r2, r3
 8000674:	4a8b      	ldr	r2, [pc, #556]	; (80008a4 <setLEDs+0x294>)
 8000676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000678:	00db      	lsls	r3, r3, #3
 800067a:	4413      	add	r3, r2
 800067c:	685a      	ldr	r2, [r3, #4]
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	440b      	add	r3, r1
 8000688:	3308      	adds	r3, #8
 800068a:	4a88      	ldr	r2, [pc, #544]	; (80008ac <setLEDs+0x29c>)
 800068c:	213c      	movs	r1, #60	; 0x3c
 800068e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000692:	e012      	b.n	80006ba <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000696:	00da      	lsls	r2, r3, #3
 8000698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069a:	18d1      	adds	r1, r2, r3
 800069c:	4a81      	ldr	r2, [pc, #516]	; (80008a4 <setLEDs+0x294>)
 800069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a0:	00db      	lsls	r3, r3, #3
 80006a2:	4413      	add	r3, r2
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	4613      	mov	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	4413      	add	r3, r2
 80006ac:	00db      	lsls	r3, r3, #3
 80006ae:	440b      	add	r3, r1
 80006b0:	3308      	adds	r3, #8
 80006b2:	4a7e      	ldr	r2, [pc, #504]	; (80008ac <setLEDs+0x29c>)
 80006b4:	211e      	movs	r1, #30
 80006b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	3301      	adds	r3, #1
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	ddc2      	ble.n	800064c <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3301      	adds	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	ddb9      	ble.n	8000646 <setLEDs+0x36>
					}
				}
			}
			for (int i = NUM_LEDS_0 * 24; i < (NUM_LEDS_0 * 24) + 50; i++) {
 80006d2:	2378      	movs	r3, #120	; 0x78
 80006d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80006d6:	e007      	b.n	80006e8 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 80006d8:	4a74      	ldr	r2, [pc, #464]	; (80008ac <setLEDs+0x29c>)
 80006da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006dc:	2100      	movs	r1, #0
 80006de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = NUM_LEDS_0 * 24; i < (NUM_LEDS_0 * 24) + 50; i++) {
 80006e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e4:	3301      	adds	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80006e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ea:	2ba9      	cmp	r3, #169	; 0xa9
 80006ec:	ddf4      	ble.n	80006d8 <setLEDs+0xc8>
			}
			break;
 80006ee:	e114      	b.n	800091a <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
 80006f4:	e042      	b.n	800077c <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
 80006fa:	e039      	b.n	8000770 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80006fc:	496a      	ldr	r1, [pc, #424]	; (80008a8 <setLEDs+0x298>)
 80006fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000708:	4413      	add	r3, r2
 800070a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800070e:	2180      	movs	r1, #128	; 0x80
 8000710:	6a3a      	ldr	r2, [r7, #32]
 8000712:	fa41 f202 	asr.w	r2, r1, r2
 8000716:	4013      	ands	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d013      	beq.n	8000744 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 800071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800071e:	00da      	lsls	r2, r3, #3
 8000720:	6a3b      	ldr	r3, [r7, #32]
 8000722:	18d1      	adds	r1, r2, r3
 8000724:	4a5f      	ldr	r2, [pc, #380]	; (80008a4 <setLEDs+0x294>)
 8000726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	4413      	add	r3, r2
 800072c:	685a      	ldr	r2, [r3, #4]
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3308      	adds	r3, #8
 800073a:	4a5d      	ldr	r2, [pc, #372]	; (80008b0 <setLEDs+0x2a0>)
 800073c:	213c      	movs	r1, #60	; 0x3c
 800073e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000742:	e012      	b.n	800076a <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000746:	00da      	lsls	r2, r3, #3
 8000748:	6a3b      	ldr	r3, [r7, #32]
 800074a:	18d1      	adds	r1, r2, r3
 800074c:	4a55      	ldr	r2, [pc, #340]	; (80008a4 <setLEDs+0x294>)
 800074e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3308      	adds	r3, #8
 8000762:	4a53      	ldr	r2, [pc, #332]	; (80008b0 <setLEDs+0x2a0>)
 8000764:	211e      	movs	r1, #30
 8000766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800076a:	6a3b      	ldr	r3, [r7, #32]
 800076c:	3301      	adds	r3, #1
 800076e:	623b      	str	r3, [r7, #32]
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	2b07      	cmp	r3, #7
 8000774:	ddc2      	ble.n	80006fc <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
 800077c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800077e:	2b02      	cmp	r3, #2
 8000780:	ddb9      	ble.n	80006f6 <setLEDs+0xe6>
					}
				}
			}
			for (int i = NUM_LEDS_1 * 24; i < (NUM_LEDS_1 * 24) + 50; i++) {
 8000782:	2378      	movs	r3, #120	; 0x78
 8000784:	61fb      	str	r3, [r7, #28]
 8000786:	e007      	b.n	8000798 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000788:	4a49      	ldr	r2, [pc, #292]	; (80008b0 <setLEDs+0x2a0>)
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	2100      	movs	r1, #0
 800078e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = NUM_LEDS_1 * 24; i < (NUM_LEDS_1 * 24) + 50; i++) {
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3301      	adds	r3, #1
 8000796:	61fb      	str	r3, [r7, #28]
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	2ba9      	cmp	r3, #169	; 0xa9
 800079c:	ddf4      	ble.n	8000788 <setLEDs+0x178>
			}
			break;
 800079e:	e0bc      	b.n	800091a <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	e042      	b.n	800082c <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e039      	b.n	8000820 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80007ac:	493e      	ldr	r1, [pc, #248]	; (80008a8 <setLEDs+0x298>)
 80007ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007b0:	4613      	mov	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	4413      	add	r3, r2
 80007b6:	69ba      	ldr	r2, [r7, #24]
 80007b8:	4413      	add	r3, r2
 80007ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007be:	2180      	movs	r1, #128	; 0x80
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	fa41 f202 	asr.w	r2, r1, r2
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d013      	beq.n	80007f4 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	00da      	lsls	r2, r3, #3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	18d1      	adds	r1, r2, r3
 80007d4:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <setLEDs+0x294>)
 80007d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	4413      	add	r3, r2
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4613      	mov	r3, r2
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	4413      	add	r3, r2
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	440b      	add	r3, r1
 80007e8:	3308      	adds	r3, #8
 80007ea:	4a32      	ldr	r2, [pc, #200]	; (80008b4 <setLEDs+0x2a4>)
 80007ec:	213c      	movs	r1, #60	; 0x3c
 80007ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80007f2:	e012      	b.n	800081a <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	00da      	lsls	r2, r3, #3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	18d1      	adds	r1, r2, r3
 80007fc:	4a29      	ldr	r2, [pc, #164]	; (80008a4 <setLEDs+0x294>)
 80007fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	4413      	add	r3, r2
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	3308      	adds	r3, #8
 8000812:	4a28      	ldr	r2, [pc, #160]	; (80008b4 <setLEDs+0x2a4>)
 8000814:	211e      	movs	r1, #30
 8000816:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	3301      	adds	r3, #1
 800081e:	617b      	str	r3, [r7, #20]
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	2b07      	cmp	r3, #7
 8000824:	ddc2      	ble.n	80007ac <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	3301      	adds	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	2b02      	cmp	r3, #2
 8000830:	ddb9      	ble.n	80007a6 <setLEDs+0x196>
					}
				}
			}
			for (int i = NUM_LEDS_2 * 24; i < (NUM_LEDS_2 * 24) + 50; i++) {
 8000832:	2330      	movs	r3, #48	; 0x30
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	e007      	b.n	8000848 <setLEDs+0x238>
				LED_PWM_Data_0[i] = 0;
 8000838:	4a1c      	ldr	r2, [pc, #112]	; (80008ac <setLEDs+0x29c>)
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	2100      	movs	r1, #0
 800083e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = NUM_LEDS_2 * 24; i < (NUM_LEDS_2 * 24) + 50; i++) {
 8000842:	693b      	ldr	r3, [r7, #16]
 8000844:	3301      	adds	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	2b61      	cmp	r3, #97	; 0x61
 800084c:	ddf4      	ble.n	8000838 <setLEDs+0x228>
			}
			break;
 800084e:	e064      	b.n	800091a <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000850:	2300      	movs	r3, #0
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	e04e      	b.n	80008f4 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000856:	2300      	movs	r3, #0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	e045      	b.n	80008e8 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 800085c:	4912      	ldr	r1, [pc, #72]	; (80008a8 <setLEDs+0x298>)
 800085e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4413      	add	r3, r2
 800086a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086e:	2180      	movs	r1, #128	; 0x80
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	fa41 f202 	asr.w	r2, r1, r2
 8000876:	4013      	ands	r3, r2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d01f      	beq.n	80008bc <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	00da      	lsls	r2, r3, #3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	18d1      	adds	r1, r2, r3
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <setLEDs+0x294>)
 8000886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	4413      	add	r3, r2
 800088c:	685a      	ldr	r2, [r3, #4]
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	440b      	add	r3, r1
 8000898:	3308      	adds	r3, #8
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <setLEDs+0x2a8>)
 800089c:	213c      	movs	r1, #60	; 0x3c
 800089e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80008a2:	e01e      	b.n	80008e2 <setLEDs+0x2d2>
 80008a4:	0800d988 	.word	0x0800d988
 80008a8:	2400090c 	.word	0x2400090c
 80008ac:	2400002c 	.word	0x2400002c
 80008b0:	240002f4 	.word	0x240002f4
 80008b4:	240005bc 	.word	0x240005bc
 80008b8:	24000764 	.word	0x24000764
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	00da      	lsls	r2, r3, #3
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	18d1      	adds	r1, r2, r3
 80008c4:	4a26      	ldr	r2, [pc, #152]	; (8000960 <setLEDs+0x350>)
 80008c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	4413      	add	r3, r2
 80008cc:	685a      	ldr	r2, [r3, #4]
 80008ce:	4613      	mov	r3, r2
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	440b      	add	r3, r1
 80008d8:	3308      	adds	r3, #8
 80008da:	4a22      	ldr	r2, [pc, #136]	; (8000964 <setLEDs+0x354>)
 80008dc:	211e      	movs	r1, #30
 80008de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	3301      	adds	r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	ddb6      	ble.n	800085c <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	ddad      	ble.n	8000856 <setLEDs+0x246>
					}
				}
			}
			for (int i = NUM_LEDS_3 * 24; i < (NUM_LEDS_3 * 24) + 50; i++) {
 80008fa:	2330      	movs	r3, #48	; 0x30
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	e007      	b.n	8000910 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000900:	4a18      	ldr	r2, [pc, #96]	; (8000964 <setLEDs+0x354>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2100      	movs	r1, #0
 8000906:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = NUM_LEDS_3 * 24; i < (NUM_LEDS_3 * 24) + 50; i++) {
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3301      	adds	r3, #1
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b61      	cmp	r3, #97	; 0x61
 8000914:	ddf4      	ble.n	8000900 <setLEDs+0x2f0>
			}
			break;
 8000916:	e000      	b.n	800091a <setLEDs+0x30a>
		default:
			break;
 8000918:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800091a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800091c:	3301      	adds	r3, #1
 800091e:	637b      	str	r3, [r7, #52]	; 0x34
 8000920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000922:	2b0d      	cmp	r3, #13
 8000924:	f77f ae7a 	ble.w	800061c <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000928:	23b2      	movs	r3, #178	; 0xb2
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <setLEDs+0x358>)
 800092c:	210c      	movs	r1, #12
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <setLEDs+0x35c>)
 8000930:	f00a f908 	bl	800ab44 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000934:	23b2      	movs	r3, #178	; 0xb2
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <setLEDs+0x360>)
 8000938:	2108      	movs	r1, #8
 800093a:	480e      	ldr	r0, [pc, #56]	; (8000974 <setLEDs+0x364>)
 800093c:	f00a f902 	bl	800ab44 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000940:	236a      	movs	r3, #106	; 0x6a
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <setLEDs+0x368>)
 8000944:	2104      	movs	r1, #4
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <setLEDs+0x36c>)
 8000948:	f00a f8fc 	bl	800ab44 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 800094c:	236a      	movs	r3, #106	; 0x6a
 800094e:	4a05      	ldr	r2, [pc, #20]	; (8000964 <setLEDs+0x354>)
 8000950:	2100      	movs	r1, #0
 8000952:	480a      	ldr	r0, [pc, #40]	; (800097c <setLEDs+0x36c>)
 8000954:	f00a f8f6 	bl	800ab44 <HAL_TIM_PWM_Start_DMA>

}
 8000958:	bf00      	nop
 800095a:	3738      	adds	r7, #56	; 0x38
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	0800d988 	.word	0x0800d988
 8000964:	24000764 	.word	0x24000764
 8000968:	2400002c 	.word	0x2400002c
 800096c:	24000e04 	.word	0x24000e04
 8000970:	240002f4 	.word	0x240002f4
 8000974:	24000d20 	.word	0x24000d20
 8000978:	240005bc 	.word	0x240005bc
 800097c:	24000d6c 	.word	0x24000d6c

08000980 <HAL_TIM_PWM_PulseFinishedCallback>:
//	while (!datasentflag) {
//	};
//	datasentflag = 0;
//}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	//HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_3);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);

	//HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	//TIM2->CCR3= 0;
	datasentflag = 1;
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	24001718 	.word	0x24001718

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f001 fd95 	bl	80024d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f85f 	bl	8000a6c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009ae:	f000 f8d9 	bl	8000b64 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 fe0f 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009b6:	f000 fdcd 	bl	8001554 <MX_DMA_Init>
  MX_UART4_Init();
 80009ba:	f000 fd01 	bl	80013c0 <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 80009be:	f000 fd97 	bl	80014f0 <MX_USB_OTG_HS_PCD_Init>
  MX_SPI3_Init();
 80009c2:	f000 fb37 	bl	8001034 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80009c6:	f000 f9e5 	bl	8000d94 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80009ca:	f000 fd45 	bl	8001458 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80009ce:	f000 f8fb 	bl	8000bc8 <MX_ADC1_Init>
  MX_TIM4_Init();
 80009d2:	f000 fc41 	bl	8001258 <MX_TIM4_Init>
  MX_ADC3_Init();
 80009d6:	f000 f96f 	bl	8000cb8 <MX_ADC3_Init>
  MX_SPI1_Init();
 80009da:	f000 fa7f 	bl	8000edc <MX_SPI1_Init>
  MX_SPI2_Init();
 80009de:	f000 fad3 	bl	8000f88 <MX_SPI2_Init>
  MX_I2C2_Init();
 80009e2:	f000 fa3b 	bl	8000e5c <MX_I2C2_Init>
  MX_TIM2_Init();
 80009e6:	f000 fb7b 	bl	80010e0 <MX_TIM2_Init>
  MX_TIM5_Init();
 80009ea:	f000 fc8f 	bl	800130c <MX_TIM5_Init>
  MX_TIM3_Init();
 80009ee:	f000 fbcf 	bl	8001190 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	LED_Data_2[0][0] = 127;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <main+0xc4>)
 80009f4:	227f      	movs	r2, #127	; 0x7f
 80009f6:	601a      	str	r2, [r3, #0]
	LED_Data_2[0][1] = 0;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <main+0xc4>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
	LED_Data_2[0][2] = 127;
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <main+0xc4>)
 8000a00:	227f      	movs	r2, #127	; 0x7f
 8000a02:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN WHILE */
	while (1) {
		//WS2812_Send();
		//HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
		//TIM4->CCR3 = *ptr;
		for(int i = 0; i < 14; i++){
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	e01f      	b.n	8000a4a <main+0xaa>
			LED_Color_Data[i][0] = 0;
 8000a0a:	4917      	ldr	r1, [pc, #92]	; (8000a68 <main+0xc8>)
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	440b      	add	r3, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
			LED_Color_Data[i][1] = 100;
 8000a1c:	4912      	ldr	r1, [pc, #72]	; (8000a68 <main+0xc8>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	440b      	add	r3, r1
 8000a2a:	3304      	adds	r3, #4
 8000a2c:	2264      	movs	r2, #100	; 0x64
 8000a2e:	601a      	str	r2, [r3, #0]
			LED_Color_Data[i][2] = 0;
 8000a30:	490d      	ldr	r1, [pc, #52]	; (8000a68 <main+0xc8>)
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	3308      	adds	r3, #8
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 14; i++){
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	3301      	adds	r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0d      	cmp	r3, #13
 8000a4e:	dddc      	ble.n	8000a0a <main+0x6a>
		}
		LED_Color_Data[4][1] = 0;
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <main+0xc8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34
		//LED_Color_Data[7][2] = 0;
		setLEDs();
 8000a56:	f7ff fddb 	bl	8000610 <setLEDs>
		HAL_Delay(1000);
 8000a5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5e:	f001 fdcb 	bl	80025f8 <HAL_Delay>
		for(int i = 0; i < 14; i++){
 8000a62:	e7cf      	b.n	8000a04 <main+0x64>
 8000a64:	240016dc 	.word	0x240016dc
 8000a68:	2400090c 	.word	0x2400090c

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	224c      	movs	r2, #76	; 0x4c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f00c ff4a 	bl	800d914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00c ff44 	bl	800d914 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f006 fac3 	bl	8007018 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <SystemClock_Config+0xf4>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a9e:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <SystemClock_Config+0xf4>)
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <SystemClock_Config+0xf4>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ab2:	bf00      	nop
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <SystemClock_Config+0xf4>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac0:	d1f8      	bne.n	8000ab4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000ac2:	2323      	movs	r3, #35	; 0x23
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000acc:	2301      	movs	r3, #1
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000ae4:	2312      	movs	r3, #18
 8000ae6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000aec:	2303      	movs	r3, #3
 8000aee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af4:	230c      	movs	r3, #12
 8000af6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f006 fad1 	bl	80070ac <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000b10:	f000 fe4c 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	233f      	movs	r3, #63	; 0x3f
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b20:	2308      	movs	r3, #8
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b24:	2340      	movs	r3, #64	; 0x40
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000b28:	2350      	movs	r3, #80	; 0x50
 8000b2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b32:	2340      	movs	r3, #64	; 0x40
 8000b34:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	2102      	movs	r1, #2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f006 fe90 	bl	8007860 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000b46:	f000 fe31 	bl	80017ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b4a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f007 f83b 	bl	8007bcc <HAL_RCC_MCOConfig>
}
 8000b56:	bf00      	nop
 8000b58:	3770      	adds	r7, #112	; 0x70
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	58024800 	.word	0x58024800

08000b64 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0ae      	sub	sp, #184	; 0xb8
 8000b68:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	22b8      	movs	r2, #184	; 0xb8
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f00c fecf 	bl	800d914 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8000b76:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000b82:	2304      	movs	r3, #4
 8000b84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000b86:	230c      	movs	r3, #12
 8000b88:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000b96:	23c0      	movs	r3, #192	; 0xc0
 8000b98:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba6:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f007 fa4b 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8000bbc:	f000 fdf6 	bl	80017ac <Error_Handler>
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	37b8      	adds	r7, #184	; 0xb8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	; 0x30
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2224      	movs	r2, #36	; 0x24
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00c fe97 	bl	800d914 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <MX_ADC1_Init+0xe8>)
 8000bea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c00:	2204      	movs	r2, #4
 8000c02:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c04:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c10:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c44:	4819      	ldr	r0, [pc, #100]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c46:	f001 ff41 	bl	8002acc <HAL_ADC_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c50:	f000 fdac 	bl	80017ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c60:	f002 ff7c 	bl	8003b5c <HAL_ADCEx_MultiModeConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c6a:	f000 fd9f 	bl	80017ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_ADC1_Init+0xec>)
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c72:	2306      	movs	r3, #6
 8000c74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c7a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c80:	2304      	movs	r3, #4
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <MX_ADC1_Init+0xe4>)
 8000c94:	f002 f922 	bl	8002edc <HAL_ADC_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000c9e:	f000 fd85 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	240009b4 	.word	0x240009b4
 8000cb0:	40022000 	.word	0x40022000
 8000cb4:	2a000400 	.word	0x2a000400

08000cb8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2224      	movs	r2, #36	; 0x24
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00c fe25 	bl	800d914 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cca:	4b2f      	ldr	r3, [pc, #188]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <MX_ADC3_Init+0xd4>)
 8000cce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cd6:	4b2c      	ldr	r3, [pc, #176]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cd8:	2208      	movs	r2, #8
 8000cda:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000cdc:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ce2:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce8:	4b27      	ldr	r3, [pc, #156]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cea:	2204      	movs	r2, #4
 8000cec:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000cfa:	4b23      	ldr	r3, [pc, #140]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000d1c:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000d22:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d28:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d3c:	4812      	ldr	r0, [pc, #72]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d3e:	f001 fec5 	bl	8002acc <HAL_ADC_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000d48:	f000 fd30 	bl	80017ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d4c:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <MX_ADC3_Init+0xd8>)
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d50:	2306      	movs	r3, #6
 8000d52:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <MX_ADC3_Init+0xd0>)
 8000d70:	f002 f8b4 	bl	8002edc <HAL_ADC_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000d7a:	f000 fd17 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	24000a24 	.word	0x24000a24
 8000d8c:	58026000 	.word	0x58026000
 8000d90:	10c00010 	.word	0x10c00010

08000d94 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8000d98:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <MX_FDCAN3_Init+0xc4>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8000daa:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8000dbc:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8000dc2:	4b24      	ldr	r3, [pc, #144]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8000dc8:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8000dda:	4b1e      	ldr	r3, [pc, #120]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8000de0:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8000dec:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8000df2:	4b18      	ldr	r3, [pc, #96]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8000df8:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e06:	2204      	movs	r2, #4
 8000e08:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_FDCAN3_Init+0xc0>)
 8000e42:	f005 f953 	bl	80060ec <HAL_FDCAN_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8000e4c:	f000 fcae 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24000a94 	.word	0x24000a94
 8000e58:	4000d400 	.word	0x4000d400

08000e5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_I2C2_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <MX_I2C2_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000e98:	f005 fe4e 	bl	8006b38 <HAL_I2C_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ea2:	f000 fc83 	bl	80017ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000eaa:	f005 fed5 	bl	8006c58 <HAL_I2CEx_ConfigAnalogFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 fc7a 	bl	80017ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_I2C2_Init+0x74>)
 8000ebc:	f005 ff17 	bl	8006cee <HAL_I2CEx_ConfigDigitalFilter>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 fc71 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	24000b34 	.word	0x24000b34
 8000ed4:	40005800 	.word	0x40005800
 8000ed8:	00808cd2 	.word	0x00808cd2

08000edc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee0:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000ee2:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <MX_SPI1_Init+0xa8>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000ee8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000eec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f08:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000f0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <MX_SPI1_Init+0xa4>)
 8000f6c:	f009 fc54 	bl	800a818 <HAL_SPI_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000f76:	f000 fc19 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	24000b88 	.word	0x24000b88
 8000f84:	40013000 	.word	0x40013000

08000f88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <MX_SPI2_Init+0xa4>)
 8000f8e:	4a28      	ldr	r2, [pc, #160]	; (8001030 <MX_SPI2_Init+0xa8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f92:	4b26      	ldr	r3, [pc, #152]	; (800102c <MX_SPI2_Init+0xa4>)
 8000f94:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <MX_SPI2_Init+0xa4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fb4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fcc:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_SPI2_Init+0xa4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_SPI2_Init+0xa4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_SPI2_Init+0xa4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_SPI2_Init+0xa4>)
 8001000:	2200      	movs	r2, #0
 8001002:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_SPI2_Init+0xa4>)
 8001006:	2200      	movs	r2, #0
 8001008:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_SPI2_Init+0xa4>)
 800100c:	2200      	movs	r2, #0
 800100e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_SPI2_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_SPI2_Init+0xa4>)
 8001018:	f009 fbfe 	bl	800a818 <HAL_SPI_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001022:	f000 fbc3 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	24000c10 	.word	0x24000c10
 8001030:	40003800 	.word	0x40003800

08001034 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800103a:	4a28      	ldr	r2, [pc, #160]	; (80010dc <MX_SPI3_Init+0xa8>)
 800103c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001040:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001044:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001048:	2200      	movs	r2, #0
 800104a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800104e:	2203      	movs	r2, #3
 8001050:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001060:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001064:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800106e:	2200      	movs	r2, #0
 8001070:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001074:	2200      	movs	r2, #0
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800107a:	2200      	movs	r2, #0
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001080:	2200      	movs	r2, #0
 8001082:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001086:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800108a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800108e:	2200      	movs	r2, #0
 8001090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_SPI3_Init+0xa4>)
 8001094:	2200      	movs	r2, #0
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001098:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <MX_SPI3_Init+0xa4>)
 800109a:	2200      	movs	r2, #0
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_SPI3_Init+0xa4>)
 80010c4:	f009 fba8 	bl	800a818 <HAL_SPI_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80010ce:	f000 fb6d 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	24000c98 	.word	0x24000c98
 80010dc:	40003c00 	.word	0x40003c00

080010e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	; 0x28
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	463b      	mov	r3, r7
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <MX_TIM2_Init+0xac>)
 8001106:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800110a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <MX_TIM2_Init+0xac>)
 800110e:	2200      	movs	r2, #0
 8001110:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <MX_TIM2_Init+0xac>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <MX_TIM2_Init+0xac>)
 800111a:	225a      	movs	r2, #90	; 0x5a
 800111c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <MX_TIM2_Init+0xac>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <MX_TIM2_Init+0xac>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800112a:	4818      	ldr	r0, [pc, #96]	; (800118c <MX_TIM2_Init+0xac>)
 800112c:	f009 fcb3 	bl	800aa96 <HAL_TIM_PWM_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001136:	f000 fb39 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4810      	ldr	r0, [pc, #64]	; (800118c <MX_TIM2_Init+0xac>)
 800114a:	f00a fe13 	bl	800bd74 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001154:	f000 fb2a 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001158:	2360      	movs	r3, #96	; 0x60
 800115a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2208      	movs	r2, #8
 800116c:	4619      	mov	r1, r3
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM2_Init+0xac>)
 8001170:	f00a f83c 	bl	800b1ec <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800117a:	f000 fb17 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM2_Init+0xac>)
 8001180:	f000 fef4 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001184:	bf00      	nop
 8001186:	3728      	adds	r7, #40	; 0x28
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24000d20 	.word	0x24000d20

08001190 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
 80011b0:	615a      	str	r2, [r3, #20]
 80011b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b4:	4b26      	ldr	r3, [pc, #152]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011b6:	4a27      	ldr	r2, [pc, #156]	; (8001254 <MX_TIM3_Init+0xc4>)
 80011b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80011c6:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011c8:	225a      	movs	r2, #90	; 0x5a
 80011ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011d8:	481d      	ldr	r0, [pc, #116]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011da:	f009 fc5c 	bl	800aa96 <HAL_TIM_PWM_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011e4:	f000 fae2 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	4619      	mov	r1, r3
 80011f6:	4816      	ldr	r0, [pc, #88]	; (8001250 <MX_TIM3_Init+0xc0>)
 80011f8:	f00a fdbc 	bl	800bd74 <HAL_TIMEx_MasterConfigSynchronization>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001202:	f000 fad3 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001206:	2360      	movs	r3, #96	; 0x60
 8001208:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	4619      	mov	r1, r3
 800121c:	480c      	ldr	r0, [pc, #48]	; (8001250 <MX_TIM3_Init+0xc0>)
 800121e:	f009 ffe5 	bl	800b1ec <HAL_TIM_PWM_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001228:	f000 fac0 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2204      	movs	r2, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM3_Init+0xc0>)
 8001234:	f009 ffda 	bl	800b1ec <HAL_TIM_PWM_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800123e:	f000 fab5 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM3_Init+0xc0>)
 8001244:	f000 fe92 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	24000d6c 	.word	0x24000d6c
 8001254:	40000400 	.word	0x40000400

08001258 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
 8001278:	615a      	str	r2, [r3, #20]
 800127a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_TIM4_Init+0xac>)
 800127e:	4a22      	ldr	r2, [pc, #136]	; (8001308 <MX_TIM4_Init+0xb0>)
 8001280:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <MX_TIM4_Init+0xac>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_TIM4_Init+0xac>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 90;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <MX_TIM4_Init+0xac>)
 8001290:	225a      	movs	r2, #90	; 0x5a
 8001292:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_TIM4_Init+0xac>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_TIM4_Init+0xac>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012a0:	4818      	ldr	r0, [pc, #96]	; (8001304 <MX_TIM4_Init+0xac>)
 80012a2:	f009 fbf8 	bl	800aa96 <HAL_TIM_PWM_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80012ac:	f000 fa7e 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4811      	ldr	r0, [pc, #68]	; (8001304 <MX_TIM4_Init+0xac>)
 80012c0:	f00a fd58 	bl	800bd74 <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80012ca:	f000 fa6f 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	2208      	movs	r2, #8
 80012e2:	4619      	mov	r1, r3
 80012e4:	4807      	ldr	r0, [pc, #28]	; (8001304 <MX_TIM4_Init+0xac>)
 80012e6:	f009 ff81 	bl	800b1ec <HAL_TIM_PWM_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80012f0:	f000 fa5c 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012f4:	4803      	ldr	r0, [pc, #12]	; (8001304 <MX_TIM4_Init+0xac>)
 80012f6:	f000 fe39 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80012fa:	bf00      	nop
 80012fc:	3728      	adds	r7, #40	; 0x28
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	24000db8 	.word	0x24000db8
 8001308:	40000800 	.word	0x40000800

0800130c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131e:	463b      	mov	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
 800132c:	615a      	str	r2, [r3, #20]
 800132e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001332:	4a22      	ldr	r2, [pc, #136]	; (80013bc <MX_TIM5_Init+0xb0>)
 8001334:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133c:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM5_Init+0xac>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001344:	225a      	movs	r2, #90	; 0x5a
 8001346:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_TIM5_Init+0xac>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001354:	4818      	ldr	r0, [pc, #96]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001356:	f009 fb9e 	bl	800aa96 <HAL_TIM_PWM_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001360:	f000 fa24 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <MX_TIM5_Init+0xac>)
 8001374:	f00a fcfe 	bl	800bd74 <HAL_TIMEx_MasterConfigSynchronization>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800137e:	f000 fa15 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001382:	2360      	movs	r3, #96	; 0x60
 8001384:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	220c      	movs	r2, #12
 8001396:	4619      	mov	r1, r3
 8001398:	4807      	ldr	r0, [pc, #28]	; (80013b8 <MX_TIM5_Init+0xac>)
 800139a:	f009 ff27 	bl	800b1ec <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80013a4:	f000 fa02 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80013a8:	4803      	ldr	r0, [pc, #12]	; (80013b8 <MX_TIM5_Init+0xac>)
 80013aa:	f000 fddf 	bl	8001f6c <HAL_TIM_MspPostInit>

}
 80013ae:	bf00      	nop
 80013b0:	3728      	adds	r7, #40	; 0x28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24000e04 	.word	0x24000e04
 80013bc:	40000c00 	.word	0x40000c00

080013c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <MX_UART4_Init+0x90>)
 80013c6:	4a23      	ldr	r2, [pc, #140]	; (8001454 <MX_UART4_Init+0x94>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80013ca:	4b21      	ldr	r3, [pc, #132]	; (8001450 <MX_UART4_Init+0x90>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <MX_UART4_Init+0x90>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <MX_UART4_Init+0x90>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80013de:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <MX_UART4_Init+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b1a      	ldr	r3, [pc, #104]	; (8001450 <MX_UART4_Init+0x90>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b19      	ldr	r3, [pc, #100]	; (8001450 <MX_UART4_Init+0x90>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b17      	ldr	r3, [pc, #92]	; (8001450 <MX_UART4_Init+0x90>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <MX_UART4_Init+0x90>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <MX_UART4_Init+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <MX_UART4_Init+0x90>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_UART4_Init+0x90>)
 800140a:	f00a fd6d 	bl	800bee8 <HAL_UART_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001414:	f000 f9ca 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <MX_UART4_Init+0x90>)
 800141c:	f00b fe73 	bl	800d106 <HAL_UARTEx_SetTxFifoThreshold>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001426:	f000 f9c1 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4808      	ldr	r0, [pc, #32]	; (8001450 <MX_UART4_Init+0x90>)
 800142e:	f00b fea8 	bl	800d182 <HAL_UARTEx_SetRxFifoThreshold>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001438:	f000 f9b8 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_UART4_Init+0x90>)
 800143e:	f00b fe29 	bl	800d094 <HAL_UARTEx_DisableFifoMode>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001448:	f000 f9b0 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	240010a8 	.word	0x240010a8
 8001454:	40004c00 	.word	0x40004c00

08001458 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 800145e:	4a23      	ldr	r2, [pc, #140]	; (80014ec <MX_USART6_UART_Init+0x94>)
 8001460:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001468:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001470:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 800147e:	220c      	movs	r2, #12
 8001480:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001488:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800149a:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 80014a2:	f00a fd21 	bl	800bee8 <HAL_UART_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80014ac:	f000 f97e 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 80014b4:	f00b fe27 	bl	800d106 <HAL_UARTEx_SetTxFifoThreshold>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80014be:	f000 f975 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 80014c6:	f00b fe5c 	bl	800d182 <HAL_UARTEx_SetRxFifoThreshold>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80014d0:	f000 f96c 	bl	80017ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_USART6_UART_Init+0x90>)
 80014d6:	f00b fddd 	bl	800d094 <HAL_UARTEx_DisableFifoMode>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80014e0:	f000 f964 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	2400113c 	.word	0x2400113c
 80014ec:	40011400 	.word	0x40011400

080014f0 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <MX_USB_OTG_HS_PCD_Init+0x60>)
 80014f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 80014fc:	2209      	movs	r2, #9
 80014fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001502:	2202      	movs	r2, #2
 8001504:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800150e:	2202      	movs	r2, #2
 8001510:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001514:	2200      	movs	r2, #0
 8001516:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800151a:	2200      	movs	r2, #0
 800151c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001520:	2200      	movs	r2, #0
 8001522:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001526:	2200      	movs	r2, #0
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800152c:	2200      	movs	r2, #0
 800152e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001532:	2200      	movs	r2, #0
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001536:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001538:	f005 fc25 	bl	8006d86 <HAL_PCD_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001542:	f000 f933 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	240011d0 	.word	0x240011d0
 8001550:	40040000 	.word	0x40040000

08001554 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_DMA_Init+0x7c>)
 800155c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_DMA_Init+0x7c>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_DMA_Init+0x7c>)
 800156c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	607b      	str	r3, [r7, #4]
 8001576:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	200b      	movs	r0, #11
 800157e:	f002 fcaa 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001582:	200b      	movs	r0, #11
 8001584:	f002 fcc1 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	200c      	movs	r0, #12
 800158e:	f002 fca2 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001592:	200c      	movs	r0, #12
 8001594:	f002 fcb9 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2100      	movs	r1, #0
 800159c:	200d      	movs	r0, #13
 800159e:	f002 fc9a 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80015a2:	200d      	movs	r0, #13
 80015a4:	f002 fcb1 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	200e      	movs	r0, #14
 80015ae:	f002 fc92 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80015b2:	200e      	movs	r0, #14
 80015b4:	f002 fca9 	bl	8003f0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	200f      	movs	r0, #15
 80015be:	f002 fc8a 	bl	8003ed6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f002 fca1 	bl	8003f0a <HAL_NVIC_EnableIRQ>

}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	58024400 	.word	0x58024400

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08e      	sub	sp, #56	; 0x38
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4b6b      	ldr	r3, [pc, #428]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	4a69      	ldr	r2, [pc, #420]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015f2:	f043 0310 	orr.w	r3, r3, #16
 80015f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015fa:	4b67      	ldr	r3, [pc, #412]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	623b      	str	r3, [r7, #32]
 8001606:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001608:	4b63      	ldr	r3, [pc, #396]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	4a62      	ldr	r2, [pc, #392]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001610:	f043 0320 	orr.w	r3, r3, #32
 8001614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a5a      	ldr	r2, [pc, #360]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b58      	ldr	r3, [pc, #352]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a53      	ldr	r2, [pc, #332]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b50      	ldr	r3, [pc, #320]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <MX_GPIO_Init+0x1c4>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001672:	4b49      	ldr	r3, [pc, #292]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	4a44      	ldr	r2, [pc, #272]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001690:	4b41      	ldr	r3, [pc, #260]	; (8001798 <MX_GPIO_Init+0x1c4>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b3e      	ldr	r3, [pc, #248]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b3a      	ldr	r3, [pc, #232]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016bc:	4b36      	ldr	r3, [pc, #216]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <MX_GPIO_Init+0x1c4>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2104      	movs	r1, #4
 80016de:	482f      	ldr	r0, [pc, #188]	; (800179c <MX_GPIO_Init+0x1c8>)
 80016e0:	f005 fa10 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2106      	movs	r1, #6
 80016e8:	482d      	ldr	r0, [pc, #180]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 80016ea:	f005 fa0b 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2104      	movs	r1, #4
 80016f2:	482c      	ldr	r0, [pc, #176]	; (80017a4 <MX_GPIO_Init+0x1d0>)
 80016f4:	f005 fa06 	bl	8006b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f8:	2304      	movs	r3, #4
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4823      	ldr	r0, [pc, #140]	; (800179c <MX_GPIO_Init+0x1c8>)
 8001710:	f005 f850 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001714:	2306      	movs	r3, #6
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001718:	2301      	movs	r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001728:	4619      	mov	r1, r3
 800172a:	481d      	ldr	r0, [pc, #116]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 800172c:	f005 f842 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001730:	2304      	movs	r3, #4
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4817      	ldr	r0, [pc, #92]	; (80017a4 <MX_GPIO_Init+0x1d0>)
 8001748:	f005 f834 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800174c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800175e:	2300      	movs	r3, #0
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <MX_GPIO_Init+0x1cc>)
 800176a:	f005 f823 	bl	80067b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177a:	2303      	movs	r3, #3
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800177e:	230b      	movs	r3, #11
 8001780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	4807      	ldr	r0, [pc, #28]	; (80017a8 <MX_GPIO_Init+0x1d4>)
 800178a:	f005 f813 	bl	80067b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3738      	adds	r7, #56	; 0x38
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58024400 	.word	0x58024400
 800179c:	58021000 	.word	0x58021000
 80017a0:	58020000 	.word	0x58020000
 80017a4:	58021800 	.word	0x58021800
 80017a8:	58020c00 	.word	0x58020c00

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_MspInit+0x30>)
 80017c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_MspInit+0x30>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_MspInit+0x30>)
 80017d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	58024400 	.word	0x58024400

080017ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08c      	sub	sp, #48	; 0x30
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <HAL_ADC_MspInit+0xe0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d12a      	bne.n	8001864 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001814:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001816:	f043 0320 	orr.w	r3, r3, #32
 800181a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800181e:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001824:	f003 0320 	and.w	r3, r3, #32
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183c:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 800183e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184a:	2301      	movs	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <HAL_ADC_MspInit+0xe8>)
 800185e:	f004 ffa9 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001862:	e02e      	b.n	80018c2 <HAL_ADC_MspInit+0xd6>
  else if(hadc->Instance==ADC3)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_ADC_MspInit+0xec>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d129      	bne.n	80018c2 <HAL_ADC_MspInit+0xd6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001888:	613b      	str	r3, [r7, #16]
 800188a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 8001894:	f043 0320 	orr.w	r3, r3, #32
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_ADC_MspInit+0xe4>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80018aa:	2328      	movs	r3, #40	; 0x28
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4807      	ldr	r0, [pc, #28]	; (80018dc <HAL_ADC_MspInit+0xf0>)
 80018be:	f004 ff79 	bl	80067b4 <HAL_GPIO_Init>
}
 80018c2:	bf00      	nop
 80018c4:	3730      	adds	r7, #48	; 0x30
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020800 	.word	0x58020800
 80018d8:	58026000 	.word	0x58026000
 80018dc:	58021400 	.word	0x58021400

080018e0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b8      	sub	sp, #224	; 0xe0
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	22b8      	movs	r2, #184	; 0xb8
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00c f807 	bl	800d914 <memset>
  if(hfdcan->Instance==FDCAN3)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <HAL_FDCAN_MspInit+0xc4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d144      	bne.n	800199a <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001910:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 800191c:	2300      	movs	r3, #0
 800191e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	4618      	mov	r0, r3
 8001926:	f006 fb91 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8001930:	f7ff ff3c 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 8001936:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 8001946:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800194a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	4a13      	ldr	r2, [pc, #76]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 800195a:	f043 0320 	orr.w	r3, r3, #32
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_FDCAN_MspInit+0xc8>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001970:	23c0      	movs	r3, #192	; 0xc0
 8001972:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_FDCAN_MspInit+0xcc>)
 8001996:	f004 ff0d 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 800199a:	bf00      	nop
 800199c:	37e0      	adds	r7, #224	; 0xe0
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	4000d400 	.word	0x4000d400
 80019a8:	58024400 	.word	0x58024400
 80019ac:	58021400 	.word	0x58021400

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0b8      	sub	sp, #224	; 0xe0
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	22b8      	movs	r2, #184	; 0xb8
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00b ff9f 	bl	800d914 <memset>
  if(hi2c->Instance==I2C2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a26      	ldr	r2, [pc, #152]	; (8001a74 <HAL_I2C_MspInit+0xc4>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d145      	bne.n	8001a6c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019e0:	f04f 0208 	mov.w	r2, #8
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 fb28 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a02:	f7ff fed3 	bl	80017ac <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a0e:	f043 0320 	orr.w	r3, r3, #32
 8001a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a24:	2303      	movs	r3, #3
 8001a26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2a:	2312      	movs	r3, #18
 8001a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <HAL_I2C_MspInit+0xcc>)
 8001a4a:	f004 feb3 	bl	80067b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a54:	4a08      	ldr	r2, [pc, #32]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_I2C_MspInit+0xc8>)
 8001a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a6c:	bf00      	nop
 8001a6e:	37e0      	adds	r7, #224	; 0xe0
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40005800 	.word	0x40005800
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58021400 	.word	0x58021400

08001a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08e      	sub	sp, #56	; 0x38
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_SPI_MspInit+0x15c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12e      	bne.n	8001b00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001aa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001aae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001ab4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac0:	4b47      	ldr	r3, [pc, #284]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ad0:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ade:	23e0      	movs	r3, #224	; 0xe0
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aee:	2305      	movs	r3, #5
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af6:	4619      	mov	r1, r3
 8001af8:	483a      	ldr	r0, [pc, #232]	; (8001be4 <HAL_SPI_MspInit+0x164>)
 8001afa:	f004 fe5b 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001afe:	e068      	b.n	8001bd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <HAL_SPI_MspInit+0x168>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d12f      	bne.n	8001b6a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b10:	4a33      	ldr	r2, [pc, #204]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b1a:	4b31      	ldr	r3, [pc, #196]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	4a2c      	ldr	r2, [pc, #176]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b38:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b58:	2305      	movs	r3, #5
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4822      	ldr	r0, [pc, #136]	; (8001bec <HAL_SPI_MspInit+0x16c>)
 8001b64:	f004 fe26 	bl	80067b4 <HAL_GPIO_Init>
}
 8001b68:	e033      	b.n	8001bd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a20      	ldr	r2, [pc, #128]	; (8001bf0 <HAL_SPI_MspInit+0x170>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d12e      	bne.n	8001bd2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b74:	4b1a      	ldr	r3, [pc, #104]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b7a:	4a19      	ldr	r2, [pc, #100]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b84:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_SPI_MspInit+0x160>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001bb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4809      	ldr	r0, [pc, #36]	; (8001bf4 <HAL_SPI_MspInit+0x174>)
 8001bce:	f004 fdf1 	bl	80067b4 <HAL_GPIO_Init>
}
 8001bd2:	bf00      	nop
 8001bd4:	3738      	adds	r7, #56	; 0x38
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40013000 	.word	0x40013000
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020000 	.word	0x58020000
 8001be8:	40003800 	.word	0x40003800
 8001bec:	58020400 	.word	0x58020400
 8001bf0:	40003c00 	.word	0x40003c00
 8001bf4:	58020800 	.word	0x58020800

08001bf8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	; 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c18:	d15d      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	4b9f      	ldr	r3, [pc, #636]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c20:	4a9d      	ldr	r2, [pc, #628]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c2a:	4b9b      	ldr	r3, [pc, #620]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	623b      	str	r3, [r7, #32]
 8001c36:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c3e:	4a96      	ldr	r2, [pc, #600]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c48:	4b93      	ldr	r3, [pc, #588]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c56:	2301      	movs	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c66:	2301      	movs	r3, #1
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	488a      	ldr	r0, [pc, #552]	; (8001e9c <HAL_TIM_PWM_MspInit+0x2a4>)
 8001c72:	f004 fd9f 	bl	80067b4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001c76:	4b8a      	ldr	r3, [pc, #552]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c78:	4a8a      	ldr	r2, [pc, #552]	; (8001ea4 <HAL_TIM_PWM_MspInit+0x2ac>)
 8001c7a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8001c7c:	4b88      	ldr	r3, [pc, #544]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c7e:	2214      	movs	r2, #20
 8001c80:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c82:	4b87      	ldr	r3, [pc, #540]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c88:	4b85      	ldr	r3, [pc, #532]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001c8e:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001c98:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c9c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c9e:	4b80      	ldr	r3, [pc, #512]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001ca0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001ca6:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001cac:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb2:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001cb8:	4879      	ldr	r0, [pc, #484]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001cba:	f002 f941 	bl	8003f40 <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8001cc4:	f7ff fd72 	bl	80017ac <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a75      	ldr	r2, [pc, #468]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cce:	4a74      	ldr	r2, [pc, #464]	; (8001ea0 <HAL_TIM_PWM_MspInit+0x2a8>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001cd4:	e13d      	b.n	8001f52 <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM3)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a73      	ldr	r2, [pc, #460]	; (8001ea8 <HAL_TIM_PWM_MspInit+0x2b0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d16d      	bne.n	8001dbc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ce6:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cf0:	4b69      	ldr	r3, [pc, #420]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001cf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d00:	4a6b      	ldr	r2, [pc, #428]	; (8001eb0 <HAL_TIM_PWM_MspInit+0x2b8>)
 8001d02:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8001d04:	4b69      	ldr	r3, [pc, #420]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d06:	2218      	movs	r2, #24
 8001d08:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d0a:	4b68      	ldr	r3, [pc, #416]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d0c:	2240      	movs	r2, #64	; 0x40
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001d16:	4b65      	ldr	r3, [pc, #404]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d24:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d26:	4b61      	ldr	r3, [pc, #388]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8001d2e:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001d34:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3a:	4b5c      	ldr	r3, [pc, #368]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8001d40:	485a      	ldr	r0, [pc, #360]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d42:	f002 f8fd 	bl	8003f40 <HAL_DMA_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8001d4c:	f7ff fd2e 	bl	80017ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a56      	ldr	r2, [pc, #344]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d54:	629a      	str	r2, [r3, #40]	; 0x28
 8001d56:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_TIM_PWM_MspInit+0x2b4>)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8001d5c:	4b55      	ldr	r3, [pc, #340]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d5e:	4a56      	ldr	r2, [pc, #344]	; (8001eb8 <HAL_TIM_PWM_MspInit+0x2c0>)
 8001d60:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001d62:	4b54      	ldr	r3, [pc, #336]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d64:	2217      	movs	r2, #23
 8001d66:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d68:	4b52      	ldr	r3, [pc, #328]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d6a:	2240      	movs	r2, #64	; 0x40
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d74:	4b4f      	ldr	r3, [pc, #316]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d7a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d82:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001d8c:	4b49      	ldr	r3, [pc, #292]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001d92:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001d9e:	4845      	ldr	r0, [pc, #276]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001da0:	f002 f8ce 	bl	8003f40 <HAL_DMA_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8001daa:	f7ff fcff 	bl	80017ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a40      	ldr	r2, [pc, #256]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001db2:	625a      	str	r2, [r3, #36]	; 0x24
 8001db4:	4a3f      	ldr	r2, [pc, #252]	; (8001eb4 <HAL_TIM_PWM_MspInit+0x2bc>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dba:	e0ca      	b.n	8001f52 <HAL_TIM_PWM_MspInit+0x35a>
  else if(htim_pwm->Instance==TIM4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3e      	ldr	r2, [pc, #248]	; (8001ebc <HAL_TIM_PWM_MspInit+0x2c4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	f040 8082 	bne.w	8001ecc <HAL_TIM_PWM_MspInit+0x2d4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc8:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001dde:	f003 0304 	and.w	r3, r3, #4
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_TIM_PWM_MspInit+0x2a0>)
 8001df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e16:	2302      	movs	r3, #2
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4827      	ldr	r0, [pc, #156]	; (8001ec0 <HAL_TIM_PWM_MspInit+0x2c8>)
 8001e22:	f004 fcc7 	bl	80067b4 <HAL_GPIO_Init>
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8001e26:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_TIM_PWM_MspInit+0x2d0>)
 8001e2a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e2e:	221f      	movs	r2, #31
 8001e30:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e32:	4b24      	ldr	r3, [pc, #144]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e44:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e4c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e4e:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8001e68:	4816      	ldr	r0, [pc, #88]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e6a:	f002 f869 	bl	8003f40 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_TIM_PWM_MspInit+0x280>
      Error_Handler();
 8001e74:	f7ff fc9a 	bl	80017ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a12      	ldr	r2, [pc, #72]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_TIM_PWM_MspInit+0x2cc>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e84:	2200      	movs	r2, #0
 8001e86:	2100      	movs	r1, #0
 8001e88:	201e      	movs	r0, #30
 8001e8a:	f002 f824 	bl	8003ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e8e:	201e      	movs	r0, #30
 8001e90:	f002 f83b 	bl	8003f0a <HAL_NVIC_EnableIRQ>
}
 8001e94:	e05d      	b.n	8001f52 <HAL_TIM_PWM_MspInit+0x35a>
 8001e96:	bf00      	nop
 8001e98:	58024400 	.word	0x58024400
 8001e9c:	58020000 	.word	0x58020000
 8001ea0:	24000e50 	.word	0x24000e50
 8001ea4:	40020028 	.word	0x40020028
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	24000ec8 	.word	0x24000ec8
 8001eb0:	40020058 	.word	0x40020058
 8001eb4:	24000f40 	.word	0x24000f40
 8001eb8:	40020070 	.word	0x40020070
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	58020c00 	.word	0x58020c00
 8001ec4:	24000fb8 	.word	0x24000fb8
 8001ec8:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_TIM_PWM_MspInit+0x364>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d13d      	bne.n	8001f52 <HAL_TIM_PWM_MspInit+0x35a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_TIM_PWM_MspInit+0x368>)
 8001ed8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001edc:	4a20      	ldr	r2, [pc, #128]	; (8001f60 <HAL_TIM_PWM_MspInit+0x368>)
 8001ede:	f043 0308 	orr.w	r3, r3, #8
 8001ee2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_TIM_PWM_MspInit+0x368>)
 8001ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8001ef4:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001ef6:	4a1c      	ldr	r2, [pc, #112]	; (8001f68 <HAL_TIM_PWM_MspInit+0x370>)
 8001ef8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001efc:	223a      	movs	r2, #58	; 0x3a
 8001efe:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f00:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f02:	2240      	movs	r2, #64	; 0x40
 8001f04:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f12:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f1a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f22:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f38:	f002 f802 	bl	8003f40 <HAL_DMA_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_TIM_PWM_MspInit+0x34e>
      Error_Handler();
 8001f42:	f7ff fc33 	bl	80017ac <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4c:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <HAL_TIM_PWM_MspInit+0x36c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f52:	bf00      	nop
 8001f54:	3738      	adds	r7, #56	; 0x38
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40000c00 	.word	0x40000c00
 8001f60:	58024400 	.word	0x58024400
 8001f64:	24001030 	.word	0x24001030
 8001f68:	40020040 	.word	0x40020040

08001f6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08c      	sub	sp, #48	; 0x30
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f8c:	d120      	bne.n	8001fd0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	4b4a      	ldr	r3, [pc, #296]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f94:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001f96:	f043 0302 	orr.w	r3, r3, #2
 8001f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9e:	4b46      	ldr	r3, [pc, #280]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	483c      	ldr	r0, [pc, #240]	; (80020bc <HAL_TIM_MspPostInit+0x150>)
 8001fca:	f004 fbf3 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001fce:	e06e      	b.n	80020ae <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a3a      	ldr	r2, [pc, #232]	; (80020c0 <HAL_TIM_MspPostInit+0x154>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d11f      	bne.n	800201a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	4b37      	ldr	r3, [pc, #220]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001fdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fe0:	4a35      	ldr	r2, [pc, #212]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ff8:	2330      	movs	r3, #48	; 0x30
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002000:	2302      	movs	r3, #2
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002008:	2302      	movs	r3, #2
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	482a      	ldr	r0, [pc, #168]	; (80020bc <HAL_TIM_MspPostInit+0x150>)
 8002014:	f004 fbce 	bl	80067b4 <HAL_GPIO_Init>
}
 8002018:	e049      	b.n	80020ae <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a29      	ldr	r2, [pc, #164]	; (80020c4 <HAL_TIM_MspPostInit+0x158>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d120      	bne.n	8002066 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8002026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 800202c:	f043 0308 	orr.w	r3, r3, #8
 8002030:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8002036:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002042:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800204c:	2302      	movs	r3, #2
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002050:	2300      	movs	r3, #0
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002054:	2302      	movs	r3, #2
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	4619      	mov	r1, r3
 800205e:	481a      	ldr	r0, [pc, #104]	; (80020c8 <HAL_TIM_MspPostInit+0x15c>)
 8002060:	f004 fba8 	bl	80067b4 <HAL_GPIO_Init>
}
 8002064:	e023      	b.n	80020ae <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a18      	ldr	r2, [pc, #96]	; (80020cc <HAL_TIM_MspPostInit+0x160>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d11e      	bne.n	80020ae <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002076:	4a10      	ldr	r2, [pc, #64]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_MspPostInit+0x14c>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800208e:	2308      	movs	r3, #8
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002096:	2302      	movs	r3, #2
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800209e:	2302      	movs	r3, #2
 80020a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	4809      	ldr	r0, [pc, #36]	; (80020d0 <HAL_TIM_MspPostInit+0x164>)
 80020aa:	f004 fb83 	bl	80067b4 <HAL_GPIO_Init>
}
 80020ae:	bf00      	nop
 80020b0:	3730      	adds	r7, #48	; 0x30
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	58020400 	.word	0x58020400
 80020c0:	40000400 	.word	0x40000400
 80020c4:	40000800 	.word	0x40000800
 80020c8:	58020c00 	.word	0x58020c00
 80020cc:	40000c00 	.word	0x40000c00
 80020d0:	58020000 	.word	0x58020000

080020d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0ba      	sub	sp, #232	; 0xe8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 0318 	add.w	r3, r7, #24
 80020f0:	22b8      	movs	r2, #184	; 0xb8
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00b fc0d 	bl	800d914 <memset>
  if(huart->Instance==UART4)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a4d      	ldr	r2, [pc, #308]	; (8002234 <HAL_UART_MspInit+0x160>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d147      	bne.n	8002194 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002104:	f04f 0202 	mov.w	r2, #2
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4618      	mov	r0, r3
 800211c:	f005 ff96 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002126:	f7ff fb41 	bl	80017ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800212a:	4b43      	ldr	r3, [pc, #268]	; (8002238 <HAL_UART_MspInit+0x164>)
 800212c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002130:	4a41      	ldr	r2, [pc, #260]	; (8002238 <HAL_UART_MspInit+0x164>)
 8002132:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002136:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800213a:	4b3f      	ldr	r3, [pc, #252]	; (8002238 <HAL_UART_MspInit+0x164>)
 800213c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <HAL_UART_MspInit+0x164>)
 800214a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214e:	4a3a      	ldr	r2, [pc, #232]	; (8002238 <HAL_UART_MspInit+0x164>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002158:	4b37      	ldr	r3, [pc, #220]	; (8002238 <HAL_UART_MspInit+0x164>)
 800215a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800216a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	2302      	movs	r3, #2
 8002170:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002180:	2308      	movs	r3, #8
 8002182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800218a:	4619      	mov	r1, r3
 800218c:	482b      	ldr	r0, [pc, #172]	; (800223c <HAL_UART_MspInit+0x168>)
 800218e:	f004 fb11 	bl	80067b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002192:	e04a      	b.n	800222a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a29      	ldr	r2, [pc, #164]	; (8002240 <HAL_UART_MspInit+0x16c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d145      	bne.n	800222a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800219e:	f04f 0201 	mov.w	r2, #1
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	4618      	mov	r0, r3
 80021b6:	f005 ff49 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80021c0:	f7ff faf4 	bl	80017ac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021c4:	4b1c      	ldr	r3, [pc, #112]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ca:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021cc:	f043 0320 	orr.w	r3, r3, #32
 80021d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021d4:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e8:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021f2:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0x164>)
 80021f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002200:	23c0      	movs	r3, #192	; 0xc0
 8002202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002218:	2307      	movs	r3, #7
 800221a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002222:	4619      	mov	r1, r3
 8002224:	4807      	ldr	r0, [pc, #28]	; (8002244 <HAL_UART_MspInit+0x170>)
 8002226:	f004 fac5 	bl	80067b4 <HAL_GPIO_Init>
}
 800222a:	bf00      	nop
 800222c:	37e8      	adds	r7, #232	; 0xe8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004c00 	.word	0x40004c00
 8002238:	58024400 	.word	0x58024400
 800223c:	58020400 	.word	0x58020400
 8002240:	40011400 	.word	0x40011400
 8002244:	58020800 	.word	0x58020800

08002248 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0b2      	sub	sp, #200	; 0xc8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	22b8      	movs	r2, #184	; 0xb8
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f00b fb5b 	bl	800d914 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_PCD_MspInit+0x74>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d124      	bne.n	80022b2 <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002268:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002274:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8002278:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227c:	f107 0310 	add.w	r3, r7, #16
 8002280:	4618      	mov	r0, r3
 8002282:	f005 fee3 	bl	800804c <HAL_RCCEx_PeriphCLKConfig>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 800228c:	f7ff fa8e 	bl	80017ac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002290:	f004 fefc 	bl	800708c <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_PCD_MspInit+0x78>)
 8002296:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <HAL_PCD_MspInit+0x78>)
 800229c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80022a4:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_PCD_MspInit+0x78>)
 80022a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 80022b2:	bf00      	nop
 80022b4:	37c8      	adds	r7, #200	; 0xc8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40040000 	.word	0x40040000
 80022c0:	58024400 	.word	0x58024400

080022c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <NMI_Handler+0x4>

080022ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ce:	e7fe      	b.n	80022ce <HardFault_Handler+0x4>

080022d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d4:	e7fe      	b.n	80022d4 <MemManage_Handler+0x4>

080022d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022da:	e7fe      	b.n	80022da <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002310:	f000 f952 	bl	80025b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}

08002318 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800231c:	4802      	ldr	r0, [pc, #8]	; (8002328 <DMA1_Stream0_IRQHandler+0x10>)
 800231e:	f002 fbd3 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	24000fb8 	.word	0x24000fb8

0800232c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <DMA1_Stream1_IRQHandler+0x10>)
 8002332:	f002 fbc9 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	24000e50 	.word	0x24000e50

08002340 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002344:	4802      	ldr	r0, [pc, #8]	; (8002350 <DMA1_Stream2_IRQHandler+0x10>)
 8002346:	f002 fbbf 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	24001030 	.word	0x24001030

08002354 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002358:	4802      	ldr	r0, [pc, #8]	; (8002364 <DMA1_Stream3_IRQHandler+0x10>)
 800235a:	f002 fbb5 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	24000ec8 	.word	0x24000ec8

08002368 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800236c:	4802      	ldr	r0, [pc, #8]	; (8002378 <DMA1_Stream4_IRQHandler+0x10>)
 800236e:	f002 fbab 	bl	8004ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	24000f40 	.word	0x24000f40

0800237c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <TIM4_IRQHandler+0x10>)
 8002382:	f008 fe13 	bl	800afac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24000db8 	.word	0x24000db8

08002390 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002394:	4b32      	ldr	r3, [pc, #200]	; (8002460 <SystemInit+0xd0>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	4a31      	ldr	r2, [pc, #196]	; (8002460 <SystemInit+0xd0>)
 800239c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <SystemInit+0xd4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 030f 	and.w	r3, r3, #15
 80023ac:	2b06      	cmp	r3, #6
 80023ae:	d807      	bhi.n	80023c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023b0:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <SystemInit+0xd4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 030f 	bic.w	r3, r3, #15
 80023b8:	4a2a      	ldr	r2, [pc, #168]	; (8002464 <SystemInit+0xd4>)
 80023ba:	f043 0307 	orr.w	r3, r3, #7
 80023be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023c0:	4b29      	ldr	r3, [pc, #164]	; (8002468 <SystemInit+0xd8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <SystemInit+0xd8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <SystemInit+0xd8>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023d2:	4b25      	ldr	r3, [pc, #148]	; (8002468 <SystemInit+0xd8>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4924      	ldr	r1, [pc, #144]	; (8002468 <SystemInit+0xd8>)
 80023d8:	4b24      	ldr	r3, [pc, #144]	; (800246c <SystemInit+0xdc>)
 80023da:	4013      	ands	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <SystemInit+0xd4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d007      	beq.n	80023fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <SystemInit+0xd4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 030f 	bic.w	r3, r3, #15
 80023f2:	4a1c      	ldr	r2, [pc, #112]	; (8002464 <SystemInit+0xd4>)
 80023f4:	f043 0307 	orr.w	r3, r3, #7
 80023f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <SystemInit+0xd8>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <SystemInit+0xd8>)
 8002402:	2200      	movs	r2, #0
 8002404:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <SystemInit+0xd8>)
 8002408:	2200      	movs	r2, #0
 800240a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <SystemInit+0xd8>)
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <SystemInit+0xe0>)
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002412:	4b15      	ldr	r3, [pc, #84]	; (8002468 <SystemInit+0xd8>)
 8002414:	4a17      	ldr	r2, [pc, #92]	; (8002474 <SystemInit+0xe4>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <SystemInit+0xd8>)
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <SystemInit+0xe8>)
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800241e:	4b12      	ldr	r3, [pc, #72]	; (8002468 <SystemInit+0xd8>)
 8002420:	2200      	movs	r2, #0
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <SystemInit+0xd8>)
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <SystemInit+0xe8>)
 8002428:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800242a:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <SystemInit+0xd8>)
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002430:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <SystemInit+0xd8>)
 8002432:	4a11      	ldr	r2, [pc, #68]	; (8002478 <SystemInit+0xe8>)
 8002434:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <SystemInit+0xd8>)
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <SystemInit+0xd8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a09      	ldr	r2, [pc, #36]	; (8002468 <SystemInit+0xd8>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <SystemInit+0xd8>)
 800244a:	2200      	movs	r2, #0
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <SystemInit+0xec>)
 8002450:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002454:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	52002000 	.word	0x52002000
 8002468:	58024400 	.word	0x58024400
 800246c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002470:	02020200 	.word	0x02020200
 8002474:	01ff0000 	.word	0x01ff0000
 8002478:	01010280 	.word	0x01010280
 800247c:	52004000 	.word	0x52004000

08002480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002484:	f7ff ff84 	bl	8002390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	; (80024c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	; (80024cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ae:	f00b f9ff 	bl	800d8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024b2:	f7fe fa75 	bl	80009a0 <main>
  bx  lr
 80024b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80024bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024c0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80024c4:	0800da48 	.word	0x0800da48
  ldr r2, =_sbss
 80024c8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80024cc:	24001720 	.word	0x24001720

080024d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC3_IRQHandler>
	...

080024d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024da:	2003      	movs	r0, #3
 80024dc:	f001 fcf0 	bl	8003ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024e0:	f005 fbde 	bl	8007ca0 <HAL_RCC_GetSysClockFreq>
 80024e4:	4602      	mov	r2, r0
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_Init+0x68>)
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	4913      	ldr	r1, [pc, #76]	; (8002540 <HAL_Init+0x6c>)
 80024f2:	5ccb      	ldrb	r3, [r1, r3]
 80024f4:	f003 031f 	and.w	r3, r3, #31
 80024f8:	fa22 f303 	lsr.w	r3, r2, r3
 80024fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024fe:	4b0f      	ldr	r3, [pc, #60]	; (800253c <HAL_Init+0x68>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_Init+0x6c>)
 8002508:	5cd3      	ldrb	r3, [r2, r3]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	4a0b      	ldr	r2, [pc, #44]	; (8002544 <HAL_Init+0x70>)
 8002516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002518:	4a0b      	ldr	r2, [pc, #44]	; (8002548 <HAL_Init+0x74>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800251e:	200f      	movs	r0, #15
 8002520:	f000 f814 	bl	800254c <HAL_InitTick>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e002      	b.n	8002534 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800252e:	f7ff f943 	bl	80017b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	58024400 	.word	0x58024400
 8002540:	0800d9f8 	.word	0x0800d9f8
 8002544:	24000004 	.word	0x24000004
 8002548:	24000000 	.word	0x24000000

0800254c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002554:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_InitTick+0x60>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e021      	b.n	80025a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_InitTick+0x64>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_InitTick+0x60>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	4619      	mov	r1, r3
 800256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002572:	fbb2 f3f3 	udiv	r3, r2, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f001 fcd5 	bl	8003f26 <HAL_SYSTICK_Config>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e00e      	b.n	80025a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d80a      	bhi.n	80025a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f001 fc9f 	bl	8003ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_InitTick+0x68>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259e:	2300      	movs	r3, #0
 80025a0:	e000      	b.n	80025a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2400000c 	.word	0x2400000c
 80025b0:	24000000 	.word	0x24000000
 80025b4:	24000008 	.word	0x24000008

080025b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_IncTick+0x20>)
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x24>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	4a04      	ldr	r2, [pc, #16]	; (80025dc <HAL_IncTick+0x24>)
 80025ca:	6013      	str	r3, [r2, #0]
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	2400000c 	.word	0x2400000c
 80025dc:	2400171c 	.word	0x2400171c

080025e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_GetTick+0x14>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2400171c 	.word	0x2400171c

080025f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff ffee 	bl	80025e0 <HAL_GetTick>
 8002604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d005      	beq.n	800261e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <HAL_Delay+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800261e:	bf00      	nop
 8002620:	f7ff ffde 	bl	80025e0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	429a      	cmp	r2, r3
 800262e:	d8f7      	bhi.n	8002620 <HAL_Delay+0x28>
  {
  }
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	2400000c 	.word	0x2400000c

08002640 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr

08002666 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3360      	adds	r3, #96	; 0x60
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a10      	ldr	r2, [pc, #64]	; (8002708 <LL_ADC_SetOffset+0x60>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d10b      	bne.n	80026e4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80026e2:	e00b      	b.n	80026fc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	431a      	orrs	r2, r3
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	371c      	adds	r7, #28
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	58026000 	.word	0x58026000

0800270c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3360      	adds	r3, #96	; 0x60
 800271a:	461a      	mov	r2, r3
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800272c:	4618      	mov	r0, r3
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 031f 	and.w	r3, r3, #31
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	fa01 f303 	lsl.w	r3, r1, r3
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	611a      	str	r2, [r3, #16]
}
 800275e:	bf00      	nop
 8002760:	3714      	adds	r7, #20
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	3360      	adds	r3, #96	; 0x60
 8002784:	461a      	mov	r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	431a      	orrs	r2, r3
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	601a      	str	r2, [r3, #0]
  }
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	58026000 	.word	0x58026000

080027b0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a0c      	ldr	r2, [pc, #48]	; (80027f0 <LL_ADC_SetOffsetSaturation+0x40>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10e      	bne.n	80027e2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	3360      	adds	r3, #96	; 0x60
 80027c8:	461a      	mov	r2, r3
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	431a      	orrs	r2, r3
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	58026000 	.word	0x58026000

080027f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4a0c      	ldr	r2, [pc, #48]	; (8002834 <LL_ADC_SetOffsetSign+0x40>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10e      	bne.n	8002826 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	3360      	adds	r3, #96	; 0x60
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	431a      	orrs	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	58026000 	.word	0x58026000

08002838 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3360      	adds	r3, #96	; 0x60
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <LL_ADC_SetOffsetState+0x50>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d108      	bne.n	800286c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800286a:	e007      	b.n	800287c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	431a      	orrs	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	58026000 	.word	0x58026000

0800288c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3330      	adds	r3, #48	; 0x30
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	0a1b      	lsrs	r3, r3, #8
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	4413      	add	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	211f      	movs	r1, #31
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	0e9b      	lsrs	r3, r3, #26
 80028c4:	f003 011f 	and.w	r1, r3, #31
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028d8:	bf00      	nop
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	3314      	adds	r3, #20
 80028f4:	461a      	mov	r2, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0e5b      	lsrs	r3, r3, #25
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	0d1b      	lsrs	r3, r3, #20
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2107      	movs	r1, #7
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	43db      	mvns	r3, r3
 8002918:	401a      	ands	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	0d1b      	lsrs	r3, r3, #20
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	fa01 f303 	lsl.w	r3, r1, r3
 8002928:	431a      	orrs	r2, r3
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800292e:	bf00      	nop
 8002930:	371c      	adds	r7, #28
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d115      	bne.n	800297c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800295c:	43db      	mvns	r3, r3
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0318 	and.w	r3, r3, #24
 8002966:	4914      	ldr	r1, [pc, #80]	; (80029b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002968:	40d9      	lsrs	r1, r3
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	400b      	ands	r3, r1
 800296e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002972:	431a      	orrs	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800297a:	e014      	b.n	80029a6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002988:	43db      	mvns	r3, r3
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0318 	and.w	r3, r3, #24
 8002992:	4909      	ldr	r1, [pc, #36]	; (80029b8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002994:	40d9      	lsrs	r1, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	400b      	ands	r3, r1
 800299a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800299e:	431a      	orrs	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	58026000 	.word	0x58026000
 80029b8:	000fffff 	.word	0x000fffff

080029bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689a      	ldr	r2, [r3, #8]
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <LL_ADC_DisableDeepPowerDown+0x20>)
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6093      	str	r3, [r2, #8]
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	5fffffc0 	.word	0x5fffffc0

080029e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f4:	d101      	bne.n	80029fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <LL_ADC_EnableInternalRegulator+0x24>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	6fffffc0 	.word	0x6fffffc0

08002a30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a44:	d101      	bne.n	8002a4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a4a:	2300      	movs	r3, #0
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <LL_ADC_IsEnabled+0x18>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <LL_ADC_IsEnabled+0x1a>
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0304 	and.w	r3, r3, #4
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d101      	bne.n	8002a96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0308 	and.w	r3, r3, #8
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d101      	bne.n	8002abc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e000      	b.n	8002abe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e1ee      	b.n	8002ec4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7fe fe79 	bl	80017ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff ff67 	bl	80029e0 <LL_ADC_IsDeepPowerDownEnabled>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d004      	beq.n	8002b22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff4d 	bl	80029bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ff82 	bl	8002a30 <LL_ADC_IsInternalRegulatorEnabled>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d114      	bne.n	8002b5c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff ff66 	bl	8002a08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b8e      	ldr	r3, [pc, #568]	; (8002d78 <HAL_ADC_Init+0x2ac>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	4a8e      	ldr	r2, [pc, #568]	; (8002d7c <HAL_ADC_Init+0x2b0>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff ff65 	bl	8002a30 <LL_ADC_IsInternalRegulatorEnabled>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10d      	bne.n	8002b88 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	f043 0210 	orr.w	r2, r3, #16
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff76 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002b92:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f040 8188 	bne.w	8002eb2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 8184 	bne.w	8002eb2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bae:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff4a 	bl	8002a58 <LL_ADC_IsEnabled>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d136      	bne.n	8002c38 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6c      	ldr	r2, [pc, #432]	; (8002d80 <HAL_ADC_Init+0x2b4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_ADC_Init+0x112>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a6a      	ldr	r2, [pc, #424]	; (8002d84 <HAL_ADC_Init+0x2b8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10e      	bne.n	8002bfc <HAL_ADC_Init+0x130>
 8002bde:	4868      	ldr	r0, [pc, #416]	; (8002d80 <HAL_ADC_Init+0x2b4>)
 8002be0:	f7ff ff3a 	bl	8002a58 <LL_ADC_IsEnabled>
 8002be4:	4604      	mov	r4, r0
 8002be6:	4867      	ldr	r0, [pc, #412]	; (8002d84 <HAL_ADC_Init+0x2b8>)
 8002be8:	f7ff ff36 	bl	8002a58 <LL_ADC_IsEnabled>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4323      	orrs	r3, r4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf0c      	ite	eq
 8002bf4:	2301      	moveq	r3, #1
 8002bf6:	2300      	movne	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e008      	b.n	8002c0e <HAL_ADC_Init+0x142>
 8002bfc:	4862      	ldr	r0, [pc, #392]	; (8002d88 <HAL_ADC_Init+0x2bc>)
 8002bfe:	f7ff ff2b 	bl	8002a58 <LL_ADC_IsEnabled>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	bf0c      	ite	eq
 8002c08:	2301      	moveq	r3, #1
 8002c0a:	2300      	movne	r3, #0
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d012      	beq.n	8002c38 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5a      	ldr	r2, [pc, #360]	; (8002d80 <HAL_ADC_Init+0x2b4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_ADC_Init+0x15a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a58      	ldr	r2, [pc, #352]	; (8002d84 <HAL_ADC_Init+0x2b8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_Init+0x15e>
 8002c26:	4a59      	ldr	r2, [pc, #356]	; (8002d8c <HAL_ADC_Init+0x2c0>)
 8002c28:	e000      	b.n	8002c2c <HAL_ADC_Init+0x160>
 8002c2a:	4a59      	ldr	r2, [pc, #356]	; (8002d90 <HAL_ADC_Init+0x2c4>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f7ff fd04 	bl	8002640 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_ADC_Init+0x2bc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d129      	bne.n	8002c96 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7e5b      	ldrb	r3, [r3, #25]
 8002c46:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c4c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002c52:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d013      	beq.n	8002c84 <HAL_ADC_Init+0x1b8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d00d      	beq.n	8002c80 <HAL_ADC_Init+0x1b4>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2b1c      	cmp	r3, #28
 8002c6a:	d007      	beq.n	8002c7c <HAL_ADC_Init+0x1b0>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b18      	cmp	r3, #24
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_Init+0x1ac>
 8002c74:	2318      	movs	r3, #24
 8002c76:	e006      	b.n	8002c86 <HAL_ADC_Init+0x1ba>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	e004      	b.n	8002c86 <HAL_ADC_Init+0x1ba>
 8002c7c:	2310      	movs	r3, #16
 8002c7e:	e002      	b.n	8002c86 <HAL_ADC_Init+0x1ba>
 8002c80:	2308      	movs	r3, #8
 8002c82:	e000      	b.n	8002c86 <HAL_ADC_Init+0x1ba>
 8002c84:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002c86:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c8e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
 8002c94:	e00e      	b.n	8002cb4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7e5b      	ldrb	r3, [r3, #25]
 8002c9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ca6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	045b      	lsls	r3, r3, #17
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <HAL_ADC_Init+0x2bc>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d115      	bne.n	8002d1e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	4b26      	ldr	r3, [pc, #152]	; (8002d94 <HAL_ADC_Init+0x2c8>)
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	69b9      	ldr	r1, [r7, #24]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	e009      	b.n	8002d32 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	4b1c      	ldr	r3, [pc, #112]	; (8002d98 <HAL_ADC_Init+0x2cc>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	69b9      	ldr	r1, [r7, #24]
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fea1 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002d3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff feae 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 8002d48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f040 808e 	bne.w	8002e6e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 808a 	bne.w	8002e6e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_ADC_Init+0x2bc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d11b      	bne.n	8002d9c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7e1b      	ldrb	r3, [r3, #24]
 8002d68:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d70:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e018      	b.n	8002daa <HAL_ADC_Init+0x2de>
 8002d78:	24000000 	.word	0x24000000
 8002d7c:	053e2d63 	.word	0x053e2d63
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022100 	.word	0x40022100
 8002d88:	58026000 	.word	0x58026000
 8002d8c:	40022300 	.word	0x40022300
 8002d90:	58026300 	.word	0x58026300
 8002d94:	fff04007 	.word	0xfff04007
 8002d98:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7e1b      	ldrb	r3, [r3, #24]
 8002da0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4b46      	ldr	r3, [pc, #280]	; (8002ecc <HAL_ADC_Init+0x400>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	69b9      	ldr	r1, [r7, #24]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d137      	bne.n	8002e38 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3f      	ldr	r2, [pc, #252]	; (8002ed0 <HAL_ADC_Init+0x404>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d116      	bne.n	8002e06 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_ADC_Init+0x408>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002df6:	430a      	orrs	r2, r1
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	611a      	str	r2, [r3, #16]
 8002e04:	e020      	b.n	8002e48 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	4b32      	ldr	r3, [pc, #200]	; (8002ed8 <HAL_ADC_Init+0x40c>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0411      	lsls	r1, r2, #16
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e1c:	4311      	orrs	r1, r2
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0201 	orr.w	r2, r2, #1
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e007      	b.n	8002e48 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_ADC_Init+0x404>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d002      	beq.n	8002e6e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fd63 	bl	8003934 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d10c      	bne.n	8002e90 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f023 010f 	bic.w	r1, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	1e5a      	subs	r2, r3, #1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	e007      	b.n	8002ea0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020f 	bic.w	r2, r2, #15
 8002e9e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea4:	f023 0303 	bic.w	r3, r3, #3
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	661a      	str	r2, [r3, #96]	; 0x60
 8002eb0:	e007      	b.n	8002ec2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb6:	f043 0210 	orr.w	r2, r3, #16
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3724      	adds	r7, #36	; 0x24
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd90      	pop	{r4, r7, pc}
 8002ecc:	ffffbffc 	.word	0xffffbffc
 8002ed0:	58026000 	.word	0x58026000
 8002ed4:	fc00f81f 	.word	0xfc00f81f
 8002ed8:	fc00f81e 	.word	0xfc00f81e

08002edc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	b0b9      	sub	sp, #228	; 0xe4
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4aa9      	ldr	r2, [pc, #676]	; (80031a4 <HAL_ADC_ConfigChannel+0x2c8>)
 8002efe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d102      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x34>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f000 bcfa 	b.w	8003904 <HAL_ADC_ConfigChannel+0xa28>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fdae 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 84de 	bne.w	80038e6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a9e      	ldr	r2, [pc, #632]	; (80031a8 <HAL_ADC_ConfigChannel+0x2cc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d033      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d108      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x76>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	0e9b      	lsrs	r3, r3, #26
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	e01d      	b.n	8002f8e <HAL_ADC_ConfigChannel+0xb2>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5e:	fa93 f3a3 	rbit	r3, r3
 8002f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e004      	b.n	8002f84 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2201      	movs	r2, #1
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	69d1      	ldr	r1, [r2, #28]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f7ff fc6f 	bl	800288c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fd63 	bl	8002a7e <LL_ADC_REG_IsConversionOngoing>
 8002fb8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7ff fd6f 	bl	8002aa4 <LL_ADC_INJ_IsConversionOngoing>
 8002fc6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8270 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 826b 	bne.w	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7ff fc7a 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a6c      	ldr	r2, [pc, #432]	; (80031a8 <HAL_ADC_ConfigChannel+0x2cc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d10d      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003014:	e032      	b.n	800307c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_ADC_ConfigChannel+0x2d0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800301e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003022:	d10b      	bne.n	800303c <HAL_ADC_ConfigChannel+0x160>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	f003 0307 	and.w	r3, r3, #7
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	e01d      	b.n	8003078 <HAL_ADC_ConfigChannel+0x19c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x186>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	e00a      	b.n	8003078 <HAL_ADC_ConfigChannel+0x19c>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	695a      	ldr	r2, [r3, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d048      	beq.n	8003116 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6919      	ldr	r1, [r3, #16]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003094:	f7ff fb08 	bl	80026a8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a42      	ldr	r2, [pc, #264]	; (80031a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d119      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f7ff fba0 	bl	80027f4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6818      	ldr	r0, [r3, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	6919      	ldr	r1, [r3, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1f0>
 80030c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ca:	e000      	b.n	80030ce <HAL_ADC_ConfigChannel+0x1f2>
 80030cc:	2300      	movs	r3, #0
 80030ce:	461a      	mov	r2, r3
 80030d0:	f7ff fb6e 	bl	80027b0 <LL_ADC_SetOffsetSaturation>
 80030d4:	e1ee      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d102      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x212>
 80030e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030ec:	e000      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x214>
 80030ee:	2300      	movs	r3, #0
 80030f0:	461a      	mov	r2, r3
 80030f2:	f7ff fb3b 	bl	800276c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6919      	ldr	r1, [r3, #16]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	7e1b      	ldrb	r3, [r3, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d102      	bne.n	800310c <HAL_ADC_ConfigChannel+0x230>
 8003106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800310a:	e000      	b.n	800310e <HAL_ADC_ConfigChannel+0x232>
 800310c:	2300      	movs	r3, #0
 800310e:	461a      	mov	r2, r3
 8003110:	f7ff fb12 	bl	8002738 <LL_ADC_SetDataRightShift>
 8003114:	e1ce      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a23      	ldr	r2, [pc, #140]	; (80031a8 <HAL_ADC_ConfigChannel+0x2cc>)
 800311c:	4293      	cmp	r3, r2
 800311e:	f040 8181 	bne.w	8003424 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2100      	movs	r1, #0
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff faef 	bl	800270c <LL_ADC_GetOffsetChannel>
 800312e:	4603      	mov	r3, r0
 8003130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <HAL_ADC_ConfigChannel+0x272>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff fae4 	bl	800270c <LL_ADC_GetOffsetChannel>
 8003144:	4603      	mov	r3, r0
 8003146:	0e9b      	lsrs	r3, r3, #26
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	e01e      	b.n	800318c <HAL_ADC_ConfigChannel+0x2b0>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2100      	movs	r1, #0
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff fad9 	bl	800270c <LL_ADC_GetOffsetChannel>
 800315a:	4603      	mov	r3, r0
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800316c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003170:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003174:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800317c:	2320      	movs	r3, #32
 800317e:	e004      	b.n	800318a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003180:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	461a      	mov	r2, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x2d4>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	f003 031f 	and.w	r3, r3, #31
 80031a2:	e01e      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x306>
 80031a4:	47ff0000 	.word	0x47ff0000
 80031a8:	58026000 	.word	0x58026000
 80031ac:	5c001000 	.word	0x5c001000
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031bc:	fa93 f3a3 	rbit	r3, r3
 80031c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80031c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80031cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e004      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80031d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d106      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2200      	movs	r2, #0
 80031ec:	2100      	movs	r1, #0
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fb22 	bl	8002838 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2101      	movs	r1, #1
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fa86 	bl	800270c <LL_ADC_GetOffsetChannel>
 8003200:	4603      	mov	r3, r0
 8003202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x344>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2101      	movs	r1, #1
 8003210:	4618      	mov	r0, r3
 8003212:	f7ff fa7b 	bl	800270c <LL_ADC_GetOffsetChannel>
 8003216:	4603      	mov	r3, r0
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	f003 021f 	and.w	r2, r3, #31
 800321e:	e01e      	b.n	800325e <HAL_ADC_ConfigChannel+0x382>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fa70 	bl	800270c <LL_ADC_GetOffsetChannel>
 800322c:	4603      	mov	r3, r0
 800322e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800323e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800324e:	2320      	movs	r3, #32
 8003250:	e004      	b.n	800325c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x39a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	e018      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x3cc>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800328a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800328e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003292:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800329a:	2320      	movs	r3, #32
 800329c:	e004      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800329e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d106      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fabf 	bl	8002838 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2102      	movs	r1, #2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fa23 	bl	800270c <LL_ADC_GetOffsetChannel>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10a      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x40a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fa18 	bl	800270c <LL_ADC_GetOffsetChannel>
 80032dc:	4603      	mov	r3, r0
 80032de:	0e9b      	lsrs	r3, r3, #26
 80032e0:	f003 021f 	and.w	r2, r3, #31
 80032e4:	e01e      	b.n	8003324 <HAL_ADC_ConfigChannel+0x448>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fa0d 	bl	800270c <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003308:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800330c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003314:	2320      	movs	r3, #32
 8003316:	e004      	b.n	8003322 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003318:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800332c:	2b00      	cmp	r3, #0
 800332e:	d105      	bne.n	800333c <HAL_ADC_ConfigChannel+0x460>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	0e9b      	lsrs	r3, r3, #26
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	e014      	b.n	8003366 <HAL_ADC_ConfigChannel+0x48a>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800334a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800334c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003350:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e004      	b.n	8003366 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800335c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	429a      	cmp	r2, r3
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	2102      	movs	r1, #2
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fa60 	bl	8002838 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2103      	movs	r1, #3
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff f9c4 	bl	800270c <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4c8>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2103      	movs	r1, #3
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff f9b9 	bl	800270c <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	e017      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x4f8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2103      	movs	r1, #3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f9ae 	bl	800270c <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80033c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80033c6:	2320      	movs	r3, #32
 80033c8:	e003      	b.n	80033d2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	fab3 f383 	clz	r3, r3
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_ADC_ConfigChannel+0x510>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	0e9b      	lsrs	r3, r3, #26
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	e011      	b.n	8003410 <HAL_ADC_ConfigChannel+0x534>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f4:	fa93 f3a3 	rbit	r3, r3
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80033fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80033fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003404:	2320      	movs	r3, #32
 8003406:	e003      	b.n	8003410 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800340a:	fab3 f383 	clz	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	429a      	cmp	r2, r3
 8003412:	d14f      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2200      	movs	r2, #0
 800341a:	2103      	movs	r1, #3
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fa0b 	bl	8002838 <LL_ADC_SetOffsetState>
 8003422:	e047      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	069b      	lsls	r3, r3, #26
 8003434:	429a      	cmp	r2, r3
 8003436:	d107      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003446:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800344e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	069b      	lsls	r3, r3, #26
 8003458:	429a      	cmp	r2, r3
 800345a:	d107      	bne.n	800346c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800346a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	069b      	lsls	r3, r3, #26
 800347c:	429a      	cmp	r2, r3
 800347e:	d107      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800348e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d107      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034b2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff facd 	bl	8002a58 <LL_ADC_IsEnabled>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	f040 8219 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff fa32 	bl	800293c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4aa1      	ldr	r2, [pc, #644]	; (8003764 <HAL_ADC_ConfigChannel+0x888>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f040 812e 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10b      	bne.n	800350c <HAL_ADC_ConfigChannel+0x630>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	0e9b      	lsrs	r3, r3, #26
 80034fa:	3301      	adds	r3, #1
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2b09      	cmp	r3, #9
 8003502:	bf94      	ite	ls
 8003504:	2301      	movls	r3, #1
 8003506:	2300      	movhi	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e019      	b.n	8003540 <HAL_ADC_ConfigChannel+0x664>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003512:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003514:	fa93 f3a3 	rbit	r3, r3
 8003518:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800351a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800351e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8003524:	2320      	movs	r3, #32
 8003526:	e003      	b.n	8003530 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	2b09      	cmp	r3, #9
 8003538:	bf94      	ite	ls
 800353a:	2301      	movls	r3, #1
 800353c:	2300      	movhi	r3, #0
 800353e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003540:	2b00      	cmp	r3, #0
 8003542:	d079      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x684>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0e9b      	lsrs	r3, r3, #26
 8003556:	3301      	adds	r3, #1
 8003558:	069b      	lsls	r3, r3, #26
 800355a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800355e:	e015      	b.n	800358c <HAL_ADC_ConfigChannel+0x6b0>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800356e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800357c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	3301      	adds	r3, #1
 8003586:	069b      	lsls	r3, r3, #26
 8003588:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003594:	2b00      	cmp	r3, #0
 8003596:	d109      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x6d0>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	3301      	adds	r3, #1
 80035a0:	f003 031f 	and.w	r3, r3, #31
 80035a4:	2101      	movs	r1, #1
 80035a6:	fa01 f303 	lsl.w	r3, r1, r3
 80035aa:	e017      	b.n	80035dc <HAL_ADC_ConfigChannel+0x700>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80035be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80035c4:	2320      	movs	r3, #32
 80035c6:	e003      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3301      	adds	r3, #1
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f303 	lsl.w	r3, r1, r3
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <HAL_ADC_ConfigChannel+0x726>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	0e9b      	lsrs	r3, r3, #26
 80035f2:	3301      	adds	r3, #1
 80035f4:	f003 021f 	and.w	r2, r3, #31
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	051b      	lsls	r3, r3, #20
 8003600:	e018      	b.n	8003634 <HAL_ADC_ConfigChannel+0x758>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800360a:	fa93 f3a3 	rbit	r3, r3
 800360e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800361a:	2320      	movs	r3, #32
 800361c:	e003      	b.n	8003626 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	fab3 f383 	clz	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	f003 021f 	and.w	r2, r3, #31
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003634:	430b      	orrs	r3, r1
 8003636:	e07e      	b.n	8003736 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003640:	2b00      	cmp	r3, #0
 8003642:	d107      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x778>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	0e9b      	lsrs	r3, r3, #26
 800364a:	3301      	adds	r3, #1
 800364c:	069b      	lsls	r3, r3, #26
 800364e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003652:	e015      	b.n	8003680 <HAL_ADC_ConfigChannel+0x7a4>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800365a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365c:	fa93 f3a3 	rbit	r3, r3
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800366c:	2320      	movs	r3, #32
 800366e:	e003      	b.n	8003678 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003672:	fab3 f383 	clz	r3, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3301      	adds	r3, #1
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x7c4>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	0e9b      	lsrs	r3, r3, #26
 8003692:	3301      	adds	r3, #1
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2101      	movs	r1, #1
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	e017      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x7f4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa93 f3a3 	rbit	r3, r3
 80036ac:	61bb      	str	r3, [r7, #24]
  return result;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80036b8:	2320      	movs	r3, #32
 80036ba:	e003      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3301      	adds	r3, #1
 80036c6:	f003 031f 	and.w	r3, r3, #31
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	ea42 0103 	orr.w	r1, r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10d      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x820>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	0e9b      	lsrs	r3, r3, #26
 80036e6:	3301      	adds	r3, #1
 80036e8:	f003 021f 	and.w	r2, r3, #31
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	3b1e      	subs	r3, #30
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036fa:	e01b      	b.n	8003734 <HAL_ADC_ConfigChannel+0x858>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	fa93 f3a3 	rbit	r3, r3
 8003708:	60fb      	str	r3, [r7, #12]
  return result;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003714:	2320      	movs	r3, #32
 8003716:	e003      	b.n	8003720 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fab3 f383 	clz	r3, r3
 800371e:	b2db      	uxtb	r3, r3
 8003720:	3301      	adds	r3, #1
 8003722:	f003 021f 	and.w	r2, r3, #31
 8003726:	4613      	mov	r3, r2
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	4413      	add	r3, r2
 800372c:	3b1e      	subs	r3, #30
 800372e:	051b      	lsls	r3, r3, #20
 8003730:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003734:	430b      	orrs	r3, r1
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	6892      	ldr	r2, [r2, #8]
 800373a:	4619      	mov	r1, r3
 800373c:	f7ff f8d2 	bl	80028e4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f280 80d7 	bge.w	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a06      	ldr	r2, [pc, #24]	; (8003768 <HAL_ADC_ConfigChannel+0x88c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d004      	beq.n	800375e <HAL_ADC_ConfigChannel+0x882>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_ADC_ConfigChannel+0x890>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10a      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x898>
 800375e:	4b04      	ldr	r3, [pc, #16]	; (8003770 <HAL_ADC_ConfigChannel+0x894>)
 8003760:	e009      	b.n	8003776 <HAL_ADC_ConfigChannel+0x89a>
 8003762:	bf00      	nop
 8003764:	47ff0000 	.word	0x47ff0000
 8003768:	40022000 	.word	0x40022000
 800376c:	40022100 	.word	0x40022100
 8003770:	40022300 	.word	0x40022300
 8003774:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_ADC_ConfigChannel+0xa30>)
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe ff88 	bl	800268c <LL_ADC_GetCommonPathInternalCh>
 800377c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a62      	ldr	r2, [pc, #392]	; (8003910 <HAL_ADC_ConfigChannel+0xa34>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a61      	ldr	r2, [pc, #388]	; (8003914 <HAL_ADC_ConfigChannel+0xa38>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10e      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x8d6>
 8003794:	485e      	ldr	r0, [pc, #376]	; (8003910 <HAL_ADC_ConfigChannel+0xa34>)
 8003796:	f7ff f95f 	bl	8002a58 <LL_ADC_IsEnabled>
 800379a:	4604      	mov	r4, r0
 800379c:	485d      	ldr	r0, [pc, #372]	; (8003914 <HAL_ADC_ConfigChannel+0xa38>)
 800379e:	f7ff f95b 	bl	8002a58 <LL_ADC_IsEnabled>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4323      	orrs	r3, r4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf0c      	ite	eq
 80037aa:	2301      	moveq	r3, #1
 80037ac:	2300      	movne	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e008      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x8e8>
 80037b2:	4859      	ldr	r0, [pc, #356]	; (8003918 <HAL_ADC_ConfigChannel+0xa3c>)
 80037b4:	f7ff f950 	bl	8002a58 <LL_ADC_IsEnabled>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8084 	beq.w	80038d2 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a53      	ldr	r2, [pc, #332]	; (800391c <HAL_ADC_ConfigChannel+0xa40>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d132      	bne.n	800383a <HAL_ADC_ConfigChannel+0x95e>
 80037d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d12c      	bne.n	800383a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <HAL_ADC_ConfigChannel+0xa3c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	f040 8086 	bne.w	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a47      	ldr	r2, [pc, #284]	; (8003910 <HAL_ADC_ConfigChannel+0xa34>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_ADC_ConfigChannel+0x924>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a46      	ldr	r2, [pc, #280]	; (8003914 <HAL_ADC_ConfigChannel+0xa38>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x928>
 8003800:	4a47      	ldr	r2, [pc, #284]	; (8003920 <HAL_ADC_ConfigChannel+0xa44>)
 8003802:	e000      	b.n	8003806 <HAL_ADC_ConfigChannel+0x92a>
 8003804:	4a41      	ldr	r2, [pc, #260]	; (800390c <HAL_ADC_ConfigChannel+0xa30>)
 8003806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800380a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe ff28 	bl	8002666 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003816:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_ADC_ConfigChannel+0xa48>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	099b      	lsrs	r3, r3, #6
 800381c:	4a42      	ldr	r2, [pc, #264]	; (8003928 <HAL_ADC_ConfigChannel+0xa4c>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	3301      	adds	r3, #1
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800382a:	e002      	b.n	8003832 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	3b01      	subs	r3, #1
 8003830:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f9      	bne.n	800382c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003838:	e05e      	b.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a3b      	ldr	r2, [pc, #236]	; (800392c <HAL_ADC_ConfigChannel+0xa50>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d120      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x9aa>
 8003844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11a      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <HAL_ADC_ConfigChannel+0xa3c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d14e      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2c      	ldr	r2, [pc, #176]	; (8003910 <HAL_ADC_ConfigChannel+0xa34>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_ADC_ConfigChannel+0x992>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2a      	ldr	r2, [pc, #168]	; (8003914 <HAL_ADC_ConfigChannel+0xa38>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x996>
 800386e:	4a2c      	ldr	r2, [pc, #176]	; (8003920 <HAL_ADC_ConfigChannel+0xa44>)
 8003870:	e000      	b.n	8003874 <HAL_ADC_ConfigChannel+0x998>
 8003872:	4a26      	ldr	r2, [pc, #152]	; (800390c <HAL_ADC_ConfigChannel+0xa30>)
 8003874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7fe fef1 	bl	8002666 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003884:	e038      	b.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a29      	ldr	r2, [pc, #164]	; (8003930 <HAL_ADC_ConfigChannel+0xa54>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d133      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
 8003890:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d12d      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1d      	ldr	r2, [pc, #116]	; (8003918 <HAL_ADC_ConfigChannel+0xa3c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d128      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_ADC_ConfigChannel+0xa34>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_ADC_ConfigChannel+0x9de>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	; (8003914 <HAL_ADC_ConfigChannel+0xa38>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x9e2>
 80038ba:	4a19      	ldr	r2, [pc, #100]	; (8003920 <HAL_ADC_ConfigChannel+0xa44>)
 80038bc:	e000      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x9e4>
 80038be:	4a13      	ldr	r2, [pc, #76]	; (800390c <HAL_ADC_ConfigChannel+0xa30>)
 80038c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe fecb 	bl	8002666 <LL_ADC_SetCommonPathInternalCh>
 80038d0:	e012      	b.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80038e4:	e008      	b.n	80038f8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ea:	f043 0220 	orr.w	r2, r3, #32
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003900:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003904:	4618      	mov	r0, r3
 8003906:	37e4      	adds	r7, #228	; 0xe4
 8003908:	46bd      	mov	sp, r7
 800390a:	bd90      	pop	{r4, r7, pc}
 800390c:	58026300 	.word	0x58026300
 8003910:	40022000 	.word	0x40022000
 8003914:	40022100 	.word	0x40022100
 8003918:	58026000 	.word	0x58026000
 800391c:	c7520000 	.word	0xc7520000
 8003920:	40022300 	.word	0x40022300
 8003924:	24000000 	.word	0x24000000
 8003928:	053e2d63 	.word	0x053e2d63
 800392c:	c3210000 	.word	0xc3210000
 8003930:	cb840000 	.word	0xcb840000

08003934 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a6c      	ldr	r2, [pc, #432]	; (8003af4 <ADC_ConfigureBoostMode+0x1c0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <ADC_ConfigureBoostMode+0x1c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a6b      	ldr	r2, [pc, #428]	; (8003af8 <ADC_ConfigureBoostMode+0x1c4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d109      	bne.n	8003964 <ADC_ConfigureBoostMode+0x30>
 8003950:	4b6a      	ldr	r3, [pc, #424]	; (8003afc <ADC_ConfigureBoostMode+0x1c8>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003958:	2b00      	cmp	r3, #0
 800395a:	bf14      	ite	ne
 800395c:	2301      	movne	r3, #1
 800395e:	2300      	moveq	r3, #0
 8003960:	b2db      	uxtb	r3, r3
 8003962:	e008      	b.n	8003976 <ADC_ConfigureBoostMode+0x42>
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <ADC_ConfigureBoostMode+0x1cc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf14      	ite	ne
 8003970:	2301      	movne	r3, #1
 8003972:	2300      	moveq	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01c      	beq.n	80039b4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800397a:	f004 fb0b 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 800397e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003988:	d010      	beq.n	80039ac <ADC_ConfigureBoostMode+0x78>
 800398a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800398e:	d873      	bhi.n	8003a78 <ADC_ConfigureBoostMode+0x144>
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d002      	beq.n	800399c <ADC_ConfigureBoostMode+0x68>
 8003996:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800399a:	d16d      	bne.n	8003a78 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a8:	60fb      	str	r3, [r7, #12]
        break;
 80039aa:	e068      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	089b      	lsrs	r3, r3, #2
 80039b0:	60fb      	str	r3, [r7, #12]
        break;
 80039b2:	e064      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f005 fce6 	bl	800938c <HAL_RCCEx_GetPeriphCLKFreq>
 80039c0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039ca:	d051      	beq.n	8003a70 <ADC_ConfigureBoostMode+0x13c>
 80039cc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80039d0:	d854      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 80039d2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039d6:	d047      	beq.n	8003a68 <ADC_ConfigureBoostMode+0x134>
 80039d8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80039dc:	d84e      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 80039de:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039e2:	d03d      	beq.n	8003a60 <ADC_ConfigureBoostMode+0x12c>
 80039e4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80039e8:	d848      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 80039ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ee:	d033      	beq.n	8003a58 <ADC_ConfigureBoostMode+0x124>
 80039f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039f4:	d842      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 80039f6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80039fa:	d029      	beq.n	8003a50 <ADC_ConfigureBoostMode+0x11c>
 80039fc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a00:	d83c      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 8003a02:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a06:	d01a      	beq.n	8003a3e <ADC_ConfigureBoostMode+0x10a>
 8003a08:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a0c:	d836      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 8003a0e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a12:	d014      	beq.n	8003a3e <ADC_ConfigureBoostMode+0x10a>
 8003a14:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003a18:	d830      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d00e      	beq.n	8003a3e <ADC_ConfigureBoostMode+0x10a>
 8003a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a24:	d82a      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 8003a26:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a2a:	d008      	beq.n	8003a3e <ADC_ConfigureBoostMode+0x10a>
 8003a2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a30:	d824      	bhi.n	8003a7c <ADC_ConfigureBoostMode+0x148>
 8003a32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a36:	d002      	beq.n	8003a3e <ADC_ConfigureBoostMode+0x10a>
 8003a38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a3c:	d11e      	bne.n	8003a7c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0c9b      	lsrs	r3, r3, #18
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	60fb      	str	r3, [r7, #12]
        break;
 8003a4e:	e016      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	60fb      	str	r3, [r7, #12]
        break;
 8003a56:	e012      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	60fb      	str	r3, [r7, #12]
        break;
 8003a5e:	e00e      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	099b      	lsrs	r3, r3, #6
 8003a64:	60fb      	str	r3, [r7, #12]
        break;
 8003a66:	e00a      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	09db      	lsrs	r3, r3, #7
 8003a6c:	60fb      	str	r3, [r7, #12]
        break;
 8003a6e:	e006      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	60fb      	str	r3, [r7, #12]
        break;
 8003a76:	e002      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003a78:	bf00      	nop
 8003a7a:	e000      	b.n	8003a7e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003a7c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a1f      	ldr	r2, [pc, #124]	; (8003b04 <ADC_ConfigureBoostMode+0x1d0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d808      	bhi.n	8003a9e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003a9a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003a9c:	e025      	b.n	8003aea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	4a19      	ldr	r2, [pc, #100]	; (8003b08 <ADC_ConfigureBoostMode+0x1d4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d80a      	bhi.n	8003abc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab8:	609a      	str	r2, [r3, #8]
}
 8003aba:	e016      	b.n	8003aea <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <ADC_ConfigureBoostMode+0x1d8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d80a      	bhi.n	8003ada <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	e007      	b.n	8003aea <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ae8:	609a      	str	r2, [r3, #8]
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40022000 	.word	0x40022000
 8003af8:	40022100 	.word	0x40022100
 8003afc:	40022300 	.word	0x40022300
 8003b00:	58026300 	.word	0x58026300
 8003b04:	005f5e10 	.word	0x005f5e10
 8003b08:	00bebc20 	.word	0x00bebc20
 8003b0c:	017d7840 	.word	0x017d7840

08003b10 <LL_ADC_IsEnabled>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <LL_ADC_IsEnabled+0x18>
 8003b24:	2301      	movs	r3, #1
 8003b26:	e000      	b.n	8003b2a <LL_ADC_IsEnabled+0x1a>
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <LL_ADC_REG_IsConversionOngoing>:
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d101      	bne.n	8003b4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b0a3      	sub	sp, #140	; 0x8c
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0c1      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003b82:	2300      	movs	r3, #0
 8003b84:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a5e      	ldr	r2, [pc, #376]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d102      	bne.n	8003b9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003b94:	4b5d      	ldr	r3, [pc, #372]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e001      	b.n	8003b9e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	f043 0220 	orr.w	r2, r3, #32
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0a0      	b.n	8003cfe <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff ffb9 	bl	8003b36 <LL_ADC_REG_IsConversionOngoing>
 8003bc4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff ffb2 	bl	8003b36 <LL_ADC_REG_IsConversionOngoing>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8081 	bne.w	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003bda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d17c      	bne.n	8003cdc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a48      	ldr	r2, [pc, #288]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d004      	beq.n	8003bf6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a46      	ldr	r2, [pc, #280]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003bf6:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003bf8:	e000      	b.n	8003bfc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003bfc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d039      	beq.n	8003c7a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003c06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3a      	ldr	r2, [pc, #232]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d004      	beq.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a39      	ldr	r2, [pc, #228]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10e      	bne.n	8003c4a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003c2c:	4836      	ldr	r0, [pc, #216]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c2e:	f7ff ff6f 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c32:	4604      	mov	r4, r0
 8003c34:	4835      	ldr	r0, [pc, #212]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c36:	f7ff ff6b 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4323      	orrs	r3, r4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	bf0c      	ite	eq
 8003c42:	2301      	moveq	r3, #1
 8003c44:	2300      	movne	r3, #0
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	e008      	b.n	8003c5c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003c4a:	4833      	ldr	r0, [pc, #204]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003c4c:	f7ff ff60 	bl	8003b10 <LL_ADC_IsEnabled>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf0c      	ite	eq
 8003c56:	2301      	moveq	r3, #1
 8003c58:	2300      	movne	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d047      	beq.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003c60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	4b2d      	ldr	r3, [pc, #180]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6811      	ldr	r1, [r2, #0]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6892      	ldr	r2, [r2, #8]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c76:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c78:	e03a      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003c84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a1d      	ldr	r2, [pc, #116]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10e      	bne.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003c9a:	481b      	ldr	r0, [pc, #108]	; (8003d08 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003c9c:	f7ff ff38 	bl	8003b10 <LL_ADC_IsEnabled>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	481a      	ldr	r0, [pc, #104]	; (8003d0c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ca4:	f7ff ff34 	bl	8003b10 <LL_ADC_IsEnabled>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4323      	orrs	r3, r4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	bf0c      	ite	eq
 8003cb0:	2301      	moveq	r3, #1
 8003cb2:	2300      	movne	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	e008      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003cb8:	4817      	ldr	r0, [pc, #92]	; (8003d18 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003cba:	f7ff ff29 	bl	8003b10 <LL_ADC_IsEnabled>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	bf0c      	ite	eq
 8003cc4:	2301      	moveq	r3, #1
 8003cc6:	2300      	movne	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003cd8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cda:	e009      	b.n	8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003cee:	e000      	b.n	8003cf2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003cf0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003cfa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	378c      	adds	r7, #140	; 0x8c
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd90      	pop	{r4, r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40022100 	.word	0x40022100
 8003d10:	40022300 	.word	0x40022300
 8003d14:	58026300 	.word	0x58026300
 8003d18:	58026000 	.word	0x58026000
 8003d1c:	fffff0e0 	.word	0xfffff0e0

08003d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <__NVIC_SetPriorityGrouping+0x40>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003d48:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <__NVIC_SetPriorityGrouping+0x44>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <__NVIC_SetPriorityGrouping+0x40>)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	60d3      	str	r3, [r2, #12]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00
 8003d64:	05fa0000 	.word	0x05fa0000

08003d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <__NVIC_GetPriorityGrouping+0x18>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	f003 0307 	and.w	r3, r3, #7
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	db0b      	blt.n	8003dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d96:	88fb      	ldrh	r3, [r7, #6]
 8003d98:	f003 021f 	and.w	r2, r3, #31
 8003d9c:	4907      	ldr	r1, [pc, #28]	; (8003dbc <__NVIC_EnableIRQ+0x38>)
 8003d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da2:	095b      	lsrs	r3, r3, #5
 8003da4:	2001      	movs	r0, #1
 8003da6:	fa00 f202 	lsl.w	r2, r0, r2
 8003daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	e000e100 	.word	0xe000e100

08003dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	6039      	str	r1, [r7, #0]
 8003dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	db0a      	blt.n	8003dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	490c      	ldr	r1, [pc, #48]	; (8003e0c <__NVIC_SetPriority+0x4c>)
 8003dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003dde:	0112      	lsls	r2, r2, #4
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	440b      	add	r3, r1
 8003de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003de8:	e00a      	b.n	8003e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	4908      	ldr	r1, [pc, #32]	; (8003e10 <__NVIC_SetPriority+0x50>)
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	3b04      	subs	r3, #4
 8003df8:	0112      	lsls	r2, r2, #4
 8003dfa:	b2d2      	uxtb	r2, r2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	761a      	strb	r2, [r3, #24]
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000e100 	.word	0xe000e100
 8003e10:	e000ed00 	.word	0xe000ed00

08003e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f1c3 0307 	rsb	r3, r3, #7
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	bf28      	it	cs
 8003e32:	2304      	movcs	r3, #4
 8003e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d902      	bls.n	8003e44 <NVIC_EncodePriority+0x30>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3b03      	subs	r3, #3
 8003e42:	e000      	b.n	8003e46 <NVIC_EncodePriority+0x32>
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43da      	mvns	r2, r3
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	401a      	ands	r2, r3
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43d9      	mvns	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e6c:	4313      	orrs	r3, r2
         );
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	; 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3b01      	subs	r3, #1
 8003e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e8c:	d301      	bcc.n	8003e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e00f      	b.n	8003eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e92:	4a0a      	ldr	r2, [pc, #40]	; (8003ebc <SysTick_Config+0x40>)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e9a:	210f      	movs	r1, #15
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	f7ff ff8e 	bl	8003dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <SysTick_Config+0x40>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eaa:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <SysTick_Config+0x40>)
 8003eac:	2207      	movs	r2, #7
 8003eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	e000e010 	.word	0xe000e010

08003ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff ff29 	bl	8003d20 <__NVIC_SetPriorityGrouping>
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b086      	sub	sp, #24
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	4603      	mov	r3, r0
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	607a      	str	r2, [r7, #4]
 8003ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ee4:	f7ff ff40 	bl	8003d68 <__NVIC_GetPriorityGrouping>
 8003ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	f7ff ff90 	bl	8003e14 <NVIC_EncodePriority>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003efa:	4611      	mov	r1, r2
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7ff ff5f 	bl	8003dc0 <__NVIC_SetPriority>
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	4603      	mov	r3, r0
 8003f12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff33 	bl	8003d84 <__NVIC_EnableIRQ>
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ffa4 	bl	8003e7c <SysTick_Config>
 8003f34:	4603      	mov	r3, r0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7fe fb4a 	bl	80025e0 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e314      	b.n	8004582 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a66      	ldr	r2, [pc, #408]	; (80040f8 <HAL_DMA_Init+0x1b8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d04a      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a65      	ldr	r2, [pc, #404]	; (80040fc <HAL_DMA_Init+0x1bc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d045      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a63      	ldr	r2, [pc, #396]	; (8004100 <HAL_DMA_Init+0x1c0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d040      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a62      	ldr	r2, [pc, #392]	; (8004104 <HAL_DMA_Init+0x1c4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d03b      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a60      	ldr	r2, [pc, #384]	; (8004108 <HAL_DMA_Init+0x1c8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d036      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a5f      	ldr	r2, [pc, #380]	; (800410c <HAL_DMA_Init+0x1cc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d031      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a5d      	ldr	r2, [pc, #372]	; (8004110 <HAL_DMA_Init+0x1d0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d02c      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5c      	ldr	r2, [pc, #368]	; (8004114 <HAL_DMA_Init+0x1d4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d027      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a5a      	ldr	r2, [pc, #360]	; (8004118 <HAL_DMA_Init+0x1d8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d022      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a59      	ldr	r2, [pc, #356]	; (800411c <HAL_DMA_Init+0x1dc>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d01d      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a57      	ldr	r2, [pc, #348]	; (8004120 <HAL_DMA_Init+0x1e0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d018      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a56      	ldr	r2, [pc, #344]	; (8004124 <HAL_DMA_Init+0x1e4>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d013      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a54      	ldr	r2, [pc, #336]	; (8004128 <HAL_DMA_Init+0x1e8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00e      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a53      	ldr	r2, [pc, #332]	; (800412c <HAL_DMA_Init+0x1ec>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d009      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a51      	ldr	r2, [pc, #324]	; (8004130 <HAL_DMA_Init+0x1f0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d004      	beq.n	8003ff8 <HAL_DMA_Init+0xb8>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a50      	ldr	r2, [pc, #320]	; (8004134 <HAL_DMA_Init+0x1f4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Init+0xbc>
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_DMA_Init+0xbe>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 813c 	beq.w	800427c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a37      	ldr	r2, [pc, #220]	; (80040f8 <HAL_DMA_Init+0x1b8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d04a      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a36      	ldr	r2, [pc, #216]	; (80040fc <HAL_DMA_Init+0x1bc>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d045      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a34      	ldr	r2, [pc, #208]	; (8004100 <HAL_DMA_Init+0x1c0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d040      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a33      	ldr	r2, [pc, #204]	; (8004104 <HAL_DMA_Init+0x1c4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d03b      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_DMA_Init+0x1c8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d036      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a30      	ldr	r2, [pc, #192]	; (800410c <HAL_DMA_Init+0x1cc>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d031      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a2e      	ldr	r2, [pc, #184]	; (8004110 <HAL_DMA_Init+0x1d0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02c      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <HAL_DMA_Init+0x1d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d027      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <HAL_DMA_Init+0x1d8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d022      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <HAL_DMA_Init+0x1dc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d01d      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a28      	ldr	r2, [pc, #160]	; (8004120 <HAL_DMA_Init+0x1e0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d018      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <HAL_DMA_Init+0x1e4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d013      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a25      	ldr	r2, [pc, #148]	; (8004128 <HAL_DMA_Init+0x1e8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00e      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a24      	ldr	r2, [pc, #144]	; (800412c <HAL_DMA_Init+0x1ec>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d009      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a22      	ldr	r2, [pc, #136]	; (8004130 <HAL_DMA_Init+0x1f0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d004      	beq.n	80040b4 <HAL_DMA_Init+0x174>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a21      	ldr	r2, [pc, #132]	; (8004134 <HAL_DMA_Init+0x1f4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d108      	bne.n	80040c6 <HAL_DMA_Init+0x186>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0201 	bic.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e007      	b.n	80040d6 <HAL_DMA_Init+0x196>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040d6:	e02f      	b.n	8004138 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040d8:	f7fe fa82 	bl	80025e0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d928      	bls.n	8004138 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2203      	movs	r2, #3
 80040f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e244      	b.n	8004582 <HAL_DMA_Init+0x642>
 80040f8:	40020010 	.word	0x40020010
 80040fc:	40020028 	.word	0x40020028
 8004100:	40020040 	.word	0x40020040
 8004104:	40020058 	.word	0x40020058
 8004108:	40020070 	.word	0x40020070
 800410c:	40020088 	.word	0x40020088
 8004110:	400200a0 	.word	0x400200a0
 8004114:	400200b8 	.word	0x400200b8
 8004118:	40020410 	.word	0x40020410
 800411c:	40020428 	.word	0x40020428
 8004120:	40020440 	.word	0x40020440
 8004124:	40020458 	.word	0x40020458
 8004128:	40020470 	.word	0x40020470
 800412c:	40020488 	.word	0x40020488
 8004130:	400204a0 	.word	0x400204a0
 8004134:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1c8      	bne.n	80040d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4b84      	ldr	r3, [pc, #528]	; (8004364 <HAL_DMA_Init+0x424>)
 8004152:	4013      	ands	r3, r2
 8004154:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800415e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004176:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	2b04      	cmp	r3, #4
 800418a:	d107      	bne.n	800419c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	4313      	orrs	r3, r2
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	2b28      	cmp	r3, #40	; 0x28
 80041a2:	d903      	bls.n	80041ac <HAL_DMA_Init+0x26c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b2e      	cmp	r3, #46	; 0x2e
 80041aa:	d91f      	bls.n	80041ec <HAL_DMA_Init+0x2ac>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	2b3e      	cmp	r3, #62	; 0x3e
 80041b2:	d903      	bls.n	80041bc <HAL_DMA_Init+0x27c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b42      	cmp	r3, #66	; 0x42
 80041ba:	d917      	bls.n	80041ec <HAL_DMA_Init+0x2ac>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b46      	cmp	r3, #70	; 0x46
 80041c2:	d903      	bls.n	80041cc <HAL_DMA_Init+0x28c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	2b48      	cmp	r3, #72	; 0x48
 80041ca:	d90f      	bls.n	80041ec <HAL_DMA_Init+0x2ac>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b4e      	cmp	r3, #78	; 0x4e
 80041d2:	d903      	bls.n	80041dc <HAL_DMA_Init+0x29c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b52      	cmp	r3, #82	; 0x52
 80041da:	d907      	bls.n	80041ec <HAL_DMA_Init+0x2ac>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b73      	cmp	r3, #115	; 0x73
 80041e2:	d905      	bls.n	80041f0 <HAL_DMA_Init+0x2b0>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	2b77      	cmp	r3, #119	; 0x77
 80041ea:	d801      	bhi.n	80041f0 <HAL_DMA_Init+0x2b0>
 80041ec:	2301      	movs	r3, #1
 80041ee:	e000      	b.n	80041f2 <HAL_DMA_Init+0x2b2>
 80041f0:	2300      	movs	r3, #0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041fc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 0307 	bic.w	r3, r3, #7
 8004214:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b04      	cmp	r3, #4
 8004226:	d117      	bne.n	8004258 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00e      	beq.n	8004258 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f001 fdcc 	bl	8005dd8 <DMA_CheckFifoParam>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d008      	beq.n	8004258 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2240      	movs	r2, #64	; 0x40
 800424a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e194      	b.n	8004582 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f001 fd07 	bl	8005c74 <DMA_CalcBaseAndBitshift>
 8004266:	4603      	mov	r3, r0
 8004268:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	223f      	movs	r2, #63	; 0x3f
 8004274:	409a      	lsls	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	e0ca      	b.n	8004412 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a39      	ldr	r2, [pc, #228]	; (8004368 <HAL_DMA_Init+0x428>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d022      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a38      	ldr	r2, [pc, #224]	; (800436c <HAL_DMA_Init+0x42c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d01d      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a36      	ldr	r2, [pc, #216]	; (8004370 <HAL_DMA_Init+0x430>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d018      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a35      	ldr	r2, [pc, #212]	; (8004374 <HAL_DMA_Init+0x434>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d013      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a33      	ldr	r2, [pc, #204]	; (8004378 <HAL_DMA_Init+0x438>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d00e      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a32      	ldr	r2, [pc, #200]	; (800437c <HAL_DMA_Init+0x43c>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d009      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a30      	ldr	r2, [pc, #192]	; (8004380 <HAL_DMA_Init+0x440>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d004      	beq.n	80042cc <HAL_DMA_Init+0x38c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a2f      	ldr	r2, [pc, #188]	; (8004384 <HAL_DMA_Init+0x444>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_DMA_Init+0x390>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_DMA_Init+0x392>
 80042d0:	2300      	movs	r3, #0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8094 	beq.w	8004400 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <HAL_DMA_Init+0x428>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d021      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a21      	ldr	r2, [pc, #132]	; (800436c <HAL_DMA_Init+0x42c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d01c      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <HAL_DMA_Init+0x430>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d017      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <HAL_DMA_Init+0x434>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d012      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <HAL_DMA_Init+0x438>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00d      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a1b      	ldr	r2, [pc, #108]	; (800437c <HAL_DMA_Init+0x43c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d008      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_DMA_Init+0x440>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d003      	beq.n	8004326 <HAL_DMA_Init+0x3e6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a18      	ldr	r2, [pc, #96]	; (8004384 <HAL_DMA_Init+0x444>)
 8004324:	4293      	cmp	r3, r2
 8004326:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_DMA_Init+0x448>)
 8004344:	4013      	ands	r3, r2
 8004346:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d01d      	beq.n	800438c <HAL_DMA_Init+0x44c>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d102      	bne.n	800435e <HAL_DMA_Init+0x41e>
 8004358:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800435c:	e017      	b.n	800438e <HAL_DMA_Init+0x44e>
 800435e:	2300      	movs	r3, #0
 8004360:	e015      	b.n	800438e <HAL_DMA_Init+0x44e>
 8004362:	bf00      	nop
 8004364:	fe10803f 	.word	0xfe10803f
 8004368:	58025408 	.word	0x58025408
 800436c:	5802541c 	.word	0x5802541c
 8004370:	58025430 	.word	0x58025430
 8004374:	58025444 	.word	0x58025444
 8004378:	58025458 	.word	0x58025458
 800437c:	5802546c 	.word	0x5802546c
 8004380:	58025480 	.word	0x58025480
 8004384:	58025494 	.word	0x58025494
 8004388:	fffe000f 	.word	0xfffe000f
 800438c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68d2      	ldr	r2, [r2, #12]
 8004392:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800439c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b6e      	ldr	r3, [pc, #440]	; (800458c <HAL_DMA_Init+0x64c>)
 80043d4:	4413      	add	r3, r2
 80043d6:	4a6e      	ldr	r2, [pc, #440]	; (8004590 <HAL_DMA_Init+0x650>)
 80043d8:	fba2 2303 	umull	r2, r3, r2, r3
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	009a      	lsls	r2, r3, #2
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f001 fc45 	bl	8005c74 <DMA_CalcBaseAndBitshift>
 80043ea:	4603      	mov	r3, r0
 80043ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f2:	f003 031f 	and.w	r3, r3, #31
 80043f6:	2201      	movs	r2, #1
 80043f8:	409a      	lsls	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e008      	b.n	8004412 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2240      	movs	r2, #64	; 0x40
 8004404:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2203      	movs	r2, #3
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e0b7      	b.n	8004582 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a5f      	ldr	r2, [pc, #380]	; (8004594 <HAL_DMA_Init+0x654>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d072      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5d      	ldr	r2, [pc, #372]	; (8004598 <HAL_DMA_Init+0x658>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d06d      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5c      	ldr	r2, [pc, #368]	; (800459c <HAL_DMA_Init+0x65c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d068      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5a      	ldr	r2, [pc, #360]	; (80045a0 <HAL_DMA_Init+0x660>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d063      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <HAL_DMA_Init+0x664>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d05e      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a57      	ldr	r2, [pc, #348]	; (80045a8 <HAL_DMA_Init+0x668>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d059      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a56      	ldr	r2, [pc, #344]	; (80045ac <HAL_DMA_Init+0x66c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d054      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a54      	ldr	r2, [pc, #336]	; (80045b0 <HAL_DMA_Init+0x670>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d04f      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a53      	ldr	r2, [pc, #332]	; (80045b4 <HAL_DMA_Init+0x674>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d04a      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a51      	ldr	r2, [pc, #324]	; (80045b8 <HAL_DMA_Init+0x678>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d045      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a50      	ldr	r2, [pc, #320]	; (80045bc <HAL_DMA_Init+0x67c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d040      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a4e      	ldr	r2, [pc, #312]	; (80045c0 <HAL_DMA_Init+0x680>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d03b      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a4d      	ldr	r2, [pc, #308]	; (80045c4 <HAL_DMA_Init+0x684>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d036      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a4b      	ldr	r2, [pc, #300]	; (80045c8 <HAL_DMA_Init+0x688>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d031      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a4a      	ldr	r2, [pc, #296]	; (80045cc <HAL_DMA_Init+0x68c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d02c      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a48      	ldr	r2, [pc, #288]	; (80045d0 <HAL_DMA_Init+0x690>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d027      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a47      	ldr	r2, [pc, #284]	; (80045d4 <HAL_DMA_Init+0x694>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d022      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a45      	ldr	r2, [pc, #276]	; (80045d8 <HAL_DMA_Init+0x698>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d01d      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a44      	ldr	r2, [pc, #272]	; (80045dc <HAL_DMA_Init+0x69c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d018      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a42      	ldr	r2, [pc, #264]	; (80045e0 <HAL_DMA_Init+0x6a0>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a41      	ldr	r2, [pc, #260]	; (80045e4 <HAL_DMA_Init+0x6a4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a3f      	ldr	r2, [pc, #252]	; (80045e8 <HAL_DMA_Init+0x6a8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a3e      	ldr	r2, [pc, #248]	; (80045ec <HAL_DMA_Init+0x6ac>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_DMA_Init+0x5c2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a3c      	ldr	r2, [pc, #240]	; (80045f0 <HAL_DMA_Init+0x6b0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d101      	bne.n	8004506 <HAL_DMA_Init+0x5c6>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <HAL_DMA_Init+0x5c8>
 8004506:	2300      	movs	r3, #0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d032      	beq.n	8004572 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f001 fcdf 	bl	8005ed0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b80      	cmp	r3, #128	; 0x80
 8004518:	d102      	bne.n	8004520 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685a      	ldr	r2, [r3, #4]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004528:	b2d2      	uxtb	r2, r2
 800452a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004534:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d010      	beq.n	8004560 <HAL_DMA_Init+0x620>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d80c      	bhi.n	8004560 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 fd5c 	bl	8006004 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800455c:	605a      	str	r2, [r3, #4]
 800455e:	e008      	b.n	8004572 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	a7fdabf8 	.word	0xa7fdabf8
 8004590:	cccccccd 	.word	0xcccccccd
 8004594:	40020010 	.word	0x40020010
 8004598:	40020028 	.word	0x40020028
 800459c:	40020040 	.word	0x40020040
 80045a0:	40020058 	.word	0x40020058
 80045a4:	40020070 	.word	0x40020070
 80045a8:	40020088 	.word	0x40020088
 80045ac:	400200a0 	.word	0x400200a0
 80045b0:	400200b8 	.word	0x400200b8
 80045b4:	40020410 	.word	0x40020410
 80045b8:	40020428 	.word	0x40020428
 80045bc:	40020440 	.word	0x40020440
 80045c0:	40020458 	.word	0x40020458
 80045c4:	40020470 	.word	0x40020470
 80045c8:	40020488 	.word	0x40020488
 80045cc:	400204a0 	.word	0x400204a0
 80045d0:	400204b8 	.word	0x400204b8
 80045d4:	58025408 	.word	0x58025408
 80045d8:	5802541c 	.word	0x5802541c
 80045dc:	58025430 	.word	0x58025430
 80045e0:	58025444 	.word	0x58025444
 80045e4:	58025458 	.word	0x58025458
 80045e8:	5802546c 	.word	0x5802546c
 80045ec:	58025480 	.word	0x58025480
 80045f0:	58025494 	.word	0x58025494

080045f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e226      	b.n	8004a5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_DMA_Start_IT+0x2a>
 800461a:	2302      	movs	r3, #2
 800461c:	e21f      	b.n	8004a5e <HAL_DMA_Start_IT+0x46a>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b01      	cmp	r3, #1
 8004630:	f040 820a 	bne.w	8004a48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a68      	ldr	r2, [pc, #416]	; (80047e8 <HAL_DMA_Start_IT+0x1f4>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d04a      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a66      	ldr	r2, [pc, #408]	; (80047ec <HAL_DMA_Start_IT+0x1f8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d045      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a65      	ldr	r2, [pc, #404]	; (80047f0 <HAL_DMA_Start_IT+0x1fc>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d040      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a63      	ldr	r2, [pc, #396]	; (80047f4 <HAL_DMA_Start_IT+0x200>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d03b      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a62      	ldr	r2, [pc, #392]	; (80047f8 <HAL_DMA_Start_IT+0x204>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d036      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a60      	ldr	r2, [pc, #384]	; (80047fc <HAL_DMA_Start_IT+0x208>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d031      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a5f      	ldr	r2, [pc, #380]	; (8004800 <HAL_DMA_Start_IT+0x20c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d02c      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a5d      	ldr	r2, [pc, #372]	; (8004804 <HAL_DMA_Start_IT+0x210>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d027      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5c      	ldr	r2, [pc, #368]	; (8004808 <HAL_DMA_Start_IT+0x214>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d022      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a5a      	ldr	r2, [pc, #360]	; (800480c <HAL_DMA_Start_IT+0x218>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a59      	ldr	r2, [pc, #356]	; (8004810 <HAL_DMA_Start_IT+0x21c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a57      	ldr	r2, [pc, #348]	; (8004814 <HAL_DMA_Start_IT+0x220>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d013      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a56      	ldr	r2, [pc, #344]	; (8004818 <HAL_DMA_Start_IT+0x224>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00e      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a54      	ldr	r2, [pc, #336]	; (800481c <HAL_DMA_Start_IT+0x228>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d009      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a53      	ldr	r2, [pc, #332]	; (8004820 <HAL_DMA_Start_IT+0x22c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d004      	beq.n	80046e2 <HAL_DMA_Start_IT+0xee>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a51      	ldr	r2, [pc, #324]	; (8004824 <HAL_DMA_Start_IT+0x230>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d108      	bne.n	80046f4 <HAL_DMA_Start_IT+0x100>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f022 0201 	bic.w	r2, r2, #1
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e007      	b.n	8004704 <HAL_DMA_Start_IT+0x110>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0201 	bic.w	r2, r2, #1
 8004702:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68b9      	ldr	r1, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f001 f906 	bl	800591c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a34      	ldr	r2, [pc, #208]	; (80047e8 <HAL_DMA_Start_IT+0x1f4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d04a      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a33      	ldr	r2, [pc, #204]	; (80047ec <HAL_DMA_Start_IT+0x1f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d045      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a31      	ldr	r2, [pc, #196]	; (80047f0 <HAL_DMA_Start_IT+0x1fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d040      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a30      	ldr	r2, [pc, #192]	; (80047f4 <HAL_DMA_Start_IT+0x200>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d03b      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2e      	ldr	r2, [pc, #184]	; (80047f8 <HAL_DMA_Start_IT+0x204>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d036      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2d      	ldr	r2, [pc, #180]	; (80047fc <HAL_DMA_Start_IT+0x208>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d031      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <HAL_DMA_Start_IT+0x20c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d02c      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a2a      	ldr	r2, [pc, #168]	; (8004804 <HAL_DMA_Start_IT+0x210>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d027      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a28      	ldr	r2, [pc, #160]	; (8004808 <HAL_DMA_Start_IT+0x214>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d022      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a27      	ldr	r2, [pc, #156]	; (800480c <HAL_DMA_Start_IT+0x218>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d01d      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a25      	ldr	r2, [pc, #148]	; (8004810 <HAL_DMA_Start_IT+0x21c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d018      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_DMA_Start_IT+0x220>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d013      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <HAL_DMA_Start_IT+0x224>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00e      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a21      	ldr	r2, [pc, #132]	; (800481c <HAL_DMA_Start_IT+0x228>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d009      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1f      	ldr	r2, [pc, #124]	; (8004820 <HAL_DMA_Start_IT+0x22c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d004      	beq.n	80047b0 <HAL_DMA_Start_IT+0x1bc>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <HAL_DMA_Start_IT+0x230>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d101      	bne.n	80047b4 <HAL_DMA_Start_IT+0x1c0>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e000      	b.n	80047b6 <HAL_DMA_Start_IT+0x1c2>
 80047b4:	2300      	movs	r3, #0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d036      	beq.n	8004828 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f023 021e 	bic.w	r2, r3, #30
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0216 	orr.w	r2, r2, #22
 80047cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d03e      	beq.n	8004854 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0208 	orr.w	r2, r2, #8
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e035      	b.n	8004854 <HAL_DMA_Start_IT+0x260>
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 020e 	bic.w	r2, r3, #14
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 020a 	orr.w	r2, r2, #10
 800483a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0204 	orr.w	r2, r2, #4
 8004852:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a83      	ldr	r2, [pc, #524]	; (8004a68 <HAL_DMA_Start_IT+0x474>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d072      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a82      	ldr	r2, [pc, #520]	; (8004a6c <HAL_DMA_Start_IT+0x478>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d06d      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a80      	ldr	r2, [pc, #512]	; (8004a70 <HAL_DMA_Start_IT+0x47c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d068      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a7f      	ldr	r2, [pc, #508]	; (8004a74 <HAL_DMA_Start_IT+0x480>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d063      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a7d      	ldr	r2, [pc, #500]	; (8004a78 <HAL_DMA_Start_IT+0x484>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d05e      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a7c      	ldr	r2, [pc, #496]	; (8004a7c <HAL_DMA_Start_IT+0x488>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d059      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a7a      	ldr	r2, [pc, #488]	; (8004a80 <HAL_DMA_Start_IT+0x48c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d054      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a79      	ldr	r2, [pc, #484]	; (8004a84 <HAL_DMA_Start_IT+0x490>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d04f      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a77      	ldr	r2, [pc, #476]	; (8004a88 <HAL_DMA_Start_IT+0x494>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d04a      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a76      	ldr	r2, [pc, #472]	; (8004a8c <HAL_DMA_Start_IT+0x498>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d045      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a74      	ldr	r2, [pc, #464]	; (8004a90 <HAL_DMA_Start_IT+0x49c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d040      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a73      	ldr	r2, [pc, #460]	; (8004a94 <HAL_DMA_Start_IT+0x4a0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d03b      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a71      	ldr	r2, [pc, #452]	; (8004a98 <HAL_DMA_Start_IT+0x4a4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d036      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a70      	ldr	r2, [pc, #448]	; (8004a9c <HAL_DMA_Start_IT+0x4a8>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d031      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a6e      	ldr	r2, [pc, #440]	; (8004aa0 <HAL_DMA_Start_IT+0x4ac>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02c      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <HAL_DMA_Start_IT+0x4b0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d027      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a6b      	ldr	r2, [pc, #428]	; (8004aa8 <HAL_DMA_Start_IT+0x4b4>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d022      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6a      	ldr	r2, [pc, #424]	; (8004aac <HAL_DMA_Start_IT+0x4b8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d01d      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a68      	ldr	r2, [pc, #416]	; (8004ab0 <HAL_DMA_Start_IT+0x4bc>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d018      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a67      	ldr	r2, [pc, #412]	; (8004ab4 <HAL_DMA_Start_IT+0x4c0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d013      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a65      	ldr	r2, [pc, #404]	; (8004ab8 <HAL_DMA_Start_IT+0x4c4>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00e      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a64      	ldr	r2, [pc, #400]	; (8004abc <HAL_DMA_Start_IT+0x4c8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d009      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a62      	ldr	r2, [pc, #392]	; (8004ac0 <HAL_DMA_Start_IT+0x4cc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d004      	beq.n	8004944 <HAL_DMA_Start_IT+0x350>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a61      	ldr	r2, [pc, #388]	; (8004ac4 <HAL_DMA_Start_IT+0x4d0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <HAL_DMA_Start_IT+0x354>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_DMA_Start_IT+0x356>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d01a      	beq.n	8004984 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004966:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800496a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004970:	2b00      	cmp	r3, #0
 8004972:	d007      	beq.n	8004984 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004982:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a37      	ldr	r2, [pc, #220]	; (8004a68 <HAL_DMA_Start_IT+0x474>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d04a      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a36      	ldr	r2, [pc, #216]	; (8004a6c <HAL_DMA_Start_IT+0x478>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d045      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a34      	ldr	r2, [pc, #208]	; (8004a70 <HAL_DMA_Start_IT+0x47c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d040      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a33      	ldr	r2, [pc, #204]	; (8004a74 <HAL_DMA_Start_IT+0x480>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d03b      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a31      	ldr	r2, [pc, #196]	; (8004a78 <HAL_DMA_Start_IT+0x484>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d036      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a30      	ldr	r2, [pc, #192]	; (8004a7c <HAL_DMA_Start_IT+0x488>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d031      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <HAL_DMA_Start_IT+0x48c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02c      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2d      	ldr	r2, [pc, #180]	; (8004a84 <HAL_DMA_Start_IT+0x490>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d027      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2b      	ldr	r2, [pc, #172]	; (8004a88 <HAL_DMA_Start_IT+0x494>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d022      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a2a      	ldr	r2, [pc, #168]	; (8004a8c <HAL_DMA_Start_IT+0x498>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d01d      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a28      	ldr	r2, [pc, #160]	; (8004a90 <HAL_DMA_Start_IT+0x49c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d018      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_DMA_Start_IT+0x4a0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d013      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a25      	ldr	r2, [pc, #148]	; (8004a98 <HAL_DMA_Start_IT+0x4a4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00e      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a24      	ldr	r2, [pc, #144]	; (8004a9c <HAL_DMA_Start_IT+0x4a8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d009      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a22      	ldr	r2, [pc, #136]	; (8004aa0 <HAL_DMA_Start_IT+0x4ac>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d004      	beq.n	8004a24 <HAL_DMA_Start_IT+0x430>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a21      	ldr	r2, [pc, #132]	; (8004aa4 <HAL_DMA_Start_IT+0x4b0>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d108      	bne.n	8004a36 <HAL_DMA_Start_IT+0x442>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e012      	b.n	8004a5c <HAL_DMA_Start_IT+0x468>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e009      	b.n	8004a5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40020010 	.word	0x40020010
 8004a6c:	40020028 	.word	0x40020028
 8004a70:	40020040 	.word	0x40020040
 8004a74:	40020058 	.word	0x40020058
 8004a78:	40020070 	.word	0x40020070
 8004a7c:	40020088 	.word	0x40020088
 8004a80:	400200a0 	.word	0x400200a0
 8004a84:	400200b8 	.word	0x400200b8
 8004a88:	40020410 	.word	0x40020410
 8004a8c:	40020428 	.word	0x40020428
 8004a90:	40020440 	.word	0x40020440
 8004a94:	40020458 	.word	0x40020458
 8004a98:	40020470 	.word	0x40020470
 8004a9c:	40020488 	.word	0x40020488
 8004aa0:	400204a0 	.word	0x400204a0
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	58025408 	.word	0x58025408
 8004aac:	5802541c 	.word	0x5802541c
 8004ab0:	58025430 	.word	0x58025430
 8004ab4:	58025444 	.word	0x58025444
 8004ab8:	58025458 	.word	0x58025458
 8004abc:	5802546c 	.word	0x5802546c
 8004ac0:	58025480 	.word	0x58025480
 8004ac4:	58025494 	.word	0x58025494

08004ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ad4:	4b67      	ldr	r3, [pc, #412]	; (8004c74 <HAL_DMA_IRQHandler+0x1ac>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a67      	ldr	r2, [pc, #412]	; (8004c78 <HAL_DMA_IRQHandler+0x1b0>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0a9b      	lsrs	r3, r3, #10
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a5f      	ldr	r2, [pc, #380]	; (8004c7c <HAL_DMA_IRQHandler+0x1b4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d04a      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_DMA_IRQHandler+0x1b8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d045      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	; (8004c84 <HAL_DMA_IRQHandler+0x1bc>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d040      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_DMA_IRQHandler+0x1c0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d03b      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a59      	ldr	r2, [pc, #356]	; (8004c8c <HAL_DMA_IRQHandler+0x1c4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d036      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a57      	ldr	r2, [pc, #348]	; (8004c90 <HAL_DMA_IRQHandler+0x1c8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d031      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_DMA_IRQHandler+0x1cc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d02c      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a54      	ldr	r2, [pc, #336]	; (8004c98 <HAL_DMA_IRQHandler+0x1d0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d027      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a53      	ldr	r2, [pc, #332]	; (8004c9c <HAL_DMA_IRQHandler+0x1d4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d022      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d01d      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a50      	ldr	r2, [pc, #320]	; (8004ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d018      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d013      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_DMA_IRQHandler+0x1e4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00e      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d004      	beq.n	8004b9a <HAL_DMA_IRQHandler+0xd2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a48      	ldr	r2, [pc, #288]	; (8004cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_DMA_IRQHandler+0xd6>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e000      	b.n	8004ba0 <HAL_DMA_IRQHandler+0xd8>
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 842b 	beq.w	80053fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004baa:	f003 031f 	and.w	r3, r3, #31
 8004bae:	2208      	movs	r2, #8
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80a2 	beq.w	8004d00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2e      	ldr	r2, [pc, #184]	; (8004c7c <HAL_DMA_IRQHandler+0x1b4>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d04a      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a2d      	ldr	r2, [pc, #180]	; (8004c80 <HAL_DMA_IRQHandler+0x1b8>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d045      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a2b      	ldr	r2, [pc, #172]	; (8004c84 <HAL_DMA_IRQHandler+0x1bc>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d040      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a2a      	ldr	r2, [pc, #168]	; (8004c88 <HAL_DMA_IRQHandler+0x1c0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d03b      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a28      	ldr	r2, [pc, #160]	; (8004c8c <HAL_DMA_IRQHandler+0x1c4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d036      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a27      	ldr	r2, [pc, #156]	; (8004c90 <HAL_DMA_IRQHandler+0x1c8>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d031      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a25      	ldr	r2, [pc, #148]	; (8004c94 <HAL_DMA_IRQHandler+0x1cc>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d02c      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a24      	ldr	r2, [pc, #144]	; (8004c98 <HAL_DMA_IRQHandler+0x1d0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d027      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a22      	ldr	r2, [pc, #136]	; (8004c9c <HAL_DMA_IRQHandler+0x1d4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d022      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d01d      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1f      	ldr	r2, [pc, #124]	; (8004ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d018      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a1c      	ldr	r2, [pc, #112]	; (8004cac <HAL_DMA_IRQHandler+0x1e4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a19      	ldr	r2, [pc, #100]	; (8004cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_DMA_IRQHandler+0x194>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a18      	ldr	r2, [pc, #96]	; (8004cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d12f      	bne.n	8004cbc <HAL_DMA_IRQHandler+0x1f4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bf14      	ite	ne
 8004c6a:	2301      	movne	r3, #1
 8004c6c:	2300      	moveq	r3, #0
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e02e      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x208>
 8004c72:	bf00      	nop
 8004c74:	24000000 	.word	0x24000000
 8004c78:	1b4e81b5 	.word	0x1b4e81b5
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	bf14      	ite	ne
 8004cca:	2301      	movne	r3, #1
 8004ccc:	2300      	moveq	r3, #0
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d015      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2208      	movs	r2, #8
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d06e      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a69      	ldr	r2, [pc, #420]	; (8004ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d04a      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a67      	ldr	r2, [pc, #412]	; (8004ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d045      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a66      	ldr	r2, [pc, #408]	; (8004ec8 <HAL_DMA_IRQHandler+0x400>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d040      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a64      	ldr	r2, [pc, #400]	; (8004ecc <HAL_DMA_IRQHandler+0x404>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d03b      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a63      	ldr	r2, [pc, #396]	; (8004ed0 <HAL_DMA_IRQHandler+0x408>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d036      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a61      	ldr	r2, [pc, #388]	; (8004ed4 <HAL_DMA_IRQHandler+0x40c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d031      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a60      	ldr	r2, [pc, #384]	; (8004ed8 <HAL_DMA_IRQHandler+0x410>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d02c      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a5e      	ldr	r2, [pc, #376]	; (8004edc <HAL_DMA_IRQHandler+0x414>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d027      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a5d      	ldr	r2, [pc, #372]	; (8004ee0 <HAL_DMA_IRQHandler+0x418>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d022      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a5b      	ldr	r2, [pc, #364]	; (8004ee4 <HAL_DMA_IRQHandler+0x41c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d01d      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a5a      	ldr	r2, [pc, #360]	; (8004ee8 <HAL_DMA_IRQHandler+0x420>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d018      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a58      	ldr	r2, [pc, #352]	; (8004eec <HAL_DMA_IRQHandler+0x424>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d013      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a57      	ldr	r2, [pc, #348]	; (8004ef0 <HAL_DMA_IRQHandler+0x428>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d00e      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a55      	ldr	r2, [pc, #340]	; (8004ef4 <HAL_DMA_IRQHandler+0x42c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a54      	ldr	r2, [pc, #336]	; (8004ef8 <HAL_DMA_IRQHandler+0x430>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_DMA_IRQHandler+0x2ee>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a52      	ldr	r2, [pc, #328]	; (8004efc <HAL_DMA_IRQHandler+0x434>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d10a      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x304>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf14      	ite	ne
 8004dc4:	2301      	movne	r3, #1
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	e003      	b.n	8004dd4 <HAL_DMA_IRQHandler+0x30c>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00d      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ddc:	f003 031f 	and.w	r3, r3, #31
 8004de0:	2201      	movs	r2, #1
 8004de2:	409a      	lsls	r2, r3
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dec:	f043 0202 	orr.w	r2, r3, #2
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	409a      	lsls	r2, r3
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 808f 	beq.w	8004f28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d04a      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d045      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <HAL_DMA_IRQHandler+0x400>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d040      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_DMA_IRQHandler+0x404>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d03b      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a26      	ldr	r2, [pc, #152]	; (8004ed0 <HAL_DMA_IRQHandler+0x408>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d036      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a24      	ldr	r2, [pc, #144]	; (8004ed4 <HAL_DMA_IRQHandler+0x40c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d031      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a23      	ldr	r2, [pc, #140]	; (8004ed8 <HAL_DMA_IRQHandler+0x410>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d02c      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a21      	ldr	r2, [pc, #132]	; (8004edc <HAL_DMA_IRQHandler+0x414>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d027      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a20      	ldr	r2, [pc, #128]	; (8004ee0 <HAL_DMA_IRQHandler+0x418>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d022      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <HAL_DMA_IRQHandler+0x41c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a1d      	ldr	r2, [pc, #116]	; (8004ee8 <HAL_DMA_IRQHandler+0x420>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d018      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a1b      	ldr	r2, [pc, #108]	; (8004eec <HAL_DMA_IRQHandler+0x424>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d013      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a1a      	ldr	r2, [pc, #104]	; (8004ef0 <HAL_DMA_IRQHandler+0x428>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d00e      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <HAL_DMA_IRQHandler+0x42c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <HAL_DMA_IRQHandler+0x430>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x3e2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_DMA_IRQHandler+0x434>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d12a      	bne.n	8004f00 <HAL_DMA_IRQHandler+0x438>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e023      	b.n	8004f08 <HAL_DMA_IRQHandler+0x440>
 8004ec0:	40020010 	.word	0x40020010
 8004ec4:	40020028 	.word	0x40020028
 8004ec8:	40020040 	.word	0x40020040
 8004ecc:	40020058 	.word	0x40020058
 8004ed0:	40020070 	.word	0x40020070
 8004ed4:	40020088 	.word	0x40020088
 8004ed8:	400200a0 	.word	0x400200a0
 8004edc:	400200b8 	.word	0x400200b8
 8004ee0:	40020410 	.word	0x40020410
 8004ee4:	40020428 	.word	0x40020428
 8004ee8:	40020440 	.word	0x40020440
 8004eec:	40020458 	.word	0x40020458
 8004ef0:	40020470 	.word	0x40020470
 8004ef4:	40020488 	.word	0x40020488
 8004ef8:	400204a0 	.word	0x400204a0
 8004efc:	400204b8 	.word	0x400204b8
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f10:	f003 031f 	and.w	r3, r3, #31
 8004f14:	2204      	movs	r2, #4
 8004f16:	409a      	lsls	r2, r3
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f20:	f043 0204 	orr.w	r2, r3, #4
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2210      	movs	r2, #16
 8004f32:	409a      	lsls	r2, r3
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	4013      	ands	r3, r2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a6 	beq.w	800508a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a85      	ldr	r2, [pc, #532]	; (8005158 <HAL_DMA_IRQHandler+0x690>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d04a      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a83      	ldr	r2, [pc, #524]	; (800515c <HAL_DMA_IRQHandler+0x694>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d045      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a82      	ldr	r2, [pc, #520]	; (8005160 <HAL_DMA_IRQHandler+0x698>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d040      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a80      	ldr	r2, [pc, #512]	; (8005164 <HAL_DMA_IRQHandler+0x69c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d03b      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a7f      	ldr	r2, [pc, #508]	; (8005168 <HAL_DMA_IRQHandler+0x6a0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d036      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a7d      	ldr	r2, [pc, #500]	; (800516c <HAL_DMA_IRQHandler+0x6a4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d031      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7c      	ldr	r2, [pc, #496]	; (8005170 <HAL_DMA_IRQHandler+0x6a8>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d02c      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a7a      	ldr	r2, [pc, #488]	; (8005174 <HAL_DMA_IRQHandler+0x6ac>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d027      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a79      	ldr	r2, [pc, #484]	; (8005178 <HAL_DMA_IRQHandler+0x6b0>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a77      	ldr	r2, [pc, #476]	; (800517c <HAL_DMA_IRQHandler+0x6b4>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d01d      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a76      	ldr	r2, [pc, #472]	; (8005180 <HAL_DMA_IRQHandler+0x6b8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d018      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a74      	ldr	r2, [pc, #464]	; (8005184 <HAL_DMA_IRQHandler+0x6bc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a73      	ldr	r2, [pc, #460]	; (8005188 <HAL_DMA_IRQHandler+0x6c0>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00e      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a71      	ldr	r2, [pc, #452]	; (800518c <HAL_DMA_IRQHandler+0x6c4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a70      	ldr	r2, [pc, #448]	; (8005190 <HAL_DMA_IRQHandler+0x6c8>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_DMA_IRQHandler+0x516>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a6e      	ldr	r2, [pc, #440]	; (8005194 <HAL_DMA_IRQHandler+0x6cc>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d10a      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x52c>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0308 	and.w	r3, r3, #8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e009      	b.n	8005008 <HAL_DMA_IRQHandler+0x540>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d03e      	beq.n	800508a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2210      	movs	r2, #16
 8005016:	409a      	lsls	r2, r3
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	2b00      	cmp	r3, #0
 800503e:	d024      	beq.n	800508a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	4798      	blx	r3
 8005048:	e01f      	b.n	800508a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504e:	2b00      	cmp	r3, #0
 8005050:	d01b      	beq.n	800508a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	4798      	blx	r3
 800505a:	e016      	b.n	800508a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d107      	bne.n	800507a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0208 	bic.w	r2, r2, #8
 8005078:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508e:	f003 031f 	and.w	r3, r3, #31
 8005092:	2220      	movs	r2, #32
 8005094:	409a      	lsls	r2, r3
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8110 	beq.w	80052c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a2c      	ldr	r2, [pc, #176]	; (8005158 <HAL_DMA_IRQHandler+0x690>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d04a      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a2b      	ldr	r2, [pc, #172]	; (800515c <HAL_DMA_IRQHandler+0x694>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d045      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a29      	ldr	r2, [pc, #164]	; (8005160 <HAL_DMA_IRQHandler+0x698>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d040      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a28      	ldr	r2, [pc, #160]	; (8005164 <HAL_DMA_IRQHandler+0x69c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d03b      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a26      	ldr	r2, [pc, #152]	; (8005168 <HAL_DMA_IRQHandler+0x6a0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d036      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a25      	ldr	r2, [pc, #148]	; (800516c <HAL_DMA_IRQHandler+0x6a4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d031      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a23      	ldr	r2, [pc, #140]	; (8005170 <HAL_DMA_IRQHandler+0x6a8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d02c      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a22      	ldr	r2, [pc, #136]	; (8005174 <HAL_DMA_IRQHandler+0x6ac>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d027      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a20      	ldr	r2, [pc, #128]	; (8005178 <HAL_DMA_IRQHandler+0x6b0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d022      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	; (800517c <HAL_DMA_IRQHandler+0x6b4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d01d      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_DMA_IRQHandler+0x6b8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d018      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1c      	ldr	r2, [pc, #112]	; (8005184 <HAL_DMA_IRQHandler+0x6bc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d013      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a1a      	ldr	r2, [pc, #104]	; (8005188 <HAL_DMA_IRQHandler+0x6c0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00e      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a19      	ldr	r2, [pc, #100]	; (800518c <HAL_DMA_IRQHandler+0x6c4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d009      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <HAL_DMA_IRQHandler+0x6c8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d004      	beq.n	8005140 <HAL_DMA_IRQHandler+0x678>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a16      	ldr	r2, [pc, #88]	; (8005194 <HAL_DMA_IRQHandler+0x6cc>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d12b      	bne.n	8005198 <HAL_DMA_IRQHandler+0x6d0>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	bf14      	ite	ne
 800514e:	2301      	movne	r3, #1
 8005150:	2300      	moveq	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	e02a      	b.n	80051ac <HAL_DMA_IRQHandler+0x6e4>
 8005156:	bf00      	nop
 8005158:	40020010 	.word	0x40020010
 800515c:	40020028 	.word	0x40020028
 8005160:	40020040 	.word	0x40020040
 8005164:	40020058 	.word	0x40020058
 8005168:	40020070 	.word	0x40020070
 800516c:	40020088 	.word	0x40020088
 8005170:	400200a0 	.word	0x400200a0
 8005174:	400200b8 	.word	0x400200b8
 8005178:	40020410 	.word	0x40020410
 800517c:	40020428 	.word	0x40020428
 8005180:	40020440 	.word	0x40020440
 8005184:	40020458 	.word	0x40020458
 8005188:	40020470 	.word	0x40020470
 800518c:	40020488 	.word	0x40020488
 8005190:	400204a0 	.word	0x400204a0
 8005194:	400204b8 	.word	0x400204b8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0302 	and.w	r3, r3, #2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8087 	beq.w	80052c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	2220      	movs	r2, #32
 80051bc:	409a      	lsls	r2, r3
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d139      	bne.n	8005242 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0216 	bic.w	r2, r2, #22
 80051dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695a      	ldr	r2, [r3, #20]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_DMA_IRQHandler+0x736>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d007      	beq.n	800520e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f022 0208 	bic.w	r2, r2, #8
 800520c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	223f      	movs	r2, #63	; 0x3f
 8005218:	409a      	lsls	r2, r3
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 834a 	beq.w	80058cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4798      	blx	r3
          }
          return;
 8005240:	e344      	b.n	80058cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d018      	beq.n	8005282 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d108      	bne.n	8005270 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02c      	beq.n	80052c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3
 800526e:	e027      	b.n	80052c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005274:	2b00      	cmp	r3, #0
 8005276:	d023      	beq.n	80052c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4798      	blx	r3
 8005280:	e01e      	b.n	80052c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0210 	bic.w	r2, r2, #16
 800529e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 8306 	beq.w	80058d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 8088 	beq.w	80053e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2204      	movs	r2, #4
 80052dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a7a      	ldr	r2, [pc, #488]	; (80054d0 <HAL_DMA_IRQHandler+0xa08>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d04a      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a79      	ldr	r2, [pc, #484]	; (80054d4 <HAL_DMA_IRQHandler+0xa0c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d045      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a77      	ldr	r2, [pc, #476]	; (80054d8 <HAL_DMA_IRQHandler+0xa10>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d040      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a76      	ldr	r2, [pc, #472]	; (80054dc <HAL_DMA_IRQHandler+0xa14>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d03b      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a74      	ldr	r2, [pc, #464]	; (80054e0 <HAL_DMA_IRQHandler+0xa18>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d036      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a73      	ldr	r2, [pc, #460]	; (80054e4 <HAL_DMA_IRQHandler+0xa1c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d031      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a71      	ldr	r2, [pc, #452]	; (80054e8 <HAL_DMA_IRQHandler+0xa20>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d02c      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a70      	ldr	r2, [pc, #448]	; (80054ec <HAL_DMA_IRQHandler+0xa24>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d027      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a6e      	ldr	r2, [pc, #440]	; (80054f0 <HAL_DMA_IRQHandler+0xa28>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d022      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a6d      	ldr	r2, [pc, #436]	; (80054f4 <HAL_DMA_IRQHandler+0xa2c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d01d      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a6b      	ldr	r2, [pc, #428]	; (80054f8 <HAL_DMA_IRQHandler+0xa30>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d018      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a6a      	ldr	r2, [pc, #424]	; (80054fc <HAL_DMA_IRQHandler+0xa34>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d013      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a68      	ldr	r2, [pc, #416]	; (8005500 <HAL_DMA_IRQHandler+0xa38>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d00e      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a67      	ldr	r2, [pc, #412]	; (8005504 <HAL_DMA_IRQHandler+0xa3c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d009      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a65      	ldr	r2, [pc, #404]	; (8005508 <HAL_DMA_IRQHandler+0xa40>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d004      	beq.n	8005380 <HAL_DMA_IRQHandler+0x8b8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a64      	ldr	r2, [pc, #400]	; (800550c <HAL_DMA_IRQHandler+0xa44>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d108      	bne.n	8005392 <HAL_DMA_IRQHandler+0x8ca>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0201 	bic.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e007      	b.n	80053a2 <HAL_DMA_IRQHandler+0x8da>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3301      	adds	r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d307      	bcc.n	80053be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0301 	and.w	r3, r3, #1
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f2      	bne.n	80053a2 <HAL_DMA_IRQHandler+0x8da>
 80053bc:	e000      	b.n	80053c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80053be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d004      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2203      	movs	r2, #3
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80053d6:	e003      	b.n	80053e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8272 	beq.w	80058d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	4798      	blx	r3
 80053fa:	e26c      	b.n	80058d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a43      	ldr	r2, [pc, #268]	; (8005510 <HAL_DMA_IRQHandler+0xa48>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d022      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a42      	ldr	r2, [pc, #264]	; (8005514 <HAL_DMA_IRQHandler+0xa4c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d01d      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a40      	ldr	r2, [pc, #256]	; (8005518 <HAL_DMA_IRQHandler+0xa50>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d018      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a3f      	ldr	r2, [pc, #252]	; (800551c <HAL_DMA_IRQHandler+0xa54>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d013      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a3d      	ldr	r2, [pc, #244]	; (8005520 <HAL_DMA_IRQHandler+0xa58>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a3c      	ldr	r2, [pc, #240]	; (8005524 <HAL_DMA_IRQHandler+0xa5c>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a3a      	ldr	r2, [pc, #232]	; (8005528 <HAL_DMA_IRQHandler+0xa60>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_DMA_IRQHandler+0x984>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a39      	ldr	r2, [pc, #228]	; (800552c <HAL_DMA_IRQHandler+0xa64>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_DMA_IRQHandler+0x988>
 800544c:	2301      	movs	r3, #1
 800544e:	e000      	b.n	8005452 <HAL_DMA_IRQHandler+0x98a>
 8005450:	2300      	movs	r3, #0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 823f 	beq.w	80058d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	2204      	movs	r2, #4
 800546a:	409a      	lsls	r2, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 80cd 	beq.w	8005610 <HAL_DMA_IRQHandler+0xb48>
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80c7 	beq.w	8005610 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2204      	movs	r2, #4
 800548c:	409a      	lsls	r2, r3
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d049      	beq.n	8005530 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8210 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b8:	e20a      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8206 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054cc:	e200      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe08>
 80054ce:	bf00      	nop
 80054d0:	40020010 	.word	0x40020010
 80054d4:	40020028 	.word	0x40020028
 80054d8:	40020040 	.word	0x40020040
 80054dc:	40020058 	.word	0x40020058
 80054e0:	40020070 	.word	0x40020070
 80054e4:	40020088 	.word	0x40020088
 80054e8:	400200a0 	.word	0x400200a0
 80054ec:	400200b8 	.word	0x400200b8
 80054f0:	40020410 	.word	0x40020410
 80054f4:	40020428 	.word	0x40020428
 80054f8:	40020440 	.word	0x40020440
 80054fc:	40020458 	.word	0x40020458
 8005500:	40020470 	.word	0x40020470
 8005504:	40020488 	.word	0x40020488
 8005508:	400204a0 	.word	0x400204a0
 800550c:	400204b8 	.word	0x400204b8
 8005510:	58025408 	.word	0x58025408
 8005514:	5802541c 	.word	0x5802541c
 8005518:	58025430 	.word	0x58025430
 800551c:	58025444 	.word	0x58025444
 8005520:	58025458 	.word	0x58025458
 8005524:	5802546c 	.word	0x5802546c
 8005528:	58025480 	.word	0x58025480
 800552c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d160      	bne.n	80055fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a7f      	ldr	r2, [pc, #508]	; (800573c <HAL_DMA_IRQHandler+0xc74>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d04a      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a7d      	ldr	r2, [pc, #500]	; (8005740 <HAL_DMA_IRQHandler+0xc78>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d045      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a7c      	ldr	r2, [pc, #496]	; (8005744 <HAL_DMA_IRQHandler+0xc7c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d040      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a7a      	ldr	r2, [pc, #488]	; (8005748 <HAL_DMA_IRQHandler+0xc80>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d03b      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a79      	ldr	r2, [pc, #484]	; (800574c <HAL_DMA_IRQHandler+0xc84>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d036      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a77      	ldr	r2, [pc, #476]	; (8005750 <HAL_DMA_IRQHandler+0xc88>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d031      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a76      	ldr	r2, [pc, #472]	; (8005754 <HAL_DMA_IRQHandler+0xc8c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d02c      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a74      	ldr	r2, [pc, #464]	; (8005758 <HAL_DMA_IRQHandler+0xc90>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d027      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a73      	ldr	r2, [pc, #460]	; (800575c <HAL_DMA_IRQHandler+0xc94>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d022      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a71      	ldr	r2, [pc, #452]	; (8005760 <HAL_DMA_IRQHandler+0xc98>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01d      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a70      	ldr	r2, [pc, #448]	; (8005764 <HAL_DMA_IRQHandler+0xc9c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d018      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a6e      	ldr	r2, [pc, #440]	; (8005768 <HAL_DMA_IRQHandler+0xca0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d013      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a6d      	ldr	r2, [pc, #436]	; (800576c <HAL_DMA_IRQHandler+0xca4>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d00e      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a6b      	ldr	r2, [pc, #428]	; (8005770 <HAL_DMA_IRQHandler+0xca8>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d009      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a6a      	ldr	r2, [pc, #424]	; (8005774 <HAL_DMA_IRQHandler+0xcac>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d004      	beq.n	80055da <HAL_DMA_IRQHandler+0xb12>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a68      	ldr	r2, [pc, #416]	; (8005778 <HAL_DMA_IRQHandler+0xcb0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d108      	bne.n	80055ec <HAL_DMA_IRQHandler+0xb24>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0208 	bic.w	r2, r2, #8
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e007      	b.n	80055fc <HAL_DMA_IRQHandler+0xb34>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0204 	bic.w	r2, r2, #4
 80055fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8165 	beq.w	80058d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800560e:	e15f      	b.n	80058d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005614:	f003 031f 	and.w	r3, r3, #31
 8005618:	2202      	movs	r2, #2
 800561a:	409a      	lsls	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 80c5 	beq.w	80057b0 <HAL_DMA_IRQHandler+0xce8>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80bf 	beq.w	80057b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005636:	f003 031f 	and.w	r3, r3, #31
 800563a:	2202      	movs	r2, #2
 800563c:	409a      	lsls	r2, r3
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d018      	beq.n	800567e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 813a 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005668:	e134      	b.n	80058d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8130 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800567c:	e12a      	b.n	80058d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f003 0320 	and.w	r3, r3, #32
 8005684:	2b00      	cmp	r3, #0
 8005686:	f040 8089 	bne.w	800579c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <HAL_DMA_IRQHandler+0xc74>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d04a      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <HAL_DMA_IRQHandler+0xc78>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d045      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a28      	ldr	r2, [pc, #160]	; (8005744 <HAL_DMA_IRQHandler+0xc7c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d040      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <HAL_DMA_IRQHandler+0xc80>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d03b      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a25      	ldr	r2, [pc, #148]	; (800574c <HAL_DMA_IRQHandler+0xc84>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d036      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <HAL_DMA_IRQHandler+0xc88>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d031      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a22      	ldr	r2, [pc, #136]	; (8005754 <HAL_DMA_IRQHandler+0xc8c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d02c      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <HAL_DMA_IRQHandler+0xc90>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d027      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_DMA_IRQHandler+0xc94>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1d      	ldr	r2, [pc, #116]	; (8005760 <HAL_DMA_IRQHandler+0xc98>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01d      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_DMA_IRQHandler+0xc9c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	; (8005768 <HAL_DMA_IRQHandler+0xca0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_DMA_IRQHandler+0xca4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a17      	ldr	r2, [pc, #92]	; (8005770 <HAL_DMA_IRQHandler+0xca8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a16      	ldr	r2, [pc, #88]	; (8005774 <HAL_DMA_IRQHandler+0xcac>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_DMA_IRQHandler+0xc62>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a14      	ldr	r2, [pc, #80]	; (8005778 <HAL_DMA_IRQHandler+0xcb0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d128      	bne.n	800577c <HAL_DMA_IRQHandler+0xcb4>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0214 	bic.w	r2, r2, #20
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e027      	b.n	800578c <HAL_DMA_IRQHandler+0xcc4>
 800573c:	40020010 	.word	0x40020010
 8005740:	40020028 	.word	0x40020028
 8005744:	40020040 	.word	0x40020040
 8005748:	40020058 	.word	0x40020058
 800574c:	40020070 	.word	0x40020070
 8005750:	40020088 	.word	0x40020088
 8005754:	400200a0 	.word	0x400200a0
 8005758:	400200b8 	.word	0x400200b8
 800575c:	40020410 	.word	0x40020410
 8005760:	40020428 	.word	0x40020428
 8005764:	40020440 	.word	0x40020440
 8005768:	40020458 	.word	0x40020458
 800576c:	40020470 	.word	0x40020470
 8005770:	40020488 	.word	0x40020488
 8005774:	400204a0 	.word	0x400204a0
 8005778:	400204b8 	.word	0x400204b8
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 020a 	bic.w	r2, r2, #10
 800578a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8097 	beq.w	80058d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ae:	e091      	b.n	80058d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f003 031f 	and.w	r3, r3, #31
 80057b8:	2208      	movs	r2, #8
 80057ba:	409a      	lsls	r2, r3
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	4013      	ands	r3, r2
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8088 	beq.w	80058d6 <HAL_DMA_IRQHandler+0xe0e>
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f003 0308 	and.w	r3, r3, #8
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 8082 	beq.w	80058d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a41      	ldr	r2, [pc, #260]	; (80058dc <HAL_DMA_IRQHandler+0xe14>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a3f      	ldr	r2, [pc, #252]	; (80058e0 <HAL_DMA_IRQHandler+0xe18>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3e      	ldr	r2, [pc, #248]	; (80058e4 <HAL_DMA_IRQHandler+0xe1c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a3c      	ldr	r2, [pc, #240]	; (80058e8 <HAL_DMA_IRQHandler+0xe20>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a3b      	ldr	r2, [pc, #236]	; (80058ec <HAL_DMA_IRQHandler+0xe24>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a39      	ldr	r2, [pc, #228]	; (80058f0 <HAL_DMA_IRQHandler+0xe28>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a38      	ldr	r2, [pc, #224]	; (80058f4 <HAL_DMA_IRQHandler+0xe2c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_DMA_IRQHandler+0xe30>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a35      	ldr	r2, [pc, #212]	; (80058fc <HAL_DMA_IRQHandler+0xe34>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a33      	ldr	r2, [pc, #204]	; (8005900 <HAL_DMA_IRQHandler+0xe38>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a32      	ldr	r2, [pc, #200]	; (8005904 <HAL_DMA_IRQHandler+0xe3c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HAL_DMA_IRQHandler+0xe40>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_DMA_IRQHandler+0xe44>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2d      	ldr	r2, [pc, #180]	; (8005910 <HAL_DMA_IRQHandler+0xe48>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2c      	ldr	r2, [pc, #176]	; (8005914 <HAL_DMA_IRQHandler+0xe4c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_DMA_IRQHandler+0xdaa>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a2a      	ldr	r2, [pc, #168]	; (8005918 <HAL_DMA_IRQHandler+0xe50>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d108      	bne.n	8005884 <HAL_DMA_IRQHandler+0xdbc>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 021c 	bic.w	r2, r2, #28
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e007      	b.n	8005894 <HAL_DMA_IRQHandler+0xdcc>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 020e 	bic.w	r2, r2, #14
 8005892:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	f003 031f 	and.w	r3, r3, #31
 800589c:	2201      	movs	r2, #1
 800589e:	409a      	lsls	r2, r3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	e004      	b.n	80058d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80058cc:	bf00      	nop
 80058ce:	e002      	b.n	80058d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80058d6:	3728      	adds	r7, #40	; 0x28
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40020010 	.word	0x40020010
 80058e0:	40020028 	.word	0x40020028
 80058e4:	40020040 	.word	0x40020040
 80058e8:	40020058 	.word	0x40020058
 80058ec:	40020070 	.word	0x40020070
 80058f0:	40020088 	.word	0x40020088
 80058f4:	400200a0 	.word	0x400200a0
 80058f8:	400200b8 	.word	0x400200b8
 80058fc:	40020410 	.word	0x40020410
 8005900:	40020428 	.word	0x40020428
 8005904:	40020440 	.word	0x40020440
 8005908:	40020458 	.word	0x40020458
 800590c:	40020470 	.word	0x40020470
 8005910:	40020488 	.word	0x40020488
 8005914:	400204a0 	.word	0x400204a0
 8005918:	400204b8 	.word	0x400204b8

0800591c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800591c:	b480      	push	{r7}
 800591e:	b087      	sub	sp, #28
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005934:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a7f      	ldr	r2, [pc, #508]	; (8005b38 <DMA_SetConfig+0x21c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d072      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a7d      	ldr	r2, [pc, #500]	; (8005b3c <DMA_SetConfig+0x220>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d06d      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <DMA_SetConfig+0x224>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d068      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a7a      	ldr	r2, [pc, #488]	; (8005b44 <DMA_SetConfig+0x228>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d063      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a79      	ldr	r2, [pc, #484]	; (8005b48 <DMA_SetConfig+0x22c>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d05e      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a77      	ldr	r2, [pc, #476]	; (8005b4c <DMA_SetConfig+0x230>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d059      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a76      	ldr	r2, [pc, #472]	; (8005b50 <DMA_SetConfig+0x234>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d054      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a74      	ldr	r2, [pc, #464]	; (8005b54 <DMA_SetConfig+0x238>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d04f      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a73      	ldr	r2, [pc, #460]	; (8005b58 <DMA_SetConfig+0x23c>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d04a      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a71      	ldr	r2, [pc, #452]	; (8005b5c <DMA_SetConfig+0x240>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d045      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a70      	ldr	r2, [pc, #448]	; (8005b60 <DMA_SetConfig+0x244>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d040      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a6e      	ldr	r2, [pc, #440]	; (8005b64 <DMA_SetConfig+0x248>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d03b      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6d      	ldr	r2, [pc, #436]	; (8005b68 <DMA_SetConfig+0x24c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d036      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a6b      	ldr	r2, [pc, #428]	; (8005b6c <DMA_SetConfig+0x250>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d031      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6a      	ldr	r2, [pc, #424]	; (8005b70 <DMA_SetConfig+0x254>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d02c      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a68      	ldr	r2, [pc, #416]	; (8005b74 <DMA_SetConfig+0x258>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d027      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a67      	ldr	r2, [pc, #412]	; (8005b78 <DMA_SetConfig+0x25c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d022      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a65      	ldr	r2, [pc, #404]	; (8005b7c <DMA_SetConfig+0x260>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01d      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a64      	ldr	r2, [pc, #400]	; (8005b80 <DMA_SetConfig+0x264>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d018      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a62      	ldr	r2, [pc, #392]	; (8005b84 <DMA_SetConfig+0x268>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d013      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a61      	ldr	r2, [pc, #388]	; (8005b88 <DMA_SetConfig+0x26c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00e      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a5f      	ldr	r2, [pc, #380]	; (8005b8c <DMA_SetConfig+0x270>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d009      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a5e      	ldr	r2, [pc, #376]	; (8005b90 <DMA_SetConfig+0x274>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d004      	beq.n	8005a26 <DMA_SetConfig+0x10a>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5c      	ldr	r2, [pc, #368]	; (8005b94 <DMA_SetConfig+0x278>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d101      	bne.n	8005a2a <DMA_SetConfig+0x10e>
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <DMA_SetConfig+0x110>
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00d      	beq.n	8005a4c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005a38:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005a4a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a39      	ldr	r2, [pc, #228]	; (8005b38 <DMA_SetConfig+0x21c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d04a      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a38      	ldr	r2, [pc, #224]	; (8005b3c <DMA_SetConfig+0x220>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d045      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a36      	ldr	r2, [pc, #216]	; (8005b40 <DMA_SetConfig+0x224>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d040      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a35      	ldr	r2, [pc, #212]	; (8005b44 <DMA_SetConfig+0x228>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d03b      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a33      	ldr	r2, [pc, #204]	; (8005b48 <DMA_SetConfig+0x22c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d036      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a32      	ldr	r2, [pc, #200]	; (8005b4c <DMA_SetConfig+0x230>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d031      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a30      	ldr	r2, [pc, #192]	; (8005b50 <DMA_SetConfig+0x234>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d02c      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2f      	ldr	r2, [pc, #188]	; (8005b54 <DMA_SetConfig+0x238>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d027      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <DMA_SetConfig+0x23c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d022      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a2c      	ldr	r2, [pc, #176]	; (8005b5c <DMA_SetConfig+0x240>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d01d      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a2a      	ldr	r2, [pc, #168]	; (8005b60 <DMA_SetConfig+0x244>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a29      	ldr	r2, [pc, #164]	; (8005b64 <DMA_SetConfig+0x248>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d013      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a27      	ldr	r2, [pc, #156]	; (8005b68 <DMA_SetConfig+0x24c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a26      	ldr	r2, [pc, #152]	; (8005b6c <DMA_SetConfig+0x250>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <DMA_SetConfig+0x254>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <DMA_SetConfig+0x1d0>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a23      	ldr	r2, [pc, #140]	; (8005b74 <DMA_SetConfig+0x258>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d101      	bne.n	8005af0 <DMA_SetConfig+0x1d4>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <DMA_SetConfig+0x1d6>
 8005af0:	2300      	movs	r3, #0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d059      	beq.n	8005baa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	223f      	movs	r2, #63	; 0x3f
 8005b00:	409a      	lsls	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b14:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d138      	bne.n	8005b98 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005b36:	e086      	b.n	8005c46 <DMA_SetConfig+0x32a>
 8005b38:	40020010 	.word	0x40020010
 8005b3c:	40020028 	.word	0x40020028
 8005b40:	40020040 	.word	0x40020040
 8005b44:	40020058 	.word	0x40020058
 8005b48:	40020070 	.word	0x40020070
 8005b4c:	40020088 	.word	0x40020088
 8005b50:	400200a0 	.word	0x400200a0
 8005b54:	400200b8 	.word	0x400200b8
 8005b58:	40020410 	.word	0x40020410
 8005b5c:	40020428 	.word	0x40020428
 8005b60:	40020440 	.word	0x40020440
 8005b64:	40020458 	.word	0x40020458
 8005b68:	40020470 	.word	0x40020470
 8005b6c:	40020488 	.word	0x40020488
 8005b70:	400204a0 	.word	0x400204a0
 8005b74:	400204b8 	.word	0x400204b8
 8005b78:	58025408 	.word	0x58025408
 8005b7c:	5802541c 	.word	0x5802541c
 8005b80:	58025430 	.word	0x58025430
 8005b84:	58025444 	.word	0x58025444
 8005b88:	58025458 	.word	0x58025458
 8005b8c:	5802546c 	.word	0x5802546c
 8005b90:	58025480 	.word	0x58025480
 8005b94:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
}
 8005ba8:	e04d      	b.n	8005c46 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a29      	ldr	r2, [pc, #164]	; (8005c54 <DMA_SetConfig+0x338>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <DMA_SetConfig+0x33c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01d      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a26      	ldr	r2, [pc, #152]	; (8005c5c <DMA_SetConfig+0x340>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a24      	ldr	r2, [pc, #144]	; (8005c60 <DMA_SetConfig+0x344>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a23      	ldr	r2, [pc, #140]	; (8005c64 <DMA_SetConfig+0x348>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a21      	ldr	r2, [pc, #132]	; (8005c68 <DMA_SetConfig+0x34c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a20      	ldr	r2, [pc, #128]	; (8005c6c <DMA_SetConfig+0x350>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <DMA_SetConfig+0x2de>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1e      	ldr	r2, [pc, #120]	; (8005c70 <DMA_SetConfig+0x354>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <DMA_SetConfig+0x2e2>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <DMA_SetConfig+0x2e4>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d020      	beq.n	8005c46 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	409a      	lsls	r2, r3
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d108      	bne.n	8005c36 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	60da      	str	r2, [r3, #12]
}
 8005c34:	e007      	b.n	8005c46 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	58025408 	.word	0x58025408
 8005c58:	5802541c 	.word	0x5802541c
 8005c5c:	58025430 	.word	0x58025430
 8005c60:	58025444 	.word	0x58025444
 8005c64:	58025458 	.word	0x58025458
 8005c68:	5802546c 	.word	0x5802546c
 8005c6c:	58025480 	.word	0x58025480
 8005c70:	58025494 	.word	0x58025494

08005c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a42      	ldr	r2, [pc, #264]	; (8005d8c <DMA_CalcBaseAndBitshift+0x118>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d04a      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a41      	ldr	r2, [pc, #260]	; (8005d90 <DMA_CalcBaseAndBitshift+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d045      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a3f      	ldr	r2, [pc, #252]	; (8005d94 <DMA_CalcBaseAndBitshift+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d040      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a3e      	ldr	r2, [pc, #248]	; (8005d98 <DMA_CalcBaseAndBitshift+0x124>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d03b      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a3c      	ldr	r2, [pc, #240]	; (8005d9c <DMA_CalcBaseAndBitshift+0x128>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d036      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a3b      	ldr	r2, [pc, #236]	; (8005da0 <DMA_CalcBaseAndBitshift+0x12c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d031      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a39      	ldr	r2, [pc, #228]	; (8005da4 <DMA_CalcBaseAndBitshift+0x130>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d02c      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a38      	ldr	r2, [pc, #224]	; (8005da8 <DMA_CalcBaseAndBitshift+0x134>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d027      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a36      	ldr	r2, [pc, #216]	; (8005dac <DMA_CalcBaseAndBitshift+0x138>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a35      	ldr	r2, [pc, #212]	; (8005db0 <DMA_CalcBaseAndBitshift+0x13c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d01d      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a33      	ldr	r2, [pc, #204]	; (8005db4 <DMA_CalcBaseAndBitshift+0x140>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a32      	ldr	r2, [pc, #200]	; (8005db8 <DMA_CalcBaseAndBitshift+0x144>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a30      	ldr	r2, [pc, #192]	; (8005dbc <DMA_CalcBaseAndBitshift+0x148>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a2f      	ldr	r2, [pc, #188]	; (8005dc0 <DMA_CalcBaseAndBitshift+0x14c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a2d      	ldr	r2, [pc, #180]	; (8005dc4 <DMA_CalcBaseAndBitshift+0x150>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <DMA_CalcBaseAndBitshift+0xa8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a2c      	ldr	r2, [pc, #176]	; (8005dc8 <DMA_CalcBaseAndBitshift+0x154>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <DMA_CalcBaseAndBitshift+0xac>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <DMA_CalcBaseAndBitshift+0xae>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d024      	beq.n	8005d70 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	3b10      	subs	r3, #16
 8005d2e:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <DMA_CalcBaseAndBitshift+0x158>)
 8005d30:	fba2 2303 	umull	r2, r3, r2, r3
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005d40:	5cd3      	ldrb	r3, [r2, r3]
 8005d42:	461a      	mov	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d908      	bls.n	8005d60 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	461a      	mov	r2, r3
 8005d54:	4b1f      	ldr	r3, [pc, #124]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x160>)
 8005d56:	4013      	ands	r3, r2
 8005d58:	1d1a      	adds	r2, r3, #4
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	659a      	str	r2, [r3, #88]	; 0x58
 8005d5e:	e00d      	b.n	8005d7c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b1b      	ldr	r3, [pc, #108]	; (8005dd4 <DMA_CalcBaseAndBitshift+0x160>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8005d6e:	e005      	b.n	8005d7c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
 8005dcc:	aaaaaaab 	.word	0xaaaaaaab
 8005dd0:	0800da08 	.word	0x0800da08
 8005dd4:	fffffc00 	.word	0xfffffc00

08005dd8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d120      	bne.n	8005e2e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d858      	bhi.n	8005ea6 <DMA_CheckFifoParam+0xce>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <DMA_CheckFifoParam+0x24>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1f 	.word	0x08005e1f
 8005e04:	08005e0d 	.word	0x08005e0d
 8005e08:	08005ea7 	.word	0x08005ea7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d048      	beq.n	8005eaa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e1c:	e045      	b.n	8005eaa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e26:	d142      	bne.n	8005eae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e2c:	e03f      	b.n	8005eae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e36:	d123      	bne.n	8005e80 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	2b03      	cmp	r3, #3
 8005e3e:	d838      	bhi.n	8005eb2 <DMA_CheckFifoParam+0xda>
 8005e40:	a201      	add	r2, pc, #4	; (adr r2, 8005e48 <DMA_CheckFifoParam+0x70>)
 8005e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e46:	bf00      	nop
 8005e48:	08005e59 	.word	0x08005e59
 8005e4c:	08005e5f 	.word	0x08005e5f
 8005e50:	08005e59 	.word	0x08005e59
 8005e54:	08005e71 	.word	0x08005e71
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5c:	e030      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d025      	beq.n	8005eb6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e6e:	e022      	b.n	8005eb6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e78:	d11f      	bne.n	8005eba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e7e:	e01c      	b.n	8005eba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d902      	bls.n	8005e8e <DMA_CheckFifoParam+0xb6>
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d003      	beq.n	8005e94 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e8c:	e018      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
        break;
 8005e92:	e015      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00e      	beq.n	8005ebe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ea4:	e00b      	b.n	8005ebe <DMA_CheckFifoParam+0xe6>
        break;
 8005ea6:	bf00      	nop
 8005ea8:	e00a      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8005eaa:	bf00      	nop
 8005eac:	e008      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8005eae:	bf00      	nop
 8005eb0:	e006      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8005eb2:	bf00      	nop
 8005eb4:	e004      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8005eb6:	bf00      	nop
 8005eb8:	e002      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
        break;
 8005eba:	bf00      	nop
 8005ebc:	e000      	b.n	8005ec0 <DMA_CheckFifoParam+0xe8>
    break;
 8005ebe:	bf00      	nop
    }
  }

  return status;
 8005ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a38      	ldr	r2, [pc, #224]	; (8005fc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d022      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a36      	ldr	r2, [pc, #216]	; (8005fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d01d      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a35      	ldr	r2, [pc, #212]	; (8005fcc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d018      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a33      	ldr	r2, [pc, #204]	; (8005fd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d013      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a32      	ldr	r2, [pc, #200]	; (8005fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00e      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a30      	ldr	r2, [pc, #192]	; (8005fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d009      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d004      	beq.n	8005f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a2d      	ldr	r2, [pc, #180]	; (8005fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005f32:	2300      	movs	r3, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01a      	beq.n	8005f6e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	3b08      	subs	r3, #8
 8005f40:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4b26      	ldr	r3, [pc, #152]	; (8005fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	461a      	mov	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a24      	ldr	r2, [pc, #144]	; (8005fec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005f5c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2201      	movs	r2, #1
 8005f66:	409a      	lsls	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f6c:	e024      	b.n	8005fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	3b10      	subs	r3, #16
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f78:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4a1c      	ldr	r2, [pc, #112]	; (8005ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d806      	bhi.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a1b      	ldr	r2, [pc, #108]	; (8005ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d902      	bls.n	8005f96 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3308      	adds	r3, #8
 8005f94:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4b18      	ldr	r3, [pc, #96]	; (8005ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a16      	ldr	r2, [pc, #88]	; (8006000 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005fa8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	409a      	lsls	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494
 8005fe4:	cccccccd 	.word	0xcccccccd
 8005fe8:	16009600 	.word	0x16009600
 8005fec:	58025880 	.word	0x58025880
 8005ff0:	aaaaaaab 	.word	0xaaaaaaab
 8005ff4:	400204b8 	.word	0x400204b8
 8005ff8:	4002040f 	.word	0x4002040f
 8005ffc:	10008200 	.word	0x10008200
 8006000:	40020880 	.word	0x40020880

08006004 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04a      	beq.n	80060b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b08      	cmp	r3, #8
 800601e:	d847      	bhi.n	80060b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a25      	ldr	r2, [pc, #148]	; (80060bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d022      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d01d      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d018      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a21      	ldr	r2, [pc, #132]	; (80060c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d013      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1f      	ldr	r2, [pc, #124]	; (80060cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00e      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1e      	ldr	r2, [pc, #120]	; (80060d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d009      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d004      	beq.n	8006070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1b      	ldr	r2, [pc, #108]	; (80060d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d101      	bne.n	8006074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4b17      	ldr	r3, [pc, #92]	; (80060dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800607e:	4413      	add	r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a15      	ldr	r2, [pc, #84]	; (80060e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800608c:	671a      	str	r2, [r3, #112]	; 0x70
 800608e:	e009      	b.n	80060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4b14      	ldr	r3, [pc, #80]	; (80060e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	461a      	mov	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a11      	ldr	r2, [pc, #68]	; (80060e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80060a2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	2201      	movs	r2, #1
 80060aa:	409a      	lsls	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80060b0:	bf00      	nop
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	58025408 	.word	0x58025408
 80060c0:	5802541c 	.word	0x5802541c
 80060c4:	58025430 	.word	0x58025430
 80060c8:	58025444 	.word	0x58025444
 80060cc:	58025458 	.word	0x58025458
 80060d0:	5802546c 	.word	0x5802546c
 80060d4:	58025480 	.word	0x58025480
 80060d8:	58025494 	.word	0x58025494
 80060dc:	1600963f 	.word	0x1600963f
 80060e0:	58025940 	.word	0x58025940
 80060e4:	1000823f 	.word	0x1000823f
 80060e8:	40020940 	.word	0x40020940

080060ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b098      	sub	sp, #96	; 0x60
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80060f4:	4a84      	ldr	r2, [pc, #528]	; (8006308 <HAL_FDCAN_Init+0x21c>)
 80060f6:	f107 030c 	add.w	r3, r7, #12
 80060fa:	4611      	mov	r1, r2
 80060fc:	224c      	movs	r2, #76	; 0x4c
 80060fe:	4618      	mov	r0, r3
 8006100:	f007 fbfa 	bl	800d8f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e1c6      	b.n	800649c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a7e      	ldr	r2, [pc, #504]	; (800630c <HAL_FDCAN_Init+0x220>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d106      	bne.n	8006126 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fbd0 	bl	80018e0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 0210 	bic.w	r2, r2, #16
 800614e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006150:	f7fc fa46 	bl	80025e0 <HAL_GetTick>
 8006154:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006156:	e014      	b.n	8006182 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006158:	f7fc fa42 	bl	80025e0 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b0a      	cmp	r3, #10
 8006164:	d90d      	bls.n	8006182 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800616c:	f043 0201 	orr.w	r2, r3, #1
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2203      	movs	r2, #3
 800617a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e18c      	b.n	800649c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0308 	and.w	r3, r3, #8
 800618c:	2b08      	cmp	r3, #8
 800618e:	d0e3      	beq.n	8006158 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80061a0:	f7fc fa1e 	bl	80025e0 <HAL_GetTick>
 80061a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061a6:	e014      	b.n	80061d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80061a8:	f7fc fa1a 	bl	80025e0 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b0a      	cmp	r3, #10
 80061b4:	d90d      	bls.n	80061d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061bc:	f043 0201 	orr.w	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e164      	b.n	800649c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0e3      	beq.n	80061a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699a      	ldr	r2, [r3, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0202 	orr.w	r2, r2, #2
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7c1b      	ldrb	r3, [r3, #16]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d108      	bne.n	800620a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	619a      	str	r2, [r3, #24]
 8006208:	e007      	b.n	800621a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	699a      	ldr	r2, [r3, #24]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006218:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	7c5b      	ldrb	r3, [r3, #17]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d108      	bne.n	8006234 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006230:	619a      	str	r2, [r3, #24]
 8006232:	e007      	b.n	8006244 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006242:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7c9b      	ldrb	r3, [r3, #18]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d108      	bne.n	800625e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800625a:	619a      	str	r2, [r3, #24]
 800625c:	e007      	b.n	800626e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	699a      	ldr	r2, [r3, #24]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800626c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006292:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	691a      	ldr	r2, [r3, #16]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0210 	bic.w	r2, r2, #16
 80062a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d108      	bne.n	80062be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0204 	orr.w	r2, r2, #4
 80062ba:	619a      	str	r2, [r3, #24]
 80062bc:	e030      	b.n	8006320 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02c      	beq.n	8006320 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d020      	beq.n	8006310 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699a      	ldr	r2, [r3, #24]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f042 0210 	orr.w	r2, r2, #16
 80062ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d114      	bne.n	8006320 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	699a      	ldr	r2, [r3, #24]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0220 	orr.w	r2, r2, #32
 8006304:	619a      	str	r2, [r3, #24]
 8006306:	e00b      	b.n	8006320 <HAL_FDCAN_Init+0x234>
 8006308:	0800d93c 	.word	0x0800d93c
 800630c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0220 	orr.w	r2, r2, #32
 800631e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	3b01      	subs	r3, #1
 8006326:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	3b01      	subs	r3, #1
 800632e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006330:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006338:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	3b01      	subs	r3, #1
 8006342:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006348:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800634a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006354:	d115      	bne.n	8006382 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	3b01      	subs	r3, #1
 8006362:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006364:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	3b01      	subs	r3, #1
 800636c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800636e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	3b01      	subs	r3, #1
 8006378:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800637e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006380:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00a      	beq.n	80063a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063a8:	4413      	add	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d011      	beq.n	80063d2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80063b6:	f023 0107 	bic.w	r1, r3, #7
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	3360      	adds	r3, #96	; 0x60
 80063c2:	443b      	add	r3, r7
 80063c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d011      	beq.n	80063fe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80063e2:	f023 0107 	bic.w	r1, r3, #7
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	3360      	adds	r3, #96	; 0x60
 80063ee:	443b      	add	r3, r7
 80063f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006402:	2b00      	cmp	r3, #0
 8006404:	d012      	beq.n	800642c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800640e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	3360      	adds	r3, #96	; 0x60
 800641a:	443b      	add	r3, r7
 800641c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006420:	011a      	lsls	r2, r3, #4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006430:	2b00      	cmp	r3, #0
 8006432:	d012      	beq.n	800645a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800643c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	3360      	adds	r3, #96	; 0x60
 8006448:	443b      	add	r3, r7
 800644a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a11      	ldr	r2, [pc, #68]	; (80064a4 <HAL_FDCAN_Init+0x3b8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d107      	bne.n	8006474 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f022 0203 	bic.w	r2, r2, #3
 8006472:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f80b 	bl	80064a8 <FDCAN_CalcultateRamBlockAddresses>
 8006492:	4603      	mov	r3, r0
 8006494:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006498:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800649c:	4618      	mov	r0, r3
 800649e:	3760      	adds	r7, #96	; 0x60
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	4000a000 	.word	0x4000a000

080064a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80064be:	4ba7      	ldr	r3, [pc, #668]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	0091      	lsls	r1, r2, #2
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	430b      	orrs	r3, r1
 80064cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064d8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	041a      	lsls	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	4413      	add	r3, r2
 80064f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80064fe:	4b97      	ldr	r3, [pc, #604]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006500:	4013      	ands	r3, r2
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	0091      	lsls	r1, r2, #2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	6812      	ldr	r2, [r2, #0]
 800650a:	430b      	orrs	r3, r1
 800650c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006520:	041a      	lsls	r2, r3, #16
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4413      	add	r3, r2
 8006536:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006540:	4b86      	ldr	r3, [pc, #536]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006542:	4013      	ands	r3, r2
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	0091      	lsls	r1, r2, #2
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	430b      	orrs	r3, r1
 800654e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800655a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	041a      	lsls	r2, r3, #16
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006576:	fb02 f303 	mul.w	r3, r2, r3
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006588:	4b74      	ldr	r3, [pc, #464]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	0091      	lsls	r1, r2, #2
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	430b      	orrs	r3, r1
 8006596:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065aa:	041a      	lsls	r2, r3, #16
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80065be:	fb02 f303 	mul.w	r3, r2, r3
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80065d0:	4b62      	ldr	r3, [pc, #392]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	0091      	lsls	r1, r2, #2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	6812      	ldr	r2, [r2, #0]
 80065dc:	430b      	orrs	r3, r1
 80065de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80065ea:	fb02 f303 	mul.w	r3, r2, r3
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80065fc:	4b57      	ldr	r3, [pc, #348]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80065fe:	4013      	ands	r3, r2
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	0091      	lsls	r1, r2, #2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	430b      	orrs	r3, r1
 800660a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006616:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	041a      	lsls	r2, r3, #16
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	4413      	add	r3, r2
 8006634:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800663e:	4b47      	ldr	r3, [pc, #284]	; (800675c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006640:	4013      	ands	r3, r2
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	0091      	lsls	r1, r2, #2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6812      	ldr	r2, [r2, #0]
 800664a:	430b      	orrs	r3, r1
 800664c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006658:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006660:	041a      	lsls	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006674:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800667c:	061a      	lsls	r2, r3, #24
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800668c:	4b34      	ldr	r3, [pc, #208]	; (8006760 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800668e:	4413      	add	r3, r2
 8006690:	009a      	lsls	r2, r3, #2
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	441a      	add	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	441a      	add	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066be:	6879      	ldr	r1, [r7, #4]
 80066c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80066c2:	fb01 f303 	mul.w	r3, r1, r3
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d6:	6879      	ldr	r1, [r7, #4]
 80066d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80066da:	fb01 f303 	mul.w	r3, r1, r3
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80066f2:	fb01 f303 	mul.w	r3, r1, r3
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	441a      	add	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	441a      	add	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	6879      	ldr	r1, [r7, #4]
 8006720:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	441a      	add	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800673e:	fb01 f303 	mul.w	r3, r1, r3
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006752:	4a04      	ldr	r2, [pc, #16]	; (8006764 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d915      	bls.n	8006784 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006758:	e006      	b.n	8006768 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800675a:	bf00      	nop
 800675c:	ffff0003 	.word	0xffff0003
 8006760:	10002b00 	.word	0x10002b00
 8006764:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2203      	movs	r2, #3
 800677c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e010      	b.n	80067a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	e005      	b.n	8006798 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3304      	adds	r3, #4
 8006796:	60fb      	str	r3, [r7, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d3f3      	bcc.n	800678c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop

080067b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b089      	sub	sp, #36	; 0x24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80067c2:	4b86      	ldr	r3, [pc, #536]	; (80069dc <HAL_GPIO_Init+0x228>)
 80067c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80067c6:	e18c      	b.n	8006ae2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	2101      	movs	r1, #1
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	fa01 f303 	lsl.w	r3, r1, r3
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 817e 	beq.w	8006adc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 0303 	and.w	r3, r3, #3
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d005      	beq.n	80067f8 <HAL_GPIO_Init+0x44>
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d130      	bne.n	800685a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	2203      	movs	r2, #3
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	43db      	mvns	r3, r3
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	4013      	ands	r3, r2
 800680e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800682e:	2201      	movs	r2, #1
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43db      	mvns	r3, r3
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	4013      	ands	r3, r2
 800683c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	091b      	lsrs	r3, r3, #4
 8006844:	f003 0201 	and.w	r2, r3, #1
 8006848:	69fb      	ldr	r3, [r7, #28]
 800684a:	fa02 f303 	lsl.w	r3, r2, r3
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	4313      	orrs	r3, r2
 8006852:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f003 0303 	and.w	r3, r3, #3
 8006862:	2b03      	cmp	r3, #3
 8006864:	d017      	beq.n	8006896 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	005b      	lsls	r3, r3, #1
 8006870:	2203      	movs	r2, #3
 8006872:	fa02 f303 	lsl.w	r3, r2, r3
 8006876:	43db      	mvns	r3, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	4013      	ands	r3, r2
 800687c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	689a      	ldr	r2, [r3, #8]
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	fa02 f303 	lsl.w	r3, r2, r3
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d123      	bne.n	80068ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	08da      	lsrs	r2, r3, #3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3208      	adds	r2, #8
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	220f      	movs	r2, #15
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	43db      	mvns	r3, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4013      	ands	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	691a      	ldr	r2, [r3, #16]
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	fa02 f303 	lsl.w	r3, r2, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	4313      	orrs	r3, r2
 80068da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	08da      	lsrs	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3208      	adds	r2, #8
 80068e4:	69b9      	ldr	r1, [r7, #24]
 80068e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	2203      	movs	r2, #3
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	43db      	mvns	r3, r3
 80068fc:	69ba      	ldr	r2, [r7, #24]
 80068fe:	4013      	ands	r3, r2
 8006900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f003 0203 	and.w	r2, r3, #3
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	005b      	lsls	r3, r3, #1
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	4313      	orrs	r3, r2
 8006916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006926:	2b00      	cmp	r3, #0
 8006928:	f000 80d8 	beq.w	8006adc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800692c:	4b2c      	ldr	r3, [pc, #176]	; (80069e0 <HAL_GPIO_Init+0x22c>)
 800692e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006932:	4a2b      	ldr	r2, [pc, #172]	; (80069e0 <HAL_GPIO_Init+0x22c>)
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800693c:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <HAL_GPIO_Init+0x22c>)
 800693e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800694a:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <HAL_GPIO_Init+0x230>)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	3302      	adds	r3, #2
 8006952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	220f      	movs	r2, #15
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	43db      	mvns	r3, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4013      	ands	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <HAL_GPIO_Init+0x234>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04a      	beq.n	8006a0c <HAL_GPIO_Init+0x258>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a1c      	ldr	r2, [pc, #112]	; (80069ec <HAL_GPIO_Init+0x238>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d02b      	beq.n	80069d6 <HAL_GPIO_Init+0x222>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1b      	ldr	r2, [pc, #108]	; (80069f0 <HAL_GPIO_Init+0x23c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d025      	beq.n	80069d2 <HAL_GPIO_Init+0x21e>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <HAL_GPIO_Init+0x240>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d01f      	beq.n	80069ce <HAL_GPIO_Init+0x21a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <HAL_GPIO_Init+0x244>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d019      	beq.n	80069ca <HAL_GPIO_Init+0x216>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a18      	ldr	r2, [pc, #96]	; (80069fc <HAL_GPIO_Init+0x248>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d013      	beq.n	80069c6 <HAL_GPIO_Init+0x212>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a17      	ldr	r2, [pc, #92]	; (8006a00 <HAL_GPIO_Init+0x24c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d00d      	beq.n	80069c2 <HAL_GPIO_Init+0x20e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a16      	ldr	r2, [pc, #88]	; (8006a04 <HAL_GPIO_Init+0x250>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d007      	beq.n	80069be <HAL_GPIO_Init+0x20a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <HAL_GPIO_Init+0x254>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d101      	bne.n	80069ba <HAL_GPIO_Init+0x206>
 80069b6:	2309      	movs	r3, #9
 80069b8:	e029      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069ba:	230a      	movs	r3, #10
 80069bc:	e027      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069be:	2307      	movs	r3, #7
 80069c0:	e025      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069c2:	2306      	movs	r3, #6
 80069c4:	e023      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069c6:	2305      	movs	r3, #5
 80069c8:	e021      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069ca:	2304      	movs	r3, #4
 80069cc:	e01f      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069ce:	2303      	movs	r3, #3
 80069d0:	e01d      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e01b      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e019      	b.n	8006a0e <HAL_GPIO_Init+0x25a>
 80069da:	bf00      	nop
 80069dc:	58000080 	.word	0x58000080
 80069e0:	58024400 	.word	0x58024400
 80069e4:	58000400 	.word	0x58000400
 80069e8:	58020000 	.word	0x58020000
 80069ec:	58020400 	.word	0x58020400
 80069f0:	58020800 	.word	0x58020800
 80069f4:	58020c00 	.word	0x58020c00
 80069f8:	58021000 	.word	0x58021000
 80069fc:	58021400 	.word	0x58021400
 8006a00:	58021800 	.word	0x58021800
 8006a04:	58021c00 	.word	0x58021c00
 8006a08:	58022400 	.word	0x58022400
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	f002 0203 	and.w	r2, r2, #3
 8006a14:	0092      	lsls	r2, r2, #2
 8006a16:	4093      	lsls	r3, r2
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a1e:	4938      	ldr	r1, [pc, #224]	; (8006b00 <HAL_GPIO_Init+0x34c>)
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	089b      	lsrs	r3, r3, #2
 8006a24:	3302      	adds	r3, #2
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	43db      	mvns	r3, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4013      	ands	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	43db      	mvns	r3, r3
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4013      	ands	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d003      	beq.n	8006aac <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006aa4:	69ba      	ldr	r2, [r7, #24]
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f47f ae6b 	bne.w	80067c8 <HAL_GPIO_Init+0x14>
  }
}
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
 8006af6:	3724      	adds	r7, #36	; 0x24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	58000400 	.word	0x58000400

08006b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	807b      	strh	r3, [r7, #2]
 8006b10:	4613      	mov	r3, r2
 8006b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b14:	787b      	ldrb	r3, [r7, #1]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b1a:	887a      	ldrh	r2, [r7, #2]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006b20:	e003      	b.n	8006b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	041a      	lsls	r2, r3, #16
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	619a      	str	r2, [r3, #24]
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e07f      	b.n	8006c4a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa ff26 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2224      	movs	r2, #36	; 0x24
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0201 	bic.w	r2, r2, #1
 8006b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689a      	ldr	r2, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d107      	bne.n	8006bb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	e006      	b.n	8006bc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d104      	bne.n	8006bd2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6859      	ldr	r1, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	; (8006c54 <HAL_I2C_Init+0x11c>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	69d9      	ldr	r1, [r3, #28]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1a      	ldr	r2, [r3, #32]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	430a      	orrs	r2, r1
 8006c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f042 0201 	orr.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	02008000 	.word	0x02008000

08006c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	d138      	bne.n	8006ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c78:	2302      	movs	r3, #2
 8006c7a:	e032      	b.n	8006ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2224      	movs	r2, #36	; 0x24
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6819      	ldr	r1, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f042 0201 	orr.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e000      	b.n	8006ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ce0:	2302      	movs	r3, #2
  }
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d139      	bne.n	8006d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e033      	b.n	8006d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	; 0x24
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0201 	bic.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0201 	orr.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e000      	b.n	8006d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d78:	2302      	movs	r3, #2
  }
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3714      	adds	r7, #20
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006d86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d88:	b08f      	sub	sp, #60	; 0x3c
 8006d8a:	af0a      	add	r7, sp, #40	; 0x28
 8006d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e116      	b.n	8006fc6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d106      	bne.n	8006db8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f7fb fa48 	bl	8002248 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d102      	bne.n	8006dd2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f006 face 	bl	800d378 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	603b      	str	r3, [r7, #0]
 8006de2:	687e      	ldr	r6, [r7, #4]
 8006de4:	466d      	mov	r5, sp
 8006de6:	f106 0410 	add.w	r4, r6, #16
 8006dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006df2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006df6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006dfa:	1d33      	adds	r3, r6, #4
 8006dfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006dfe:	6838      	ldr	r0, [r7, #0]
 8006e00:	f006 fa4c 	bl	800d29c <USB_CoreInit>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e0d7      	b.n	8006fc6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f006 fabc 	bl	800d39a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e22:	2300      	movs	r3, #0
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	e04a      	b.n	8006ebe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e28:	7bfa      	ldrb	r2, [r7, #15]
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	333d      	adds	r3, #61	; 0x3d
 8006e38:	2201      	movs	r2, #1
 8006e3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006e3c:	7bfa      	ldrb	r2, [r7, #15]
 8006e3e:	6879      	ldr	r1, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	440b      	add	r3, r1
 8006e4a:	333c      	adds	r3, #60	; 0x3c
 8006e4c:	7bfa      	ldrb	r2, [r7, #15]
 8006e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006e50:	7bfa      	ldrb	r2, [r7, #15]
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	b298      	uxth	r0, r3
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	3356      	adds	r3, #86	; 0x56
 8006e64:	4602      	mov	r2, r0
 8006e66:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006e68:	7bfa      	ldrb	r2, [r7, #15]
 8006e6a:	6879      	ldr	r1, [r7, #4]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	00db      	lsls	r3, r3, #3
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	3340      	adds	r3, #64	; 0x40
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006e7c:	7bfa      	ldrb	r2, [r7, #15]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	4413      	add	r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	3344      	adds	r3, #68	; 0x44
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006e90:	7bfa      	ldrb	r2, [r7, #15]
 8006e92:	6879      	ldr	r1, [r7, #4]
 8006e94:	4613      	mov	r3, r2
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	440b      	add	r3, r1
 8006e9e:	3348      	adds	r3, #72	; 0x48
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006ea4:	7bfa      	ldrb	r2, [r7, #15]
 8006ea6:	6879      	ldr	r1, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	334c      	adds	r3, #76	; 0x4c
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	73fb      	strb	r3, [r7, #15]
 8006ebe:	7bfa      	ldrb	r2, [r7, #15]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d3af      	bcc.n	8006e28 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e044      	b.n	8006f58 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006ece:	7bfa      	ldrb	r2, [r7, #15]
 8006ed0:	6879      	ldr	r1, [r7, #4]
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	440b      	add	r3, r1
 8006edc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006ee4:	7bfa      	ldrb	r2, [r7, #15]
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	440b      	add	r3, r1
 8006ef2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006ef6:	7bfa      	ldrb	r2, [r7, #15]
 8006ef8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006efa:	7bfa      	ldrb	r2, [r7, #15]
 8006efc:	6879      	ldr	r1, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	440b      	add	r3, r1
 8006f08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f10:	7bfa      	ldrb	r2, [r7, #15]
 8006f12:	6879      	ldr	r1, [r7, #4]
 8006f14:	4613      	mov	r3, r2
 8006f16:	00db      	lsls	r3, r3, #3
 8006f18:	4413      	add	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f26:	7bfa      	ldrb	r2, [r7, #15]
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006f38:	2200      	movs	r2, #0
 8006f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	3301      	adds	r3, #1
 8006f56:	73fb      	strb	r3, [r7, #15]
 8006f58:	7bfa      	ldrb	r2, [r7, #15]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d3b5      	bcc.n	8006ece <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	687e      	ldr	r6, [r7, #4]
 8006f6a:	466d      	mov	r5, sp
 8006f6c:	f106 0410 	add.w	r4, r6, #16
 8006f70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f80:	1d33      	adds	r3, r6, #4
 8006f82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f84:	6838      	ldr	r0, [r7, #0]
 8006f86:	f006 fa55 	bl	800d434 <USB_DevInit>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e014      	b.n	8006fc6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d102      	bne.n	8006fba <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f80b 	bl	8006fd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f006 fc13 	bl	800d7ea <USB_DevDisconnect>

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006fd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_PCDEx_ActivateLPM+0x44>)
 8007000:	4313      	orrs	r3, r2
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	10000003 	.word	0x10000003

08007018 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007020:	4b19      	ldr	r3, [pc, #100]	; (8007088 <HAL_PWREx_ConfigSupply+0x70>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b04      	cmp	r3, #4
 800702a:	d00a      	beq.n	8007042 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800702c:	4b16      	ldr	r3, [pc, #88]	; (8007088 <HAL_PWREx_ConfigSupply+0x70>)
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d001      	beq.n	800703e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e01f      	b.n	800707e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	e01d      	b.n	800707e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007042:	4b11      	ldr	r3, [pc, #68]	; (8007088 <HAL_PWREx_ConfigSupply+0x70>)
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f023 0207 	bic.w	r2, r3, #7
 800704a:	490f      	ldr	r1, [pc, #60]	; (8007088 <HAL_PWREx_ConfigSupply+0x70>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4313      	orrs	r3, r2
 8007050:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007052:	f7fb fac5 	bl	80025e0 <HAL_GetTick>
 8007056:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007058:	e009      	b.n	800706e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800705a:	f7fb fac1 	bl	80025e0 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007068:	d901      	bls.n	800706e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e007      	b.n	800707e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <HAL_PWREx_ConfigSupply+0x70>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707a:	d1ee      	bne.n	800705a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	58024800 	.word	0x58024800

0800708c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	4a04      	ldr	r2, [pc, #16]	; (80070a8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800709a:	60d3      	str	r3, [r2, #12]
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	58024800 	.word	0x58024800

080070ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e3c8      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8087 	beq.w	80071da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070cc:	4b88      	ldr	r3, [pc, #544]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070d6:	4b86      	ldr	r3, [pc, #536]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070da:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d007      	beq.n	80070f2 <HAL_RCC_OscConfig+0x46>
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	2b18      	cmp	r3, #24
 80070e6:	d110      	bne.n	800710a <HAL_RCC_OscConfig+0x5e>
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	f003 0303 	and.w	r3, r3, #3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d10b      	bne.n	800710a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f2:	4b7f      	ldr	r3, [pc, #508]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d06c      	beq.n	80071d8 <HAL_RCC_OscConfig+0x12c>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d168      	bne.n	80071d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e3a2      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007112:	d106      	bne.n	8007122 <HAL_RCC_OscConfig+0x76>
 8007114:	4b76      	ldr	r3, [pc, #472]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a75      	ldr	r2, [pc, #468]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800711a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	e02e      	b.n	8007180 <HAL_RCC_OscConfig+0xd4>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <HAL_RCC_OscConfig+0x98>
 800712a:	4b71      	ldr	r3, [pc, #452]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a70      	ldr	r2, [pc, #448]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	4b6e      	ldr	r3, [pc, #440]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a6d      	ldr	r2, [pc, #436]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800713c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	e01d      	b.n	8007180 <HAL_RCC_OscConfig+0xd4>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800714c:	d10c      	bne.n	8007168 <HAL_RCC_OscConfig+0xbc>
 800714e:	4b68      	ldr	r3, [pc, #416]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a67      	ldr	r2, [pc, #412]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	4b65      	ldr	r3, [pc, #404]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a64      	ldr	r2, [pc, #400]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	e00b      	b.n	8007180 <HAL_RCC_OscConfig+0xd4>
 8007168:	4b61      	ldr	r3, [pc, #388]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a60      	ldr	r2, [pc, #384]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800716e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4b5e      	ldr	r3, [pc, #376]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5d      	ldr	r2, [pc, #372]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800717a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800717e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d013      	beq.n	80071b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007188:	f7fb fa2a 	bl	80025e0 <HAL_GetTick>
 800718c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007190:	f7fb fa26 	bl	80025e0 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	; 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e356      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071a2:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0f0      	beq.n	8007190 <HAL_RCC_OscConfig+0xe4>
 80071ae:	e014      	b.n	80071da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b0:	f7fb fa16 	bl	80025e0 <HAL_GetTick>
 80071b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071b6:	e008      	b.n	80071ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071b8:	f7fb fa12 	bl	80025e0 <HAL_GetTick>
 80071bc:	4602      	mov	r2, r0
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	2b64      	cmp	r3, #100	; 0x64
 80071c4:	d901      	bls.n	80071ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	e342      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071ca:	4b49      	ldr	r3, [pc, #292]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f0      	bne.n	80071b8 <HAL_RCC_OscConfig+0x10c>
 80071d6:	e000      	b.n	80071da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 808c 	beq.w	8007300 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071e8:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80071f2:	4b3f      	ldr	r3, [pc, #252]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80071f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_RCC_OscConfig+0x162>
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	2b18      	cmp	r3, #24
 8007202:	d137      	bne.n	8007274 <HAL_RCC_OscConfig+0x1c8>
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	f003 0303 	and.w	r3, r3, #3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d132      	bne.n	8007274 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800720e:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0304 	and.w	r3, r3, #4
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_RCC_OscConfig+0x17a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e314      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007226:	4b32      	ldr	r3, [pc, #200]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f023 0219 	bic.w	r2, r3, #25
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	492f      	ldr	r1, [pc, #188]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007234:	4313      	orrs	r3, r2
 8007236:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fb f9d2 	bl	80025e0 <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007240:	f7fb f9ce 	bl	80025e0 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e2fe      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007252:	4b27      	ldr	r3, [pc, #156]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	061b      	lsls	r3, r3, #24
 800726c:	4920      	ldr	r1, [pc, #128]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800726e:	4313      	orrs	r3, r2
 8007270:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007272:	e045      	b.n	8007300 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d026      	beq.n	80072ca <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800727c:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f023 0219 	bic.w	r2, r3, #25
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4919      	ldr	r1, [pc, #100]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728e:	f7fb f9a7 	bl	80025e0 <HAL_GetTick>
 8007292:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007294:	e008      	b.n	80072a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007296:	f7fb f9a3 	bl	80025e0 <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d901      	bls.n	80072a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e2d3      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d0f0      	beq.n	8007296 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	061b      	lsls	r3, r3, #24
 80072c2:	490b      	ldr	r1, [pc, #44]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	604b      	str	r3, [r1, #4]
 80072c8:	e01a      	b.n	8007300 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a08      	ldr	r2, [pc, #32]	; (80072f0 <HAL_RCC_OscConfig+0x244>)
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072d6:	f7fb f983 	bl	80025e0 <HAL_GetTick>
 80072da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072dc:	e00a      	b.n	80072f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072de:	f7fb f97f 	bl	80025e0 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d903      	bls.n	80072f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80072ec:	2303      	movs	r3, #3
 80072ee:	e2af      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
 80072f0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072f4:	4b96      	ldr	r3, [pc, #600]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ee      	bne.n	80072de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b00      	cmp	r3, #0
 800730a:	d06a      	beq.n	80073e2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800730c:	4b90      	ldr	r3, [pc, #576]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007314:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007316:	4b8e      	ldr	r3, [pc, #568]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b08      	cmp	r3, #8
 8007320:	d007      	beq.n	8007332 <HAL_RCC_OscConfig+0x286>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b18      	cmp	r3, #24
 8007326:	d11b      	bne.n	8007360 <HAL_RCC_OscConfig+0x2b4>
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f003 0303 	and.w	r3, r3, #3
 800732e:	2b01      	cmp	r3, #1
 8007330:	d116      	bne.n	8007360 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007332:	4b87      	ldr	r3, [pc, #540]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800733a:	2b00      	cmp	r3, #0
 800733c:	d005      	beq.n	800734a <HAL_RCC_OscConfig+0x29e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	69db      	ldr	r3, [r3, #28]
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d001      	beq.n	800734a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e282      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800734a:	4b81      	ldr	r3, [pc, #516]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	061b      	lsls	r3, r3, #24
 8007358:	497d      	ldr	r1, [pc, #500]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800735a:	4313      	orrs	r3, r2
 800735c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800735e:	e040      	b.n	80073e2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d023      	beq.n	80073b0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007368:	4b79      	ldr	r3, [pc, #484]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a78      	ldr	r2, [pc, #480]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800736e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fb f934 	bl	80025e0 <HAL_GetTick>
 8007378:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800737c:	f7fb f930 	bl	80025e0 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e260      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800738e:	4b70      	ldr	r3, [pc, #448]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800739a:	4b6d      	ldr	r3, [pc, #436]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	061b      	lsls	r3, r3, #24
 80073a8:	4969      	ldr	r1, [pc, #420]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60cb      	str	r3, [r1, #12]
 80073ae:	e018      	b.n	80073e2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073b0:	4b67      	ldr	r3, [pc, #412]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a66      	ldr	r2, [pc, #408]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fb f910 	bl	80025e0 <HAL_GetTick>
 80073c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80073c4:	f7fb f90c 	bl	80025e0 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e23c      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073d6:	4b5e      	ldr	r3, [pc, #376]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0308 	and.w	r3, r3, #8
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d036      	beq.n	800745c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d019      	beq.n	800742a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073f6:	4b56      	ldr	r3, [pc, #344]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fa:	4a55      	ldr	r2, [pc, #340]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80073fc:	f043 0301 	orr.w	r3, r3, #1
 8007400:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007402:	f7fb f8ed 	bl	80025e0 <HAL_GetTick>
 8007406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800740a:	f7fb f8e9 	bl	80025e0 <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b02      	cmp	r3, #2
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e219      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800741c:	4b4c      	ldr	r3, [pc, #304]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800741e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0f0      	beq.n	800740a <HAL_RCC_OscConfig+0x35e>
 8007428:	e018      	b.n	800745c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800742a:	4b49      	ldr	r3, [pc, #292]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800742c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742e:	4a48      	ldr	r2, [pc, #288]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007430:	f023 0301 	bic.w	r3, r3, #1
 8007434:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007436:	f7fb f8d3 	bl	80025e0 <HAL_GetTick>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800743c:	e008      	b.n	8007450 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800743e:	f7fb f8cf 	bl	80025e0 <HAL_GetTick>
 8007442:	4602      	mov	r2, r0
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2b02      	cmp	r3, #2
 800744a:	d901      	bls.n	8007450 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e1ff      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007450:	4b3f      	ldr	r3, [pc, #252]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1f0      	bne.n	800743e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0320 	and.w	r3, r3, #32
 8007464:	2b00      	cmp	r3, #0
 8007466:	d036      	beq.n	80074d6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d019      	beq.n	80074a4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007470:	4b37      	ldr	r3, [pc, #220]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a36      	ldr	r2, [pc, #216]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800747a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800747c:	f7fb f8b0 	bl	80025e0 <HAL_GetTick>
 8007480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007482:	e008      	b.n	8007496 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007484:	f7fb f8ac 	bl	80025e0 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b02      	cmp	r3, #2
 8007490:	d901      	bls.n	8007496 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e1dc      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007496:	4b2e      	ldr	r3, [pc, #184]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0f0      	beq.n	8007484 <HAL_RCC_OscConfig+0x3d8>
 80074a2:	e018      	b.n	80074d6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074a4:	4b2a      	ldr	r3, [pc, #168]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a29      	ldr	r2, [pc, #164]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80074aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074b0:	f7fb f896 	bl	80025e0 <HAL_GetTick>
 80074b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074b6:	e008      	b.n	80074ca <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80074b8:	f7fb f892 	bl	80025e0 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d901      	bls.n	80074ca <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e1c2      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f0      	bne.n	80074b8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	f000 8086 	beq.w	80075f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074e4:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_RCC_OscConfig+0x4a8>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <HAL_RCC_OscConfig+0x4a8>)
 80074ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074f0:	f7fb f876 	bl	80025e0 <HAL_GetTick>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074f6:	e008      	b.n	800750a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074f8:	f7fb f872 	bl	80025e0 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	2b64      	cmp	r3, #100	; 0x64
 8007504:	d901      	bls.n	800750a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e1a2      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800750a:	4b12      	ldr	r3, [pc, #72]	; (8007554 <HAL_RCC_OscConfig+0x4a8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0f0      	beq.n	80074f8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d106      	bne.n	800752c <HAL_RCC_OscConfig+0x480>
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007522:	4a0b      	ldr	r2, [pc, #44]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007524:	f043 0301 	orr.w	r3, r3, #1
 8007528:	6713      	str	r3, [r2, #112]	; 0x70
 800752a:	e032      	b.n	8007592 <HAL_RCC_OscConfig+0x4e6>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d111      	bne.n	8007558 <HAL_RCC_OscConfig+0x4ac>
 8007534:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007538:	4a05      	ldr	r2, [pc, #20]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 800753a:	f023 0301 	bic.w	r3, r3, #1
 800753e:	6713      	str	r3, [r2, #112]	; 0x70
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007544:	4a02      	ldr	r2, [pc, #8]	; (8007550 <HAL_RCC_OscConfig+0x4a4>)
 8007546:	f023 0304 	bic.w	r3, r3, #4
 800754a:	6713      	str	r3, [r2, #112]	; 0x70
 800754c:	e021      	b.n	8007592 <HAL_RCC_OscConfig+0x4e6>
 800754e:	bf00      	nop
 8007550:	58024400 	.word	0x58024400
 8007554:	58024800 	.word	0x58024800
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2b05      	cmp	r3, #5
 800755e:	d10c      	bne.n	800757a <HAL_RCC_OscConfig+0x4ce>
 8007560:	4b83      	ldr	r3, [pc, #524]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007564:	4a82      	ldr	r2, [pc, #520]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007566:	f043 0304 	orr.w	r3, r3, #4
 800756a:	6713      	str	r3, [r2, #112]	; 0x70
 800756c:	4b80      	ldr	r3, [pc, #512]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007570:	4a7f      	ldr	r2, [pc, #508]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	6713      	str	r3, [r2, #112]	; 0x70
 8007578:	e00b      	b.n	8007592 <HAL_RCC_OscConfig+0x4e6>
 800757a:	4b7d      	ldr	r3, [pc, #500]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800757c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800757e:	4a7c      	ldr	r2, [pc, #496]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	6713      	str	r3, [r2, #112]	; 0x70
 8007586:	4b7a      	ldr	r3, [pc, #488]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758a:	4a79      	ldr	r2, [pc, #484]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800758c:	f023 0304 	bic.w	r3, r3, #4
 8007590:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d015      	beq.n	80075c6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800759a:	f7fb f821 	bl	80025e0 <HAL_GetTick>
 800759e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075a0:	e00a      	b.n	80075b8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075a2:	f7fb f81d 	bl	80025e0 <HAL_GetTick>
 80075a6:	4602      	mov	r2, r0
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	1ad3      	subs	r3, r2, r3
 80075ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d901      	bls.n	80075b8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e14b      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075b8:	4b6d      	ldr	r3, [pc, #436]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80075ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d0ee      	beq.n	80075a2 <HAL_RCC_OscConfig+0x4f6>
 80075c4:	e014      	b.n	80075f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c6:	f7fb f80b 	bl	80025e0 <HAL_GetTick>
 80075ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075cc:	e00a      	b.n	80075e4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ce:	f7fb f807 	bl	80025e0 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075dc:	4293      	cmp	r3, r2
 80075de:	d901      	bls.n	80075e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e135      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075e4:	4b62      	ldr	r3, [pc, #392]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	f003 0302 	and.w	r3, r3, #2
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1ee      	bne.n	80075ce <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 812a 	beq.w	800784e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80075fa:	4b5d      	ldr	r3, [pc, #372]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007602:	2b18      	cmp	r3, #24
 8007604:	f000 80ba 	beq.w	800777c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	2b02      	cmp	r3, #2
 800760e:	f040 8095 	bne.w	800773c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007612:	4b57      	ldr	r3, [pc, #348]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a56      	ldr	r2, [pc, #344]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007618:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800761c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800761e:	f7fa ffdf 	bl	80025e0 <HAL_GetTick>
 8007622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007624:	e008      	b.n	8007638 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007626:	f7fa ffdb 	bl	80025e0 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d901      	bls.n	8007638 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e10b      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007638:	4b4d      	ldr	r3, [pc, #308]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1f0      	bne.n	8007626 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007644:	4b4a      	ldr	r3, [pc, #296]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007648:	4b4a      	ldr	r3, [pc, #296]	; (8007774 <HAL_RCC_OscConfig+0x6c8>)
 800764a:	4013      	ands	r3, r2
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007654:	0112      	lsls	r2, r2, #4
 8007656:	430a      	orrs	r2, r1
 8007658:	4945      	ldr	r1, [pc, #276]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800765a:	4313      	orrs	r3, r2
 800765c:	628b      	str	r3, [r1, #40]	; 0x28
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007662:	3b01      	subs	r3, #1
 8007664:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766c:	3b01      	subs	r3, #1
 800766e:	025b      	lsls	r3, r3, #9
 8007670:	b29b      	uxth	r3, r3
 8007672:	431a      	orrs	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007678:	3b01      	subs	r3, #1
 800767a:	041b      	lsls	r3, r3, #16
 800767c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007680:	431a      	orrs	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	3b01      	subs	r3, #1
 8007688:	061b      	lsls	r3, r3, #24
 800768a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800768e:	4938      	ldr	r1, [pc, #224]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007690:	4313      	orrs	r3, r2
 8007692:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4a35      	ldr	r2, [pc, #212]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076a0:	4b33      	ldr	r3, [pc, #204]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a4:	4b34      	ldr	r3, [pc, #208]	; (8007778 <HAL_RCC_OscConfig+0x6cc>)
 80076a6:	4013      	ands	r3, r2
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076ac:	00d2      	lsls	r2, r2, #3
 80076ae:	4930      	ldr	r1, [pc, #192]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076b4:	4b2e      	ldr	r3, [pc, #184]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	f023 020c 	bic.w	r2, r3, #12
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c0:	492b      	ldr	r1, [pc, #172]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076c6:	4b2a      	ldr	r3, [pc, #168]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	f023 0202 	bic.w	r2, r3, #2
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d2:	4927      	ldr	r1, [pc, #156]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076d8:	4b25      	ldr	r3, [pc, #148]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	4a24      	ldr	r2, [pc, #144]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e4:	4b22      	ldr	r3, [pc, #136]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a21      	ldr	r2, [pc, #132]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80076f0:	4b1f      	ldr	r3, [pc, #124]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	4a1e      	ldr	r2, [pc, #120]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80076fc:	4b1c      	ldr	r3, [pc, #112]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007700:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007702:	f043 0301 	orr.w	r3, r3, #1
 8007706:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007708:	4b19      	ldr	r3, [pc, #100]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800770e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007714:	f7fa ff64 	bl	80025e0 <HAL_GetTick>
 8007718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800771a:	e008      	b.n	800772e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800771c:	f7fa ff60 	bl	80025e0 <HAL_GetTick>
 8007720:	4602      	mov	r2, r0
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	1ad3      	subs	r3, r2, r3
 8007726:	2b02      	cmp	r3, #2
 8007728:	d901      	bls.n	800772e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e090      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800772e:	4b10      	ldr	r3, [pc, #64]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f0      	beq.n	800771c <HAL_RCC_OscConfig+0x670>
 800773a:	e088      	b.n	800784e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0b      	ldr	r2, [pc, #44]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007748:	f7fa ff4a 	bl	80025e0 <HAL_GetTick>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800774e:	e008      	b.n	8007762 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007750:	f7fa ff46 	bl	80025e0 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	2b02      	cmp	r3, #2
 800775c:	d901      	bls.n	8007762 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e076      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007762:	4b03      	ldr	r3, [pc, #12]	; (8007770 <HAL_RCC_OscConfig+0x6c4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1f0      	bne.n	8007750 <HAL_RCC_OscConfig+0x6a4>
 800776e:	e06e      	b.n	800784e <HAL_RCC_OscConfig+0x7a2>
 8007770:	58024400 	.word	0x58024400
 8007774:	fffffc0c 	.word	0xfffffc0c
 8007778:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800777c:	4b36      	ldr	r3, [pc, #216]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007782:	4b35      	ldr	r3, [pc, #212]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2b01      	cmp	r3, #1
 800778e:	d031      	beq.n	80077f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f003 0203 	and.w	r2, r3, #3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800779a:	429a      	cmp	r2, r3
 800779c:	d12a      	bne.n	80077f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	091b      	lsrs	r3, r3, #4
 80077a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d122      	bne.n	80077f4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d11a      	bne.n	80077f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	0a5b      	lsrs	r3, r3, #9
 80077c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d111      	bne.n	80077f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	0c1b      	lsrs	r3, r3, #16
 80077d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077de:	429a      	cmp	r2, r3
 80077e0:	d108      	bne.n	80077f4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	0e1b      	lsrs	r3, r3, #24
 80077e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d001      	beq.n	80077f8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e02b      	b.n	8007850 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80077f8:	4b17      	ldr	r3, [pc, #92]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 80077fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fc:	08db      	lsrs	r3, r3, #3
 80077fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007802:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	429a      	cmp	r2, r3
 800780c:	d01f      	beq.n	800784e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800780e:	4b12      	ldr	r3, [pc, #72]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	4a11      	ldr	r2, [pc, #68]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800781a:	f7fa fee1 	bl	80025e0 <HAL_GetTick>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007820:	bf00      	nop
 8007822:	f7fa fedd 	bl	80025e0 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	4293      	cmp	r3, r2
 800782c:	d0f9      	beq.n	8007822 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800782e:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007832:	4b0a      	ldr	r3, [pc, #40]	; (800785c <HAL_RCC_OscConfig+0x7b0>)
 8007834:	4013      	ands	r3, r2
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800783a:	00d2      	lsls	r2, r2, #3
 800783c:	4906      	ldr	r1, [pc, #24]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 800783e:	4313      	orrs	r3, r2
 8007840:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007842:	4b05      	ldr	r3, [pc, #20]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	4a04      	ldr	r2, [pc, #16]	; (8007858 <HAL_RCC_OscConfig+0x7ac>)
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3730      	adds	r7, #48	; 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	58024400 	.word	0x58024400
 800785c:	ffff0007 	.word	0xffff0007

08007860 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e19c      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007874:	4b8a      	ldr	r3, [pc, #552]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d910      	bls.n	80078a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007882:	4b87      	ldr	r3, [pc, #540]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 020f 	bic.w	r2, r3, #15
 800788a:	4985      	ldr	r1, [pc, #532]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	4313      	orrs	r3, r2
 8007890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007892:	4b83      	ldr	r3, [pc, #524]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 030f 	and.w	r3, r3, #15
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d001      	beq.n	80078a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e184      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d010      	beq.n	80078d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	4b7b      	ldr	r3, [pc, #492]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078bc:	429a      	cmp	r2, r3
 80078be:	d908      	bls.n	80078d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078c0:	4b78      	ldr	r3, [pc, #480]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	4975      	ldr	r1, [pc, #468]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0308 	and.w	r3, r3, #8
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695a      	ldr	r2, [r3, #20]
 80078e2:	4b70      	ldr	r3, [pc, #448]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d908      	bls.n	8007900 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ee:	4b6d      	ldr	r3, [pc, #436]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	496a      	ldr	r1, [pc, #424]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80078fc:	4313      	orrs	r3, r2
 80078fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b00      	cmp	r3, #0
 800790a:	d010      	beq.n	800792e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	4b64      	ldr	r3, [pc, #400]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007912:	69db      	ldr	r3, [r3, #28]
 8007914:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007918:	429a      	cmp	r2, r3
 800791a:	d908      	bls.n	800792e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800791c:	4b61      	ldr	r3, [pc, #388]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	495e      	ldr	r1, [pc, #376]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 800792a:	4313      	orrs	r3, r2
 800792c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b00      	cmp	r3, #0
 8007938:	d010      	beq.n	800795c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	69da      	ldr	r2, [r3, #28]
 800793e:	4b59      	ldr	r3, [pc, #356]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007946:	429a      	cmp	r2, r3
 8007948:	d908      	bls.n	800795c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800794a:	4b56      	ldr	r3, [pc, #344]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	4953      	ldr	r1, [pc, #332]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007958:	4313      	orrs	r3, r2
 800795a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0302 	and.w	r3, r3, #2
 8007964:	2b00      	cmp	r3, #0
 8007966:	d010      	beq.n	800798a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	4b4d      	ldr	r3, [pc, #308]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	f003 030f 	and.w	r3, r3, #15
 8007974:	429a      	cmp	r2, r3
 8007976:	d908      	bls.n	800798a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007978:	4b4a      	ldr	r3, [pc, #296]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f023 020f 	bic.w	r2, r3, #15
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	4947      	ldr	r1, [pc, #284]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007986:	4313      	orrs	r3, r2
 8007988:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d055      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007996:	4b43      	ldr	r3, [pc, #268]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	4940      	ldr	r1, [pc, #256]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d107      	bne.n	80079c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80079b0:	4b3c      	ldr	r3, [pc, #240]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d121      	bne.n	8007a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e0f6      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d107      	bne.n	80079d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80079c8:	4b36      	ldr	r3, [pc, #216]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d115      	bne.n	8007a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e0ea      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079e0:	4b30      	ldr	r3, [pc, #192]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d109      	bne.n	8007a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e0de      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f0:	4b2c      	ldr	r3, [pc, #176]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d101      	bne.n	8007a00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e0d6      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007a00:	4b28      	ldr	r3, [pc, #160]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f023 0207 	bic.w	r2, r3, #7
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4925      	ldr	r1, [pc, #148]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a12:	f7fa fde5 	bl	80025e0 <HAL_GetTick>
 8007a16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a18:	e00a      	b.n	8007a30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a1a:	f7fa fde1 	bl	80025e0 <HAL_GetTick>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d901      	bls.n	8007a30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e0be      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a30:	4b1c      	ldr	r3, [pc, #112]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	00db      	lsls	r3, r3, #3
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d1eb      	bne.n	8007a1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d010      	beq.n	8007a70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	4b14      	ldr	r3, [pc, #80]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d208      	bcs.n	8007a70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a5e:	4b11      	ldr	r3, [pc, #68]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	f023 020f 	bic.w	r2, r3, #15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	490e      	ldr	r1, [pc, #56]	; (8007aa4 <HAL_RCC_ClockConfig+0x244>)
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d214      	bcs.n	8007aa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7e:	4b08      	ldr	r3, [pc, #32]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f023 020f 	bic.w	r2, r3, #15
 8007a86:	4906      	ldr	r1, [pc, #24]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <HAL_RCC_ClockConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d005      	beq.n	8007aa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e086      	b.n	8007bae <HAL_RCC_ClockConfig+0x34e>
 8007aa0:	52002000 	.word	0x52002000
 8007aa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d010      	beq.n	8007ad6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691a      	ldr	r2, [r3, #16]
 8007ab8:	4b3f      	ldr	r3, [pc, #252]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d208      	bcs.n	8007ad6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007ac4:	4b3c      	ldr	r3, [pc, #240]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007ac6:	699b      	ldr	r3, [r3, #24]
 8007ac8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	4939      	ldr	r1, [pc, #228]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0308 	and.w	r3, r3, #8
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d010      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d208      	bcs.n	8007b04 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007af2:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	492e      	ldr	r1, [pc, #184]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d010      	beq.n	8007b32 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	4b28      	ldr	r3, [pc, #160]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b16:	69db      	ldr	r3, [r3, #28]
 8007b18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d208      	bcs.n	8007b32 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	4922      	ldr	r1, [pc, #136]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d010      	beq.n	8007b60 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69da      	ldr	r2, [r3, #28]
 8007b42:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d208      	bcs.n	8007b60 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b4e:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	4917      	ldr	r1, [pc, #92]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b60:	f000 f89e 	bl	8007ca0 <HAL_RCC_GetSysClockFreq>
 8007b64:	4602      	mov	r2, r0
 8007b66:	4b14      	ldr	r3, [pc, #80]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	0a1b      	lsrs	r3, r3, #8
 8007b6c:	f003 030f 	and.w	r3, r3, #15
 8007b70:	4912      	ldr	r1, [pc, #72]	; (8007bbc <HAL_RCC_ClockConfig+0x35c>)
 8007b72:	5ccb      	ldrb	r3, [r1, r3]
 8007b74:	f003 031f 	and.w	r3, r3, #31
 8007b78:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b7e:	4b0e      	ldr	r3, [pc, #56]	; (8007bb8 <HAL_RCC_ClockConfig+0x358>)
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	f003 030f 	and.w	r3, r3, #15
 8007b86:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <HAL_RCC_ClockConfig+0x35c>)
 8007b88:	5cd3      	ldrb	r3, [r2, r3]
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	fa22 f303 	lsr.w	r3, r2, r3
 8007b94:	4a0a      	ldr	r2, [pc, #40]	; (8007bc0 <HAL_RCC_ClockConfig+0x360>)
 8007b96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b98:	4a0a      	ldr	r2, [pc, #40]	; (8007bc4 <HAL_RCC_ClockConfig+0x364>)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <HAL_RCC_ClockConfig+0x368>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fa fcd2 	bl	800254c <HAL_InitTick>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	0800d9f8 	.word	0x0800d9f8
 8007bc0:	24000004 	.word	0x24000004
 8007bc4:	24000000 	.word	0x24000000
 8007bc8:	24000008 	.word	0x24000008

08007bcc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b08c      	sub	sp, #48	; 0x30
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d12a      	bne.n	8007c34 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007bde:	4b2d      	ldr	r3, [pc, #180]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007be4:	4a2b      	ldr	r2, [pc, #172]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007be6:	f043 0301 	orr.w	r3, r3, #1
 8007bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bee:	4b29      	ldr	r3, [pc, #164]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	61bb      	str	r3, [r7, #24]
 8007bfa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c02:	2302      	movs	r3, #2
 8007c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c06:	2303      	movs	r3, #3
 8007c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007c12:	f107 031c 	add.w	r3, r7, #28
 8007c16:	4619      	mov	r1, r3
 8007c18:	481f      	ldr	r0, [pc, #124]	; (8007c98 <HAL_RCC_MCOConfig+0xcc>)
 8007c1a:	f7fe fdcb 	bl	80067b4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007c1e:	4b1d      	ldr	r3, [pc, #116]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	430b      	orrs	r3, r1
 8007c2c:	4919      	ldr	r1, [pc, #100]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007c32:	e02a      	b.n	8007c8a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c3a:	4a16      	ldr	r2, [pc, #88]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c44:	4b13      	ldr	r3, [pc, #76]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c60:	2300      	movs	r3, #0
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c64:	2300      	movs	r3, #0
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007c68:	f107 031c 	add.w	r3, r7, #28
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	480b      	ldr	r0, [pc, #44]	; (8007c9c <HAL_RCC_MCOConfig+0xd0>)
 8007c70:	f7fe fda0 	bl	80067b4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8007c74:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c76:	691b      	ldr	r3, [r3, #16]
 8007c78:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	01d9      	lsls	r1, r3, #7
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	430b      	orrs	r3, r1
 8007c84:	4903      	ldr	r1, [pc, #12]	; (8007c94 <HAL_RCC_MCOConfig+0xc8>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	610b      	str	r3, [r1, #16]
}
 8007c8a:	bf00      	nop
 8007c8c:	3730      	adds	r7, #48	; 0x30
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	58024400 	.word	0x58024400
 8007c98:	58020000 	.word	0x58020000
 8007c9c:	58020800 	.word	0x58020800

08007ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b089      	sub	sp, #36	; 0x24
 8007ca4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca6:	4bb3      	ldr	r3, [pc, #716]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cae:	2b18      	cmp	r3, #24
 8007cb0:	f200 8155 	bhi.w	8007f5e <HAL_RCC_GetSysClockFreq+0x2be>
 8007cb4:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8007cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cba:	bf00      	nop
 8007cbc:	08007d21 	.word	0x08007d21
 8007cc0:	08007f5f 	.word	0x08007f5f
 8007cc4:	08007f5f 	.word	0x08007f5f
 8007cc8:	08007f5f 	.word	0x08007f5f
 8007ccc:	08007f5f 	.word	0x08007f5f
 8007cd0:	08007f5f 	.word	0x08007f5f
 8007cd4:	08007f5f 	.word	0x08007f5f
 8007cd8:	08007f5f 	.word	0x08007f5f
 8007cdc:	08007d47 	.word	0x08007d47
 8007ce0:	08007f5f 	.word	0x08007f5f
 8007ce4:	08007f5f 	.word	0x08007f5f
 8007ce8:	08007f5f 	.word	0x08007f5f
 8007cec:	08007f5f 	.word	0x08007f5f
 8007cf0:	08007f5f 	.word	0x08007f5f
 8007cf4:	08007f5f 	.word	0x08007f5f
 8007cf8:	08007f5f 	.word	0x08007f5f
 8007cfc:	08007d4d 	.word	0x08007d4d
 8007d00:	08007f5f 	.word	0x08007f5f
 8007d04:	08007f5f 	.word	0x08007f5f
 8007d08:	08007f5f 	.word	0x08007f5f
 8007d0c:	08007f5f 	.word	0x08007f5f
 8007d10:	08007f5f 	.word	0x08007f5f
 8007d14:	08007f5f 	.word	0x08007f5f
 8007d18:	08007f5f 	.word	0x08007f5f
 8007d1c:	08007d53 	.word	0x08007d53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d20:	4b94      	ldr	r3, [pc, #592]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d2c:	4b91      	ldr	r3, [pc, #580]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	08db      	lsrs	r3, r3, #3
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	4a90      	ldr	r2, [pc, #576]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d38:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007d3e:	e111      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007d40:	4b8d      	ldr	r3, [pc, #564]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007d42:	61bb      	str	r3, [r7, #24]
      break;
 8007d44:	e10e      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007d46:	4b8d      	ldr	r3, [pc, #564]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d48:	61bb      	str	r3, [r7, #24]
      break;
 8007d4a:	e10b      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007d4c:	4b8c      	ldr	r3, [pc, #560]	; (8007f80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007d4e:	61bb      	str	r3, [r7, #24]
      break;
 8007d50:	e108      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d52:	4b88      	ldr	r3, [pc, #544]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d56:	f003 0303 	and.w	r3, r3, #3
 8007d5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007d5c:	4b85      	ldr	r3, [pc, #532]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	091b      	lsrs	r3, r3, #4
 8007d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007d68:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007d72:	4b80      	ldr	r3, [pc, #512]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d76:	08db      	lsrs	r3, r3, #3
 8007d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	fb02 f303 	mul.w	r3, r2, r3
 8007d82:	ee07 3a90 	vmov	s15, r3
 8007d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80e1 	beq.w	8007f58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	f000 8083 	beq.w	8007ea4 <HAL_RCC_GetSysClockFreq+0x204>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	f200 80a1 	bhi.w	8007ee8 <HAL_RCC_GetSysClockFreq+0x248>
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_RCC_GetSysClockFreq+0x114>
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d056      	beq.n	8007e60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007db2:	e099      	b.n	8007ee8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007db4:	4b6f      	ldr	r3, [pc, #444]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0320 	and.w	r3, r3, #32
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d02d      	beq.n	8007e1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007dc0:	4b6c      	ldr	r3, [pc, #432]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	08db      	lsrs	r3, r3, #3
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	4a6b      	ldr	r2, [pc, #428]	; (8007f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	ee07 3a90 	vmov	s15, r3
 8007dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	ee07 3a90 	vmov	s15, r3
 8007de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	4b62      	ldr	r3, [pc, #392]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007e1a:	e087      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	ee07 3a90 	vmov	s15, r3
 8007e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007f88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e2e:	4b51      	ldr	r3, [pc, #324]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e36:	ee07 3a90 	vmov	s15, r3
 8007e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007e5e:	e065      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007f8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e72:	4b40      	ldr	r3, [pc, #256]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7a:	ee07 3a90 	vmov	s15, r3
 8007e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ea2:	e043      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007f90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eb6:	4b2f      	ldr	r3, [pc, #188]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ee6:	e021      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ef2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007efa:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f02:	ee07 3a90 	vmov	s15, r3
 8007f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007f0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007f2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007f2c:	4b11      	ldr	r3, [pc, #68]	; (8007f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f30:	0a5b      	lsrs	r3, r3, #9
 8007f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f36:	3301      	adds	r3, #1
 8007f38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f50:	ee17 3a90 	vmov	r3, s15
 8007f54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007f56:	e005      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61bb      	str	r3, [r7, #24]
      break;
 8007f5c:	e002      	b.n	8007f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007f60:	61bb      	str	r3, [r7, #24]
      break;
 8007f62:	bf00      	nop
  }

  return sysclockfreq;
 8007f64:	69bb      	ldr	r3, [r7, #24]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3724      	adds	r7, #36	; 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	58024400 	.word	0x58024400
 8007f78:	03d09000 	.word	0x03d09000
 8007f7c:	003d0900 	.word	0x003d0900
 8007f80:	02faf080 	.word	0x02faf080
 8007f84:	46000000 	.word	0x46000000
 8007f88:	4c742400 	.word	0x4c742400
 8007f8c:	4a742400 	.word	0x4a742400
 8007f90:	4c3ebc20 	.word	0x4c3ebc20

08007f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007f9a:	f7ff fe81 	bl	8007ca0 <HAL_RCC_GetSysClockFreq>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	0a1b      	lsrs	r3, r3, #8
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	490f      	ldr	r1, [pc, #60]	; (8007fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007fac:	5ccb      	ldrb	r3, [r1, r3]
 8007fae:	f003 031f 	and.w	r3, r3, #31
 8007fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007fb8:	4b0a      	ldr	r3, [pc, #40]	; (8007fe4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	f003 030f 	and.w	r3, r3, #15
 8007fc0:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007fc2:	5cd3      	ldrb	r3, [r2, r3]
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	fa22 f303 	lsr.w	r3, r2, r3
 8007fce:	4a07      	ldr	r2, [pc, #28]	; (8007fec <HAL_RCC_GetHCLKFreq+0x58>)
 8007fd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007fd2:	4a07      	ldr	r2, [pc, #28]	; (8007ff0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <HAL_RCC_GetHCLKFreq+0x58>)
 8007fda:	681b      	ldr	r3, [r3, #0]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	58024400 	.word	0x58024400
 8007fe8:	0800d9f8 	.word	0x0800d9f8
 8007fec:	24000004 	.word	0x24000004
 8007ff0:	24000000 	.word	0x24000000

08007ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ff8:	f7ff ffcc 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008000:	69db      	ldr	r3, [r3, #28]
 8008002:	091b      	lsrs	r3, r3, #4
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	4904      	ldr	r1, [pc, #16]	; (800801c <HAL_RCC_GetPCLK1Freq+0x28>)
 800800a:	5ccb      	ldrb	r3, [r1, r3]
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008014:	4618      	mov	r0, r3
 8008016:	bd80      	pop	{r7, pc}
 8008018:	58024400 	.word	0x58024400
 800801c:	0800d9f8 	.word	0x0800d9f8

08008020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008024:	f7ff ffb6 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8008028:	4602      	mov	r2, r0
 800802a:	4b06      	ldr	r3, [pc, #24]	; (8008044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	0a1b      	lsrs	r3, r3, #8
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	4904      	ldr	r1, [pc, #16]	; (8008048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008036:	5ccb      	ldrb	r3, [r1, r3]
 8008038:	f003 031f 	and.w	r3, r3, #31
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008040:	4618      	mov	r0, r3
 8008042:	bd80      	pop	{r7, pc}
 8008044:	58024400 	.word	0x58024400
 8008048:	0800d9f8 	.word	0x0800d9f8

0800804c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800804c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008050:	b0c6      	sub	sp, #280	; 0x118
 8008052:	af00      	add	r7, sp, #0
 8008054:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008058:	2300      	movs	r3, #0
 800805a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800805e:	2300      	movs	r3, #0
 8008060:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008070:	2500      	movs	r5, #0
 8008072:	ea54 0305 	orrs.w	r3, r4, r5
 8008076:	d049      	beq.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008082:	d02f      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008088:	d828      	bhi.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800808a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800808e:	d01a      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008094:	d822      	bhi.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800809a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800809e:	d007      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80080a0:	e01c      	b.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a2:	4bab      	ldr	r3, [pc, #684]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a6:	4aaa      	ldr	r2, [pc, #680]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080ae:	e01a      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80080b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080b4:	3308      	adds	r3, #8
 80080b6:	2102      	movs	r1, #2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f002 fa49 	bl	800a550 <RCCEx_PLL2_Config>
 80080be:	4603      	mov	r3, r0
 80080c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080c4:	e00f      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ca:	3328      	adds	r3, #40	; 0x28
 80080cc:	2102      	movs	r1, #2
 80080ce:	4618      	mov	r0, r3
 80080d0:	f002 faf0 	bl	800a6b4 <RCCEx_PLL3_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80080da:	e004      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080e2:	e000      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80080e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80080ee:	4b98      	ldr	r3, [pc, #608]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80080f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080fc:	4a94      	ldr	r2, [pc, #592]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80080fe:	430b      	orrs	r3, r1
 8008100:	6513      	str	r3, [r2, #80]	; 0x50
 8008102:	e003      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008108:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800810c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008118:	f04f 0900 	mov.w	r9, #0
 800811c:	ea58 0309 	orrs.w	r3, r8, r9
 8008120:	d047      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008128:	2b04      	cmp	r3, #4
 800812a:	d82a      	bhi.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008149 	.word	0x08008149
 8008138:	08008157 	.word	0x08008157
 800813c:	0800816d 	.word	0x0800816d
 8008140:	0800818b 	.word	0x0800818b
 8008144:	0800818b 	.word	0x0800818b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008148:	4b81      	ldr	r3, [pc, #516]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4a80      	ldr	r2, [pc, #512]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800814e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008154:	e01a      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800815a:	3308      	adds	r3, #8
 800815c:	2100      	movs	r1, #0
 800815e:	4618      	mov	r0, r3
 8008160:	f002 f9f6 	bl	800a550 <RCCEx_PLL2_Config>
 8008164:	4603      	mov	r3, r0
 8008166:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800816a:	e00f      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800816c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008170:	3328      	adds	r3, #40	; 0x28
 8008172:	2100      	movs	r1, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f002 fa9d 	bl	800a6b4 <RCCEx_PLL3_Config>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008180:	e004      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800818a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008194:	4b6e      	ldr	r3, [pc, #440]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008198:	f023 0107 	bic.w	r1, r3, #7
 800819c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081a2:	4a6b      	ldr	r2, [pc, #428]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	6513      	str	r3, [r2, #80]	; 0x50
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80081ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80081b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80081be:	f04f 0b00 	mov.w	fp, #0
 80081c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80081c6:	d05b      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80081c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081d0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80081d4:	d03b      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80081d6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80081da:	d834      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80081dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081e0:	d037      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80081e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081e6:	d82e      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80081e8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081ec:	d033      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80081ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80081f2:	d828      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80081f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f8:	d01a      	beq.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80081fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081fe:	d822      	bhi.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008204:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008208:	d007      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800820a:	e01c      	b.n	8008246 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820c:	4b50      	ldr	r3, [pc, #320]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800820e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008210:	4a4f      	ldr	r2, [pc, #316]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008216:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008218:	e01e      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821e:	3308      	adds	r3, #8
 8008220:	2100      	movs	r1, #0
 8008222:	4618      	mov	r0, r3
 8008224:	f002 f994 	bl	800a550 <RCCEx_PLL2_Config>
 8008228:	4603      	mov	r3, r0
 800822a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800822e:	e013      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008234:	3328      	adds	r3, #40	; 0x28
 8008236:	2100      	movs	r1, #0
 8008238:	4618      	mov	r0, r3
 800823a:	f002 fa3b 	bl	800a6b4 <RCCEx_PLL3_Config>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008244:	e008      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800824c:	e004      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800824e:	bf00      	nop
 8008250:	e002      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008252:	bf00      	nop
 8008254:	e000      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10b      	bne.n	8008278 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008260:	4b3b      	ldr	r3, [pc, #236]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008264:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008270:	4a37      	ldr	r2, [pc, #220]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008272:	430b      	orrs	r3, r1
 8008274:	6593      	str	r3, [r2, #88]	; 0x58
 8008276:	e003      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008278:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800827c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008288:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800828c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008290:	2300      	movs	r3, #0
 8008292:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008296:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800829a:	460b      	mov	r3, r1
 800829c:	4313      	orrs	r3, r2
 800829e:	d05d      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80082a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082a8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80082ac:	d03b      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80082ae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80082b2:	d834      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80082b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082b8:	d037      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80082ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082be:	d82e      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80082c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082c4:	d033      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80082c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082ca:	d828      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80082cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d0:	d01a      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80082d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082d6:	d822      	bhi.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d003      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80082dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082e0:	d007      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80082e2:	e01c      	b.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e4:	4b1a      	ldr	r3, [pc, #104]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	4a19      	ldr	r2, [pc, #100]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80082ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80082f0:	e01e      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082f6:	3308      	adds	r3, #8
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f002 f928 	bl	800a550 <RCCEx_PLL2_Config>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008306:	e013      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800830c:	3328      	adds	r3, #40	; 0x28
 800830e:	2100      	movs	r1, #0
 8008310:	4618      	mov	r0, r3
 8008312:	f002 f9cf 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008316:	4603      	mov	r3, r0
 8008318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800831c:	e008      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008324:	e004      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008326:	bf00      	nop
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800832a:	bf00      	nop
 800832c:	e000      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800832e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008330:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008334:	2b00      	cmp	r3, #0
 8008336:	d10d      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008338:	4b05      	ldr	r3, [pc, #20]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800833a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008344:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008348:	4a01      	ldr	r2, [pc, #4]	; (8008350 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800834a:	430b      	orrs	r3, r1
 800834c:	6593      	str	r3, [r2, #88]	; 0x58
 800834e:	e005      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008354:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008358:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800835c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008368:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800836c:	2300      	movs	r3, #0
 800836e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008372:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008376:	460b      	mov	r3, r1
 8008378:	4313      	orrs	r3, r2
 800837a:	d03a      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800837c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008382:	2b30      	cmp	r3, #48	; 0x30
 8008384:	d01f      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008386:	2b30      	cmp	r3, #48	; 0x30
 8008388:	d819      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x372>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d00c      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800838e:	2b20      	cmp	r3, #32
 8008390:	d815      	bhi.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008392:	2b00      	cmp	r3, #0
 8008394:	d019      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008396:	2b10      	cmp	r3, #16
 8008398:	d111      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800839a:	4baa      	ldr	r3, [pc, #680]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800839e:	4aa9      	ldr	r2, [pc, #676]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80083a6:	e011      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80083a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ac:	3308      	adds	r3, #8
 80083ae:	2102      	movs	r1, #2
 80083b0:	4618      	mov	r0, r3
 80083b2:	f002 f8cd 	bl	800a550 <RCCEx_PLL2_Config>
 80083b6:	4603      	mov	r3, r0
 80083b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80083c4:	e002      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80083ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80083d4:	4b9b      	ldr	r3, [pc, #620]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80083dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083e2:	4a98      	ldr	r2, [pc, #608]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80083e4:	430b      	orrs	r3, r1
 80083e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083e8:	e003      	b.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80083fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008402:	2300      	movs	r3, #0
 8008404:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008408:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800840c:	460b      	mov	r3, r1
 800840e:	4313      	orrs	r3, r2
 8008410:	d051      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800841c:	d035      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800841e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008422:	d82e      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008428:	d031      	beq.n	800848e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800842a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800842e:	d828      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008434:	d01a      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800843a:	d822      	bhi.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008444:	d007      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008446:	e01c      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008448:	4b7e      	ldr	r3, [pc, #504]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	4a7d      	ldr	r2, [pc, #500]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800844e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008454:	e01c      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845a:	3308      	adds	r3, #8
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f002 f876 	bl	800a550 <RCCEx_PLL2_Config>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800846a:	e011      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800846c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008470:	3328      	adds	r3, #40	; 0x28
 8008472:	2100      	movs	r1, #0
 8008474:	4618      	mov	r0, r3
 8008476:	f002 f91d 	bl	800a6b4 <RCCEx_PLL3_Config>
 800847a:	4603      	mov	r3, r0
 800847c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008480:	e006      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008488:	e002      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800848e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008490:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008498:	4b6a      	ldr	r3, [pc, #424]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80084a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a6:	4a67      	ldr	r2, [pc, #412]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80084a8:	430b      	orrs	r3, r1
 80084aa:	6513      	str	r3, [r2, #80]	; 0x50
 80084ac:	e003      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084b2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084be:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80084c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80084cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4313      	orrs	r3, r2
 80084d4:	d053      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80084d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084e0:	d033      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80084e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80084e6:	d82c      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80084e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084ec:	d02f      	beq.n	800854e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80084ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084f2:	d826      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80084f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084f8:	d02b      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80084fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80084fe:	d820      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008500:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008504:	d012      	beq.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850a:	d81a      	bhi.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d022      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008514:	d115      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800851a:	3308      	adds	r3, #8
 800851c:	2101      	movs	r1, #1
 800851e:	4618      	mov	r0, r3
 8008520:	f002 f816 	bl	800a550 <RCCEx_PLL2_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800852a:	e015      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800852c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008530:	3328      	adds	r3, #40	; 0x28
 8008532:	2101      	movs	r1, #1
 8008534:	4618      	mov	r0, r3
 8008536:	f002 f8bd 	bl	800a6b4 <RCCEx_PLL3_Config>
 800853a:	4603      	mov	r3, r0
 800853c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008540:	e00a      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008548:	e006      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800854a:	bf00      	nop
 800854c:	e004      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800854e:	bf00      	nop
 8008550:	e002      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008552:	bf00      	nop
 8008554:	e000      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008556:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008560:	4b38      	ldr	r3, [pc, #224]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008564:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800856c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800856e:	4a35      	ldr	r2, [pc, #212]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008570:	430b      	orrs	r3, r1
 8008572:	6513      	str	r3, [r2, #80]	; 0x50
 8008574:	e003      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008576:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800857a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800857e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800858a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800858e:	2300      	movs	r3, #0
 8008590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008594:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008598:	460b      	mov	r3, r1
 800859a:	4313      	orrs	r3, r2
 800859c:	d058      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800859e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085aa:	d033      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80085ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085b0:	d82c      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80085b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085b6:	d02f      	beq.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80085b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085bc:	d826      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80085be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085c2:	d02b      	beq.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80085c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80085c8:	d820      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80085ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085ce:	d012      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80085d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085d4:	d81a      	bhi.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d022      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80085da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085de:	d115      	bne.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e4:	3308      	adds	r3, #8
 80085e6:	2101      	movs	r1, #1
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 ffb1 	bl	800a550 <RCCEx_PLL2_Config>
 80085ee:	4603      	mov	r3, r0
 80085f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80085f4:	e015      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085fa:	3328      	adds	r3, #40	; 0x28
 80085fc:	2101      	movs	r1, #1
 80085fe:	4618      	mov	r0, r3
 8008600:	f002 f858 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800860a:	e00a      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008612:	e006      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008614:	bf00      	nop
 8008616:	e004      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008618:	bf00      	nop
 800861a:	e002      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800861c:	bf00      	nop
 800861e:	e000      	b.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10e      	bne.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800862a:	4b06      	ldr	r3, [pc, #24]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800862c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800863a:	4a02      	ldr	r2, [pc, #8]	; (8008644 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800863c:	430b      	orrs	r3, r1
 800863e:	6593      	str	r3, [r2, #88]	; 0x58
 8008640:	e006      	b.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008642:	bf00      	nop
 8008644:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008648:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800864c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800865c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008660:	2300      	movs	r3, #0
 8008662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008666:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800866a:	460b      	mov	r3, r1
 800866c:	4313      	orrs	r3, r2
 800866e:	d037      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800867a:	d00e      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008680:	d816      	bhi.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d018      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800868a:	d111      	bne.n	80086b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800868c:	4bc4      	ldr	r3, [pc, #784]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800868e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008690:	4ac3      	ldr	r2, [pc, #780]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008698:	e00f      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800869a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800869e:	3308      	adds	r3, #8
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 ff54 	bl	800a550 <RCCEx_PLL2_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80086ae:	e004      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086b6:	e000      	b.n	80086ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80086b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10a      	bne.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80086c2:	4bb7      	ldr	r3, [pc, #732]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80086ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d0:	4ab3      	ldr	r2, [pc, #716]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80086d2:	430b      	orrs	r3, r1
 80086d4:	6513      	str	r3, [r2, #80]	; 0x50
 80086d6:	e003      	b.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80086e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80086ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086f0:	2300      	movs	r3, #0
 80086f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80086fa:	460b      	mov	r3, r1
 80086fc:	4313      	orrs	r3, r2
 80086fe:	d039      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008706:	2b03      	cmp	r3, #3
 8008708:	d81c      	bhi.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800870a:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	0800874d 	.word	0x0800874d
 8008714:	08008721 	.word	0x08008721
 8008718:	0800872f 	.word	0x0800872f
 800871c:	0800874d 	.word	0x0800874d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008720:	4b9f      	ldr	r3, [pc, #636]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	4a9e      	ldr	r2, [pc, #632]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800872a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800872c:	e00f      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800872e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008732:	3308      	adds	r3, #8
 8008734:	2102      	movs	r1, #2
 8008736:	4618      	mov	r0, r3
 8008738:	f001 ff0a 	bl	800a550 <RCCEx_PLL2_Config>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008742:	e004      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800874a:	e000      	b.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800874c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800874e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008756:	4b92      	ldr	r3, [pc, #584]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875a:	f023 0103 	bic.w	r1, r3, #3
 800875e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008764:	4a8e      	ldr	r2, [pc, #568]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008766:	430b      	orrs	r3, r1
 8008768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800876a:	e003      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008770:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008784:	2300      	movs	r3, #0
 8008786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800878a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800878e:	460b      	mov	r3, r1
 8008790:	4313      	orrs	r3, r2
 8008792:	f000 8099 	beq.w	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008796:	4b83      	ldr	r3, [pc, #524]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a82      	ldr	r2, [pc, #520]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800879c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087a2:	f7f9 ff1d 	bl	80025e0 <HAL_GetTick>
 80087a6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087aa:	e00b      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ac:	f7f9 ff18 	bl	80025e0 <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b64      	cmp	r3, #100	; 0x64
 80087ba:	d903      	bls.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80087c2:	e005      	b.n	80087d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087c4:	4b77      	ldr	r3, [pc, #476]	; (80089a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d0ed      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80087d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d173      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80087d8:	4b71      	ldr	r3, [pc, #452]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80087e4:	4053      	eors	r3, r2
 80087e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d015      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80087ee:	4b6c      	ldr	r3, [pc, #432]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087fa:	4b69      	ldr	r3, [pc, #420]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80087fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fe:	4a68      	ldr	r2, [pc, #416]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008804:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008806:	4b66      	ldr	r3, [pc, #408]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880a:	4a65      	ldr	r2, [pc, #404]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800880c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008810:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008812:	4a63      	ldr	r2, [pc, #396]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008818:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008826:	d118      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008828:	f7f9 feda 	bl	80025e0 <HAL_GetTick>
 800882c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008830:	e00d      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008832:	f7f9 fed5 	bl	80025e0 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800883c:	1ad2      	subs	r2, r2, r3
 800883e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008842:	429a      	cmp	r2, r3
 8008844:	d903      	bls.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800884c:	e005      	b.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800884e:	4b54      	ldr	r3, [pc, #336]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0eb      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800885a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800885e:	2b00      	cmp	r3, #0
 8008860:	d129      	bne.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800886a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800886e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008872:	d10e      	bne.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008874:	4b4a      	ldr	r3, [pc, #296]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800887c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008880:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008884:	091a      	lsrs	r2, r3, #4
 8008886:	4b48      	ldr	r3, [pc, #288]	; (80089a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008888:	4013      	ands	r3, r2
 800888a:	4a45      	ldr	r2, [pc, #276]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800888c:	430b      	orrs	r3, r1
 800888e:	6113      	str	r3, [r2, #16]
 8008890:	e005      	b.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008892:	4b43      	ldr	r3, [pc, #268]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	4a42      	ldr	r2, [pc, #264]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008898:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800889c:	6113      	str	r3, [r2, #16]
 800889e:	4b40      	ldr	r3, [pc, #256]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80088a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80088aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088ae:	4a3c      	ldr	r2, [pc, #240]	; (80089a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80088b0:	430b      	orrs	r3, r1
 80088b2:	6713      	str	r3, [r2, #112]	; 0x70
 80088b4:	e008      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80088b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80088c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f002 0301 	and.w	r3, r2, #1
 80088d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80088d8:	2300      	movs	r3, #0
 80088da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80088e2:	460b      	mov	r3, r1
 80088e4:	4313      	orrs	r3, r2
 80088e6:	f000 808f 	beq.w	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80088ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088f0:	2b28      	cmp	r3, #40	; 0x28
 80088f2:	d871      	bhi.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80088f4:	a201      	add	r2, pc, #4	; (adr r2, 80088fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80088f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088fa:	bf00      	nop
 80088fc:	080089e1 	.word	0x080089e1
 8008900:	080089d9 	.word	0x080089d9
 8008904:	080089d9 	.word	0x080089d9
 8008908:	080089d9 	.word	0x080089d9
 800890c:	080089d9 	.word	0x080089d9
 8008910:	080089d9 	.word	0x080089d9
 8008914:	080089d9 	.word	0x080089d9
 8008918:	080089d9 	.word	0x080089d9
 800891c:	080089ad 	.word	0x080089ad
 8008920:	080089d9 	.word	0x080089d9
 8008924:	080089d9 	.word	0x080089d9
 8008928:	080089d9 	.word	0x080089d9
 800892c:	080089d9 	.word	0x080089d9
 8008930:	080089d9 	.word	0x080089d9
 8008934:	080089d9 	.word	0x080089d9
 8008938:	080089d9 	.word	0x080089d9
 800893c:	080089c3 	.word	0x080089c3
 8008940:	080089d9 	.word	0x080089d9
 8008944:	080089d9 	.word	0x080089d9
 8008948:	080089d9 	.word	0x080089d9
 800894c:	080089d9 	.word	0x080089d9
 8008950:	080089d9 	.word	0x080089d9
 8008954:	080089d9 	.word	0x080089d9
 8008958:	080089d9 	.word	0x080089d9
 800895c:	080089e1 	.word	0x080089e1
 8008960:	080089d9 	.word	0x080089d9
 8008964:	080089d9 	.word	0x080089d9
 8008968:	080089d9 	.word	0x080089d9
 800896c:	080089d9 	.word	0x080089d9
 8008970:	080089d9 	.word	0x080089d9
 8008974:	080089d9 	.word	0x080089d9
 8008978:	080089d9 	.word	0x080089d9
 800897c:	080089e1 	.word	0x080089e1
 8008980:	080089d9 	.word	0x080089d9
 8008984:	080089d9 	.word	0x080089d9
 8008988:	080089d9 	.word	0x080089d9
 800898c:	080089d9 	.word	0x080089d9
 8008990:	080089d9 	.word	0x080089d9
 8008994:	080089d9 	.word	0x080089d9
 8008998:	080089d9 	.word	0x080089d9
 800899c:	080089e1 	.word	0x080089e1
 80089a0:	58024400 	.word	0x58024400
 80089a4:	58024800 	.word	0x58024800
 80089a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b0:	3308      	adds	r3, #8
 80089b2:	2101      	movs	r1, #1
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fdcb 	bl	800a550 <RCCEx_PLL2_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80089c0:	e00f      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c6:	3328      	adds	r3, #40	; 0x28
 80089c8:	2101      	movs	r1, #1
 80089ca:	4618      	mov	r0, r3
 80089cc:	f001 fe72 	bl	800a6b4 <RCCEx_PLL3_Config>
 80089d0:	4603      	mov	r3, r0
 80089d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80089d6:	e004      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80089de:	e000      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80089e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80089ea:	4bbf      	ldr	r3, [pc, #764]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f8:	4abb      	ldr	r2, [pc, #748]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089fa:	430b      	orrs	r3, r1
 80089fc:	6553      	str	r3, [r2, #84]	; 0x54
 80089fe:	e003      	b.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a10:	f002 0302 	and.w	r3, r2, #2
 8008a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4313      	orrs	r3, r2
 8008a26:	d041      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a2e:	2b05      	cmp	r3, #5
 8008a30:	d824      	bhi.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008a32:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a38:	08008a85 	.word	0x08008a85
 8008a3c:	08008a51 	.word	0x08008a51
 8008a40:	08008a67 	.word	0x08008a67
 8008a44:	08008a85 	.word	0x08008a85
 8008a48:	08008a85 	.word	0x08008a85
 8008a4c:	08008a85 	.word	0x08008a85
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a54:	3308      	adds	r3, #8
 8008a56:	2101      	movs	r1, #1
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 fd79 	bl	800a550 <RCCEx_PLL2_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a64:	e00f      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a6a:	3328      	adds	r3, #40	; 0x28
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f001 fe20 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008a7a:	e004      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a82:	e000      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8008a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10a      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008a8e:	4b96      	ldr	r3, [pc, #600]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a92:	f023 0107 	bic.w	r1, r3, #7
 8008a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a9c:	4a92      	ldr	r2, [pc, #584]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008a9e:	430b      	orrs	r3, r1
 8008aa0:	6553      	str	r3, [r2, #84]	; 0x54
 8008aa2:	e003      	b.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008aa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f002 0304 	and.w	r3, r2, #4
 8008ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ac2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	d044      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad4:	2b05      	cmp	r3, #5
 8008ad6:	d825      	bhi.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b2d 	.word	0x08008b2d
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008b0f 	.word	0x08008b0f
 8008aec:	08008b2d 	.word	0x08008b2d
 8008af0:	08008b2d 	.word	0x08008b2d
 8008af4:	08008b2d 	.word	0x08008b2d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afc:	3308      	adds	r3, #8
 8008afe:	2101      	movs	r1, #1
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fd25 	bl	800a550 <RCCEx_PLL2_Config>
 8008b06:	4603      	mov	r3, r0
 8008b08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b0c:	e00f      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b12:	3328      	adds	r3, #40	; 0x28
 8008b14:	2101      	movs	r1, #1
 8008b16:	4618      	mov	r0, r3
 8008b18:	f001 fdcc 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008b22:	e004      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008b2a:	e000      	b.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008b2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10b      	bne.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b36:	4b6c      	ldr	r3, [pc, #432]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b3a:	f023 0107 	bic.w	r1, r3, #7
 8008b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b46:	4a68      	ldr	r2, [pc, #416]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8008b4c:	e003      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008b52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b5e:	f002 0320 	and.w	r3, r2, #32
 8008b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b66:	2300      	movs	r3, #0
 8008b68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008b6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4313      	orrs	r3, r2
 8008b74:	d055      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b82:	d033      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8008b84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b88:	d82c      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b8e:	d02f      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b94:	d826      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008b9a:	d02b      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ba0:	d820      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba6:	d012      	beq.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bac:	d81a      	bhi.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d022      	beq.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8008bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008bb6:	d115      	bne.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f001 fcc5 	bl	800a550 <RCCEx_PLL2_Config>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008bcc:	e015      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bd2:	3328      	adds	r3, #40	; 0x28
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f001 fd6c 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008be2:	e00a      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008bea:	e006      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008bec:	bf00      	nop
 8008bee:	e004      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008bf0:	bf00      	nop
 8008bf2:	e002      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008bf4:	bf00      	nop
 8008bf6:	e000      	b.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8008bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008c0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c12:	4a35      	ldr	r2, [pc, #212]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008c14:	430b      	orrs	r3, r1
 8008c16:	6553      	str	r3, [r2, #84]	; 0x54
 8008c18:	e003      	b.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c1e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008c2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c32:	2300      	movs	r3, #0
 8008c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	d058      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008c4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c4e:	d033      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008c50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008c54:	d82c      	bhi.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5a:	d02f      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c60:	d826      	bhi.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c66:	d02b      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008c68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c6c:	d820      	bhi.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c72:	d012      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8008c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c78:	d81a      	bhi.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d022      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c82:	d115      	bne.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c88:	3308      	adds	r3, #8
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fc5f 	bl	800a550 <RCCEx_PLL2_Config>
 8008c92:	4603      	mov	r3, r0
 8008c94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008c98:	e015      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9e:	3328      	adds	r3, #40	; 0x28
 8008ca0:	2102      	movs	r1, #2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fd06 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008cae:	e00a      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008cb6:	e006      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008cb8:	bf00      	nop
 8008cba:	e004      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008cbc:	bf00      	nop
 8008cbe:	e002      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008cc0:	bf00      	nop
 8008cc2:	e000      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8008cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10e      	bne.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008cde:	4a02      	ldr	r2, [pc, #8]	; (8008ce8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	6593      	str	r3, [r2, #88]	; 0x58
 8008ce4:	e006      	b.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8008ce6:	bf00      	nop
 8008ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d04:	2300      	movs	r3, #0
 8008d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4313      	orrs	r3, r2
 8008d12:	d055      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d1c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d20:	d033      	beq.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008d22:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008d26:	d82c      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2c:	d02f      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d32:	d826      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008d34:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d38:	d02b      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008d3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008d3e:	d820      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d44:	d012      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d4a:	d81a      	bhi.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d022      	beq.n	8008d96 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d54:	d115      	bne.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5a:	3308      	adds	r3, #8
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 fbf6 	bl	800a550 <RCCEx_PLL2_Config>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d6a:	e015      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d70:	3328      	adds	r3, #40	; 0x28
 8008d72:	2102      	movs	r1, #2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f001 fc9d 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008d80:	e00a      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008d88:	e006      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d8a:	bf00      	nop
 8008d8c:	e004      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d8e:	bf00      	nop
 8008d90:	e002      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d92:	bf00      	nop
 8008d94:	e000      	b.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d10b      	bne.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008da0:	4ba0      	ldr	r3, [pc, #640]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008db0:	4a9c      	ldr	r2, [pc, #624]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008db2:	430b      	orrs	r3, r1
 8008db4:	6593      	str	r3, [r2, #88]	; 0x58
 8008db6:	e003      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f002 0308 	and.w	r3, r2, #8
 8008dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008dd6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	d01e      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dec:	d10c      	bne.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df2:	3328      	adds	r3, #40	; 0x28
 8008df4:	2102      	movs	r1, #2
 8008df6:	4618      	mov	r0, r3
 8008df8:	f001 fc5c 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d002      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008e02:	2301      	movs	r3, #1
 8008e04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008e08:	4b86      	ldr	r3, [pc, #536]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e18:	4a82      	ldr	r2, [pc, #520]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e1a:	430b      	orrs	r3, r1
 8008e1c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	f002 0310 	and.w	r3, r2, #16
 8008e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e34:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	d01e      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e4a:	d10c      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e50:	3328      	adds	r3, #40	; 0x28
 8008e52:	2102      	movs	r1, #2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fc2d 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008e60:	2301      	movs	r3, #1
 8008e62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e66:	4b6f      	ldr	r3, [pc, #444]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e76:	4a6b      	ldr	r2, [pc, #428]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008e78:	430b      	orrs	r3, r1
 8008e7a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e8e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008e92:	460b      	mov	r3, r1
 8008e94:	4313      	orrs	r3, r2
 8008e96:	d03e      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008ea0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ea4:	d022      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eaa:	d81b      	bhi.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb4:	d00b      	beq.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008eb6:	e015      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebc:	3308      	adds	r3, #8
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f001 fb45 	bl	800a550 <RCCEx_PLL2_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ecc:	e00f      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	3328      	adds	r3, #40	; 0x28
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f001 fbec 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ee2:	e004      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008eea:	e000      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008eec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008eee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10b      	bne.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008ef6:	4b4b      	ldr	r3, [pc, #300]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008efa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008f06:	4a47      	ldr	r2, [pc, #284]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8008f0c:	e003      	b.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008f22:	673b      	str	r3, [r7, #112]	; 0x70
 8008f24:	2300      	movs	r3, #0
 8008f26:	677b      	str	r3, [r7, #116]	; 0x74
 8008f28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	d03b      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f3e:	d01f      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f44:	d818      	bhi.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f50:	d007      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008f52:	e011      	b.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f54:	4b33      	ldr	r3, [pc, #204]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f58:	4a32      	ldr	r2, [pc, #200]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f60:	e00f      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f66:	3328      	adds	r3, #40	; 0x28
 8008f68:	2101      	movs	r1, #1
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 fba2 	bl	800a6b4 <RCCEx_PLL3_Config>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008f76:	e004      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f78:	2301      	movs	r3, #1
 8008f7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008f7e:	e000      	b.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008f8a:	4b26      	ldr	r3, [pc, #152]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f9a:	4a22      	ldr	r2, [pc, #136]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6553      	str	r3, [r2, #84]	; 0x54
 8008fa0:	e003      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fa6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fb8:	2300      	movs	r3, #0
 8008fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fbc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	d034      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd4:	d007      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008fd6:	e011      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fd8:	4b12      	ldr	r3, [pc, #72]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fdc:	4a11      	ldr	r2, [pc, #68]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008fe4:	e00e      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fea:	3308      	adds	r3, #8
 8008fec:	2102      	movs	r1, #2
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 faae 	bl	800a550 <RCCEx_PLL2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ffa:	e003      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10d      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800900c:	4b05      	ldr	r3, [pc, #20]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800900e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009010:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800901a:	4a02      	ldr	r2, [pc, #8]	; (8009024 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800901c:	430b      	orrs	r3, r1
 800901e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009020:	e006      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009022:	bf00      	nop
 8009024:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009028:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800902c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800903c:	663b      	str	r3, [r7, #96]	; 0x60
 800903e:	2300      	movs	r3, #0
 8009040:	667b      	str	r3, [r7, #100]	; 0x64
 8009042:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d00c      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009050:	3328      	adds	r3, #40	; 0x28
 8009052:	2102      	movs	r1, #2
 8009054:	4618      	mov	r0, r3
 8009056:	f001 fb2d 	bl	800a6b4 <RCCEx_PLL3_Config>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009072:	65bb      	str	r3, [r7, #88]	; 0x58
 8009074:	2300      	movs	r3, #0
 8009076:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009078:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800907c:	460b      	mov	r3, r1
 800907e:	4313      	orrs	r3, r2
 8009080:	d036      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800908c:	d018      	beq.n	80090c0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800908e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009092:	d811      	bhi.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009098:	d014      	beq.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800909a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909e:	d80b      	bhi.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d011      	beq.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80090a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090a8:	d106      	bne.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090aa:	4bb7      	ldr	r3, [pc, #732]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	4ab6      	ldr	r2, [pc, #728]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80090b6:	e008      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80090be:	e004      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80090c0:	bf00      	nop
 80090c2:	e002      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80090c4:	bf00      	nop
 80090c6:	e000      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80090c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10a      	bne.n	80090e8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80090d2:	4bad      	ldr	r3, [pc, #692]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80090da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e0:	4aa9      	ldr	r2, [pc, #676]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80090e2:	430b      	orrs	r3, r1
 80090e4:	6553      	str	r3, [r2, #84]	; 0x54
 80090e6:	e003      	b.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80090ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80090f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80090fc:	653b      	str	r3, [r7, #80]	; 0x50
 80090fe:	2300      	movs	r3, #0
 8009100:	657b      	str	r3, [r7, #84]	; 0x54
 8009102:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009106:	460b      	mov	r3, r1
 8009108:	4313      	orrs	r3, r2
 800910a:	d009      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800910c:	4b9e      	ldr	r3, [pc, #632]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800910e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911a:	4a9b      	ldr	r2, [pc, #620]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800911c:	430b      	orrs	r3, r1
 800911e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009128:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800912c:	64bb      	str	r3, [r7, #72]	; 0x48
 800912e:	2300      	movs	r3, #0
 8009130:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009132:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009136:	460b      	mov	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	d009      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800913c:	4b92      	ldr	r3, [pc, #584]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800913e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009140:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800914a:	4a8f      	ldr	r2, [pc, #572]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800914c:	430b      	orrs	r3, r1
 800914e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800915c:	643b      	str	r3, [r7, #64]	; 0x40
 800915e:	2300      	movs	r3, #0
 8009160:	647b      	str	r3, [r7, #68]	; 0x44
 8009162:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009166:	460b      	mov	r3, r1
 8009168:	4313      	orrs	r3, r2
 800916a:	d00e      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800916c:	4b86      	ldr	r3, [pc, #536]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	4a85      	ldr	r2, [pc, #532]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009176:	6113      	str	r3, [r2, #16]
 8009178:	4b83      	ldr	r3, [pc, #524]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800917a:	6919      	ldr	r1, [r3, #16]
 800917c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009180:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009184:	4a80      	ldr	r2, [pc, #512]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009186:	430b      	orrs	r3, r1
 8009188:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800918a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800918e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009192:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009196:	63bb      	str	r3, [r7, #56]	; 0x38
 8009198:	2300      	movs	r3, #0
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80091a0:	460b      	mov	r3, r1
 80091a2:	4313      	orrs	r3, r2
 80091a4:	d009      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80091a6:	4b78      	ldr	r3, [pc, #480]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80091ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091b4:	4a74      	ldr	r2, [pc, #464]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091b6:	430b      	orrs	r3, r1
 80091b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80091ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80091c6:	633b      	str	r3, [r7, #48]	; 0x30
 80091c8:	2300      	movs	r3, #0
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
 80091cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d00a      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80091d6:	4b6c      	ldr	r3, [pc, #432]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091da:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091e6:	4a68      	ldr	r2, [pc, #416]	; (8009388 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80091e8:	430b      	orrs	r3, r1
 80091ea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80091ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	2100      	movs	r1, #0
 80091f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009202:	460b      	mov	r3, r1
 8009204:	4313      	orrs	r3, r2
 8009206:	d011      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920c:	3308      	adds	r3, #8
 800920e:	2100      	movs	r1, #0
 8009210:	4618      	mov	r0, r3
 8009212:	f001 f99d 	bl	800a550 <RCCEx_PLL2_Config>
 8009216:	4603      	mov	r3, r0
 8009218:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800921c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009220:	2b00      	cmp	r3, #0
 8009222:	d003      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009224:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009228:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009234:	2100      	movs	r1, #0
 8009236:	6239      	str	r1, [r7, #32]
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
 800923e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009242:	460b      	mov	r3, r1
 8009244:	4313      	orrs	r3, r2
 8009246:	d011      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800924c:	3308      	adds	r3, #8
 800924e:	2101      	movs	r1, #1
 8009250:	4618      	mov	r0, r3
 8009252:	f001 f97d 	bl	800a550 <RCCEx_PLL2_Config>
 8009256:	4603      	mov	r3, r0
 8009258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800925c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009260:	2b00      	cmp	r3, #0
 8009262:	d003      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009268:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800926c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009274:	2100      	movs	r1, #0
 8009276:	61b9      	str	r1, [r7, #24]
 8009278:	f003 0304 	and.w	r3, r3, #4
 800927c:	61fb      	str	r3, [r7, #28]
 800927e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	d011      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928c:	3308      	adds	r3, #8
 800928e:	2102      	movs	r1, #2
 8009290:	4618      	mov	r0, r3
 8009292:	f001 f95d 	bl	800a550 <RCCEx_PLL2_Config>
 8009296:	4603      	mov	r3, r0
 8009298:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800929c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	2100      	movs	r1, #0
 80092b6:	6139      	str	r1, [r7, #16]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	617b      	str	r3, [r7, #20]
 80092be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80092c2:	460b      	mov	r3, r1
 80092c4:	4313      	orrs	r3, r2
 80092c6:	d011      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092cc:	3328      	adds	r3, #40	; 0x28
 80092ce:	2100      	movs	r1, #0
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f9ef 	bl	800a6b4 <RCCEx_PLL3_Config>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80092dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80092e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80092ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	2100      	movs	r1, #0
 80092f6:	60b9      	str	r1, [r7, #8]
 80092f8:	f003 0310 	and.w	r3, r3, #16
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009302:	460b      	mov	r3, r1
 8009304:	4313      	orrs	r3, r2
 8009306:	d011      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	3328      	adds	r3, #40	; 0x28
 800930e:	2101      	movs	r1, #1
 8009310:	4618      	mov	r0, r3
 8009312:	f001 f9cf 	bl	800a6b4 <RCCEx_PLL3_Config>
 8009316:	4603      	mov	r3, r0
 8009318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800931c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009320:	2b00      	cmp	r3, #0
 8009322:	d003      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009328:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800932c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	2100      	movs	r1, #0
 8009336:	6039      	str	r1, [r7, #0]
 8009338:	f003 0320 	and.w	r3, r3, #32
 800933c:	607b      	str	r3, [r7, #4]
 800933e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009342:	460b      	mov	r3, r1
 8009344:	4313      	orrs	r3, r2
 8009346:	d011      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009348:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800934c:	3328      	adds	r3, #40	; 0x28
 800934e:	2102      	movs	r1, #2
 8009350:	4618      	mov	r0, r3
 8009352:	f001 f9af 	bl	800a6b4 <RCCEx_PLL3_Config>
 8009356:	4603      	mov	r3, r0
 8009358:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800935c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009364:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009368:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800936c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009374:	2300      	movs	r3, #0
 8009376:	e000      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
}
 800937a:	4618      	mov	r0, r3
 800937c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009380:	46bd      	mov	sp, r7
 8009382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009386:	bf00      	nop
 8009388:	58024400 	.word	0x58024400

0800938c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b090      	sub	sp, #64	; 0x40
 8009390:	af00      	add	r7, sp, #0
 8009392:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009396:	e9d7 2300 	ldrd	r2, r3, [r7]
 800939a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800939e:	430b      	orrs	r3, r1
 80093a0:	f040 8094 	bne.w	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80093a4:	4b9b      	ldr	r3, [pc, #620]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093a8:	f003 0307 	and.w	r3, r3, #7
 80093ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	f200 8087 	bhi.w	80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80093b6:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80093b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093bc:	080093d1 	.word	0x080093d1
 80093c0:	080093f9 	.word	0x080093f9
 80093c4:	08009421 	.word	0x08009421
 80093c8:	080094bd 	.word	0x080094bd
 80093cc:	08009449 	.word	0x08009449
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093d0:	4b90      	ldr	r3, [pc, #576]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093dc:	d108      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 ff62 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ec:	f000 bc93 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093f4:	f000 bc8f 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80093f8:	4b86      	ldr	r3, [pc, #536]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009404:	d108      	bne.n	8009418 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009406:	f107 0318 	add.w	r3, r7, #24
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fca6 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009414:	f000 bc7f 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800941c:	f000 bc7b 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009420:	4b7c      	ldr	r3, [pc, #496]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800942c:	d108      	bne.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800942e:	f107 030c 	add.w	r3, r7, #12
 8009432:	4618      	mov	r0, r3
 8009434:	f000 fde6 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800943c:	f000 bc6b 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009444:	f000 bc67 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009448:	4b72      	ldr	r3, [pc, #456]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800944a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800944c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009450:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009452:	4b70      	ldr	r3, [pc, #448]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b04      	cmp	r3, #4
 800945c:	d10c      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800945e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009460:	2b00      	cmp	r3, #0
 8009462:	d109      	bne.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009464:	4b6b      	ldr	r3, [pc, #428]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	08db      	lsrs	r3, r3, #3
 800946a:	f003 0303 	and.w	r3, r3, #3
 800946e:	4a6a      	ldr	r2, [pc, #424]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009470:	fa22 f303 	lsr.w	r3, r2, r3
 8009474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009476:	e01f      	b.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009478:	4b66      	ldr	r3, [pc, #408]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009484:	d106      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800948c:	d102      	bne.n	8009494 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800948e:	4b63      	ldr	r3, [pc, #396]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009492:	e011      	b.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009494:	4b5f      	ldr	r3, [pc, #380]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800949c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094a0:	d106      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094a8:	d102      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80094aa:	4b5d      	ldr	r3, [pc, #372]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094ae:	e003      	b.n	80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80094b4:	f000 bc2f 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80094b8:	f000 bc2d 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80094bc:	4b59      	ldr	r3, [pc, #356]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80094be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c0:	f000 bc29 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094c8:	f000 bc25 	b.w	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80094cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80094d4:	430b      	orrs	r3, r1
 80094d6:	f040 80a7 	bne.w	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80094da:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80094dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80094e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80094e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094ea:	d054      	beq.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094f2:	f200 808b 	bhi.w	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094fc:	f000 8083 	beq.w	8009606 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009506:	f200 8081 	bhi.w	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009510:	d02f      	beq.n	8009572 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009518:	d878      	bhi.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	2b00      	cmp	r3, #0
 800951e:	d004      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009526:	d012      	beq.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009528:	e070      	b.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800952a:	4b3a      	ldr	r3, [pc, #232]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009536:	d107      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800953c:	4618      	mov	r0, r3
 800953e:	f000 feb5 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009546:	e3e6      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800954c:	e3e3      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800954e:	4b31      	ldr	r3, [pc, #196]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800955a:	d107      	bne.n	800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800955c:	f107 0318 	add.w	r3, r7, #24
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fbfb 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956a:	e3d4      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800956c:	2300      	movs	r3, #0
 800956e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009570:	e3d1      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009572:	4b28      	ldr	r3, [pc, #160]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800957a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800957e:	d107      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009580:	f107 030c 	add.w	r3, r7, #12
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fd3d 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800958e:	e3c2      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009590:	2300      	movs	r3, #0
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009594:	e3bf      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009596:	4b1f      	ldr	r3, [pc, #124]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800959a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800959e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80095a0:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d10c      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 80095ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d109      	bne.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095b2:	4b18      	ldr	r3, [pc, #96]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	08db      	lsrs	r3, r3, #3
 80095b8:	f003 0303 	and.w	r3, r3, #3
 80095bc:	4a16      	ldr	r2, [pc, #88]	; (8009618 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80095be:	fa22 f303 	lsr.w	r3, r2, r3
 80095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c4:	e01e      	b.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80095c6:	4b13      	ldr	r3, [pc, #76]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095d2:	d106      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80095d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095da:	d102      	bne.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80095dc:	4b0f      	ldr	r3, [pc, #60]	; (800961c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80095de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e0:	e010      	b.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095e2:	4b0c      	ldr	r3, [pc, #48]	; (8009614 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ee:	d106      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80095f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095f6:	d102      	bne.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80095f8:	4b09      	ldr	r3, [pc, #36]	; (8009620 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80095fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095fc:	e002      	b.n	8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009602:	e388      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009604:	e387      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960a:	e384      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800960c:	2300      	movs	r3, #0
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009610:	e381      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009612:	bf00      	nop
 8009614:	58024400 	.word	0x58024400
 8009618:	03d09000 	.word	0x03d09000
 800961c:	003d0900 	.word	0x003d0900
 8009620:	02faf080 	.word	0x02faf080
 8009624:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800962c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009630:	430b      	orrs	r3, r1
 8009632:	f040 809c 	bne.w	800976e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009636:	4b9e      	ldr	r3, [pc, #632]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800963a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800963e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009646:	d054      	beq.n	80096f2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800964e:	f200 808b 	bhi.w	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009654:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009658:	f000 8083 	beq.w	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800965c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009662:	f200 8081 	bhi.w	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800966c:	d02f      	beq.n	80096ce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800966e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009670:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009674:	d878      	bhi.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009678:	2b00      	cmp	r3, #0
 800967a:	d004      	beq.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009682:	d012      	beq.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009684:	e070      	b.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009686:	4b8a      	ldr	r3, [pc, #552]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800968e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009692:	d107      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009698:	4618      	mov	r0, r3
 800969a:	f000 fe07 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a2:	e338      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a8:	e335      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80096aa:	4b81      	ldr	r3, [pc, #516]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80096b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80096b6:	d107      	bne.n	80096c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096b8:	f107 0318 	add.w	r3, r7, #24
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 fb4d 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096c6:	e326      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096cc:	e323      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80096ce:	4b78      	ldr	r3, [pc, #480]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096da:	d107      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096dc:	f107 030c 	add.w	r3, r7, #12
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fc8f 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096ea:	e314      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096f0:	e311      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096f2:	4b6f      	ldr	r3, [pc, #444]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096fc:	4b6c      	ldr	r3, [pc, #432]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b04      	cmp	r3, #4
 8009706:	d10c      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970a:	2b00      	cmp	r3, #0
 800970c:	d109      	bne.n	8009722 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800970e:	4b68      	ldr	r3, [pc, #416]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	08db      	lsrs	r3, r3, #3
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	4a66      	ldr	r2, [pc, #408]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800971a:	fa22 f303 	lsr.w	r3, r2, r3
 800971e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009720:	e01e      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009722:	4b63      	ldr	r3, [pc, #396]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800972a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800972e:	d106      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009732:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009736:	d102      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009738:	4b5f      	ldr	r3, [pc, #380]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800973a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800973c:	e010      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800973e:	4b5c      	ldr	r3, [pc, #368]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009746:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800974a:	d106      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800974c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800974e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009752:	d102      	bne.n	800975a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009754:	4b59      	ldr	r3, [pc, #356]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009758:	e002      	b.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800975e:	e2da      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009760:	e2d9      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009762:	4b57      	ldr	r3, [pc, #348]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009766:	e2d6      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009768:	2300      	movs	r3, #0
 800976a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800976c:	e2d3      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800976e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009772:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009776:	430b      	orrs	r3, r1
 8009778:	f040 80a7 	bne.w	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800977c:	4b4c      	ldr	r3, [pc, #304]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800977e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009780:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009784:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800978c:	d055      	beq.n	800983a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009794:	f200 8096 	bhi.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800979e:	f000 8084 	beq.w	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097a8:	f200 808c 	bhi.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80097ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b2:	d030      	beq.n	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ba:	f200 8083 	bhi.w	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80097be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80097c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097ca:	d012      	beq.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80097cc:	e07a      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097ce:	4b38      	ldr	r3, [pc, #224]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097da:	d107      	bne.n	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e0:	4618      	mov	r0, r3
 80097e2:	f000 fd63 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80097ea:	e294      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097f0:	e291      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80097f2:	4b2f      	ldr	r3, [pc, #188]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097fe:	d107      	bne.n	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009800:	f107 0318 	add.w	r3, r7, #24
 8009804:	4618      	mov	r0, r3
 8009806:	f000 faa9 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800980e:	e282      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009814:	e27f      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009816:	4b26      	ldr	r3, [pc, #152]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800981e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009822:	d107      	bne.n	8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009824:	f107 030c 	add.w	r3, r7, #12
 8009828:	4618      	mov	r0, r3
 800982a:	f000 fbeb 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009832:	e270      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009834:	2300      	movs	r3, #0
 8009836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009838:	e26d      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800983a:	4b1d      	ldr	r3, [pc, #116]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800983c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800983e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009842:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009844:	4b1a      	ldr	r3, [pc, #104]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b04      	cmp	r3, #4
 800984e:	d10c      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009852:	2b00      	cmp	r3, #0
 8009854:	d109      	bne.n	800986a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009856:	4b16      	ldr	r3, [pc, #88]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	08db      	lsrs	r3, r3, #3
 800985c:	f003 0303 	and.w	r3, r3, #3
 8009860:	4a14      	ldr	r2, [pc, #80]	; (80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009862:	fa22 f303 	lsr.w	r3, r2, r3
 8009866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009868:	e01e      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800986a:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009876:	d106      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987e:	d102      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009884:	e010      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009886:	4b0a      	ldr	r3, [pc, #40]	; (80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800988e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009892:	d106      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989a:	d102      	bne.n	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800989c:	4b07      	ldr	r3, [pc, #28]	; (80098bc <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800989e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098a0:	e002      	b.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80098a2:	2300      	movs	r3, #0
 80098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80098a6:	e236      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098a8:	e235      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80098ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098ae:	e232      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80098b0:	58024400 	.word	0x58024400
 80098b4:	03d09000 	.word	0x03d09000
 80098b8:	003d0900 	.word	0x003d0900
 80098bc:	02faf080 	.word	0x02faf080
 80098c0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80098c4:	2300      	movs	r3, #0
 80098c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098c8:	e225      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80098ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ce:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80098d2:	430b      	orrs	r3, r1
 80098d4:	f040 8085 	bne.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80098d8:	4b9c      	ldr	r3, [pc, #624]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80098da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098dc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80098e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098e8:	d06b      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80098ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098f0:	d874      	bhi.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098f8:	d056      	beq.n	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009900:	d86c      	bhi.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009904:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009908:	d03b      	beq.n	8009982 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800990a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800990c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009910:	d864      	bhi.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009918:	d021      	beq.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800991a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009920:	d85c      	bhi.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800992e:	d004      	beq.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009930:	e054      	b.n	80099dc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009932:	f7fe fb5f 	bl	8007ff4 <HAL_RCC_GetPCLK1Freq>
 8009936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009938:	e1ed      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800993a:	4b84      	ldr	r3, [pc, #528]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009946:	d107      	bne.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009948:	f107 0318 	add.w	r3, r7, #24
 800994c:	4618      	mov	r0, r3
 800994e:	f000 fa05 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009956:	e1de      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800995c:	e1db      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800995e:	4b7b      	ldr	r3, [pc, #492]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009966:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800996a:	d107      	bne.n	800997c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	4618      	mov	r0, r3
 8009972:	f000 fb47 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800997a:	e1cc      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800997c:	2300      	movs	r3, #0
 800997e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009980:	e1c9      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009982:	4b72      	ldr	r3, [pc, #456]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0304 	and.w	r3, r3, #4
 800998a:	2b04      	cmp	r3, #4
 800998c:	d109      	bne.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800998e:	4b6f      	ldr	r3, [pc, #444]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	08db      	lsrs	r3, r3, #3
 8009994:	f003 0303 	and.w	r3, r3, #3
 8009998:	4a6d      	ldr	r2, [pc, #436]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800999a:	fa22 f303 	lsr.w	r3, r2, r3
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a0:	e1b9      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099a6:	e1b6      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80099a8:	4b68      	ldr	r3, [pc, #416]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b4:	d102      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80099b6:	4b67      	ldr	r3, [pc, #412]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80099b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ba:	e1ac      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099bc:	2300      	movs	r3, #0
 80099be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099c0:	e1a9      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80099c2:	4b62      	ldr	r3, [pc, #392]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099ce:	d102      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80099d0:	4b61      	ldr	r3, [pc, #388]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80099d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099d4:	e19f      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099da:	e19c      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099e0:	e199      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80099e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e6:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80099ea:	430b      	orrs	r3, r1
 80099ec:	d173      	bne.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80099ee:	4b57      	ldr	r3, [pc, #348]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80099f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80099fe:	d02f      	beq.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8009a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a06:	d863      	bhi.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8009a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a14:	d012      	beq.n	8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8009a16:	e05b      	b.n	8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a18:	4b4c      	ldr	r3, [pc, #304]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a24:	d107      	bne.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a26:	f107 0318 	add.w	r3, r7, #24
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 f996 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a34:	e16f      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a3a:	e16c      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009a3c:	4b43      	ldr	r3, [pc, #268]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a48:	d107      	bne.n	8009a5a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a4a:	f107 030c 	add.w	r3, r7, #12
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f000 fad8 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a58:	e15d      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009a5e:	e15a      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a60:	4b3a      	ldr	r3, [pc, #232]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a6a:	4b38      	ldr	r3, [pc, #224]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0304 	and.w	r3, r3, #4
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d10c      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8009a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d109      	bne.n	8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a7c:	4b33      	ldr	r3, [pc, #204]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	08db      	lsrs	r3, r3, #3
 8009a82:	f003 0303 	and.w	r3, r3, #3
 8009a86:	4a32      	ldr	r2, [pc, #200]	; (8009b50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009a88:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a8e:	e01e      	b.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a90:	4b2e      	ldr	r3, [pc, #184]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a9c:	d106      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aa4:	d102      	bne.n	8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009aa6:	4b2b      	ldr	r3, [pc, #172]	; (8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aaa:	e010      	b.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aac:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ab8:	d106      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8009aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009abc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ac0:	d102      	bne.n	8009ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ac2:	4b25      	ldr	r3, [pc, #148]	; (8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8009ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac6:	e002      	b.n	8009ace <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009acc:	e123      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ace:	e122      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ad4:	e11f      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ada:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009ade:	430b      	orrs	r3, r1
 8009ae0:	d13c      	bne.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009ae2:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009aea:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d004      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009af8:	d012      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8009afa:	e023      	b.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fbcc 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e0fd      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b1e:	e0fa      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b20:	4b0a      	ldr	r3, [pc, #40]	; (8009b4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b2c:	d107      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b2e:	f107 0318 	add.w	r3, r7, #24
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 f912 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b3c:	e0eb      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b42:	e0e8      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b48:	e0e5      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009b4a:	bf00      	nop
 8009b4c:	58024400 	.word	0x58024400
 8009b50:	03d09000 	.word	0x03d09000
 8009b54:	003d0900 	.word	0x003d0900
 8009b58:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b60:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009b64:	430b      	orrs	r3, r1
 8009b66:	f040 8085 	bne.w	8009c74 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009b6a:	4b6d      	ldr	r3, [pc, #436]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b72:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b7a:	d06b      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b82:	d874      	bhi.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b8a:	d056      	beq.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b92:	d86c      	bhi.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b9a:	d03b      	beq.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ba2:	d864      	bhi.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009baa:	d021      	beq.n	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bb2:	d85c      	bhi.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d004      	beq.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8009bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009bc0:	d004      	beq.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8009bc2:	e054      	b.n	8009c6e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009bc4:	f000 f8b4 	bl	8009d30 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bc8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009bca:	e0a4      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009bcc:	4b54      	ldr	r3, [pc, #336]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bd8:	d107      	bne.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bda:	f107 0318 	add.w	r3, r7, #24
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 f8bc 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009be8:	e095      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009bea:	2300      	movs	r3, #0
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bee:	e092      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009bf0:	4b4b      	ldr	r3, [pc, #300]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009bfc:	d107      	bne.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bfe:	f107 030c 	add.w	r3, r7, #12
 8009c02:	4618      	mov	r0, r3
 8009c04:	f000 f9fe 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c0c:	e083      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c12:	e080      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009c14:	4b42      	ldr	r3, [pc, #264]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f003 0304 	and.w	r3, r3, #4
 8009c1c:	2b04      	cmp	r3, #4
 8009c1e:	d109      	bne.n	8009c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c20:	4b3f      	ldr	r3, [pc, #252]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	08db      	lsrs	r3, r3, #3
 8009c26:	f003 0303 	and.w	r3, r3, #3
 8009c2a:	4a3e      	ldr	r2, [pc, #248]	; (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c32:	e070      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c38:	e06d      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009c3a:	4b39      	ldr	r3, [pc, #228]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c46:	d102      	bne.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009c48:	4b37      	ldr	r3, [pc, #220]	; (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c4c:	e063      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c52:	e060      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c54:	4b32      	ldr	r3, [pc, #200]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c60:	d102      	bne.n	8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8009c62:	4b32      	ldr	r3, [pc, #200]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009c64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c66:	e056      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c6c:	e053      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c72:	e050      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c78:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	d148      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009c80:	4b27      	ldr	r3, [pc, #156]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c90:	d02a      	beq.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8009c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c98:	d838      	bhi.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ca6:	d00d      	beq.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009ca8:	e030      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009caa:	4b1d      	ldr	r3, [pc, #116]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cb6:	d102      	bne.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8009cb8:	4b1c      	ldr	r3, [pc, #112]	; (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8009cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cbc:	e02b      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009cc2:	e028      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cc4:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ccc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cd0:	d107      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fae8 	bl	800a2ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce0:	e019      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ce6:	e016      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ce8:	4b0d      	ldr	r3, [pc, #52]	; (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cf0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009cf4:	d107      	bne.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf6:	f107 0318 	add.w	r3, r7, #24
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f82e 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d04:	e007      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d0a:	e004      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d10:	e001      	b.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3740      	adds	r7, #64	; 0x40
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	58024400 	.word	0x58024400
 8009d24:	03d09000 	.word	0x03d09000
 8009d28:	003d0900 	.word	0x003d0900
 8009d2c:	02faf080 	.word	0x02faf080

08009d30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009d34:	f7fe f92e 	bl	8007f94 <HAL_RCC_GetHCLKFreq>
 8009d38:	4602      	mov	r2, r0
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	091b      	lsrs	r3, r3, #4
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	4904      	ldr	r1, [pc, #16]	; (8009d58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009d46:	5ccb      	ldrb	r3, [r1, r3]
 8009d48:	f003 031f 	and.w	r3, r3, #31
 8009d4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	bd80      	pop	{r7, pc}
 8009d54:	58024400 	.word	0x58024400
 8009d58:	0800d9f8 	.word	0x0800d9f8

08009d5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b089      	sub	sp, #36	; 0x24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d64:	4ba1      	ldr	r3, [pc, #644]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d68:	f003 0303 	and.w	r3, r3, #3
 8009d6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009d6e:	4b9f      	ldr	r3, [pc, #636]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d72:	0b1b      	lsrs	r3, r3, #12
 8009d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009d7a:	4b9c      	ldr	r3, [pc, #624]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7e:	091b      	lsrs	r3, r3, #4
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009d86:	4b99      	ldr	r3, [pc, #612]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8a:	08db      	lsrs	r3, r3, #3
 8009d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	fb02 f303 	mul.w	r3, r2, r3
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 8111 	beq.w	8009fcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009daa:	69bb      	ldr	r3, [r7, #24]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	f000 8083 	beq.w	8009eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	f200 80a1 	bhi.w	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d056      	beq.n	8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009dc6:	e099      	b.n	8009efc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dc8:	4b88      	ldr	r3, [pc, #544]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f003 0320 	and.w	r3, r3, #32
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d02d      	beq.n	8009e30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009dd4:	4b85      	ldr	r3, [pc, #532]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	08db      	lsrs	r3, r3, #3
 8009dda:	f003 0303 	and.w	r3, r3, #3
 8009dde:	4a84      	ldr	r2, [pc, #528]	; (8009ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009de0:	fa22 f303 	lsr.w	r3, r2, r3
 8009de4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	ee07 3a90 	vmov	s15, r3
 8009dec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfe:	4b7b      	ldr	r3, [pc, #492]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009e2e:	e087      	b.n	8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	ee07 3a90 	vmov	s15, r3
 8009e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e42:	4b6a      	ldr	r3, [pc, #424]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e72:	e065      	b.n	8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	ee07 3a90 	vmov	s15, r3
 8009e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e86:	4b59      	ldr	r3, [pc, #356]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eb6:	e043      	b.n	8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	ee07 3a90 	vmov	s15, r3
 8009ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ec2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a000 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eca:	4b48      	ldr	r3, [pc, #288]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ed2:	ee07 3a90 	vmov	s15, r3
 8009ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ede:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009efa:	e021      	b.n	8009f40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	ee07 3a90 	vmov	s15, r3
 8009f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ffc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0e:	4b37      	ldr	r3, [pc, #220]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f16:	ee07 3a90 	vmov	s15, r3
 8009f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009f40:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f44:	0a5b      	lsrs	r3, r3, #9
 8009f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f66:	ee17 2a90 	vmov	r2, s15
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009f6e:	4b1f      	ldr	r3, [pc, #124]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f72:	0c1b      	lsrs	r3, r3, #16
 8009f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f78:	ee07 3a90 	vmov	s15, r3
 8009f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f88:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f94:	ee17 2a90 	vmov	r2, s15
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009f9c:	4b13      	ldr	r3, [pc, #76]	; (8009fec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa0:	0e1b      	lsrs	r3, r3, #24
 8009fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fa6:	ee07 3a90 	vmov	s15, r3
 8009faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009fc2:	ee17 2a90 	vmov	r2, s15
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009fca:	e008      	b.n	8009fde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	609a      	str	r2, [r3, #8]
}
 8009fde:	bf00      	nop
 8009fe0:	3724      	adds	r7, #36	; 0x24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	58024400 	.word	0x58024400
 8009ff0:	03d09000 	.word	0x03d09000
 8009ff4:	46000000 	.word	0x46000000
 8009ff8:	4c742400 	.word	0x4c742400
 8009ffc:	4a742400 	.word	0x4a742400
 800a000:	4c3ebc20 	.word	0x4c3ebc20

0800a004 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a004:	b480      	push	{r7}
 800a006:	b089      	sub	sp, #36	; 0x24
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a00c:	4ba1      	ldr	r3, [pc, #644]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a00e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a010:	f003 0303 	and.w	r3, r3, #3
 800a014:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a016:	4b9f      	ldr	r3, [pc, #636]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01a:	0d1b      	lsrs	r3, r3, #20
 800a01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a020:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a022:	4b9c      	ldr	r3, [pc, #624]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a026:	0a1b      	lsrs	r3, r3, #8
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a02e:	4b99      	ldr	r3, [pc, #612]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a032:	08db      	lsrs	r3, r3, #3
 800a034:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	fb02 f303 	mul.w	r3, r2, r3
 800a03e:	ee07 3a90 	vmov	s15, r3
 800a042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a046:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8111 	beq.w	800a274 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	2b02      	cmp	r3, #2
 800a056:	f000 8083 	beq.w	800a160 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	f200 80a1 	bhi.w	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d003      	beq.n	800a070 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d056      	beq.n	800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a06e:	e099      	b.n	800a1a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a070:	4b88      	ldr	r3, [pc, #544]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0320 	and.w	r3, r3, #32
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02d      	beq.n	800a0d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a07c:	4b85      	ldr	r3, [pc, #532]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	08db      	lsrs	r3, r3, #3
 800a082:	f003 0303 	and.w	r3, r3, #3
 800a086:	4a84      	ldr	r2, [pc, #528]	; (800a298 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a088:	fa22 f303 	lsr.w	r3, r2, r3
 800a08c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	ee07 3a90 	vmov	s15, r3
 800a094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0a6:	4b7b      	ldr	r3, [pc, #492]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0ae:	ee07 3a90 	vmov	s15, r3
 800a0b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a0d6:	e087      	b.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	ee07 3a90 	vmov	s15, r3
 800a0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a2a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a0e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ea:	4b6a      	ldr	r3, [pc, #424]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f2:	ee07 3a90 	vmov	s15, r3
 800a0f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a10a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a10e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a116:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a11a:	e065      	b.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	ee07 3a90 	vmov	s15, r3
 800a122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a126:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a12a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12e:	4b59      	ldr	r3, [pc, #356]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a136:	ee07 3a90 	vmov	s15, r3
 800a13a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a13e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a142:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a14a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a14e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a15a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a15e:	e043      	b.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	ee07 3a90 	vmov	s15, r3
 800a166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a16a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a2a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a172:	4b48      	ldr	r3, [pc, #288]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17a:	ee07 3a90 	vmov	s15, r3
 800a17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a182:	ed97 6a03 	vldr	s12, [r7, #12]
 800a186:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a19e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1a2:	e021      	b.n	800a1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a1b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a1b6:	4b37      	ldr	r3, [pc, #220]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1be:	ee07 3a90 	vmov	s15, r3
 800a1c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a1c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a1ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a29c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a1ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a1d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a1da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a1de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a1e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a1e8:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ec:	0a5b      	lsrs	r3, r3, #9
 800a1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a202:	edd7 6a07 	vldr	s13, [r7, #28]
 800a206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a20a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a20e:	ee17 2a90 	vmov	r2, s15
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a216:	4b1f      	ldr	r3, [pc, #124]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	0c1b      	lsrs	r3, r3, #16
 800a21c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a220:	ee07 3a90 	vmov	s15, r3
 800a224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a22c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a230:	edd7 6a07 	vldr	s13, [r7, #28]
 800a234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a23c:	ee17 2a90 	vmov	r2, s15
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a244:	4b13      	ldr	r3, [pc, #76]	; (800a294 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a248:	0e1b      	lsrs	r3, r3, #24
 800a24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24e:	ee07 3a90 	vmov	s15, r3
 800a252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a25a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a25e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a26a:	ee17 2a90 	vmov	r2, s15
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a272:	e008      	b.n	800a286 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	609a      	str	r2, [r3, #8]
}
 800a286:	bf00      	nop
 800a288:	3724      	adds	r7, #36	; 0x24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	58024400 	.word	0x58024400
 800a298:	03d09000 	.word	0x03d09000
 800a29c:	46000000 	.word	0x46000000
 800a2a0:	4c742400 	.word	0x4c742400
 800a2a4:	4a742400 	.word	0x4a742400
 800a2a8:	4c3ebc20 	.word	0x4c3ebc20

0800a2ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b089      	sub	sp, #36	; 0x24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a2b4:	4ba0      	ldr	r3, [pc, #640]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a2be:	4b9e      	ldr	r3, [pc, #632]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	091b      	lsrs	r3, r3, #4
 800a2c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a2c8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a2ca:	4b9b      	ldr	r3, [pc, #620]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	f003 0301 	and.w	r3, r3, #1
 800a2d2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a2d4:	4b98      	ldr	r3, [pc, #608]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2d8:	08db      	lsrs	r3, r3, #3
 800a2da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	fb02 f303 	mul.w	r3, r2, r3
 800a2e4:	ee07 3a90 	vmov	s15, r3
 800a2e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ec:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 8111 	beq.w	800a51a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	f000 8083 	beq.w	800a406 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	2b02      	cmp	r3, #2
 800a304:	f200 80a1 	bhi.w	800a44a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d003      	beq.n	800a316 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d056      	beq.n	800a3c2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a314:	e099      	b.n	800a44a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a316:	4b88      	ldr	r3, [pc, #544]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d02d      	beq.n	800a37e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a322:	4b85      	ldr	r3, [pc, #532]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	08db      	lsrs	r3, r3, #3
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	4a83      	ldr	r2, [pc, #524]	; (800a53c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	ee07 3a90 	vmov	s15, r3
 800a33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a348:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a34c:	4b7a      	ldr	r3, [pc, #488]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a354:	ee07 3a90 	vmov	s15, r3
 800a358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a35c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a360:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a540 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a364:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a368:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a36c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a370:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a374:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a378:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a37c:	e087      	b.n	800a48e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	ee07 3a90 	vmov	s15, r3
 800a384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a388:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a38c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a390:	4b69      	ldr	r3, [pc, #420]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a398:	ee07 3a90 	vmov	s15, r3
 800a39c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a540 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c0:	e065      	b.n	800a48e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	ee07 3a90 	vmov	s15, r3
 800a3c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3cc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a548 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a3d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3d4:	4b58      	ldr	r3, [pc, #352]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3dc:	ee07 3a90 	vmov	s15, r3
 800a3e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3e8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a540 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a3f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a400:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a404:	e043      	b.n	800a48e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	ee07 3a90 	vmov	s15, r3
 800a40c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a410:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a54c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a418:	4b47      	ldr	r3, [pc, #284]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a420:	ee07 3a90 	vmov	s15, r3
 800a424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a428:	ed97 6a03 	vldr	s12, [r7, #12]
 800a42c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a540 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a430:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a434:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a438:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a43c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a440:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a444:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a448:	e021      	b.n	800a48e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	ee07 3a90 	vmov	s15, r3
 800a450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a454:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a544 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a458:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a45c:	4b36      	ldr	r3, [pc, #216]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a464:	ee07 3a90 	vmov	s15, r3
 800a468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a46c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a470:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a540 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a474:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a478:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a480:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a488:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a48c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a48e:	4b2a      	ldr	r3, [pc, #168]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a492:	0a5b      	lsrs	r3, r3, #9
 800a494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4b4:	ee17 2a90 	vmov	r2, s15
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a4bc:	4b1e      	ldr	r3, [pc, #120]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	0c1b      	lsrs	r3, r3, #16
 800a4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4c6:	ee07 3a90 	vmov	s15, r3
 800a4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a4d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a4d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a4da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a4e2:	ee17 2a90 	vmov	r2, s15
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a4ea:	4b13      	ldr	r3, [pc, #76]	; (800a538 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ee:	0e1b      	lsrs	r3, r3, #24
 800a4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a500:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a504:	edd7 6a07 	vldr	s13, [r7, #28]
 800a508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a50c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a510:	ee17 2a90 	vmov	r2, s15
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a518:	e008      	b.n	800a52c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	609a      	str	r2, [r3, #8]
}
 800a52c:	bf00      	nop
 800a52e:	3724      	adds	r7, #36	; 0x24
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	58024400 	.word	0x58024400
 800a53c:	03d09000 	.word	0x03d09000
 800a540:	46000000 	.word	0x46000000
 800a544:	4c742400 	.word	0x4c742400
 800a548:	4a742400 	.word	0x4a742400
 800a54c:	4c3ebc20 	.word	0x4c3ebc20

0800a550 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a55e:	4b53      	ldr	r3, [pc, #332]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b03      	cmp	r3, #3
 800a568:	d101      	bne.n	800a56e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e099      	b.n	800a6a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a56e:	4b4f      	ldr	r3, [pc, #316]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	4a4e      	ldr	r2, [pc, #312]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a574:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a578:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a57a:	f7f8 f831 	bl	80025e0 <HAL_GetTick>
 800a57e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a580:	e008      	b.n	800a594 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a582:	f7f8 f82d 	bl	80025e0 <HAL_GetTick>
 800a586:	4602      	mov	r2, r0
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	1ad3      	subs	r3, r2, r3
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d901      	bls.n	800a594 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e086      	b.n	800a6a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a594:	4b45      	ldr	r3, [pc, #276]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1f0      	bne.n	800a582 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a5a0:	4b42      	ldr	r3, [pc, #264]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	031b      	lsls	r3, r3, #12
 800a5ae:	493f      	ldr	r1, [pc, #252]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	628b      	str	r3, [r1, #40]	; 0x28
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	025b      	lsls	r3, r3, #9
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	431a      	orrs	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	041b      	lsls	r3, r3, #16
 800a5d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a5d6:	431a      	orrs	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	061b      	lsls	r3, r3, #24
 800a5e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a5e4:	4931      	ldr	r1, [pc, #196]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a5ea:	4b30      	ldr	r3, [pc, #192]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	492d      	ldr	r1, [pc, #180]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a5fc:	4b2b      	ldr	r3, [pc, #172]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	f023 0220 	bic.w	r2, r3, #32
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	699b      	ldr	r3, [r3, #24]
 800a608:	4928      	ldr	r1, [pc, #160]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a60e:	4b27      	ldr	r3, [pc, #156]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a612:	4a26      	ldr	r2, [pc, #152]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a614:	f023 0310 	bic.w	r3, r3, #16
 800a618:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a61a:	4b24      	ldr	r3, [pc, #144]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a61c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a61e:	4b24      	ldr	r3, [pc, #144]	; (800a6b0 <RCCEx_PLL2_Config+0x160>)
 800a620:	4013      	ands	r3, r2
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	69d2      	ldr	r2, [r2, #28]
 800a626:	00d2      	lsls	r2, r2, #3
 800a628:	4920      	ldr	r1, [pc, #128]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a62e:	4b1f      	ldr	r3, [pc, #124]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	4a1e      	ldr	r2, [pc, #120]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a634:	f043 0310 	orr.w	r3, r3, #16
 800a638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d106      	bne.n	800a64e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a640:	4b1a      	ldr	r3, [pc, #104]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a64a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a64c:	e00f      	b.n	800a66e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d106      	bne.n	800a662 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a654:	4b15      	ldr	r3, [pc, #84]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a658:	4a14      	ldr	r2, [pc, #80]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a65a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a660:	e005      	b.n	800a66e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a662:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	4a11      	ldr	r2, [pc, #68]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a66c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a66e:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a0e      	ldr	r2, [pc, #56]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a67a:	f7f7 ffb1 	bl	80025e0 <HAL_GetTick>
 800a67e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a680:	e008      	b.n	800a694 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a682:	f7f7 ffad 	bl	80025e0 <HAL_GetTick>
 800a686:	4602      	mov	r2, r0
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	1ad3      	subs	r3, r2, r3
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d901      	bls.n	800a694 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e006      	b.n	800a6a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <RCCEx_PLL2_Config+0x15c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d0f0      	beq.n	800a682 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	58024400 	.word	0x58024400
 800a6b0:	ffff0007 	.word	0xffff0007

0800a6b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b084      	sub	sp, #16
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6c2:	4b53      	ldr	r3, [pc, #332]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d101      	bne.n	800a6d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e099      	b.n	800a806 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a6d2:	4b4f      	ldr	r3, [pc, #316]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a4e      	ldr	r2, [pc, #312]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a6d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6de:	f7f7 ff7f 	bl	80025e0 <HAL_GetTick>
 800a6e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6e4:	e008      	b.n	800a6f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a6e6:	f7f7 ff7b 	bl	80025e0 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d901      	bls.n	800a6f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6f4:	2303      	movs	r3, #3
 800a6f6:	e086      	b.n	800a806 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a6f8:	4b45      	ldr	r3, [pc, #276]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d1f0      	bne.n	800a6e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a704:	4b42      	ldr	r3, [pc, #264]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a708:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	051b      	lsls	r3, r3, #20
 800a712:	493f      	ldr	r1, [pc, #252]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a714:	4313      	orrs	r3, r2
 800a716:	628b      	str	r3, [r1, #40]	; 0x28
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	3b01      	subs	r3, #1
 800a71e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	3b01      	subs	r3, #1
 800a728:	025b      	lsls	r3, r3, #9
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	431a      	orrs	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	68db      	ldr	r3, [r3, #12]
 800a732:	3b01      	subs	r3, #1
 800a734:	041b      	lsls	r3, r3, #16
 800a736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a73a:	431a      	orrs	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	691b      	ldr	r3, [r3, #16]
 800a740:	3b01      	subs	r3, #1
 800a742:	061b      	lsls	r3, r3, #24
 800a744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a748:	4931      	ldr	r1, [pc, #196]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a74a:	4313      	orrs	r3, r2
 800a74c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a74e:	4b30      	ldr	r3, [pc, #192]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	492d      	ldr	r1, [pc, #180]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a760:	4b2b      	ldr	r3, [pc, #172]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	699b      	ldr	r3, [r3, #24]
 800a76c:	4928      	ldr	r1, [pc, #160]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a76e:	4313      	orrs	r3, r2
 800a770:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a772:	4b27      	ldr	r3, [pc, #156]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a776:	4a26      	ldr	r2, [pc, #152]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a77c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a77e:	4b24      	ldr	r3, [pc, #144]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a782:	4b24      	ldr	r3, [pc, #144]	; (800a814 <RCCEx_PLL3_Config+0x160>)
 800a784:	4013      	ands	r3, r2
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	69d2      	ldr	r2, [r2, #28]
 800a78a:	00d2      	lsls	r2, r2, #3
 800a78c:	4920      	ldr	r1, [pc, #128]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a78e:	4313      	orrs	r3, r2
 800a790:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a792:	4b1f      	ldr	r3, [pc, #124]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a796:	4a1e      	ldr	r2, [pc, #120]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a79c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d106      	bne.n	800a7b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a7a4:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	4a19      	ldr	r2, [pc, #100]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7b0:	e00f      	b.n	800a7d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d106      	bne.n	800a7c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a7b8:	4b15      	ldr	r3, [pc, #84]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	4a14      	ldr	r2, [pc, #80]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a7c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a7c4:	e005      	b.n	800a7d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a7c6:	4b12      	ldr	r3, [pc, #72]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	4a11      	ldr	r2, [pc, #68]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a7d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a0e      	ldr	r2, [pc, #56]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7de:	f7f7 feff 	bl	80025e0 <HAL_GetTick>
 800a7e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7e4:	e008      	b.n	800a7f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a7e6:	f7f7 fefb 	bl	80025e0 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e006      	b.n	800a806 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <RCCEx_PLL3_Config+0x15c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d0f0      	beq.n	800a7e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
}
 800a806:	4618      	mov	r0, r3
 800a808:	3710      	adds	r7, #16
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	58024400 	.word	0x58024400
 800a814:	ffff0007 	.word	0xffff0007

0800a818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d101      	bne.n	800a82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e10f      	b.n	800aa4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a87      	ldr	r2, [pc, #540]	; (800aa54 <HAL_SPI_Init+0x23c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00f      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a86      	ldr	r2, [pc, #536]	; (800aa58 <HAL_SPI_Init+0x240>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00a      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a84      	ldr	r2, [pc, #528]	; (800aa5c <HAL_SPI_Init+0x244>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d005      	beq.n	800a85a <HAL_SPI_Init+0x42>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	2b0f      	cmp	r3, #15
 800a854:	d901      	bls.n	800a85a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e0f7      	b.n	800aa4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f900 	bl	800aa60 <SPI_GetPacketSize>
 800a860:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a7b      	ldr	r2, [pc, #492]	; (800aa54 <HAL_SPI_Init+0x23c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d00c      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a79      	ldr	r2, [pc, #484]	; (800aa58 <HAL_SPI_Init+0x240>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d007      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a78      	ldr	r2, [pc, #480]	; (800aa5c <HAL_SPI_Init+0x244>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d002      	beq.n	800a886 <HAL_SPI_Init+0x6e>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2b08      	cmp	r3, #8
 800a884:	d811      	bhi.n	800a8aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a88a:	4a72      	ldr	r2, [pc, #456]	; (800aa54 <HAL_SPI_Init+0x23c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d009      	beq.n	800a8a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a70      	ldr	r2, [pc, #448]	; (800aa58 <HAL_SPI_Init+0x240>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d004      	beq.n	800a8a4 <HAL_SPI_Init+0x8c>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a6f      	ldr	r2, [pc, #444]	; (800aa5c <HAL_SPI_Init+0x244>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d104      	bne.n	800a8ae <HAL_SPI_Init+0x96>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b10      	cmp	r3, #16
 800a8a8:	d901      	bls.n	800a8ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e0cd      	b.n	800aa4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d106      	bne.n	800a8c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f7f7 f8dc 	bl	8001a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f022 0201 	bic.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a8ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8f4:	d119      	bne.n	800a92a <HAL_SPI_Init+0x112>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a8fe:	d103      	bne.n	800a908 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a904:	2b00      	cmp	r3, #0
 800a906:	d008      	beq.n	800a91a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a918:	d107      	bne.n	800a92a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a928:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00f      	beq.n	800a956 <HAL_SPI_Init+0x13e>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	2b06      	cmp	r3, #6
 800a93c:	d90b      	bls.n	800a956 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	430a      	orrs	r2, r1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e007      	b.n	800a966 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a964:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	69da      	ldr	r2, [r3, #28]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96e:	431a      	orrs	r2, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	431a      	orrs	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a978:	ea42 0103 	orr.w	r1, r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	430a      	orrs	r2, r1
 800a986:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a990:	431a      	orrs	r2, r3
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	431a      	orrs	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	431a      	orrs	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6a1b      	ldr	r3, [r3, #32]
 800a9ae:	431a      	orrs	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	431a      	orrs	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ba:	431a      	orrs	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	689b      	ldr	r3, [r3, #8]
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c6:	ea42 0103 	orr.w	r1, r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	430a      	orrs	r2, r1
 800a9d4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d113      	bne.n	800aa06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9f0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0201 	bic.w	r2, r2, #1
 800aa14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	40013000 	.word	0x40013000
 800aa58:	40003800 	.word	0x40003800
 800aa5c:	40003c00 	.word	0x40003c00

0800aa60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6c:	095b      	lsrs	r3, r3, #5
 800aa6e:	3301      	adds	r3, #1
 800aa70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	3301      	adds	r3, #1
 800aa78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	08db      	lsrs	r3, r3, #3
 800aa80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	fb02 f303 	mul.w	r3, r2, r3
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b082      	sub	sp, #8
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e049      	b.n	800ab3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d106      	bne.n	800aac2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f7f7 f89b 	bl	8001bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2202      	movs	r2, #2
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f000 fdab 	bl	800b630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	60f8      	str	r0, [r7, #12]
 800ab4c:	60b9      	str	r1, [r7, #8]
 800ab4e:	607a      	str	r2, [r7, #4]
 800ab50:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d109      	bne.n	800ab70 <HAL_TIM_PWM_Start_DMA+0x2c>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	bf0c      	ite	eq
 800ab68:	2301      	moveq	r3, #1
 800ab6a:	2300      	movne	r3, #0
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	e03c      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d109      	bne.n	800ab8a <HAL_TIM_PWM_Start_DMA+0x46>
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	bf0c      	ite	eq
 800ab82:	2301      	moveq	r3, #1
 800ab84:	2300      	movne	r3, #0
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	e02f      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0xa6>
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b08      	cmp	r3, #8
 800ab8e:	d109      	bne.n	800aba4 <HAL_TIM_PWM_Start_DMA+0x60>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	bf0c      	ite	eq
 800ab9c:	2301      	moveq	r3, #1
 800ab9e:	2300      	movne	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	e022      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0xa6>
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2b0c      	cmp	r3, #12
 800aba8:	d109      	bne.n	800abbe <HAL_TIM_PWM_Start_DMA+0x7a>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	bf0c      	ite	eq
 800abb6:	2301      	moveq	r3, #1
 800abb8:	2300      	movne	r3, #0
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	e015      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0xa6>
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b10      	cmp	r3, #16
 800abc2:	d109      	bne.n	800abd8 <HAL_TIM_PWM_Start_DMA+0x94>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800abca:	b2db      	uxtb	r3, r3
 800abcc:	2b02      	cmp	r3, #2
 800abce:	bf0c      	ite	eq
 800abd0:	2301      	moveq	r3, #1
 800abd2:	2300      	movne	r3, #0
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	e008      	b.n	800abea <HAL_TIM_PWM_Start_DMA+0xa6>
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	bf0c      	ite	eq
 800abe4:	2301      	moveq	r3, #1
 800abe6:	2300      	movne	r3, #0
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800abee:	2302      	movs	r3, #2
 800abf0:	e1ba      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d109      	bne.n	800ac0c <HAL_TIM_PWM_Start_DMA+0xc8>
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	bf0c      	ite	eq
 800ac04:	2301      	moveq	r3, #1
 800ac06:	2300      	movne	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	e03c      	b.n	800ac86 <HAL_TIM_PWM_Start_DMA+0x142>
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d109      	bne.n	800ac26 <HAL_TIM_PWM_Start_DMA+0xe2>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	2300      	movne	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	e02f      	b.n	800ac86 <HAL_TIM_PWM_Start_DMA+0x142>
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d109      	bne.n	800ac40 <HAL_TIM_PWM_Start_DMA+0xfc>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	bf0c      	ite	eq
 800ac38:	2301      	moveq	r3, #1
 800ac3a:	2300      	movne	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	e022      	b.n	800ac86 <HAL_TIM_PWM_Start_DMA+0x142>
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	2b0c      	cmp	r3, #12
 800ac44:	d109      	bne.n	800ac5a <HAL_TIM_PWM_Start_DMA+0x116>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	bf0c      	ite	eq
 800ac52:	2301      	moveq	r3, #1
 800ac54:	2300      	movne	r3, #0
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	e015      	b.n	800ac86 <HAL_TIM_PWM_Start_DMA+0x142>
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	2b10      	cmp	r3, #16
 800ac5e:	d109      	bne.n	800ac74 <HAL_TIM_PWM_Start_DMA+0x130>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	bf0c      	ite	eq
 800ac6c:	2301      	moveq	r3, #1
 800ac6e:	2300      	movne	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	e008      	b.n	800ac86 <HAL_TIM_PWM_Start_DMA+0x142>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	bf0c      	ite	eq
 800ac80:	2301      	moveq	r3, #1
 800ac82:	2300      	movne	r3, #0
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d034      	beq.n	800acf4 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d002      	beq.n	800ac96 <HAL_TIM_PWM_Start_DMA+0x152>
 800ac90:	887b      	ldrh	r3, [r7, #2]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e166      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d104      	bne.n	800acaa <HAL_TIM_PWM_Start_DMA+0x166>
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2202      	movs	r2, #2
 800aca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aca8:	e026      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b04      	cmp	r3, #4
 800acae:	d104      	bne.n	800acba <HAL_TIM_PWM_Start_DMA+0x176>
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800acb8:	e01e      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b08      	cmp	r3, #8
 800acbe:	d104      	bne.n	800acca <HAL_TIM_PWM_Start_DMA+0x186>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800acc8:	e016      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b0c      	cmp	r3, #12
 800acce:	d104      	bne.n	800acda <HAL_TIM_PWM_Start_DMA+0x196>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800acd8:	e00e      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b10      	cmp	r3, #16
 800acde:	d104      	bne.n	800acea <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ace8:	e006      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2202      	movs	r2, #2
 800acee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800acf2:	e001      	b.n	800acf8 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	e137      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b0c      	cmp	r3, #12
 800acfc:	f200 80ae 	bhi.w	800ae5c <HAL_TIM_PWM_Start_DMA+0x318>
 800ad00:	a201      	add	r2, pc, #4	; (adr r2, 800ad08 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ad02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad06:	bf00      	nop
 800ad08:	0800ad3d 	.word	0x0800ad3d
 800ad0c:	0800ae5d 	.word	0x0800ae5d
 800ad10:	0800ae5d 	.word	0x0800ae5d
 800ad14:	0800ae5d 	.word	0x0800ae5d
 800ad18:	0800ad85 	.word	0x0800ad85
 800ad1c:	0800ae5d 	.word	0x0800ae5d
 800ad20:	0800ae5d 	.word	0x0800ae5d
 800ad24:	0800ae5d 	.word	0x0800ae5d
 800ad28:	0800adcd 	.word	0x0800adcd
 800ad2c:	0800ae5d 	.word	0x0800ae5d
 800ad30:	0800ae5d 	.word	0x0800ae5d
 800ad34:	0800ae5d 	.word	0x0800ae5d
 800ad38:	0800ae15 	.word	0x0800ae15
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad40:	4a8b      	ldr	r2, [pc, #556]	; (800af70 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ad42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad48:	4a8a      	ldr	r2, [pc, #552]	; (800af74 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ad4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad50:	4a89      	ldr	r2, [pc, #548]	; (800af78 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ad52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3334      	adds	r3, #52	; 0x34
 800ad60:	461a      	mov	r2, r3
 800ad62:	887b      	ldrh	r3, [r7, #2]
 800ad64:	f7f9 fc46 	bl	80045f4 <HAL_DMA_Start_IT>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e0fa      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68da      	ldr	r2, [r3, #12]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad80:	60da      	str	r2, [r3, #12]
      break;
 800ad82:	e06e      	b.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad88:	4a79      	ldr	r2, [pc, #484]	; (800af70 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ad8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad90:	4a78      	ldr	r2, [pc, #480]	; (800af74 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ad92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad98:	4a77      	ldr	r2, [pc, #476]	; (800af78 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ad9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3338      	adds	r3, #56	; 0x38
 800ada8:	461a      	mov	r2, r3
 800adaa:	887b      	ldrh	r3, [r7, #2]
 800adac:	f7f9 fc22 	bl	80045f4 <HAL_DMA_Start_IT>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e0d6      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800adc8:	60da      	str	r2, [r3, #12]
      break;
 800adca:	e04a      	b.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add0:	4a67      	ldr	r2, [pc, #412]	; (800af70 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800add2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	4a66      	ldr	r2, [pc, #408]	; (800af74 <HAL_TIM_PWM_Start_DMA+0x430>)
 800adda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade0:	4a65      	ldr	r2, [pc, #404]	; (800af78 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ade2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	333c      	adds	r3, #60	; 0x3c
 800adf0:	461a      	mov	r2, r3
 800adf2:	887b      	ldrh	r3, [r7, #2]
 800adf4:	f7f9 fbfe 	bl	80045f4 <HAL_DMA_Start_IT>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d001      	beq.n	800ae02 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e0b2      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae10:	60da      	str	r2, [r3, #12]
      break;
 800ae12:	e026      	b.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae18:	4a55      	ldr	r2, [pc, #340]	; (800af70 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ae1a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae20:	4a54      	ldr	r2, [pc, #336]	; (800af74 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ae22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae28:	4a53      	ldr	r2, [pc, #332]	; (800af78 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ae2a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	3340      	adds	r3, #64	; 0x40
 800ae38:	461a      	mov	r2, r3
 800ae3a:	887b      	ldrh	r3, [r7, #2]
 800ae3c:	f7f9 fbda 	bl	80045f4 <HAL_DMA_Start_IT>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e08e      	b.n	800af68 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ae58:	60da      	str	r2, [r3, #12]
      break;
 800ae5a:	e002      	b.n	800ae62 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	75fb      	strb	r3, [r7, #23]
      break;
 800ae60:	bf00      	nop
  }

  if (status == HAL_OK)
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d17e      	bne.n	800af66 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2201      	movs	r2, #1
 800ae6e:	68b9      	ldr	r1, [r7, #8]
 800ae70:	4618      	mov	r0, r3
 800ae72:	f000 ff59 	bl	800bd28 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a40      	ldr	r2, [pc, #256]	; (800af7c <HAL_TIM_PWM_Start_DMA+0x438>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d013      	beq.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a3e      	ldr	r2, [pc, #248]	; (800af80 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d00e      	beq.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a3d      	ldr	r2, [pc, #244]	; (800af84 <HAL_TIM_PWM_Start_DMA+0x440>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d009      	beq.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	4a3b      	ldr	r2, [pc, #236]	; (800af88 <HAL_TIM_PWM_Start_DMA+0x444>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d004      	beq.n	800aea8 <HAL_TIM_PWM_Start_DMA+0x364>
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a3a      	ldr	r2, [pc, #232]	; (800af8c <HAL_TIM_PWM_Start_DMA+0x448>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d101      	bne.n	800aeac <HAL_TIM_PWM_Start_DMA+0x368>
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e000      	b.n	800aeae <HAL_TIM_PWM_Start_DMA+0x36a>
 800aeac:	2300      	movs	r3, #0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d007      	beq.n	800aec2 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a2d      	ldr	r2, [pc, #180]	; (800af7c <HAL_TIM_PWM_Start_DMA+0x438>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d02c      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aed4:	d027      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	4a2d      	ldr	r2, [pc, #180]	; (800af90 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800aedc:	4293      	cmp	r3, r2
 800aede:	d022      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a2b      	ldr	r2, [pc, #172]	; (800af94 <HAL_TIM_PWM_Start_DMA+0x450>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d01d      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	4a2a      	ldr	r2, [pc, #168]	; (800af98 <HAL_TIM_PWM_Start_DMA+0x454>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d018      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a21      	ldr	r2, [pc, #132]	; (800af80 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d013      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	4a26      	ldr	r2, [pc, #152]	; (800af9c <HAL_TIM_PWM_Start_DMA+0x458>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d00e      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1d      	ldr	r2, [pc, #116]	; (800af84 <HAL_TIM_PWM_Start_DMA+0x440>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d009      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a22      	ldr	r2, [pc, #136]	; (800afa0 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d004      	beq.n	800af26 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4a20      	ldr	r2, [pc, #128]	; (800afa4 <HAL_TIM_PWM_Start_DMA+0x460>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d115      	bne.n	800af52 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	689a      	ldr	r2, [r3, #8]
 800af2c:	4b1e      	ldr	r3, [pc, #120]	; (800afa8 <HAL_TIM_PWM_Start_DMA+0x464>)
 800af2e:	4013      	ands	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	2b06      	cmp	r3, #6
 800af36:	d015      	beq.n	800af64 <HAL_TIM_PWM_Start_DMA+0x420>
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af3e:	d011      	beq.n	800af64 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f042 0201 	orr.w	r2, r2, #1
 800af4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af50:	e008      	b.n	800af64 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f042 0201 	orr.w	r2, r2, #1
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	e000      	b.n	800af66 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af64:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800af66:	7dfb      	ldrb	r3, [r7, #23]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	0800b51f 	.word	0x0800b51f
 800af74:	0800b5c7 	.word	0x0800b5c7
 800af78:	0800b48d 	.word	0x0800b48d
 800af7c:	40010000 	.word	0x40010000
 800af80:	40010400 	.word	0x40010400
 800af84:	40014000 	.word	0x40014000
 800af88:	40014400 	.word	0x40014400
 800af8c:	40014800 	.word	0x40014800
 800af90:	40000400 	.word	0x40000400
 800af94:	40000800 	.word	0x40000800
 800af98:	40000c00 	.word	0x40000c00
 800af9c:	40001800 	.word	0x40001800
 800afa0:	4000e000 	.word	0x4000e000
 800afa4:	4000e400 	.word	0x4000e400
 800afa8:	00010007 	.word	0x00010007

0800afac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	d122      	bne.n	800b008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d11b      	bne.n	800b008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f06f 0202 	mvn.w	r2, #2
 800afd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2201      	movs	r2, #1
 800afde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	f003 0303 	and.w	r3, r3, #3
 800afea:	2b00      	cmp	r3, #0
 800afec:	d003      	beq.n	800aff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa24 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800aff4:	e005      	b.n	800b002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa16 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7f5 fcbf 	bl	8000980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0304 	and.w	r3, r3, #4
 800b012:	2b04      	cmp	r3, #4
 800b014:	d122      	bne.n	800b05c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	f003 0304 	and.w	r3, r3, #4
 800b020:	2b04      	cmp	r3, #4
 800b022:	d11b      	bne.n	800b05c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f06f 0204 	mvn.w	r2, #4
 800b02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d003      	beq.n	800b04a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 f9fa 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800b048:	e005      	b.n	800b056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f9ec 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7f5 fc95 	bl	8000980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	2b08      	cmp	r3, #8
 800b068:	d122      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	f003 0308 	and.w	r3, r3, #8
 800b074:	2b08      	cmp	r3, #8
 800b076:	d11b      	bne.n	800b0b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f06f 0208 	mvn.w	r2, #8
 800b080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2204      	movs	r2, #4
 800b086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	f003 0303 	and.w	r3, r3, #3
 800b092:	2b00      	cmp	r3, #0
 800b094:	d003      	beq.n	800b09e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f9d0 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800b09c:	e005      	b.n	800b0aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9c2 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7f5 fc6b 	bl	8000980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	f003 0310 	and.w	r3, r3, #16
 800b0ba:	2b10      	cmp	r3, #16
 800b0bc:	d122      	bne.n	800b104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	f003 0310 	and.w	r3, r3, #16
 800b0c8:	2b10      	cmp	r3, #16
 800b0ca:	d11b      	bne.n	800b104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f06f 0210 	mvn.w	r2, #16
 800b0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2208      	movs	r2, #8
 800b0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d003      	beq.n	800b0f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f9a6 	bl	800b43c <HAL_TIM_IC_CaptureCallback>
 800b0f0:	e005      	b.n	800b0fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f998 	bl	800b428 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7f5 fc41 	bl	8000980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f003 0301 	and.w	r3, r3, #1
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10e      	bne.n	800b130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	f003 0301 	and.w	r3, r3, #1
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d107      	bne.n	800b130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f06f 0201 	mvn.w	r2, #1
 800b128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f000 f972 	bl	800b414 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b13a:	2b80      	cmp	r3, #128	; 0x80
 800b13c:	d10e      	bne.n	800b15c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b148:	2b80      	cmp	r3, #128	; 0x80
 800b14a:	d107      	bne.n	800b15c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 feb2 	bl	800bec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	691b      	ldr	r3, [r3, #16]
 800b162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b16a:	d10e      	bne.n	800b18a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b80      	cmp	r3, #128	; 0x80
 800b178:	d107      	bne.n	800b18a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fea5 	bl	800bed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	691b      	ldr	r3, [r3, #16]
 800b190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b194:	2b40      	cmp	r3, #64	; 0x40
 800b196:	d10e      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1a2:	2b40      	cmp	r3, #64	; 0x40
 800b1a4:	d107      	bne.n	800b1b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f957 	bl	800b464 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f003 0320 	and.w	r3, r3, #32
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	d10e      	bne.n	800b1e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	f003 0320 	and.w	r3, r3, #32
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d107      	bne.n	800b1e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f06f 0220 	mvn.w	r2, #32
 800b1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fe65 	bl	800beac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1e2:	bf00      	nop
 800b1e4:	3708      	adds	r7, #8
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
	...

0800b1ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b202:	2b01      	cmp	r3, #1
 800b204:	d101      	bne.n	800b20a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b206:	2302      	movs	r3, #2
 800b208:	e0ff      	b.n	800b40a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2b14      	cmp	r3, #20
 800b216:	f200 80f0 	bhi.w	800b3fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b21a:	a201      	add	r2, pc, #4	; (adr r2, 800b220 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b220:	0800b275 	.word	0x0800b275
 800b224:	0800b3fb 	.word	0x0800b3fb
 800b228:	0800b3fb 	.word	0x0800b3fb
 800b22c:	0800b3fb 	.word	0x0800b3fb
 800b230:	0800b2b5 	.word	0x0800b2b5
 800b234:	0800b3fb 	.word	0x0800b3fb
 800b238:	0800b3fb 	.word	0x0800b3fb
 800b23c:	0800b3fb 	.word	0x0800b3fb
 800b240:	0800b2f7 	.word	0x0800b2f7
 800b244:	0800b3fb 	.word	0x0800b3fb
 800b248:	0800b3fb 	.word	0x0800b3fb
 800b24c:	0800b3fb 	.word	0x0800b3fb
 800b250:	0800b337 	.word	0x0800b337
 800b254:	0800b3fb 	.word	0x0800b3fb
 800b258:	0800b3fb 	.word	0x0800b3fb
 800b25c:	0800b3fb 	.word	0x0800b3fb
 800b260:	0800b379 	.word	0x0800b379
 800b264:	0800b3fb 	.word	0x0800b3fb
 800b268:	0800b3fb 	.word	0x0800b3fb
 800b26c:	0800b3fb 	.word	0x0800b3fb
 800b270:	0800b3b9 	.word	0x0800b3b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	68b9      	ldr	r1, [r7, #8]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 fa7e 	bl	800b77c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	699a      	ldr	r2, [r3, #24]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0208 	orr.w	r2, r2, #8
 800b28e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	699a      	ldr	r2, [r3, #24]
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f022 0204 	bic.w	r2, r2, #4
 800b29e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	6999      	ldr	r1, [r3, #24]
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	430a      	orrs	r2, r1
 800b2b0:	619a      	str	r2, [r3, #24]
      break;
 800b2b2:	e0a5      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	68b9      	ldr	r1, [r7, #8]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 faee 	bl	800b89c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	6999      	ldr	r1, [r3, #24]
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	691b      	ldr	r3, [r3, #16]
 800b2ea:	021a      	lsls	r2, r3, #8
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	430a      	orrs	r2, r1
 800b2f2:	619a      	str	r2, [r3, #24]
      break;
 800b2f4:	e084      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68b9      	ldr	r1, [r7, #8]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 fb57 	bl	800b9b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	69da      	ldr	r2, [r3, #28]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f042 0208 	orr.w	r2, r2, #8
 800b310:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	69da      	ldr	r2, [r3, #28]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f022 0204 	bic.w	r2, r2, #4
 800b320:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	69d9      	ldr	r1, [r3, #28]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	691a      	ldr	r2, [r3, #16]
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	430a      	orrs	r2, r1
 800b332:	61da      	str	r2, [r3, #28]
      break;
 800b334:	e064      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	68b9      	ldr	r1, [r7, #8]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f000 fbbf 	bl	800bac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69da      	ldr	r2, [r3, #28]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	69da      	ldr	r2, [r3, #28]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	69d9      	ldr	r1, [r3, #28]
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	021a      	lsls	r2, r3, #8
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	430a      	orrs	r2, r1
 800b374:	61da      	str	r2, [r3, #28]
      break;
 800b376:	e043      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	68b9      	ldr	r1, [r7, #8]
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 fc08 	bl	800bb94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f042 0208 	orr.w	r2, r2, #8
 800b392:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 0204 	bic.w	r2, r2, #4
 800b3a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	430a      	orrs	r2, r1
 800b3b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b3b6:	e023      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68b9      	ldr	r1, [r7, #8]
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f000 fc4c 	bl	800bc5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b3d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b3e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	021a      	lsls	r2, r3, #8
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b3f8:	e002      	b.n	800b400 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	75fb      	strb	r3, [r7, #23]
      break;
 800b3fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	2200      	movs	r2, #0
 800b404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b408:	7dfb      	ldrb	r3, [r7, #23]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3718      	adds	r7, #24
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop

0800b414 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b480:	bf00      	nop
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b498:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d107      	bne.n	800b4b4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4b2:	e02a      	b.n	800b50a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d107      	bne.n	800b4ce <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4cc:	e01d      	b.n	800b50a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d107      	bne.n	800b4e8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2204      	movs	r2, #4
 800b4dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4e6:	e010      	b.n	800b50a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	d107      	bne.n	800b502 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b500:	e003      	b.n	800b50a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff ffb4 	bl	800b478 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	771a      	strb	r2, [r3, #28]
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b084      	sub	sp, #16
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	429a      	cmp	r2, r3
 800b534:	d10b      	bne.n	800b54e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2201      	movs	r2, #1
 800b53a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d136      	bne.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b54c:	e031      	b.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	429a      	cmp	r2, r3
 800b556:	d10b      	bne.n	800b570 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2202      	movs	r2, #2
 800b55c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	69db      	ldr	r3, [r3, #28]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d125      	bne.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b56e:	e020      	b.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	429a      	cmp	r2, r3
 800b578:	d10b      	bne.n	800b592 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2204      	movs	r2, #4
 800b57e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d114      	bne.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2201      	movs	r2, #1
 800b58c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b590:	e00f      	b.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	429a      	cmp	r2, r3
 800b59a:	d10a      	bne.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2208      	movs	r2, #8
 800b5a0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d103      	bne.n	800b5b2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7f5 f9e4 	bl	8000980 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	771a      	strb	r2, [r3, #28]
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d103      	bne.n	800b5e6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	771a      	strb	r2, [r3, #28]
 800b5e4:	e019      	b.n	800b61a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d103      	bne.n	800b5f8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	771a      	strb	r2, [r3, #28]
 800b5f6:	e010      	b.n	800b61a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d103      	bne.n	800b60a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2204      	movs	r2, #4
 800b606:	771a      	strb	r2, [r3, #28]
 800b608:	e007      	b.n	800b61a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	429a      	cmp	r2, r3
 800b612:	d102      	bne.n	800b61a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2208      	movs	r2, #8
 800b618:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff ff18 	bl	800b450 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	771a      	strb	r2, [r3, #28]
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a44      	ldr	r2, [pc, #272]	; (800b754 <TIM_Base_SetConfig+0x124>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d013      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b64e:	d00f      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a41      	ldr	r2, [pc, #260]	; (800b758 <TIM_Base_SetConfig+0x128>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d00b      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	4a40      	ldr	r2, [pc, #256]	; (800b75c <TIM_Base_SetConfig+0x12c>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d007      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	4a3f      	ldr	r2, [pc, #252]	; (800b760 <TIM_Base_SetConfig+0x130>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d003      	beq.n	800b670 <TIM_Base_SetConfig+0x40>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	4a3e      	ldr	r2, [pc, #248]	; (800b764 <TIM_Base_SetConfig+0x134>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d108      	bne.n	800b682 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	4313      	orrs	r3, r2
 800b680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a33      	ldr	r2, [pc, #204]	; (800b754 <TIM_Base_SetConfig+0x124>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d027      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b690:	d023      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a30      	ldr	r2, [pc, #192]	; (800b758 <TIM_Base_SetConfig+0x128>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d01f      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a2f      	ldr	r2, [pc, #188]	; (800b75c <TIM_Base_SetConfig+0x12c>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d01b      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a2e      	ldr	r2, [pc, #184]	; (800b760 <TIM_Base_SetConfig+0x130>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d017      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a2d      	ldr	r2, [pc, #180]	; (800b764 <TIM_Base_SetConfig+0x134>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d013      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a2c      	ldr	r2, [pc, #176]	; (800b768 <TIM_Base_SetConfig+0x138>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d00f      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a2b      	ldr	r2, [pc, #172]	; (800b76c <TIM_Base_SetConfig+0x13c>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d00b      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a2a      	ldr	r2, [pc, #168]	; (800b770 <TIM_Base_SetConfig+0x140>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d007      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a29      	ldr	r2, [pc, #164]	; (800b774 <TIM_Base_SetConfig+0x144>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d003      	beq.n	800b6da <TIM_Base_SetConfig+0xaa>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a28      	ldr	r2, [pc, #160]	; (800b778 <TIM_Base_SetConfig+0x148>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d108      	bne.n	800b6ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	68fa      	ldr	r2, [r7, #12]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	689a      	ldr	r2, [r3, #8]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	4a10      	ldr	r2, [pc, #64]	; (800b754 <TIM_Base_SetConfig+0x124>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d00f      	beq.n	800b738 <TIM_Base_SetConfig+0x108>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a12      	ldr	r2, [pc, #72]	; (800b764 <TIM_Base_SetConfig+0x134>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d00b      	beq.n	800b738 <TIM_Base_SetConfig+0x108>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a11      	ldr	r2, [pc, #68]	; (800b768 <TIM_Base_SetConfig+0x138>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d007      	beq.n	800b738 <TIM_Base_SetConfig+0x108>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	4a10      	ldr	r2, [pc, #64]	; (800b76c <TIM_Base_SetConfig+0x13c>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d003      	beq.n	800b738 <TIM_Base_SetConfig+0x108>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	4a0f      	ldr	r2, [pc, #60]	; (800b770 <TIM_Base_SetConfig+0x140>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d103      	bne.n	800b740 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	691a      	ldr	r2, [r3, #16]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2201      	movs	r2, #1
 800b744:	615a      	str	r2, [r3, #20]
}
 800b746:	bf00      	nop
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
 800b752:	bf00      	nop
 800b754:	40010000 	.word	0x40010000
 800b758:	40000400 	.word	0x40000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	40010400 	.word	0x40010400
 800b768:	40014000 	.word	0x40014000
 800b76c:	40014400 	.word	0x40014400
 800b770:	40014800 	.word	0x40014800
 800b774:	4000e000 	.word	0x4000e000
 800b778:	4000e400 	.word	0x4000e400

0800b77c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a1b      	ldr	r3, [r3, #32]
 800b78a:	f023 0201 	bic.w	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a1b      	ldr	r3, [r3, #32]
 800b796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7a4:	68fa      	ldr	r2, [r7, #12]
 800b7a6:	4b37      	ldr	r3, [pc, #220]	; (800b884 <TIM_OC1_SetConfig+0x108>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f023 0303 	bic.w	r3, r3, #3
 800b7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f023 0302 	bic.w	r3, r3, #2
 800b7c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	697a      	ldr	r2, [r7, #20]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4a2d      	ldr	r2, [pc, #180]	; (800b888 <TIM_OC1_SetConfig+0x10c>)
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d00f      	beq.n	800b7f8 <TIM_OC1_SetConfig+0x7c>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	4a2c      	ldr	r2, [pc, #176]	; (800b88c <TIM_OC1_SetConfig+0x110>)
 800b7dc:	4293      	cmp	r3, r2
 800b7de:	d00b      	beq.n	800b7f8 <TIM_OC1_SetConfig+0x7c>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	4a2b      	ldr	r2, [pc, #172]	; (800b890 <TIM_OC1_SetConfig+0x114>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d007      	beq.n	800b7f8 <TIM_OC1_SetConfig+0x7c>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	4a2a      	ldr	r2, [pc, #168]	; (800b894 <TIM_OC1_SetConfig+0x118>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d003      	beq.n	800b7f8 <TIM_OC1_SetConfig+0x7c>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4a29      	ldr	r2, [pc, #164]	; (800b898 <TIM_OC1_SetConfig+0x11c>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d10c      	bne.n	800b812 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f023 0308 	bic.w	r3, r3, #8
 800b7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	697a      	ldr	r2, [r7, #20]
 800b806:	4313      	orrs	r3, r2
 800b808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	f023 0304 	bic.w	r3, r3, #4
 800b810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a1c      	ldr	r2, [pc, #112]	; (800b888 <TIM_OC1_SetConfig+0x10c>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d00f      	beq.n	800b83a <TIM_OC1_SetConfig+0xbe>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	4a1b      	ldr	r2, [pc, #108]	; (800b88c <TIM_OC1_SetConfig+0x110>)
 800b81e:	4293      	cmp	r3, r2
 800b820:	d00b      	beq.n	800b83a <TIM_OC1_SetConfig+0xbe>
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	4a1a      	ldr	r2, [pc, #104]	; (800b890 <TIM_OC1_SetConfig+0x114>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d007      	beq.n	800b83a <TIM_OC1_SetConfig+0xbe>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a19      	ldr	r2, [pc, #100]	; (800b894 <TIM_OC1_SetConfig+0x118>)
 800b82e:	4293      	cmp	r3, r2
 800b830:	d003      	beq.n	800b83a <TIM_OC1_SetConfig+0xbe>
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	4a18      	ldr	r2, [pc, #96]	; (800b898 <TIM_OC1_SetConfig+0x11c>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d111      	bne.n	800b85e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	695b      	ldr	r3, [r3, #20]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	4313      	orrs	r3, r2
 800b852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	621a      	str	r2, [r3, #32]
}
 800b878:	bf00      	nop
 800b87a:	371c      	adds	r7, #28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	fffeff8f 	.word	0xfffeff8f
 800b888:	40010000 	.word	0x40010000
 800b88c:	40010400 	.word	0x40010400
 800b890:	40014000 	.word	0x40014000
 800b894:	40014400 	.word	0x40014400
 800b898:	40014800 	.word	0x40014800

0800b89c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b087      	sub	sp, #28
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a1b      	ldr	r3, [r3, #32]
 800b8aa:	f023 0210 	bic.w	r2, r3, #16
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1b      	ldr	r3, [r3, #32]
 800b8b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8c4:	68fa      	ldr	r2, [r7, #12]
 800b8c6:	4b34      	ldr	r3, [pc, #208]	; (800b998 <TIM_OC2_SetConfig+0xfc>)
 800b8c8:	4013      	ands	r3, r2
 800b8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	021b      	lsls	r3, r3, #8
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f023 0320 	bic.w	r3, r3, #32
 800b8e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	697a      	ldr	r2, [r7, #20]
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a29      	ldr	r2, [pc, #164]	; (800b99c <TIM_OC2_SetConfig+0x100>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d003      	beq.n	800b904 <TIM_OC2_SetConfig+0x68>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	4a28      	ldr	r2, [pc, #160]	; (800b9a0 <TIM_OC2_SetConfig+0x104>)
 800b900:	4293      	cmp	r3, r2
 800b902:	d10d      	bne.n	800b920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	011b      	lsls	r3, r3, #4
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	4313      	orrs	r3, r2
 800b916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b91e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	4a1e      	ldr	r2, [pc, #120]	; (800b99c <TIM_OC2_SetConfig+0x100>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d00f      	beq.n	800b948 <TIM_OC2_SetConfig+0xac>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	4a1d      	ldr	r2, [pc, #116]	; (800b9a0 <TIM_OC2_SetConfig+0x104>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d00b      	beq.n	800b948 <TIM_OC2_SetConfig+0xac>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	4a1c      	ldr	r2, [pc, #112]	; (800b9a4 <TIM_OC2_SetConfig+0x108>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d007      	beq.n	800b948 <TIM_OC2_SetConfig+0xac>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	4a1b      	ldr	r2, [pc, #108]	; (800b9a8 <TIM_OC2_SetConfig+0x10c>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d003      	beq.n	800b948 <TIM_OC2_SetConfig+0xac>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1a      	ldr	r2, [pc, #104]	; (800b9ac <TIM_OC2_SetConfig+0x110>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d113      	bne.n	800b970 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b94e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	695b      	ldr	r3, [r3, #20]
 800b95c:	009b      	lsls	r3, r3, #2
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	4313      	orrs	r3, r2
 800b962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	693a      	ldr	r2, [r7, #16]
 800b96c:	4313      	orrs	r3, r2
 800b96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	693a      	ldr	r2, [r7, #16]
 800b974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	621a      	str	r2, [r3, #32]
}
 800b98a:	bf00      	nop
 800b98c:	371c      	adds	r7, #28
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr
 800b996:	bf00      	nop
 800b998:	feff8fff 	.word	0xfeff8fff
 800b99c:	40010000 	.word	0x40010000
 800b9a0:	40010400 	.word	0x40010400
 800b9a4:	40014000 	.word	0x40014000
 800b9a8:	40014400 	.word	0x40014400
 800b9ac:	40014800 	.word	0x40014800

0800b9b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a1b      	ldr	r3, [r3, #32]
 800b9be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	4b33      	ldr	r3, [pc, #204]	; (800baa8 <TIM_OC3_SetConfig+0xf8>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b9f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	697a      	ldr	r2, [r7, #20]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a28      	ldr	r2, [pc, #160]	; (800baac <TIM_OC3_SetConfig+0xfc>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d003      	beq.n	800ba16 <TIM_OC3_SetConfig+0x66>
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	4a27      	ldr	r2, [pc, #156]	; (800bab0 <TIM_OC3_SetConfig+0x100>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d10d      	bne.n	800ba32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	021b      	lsls	r3, r3, #8
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a1d      	ldr	r2, [pc, #116]	; (800baac <TIM_OC3_SetConfig+0xfc>)
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00f      	beq.n	800ba5a <TIM_OC3_SetConfig+0xaa>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	4a1c      	ldr	r2, [pc, #112]	; (800bab0 <TIM_OC3_SetConfig+0x100>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00b      	beq.n	800ba5a <TIM_OC3_SetConfig+0xaa>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4a1b      	ldr	r2, [pc, #108]	; (800bab4 <TIM_OC3_SetConfig+0x104>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d007      	beq.n	800ba5a <TIM_OC3_SetConfig+0xaa>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4a1a      	ldr	r2, [pc, #104]	; (800bab8 <TIM_OC3_SetConfig+0x108>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d003      	beq.n	800ba5a <TIM_OC3_SetConfig+0xaa>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	4a19      	ldr	r2, [pc, #100]	; (800babc <TIM_OC3_SetConfig+0x10c>)
 800ba56:	4293      	cmp	r3, r2
 800ba58:	d113      	bne.n	800ba82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	695b      	ldr	r3, [r3, #20]
 800ba6e:	011b      	lsls	r3, r3, #4
 800ba70:	693a      	ldr	r2, [r7, #16]
 800ba72:	4313      	orrs	r3, r2
 800ba74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	011b      	lsls	r3, r3, #4
 800ba7c:	693a      	ldr	r2, [r7, #16]
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	693a      	ldr	r2, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	685a      	ldr	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	621a      	str	r2, [r3, #32]
}
 800ba9c:	bf00      	nop
 800ba9e:	371c      	adds	r7, #28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	fffeff8f 	.word	0xfffeff8f
 800baac:	40010000 	.word	0x40010000
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40014400 	.word	0x40014400
 800babc:	40014800 	.word	0x40014800

0800bac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6a1b      	ldr	r3, [r3, #32]
 800bada:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	69db      	ldr	r3, [r3, #28]
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	4b24      	ldr	r3, [pc, #144]	; (800bb7c <TIM_OC4_SetConfig+0xbc>)
 800baec:	4013      	ands	r3, r2
 800baee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	021b      	lsls	r3, r3, #8
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	031b      	lsls	r3, r3, #12
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	4313      	orrs	r3, r2
 800bb16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	4a19      	ldr	r2, [pc, #100]	; (800bb80 <TIM_OC4_SetConfig+0xc0>)
 800bb1c:	4293      	cmp	r3, r2
 800bb1e:	d00f      	beq.n	800bb40 <TIM_OC4_SetConfig+0x80>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4a18      	ldr	r2, [pc, #96]	; (800bb84 <TIM_OC4_SetConfig+0xc4>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d00b      	beq.n	800bb40 <TIM_OC4_SetConfig+0x80>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a17      	ldr	r2, [pc, #92]	; (800bb88 <TIM_OC4_SetConfig+0xc8>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d007      	beq.n	800bb40 <TIM_OC4_SetConfig+0x80>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a16      	ldr	r2, [pc, #88]	; (800bb8c <TIM_OC4_SetConfig+0xcc>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d003      	beq.n	800bb40 <TIM_OC4_SetConfig+0x80>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a15      	ldr	r2, [pc, #84]	; (800bb90 <TIM_OC4_SetConfig+0xd0>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d109      	bne.n	800bb54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	695b      	ldr	r3, [r3, #20]
 800bb4c:	019b      	lsls	r3, r3, #6
 800bb4e:	697a      	ldr	r2, [r7, #20]
 800bb50:	4313      	orrs	r3, r2
 800bb52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	685a      	ldr	r2, [r3, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	621a      	str	r2, [r3, #32]
}
 800bb6e:	bf00      	nop
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
 800bb7a:	bf00      	nop
 800bb7c:	feff8fff 	.word	0xfeff8fff
 800bb80:	40010000 	.word	0x40010000
 800bb84:	40010400 	.word	0x40010400
 800bb88:	40014000 	.word	0x40014000
 800bb8c:	40014400 	.word	0x40014400
 800bb90:	40014800 	.word	0x40014800

0800bb94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b087      	sub	sp, #28
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a1b      	ldr	r3, [r3, #32]
 800bba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a1b      	ldr	r3, [r3, #32]
 800bbae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	4b21      	ldr	r3, [pc, #132]	; (800bc44 <TIM_OC5_SetConfig+0xb0>)
 800bbc0:	4013      	ands	r3, r2
 800bbc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bbd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	041b      	lsls	r3, r3, #16
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4a18      	ldr	r2, [pc, #96]	; (800bc48 <TIM_OC5_SetConfig+0xb4>)
 800bbe6:	4293      	cmp	r3, r2
 800bbe8:	d00f      	beq.n	800bc0a <TIM_OC5_SetConfig+0x76>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4a17      	ldr	r2, [pc, #92]	; (800bc4c <TIM_OC5_SetConfig+0xb8>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d00b      	beq.n	800bc0a <TIM_OC5_SetConfig+0x76>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	4a16      	ldr	r2, [pc, #88]	; (800bc50 <TIM_OC5_SetConfig+0xbc>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d007      	beq.n	800bc0a <TIM_OC5_SetConfig+0x76>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4a15      	ldr	r2, [pc, #84]	; (800bc54 <TIM_OC5_SetConfig+0xc0>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d003      	beq.n	800bc0a <TIM_OC5_SetConfig+0x76>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	4a14      	ldr	r2, [pc, #80]	; (800bc58 <TIM_OC5_SetConfig+0xc4>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d109      	bne.n	800bc1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	021b      	lsls	r3, r3, #8
 800bc18:	697a      	ldr	r2, [r7, #20]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	693a      	ldr	r2, [r7, #16]
 800bc36:	621a      	str	r2, [r3, #32]
}
 800bc38:	bf00      	nop
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	fffeff8f 	.word	0xfffeff8f
 800bc48:	40010000 	.word	0x40010000
 800bc4c:	40010400 	.word	0x40010400
 800bc50:	40014000 	.word	0x40014000
 800bc54:	40014400 	.word	0x40014400
 800bc58:	40014800 	.word	0x40014800

0800bc5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b087      	sub	sp, #28
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6a1b      	ldr	r3, [r3, #32]
 800bc6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6a1b      	ldr	r3, [r3, #32]
 800bc76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	4b22      	ldr	r3, [pc, #136]	; (800bd10 <TIM_OC6_SetConfig+0xb4>)
 800bc88:	4013      	ands	r3, r2
 800bc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	021b      	lsls	r3, r3, #8
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bc9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	051b      	lsls	r3, r3, #20
 800bca6:	693a      	ldr	r2, [r7, #16]
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a19      	ldr	r2, [pc, #100]	; (800bd14 <TIM_OC6_SetConfig+0xb8>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00f      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x78>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a18      	ldr	r2, [pc, #96]	; (800bd18 <TIM_OC6_SetConfig+0xbc>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d00b      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x78>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a17      	ldr	r2, [pc, #92]	; (800bd1c <TIM_OC6_SetConfig+0xc0>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d007      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x78>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a16      	ldr	r2, [pc, #88]	; (800bd20 <TIM_OC6_SetConfig+0xc4>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d003      	beq.n	800bcd4 <TIM_OC6_SetConfig+0x78>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a15      	ldr	r2, [pc, #84]	; (800bd24 <TIM_OC6_SetConfig+0xc8>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d109      	bne.n	800bce8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bcda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	695b      	ldr	r3, [r3, #20]
 800bce0:	029b      	lsls	r3, r3, #10
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	685a      	ldr	r2, [r3, #4]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	621a      	str	r2, [r3, #32]
}
 800bd02:	bf00      	nop
 800bd04:	371c      	adds	r7, #28
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	feff8fff 	.word	0xfeff8fff
 800bd14:	40010000 	.word	0x40010000
 800bd18:	40010400 	.word	0x40010400
 800bd1c:	40014000 	.word	0x40014000
 800bd20:	40014400 	.word	0x40014400
 800bd24:	40014800 	.word	0x40014800

0800bd28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b087      	sub	sp, #28
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	60f8      	str	r0, [r7, #12]
 800bd30:	60b9      	str	r1, [r7, #8]
 800bd32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	f003 031f 	and.w	r3, r3, #31
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a1a      	ldr	r2, [r3, #32]
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	43db      	mvns	r3, r3
 800bd4a:	401a      	ands	r2, r3
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a1a      	ldr	r2, [r3, #32]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	f003 031f 	and.w	r3, r3, #31
 800bd5a:	6879      	ldr	r1, [r7, #4]
 800bd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bd60:	431a      	orrs	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	621a      	str	r2, [r3, #32]
}
 800bd66:	bf00      	nop
 800bd68:	371c      	adds	r7, #28
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr
	...

0800bd74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d101      	bne.n	800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd88:	2302      	movs	r3, #2
 800bd8a:	e077      	b.n	800be7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2202      	movs	r2, #2
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a35      	ldr	r2, [pc, #212]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d004      	beq.n	800bdc0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a34      	ldr	r2, [pc, #208]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d108      	bne.n	800bdd2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bdc6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a25      	ldr	r2, [pc, #148]	; (800be88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d02c      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfe:	d027      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a22      	ldr	r2, [pc, #136]	; (800be90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800be06:	4293      	cmp	r3, r2
 800be08:	d022      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a21      	ldr	r2, [pc, #132]	; (800be94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d01d      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a1f      	ldr	r2, [pc, #124]	; (800be98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800be1a:	4293      	cmp	r3, r2
 800be1c:	d018      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a1a      	ldr	r2, [pc, #104]	; (800be8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d013      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4a1b      	ldr	r2, [pc, #108]	; (800be9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00e      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4a1a      	ldr	r2, [pc, #104]	; (800bea0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d009      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a18      	ldr	r2, [pc, #96]	; (800bea4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d004      	beq.n	800be50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d10c      	bne.n	800be6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	4313      	orrs	r3, r2
 800be60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	68ba      	ldr	r2, [r7, #8]
 800be68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	40010000 	.word	0x40010000
 800be8c:	40010400 	.word	0x40010400
 800be90:	40000400 	.word	0x40000400
 800be94:	40000800 	.word	0x40000800
 800be98:	40000c00 	.word	0x40000c00
 800be9c:	40001800 	.word	0x40001800
 800bea0:	40014000 	.word	0x40014000
 800bea4:	4000e000 	.word	0x4000e000
 800bea8:	4000e400 	.word	0x4000e400

0800beac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800beb4:	bf00      	nop
 800beb6:	370c      	adds	r7, #12
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bec8:	bf00      	nop
 800beca:	370c      	adds	r7, #12
 800becc:	46bd      	mov	sp, r7
 800bece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed2:	4770      	bx	lr

0800bed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	e042      	b.n	800bf80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7f6 f8e1 	bl	80020d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2224      	movs	r2, #36	; 0x24
 800bf16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681a      	ldr	r2, [r3, #0]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 0201 	bic.w	r2, r2, #1
 800bf28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f82c 	bl	800bf88 <UART_SetConfig>
 800bf30:	4603      	mov	r3, r0
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d101      	bne.n	800bf3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e022      	b.n	800bf80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d002      	beq.n	800bf48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fe8c 	bl	800cc60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	685a      	ldr	r2, [r3, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	689a      	ldr	r2, [r3, #8]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f042 0201 	orr.w	r2, r2, #1
 800bf76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 ff13 	bl	800cda4 <UART_CheckIdleState>
 800bf7e:	4603      	mov	r3, r0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf8c:	b092      	sub	sp, #72	; 0x48
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	689a      	ldr	r2, [r3, #8]
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	431a      	orrs	r2, r3
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	431a      	orrs	r2, r3
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	4bbe      	ldr	r3, [pc, #760]	; (800c2b0 <UART_SetConfig+0x328>)
 800bfb8:	4013      	ands	r3, r2
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	6812      	ldr	r2, [r2, #0]
 800bfbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bfc0:	430b      	orrs	r3, r1
 800bfc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	68da      	ldr	r2, [r3, #12]
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4ab3      	ldr	r2, [pc, #716]	; (800c2b4 <UART_SetConfig+0x32c>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d004      	beq.n	800bff4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bff0:	4313      	orrs	r3, r2
 800bff2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	689a      	ldr	r2, [r3, #8]
 800bffa:	4baf      	ldr	r3, [pc, #700]	; (800c2b8 <UART_SetConfig+0x330>)
 800bffc:	4013      	ands	r3, r2
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c004:	430b      	orrs	r3, r1
 800c006:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00e:	f023 010f 	bic.w	r1, r3, #15
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	4aa6      	ldr	r2, [pc, #664]	; (800c2bc <UART_SetConfig+0x334>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d177      	bne.n	800c118 <UART_SetConfig+0x190>
 800c028:	4ba5      	ldr	r3, [pc, #660]	; (800c2c0 <UART_SetConfig+0x338>)
 800c02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c030:	2b28      	cmp	r3, #40	; 0x28
 800c032:	d86d      	bhi.n	800c110 <UART_SetConfig+0x188>
 800c034:	a201      	add	r2, pc, #4	; (adr r2, 800c03c <UART_SetConfig+0xb4>)
 800c036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c03a:	bf00      	nop
 800c03c:	0800c0e1 	.word	0x0800c0e1
 800c040:	0800c111 	.word	0x0800c111
 800c044:	0800c111 	.word	0x0800c111
 800c048:	0800c111 	.word	0x0800c111
 800c04c:	0800c111 	.word	0x0800c111
 800c050:	0800c111 	.word	0x0800c111
 800c054:	0800c111 	.word	0x0800c111
 800c058:	0800c111 	.word	0x0800c111
 800c05c:	0800c0e9 	.word	0x0800c0e9
 800c060:	0800c111 	.word	0x0800c111
 800c064:	0800c111 	.word	0x0800c111
 800c068:	0800c111 	.word	0x0800c111
 800c06c:	0800c111 	.word	0x0800c111
 800c070:	0800c111 	.word	0x0800c111
 800c074:	0800c111 	.word	0x0800c111
 800c078:	0800c111 	.word	0x0800c111
 800c07c:	0800c0f1 	.word	0x0800c0f1
 800c080:	0800c111 	.word	0x0800c111
 800c084:	0800c111 	.word	0x0800c111
 800c088:	0800c111 	.word	0x0800c111
 800c08c:	0800c111 	.word	0x0800c111
 800c090:	0800c111 	.word	0x0800c111
 800c094:	0800c111 	.word	0x0800c111
 800c098:	0800c111 	.word	0x0800c111
 800c09c:	0800c0f9 	.word	0x0800c0f9
 800c0a0:	0800c111 	.word	0x0800c111
 800c0a4:	0800c111 	.word	0x0800c111
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c111 	.word	0x0800c111
 800c0b0:	0800c111 	.word	0x0800c111
 800c0b4:	0800c111 	.word	0x0800c111
 800c0b8:	0800c111 	.word	0x0800c111
 800c0bc:	0800c101 	.word	0x0800c101
 800c0c0:	0800c111 	.word	0x0800c111
 800c0c4:	0800c111 	.word	0x0800c111
 800c0c8:	0800c111 	.word	0x0800c111
 800c0cc:	0800c111 	.word	0x0800c111
 800c0d0:	0800c111 	.word	0x0800c111
 800c0d4:	0800c111 	.word	0x0800c111
 800c0d8:	0800c111 	.word	0x0800c111
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e326      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c0e8:	2304      	movs	r3, #4
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e322      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e31e      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c0f8:	2310      	movs	r3, #16
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e31a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c100:	2320      	movs	r3, #32
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e316      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c108:	2340      	movs	r3, #64	; 0x40
 800c10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10e:	e312      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c110:	2380      	movs	r3, #128	; 0x80
 800c112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c116:	e30e      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	4a69      	ldr	r2, [pc, #420]	; (800c2c4 <UART_SetConfig+0x33c>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d130      	bne.n	800c184 <UART_SetConfig+0x1fc>
 800c122:	4b67      	ldr	r3, [pc, #412]	; (800c2c0 <UART_SetConfig+0x338>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	d826      	bhi.n	800c17c <UART_SetConfig+0x1f4>
 800c12e:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <UART_SetConfig+0x1ac>)
 800c130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c134:	0800c14d 	.word	0x0800c14d
 800c138:	0800c155 	.word	0x0800c155
 800c13c:	0800c15d 	.word	0x0800c15d
 800c140:	0800c165 	.word	0x0800c165
 800c144:	0800c16d 	.word	0x0800c16d
 800c148:	0800c175 	.word	0x0800c175
 800c14c:	2300      	movs	r3, #0
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e2f0      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c154:	2304      	movs	r3, #4
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e2ec      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c15c:	2308      	movs	r3, #8
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c162:	e2e8      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c164:	2310      	movs	r3, #16
 800c166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16a:	e2e4      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c16c:	2320      	movs	r3, #32
 800c16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c172:	e2e0      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c174:	2340      	movs	r3, #64	; 0x40
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e2dc      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c17c:	2380      	movs	r3, #128	; 0x80
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e2d8      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a4f      	ldr	r2, [pc, #316]	; (800c2c8 <UART_SetConfig+0x340>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d130      	bne.n	800c1f0 <UART_SetConfig+0x268>
 800c18e:	4b4c      	ldr	r3, [pc, #304]	; (800c2c0 <UART_SetConfig+0x338>)
 800c190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c192:	f003 0307 	and.w	r3, r3, #7
 800c196:	2b05      	cmp	r3, #5
 800c198:	d826      	bhi.n	800c1e8 <UART_SetConfig+0x260>
 800c19a:	a201      	add	r2, pc, #4	; (adr r2, 800c1a0 <UART_SetConfig+0x218>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c1b9 	.word	0x0800c1b9
 800c1a4:	0800c1c1 	.word	0x0800c1c1
 800c1a8:	0800c1c9 	.word	0x0800c1c9
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d9 	.word	0x0800c1d9
 800c1b4:	0800c1e1 	.word	0x0800c1e1
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e2ba      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1c0:	2304      	movs	r3, #4
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e2b6      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1c8:	2308      	movs	r3, #8
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e2b2      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1d0:	2310      	movs	r3, #16
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e2ae      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1d8:	2320      	movs	r3, #32
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e2aa      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1e0:	2340      	movs	r3, #64	; 0x40
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e2a6      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1e8:	2380      	movs	r3, #128	; 0x80
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e2a2      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a35      	ldr	r2, [pc, #212]	; (800c2cc <UART_SetConfig+0x344>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d130      	bne.n	800c25c <UART_SetConfig+0x2d4>
 800c1fa:	4b31      	ldr	r3, [pc, #196]	; (800c2c0 <UART_SetConfig+0x338>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fe:	f003 0307 	and.w	r3, r3, #7
 800c202:	2b05      	cmp	r3, #5
 800c204:	d826      	bhi.n	800c254 <UART_SetConfig+0x2cc>
 800c206:	a201      	add	r2, pc, #4	; (adr r2, 800c20c <UART_SetConfig+0x284>)
 800c208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c20c:	0800c225 	.word	0x0800c225
 800c210:	0800c22d 	.word	0x0800c22d
 800c214:	0800c235 	.word	0x0800c235
 800c218:	0800c23d 	.word	0x0800c23d
 800c21c:	0800c245 	.word	0x0800c245
 800c220:	0800c24d 	.word	0x0800c24d
 800c224:	2300      	movs	r3, #0
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e284      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c22c:	2304      	movs	r3, #4
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e280      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c234:	2308      	movs	r3, #8
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e27c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c23c:	2310      	movs	r3, #16
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e278      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c244:	2320      	movs	r3, #32
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e274      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c24c:	2340      	movs	r3, #64	; 0x40
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e270      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c254:	2380      	movs	r3, #128	; 0x80
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e26c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a1b      	ldr	r2, [pc, #108]	; (800c2d0 <UART_SetConfig+0x348>)
 800c262:	4293      	cmp	r3, r2
 800c264:	d142      	bne.n	800c2ec <UART_SetConfig+0x364>
 800c266:	4b16      	ldr	r3, [pc, #88]	; (800c2c0 <UART_SetConfig+0x338>)
 800c268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	2b05      	cmp	r3, #5
 800c270:	d838      	bhi.n	800c2e4 <UART_SetConfig+0x35c>
 800c272:	a201      	add	r2, pc, #4	; (adr r2, 800c278 <UART_SetConfig+0x2f0>)
 800c274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c278:	0800c291 	.word	0x0800c291
 800c27c:	0800c299 	.word	0x0800c299
 800c280:	0800c2a1 	.word	0x0800c2a1
 800c284:	0800c2a9 	.word	0x0800c2a9
 800c288:	0800c2d5 	.word	0x0800c2d5
 800c28c:	0800c2dd 	.word	0x0800c2dd
 800c290:	2300      	movs	r3, #0
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e24e      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c298:	2304      	movs	r3, #4
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e24a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2a0:	2308      	movs	r3, #8
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e246      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2a8:	2310      	movs	r3, #16
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e242      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2b0:	cfff69f3 	.word	0xcfff69f3
 800c2b4:	58000c00 	.word	0x58000c00
 800c2b8:	11fff4ff 	.word	0x11fff4ff
 800c2bc:	40011000 	.word	0x40011000
 800c2c0:	58024400 	.word	0x58024400
 800c2c4:	40004400 	.word	0x40004400
 800c2c8:	40004800 	.word	0x40004800
 800c2cc:	40004c00 	.word	0x40004c00
 800c2d0:	40005000 	.word	0x40005000
 800c2d4:	2320      	movs	r3, #32
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e22c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2dc:	2340      	movs	r3, #64	; 0x40
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e228      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2e4:	2380      	movs	r3, #128	; 0x80
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e224      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4ab1      	ldr	r2, [pc, #708]	; (800c5b8 <UART_SetConfig+0x630>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d176      	bne.n	800c3e4 <UART_SetConfig+0x45c>
 800c2f6:	4bb1      	ldr	r3, [pc, #708]	; (800c5bc <UART_SetConfig+0x634>)
 800c2f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2fe:	2b28      	cmp	r3, #40	; 0x28
 800c300:	d86c      	bhi.n	800c3dc <UART_SetConfig+0x454>
 800c302:	a201      	add	r2, pc, #4	; (adr r2, 800c308 <UART_SetConfig+0x380>)
 800c304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c308:	0800c3ad 	.word	0x0800c3ad
 800c30c:	0800c3dd 	.word	0x0800c3dd
 800c310:	0800c3dd 	.word	0x0800c3dd
 800c314:	0800c3dd 	.word	0x0800c3dd
 800c318:	0800c3dd 	.word	0x0800c3dd
 800c31c:	0800c3dd 	.word	0x0800c3dd
 800c320:	0800c3dd 	.word	0x0800c3dd
 800c324:	0800c3dd 	.word	0x0800c3dd
 800c328:	0800c3b5 	.word	0x0800c3b5
 800c32c:	0800c3dd 	.word	0x0800c3dd
 800c330:	0800c3dd 	.word	0x0800c3dd
 800c334:	0800c3dd 	.word	0x0800c3dd
 800c338:	0800c3dd 	.word	0x0800c3dd
 800c33c:	0800c3dd 	.word	0x0800c3dd
 800c340:	0800c3dd 	.word	0x0800c3dd
 800c344:	0800c3dd 	.word	0x0800c3dd
 800c348:	0800c3bd 	.word	0x0800c3bd
 800c34c:	0800c3dd 	.word	0x0800c3dd
 800c350:	0800c3dd 	.word	0x0800c3dd
 800c354:	0800c3dd 	.word	0x0800c3dd
 800c358:	0800c3dd 	.word	0x0800c3dd
 800c35c:	0800c3dd 	.word	0x0800c3dd
 800c360:	0800c3dd 	.word	0x0800c3dd
 800c364:	0800c3dd 	.word	0x0800c3dd
 800c368:	0800c3c5 	.word	0x0800c3c5
 800c36c:	0800c3dd 	.word	0x0800c3dd
 800c370:	0800c3dd 	.word	0x0800c3dd
 800c374:	0800c3dd 	.word	0x0800c3dd
 800c378:	0800c3dd 	.word	0x0800c3dd
 800c37c:	0800c3dd 	.word	0x0800c3dd
 800c380:	0800c3dd 	.word	0x0800c3dd
 800c384:	0800c3dd 	.word	0x0800c3dd
 800c388:	0800c3cd 	.word	0x0800c3cd
 800c38c:	0800c3dd 	.word	0x0800c3dd
 800c390:	0800c3dd 	.word	0x0800c3dd
 800c394:	0800c3dd 	.word	0x0800c3dd
 800c398:	0800c3dd 	.word	0x0800c3dd
 800c39c:	0800c3dd 	.word	0x0800c3dd
 800c3a0:	0800c3dd 	.word	0x0800c3dd
 800c3a4:	0800c3dd 	.word	0x0800c3dd
 800c3a8:	0800c3d5 	.word	0x0800c3d5
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e1c0      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3b4:	2304      	movs	r3, #4
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e1bc      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3bc:	2308      	movs	r3, #8
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e1b8      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3c4:	2310      	movs	r3, #16
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e1b4      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e1b0      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e1ac      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e1a8      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a75      	ldr	r2, [pc, #468]	; (800c5c0 <UART_SetConfig+0x638>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d130      	bne.n	800c450 <UART_SetConfig+0x4c8>
 800c3ee:	4b73      	ldr	r3, [pc, #460]	; (800c5bc <UART_SetConfig+0x634>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	f003 0307 	and.w	r3, r3, #7
 800c3f6:	2b05      	cmp	r3, #5
 800c3f8:	d826      	bhi.n	800c448 <UART_SetConfig+0x4c0>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <UART_SetConfig+0x478>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c419 	.word	0x0800c419
 800c404:	0800c421 	.word	0x0800c421
 800c408:	0800c429 	.word	0x0800c429
 800c40c:	0800c431 	.word	0x0800c431
 800c410:	0800c439 	.word	0x0800c439
 800c414:	0800c441 	.word	0x0800c441
 800c418:	2300      	movs	r3, #0
 800c41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c41e:	e18a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c420:	2304      	movs	r3, #4
 800c422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c426:	e186      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c428:	2308      	movs	r3, #8
 800c42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c42e:	e182      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c430:	2310      	movs	r3, #16
 800c432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c436:	e17e      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c438:	2320      	movs	r3, #32
 800c43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c43e:	e17a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c446:	e176      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c448:	2380      	movs	r3, #128	; 0x80
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44e:	e172      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a5b      	ldr	r2, [pc, #364]	; (800c5c4 <UART_SetConfig+0x63c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d130      	bne.n	800c4bc <UART_SetConfig+0x534>
 800c45a:	4b58      	ldr	r3, [pc, #352]	; (800c5bc <UART_SetConfig+0x634>)
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	2b05      	cmp	r3, #5
 800c464:	d826      	bhi.n	800c4b4 <UART_SetConfig+0x52c>
 800c466:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <UART_SetConfig+0x4e4>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c485 	.word	0x0800c485
 800c470:	0800c48d 	.word	0x0800c48d
 800c474:	0800c495 	.word	0x0800c495
 800c478:	0800c49d 	.word	0x0800c49d
 800c47c:	0800c4a5 	.word	0x0800c4a5
 800c480:	0800c4ad 	.word	0x0800c4ad
 800c484:	2300      	movs	r3, #0
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e154      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c48c:	2304      	movs	r3, #4
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e150      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c494:	2308      	movs	r3, #8
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e14c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c49c:	2310      	movs	r3, #16
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e148      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c4a4:	2320      	movs	r3, #32
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4aa:	e144      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c4ac:	2340      	movs	r3, #64	; 0x40
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b2:	e140      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c4b4:	2380      	movs	r3, #128	; 0x80
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ba:	e13c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	4a41      	ldr	r2, [pc, #260]	; (800c5c8 <UART_SetConfig+0x640>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	f040 8082 	bne.w	800c5cc <UART_SetConfig+0x644>
 800c4c8:	4b3c      	ldr	r3, [pc, #240]	; (800c5bc <UART_SetConfig+0x634>)
 800c4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c4d0:	2b28      	cmp	r3, #40	; 0x28
 800c4d2:	d86d      	bhi.n	800c5b0 <UART_SetConfig+0x628>
 800c4d4:	a201      	add	r2, pc, #4	; (adr r2, 800c4dc <UART_SetConfig+0x554>)
 800c4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4da:	bf00      	nop
 800c4dc:	0800c581 	.word	0x0800c581
 800c4e0:	0800c5b1 	.word	0x0800c5b1
 800c4e4:	0800c5b1 	.word	0x0800c5b1
 800c4e8:	0800c5b1 	.word	0x0800c5b1
 800c4ec:	0800c5b1 	.word	0x0800c5b1
 800c4f0:	0800c5b1 	.word	0x0800c5b1
 800c4f4:	0800c5b1 	.word	0x0800c5b1
 800c4f8:	0800c5b1 	.word	0x0800c5b1
 800c4fc:	0800c589 	.word	0x0800c589
 800c500:	0800c5b1 	.word	0x0800c5b1
 800c504:	0800c5b1 	.word	0x0800c5b1
 800c508:	0800c5b1 	.word	0x0800c5b1
 800c50c:	0800c5b1 	.word	0x0800c5b1
 800c510:	0800c5b1 	.word	0x0800c5b1
 800c514:	0800c5b1 	.word	0x0800c5b1
 800c518:	0800c5b1 	.word	0x0800c5b1
 800c51c:	0800c591 	.word	0x0800c591
 800c520:	0800c5b1 	.word	0x0800c5b1
 800c524:	0800c5b1 	.word	0x0800c5b1
 800c528:	0800c5b1 	.word	0x0800c5b1
 800c52c:	0800c5b1 	.word	0x0800c5b1
 800c530:	0800c5b1 	.word	0x0800c5b1
 800c534:	0800c5b1 	.word	0x0800c5b1
 800c538:	0800c5b1 	.word	0x0800c5b1
 800c53c:	0800c599 	.word	0x0800c599
 800c540:	0800c5b1 	.word	0x0800c5b1
 800c544:	0800c5b1 	.word	0x0800c5b1
 800c548:	0800c5b1 	.word	0x0800c5b1
 800c54c:	0800c5b1 	.word	0x0800c5b1
 800c550:	0800c5b1 	.word	0x0800c5b1
 800c554:	0800c5b1 	.word	0x0800c5b1
 800c558:	0800c5b1 	.word	0x0800c5b1
 800c55c:	0800c5a1 	.word	0x0800c5a1
 800c560:	0800c5b1 	.word	0x0800c5b1
 800c564:	0800c5b1 	.word	0x0800c5b1
 800c568:	0800c5b1 	.word	0x0800c5b1
 800c56c:	0800c5b1 	.word	0x0800c5b1
 800c570:	0800c5b1 	.word	0x0800c5b1
 800c574:	0800c5b1 	.word	0x0800c5b1
 800c578:	0800c5b1 	.word	0x0800c5b1
 800c57c:	0800c5a9 	.word	0x0800c5a9
 800c580:	2301      	movs	r3, #1
 800c582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c586:	e0d6      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c588:	2304      	movs	r3, #4
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58e:	e0d2      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c590:	2308      	movs	r3, #8
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c596:	e0ce      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c598:	2310      	movs	r3, #16
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59e:	e0ca      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c5a0:	2320      	movs	r3, #32
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a6:	e0c6      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c5a8:	2340      	movs	r3, #64	; 0x40
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ae:	e0c2      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c5b0:	2380      	movs	r3, #128	; 0x80
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e0be      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c5b8:	40011400 	.word	0x40011400
 800c5bc:	58024400 	.word	0x58024400
 800c5c0:	40007800 	.word	0x40007800
 800c5c4:	40007c00 	.word	0x40007c00
 800c5c8:	40011800 	.word	0x40011800
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4aad      	ldr	r2, [pc, #692]	; (800c888 <UART_SetConfig+0x900>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d176      	bne.n	800c6c4 <UART_SetConfig+0x73c>
 800c5d6:	4bad      	ldr	r3, [pc, #692]	; (800c88c <UART_SetConfig+0x904>)
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5de:	2b28      	cmp	r3, #40	; 0x28
 800c5e0:	d86c      	bhi.n	800c6bc <UART_SetConfig+0x734>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <UART_SetConfig+0x660>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c68d 	.word	0x0800c68d
 800c5ec:	0800c6bd 	.word	0x0800c6bd
 800c5f0:	0800c6bd 	.word	0x0800c6bd
 800c5f4:	0800c6bd 	.word	0x0800c6bd
 800c5f8:	0800c6bd 	.word	0x0800c6bd
 800c5fc:	0800c6bd 	.word	0x0800c6bd
 800c600:	0800c6bd 	.word	0x0800c6bd
 800c604:	0800c6bd 	.word	0x0800c6bd
 800c608:	0800c695 	.word	0x0800c695
 800c60c:	0800c6bd 	.word	0x0800c6bd
 800c610:	0800c6bd 	.word	0x0800c6bd
 800c614:	0800c6bd 	.word	0x0800c6bd
 800c618:	0800c6bd 	.word	0x0800c6bd
 800c61c:	0800c6bd 	.word	0x0800c6bd
 800c620:	0800c6bd 	.word	0x0800c6bd
 800c624:	0800c6bd 	.word	0x0800c6bd
 800c628:	0800c69d 	.word	0x0800c69d
 800c62c:	0800c6bd 	.word	0x0800c6bd
 800c630:	0800c6bd 	.word	0x0800c6bd
 800c634:	0800c6bd 	.word	0x0800c6bd
 800c638:	0800c6bd 	.word	0x0800c6bd
 800c63c:	0800c6bd 	.word	0x0800c6bd
 800c640:	0800c6bd 	.word	0x0800c6bd
 800c644:	0800c6bd 	.word	0x0800c6bd
 800c648:	0800c6a5 	.word	0x0800c6a5
 800c64c:	0800c6bd 	.word	0x0800c6bd
 800c650:	0800c6bd 	.word	0x0800c6bd
 800c654:	0800c6bd 	.word	0x0800c6bd
 800c658:	0800c6bd 	.word	0x0800c6bd
 800c65c:	0800c6bd 	.word	0x0800c6bd
 800c660:	0800c6bd 	.word	0x0800c6bd
 800c664:	0800c6bd 	.word	0x0800c6bd
 800c668:	0800c6ad 	.word	0x0800c6ad
 800c66c:	0800c6bd 	.word	0x0800c6bd
 800c670:	0800c6bd 	.word	0x0800c6bd
 800c674:	0800c6bd 	.word	0x0800c6bd
 800c678:	0800c6bd 	.word	0x0800c6bd
 800c67c:	0800c6bd 	.word	0x0800c6bd
 800c680:	0800c6bd 	.word	0x0800c6bd
 800c684:	0800c6bd 	.word	0x0800c6bd
 800c688:	0800c6b5 	.word	0x0800c6b5
 800c68c:	2301      	movs	r3, #1
 800c68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c692:	e050      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c694:	2304      	movs	r3, #4
 800c696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c69a:	e04c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c69c:	2308      	movs	r3, #8
 800c69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6a2:	e048      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6aa:	e044      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c6ac:	2320      	movs	r3, #32
 800c6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6b2:	e040      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c6b4:	2340      	movs	r3, #64	; 0x40
 800c6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6ba:	e03c      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c6bc:	2380      	movs	r3, #128	; 0x80
 800c6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6c2:	e038      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a71      	ldr	r2, [pc, #452]	; (800c890 <UART_SetConfig+0x908>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d130      	bne.n	800c730 <UART_SetConfig+0x7a8>
 800c6ce:	4b6f      	ldr	r3, [pc, #444]	; (800c88c <UART_SetConfig+0x904>)
 800c6d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d2:	f003 0307 	and.w	r3, r3, #7
 800c6d6:	2b05      	cmp	r3, #5
 800c6d8:	d826      	bhi.n	800c728 <UART_SetConfig+0x7a0>
 800c6da:	a201      	add	r2, pc, #4	; (adr r2, 800c6e0 <UART_SetConfig+0x758>)
 800c6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e0:	0800c6f9 	.word	0x0800c6f9
 800c6e4:	0800c701 	.word	0x0800c701
 800c6e8:	0800c709 	.word	0x0800c709
 800c6ec:	0800c711 	.word	0x0800c711
 800c6f0:	0800c719 	.word	0x0800c719
 800c6f4:	0800c721 	.word	0x0800c721
 800c6f8:	2302      	movs	r3, #2
 800c6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c6fe:	e01a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c700:	2304      	movs	r3, #4
 800c702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c706:	e016      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c708:	2308      	movs	r3, #8
 800c70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c70e:	e012      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c710:	2310      	movs	r3, #16
 800c712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c716:	e00e      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c718:	2320      	movs	r3, #32
 800c71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c71e:	e00a      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c720:	2340      	movs	r3, #64	; 0x40
 800c722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c726:	e006      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c728:	2380      	movs	r3, #128	; 0x80
 800c72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c72e:	e002      	b.n	800c736 <UART_SetConfig+0x7ae>
 800c730:	2380      	movs	r3, #128	; 0x80
 800c732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a55      	ldr	r2, [pc, #340]	; (800c890 <UART_SetConfig+0x908>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	f040 80f8 	bne.w	800c932 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c742:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c746:	2b20      	cmp	r3, #32
 800c748:	dc46      	bgt.n	800c7d8 <UART_SetConfig+0x850>
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	db75      	blt.n	800c83a <UART_SetConfig+0x8b2>
 800c74e:	3b02      	subs	r3, #2
 800c750:	2b1e      	cmp	r3, #30
 800c752:	d872      	bhi.n	800c83a <UART_SetConfig+0x8b2>
 800c754:	a201      	add	r2, pc, #4	; (adr r2, 800c75c <UART_SetConfig+0x7d4>)
 800c756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c75a:	bf00      	nop
 800c75c:	0800c7df 	.word	0x0800c7df
 800c760:	0800c83b 	.word	0x0800c83b
 800c764:	0800c7e7 	.word	0x0800c7e7
 800c768:	0800c83b 	.word	0x0800c83b
 800c76c:	0800c83b 	.word	0x0800c83b
 800c770:	0800c83b 	.word	0x0800c83b
 800c774:	0800c7f7 	.word	0x0800c7f7
 800c778:	0800c83b 	.word	0x0800c83b
 800c77c:	0800c83b 	.word	0x0800c83b
 800c780:	0800c83b 	.word	0x0800c83b
 800c784:	0800c83b 	.word	0x0800c83b
 800c788:	0800c83b 	.word	0x0800c83b
 800c78c:	0800c83b 	.word	0x0800c83b
 800c790:	0800c83b 	.word	0x0800c83b
 800c794:	0800c807 	.word	0x0800c807
 800c798:	0800c83b 	.word	0x0800c83b
 800c79c:	0800c83b 	.word	0x0800c83b
 800c7a0:	0800c83b 	.word	0x0800c83b
 800c7a4:	0800c83b 	.word	0x0800c83b
 800c7a8:	0800c83b 	.word	0x0800c83b
 800c7ac:	0800c83b 	.word	0x0800c83b
 800c7b0:	0800c83b 	.word	0x0800c83b
 800c7b4:	0800c83b 	.word	0x0800c83b
 800c7b8:	0800c83b 	.word	0x0800c83b
 800c7bc:	0800c83b 	.word	0x0800c83b
 800c7c0:	0800c83b 	.word	0x0800c83b
 800c7c4:	0800c83b 	.word	0x0800c83b
 800c7c8:	0800c83b 	.word	0x0800c83b
 800c7cc:	0800c83b 	.word	0x0800c83b
 800c7d0:	0800c83b 	.word	0x0800c83b
 800c7d4:	0800c82d 	.word	0x0800c82d
 800c7d8:	2b40      	cmp	r3, #64	; 0x40
 800c7da:	d02a      	beq.n	800c832 <UART_SetConfig+0x8aa>
 800c7dc:	e02d      	b.n	800c83a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c7de:	f7fd faa7 	bl	8009d30 <HAL_RCCEx_GetD3PCLK1Freq>
 800c7e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c7e4:	e02f      	b.n	800c846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd fab6 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f4:	e027      	b.n	800c846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f6:	f107 0318 	add.w	r3, r7, #24
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7fd fc02 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c804:	e01f      	b.n	800c846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c806:	4b21      	ldr	r3, [pc, #132]	; (800c88c <UART_SetConfig+0x904>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 0320 	and.w	r3, r3, #32
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d009      	beq.n	800c826 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c812:	4b1e      	ldr	r3, [pc, #120]	; (800c88c <UART_SetConfig+0x904>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	08db      	lsrs	r3, r3, #3
 800c818:	f003 0303 	and.w	r3, r3, #3
 800c81c:	4a1d      	ldr	r2, [pc, #116]	; (800c894 <UART_SetConfig+0x90c>)
 800c81e:	fa22 f303 	lsr.w	r3, r2, r3
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c824:	e00f      	b.n	800c846 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c826:	4b1b      	ldr	r3, [pc, #108]	; (800c894 <UART_SetConfig+0x90c>)
 800c828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82a:	e00c      	b.n	800c846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c82c:	4b1a      	ldr	r3, [pc, #104]	; (800c898 <UART_SetConfig+0x910>)
 800c82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c830:	e009      	b.n	800c846 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c838:	e005      	b.n	800c846 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c844:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f000 81ee 	beq.w	800cc2a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c852:	4a12      	ldr	r2, [pc, #72]	; (800c89c <UART_SetConfig+0x914>)
 800c854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c858:	461a      	mov	r2, r3
 800c85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c860:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	685a      	ldr	r2, [r3, #4]
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86e:	429a      	cmp	r2, r3
 800c870:	d305      	bcc.n	800c87e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d910      	bls.n	800c8a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c884:	e1d1      	b.n	800cc2a <UART_SetConfig+0xca2>
 800c886:	bf00      	nop
 800c888:	40011c00 	.word	0x40011c00
 800c88c:	58024400 	.word	0x58024400
 800c890:	58000c00 	.word	0x58000c00
 800c894:	03d09000 	.word	0x03d09000
 800c898:	003d0900 	.word	0x003d0900
 800c89c:	0800da10 	.word	0x0800da10
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	60bb      	str	r3, [r7, #8]
 800c8a6:	60fa      	str	r2, [r7, #12]
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ac:	4ac0      	ldr	r2, [pc, #768]	; (800cbb0 <UART_SetConfig+0xc28>)
 800c8ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	603b      	str	r3, [r7, #0]
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c8c2:	f7f3 fd23 	bl	800030c <__aeabi_uldivmod>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4610      	mov	r0, r2
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	f04f 0200 	mov.w	r2, #0
 800c8d2:	f04f 0300 	mov.w	r3, #0
 800c8d6:	020b      	lsls	r3, r1, #8
 800c8d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c8dc:	0202      	lsls	r2, r0, #8
 800c8de:	6979      	ldr	r1, [r7, #20]
 800c8e0:	6849      	ldr	r1, [r1, #4]
 800c8e2:	0849      	lsrs	r1, r1, #1
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	eb12 0804 	adds.w	r8, r2, r4
 800c8ee:	eb43 0905 	adc.w	r9, r3, r5
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	469a      	mov	sl, r3
 800c8fa:	4693      	mov	fp, r2
 800c8fc:	4652      	mov	r2, sl
 800c8fe:	465b      	mov	r3, fp
 800c900:	4640      	mov	r0, r8
 800c902:	4649      	mov	r1, r9
 800c904:	f7f3 fd02 	bl	800030c <__aeabi_uldivmod>
 800c908:	4602      	mov	r2, r0
 800c90a:	460b      	mov	r3, r1
 800c90c:	4613      	mov	r3, r2
 800c90e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c916:	d308      	bcc.n	800c92a <UART_SetConfig+0x9a2>
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c91e:	d204      	bcs.n	800c92a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c926:	60da      	str	r2, [r3, #12]
 800c928:	e17f      	b.n	800cc2a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c930:	e17b      	b.n	800cc2a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	69db      	ldr	r3, [r3, #28]
 800c936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c93a:	f040 80bd 	bne.w	800cab8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800c93e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c942:	2b20      	cmp	r3, #32
 800c944:	dc48      	bgt.n	800c9d8 <UART_SetConfig+0xa50>
 800c946:	2b00      	cmp	r3, #0
 800c948:	db7b      	blt.n	800ca42 <UART_SetConfig+0xaba>
 800c94a:	2b20      	cmp	r3, #32
 800c94c:	d879      	bhi.n	800ca42 <UART_SetConfig+0xaba>
 800c94e:	a201      	add	r2, pc, #4	; (adr r2, 800c954 <UART_SetConfig+0x9cc>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c9df 	.word	0x0800c9df
 800c958:	0800c9e7 	.word	0x0800c9e7
 800c95c:	0800ca43 	.word	0x0800ca43
 800c960:	0800ca43 	.word	0x0800ca43
 800c964:	0800c9ef 	.word	0x0800c9ef
 800c968:	0800ca43 	.word	0x0800ca43
 800c96c:	0800ca43 	.word	0x0800ca43
 800c970:	0800ca43 	.word	0x0800ca43
 800c974:	0800c9ff 	.word	0x0800c9ff
 800c978:	0800ca43 	.word	0x0800ca43
 800c97c:	0800ca43 	.word	0x0800ca43
 800c980:	0800ca43 	.word	0x0800ca43
 800c984:	0800ca43 	.word	0x0800ca43
 800c988:	0800ca43 	.word	0x0800ca43
 800c98c:	0800ca43 	.word	0x0800ca43
 800c990:	0800ca43 	.word	0x0800ca43
 800c994:	0800ca0f 	.word	0x0800ca0f
 800c998:	0800ca43 	.word	0x0800ca43
 800c99c:	0800ca43 	.word	0x0800ca43
 800c9a0:	0800ca43 	.word	0x0800ca43
 800c9a4:	0800ca43 	.word	0x0800ca43
 800c9a8:	0800ca43 	.word	0x0800ca43
 800c9ac:	0800ca43 	.word	0x0800ca43
 800c9b0:	0800ca43 	.word	0x0800ca43
 800c9b4:	0800ca43 	.word	0x0800ca43
 800c9b8:	0800ca43 	.word	0x0800ca43
 800c9bc:	0800ca43 	.word	0x0800ca43
 800c9c0:	0800ca43 	.word	0x0800ca43
 800c9c4:	0800ca43 	.word	0x0800ca43
 800c9c8:	0800ca43 	.word	0x0800ca43
 800c9cc:	0800ca43 	.word	0x0800ca43
 800c9d0:	0800ca43 	.word	0x0800ca43
 800c9d4:	0800ca35 	.word	0x0800ca35
 800c9d8:	2b40      	cmp	r3, #64	; 0x40
 800c9da:	d02e      	beq.n	800ca3a <UART_SetConfig+0xab2>
 800c9dc:	e031      	b.n	800ca42 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9de:	f7fb fb09 	bl	8007ff4 <HAL_RCC_GetPCLK1Freq>
 800c9e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9e4:	e033      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9e6:	f7fb fb1b 	bl	8008020 <HAL_RCC_GetPCLK2Freq>
 800c9ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9ec:	e02f      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fd f9b2 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9fc:	e027      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9fe:	f107 0318 	add.w	r3, r7, #24
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fd fafe 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca0c:	e01f      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca0e:	4b69      	ldr	r3, [pc, #420]	; (800cbb4 <UART_SetConfig+0xc2c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0320 	and.w	r3, r3, #32
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d009      	beq.n	800ca2e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca1a:	4b66      	ldr	r3, [pc, #408]	; (800cbb4 <UART_SetConfig+0xc2c>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	08db      	lsrs	r3, r3, #3
 800ca20:	f003 0303 	and.w	r3, r3, #3
 800ca24:	4a64      	ldr	r2, [pc, #400]	; (800cbb8 <UART_SetConfig+0xc30>)
 800ca26:	fa22 f303 	lsr.w	r3, r2, r3
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca2c:	e00f      	b.n	800ca4e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ca2e:	4b62      	ldr	r3, [pc, #392]	; (800cbb8 <UART_SetConfig+0xc30>)
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca32:	e00c      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca34:	4b61      	ldr	r3, [pc, #388]	; (800cbbc <UART_SetConfig+0xc34>)
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e009      	b.n	800ca4e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	e005      	b.n	800ca4e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ca42:	2300      	movs	r3, #0
 800ca44:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f000 80ea 	beq.w	800cc2a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca5a:	4a55      	ldr	r2, [pc, #340]	; (800cbb0 <UART_SetConfig+0xc28>)
 800ca5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca60:	461a      	mov	r2, r3
 800ca62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca64:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca68:	005a      	lsls	r2, r3, #1
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	085b      	lsrs	r3, r3, #1
 800ca70:	441a      	add	r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	2b0f      	cmp	r3, #15
 800ca80:	d916      	bls.n	800cab0 <UART_SetConfig+0xb28>
 800ca82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca88:	d212      	bcs.n	800cab0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ca8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	f023 030f 	bic.w	r3, r3, #15
 800ca92:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ca94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca96:	085b      	lsrs	r3, r3, #1
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	f003 0307 	and.w	r3, r3, #7
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800caa2:	4313      	orrs	r3, r2
 800caa4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800caac:	60da      	str	r2, [r3, #12]
 800caae:	e0bc      	b.n	800cc2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cab6:	e0b8      	b.n	800cc2a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cab8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	dc4b      	bgt.n	800cb58 <UART_SetConfig+0xbd0>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f2c0 8087 	blt.w	800cbd4 <UART_SetConfig+0xc4c>
 800cac6:	2b20      	cmp	r3, #32
 800cac8:	f200 8084 	bhi.w	800cbd4 <UART_SetConfig+0xc4c>
 800cacc:	a201      	add	r2, pc, #4	; (adr r2, 800cad4 <UART_SetConfig+0xb4c>)
 800cace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad2:	bf00      	nop
 800cad4:	0800cb5f 	.word	0x0800cb5f
 800cad8:	0800cb67 	.word	0x0800cb67
 800cadc:	0800cbd5 	.word	0x0800cbd5
 800cae0:	0800cbd5 	.word	0x0800cbd5
 800cae4:	0800cb6f 	.word	0x0800cb6f
 800cae8:	0800cbd5 	.word	0x0800cbd5
 800caec:	0800cbd5 	.word	0x0800cbd5
 800caf0:	0800cbd5 	.word	0x0800cbd5
 800caf4:	0800cb7f 	.word	0x0800cb7f
 800caf8:	0800cbd5 	.word	0x0800cbd5
 800cafc:	0800cbd5 	.word	0x0800cbd5
 800cb00:	0800cbd5 	.word	0x0800cbd5
 800cb04:	0800cbd5 	.word	0x0800cbd5
 800cb08:	0800cbd5 	.word	0x0800cbd5
 800cb0c:	0800cbd5 	.word	0x0800cbd5
 800cb10:	0800cbd5 	.word	0x0800cbd5
 800cb14:	0800cb8f 	.word	0x0800cb8f
 800cb18:	0800cbd5 	.word	0x0800cbd5
 800cb1c:	0800cbd5 	.word	0x0800cbd5
 800cb20:	0800cbd5 	.word	0x0800cbd5
 800cb24:	0800cbd5 	.word	0x0800cbd5
 800cb28:	0800cbd5 	.word	0x0800cbd5
 800cb2c:	0800cbd5 	.word	0x0800cbd5
 800cb30:	0800cbd5 	.word	0x0800cbd5
 800cb34:	0800cbd5 	.word	0x0800cbd5
 800cb38:	0800cbd5 	.word	0x0800cbd5
 800cb3c:	0800cbd5 	.word	0x0800cbd5
 800cb40:	0800cbd5 	.word	0x0800cbd5
 800cb44:	0800cbd5 	.word	0x0800cbd5
 800cb48:	0800cbd5 	.word	0x0800cbd5
 800cb4c:	0800cbd5 	.word	0x0800cbd5
 800cb50:	0800cbd5 	.word	0x0800cbd5
 800cb54:	0800cbc7 	.word	0x0800cbc7
 800cb58:	2b40      	cmp	r3, #64	; 0x40
 800cb5a:	d037      	beq.n	800cbcc <UART_SetConfig+0xc44>
 800cb5c:	e03a      	b.n	800cbd4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb5e:	f7fb fa49 	bl	8007ff4 <HAL_RCC_GetPCLK1Freq>
 800cb62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb64:	e03c      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb66:	f7fb fa5b 	bl	8008020 <HAL_RCC_GetPCLK2Freq>
 800cb6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb6c:	e038      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb72:	4618      	mov	r0, r3
 800cb74:	f7fd f8f2 	bl	8009d5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb7c:	e030      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb7e:	f107 0318 	add.w	r3, r7, #24
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fd fa3e 	bl	800a004 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb8c:	e028      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb8e:	4b09      	ldr	r3, [pc, #36]	; (800cbb4 <UART_SetConfig+0xc2c>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 0320 	and.w	r3, r3, #32
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d012      	beq.n	800cbc0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cb9a:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <UART_SetConfig+0xc2c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	08db      	lsrs	r3, r3, #3
 800cba0:	f003 0303 	and.w	r3, r3, #3
 800cba4:	4a04      	ldr	r2, [pc, #16]	; (800cbb8 <UART_SetConfig+0xc30>)
 800cba6:	fa22 f303 	lsr.w	r3, r2, r3
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cbac:	e018      	b.n	800cbe0 <UART_SetConfig+0xc58>
 800cbae:	bf00      	nop
 800cbb0:	0800da10 	.word	0x0800da10
 800cbb4:	58024400 	.word	0x58024400
 800cbb8:	03d09000 	.word	0x03d09000
 800cbbc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800cbc0:	4b24      	ldr	r3, [pc, #144]	; (800cc54 <UART_SetConfig+0xccc>)
 800cbc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc4:	e00c      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cbc6:	4b24      	ldr	r3, [pc, #144]	; (800cc58 <UART_SetConfig+0xcd0>)
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbca:	e009      	b.n	800cbe0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd2:	e005      	b.n	800cbe0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cbde:	bf00      	nop
    }

    if (pclk != 0U)
 800cbe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d021      	beq.n	800cc2a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbe6:	697b      	ldr	r3, [r7, #20]
 800cbe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbea:	4a1c      	ldr	r2, [pc, #112]	; (800cc5c <UART_SetConfig+0xcd4>)
 800cbec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf4:	fbb3 f2f2 	udiv	r2, r3, r2
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	085b      	lsrs	r3, r3, #1
 800cbfe:	441a      	add	r2, r3
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc08:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	2b0f      	cmp	r3, #15
 800cc0e:	d909      	bls.n	800cc24 <UART_SetConfig+0xc9c>
 800cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc16:	d205      	bcs.n	800cc24 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	60da      	str	r2, [r3, #12]
 800cc22:	e002      	b.n	800cc2a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	2201      	movs	r2, #1
 800cc36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2200      	movs	r2, #0
 800cc44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cc46:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3748      	adds	r7, #72	; 0x48
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc54:	03d09000 	.word	0x03d09000
 800cc58:	003d0900 	.word	0x003d0900
 800cc5c:	0800da10 	.word	0x0800da10

0800cc60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b083      	sub	sp, #12
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d00a      	beq.n	800cc8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	430a      	orrs	r2, r1
 800cc88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc8e:	f003 0302 	and.w	r3, r3, #2
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00a      	beq.n	800ccac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00a      	beq.n	800ccce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	430a      	orrs	r2, r1
 800cccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd2:	f003 0308 	and.w	r3, r3, #8
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccf4:	f003 0310 	and.w	r3, r3, #16
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00a      	beq.n	800cd12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd16:	f003 0320 	and.w	r3, r3, #32
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d01a      	beq.n	800cd76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd5e:	d10a      	bne.n	800cd76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	430a      	orrs	r2, r1
 800cd74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00a      	beq.n	800cd98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	605a      	str	r2, [r3, #4]
  }
}
 800cd98:	bf00      	nop
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b098      	sub	sp, #96	; 0x60
 800cda8:	af02      	add	r7, sp, #8
 800cdaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdb4:	f7f5 fc14 	bl	80025e0 <HAL_GetTick>
 800cdb8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f003 0308 	and.w	r3, r3, #8
 800cdc4:	2b08      	cmp	r3, #8
 800cdc6:	d12f      	bne.n	800ce28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f88e 	bl	800cef8 <UART_WaitOnFlagUntilTimeout>
 800cddc:	4603      	mov	r3, r0
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d022      	beq.n	800ce28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	e853 3f00 	ldrex	r3, [r3]
 800cdee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdf6:	653b      	str	r3, [r7, #80]	; 0x50
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce00:	647b      	str	r3, [r7, #68]	; 0x44
 800ce02:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce08:	e841 2300 	strex	r3, r2, [r1]
 800ce0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d1e6      	bne.n	800cde2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce24:	2303      	movs	r3, #3
 800ce26:	e063      	b.n	800cef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f003 0304 	and.w	r3, r3, #4
 800ce32:	2b04      	cmp	r3, #4
 800ce34:	d149      	bne.n	800ceca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f857 	bl	800cef8 <UART_WaitOnFlagUntilTimeout>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d03c      	beq.n	800ceca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	e853 3f00 	ldrex	r3, [r3]
 800ce5c:	623b      	str	r3, [r7, #32]
   return(result);
 800ce5e:	6a3b      	ldr	r3, [r7, #32]
 800ce60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	461a      	mov	r2, r3
 800ce6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce6e:	633b      	str	r3, [r7, #48]	; 0x30
 800ce70:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce76:	e841 2300 	strex	r3, r2, [r1]
 800ce7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ce7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1e6      	bne.n	800ce50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	3308      	adds	r3, #8
 800ce88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	e853 3f00 	ldrex	r3, [r3]
 800ce90:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f023 0301 	bic.w	r3, r3, #1
 800ce98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cea2:	61fa      	str	r2, [r7, #28]
 800cea4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	69b9      	ldr	r1, [r7, #24]
 800cea8:	69fa      	ldr	r2, [r7, #28]
 800ceaa:	e841 2300 	strex	r3, r2, [r1]
 800ceae:	617b      	str	r3, [r7, #20]
   return(result);
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d1e5      	bne.n	800ce82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2220      	movs	r2, #32
 800ceba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cec6:	2303      	movs	r3, #3
 800cec8:	e012      	b.n	800cef0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2220      	movs	r2, #32
 800ced6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ceee:	2300      	movs	r3, #0
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3758      	adds	r7, #88	; 0x58
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	4613      	mov	r3, r2
 800cf06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf08:	e049      	b.n	800cf9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf10:	d045      	beq.n	800cf9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf12:	f7f5 fb65 	bl	80025e0 <HAL_GetTick>
 800cf16:	4602      	mov	r2, r0
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	1ad3      	subs	r3, r2, r3
 800cf1c:	69ba      	ldr	r2, [r7, #24]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d302      	bcc.n	800cf28 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d101      	bne.n	800cf2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	e048      	b.n	800cfbe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f003 0304 	and.w	r3, r3, #4
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d031      	beq.n	800cf9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	69db      	ldr	r3, [r3, #28]
 800cf40:	f003 0308 	and.w	r3, r3, #8
 800cf44:	2b08      	cmp	r3, #8
 800cf46:	d110      	bne.n	800cf6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2208      	movs	r2, #8
 800cf4e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f839 	bl	800cfc8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2208      	movs	r2, #8
 800cf5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800cf66:	2301      	movs	r3, #1
 800cf68:	e029      	b.n	800cfbe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cf74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf78:	d111      	bne.n	800cf9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 f81f 	bl	800cfc8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cf9a:	2303      	movs	r3, #3
 800cf9c:	e00f      	b.n	800cfbe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	69da      	ldr	r2, [r3, #28]
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	bf0c      	ite	eq
 800cfae:	2301      	moveq	r3, #1
 800cfb0:	2300      	movne	r3, #0
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d0a6      	beq.n	800cf0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cfbc:	2300      	movs	r3, #0
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
	...

0800cfc8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b095      	sub	sp, #84	; 0x54
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd8:	e853 3f00 	ldrex	r3, [r3]
 800cfdc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cfe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	461a      	mov	r2, r3
 800cfec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfee:	643b      	str	r3, [r7, #64]	; 0x40
 800cff0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cff6:	e841 2300 	strex	r3, r2, [r1]
 800cffa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d1e6      	bne.n	800cfd0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	3308      	adds	r3, #8
 800d008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00a:	6a3b      	ldr	r3, [r7, #32]
 800d00c:	e853 3f00 	ldrex	r3, [r3]
 800d010:	61fb      	str	r3, [r7, #28]
   return(result);
 800d012:	69fa      	ldr	r2, [r7, #28]
 800d014:	4b1e      	ldr	r3, [pc, #120]	; (800d090 <UART_EndRxTransfer+0xc8>)
 800d016:	4013      	ands	r3, r2
 800d018:	64bb      	str	r3, [r7, #72]	; 0x48
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	3308      	adds	r3, #8
 800d020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d022:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d024:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d026:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d028:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d02a:	e841 2300 	strex	r3, r2, [r1]
 800d02e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d032:	2b00      	cmp	r3, #0
 800d034:	d1e5      	bne.n	800d002 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d118      	bne.n	800d070 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	e853 3f00 	ldrex	r3, [r3]
 800d04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	f023 0310 	bic.w	r3, r3, #16
 800d052:	647b      	str	r3, [r7, #68]	; 0x44
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	461a      	mov	r2, r3
 800d05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d05c:	61bb      	str	r3, [r7, #24]
 800d05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d060:	6979      	ldr	r1, [r7, #20]
 800d062:	69ba      	ldr	r2, [r7, #24]
 800d064:	e841 2300 	strex	r3, r2, [r1]
 800d068:	613b      	str	r3, [r7, #16]
   return(result);
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1e6      	bne.n	800d03e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2220      	movs	r2, #32
 800d074:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d084:	bf00      	nop
 800d086:	3754      	adds	r7, #84	; 0x54
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr
 800d090:	effffffe 	.word	0xeffffffe

0800d094 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d101      	bne.n	800d0aa <HAL_UARTEx_DisableFifoMode+0x16>
 800d0a6:	2302      	movs	r3, #2
 800d0a8:	e027      	b.n	800d0fa <HAL_UARTEx_DisableFifoMode+0x66>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2224      	movs	r2, #36	; 0x24
 800d0b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f022 0201 	bic.w	r2, r2, #1
 800d0d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d0d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2220      	movs	r2, #32
 800d0ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3714      	adds	r7, #20
 800d0fe:	46bd      	mov	sp, r7
 800d100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d104:	4770      	bx	lr

0800d106 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d116:	2b01      	cmp	r3, #1
 800d118:	d101      	bne.n	800d11e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d11a:	2302      	movs	r3, #2
 800d11c:	e02d      	b.n	800d17a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2224      	movs	r2, #36	; 0x24
 800d12a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f022 0201 	bic.w	r2, r2, #1
 800d144:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	430a      	orrs	r2, r1
 800d158:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 f850 	bl	800d200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2220      	movs	r2, #32
 800d16c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d182:	b580      	push	{r7, lr}
 800d184:	b084      	sub	sp, #16
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
 800d18a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d196:	2302      	movs	r3, #2
 800d198:	e02d      	b.n	800d1f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2224      	movs	r2, #36	; 0x24
 800d1a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f022 0201 	bic.w	r2, r2, #1
 800d1c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	430a      	orrs	r2, r1
 800d1d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f812 	bl	800d200 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d1f4:	2300      	movs	r3, #0
}
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
	...

0800d200 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d108      	bne.n	800d222 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d220:	e031      	b.n	800d286 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d222:	2310      	movs	r3, #16
 800d224:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d226:	2310      	movs	r3, #16
 800d228:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	0e5b      	lsrs	r3, r3, #25
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 0307 	and.w	r3, r3, #7
 800d238:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	689b      	ldr	r3, [r3, #8]
 800d240:	0f5b      	lsrs	r3, r3, #29
 800d242:	b2db      	uxtb	r3, r3
 800d244:	f003 0307 	and.w	r3, r3, #7
 800d248:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
 800d24c:	7b3a      	ldrb	r2, [r7, #12]
 800d24e:	4911      	ldr	r1, [pc, #68]	; (800d294 <UARTEx_SetNbDataToProcess+0x94>)
 800d250:	5c8a      	ldrb	r2, [r1, r2]
 800d252:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d256:	7b3a      	ldrb	r2, [r7, #12]
 800d258:	490f      	ldr	r1, [pc, #60]	; (800d298 <UARTEx_SetNbDataToProcess+0x98>)
 800d25a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d25c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d260:	b29a      	uxth	r2, r3
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d268:	7bfb      	ldrb	r3, [r7, #15]
 800d26a:	7b7a      	ldrb	r2, [r7, #13]
 800d26c:	4909      	ldr	r1, [pc, #36]	; (800d294 <UARTEx_SetNbDataToProcess+0x94>)
 800d26e:	5c8a      	ldrb	r2, [r1, r2]
 800d270:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d274:	7b7a      	ldrb	r2, [r7, #13]
 800d276:	4908      	ldr	r1, [pc, #32]	; (800d298 <UARTEx_SetNbDataToProcess+0x98>)
 800d278:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d27a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d27e:	b29a      	uxth	r2, r3
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d286:	bf00      	nop
 800d288:	3714      	adds	r7, #20
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr
 800d292:	bf00      	nop
 800d294:	0800da28 	.word	0x0800da28
 800d298:	0800da30 	.word	0x0800da30

0800d29c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d29c:	b084      	sub	sp, #16
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	f107 001c 	add.w	r0, r7, #28
 800d2aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d120      	bne.n	800d2f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	68da      	ldr	r2, [r3, #12]
 800d2c4:	4b2a      	ldr	r3, [pc, #168]	; (800d370 <USB_CoreInit+0xd4>)
 800d2c6:	4013      	ands	r3, r2
 800d2c8:	687a      	ldr	r2, [r7, #4]
 800d2ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d2d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d105      	bne.n	800d2ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	68db      	ldr	r3, [r3, #12]
 800d2e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 faac 	bl	800d848 <USB_CoreReset>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]
 800d2f4:	e01a      	b.n	800d32c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f000 faa0 	bl	800d848 <USB_CoreReset>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d106      	bne.n	800d320 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d316:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	639a      	str	r2, [r3, #56]	; 0x38
 800d31e:	e005      	b.n	800d32c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d116      	bne.n	800d360 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d336:	b29a      	uxth	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d340:	4b0c      	ldr	r3, [pc, #48]	; (800d374 <USB_CoreInit+0xd8>)
 800d342:	4313      	orrs	r3, r2
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	689b      	ldr	r3, [r3, #8]
 800d34c:	f043 0206 	orr.w	r2, r3, #6
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f043 0220 	orr.w	r2, r3, #32
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d360:	7bfb      	ldrb	r3, [r7, #15]
}
 800d362:	4618      	mov	r0, r3
 800d364:	3710      	adds	r7, #16
 800d366:	46bd      	mov	sp, r7
 800d368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d36c:	b004      	add	sp, #16
 800d36e:	4770      	bx	lr
 800d370:	ffbdffbf 	.word	0xffbdffbf
 800d374:	03ee0000 	.word	0x03ee0000

0800d378 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f023 0201 	bic.w	r2, r3, #1
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	370c      	adds	r7, #12
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
 800d3a2:	460b      	mov	r3, r1
 800d3a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d3b6:	78fb      	ldrb	r3, [r7, #3]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d115      	bne.n	800d3e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	68db      	ldr	r3, [r3, #12]
 800d3c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d3c8:	2001      	movs	r0, #1
 800d3ca:	f7f5 f915 	bl	80025f8 <HAL_Delay>
      ms++;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d3d4:	6878      	ldr	r0, [r7, #4]
 800d3d6:	f000 fa29 	bl	800d82c <USB_GetMode>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d01e      	beq.n	800d41e <USB_SetCurrentMode+0x84>
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b31      	cmp	r3, #49	; 0x31
 800d3e4:	d9f0      	bls.n	800d3c8 <USB_SetCurrentMode+0x2e>
 800d3e6:	e01a      	b.n	800d41e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d3e8:	78fb      	ldrb	r3, [r7, #3]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d115      	bne.n	800d41a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68db      	ldr	r3, [r3, #12]
 800d3f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d3fa:	2001      	movs	r0, #1
 800d3fc:	f7f5 f8fc 	bl	80025f8 <HAL_Delay>
      ms++;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	3301      	adds	r3, #1
 800d404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 fa10 	bl	800d82c <USB_GetMode>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d005      	beq.n	800d41e <USB_SetCurrentMode+0x84>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b31      	cmp	r3, #49	; 0x31
 800d416:	d9f0      	bls.n	800d3fa <USB_SetCurrentMode+0x60>
 800d418:	e001      	b.n	800d41e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d41a:	2301      	movs	r3, #1
 800d41c:	e005      	b.n	800d42a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2b32      	cmp	r3, #50	; 0x32
 800d422:	d101      	bne.n	800d428 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	e000      	b.n	800d42a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d434:	b084      	sub	sp, #16
 800d436:	b580      	push	{r7, lr}
 800d438:	b086      	sub	sp, #24
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
 800d43e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d44e:	2300      	movs	r3, #0
 800d450:	613b      	str	r3, [r7, #16]
 800d452:	e009      	b.n	800d468 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	3340      	adds	r3, #64	; 0x40
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	2200      	movs	r2, #0
 800d460:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	3301      	adds	r3, #1
 800d466:	613b      	str	r3, [r7, #16]
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	2b0e      	cmp	r3, #14
 800d46c:	d9f2      	bls.n	800d454 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d470:	2b00      	cmp	r3, #0
 800d472:	d11c      	bne.n	800d4ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d482:	f043 0302 	orr.w	r3, r3, #2
 800d486:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	601a      	str	r2, [r3, #0]
 800d4ac:	e005      	b.n	800d4ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4cc:	4619      	mov	r1, r3
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	680b      	ldr	r3, [r1, #0]
 800d4d8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d10c      	bne.n	800d4fa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d104      	bne.n	800d4f0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 f965 	bl	800d7b8 <USB_SetDevSpeed>
 800d4ee:	e008      	b.n	800d502 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d4f0:	2101      	movs	r1, #1
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f960 	bl	800d7b8 <USB_SetDevSpeed>
 800d4f8:	e003      	b.n	800d502 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d4fa:	2103      	movs	r1, #3
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 f95b 	bl	800d7b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d502:	2110      	movs	r1, #16
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f8f3 	bl	800d6f0 <USB_FlushTxFifo>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d001      	beq.n	800d514 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f91f 	bl	800d758 <USB_FlushRxFifo>
 800d51a:	4603      	mov	r3, r0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d52a:	461a      	mov	r2, r3
 800d52c:	2300      	movs	r3, #0
 800d52e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d536:	461a      	mov	r2, r3
 800d538:	2300      	movs	r3, #0
 800d53a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d542:	461a      	mov	r2, r3
 800d544:	2300      	movs	r3, #0
 800d546:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d548:	2300      	movs	r3, #0
 800d54a:	613b      	str	r3, [r7, #16]
 800d54c:	e043      	b.n	800d5d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	015a      	lsls	r2, r3, #5
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	4413      	add	r3, r2
 800d556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d564:	d118      	bne.n	800d598 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d10a      	bne.n	800d582 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d578:	461a      	mov	r2, r3
 800d57a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	e013      	b.n	800d5aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d582:	693b      	ldr	r3, [r7, #16]
 800d584:	015a      	lsls	r2, r3, #5
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	4413      	add	r3, r2
 800d58a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d58e:	461a      	mov	r2, r3
 800d590:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d594:	6013      	str	r3, [r2, #0]
 800d596:	e008      	b.n	800d5aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	015a      	lsls	r2, r3, #5
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	4413      	add	r3, r2
 800d5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a4:	461a      	mov	r2, r3
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	015a      	lsls	r2, r3, #5
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	4413      	add	r3, r2
 800d5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5b6:	461a      	mov	r2, r3
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d5bc:	693b      	ldr	r3, [r7, #16]
 800d5be:	015a      	lsls	r2, r3, #5
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d5ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	3301      	adds	r3, #1
 800d5d4:	613b      	str	r3, [r7, #16]
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d3b7      	bcc.n	800d54e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d5de:	2300      	movs	r3, #0
 800d5e0:	613b      	str	r3, [r7, #16]
 800d5e2:	e043      	b.n	800d66c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d5f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5fa:	d118      	bne.n	800d62e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d10a      	bne.n	800d618 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d602:	693b      	ldr	r3, [r7, #16]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60e:	461a      	mov	r2, r3
 800d610:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	e013      	b.n	800d640 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d624:	461a      	mov	r2, r3
 800d626:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d62a:	6013      	str	r3, [r2, #0]
 800d62c:	e008      	b.n	800d640 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	015a      	lsls	r2, r3, #5
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	4413      	add	r3, r2
 800d636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d63a:	461a      	mov	r2, r3
 800d63c:	2300      	movs	r3, #0
 800d63e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	461a      	mov	r2, r3
 800d64e:	2300      	movs	r3, #0
 800d650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	015a      	lsls	r2, r3, #5
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d65e:	461a      	mov	r2, r3
 800d660:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d666:	693b      	ldr	r3, [r7, #16]
 800d668:	3301      	adds	r3, #1
 800d66a:	613b      	str	r3, [r7, #16]
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	429a      	cmp	r2, r3
 800d672:	d3b7      	bcc.n	800d5e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d67a:	691b      	ldr	r3, [r3, #16]
 800d67c:	68fa      	ldr	r2, [r7, #12]
 800d67e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d682:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d686:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2200      	movs	r2, #0
 800d68c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d694:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d105      	bne.n	800d6a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	f043 0210 	orr.w	r2, r3, #16
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	699a      	ldr	r2, [r3, #24]
 800d6ac:	4b0e      	ldr	r3, [pc, #56]	; (800d6e8 <USB_DevInit+0x2b4>)
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d005      	beq.n	800d6c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	699b      	ldr	r3, [r3, #24]
 800d6be:	f043 0208 	orr.w	r2, r3, #8
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d6c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d105      	bne.n	800d6d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	699a      	ldr	r2, [r3, #24]
 800d6d0:	4b06      	ldr	r3, [pc, #24]	; (800d6ec <USB_DevInit+0x2b8>)
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3718      	adds	r7, #24
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d6e4:	b004      	add	sp, #16
 800d6e6:	4770      	bx	lr
 800d6e8:	803c3800 	.word	0x803c3800
 800d6ec:	40000004 	.word	0x40000004

0800d6f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4a13      	ldr	r2, [pc, #76]	; (800d754 <USB_FlushTxFifo+0x64>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d901      	bls.n	800d710 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e01b      	b.n	800d748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	691b      	ldr	r3, [r3, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	daf2      	bge.n	800d6fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d718:	2300      	movs	r3, #0
 800d71a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	019b      	lsls	r3, r3, #6
 800d720:	f043 0220 	orr.w	r2, r3, #32
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	3301      	adds	r3, #1
 800d72c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	4a08      	ldr	r2, [pc, #32]	; (800d754 <USB_FlushTxFifo+0x64>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d901      	bls.n	800d73a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e006      	b.n	800d748 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	f003 0320 	and.w	r3, r3, #32
 800d742:	2b20      	cmp	r3, #32
 800d744:	d0f0      	beq.n	800d728 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3714      	adds	r7, #20
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr
 800d754:	00030d40 	.word	0x00030d40

0800d758 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d760:	2300      	movs	r3, #0
 800d762:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	3301      	adds	r3, #1
 800d768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4a11      	ldr	r2, [pc, #68]	; (800d7b4 <USB_FlushRxFifo+0x5c>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d901      	bls.n	800d776 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d772:	2303      	movs	r3, #3
 800d774:	e018      	b.n	800d7a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	691b      	ldr	r3, [r3, #16]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	daf2      	bge.n	800d764 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d77e:	2300      	movs	r3, #0
 800d780:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2210      	movs	r2, #16
 800d786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	3301      	adds	r3, #1
 800d78c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	4a08      	ldr	r2, [pc, #32]	; (800d7b4 <USB_FlushRxFifo+0x5c>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d901      	bls.n	800d79a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	e006      	b.n	800d7a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d0f0      	beq.n	800d788 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d7a6:	2300      	movs	r3, #0
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr
 800d7b4:	00030d40 	.word	0x00030d40

0800d7b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b085      	sub	sp, #20
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	78fb      	ldrb	r3, [r7, #3]
 800d7d2:	68f9      	ldr	r1, [r7, #12]
 800d7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7d8:	4313      	orrs	r3, r2
 800d7da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d7dc:	2300      	movs	r3, #0
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	3714      	adds	r7, #20
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr

0800d7ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d7ea:	b480      	push	{r7}
 800d7ec:	b085      	sub	sp, #20
 800d7ee:	af00      	add	r7, sp, #0
 800d7f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	68fa      	ldr	r2, [r7, #12]
 800d800:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d804:	f023 0303 	bic.w	r3, r3, #3
 800d808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d818:	f043 0302 	orr.w	r3, r3, #2
 800d81c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
}
 800d820:	4618      	mov	r0, r3
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	695b      	ldr	r3, [r3, #20]
 800d838:	f003 0301 	and.w	r3, r3, #1
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d848:	b480      	push	{r7}
 800d84a:	b085      	sub	sp, #20
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3301      	adds	r3, #1
 800d858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	4a13      	ldr	r2, [pc, #76]	; (800d8ac <USB_CoreReset+0x64>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d901      	bls.n	800d866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e01b      	b.n	800d89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	daf2      	bge.n	800d854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d86e:	2300      	movs	r3, #0
 800d870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	691b      	ldr	r3, [r3, #16]
 800d876:	f043 0201 	orr.w	r2, r3, #1
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	3301      	adds	r3, #1
 800d882:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	4a09      	ldr	r2, [pc, #36]	; (800d8ac <USB_CoreReset+0x64>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d901      	bls.n	800d890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d88c:	2303      	movs	r3, #3
 800d88e:	e006      	b.n	800d89e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	f003 0301 	and.w	r3, r3, #1
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d0f0      	beq.n	800d87e <USB_CoreReset+0x36>

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	00030d40 	.word	0x00030d40

0800d8b0 <__libc_init_array>:
 800d8b0:	b570      	push	{r4, r5, r6, lr}
 800d8b2:	4d0d      	ldr	r5, [pc, #52]	; (800d8e8 <__libc_init_array+0x38>)
 800d8b4:	4c0d      	ldr	r4, [pc, #52]	; (800d8ec <__libc_init_array+0x3c>)
 800d8b6:	1b64      	subs	r4, r4, r5
 800d8b8:	10a4      	asrs	r4, r4, #2
 800d8ba:	2600      	movs	r6, #0
 800d8bc:	42a6      	cmp	r6, r4
 800d8be:	d109      	bne.n	800d8d4 <__libc_init_array+0x24>
 800d8c0:	4d0b      	ldr	r5, [pc, #44]	; (800d8f0 <__libc_init_array+0x40>)
 800d8c2:	4c0c      	ldr	r4, [pc, #48]	; (800d8f4 <__libc_init_array+0x44>)
 800d8c4:	f000 f82e 	bl	800d924 <_init>
 800d8c8:	1b64      	subs	r4, r4, r5
 800d8ca:	10a4      	asrs	r4, r4, #2
 800d8cc:	2600      	movs	r6, #0
 800d8ce:	42a6      	cmp	r6, r4
 800d8d0:	d105      	bne.n	800d8de <__libc_init_array+0x2e>
 800d8d2:	bd70      	pop	{r4, r5, r6, pc}
 800d8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8d8:	4798      	blx	r3
 800d8da:	3601      	adds	r6, #1
 800d8dc:	e7ee      	b.n	800d8bc <__libc_init_array+0xc>
 800d8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e2:	4798      	blx	r3
 800d8e4:	3601      	adds	r6, #1
 800d8e6:	e7f2      	b.n	800d8ce <__libc_init_array+0x1e>
 800d8e8:	0800da40 	.word	0x0800da40
 800d8ec:	0800da40 	.word	0x0800da40
 800d8f0:	0800da40 	.word	0x0800da40
 800d8f4:	0800da44 	.word	0x0800da44

0800d8f8 <memcpy>:
 800d8f8:	440a      	add	r2, r1
 800d8fa:	4291      	cmp	r1, r2
 800d8fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d900:	d100      	bne.n	800d904 <memcpy+0xc>
 800d902:	4770      	bx	lr
 800d904:	b510      	push	{r4, lr}
 800d906:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d90a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d90e:	4291      	cmp	r1, r2
 800d910:	d1f9      	bne.n	800d906 <memcpy+0xe>
 800d912:	bd10      	pop	{r4, pc}

0800d914 <memset>:
 800d914:	4402      	add	r2, r0
 800d916:	4603      	mov	r3, r0
 800d918:	4293      	cmp	r3, r2
 800d91a:	d100      	bne.n	800d91e <memset+0xa>
 800d91c:	4770      	bx	lr
 800d91e:	f803 1b01 	strb.w	r1, [r3], #1
 800d922:	e7f9      	b.n	800d918 <memset+0x4>

0800d924 <_init>:
 800d924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d926:	bf00      	nop
 800d928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d92a:	bc08      	pop	{r3}
 800d92c:	469e      	mov	lr, r3
 800d92e:	4770      	bx	lr

0800d930 <_fini>:
 800d930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d932:	bf00      	nop
 800d934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d936:	bc08      	pop	{r3}
 800d938:	469e      	mov	lr, r3
 800d93a:	4770      	bx	lr
